
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 fc 00 00       	call   c000fd13 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a8 69 02 c0       	mov    eax,0xc00269a8
c0000025:	3d a8 69 02 c0       	cmp    eax,0xc00269a8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a8 69 02 c0       	push   0xc00269a8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a8 69 02 c0       	mov    eax,0xc00269a8
c0000051:	2d a8 69 02 c0       	sub    eax,0xc00269a8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a8 69 02 c0       	push   0xc00269a8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 00 24 02 c0       	mov    ebx,0xc0022400
c0000097:	81 eb fc 23 02 c0    	sub    ebx,0xc00223fc
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be fc 23 02 c0       	mov    esi,0xc00223fc
c00000a6:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a8 69 02 c0       	push   0xc00269a8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 80 02 c0       	push   0xc00280c8
c0000108:	68 a8 69 02 c0       	push   0xc00269a8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 77 62 01 00       	call   c0016524 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 86 43 01 00       	call   c001464b <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 55 62 01 00       	call   c0016524 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ce 67 01 00       	call   c0016abc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 fd 6c 01 00       	call   c0016ff4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 e0 02 c0 	lgdtd  ds:0xc002e0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 a2 ef 00 00       	jmp    c000f321 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 80 02 c0       	mov    ds:0xc00280e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 20 24 02 c0 02 	test   BYTE PTR [edx-0x3ffddbe0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 20 24 02 c0 01 	test   BYTE PTR [edx-0x3ffddbe0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 20 24 02 c0 08 	test   BYTE PTR [edx-0x3ffddbe0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 20 24 02 c0 08 	test   BYTE PTR [edx-0x3ffddbe0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 20 24 02 c0 04 	test   BYTE PTR [ecx-0x3ffddbe0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 20 24 02 c0 01 	test   BYTE PTR [edx-0x3ffddbe0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 81 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 81 02 c0    	mov    ecx,DWORD PTR ds:0xc002813c
c0000e2a:	c7 42 0c 34 81 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 81 02 c0 02 	test   BYTE PTR ds:0xc0028100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 84 02 c0    	dec    DWORD PTR ds:0xc0028450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 84 02 c0    	sub    DWORD PTR ds:0xc0028464,eax
c0000e8e:	e8 cf eb 00 00       	call   c000fa62 <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 dc ea 00 00       	call   c000fa04 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 b7 e9 00 00       	call   c000f9ce <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 b2 e9 00 00       	call   c000fa04 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 a8 e8 00 00       	call   c000f9ce <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 c3 e7 00 00       	call   c000f9ce <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 ad e7 00 00       	call   c000f9ce <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 81 02 c0    	mov    edi,DWORD PTR ds:0xc0028100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 81 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 81 02 c0 	lea    edx,[eax*8-0x3ffd7ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028140
c0001313:	81 fb 34 81 02 c0    	cmp    ebx,0xc0028134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 81 02 c0       	cmp    eax,0xc0028134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 81 02 c0    	cmp    DWORD PTR ds:0xc0028130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 81 02 c0       	mov    ds:0xc002813c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 81 02 c0       	mov    ds:0xc0028130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000136a:	c7 40 0c 34 81 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 80 02 c0 	lea    ebp,[edx*4-0x3ffd7f08]
c00013b3:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 81 02 c0 	lea    ecx,[edx*4-0x3ffd7f00]
c00013ce:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 84 02 c0 	or     DWORD PTR [edi*4-0x3ffd7bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 81 02 c0 	lea    eax,[eax*8-0x3ffd7ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,ecx
c0001488:	89 0d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,ecx
c000148e:	c7 41 08 34 81 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028134
c0001495:	c7 41 0c 34 81 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 81 02 c0 	lea    edx,[ecx*8-0x3ffd7ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 81 02 c0 	lea    edx,[eax*4-0x3ffd7ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 84 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edi
c000155b:	89 3d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edi
c0001561:	c7 47 08 34 81 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028134
c0001568:	c7 47 0c 34 81 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 81 02 c0    	mov    DWORD PTR ds:0xc0028130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 81 02 c0       	mov    edx,0xc0028100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028454
c00016b6:	c7 05 54 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 84 02 c0    	push   DWORD PTR ds:0xc002845c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 84 02 c0       	mov    eax,ds:0xc002845c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 81 02 c0 00 	cmp    DWORD PTR ds:0xc002812c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 81 02 c0       	mov    eax,0xc0028134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 84 02 c0       	cmp    eax,0xc002842c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 84 02 c0       	mov    eax,ds:0xc0028468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 24 25 02 c0 	jmp    DWORD PTR [eax*4-0x3ffddadc]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 81 02 c0       	mov    ds:0xc0028100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 84 02 c0    	mov    DWORD PTR ds:0xc0028444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 84 02 c0    	mov    DWORD PTR ds:0xc0028448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 7d 9c 01 00       	jmp    c001bc38 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 a7 9c 01 00       	jmp    c001bc78 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 c8 9c 01 00       	jmp    c001bcb8 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 80 26 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd980]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 80 26 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd980]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 48 55 02 c0       	mov    edx,0xc0025548
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 3c 25 02 c0       	mov    edx,0xc002253c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 84 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 84 02 c0    	mov    ax,ds:0xc0028480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 84 02 c0    	mov    ds:0xc0028480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 42 25 02 c0       	mov    eax,0xc0022542
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 00 26 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdda00]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 4b 25 02 c0       	mov    eax,0xc002254b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 80 26 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdd980]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 84 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 d0 25 02 c0       	mov    eax,0xc00225d0
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb c0 25 02 c0       	mov    ebx,0xc00225c0
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 a0 25 02 c0       	mov    eax,0xc00225a0
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 b0 25 02 c0       	mov    eax,0xc00225b0
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 52 25 02 c0       	mov    edx,0xc0022552
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 5e 25 02 c0       	mov    edx,0xc002255e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba 72 25 02 c0       	mov    edx,0xc0022572
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 a1 9c 00 00       	call   c000fae4 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 99 9c 00 00       	call   c000faf4 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c a0 29 02 c0 	mov    DWORD PTR [esp+0xc],0xc00229a0
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 a0 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc00229a0
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 a0 27 02 c0       	mov    eax,0xc00227a0
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 e0 26 02 c0       	mov    eax,0xc00226e0
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 a0 26 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd960]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 a0 2a 02 c0       	push   0xc0022aa0
c0006327:	e8 b0 62 01 00       	call   c001c5dc <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 ae 2a 02 c0       	push   0xc0022aae
c000635f:	e8 78 62 01 00       	call   c001c5dc <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 85 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd7a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 e1 61 01 00       	call   c001c580 <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 80 02 c0       	mov    eax,0xc0028080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 80 02 c0       	mov    eax,0xc0028020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 bd 2a 02 c0       	push   0xc0022abd
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 8e 02 c0       	mov    ecx,0xc0028e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 85 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd7ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd7ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7abc],esi
c000675b:	c7 87 48 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7ab8],0x0
c0006765:	89 87 40 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7a30],0x0
c000677d:	89 87 4c 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 85 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd7a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c00067f6:	8b 9d 4c 85 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd7ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 85 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd7ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 80 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7fe0]
c000688d:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 85 02 c0    	add    DWORD PTR [ebp-0x3ffd7ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00068ef:	8d 8d 40 85 02 c0    	lea    ecx,[ebp-0x3ffd7ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 85 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd7ab4]
c000692c:	05 40 85 02 c0       	add    eax,0xc0028540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 85 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd7ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 85 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd7ac0],0x0
c00069ec:	8d b8 40 85 02 c0    	lea    edi,[eax-0x3ffd7ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 c0 2a 02 c0       	push   0xc0022ac0
c0006a0f:	e8 c8 5b 01 00       	call   c001c5dc <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 d6 5b 01 00       	call   c001c5f8 <iso_kprintfd>
c0006a22:	c7 04 24 c5 2a 02 c0 	mov    DWORD PTR [esp],0xc0022ac5
c0006a29:	e8 ae 5b 01 00       	call   c001c5dc <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7ac0]
c0006a35:	e8 be 5b 01 00       	call   c001c5f8 <iso_kprintfd>
c0006a3a:	c7 04 24 cb 2a 02 c0 	mov    DWORD PTR [esp],0xc0022acb
c0006a41:	e8 96 5b 01 00       	call   c001c5dc <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7abc]
c0006a4d:	e8 a6 5b 01 00       	call   c001c5f8 <iso_kprintfd>
c0006a52:	c7 04 24 d1 2a 02 c0 	mov    DWORD PTR [esp],0xc0022ad1
c0006a59:	e8 7e 5b 01 00       	call   c001c5dc <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7a30]
c0006a65:	e8 8e 5b 01 00       	call   c001c5f8 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 85 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd7ab8]
c0006acb:	81 c2 40 85 02 c0    	add    edx,0xc0028540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 85 02 c0    	lea    ebp,[edi-0x3ffd7aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 85 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd7aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 bd 2a 02 c0       	push   0xc0022abd
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 85 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd7aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7ab0],eax
c0006c0a:	89 93 54 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7aac],edx
c0006c10:	81 c3 40 85 02 c0    	add    ebx,0xc0028540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 85 02 c0    	lea    eax,[edi-0x3ffd7ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 da 2a 02 c0       	push   0xc0022ada
c0006c32:	e8 a5 59 01 00       	call   c001c5dc <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 80 02 c0       	mov    ds:0xc0028060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb4,0x0
c0006c67:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 e5 2a 02 c0       	push   0xc0022ae5
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 8e 02 c0       	mov    ds:0xc0028eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 ec 2a 02 c0       	push   0xc0022aec
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 80 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd7f80]
c0006d05:	bf 80 8e 02 c0       	mov    edi,0xc0028e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 8e 02 c0       	mov    eax,0xc0028e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 8e 02 c0       	mov    ds:0xc0028ea8,eax
c0006d28:	b8 8a 8e 02 c0       	mov    eax,0xc0028e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 f3 2a 02 c0       	push   0xc0022af3
c0006d49:	e8 8e 58 01 00       	call   c001c5dc <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 fe 2a 02 c0       	push   0xc0022afe
c0006d64:	e8 73 58 01 00       	call   c001c5dc <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 85 02 c0       	push   0xc0028540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0028540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 51 8d 00 00       	call   c000fae4 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 8e 02 c0       	mov    ds:0xc0028eb0,eax
c0006d9f:	e8 40 8d 00 00       	call   c000fae4 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 85 02 c0       	mov    ds:0xc0028520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 2b 8d 00 00       	call   c000fae4 <malloc>
c0006db9:	89 04 9d 80 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 12 8d 00 00       	call   c000fae4 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7f80]
c0006dff:	e8 f0 8c 00 00       	call   c000faf4 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 e2 8c 00 00       	call   c000faf4 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 8e 02 c0       	mov    eax,ds:0xc0028eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 c8 8c 00 00       	call   c000faf4 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 b3 8c 00 00       	call   c000faf4 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 0c             	sub    esp,0xc
c0006f55:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f60:	74 08                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f62:	83 c4 0c             	add    esp,0xc
c0006f65:	5b                   	pop    ebx
c0006f66:	5e                   	pop    esi
c0006f67:	5f                   	pop    edi
c0006f68:	5d                   	pop    ebp
c0006f69:	c3                   	ret    
c0006f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f6e:	31 ff                	xor    edi,edi
c0006f70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f77:	85 c0                	test   eax,eax
c0006f79:	74 e7                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006f7b:	8d 77 01             	lea    esi,[edi+0x1]
c0006f7e:	83 f8 25             	cmp    eax,0x25
c0006f81:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f84:	75 47                	jne    c0006fcd <Dbg::kprintf(char const*, ...)+0x7f>
c0006f86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f89:	83 c7 02             	add    edi,0x2
c0006f8c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006f8f:	83 e8 25             	sub    eax,0x25
c0006f92:	0f b6 c0             	movzx  eax,al
c0006f95:	83 f8 53             	cmp    eax,0x53
c0006f98:	0f 87 ce 00 00 00    	ja     c000706c <Dbg::kprintf(char const*, ...)+0x11e>
c0006f9e:	ff 24 85 10 2b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd4f0]
c0006fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fa9:	89 c8                	mov    eax,ecx
c0006fab:	83 c1 04             	add    ecx,0x4
c0006fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fb2:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fb4:	55                   	push   ebp
c0006fb5:	e8 55 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fba:	58                   	pop    eax
c0006fbb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fbe:	85 c0                	test   eax,eax
c0006fc0:	74 a0                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006fc2:	8d 77 01             	lea    esi,[edi+0x1]
c0006fc5:	83 f8 25             	cmp    eax,0x25
c0006fc8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fcb:	74 b9                	je     c0006f86 <Dbg::kprintf(char const*, ...)+0x38>
c0006fcd:	50                   	push   eax
c0006fce:	89 f7                	mov    edi,esi
c0006fd0:	e8 fb fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fd5:	89 ee                	mov    esi,ebp
c0006fd7:	58                   	pop    eax
c0006fd8:	eb e1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006fda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fde:	89 c8                	mov    eax,ecx
c0006fe0:	83 c1 04             	add    ecx,0x4
c0006fe3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fe9:	50                   	push   eax
c0006fea:	e8 01 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006fef:	58                   	pop    eax
c0006ff0:	eb c9                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ff6:	89 d0                	mov    eax,edx
c0006ff8:	83 c2 04             	add    edx,0x4
c0006ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007001:	50                   	push   eax
c0007002:	e8 08 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007007:	58                   	pop    eax
c0007008:	eb b1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000700a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700e:	89 d0                	mov    eax,edx
c0007010:	83 c2 04             	add    edx,0x4
c0007013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007017:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000701a:	50                   	push   eax
c000701b:	e8 b0 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007020:	58                   	pop    eax
c0007021:	eb 98                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007023:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	83 c1 04             	add    ecx,0x4
c000702c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007030:	6a 10                	push   0x10
c0007032:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007034:	51                   	push   ecx
c0007035:	e8 f3 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000703a:	5d                   	pop    ebp
c000703b:	58                   	pop    eax
c000703c:	e9 7a ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007045:	89 d0                	mov    eax,edx
c0007047:	83 c2 08             	add    edx,0x8
c000704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000704e:	6a 10                	push   0x10
c0007050:	8b 00                	mov    eax,DWORD PTR [eax]
c0007052:	50                   	push   eax
c0007053:	e8 d5 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c0007058:	58                   	pop    eax
c0007059:	5a                   	pop    edx
c000705a:	e9 5c ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000705f:	6a 25                	push   0x25
c0007061:	e8 6a fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007066:	5a                   	pop    edx
c0007067:	e9 4f ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000706c:	6a 25                	push   0x25
c000706e:	e8 5d fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007073:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007077:	50                   	push   eax
c0007078:	e8 53 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707d:	5a                   	pop    edx
c000707e:	59                   	pop    ecx
c000707f:	e9 37 ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>

c0007084 <KiUbsanPrintDetails(char const*, void*)>:
c0007084:	83 ec 1c             	sub    esp,0x1c
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000708e:	68 60 2c 02 c0       	push   0xc0022c60
c0007093:	e8 b6 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000709f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00070a9:	83 ec 08             	sub    esp,0x8
c00070ac:	50                   	push   eax
c00070ad:	68 74 2c 02 c0       	push   0xc0022c74
c00070b2:	e8 97 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b7:	83 c4 10             	add    esp,0x10
c00070ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 7e 2c 02 c0       	push   0xc0022c7e
c00070ca:	e8 7f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 88 2c 02 c0       	push   0xc0022c88
c00070e2:	e8 67 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	90                   	nop
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <__ubsan_handle_type_mismatch_v1>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	83 ec 08             	sub    esp,0x8
c00070f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070fa:	68 cc 2d 02 c0       	push   0xc0022dcc
c00070ff:	e8 80 ff ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000710c:	75 16                	jne    c0007124 <__ubsan_handle_type_mismatch_v1+0x34>
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 92 2c 02 c0       	push   0xc0022c92
c0007116:	e8 33 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	e9 91 00 00 00       	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007123:	90                   	nop
c0007124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000712b:	85 c0                	test   eax,eax
c000712d:	74 29                	je     c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007136:	83 e8 01             	sub    eax,0x1
c0007139:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000713d:	75 19                	jne    c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007146:	68 ec 2d 02 c0       	push   0xc0022dec
c000714b:	e8 fe fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	eb 5f                	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	68 a7 2c 02 c0       	push   0xc0022ca7
c0007160:	e8 e9 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000716f:	0f b6 c0             	movzx  eax,al
c0007172:	83 ec 08             	sub    esp,0x8
c0007175:	50                   	push   eax
c0007176:	68 c1 2c 02 c0       	push   0xc0022cc1
c000717b:	e8 ce fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007180:	83 c4 10             	add    esp,0x10
c0007183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000718a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000718d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007195:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007198:	0f b6 c0             	movzx  eax,al
c000719b:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c00071a2:	51                   	push   ecx
c00071a3:	52                   	push   edx
c00071a4:	50                   	push   eax
c00071a5:	68 14 2e 02 c0       	push   0xc0022e14
c00071aa:	e8 9f fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071af:	83 c4 10             	add    esp,0x10
c00071b2:	66 90                	xchg   ax,ax
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 cc 2d 02 c0       	push   0xc0022dcc
c00071bc:	e8 69 8c 00 00       	call   c000fe2a <KePanic(char const*)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	90                   	nop
c00071c5:	83 c4 0c             	add    esp,0xc
c00071c8:	c3                   	ret    
c00071c9:	8d 76 00             	lea    esi,[esi+0x0]

c00071cc <__ubsan_handle_pointer_overflow>:
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	83 ec 08             	sub    esp,0x8
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	68 5c 2e 02 c0       	push   0xc0022e5c
c00071db:	e8 a4 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00071e0:	83 c4 10             	add    esp,0x10
c00071e3:	83 ec 0c             	sub    esp,0xc
c00071e6:	68 5c 2e 02 c0       	push   0xc0022e5c
c00071eb:	e8 3a 8c 00 00       	call   c000fe2a <KePanic(char const*)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	90                   	nop
c00071f4:	83 c4 0c             	add    esp,0xc
c00071f7:	c3                   	ret    

c00071f8 <__ubsan_handle_out_of_bounds>:
c00071f8:	83 ec 0c             	sub    esp,0xc
c00071fb:	83 ec 08             	sub    esp,0x8
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	68 cc 2c 02 c0       	push   0xc0022ccc
c0007207:	e8 78 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	68 cc 2c 02 c0       	push   0xc0022ccc
c0007217:	e8 0e 8c 00 00       	call   c000fe2a <KePanic(char const*)>
c000721c:	83 c4 10             	add    esp,0x10
c000721f:	90                   	nop
c0007220:	83 c4 0c             	add    esp,0xc
c0007223:	c3                   	ret    

c0007224 <__ubsan_handle_add_overflow>:
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	83 ec 08             	sub    esp,0x8
c000722a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000722e:	68 e9 2c 02 c0       	push   0xc0022ce9
c0007233:	e8 4c fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007238:	83 c4 10             	add    esp,0x10
c000723b:	83 ec 0c             	sub    esp,0xc
c000723e:	68 e9 2c 02 c0       	push   0xc0022ce9
c0007243:	e8 e2 8b 00 00       	call   c000fe2a <KePanic(char const*)>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	90                   	nop
c000724c:	83 c4 0c             	add    esp,0xc
c000724f:	c3                   	ret    

c0007250 <__ubsan_handle_load_invalid_value>:
c0007250:	83 ec 0c             	sub    esp,0xc
c0007253:	83 ec 08             	sub    esp,0x8
c0007256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725a:	68 7c 2e 02 c0       	push   0xc0022e7c
c000725f:	e8 20 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007264:	83 c4 10             	add    esp,0x10
c0007267:	83 ec 0c             	sub    esp,0xc
c000726a:	68 7c 2e 02 c0       	push   0xc0022e7c
c000726f:	e8 b6 8b 00 00       	call   c000fe2a <KePanic(char const*)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	90                   	nop
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	c3                   	ret    

c000727c <__ubsan_handle_divrem_overflow>:
c000727c:	83 ec 0c             	sub    esp,0xc
c000727f:	83 ec 08             	sub    esp,0x8
c0007282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007286:	68 a0 2e 02 c0       	push   0xc0022ea0
c000728b:	e8 f4 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007290:	83 c4 10             	add    esp,0x10
c0007293:	83 ec 0c             	sub    esp,0xc
c0007296:	68 a0 2e 02 c0       	push   0xc0022ea0
c000729b:	e8 8a 8b 00 00       	call   c000fe2a <KePanic(char const*)>
c00072a0:	83 c4 10             	add    esp,0x10
c00072a3:	90                   	nop
c00072a4:	83 c4 0c             	add    esp,0xc
c00072a7:	c3                   	ret    

c00072a8 <__ubsan_handle_mul_overflow>:
c00072a8:	83 ec 0c             	sub    esp,0xc
c00072ab:	83 ec 08             	sub    esp,0x8
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	68 05 2d 02 c0       	push   0xc0022d05
c00072b7:	e8 c8 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072bc:	83 c4 10             	add    esp,0x10
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 05 2d 02 c0       	push   0xc0022d05
c00072c7:	e8 5e 8b 00 00       	call   c000fe2a <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	90                   	nop
c00072d0:	83 c4 0c             	add    esp,0xc
c00072d3:	c3                   	ret    

c00072d4 <__ubsan_handle_sub_overflow>:
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072de:	68 21 2d 02 c0       	push   0xc0022d21
c00072e3:	e8 9c fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 21 2d 02 c0       	push   0xc0022d21
c00072f3:	e8 32 8b 00 00       	call   c000fe2a <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	90                   	nop
c00072fc:	83 c4 0c             	add    esp,0xc
c00072ff:	c3                   	ret    

c0007300 <__ubsan_handle_shift_out_of_bounds>:
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	83 ec 08             	sub    esp,0x8
c0007306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730a:	68 c0 2e 02 c0       	push   0xc0022ec0
c000730f:	e8 70 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 c0 2e 02 c0       	push   0xc0022ec0
c000731f:	e8 06 8b 00 00       	call   c000fe2a <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	90                   	nop
c0007328:	83 c4 0c             	add    esp,0xc
c000732b:	c3                   	ret    

c000732c <__ubsan_handle_negate_overflow>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	83 ec 08             	sub    esp,0x8
c0007332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007336:	68 e4 2e 02 c0       	push   0xc0022ee4
c000733b:	e8 44 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007340:	83 c4 10             	add    esp,0x10
c0007343:	83 ec 0c             	sub    esp,0xc
c0007346:	68 e4 2e 02 c0       	push   0xc0022ee4
c000734b:	e8 da 8a 00 00       	call   c000fe2a <KePanic(char const*)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	90                   	nop
c0007354:	83 c4 0c             	add    esp,0xc
c0007357:	c3                   	ret    

c0007358 <KiIsHashInTable(unsigned short)>:
c0007358:	0f b7 d0             	movzx  edx,ax
c000735b:	83 e0 07             	and    eax,0x7
c000735e:	c1 fa 03             	sar    edx,0x3
c0007361:	88 c1                	mov    cl,al
c0007363:	0f b6 92 00 93 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd6d00]
c000736a:	d3 fa                	sar    edx,cl
c000736c:	89 d0                	mov    eax,edx
c000736e:	83 e0 01             	and    eax,0x1
c0007371:	c3                   	ret    

c0007372 <KiSetHashInTable(unsigned short, bool)>:
c0007372:	56                   	push   esi
c0007373:	53                   	push   ebx
c0007374:	0f b7 d8             	movzx  ebx,ax
c0007377:	c1 fb 03             	sar    ebx,0x3
c000737a:	83 e0 07             	and    eax,0x7
c000737d:	89 c1                	mov    ecx,eax
c000737f:	b8 01 00 00 00       	mov    eax,0x1
c0007384:	0f b6 b3 00 93 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd6d00]
c000738b:	d3 e0                	shl    eax,cl
c000738d:	84 d2                	test   dl,dl
c000738f:	74 04                	je     c0007395 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007391:	09 f0                	or     eax,esi
c0007393:	eb 04                	jmp    c0007399 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007395:	f7 d0                	not    eax
c0007397:	21 f0                	and    eax,esi
c0007399:	88 83 00 93 02 c0    	mov    BYTE PTR [ebx-0x3ffd6d00],al
c000739f:	5b                   	pop    ebx
c00073a0:	5e                   	pop    esi
c00073a1:	c3                   	ret    

c00073a2 <KiFlushSymlinkChanges()>:
c00073a2:	57                   	push   edi
c00073a3:	56                   	push   esi
c00073a4:	53                   	push   ebx
c00073a5:	83 ec 1c             	sub    esp,0x1c
c00073a8:	68 14 01 00 00       	push   0x114
c00073ad:	e8 32 87 00 00       	call   c000fae4 <malloc>
c00073b2:	83 c4 0c             	add    esp,0xc
c00073b5:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00073bb:	68 03 2f 02 c0       	push   0xc0022f03
c00073c0:	50                   	push   eax
c00073c1:	89 c3                	mov    ebx,eax
c00073c3:	e8 64 0d 00 00       	call   c000812c <File::File(char const*, Process*)>
c00073c8:	83 c4 10             	add    esp,0x10
c00073cb:	85 db                	test   ebx,ebx
c00073cd:	75 10                	jne    c00073df <KiFlushSymlinkChanges()+0x3d>
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	68 21 2f 02 c0       	push   0xc0022f21
c00073d7:	e8 4e 8a 00 00       	call   c000fe2a <KePanic(char const*)>
c00073dc:	83 c4 10             	add    esp,0x10
c00073df:	50                   	push   eax
c00073e0:	50                   	push   eax
c00073e1:	6a 06                	push   0x6
c00073e3:	53                   	push   ebx
c00073e4:	e8 61 0d 00 00       	call   c000814a <File::open(FileOpenMode)>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 10                	je     c0007400 <KiFlushSymlinkChanges()+0x5e>
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	68 3b 2f 02 c0       	push   0xc0022f3b
c00073f8:	e8 2d 8a 00 00       	call   c000fe2a <KePanic(char const*)>
c00073fd:	83 c4 10             	add    esp,0x10
c0007400:	31 f6                	xor    esi,esi
c0007402:	39 35 c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,esi
c0007408:	7e 70                	jle    c000747a <KiFlushSymlinkChanges()+0xd8>
c000740a:	83 ec 0c             	sub    esp,0xc
c000740d:	89 f0                	mov    eax,esi
c000740f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007411:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007415:	c1 e0 08             	shl    eax,0x8
c0007418:	57                   	push   edi
c0007419:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000741e:	50                   	push   eax
c000741f:	6a 00                	push   0x0
c0007421:	68 00 01 00 00       	push   0x100
c0007426:	53                   	push   ebx
c0007427:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007435:	74 10                	je     c0007447 <KiFlushSymlinkChanges()+0xa5>
c0007437:	83 ec 0c             	sub    esp,0xc
c000743a:	68 55 2f 02 c0       	push   0xc0022f55
c000743f:	e8 e6 89 00 00       	call   c000fe2a <KePanic(char const*)>
c0007444:	83 c4 10             	add    esp,0x10
c0007447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007449:	8d 14 f5 e0 8e 02 c0 	lea    edx,[esi*8-0x3ffd7120]
c0007450:	83 ec 0c             	sub    esp,0xc
c0007453:	57                   	push   edi
c0007454:	52                   	push   edx
c0007455:	6a 00                	push   0x0
c0007457:	6a 08                	push   0x8
c0007459:	53                   	push   ebx
c000745a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000745d:	83 c4 20             	add    esp,0x20
c0007460:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007465:	74 10                	je     c0007477 <KiFlushSymlinkChanges()+0xd5>
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	68 6f 2f 02 c0       	push   0xc0022f6f
c000746f:	e8 b6 89 00 00       	call   c000fe2a <KePanic(char const*)>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	46                   	inc    esi
c0007478:	eb 88                	jmp    c0007402 <KiFlushSymlinkChanges()+0x60>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	53                   	push   ebx
c000747e:	e8 25 0d 00 00       	call   c00081a8 <File::close()>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	85 db                	test   ebx,ebx
c0007488:	74 0c                	je     c0007496 <KiFlushSymlinkChanges()+0xf4>
c000748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000748c:	83 ec 0c             	sub    esp,0xc
c000748f:	53                   	push   ebx
c0007490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	5b                   	pop    ebx
c00074a4:	5e                   	pop    esi
c00074a5:	5f                   	pop    edi
c00074a6:	c3                   	ret    

c00074a7 <KiDeinitialiseSymlinks(void*)>:
c00074a7:	e9 f6 fe ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>

c00074ac <KiGetSymlinkHash(char const*)>:
c00074ac:	53                   	push   ebx
c00074ad:	89 c3                	mov    ebx,eax
c00074af:	83 ec 14             	sub    esp,0x14
c00074b2:	50                   	push   eax
c00074b3:	e8 c8 90 ff ff       	call   c0000580 <strlen>
c00074b8:	5a                   	pop    edx
c00074b9:	59                   	pop    ecx
c00074ba:	50                   	push   eax
c00074bb:	53                   	push   ebx
c00074bc:	e8 24 6e 00 00       	call   c000e2e5 <KeCalculateCRC32(unsigned char*, int)>
c00074c1:	83 c4 18             	add    esp,0x18
c00074c4:	5b                   	pop    ebx
c00074c5:	89 c2                	mov    edx,eax
c00074c7:	c1 ea 10             	shr    edx,0x10
c00074ca:	31 d0                	xor    eax,edx
c00074cc:	c3                   	ret    

c00074cd <KiCreateSymlinkID()>:
c00074cd:	55                   	push   ebp
c00074ce:	57                   	push   edi
c00074cf:	56                   	push   esi
c00074d0:	53                   	push   ebx
c00074d1:	31 db                	xor    ebx,ebx
c00074d3:	83 ec 1c             	sub    esp,0x1c
c00074d6:	e8 3e 93 00 00       	call   c0010819 <KeRand()>
c00074db:	8b 2d 00 b3 02 c0    	mov    ebp,DWORD PTR ds:0xc002b300
c00074e1:	31 d2                	xor    edx,edx
c00074e3:	43                   	inc    ebx
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074e9:	89 ee                	mov    esi,ebp
c00074eb:	89 0d 00 b3 02 c0    	mov    DWORD PTR ds:0xc002b300,ecx
c00074f1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00074f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074f9:	c1 e0 1f             	shl    eax,0x1f
c00074fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007506:	75 10                	jne    c0007518 <KiCreateSymlinkID()+0x4b>
c0007508:	83 ec 0c             	sub    esp,0xc
c000750b:	68 89 2f 02 c0       	push   0xc0022f89
c0007510:	e8 15 89 00 00       	call   c000fe2a <KePanic(char const*)>
c0007515:	83 c4 10             	add    esp,0x10
c0007518:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000751c:	75 06                	jne    c0007524 <KiCreateSymlinkID()+0x57>
c000751e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007522:	74 b2                	je     c00074d6 <KiCreateSymlinkID()+0x9>
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000752c:	83 c4 1c             	add    esp,0x1c
c000752f:	5b                   	pop    ebx
c0007530:	31 f0                	xor    eax,esi
c0007532:	5e                   	pop    esi
c0007533:	31 fa                	xor    edx,edi
c0007535:	5f                   	pop    edi
c0007536:	5d                   	pop    ebp
c0007537:	c3                   	ret    

c0007538 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007538:	53                   	push   ebx
c0007539:	83 ec 0c             	sub    esp,0xc
c000753c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007544:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000754d:	68 00 01 00 00       	push   0x100
c0007552:	6a 00                	push   0x0
c0007554:	89 0c c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],ecx
c000755b:	89 14 c5 e0 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7120],edx
c0007562:	c1 e0 08             	shl    eax,0x8
c0007565:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000756a:	50                   	push   eax
c000756b:	e8 80 8f ff ff       	call   c00004f0 <memset>
c0007570:	58                   	pop    eax
c0007571:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007576:	5a                   	pop    edx
c0007577:	c1 e0 08             	shl    eax,0x8
c000757a:	53                   	push   ebx
c000757b:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007580:	50                   	push   eax
c0007581:	e8 ca 90 ff ff       	call   c0000650 <strcpy>
c0007586:	89 d8                	mov    eax,ebx
c0007588:	e8 1f ff ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c000758d:	ba 01 00 00 00       	mov    edx,0x1
c0007592:	0f b7 c0             	movzx  eax,ax
c0007595:	e8 d8 fd ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c000759a:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	40                   	inc    eax
c00075a3:	a3 c0 8e 02 c0       	mov    ds:0xc0028ec0,eax
c00075a8:	83 f8 03             	cmp    eax,0x3
c00075ab:	7e 09                	jle    c00075b6 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075ad:	83 c4 08             	add    esp,0x8
c00075b0:	5b                   	pop    ebx
c00075b1:	e9 ec fd ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>
c00075b6:	83 c4 08             	add    esp,0x8
c00075b9:	5b                   	pop    ebx
c00075ba:	c3                   	ret    

c00075bb <KeInitialiseSymlinks()>:
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	53                   	push   ebx
c00075be:	81 ec 14 01 00 00    	sub    esp,0x114
c00075c4:	68 00 20 00 00       	push   0x2000
c00075c9:	6a 00                	push   0x0
c00075cb:	68 00 93 02 c0       	push   0xc0029300
c00075d0:	c7 05 00 b3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b300,0x0
c00075da:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00075e4:	e8 07 8f ff ff       	call   c00004f0 <memset>
c00075e9:	59                   	pop    ecx
c00075ea:	5b                   	pop    ebx
c00075eb:	6a 00                	push   0x0
c00075ed:	68 a7 74 00 c0       	push   0xc00074a7
c00075f2:	e8 de 5a 00 00       	call   c000d0d5 <KeRegisterAtexit(void (*)(void*), void*)>
c00075f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00075fe:	e8 e1 84 00 00       	call   c000fae4 <malloc>
c0007603:	83 c4 0c             	add    esp,0xc
c0007606:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000760c:	68 03 2f 02 c0       	push   0xc0022f03
c0007611:	50                   	push   eax
c0007612:	89 c3                	mov    ebx,eax
c0007614:	e8 13 0b 00 00       	call   c000812c <File::File(char const*, Process*)>
c0007619:	83 c4 10             	add    esp,0x10
c000761c:	85 db                	test   ebx,ebx
c000761e:	75 10                	jne    c0007630 <KeInitialiseSymlinks()+0x75>
c0007620:	83 ec 0c             	sub    esp,0xc
c0007623:	68 92 2f 02 c0       	push   0xc0022f92
c0007628:	e8 fd 87 00 00       	call   c000fe2a <KePanic(char const*)>
c000762d:	83 c4 10             	add    esp,0x10
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	53                   	push   ebx
c0007634:	e8 d5 0d 00 00       	call   c000840e <File::exists()>
c0007639:	83 c4 10             	add    esp,0x10
c000763c:	84 c0                	test   al,al
c000763e:	75 3a                	jne    c000767a <KeInitialiseSymlinks()+0xbf>
c0007640:	52                   	push   edx
c0007641:	52                   	push   edx
c0007642:	6a 12                	push   0x12
c0007644:	53                   	push   ebx
c0007645:	e8 00 0b 00 00       	call   c000814a <File::open(FileOpenMode)>
c000764a:	83 c4 10             	add    esp,0x10
c000764d:	85 c0                	test   eax,eax
c000764f:	74 10                	je     c0007661 <KeInitialiseSymlinks()+0xa6>
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	68 af 2f 02 c0       	push   0xc0022faf
c0007659:	e8 cc 87 00 00       	call   c000fe2a <KePanic(char const*)>
c000765e:	83 c4 10             	add    esp,0x10
c0007661:	83 ec 0c             	sub    esp,0xc
c0007664:	53                   	push   ebx
c0007665:	e8 3e 0b 00 00       	call   c00081a8 <File::close()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	85 db                	test   ebx,ebx
c000766f:	0f 84 9e 00 00 00    	je     c0007713 <KeInitialiseSymlinks()+0x158>
c0007675:	e9 8d 00 00 00       	jmp    c0007707 <KeInitialiseSymlinks()+0x14c>
c000767a:	50                   	push   eax
c000767b:	50                   	push   eax
c000767c:	6a 01                	push   0x1
c000767e:	53                   	push   ebx
c000767f:	e8 c6 0a 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 c0                	test   eax,eax
c0007689:	74 10                	je     c000769b <KeInitialiseSymlinks()+0xe0>
c000768b:	83 ec 0c             	sub    esp,0xc
c000768e:	68 cc 2f 02 c0       	push   0xc0022fcc
c0007693:	e8 92 87 00 00       	call   c000fe2a <KePanic(char const*)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	ff 05 00 b3 02 c0    	inc    DWORD PTR ds:0xc002b300
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076aa:	57                   	push   edi
c00076ab:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076af:	56                   	push   esi
c00076b0:	6a 00                	push   0x0
c00076b2:	68 00 01 00 00       	push   0x100
c00076b7:	53                   	push   ebx
c00076b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076c6:	75 33                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076cd:	57                   	push   edi
c00076ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076d2:	52                   	push   edx
c00076d3:	6a 00                	push   0x0
c00076d5:	6a 08                	push   0x8
c00076d7:	53                   	push   ebx
c00076d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076db:	83 c4 20             	add    esp,0x20
c00076de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076e3:	75 16                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076e5:	89 f0                	mov    eax,esi
c00076e7:	e8 c0 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c00076ec:	ba 01 00 00 00       	mov    edx,0x1
c00076f1:	0f b7 c0             	movzx  eax,ax
c00076f4:	e8 79 fc ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c00076f9:	eb a0                	jmp    c000769b <KeInitialiseSymlinks()+0xe0>
c00076fb:	83 ec 0c             	sub    esp,0xc
c00076fe:	53                   	push   ebx
c00076ff:	e8 a4 0a 00 00       	call   c00081a8 <File::close()>
c0007704:	83 c4 10             	add    esp,0x10
c0007707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007709:	83 ec 0c             	sub    esp,0xc
c000770c:	53                   	push   ebx
c000770d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007710:	83 c4 10             	add    esp,0x10
c0007713:	81 c4 10 01 00 00    	add    esp,0x110
c0007719:	5b                   	pop    ebx
c000771a:	5e                   	pop    esi
c000771b:	5f                   	pop    edi
c000771c:	c3                   	ret    

c000771d <KiIsSymlinkRegistered(char const*)>:
c000771d:	55                   	push   ebp
c000771e:	57                   	push   edi
c000771f:	56                   	push   esi
c0007720:	53                   	push   ebx
c0007721:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007727:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000772e:	89 f0                	mov    eax,esi
c0007730:	e8 77 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c0007735:	0f b7 c0             	movzx  eax,ax
c0007738:	e8 1b fc ff ff       	call   c0007358 <KiIsHashInTable(unsigned short)>
c000773d:	31 d2                	xor    edx,edx
c000773f:	88 c1                	mov    cl,al
c0007741:	31 c0                	xor    eax,eax
c0007743:	84 c9                	test   cl,cl
c0007745:	0f 84 31 01 00 00    	je     c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c000774b:	31 db                	xor    ebx,ebx
c000774d:	39 1d c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,ebx
c0007753:	7e 30                	jle    c0007785 <KiIsSymlinkRegistered(char const*)+0x68>
c0007755:	89 d8                	mov    eax,ebx
c0007757:	c1 e0 08             	shl    eax,0x8
c000775a:	51                   	push   ecx
c000775b:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007760:	51                   	push   ecx
c0007761:	50                   	push   eax
c0007762:	56                   	push   esi
c0007763:	e8 18 90 ff ff       	call   c0000780 <strcmp>
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	85 c0                	test   eax,eax
c000776d:	75 13                	jne    c0007782 <KiIsSymlinkRegistered(char const*)+0x65>
c000776f:	8b 04 dd e0 8e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd7120]
c0007776:	8b 14 dd e4 8e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd711c]
c000777d:	e9 fa 00 00 00       	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007782:	43                   	inc    ebx
c0007783:	eb c8                	jmp    c000774d <KiIsSymlinkRegistered(char const*)+0x30>
c0007785:	83 ec 0c             	sub    esp,0xc
c0007788:	68 14 01 00 00       	push   0x114
c000778d:	e8 52 83 00 00       	call   c000fae4 <malloc>
c0007792:	83 c4 0c             	add    esp,0xc
c0007795:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000779b:	68 03 2f 02 c0       	push   0xc0022f03
c00077a0:	50                   	push   eax
c00077a1:	89 c3                	mov    ebx,eax
c00077a3:	e8 84 09 00 00       	call   c000812c <File::File(char const*, Process*)>
c00077a8:	83 c4 10             	add    esp,0x10
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 12                	jne    c00077c1 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	68 e7 2f 02 c0       	push   0xc0022fe7
c00077b7:	e8 6e 86 00 00       	call   c000fe2a <KePanic(char const*)>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	eb 10                	jmp    c00077d1 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	53                   	push   ebx
c00077c5:	e8 44 0c 00 00       	call   c000840e <File::exists()>
c00077ca:	83 c4 10             	add    esp,0x10
c00077cd:	84 c0                	test   al,al
c00077cf:	74 de                	je     c00077af <KiIsSymlinkRegistered(char const*)+0x92>
c00077d1:	52                   	push   edx
c00077d2:	52                   	push   edx
c00077d3:	6a 01                	push   0x1
c00077d5:	53                   	push   ebx
c00077d6:	e8 6f 09 00 00       	call   c000814a <File::open(FileOpenMode)>
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	85 c0                	test   eax,eax
c00077e0:	74 10                	je     c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	68 02 30 02 c0       	push   0xc0023002
c00077ea:	e8 3b 86 00 00       	call   c000fe2a <KePanic(char const*)>
c00077ef:	83 c4 10             	add    esp,0x10
c00077f2:	83 ec 0c             	sub    esp,0xc
c00077f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00077f7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00077fb:	55                   	push   ebp
c00077fc:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007800:	57                   	push   edi
c0007801:	6a 00                	push   0x0
c0007803:	68 00 01 00 00       	push   0x100
c0007808:	53                   	push   ebx
c0007809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007817:	75 4b                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007819:	83 ec 0c             	sub    esp,0xc
c000781c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000781e:	55                   	push   ebp
c000781f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007823:	52                   	push   edx
c0007824:	6a 00                	push   0x0
c0007826:	6a 08                	push   0x8
c0007828:	53                   	push   ebx
c0007829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000782c:	83 c4 20             	add    esp,0x20
c000782f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007834:	75 2e                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007836:	50                   	push   eax
c0007837:	50                   	push   eax
c0007838:	57                   	push   edi
c0007839:	56                   	push   esi
c000783a:	e8 41 8f ff ff       	call   c0000780 <strcmp>
c000783f:	83 c4 10             	add    esp,0x10
c0007842:	85 c0                	test   eax,eax
c0007844:	75 ac                	jne    c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007846:	83 ec 0c             	sub    esp,0xc
c0007849:	53                   	push   ebx
c000784a:	e8 59 09 00 00       	call   c00081a8 <File::close()>
c000784f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000785b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785f:	83 c4 10             	add    esp,0x10
c0007862:	eb 18                	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 3b 09 00 00       	call   c00081a8 <File::close()>
c000786d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	31 c0                	xor    eax,eax
c000787a:	31 d2                	xor    edx,edx
c000787c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007882:	5b                   	pop    ebx
c0007883:	5e                   	pop    esi
c0007884:	5f                   	pop    edi
c0007885:	5d                   	pop    ebp
c0007886:	c3                   	ret    

c0007887 <KeDereferenceSymlink(char const*, char*)>:
c0007887:	55                   	push   ebp
c0007888:	57                   	push   edi
c0007889:	56                   	push   esi
c000788a:	53                   	push   ebx
c000788b:	83 ec 48             	sub    esp,0x48
c000788e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007892:	56                   	push   esi
c0007893:	e8 85 fe ff ff       	call   c000771d <KiIsSymlinkRegistered(char const*)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	89 c7                	mov    edi,eax
c000789d:	89 d0                	mov    eax,edx
c000789f:	09 f8                	or     eax,edi
c00078a1:	75 07                	jne    c00078aa <KeDereferenceSymlink(char const*, char*)+0x23>
c00078a3:	31 c0                	xor    eax,eax
c00078a5:	e9 7c 01 00 00       	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	89 d5                	mov    ebp,edx
c00078af:	68 14 01 00 00       	push   0x114
c00078b4:	e8 2b 82 00 00       	call   c000fae4 <malloc>
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00078c2:	56                   	push   esi
c00078c3:	50                   	push   eax
c00078c4:	89 c3                	mov    ebx,eax
c00078c6:	e8 61 08 00 00       	call   c000812c <File::File(char const*, Process*)>
c00078cb:	83 c4 10             	add    esp,0x10
c00078ce:	85 db                	test   ebx,ebx
c00078d0:	0f 84 32 01 00 00    	je     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078d6:	56                   	push   esi
c00078d7:	56                   	push   esi
c00078d8:	6a 01                	push   0x1
c00078da:	53                   	push   ebx
c00078db:	e8 6a 08 00 00       	call   c000814a <File::open(FileOpenMode)>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	85 c0                	test   eax,eax
c00078e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e7:	74 09                	je     c00078f2 <KeDereferenceSymlink(char const*, char*)+0x6b>
c00078e9:	83 ec 0c             	sub    esp,0xc
c00078ec:	53                   	push   ebx
c00078ed:	e9 10 01 00 00       	jmp    c0007a02 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00078f2:	83 ec 0c             	sub    esp,0xc
c00078f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00078f9:	56                   	push   esi
c00078fa:	8d 54 24 37          	lea    edx,[esp+0x37]
c00078fe:	52                   	push   edx
c00078ff:	6a 00                	push   0x0
c0007901:	6a 08                	push   0x8
c0007903:	53                   	push   ebx
c0007904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007907:	83 c4 20             	add    esp,0x20
c000790a:	85 c0                	test   eax,eax
c000790c:	0f 85 e2 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007912:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007917:	0f 85 d7 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007922:	56                   	push   esi
c0007923:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007927:	52                   	push   edx
c0007928:	6a 00                	push   0x0
c000792a:	6a 08                	push   0x8
c000792c:	53                   	push   ebx
c000792d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007930:	83 c4 20             	add    esp,0x20
c0007933:	85 c0                	test   eax,eax
c0007935:	0f 85 b9 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000793b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007940:	0f 85 ae 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007946:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000794a:	0f 85 53 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007950:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007954:	0f 85 49 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000795a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007962:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000796a:	51                   	push   ecx
c000796b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000796f:	50                   	push   eax
c0007970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007974:	50                   	push   eax
c0007975:	53                   	push   ebx
c0007976:	e8 d1 0a 00 00       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000797b:	83 c4 10             	add    esp,0x10
c000797e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007983:	75 6f                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007989:	31 c9                	xor    ecx,ecx
c000798b:	bf 0f 00 00 00       	mov    edi,0xf
c0007990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007994:	39 c7                	cmp    edi,eax
c0007996:	89 cf                	mov    edi,ecx
c0007998:	19 d7                	sbb    edi,edx
c000799a:	73 58                	jae    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799c:	83 c0 f0             	add    eax,0xfffffff0
c000799f:	bf ff 00 00 00       	mov    edi,0xff
c00079a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079a8:	83 d2 ff             	adc    edx,0xffffffff
c00079ab:	39 c7                	cmp    edi,eax
c00079ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079b1:	19 d1                	sbb    ecx,edx
c00079b3:	72 53                	jb     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079b5:	40                   	inc    eax
c00079b6:	52                   	push   edx
c00079b7:	50                   	push   eax
c00079b8:	6a 00                	push   0x0
c00079ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079be:	e8 2d 8b ff ff       	call   c00004f0 <memset>
c00079c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00079c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d4:	53                   	push   ebx
c00079d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079d8:	83 c4 20             	add    esp,0x20
c00079db:	85 c0                	test   eax,eax
c00079dd:	75 15                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e3:	89 c7                	mov    edi,eax
c00079e5:	c1 ff 1f             	sar    edi,0x1f
c00079e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00079ec:	75 06                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00079f2:	74 19                	je     c0007a0d <KeDereferenceSymlink(char const*, char*)+0x186>
c00079f4:	83 ec 0c             	sub    esp,0xc
c00079f7:	53                   	push   ebx
c00079f8:	e8 ab 07 00 00       	call   c00081a8 <File::close()>
c00079fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	83 c8 ff             	or     eax,0xffffffff
c0007a0b:	eb 19                	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a0d:	83 ec 0c             	sub    esp,0xc
c0007a10:	53                   	push   ebx
c0007a11:	e8 92 07 00 00       	call   c00081a8 <File::close()>
c0007a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1e:	83 c4 10             	add    esp,0x10
c0007a21:	b8 01 00 00 00       	mov    eax,0x1
c0007a26:	83 c4 3c             	add    esp,0x3c
c0007a29:	5b                   	pop    ebx
c0007a2a:	5e                   	pop    esi
c0007a2b:	5f                   	pop    edi
c0007a2c:	5d                   	pop    ebp
c0007a2d:	c3                   	ret    

c0007a2e <KeCreateSymlink(char const*, char const*)>:
c0007a2e:	55                   	push   ebp
c0007a2f:	57                   	push   edi
c0007a30:	56                   	push   esi
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 38             	sub    esp,0x38
c0007a35:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a39:	68 14 01 00 00       	push   0x114
c0007a3e:	e8 a1 80 00 00       	call   c000fae4 <malloc>
c0007a43:	6a 00                	push   0x0
c0007a45:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a4f:	89 c3                	mov    ebx,eax
c0007a51:	50                   	push   eax
c0007a52:	e8 d7 05 00 00       	call   c000802e <File::File(char const*, Process*, bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	85 db                	test   ebx,ebx
c0007a5c:	b8 01 00 00 00       	mov    eax,0x1
c0007a61:	0f 84 fb 00 00 00    	je     c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007a67:	52                   	push   edx
c0007a68:	52                   	push   edx
c0007a69:	6a 12                	push   0x12
c0007a6b:	53                   	push   ebx
c0007a6c:	e8 d9 06 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007a71:	83 c4 10             	add    esp,0x10
c0007a74:	85 c0                	test   eax,eax
c0007a76:	74 0b                	je     c0007a83 <KeCreateSymlink(char const*, char const*)+0x55>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a7d:	53                   	push   ebx
c0007a7e:	e9 d4 00 00 00       	jmp    c0007b57 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a83:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007a87:	be 1d 30 02 c0       	mov    esi,0xc002301d
c0007a8c:	b9 09 00 00 00       	mov    ecx,0x9
c0007a91:	fc                   	cld    
c0007a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007a9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a9d:	56                   	push   esi
c0007a9e:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007aa2:	52                   	push   edx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	6a 08                	push   0x8
c0007aa7:	53                   	push   ebx
c0007aa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ab3:	0f 85 90 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ab9:	85 c0                	test   eax,eax
c0007abb:	0f 85 88 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ac1:	e8 07 fa ff ff       	call   c00074cd <KiCreateSymlinkID()>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007acd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad3:	56                   	push   esi
c0007ad4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007ad8:	52                   	push   edx
c0007ad9:	6a 00                	push   0x0
c0007adb:	6a 08                	push   0x8
c0007add:	53                   	push   ebx
c0007ade:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ae9:	75 5e                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aeb:	85 c0                	test   eax,eax
c0007aed:	75 5a                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007af7:	55                   	push   ebp
c0007af8:	e8 83 8a ff ff       	call   c0000580 <strlen>
c0007afd:	31 d2                	xor    edx,edx
c0007aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b02:	55                   	push   ebp
c0007b03:	52                   	push   edx
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	ff d7                	call   edi
c0007b08:	83 c4 14             	add    esp,0x14
c0007b0b:	55                   	push   ebp
c0007b0c:	89 c6                	mov    esi,eax
c0007b0e:	e8 6d 8a ff ff       	call   c0000580 <strlen>
c0007b13:	83 c4 10             	add    esp,0x10
c0007b16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b1a:	75 2d                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1c:	85 f6                	test   esi,esi
c0007b1e:	75 29                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b20:	50                   	push   eax
c0007b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b29:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b2d:	e8 06 fa ff ff       	call   c0007538 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b35:	e8 6e 06 00 00       	call   c00081a8 <File::close()>
c0007b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b42:	83 c4 10             	add    esp,0x10
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	eb 19                	jmp    c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 56 06 00 00       	call   c00081a8 <File::close()>
c0007b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	b8 01 00 00 00       	mov    eax,0x1
c0007b62:	83 c4 2c             	add    esp,0x2c
c0007b65:	5b                   	pop    ebx
c0007b66:	5e                   	pop    esi
c0007b67:	5f                   	pop    edi
c0007b68:	5d                   	pop    ebp
c0007b69:	c3                   	ret    

c0007b6a <File::read(unsigned long long, void*, int*)>:
c0007b6a:	53                   	push   ebx
c0007b6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b7a:	83 f8 19             	cmp    eax,0x19
c0007b7d:	77 35                	ja     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b7f:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007b86:	85 c0                	test   eax,eax
c0007b88:	74 2a                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007b90:	85 c0                	test   eax,eax
c0007b92:	74 20                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007b98:	74 21                	je     c0007bbb <File::read(unsigned long long, void*, int*)+0x51>
c0007b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007b9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007ba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007baa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bae:	5b                   	pop    ebx
c0007baf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bb2:	ff e0                	jmp    eax
c0007bb4:	b8 0b 00 00 00       	mov    eax,0xb
c0007bb9:	eb 05                	jmp    c0007bc0 <File::read(unsigned long long, void*, int*)+0x56>
c0007bbb:	b8 05 00 00 00       	mov    eax,0x5
c0007bc0:	5b                   	pop    ebx
c0007bc1:	c3                   	ret    

c0007bc2 <File::write(unsigned long long, void*, int*)>:
c0007bc2:	53                   	push   ebx
c0007bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd2:	83 f8 19             	cmp    eax,0x19
c0007bd5:	77 35                	ja     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bd7:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 2a                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007be2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007be8:	85 c0                	test   eax,eax
c0007bea:	74 20                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf0:	74 21                	je     c0007c13 <File::write(unsigned long long, void*, int*)+0x51>
c0007bf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bf8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c06:	5b                   	pop    ebx
c0007c07:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c0a:	ff e0                	jmp    eax
c0007c0c:	b8 0b 00 00 00       	mov    eax,0xb
c0007c11:	eb 05                	jmp    c0007c18 <File::write(unsigned long long, void*, int*)+0x56>
c0007c13:	b8 05 00 00 00       	mov    eax,0x5
c0007c18:	5b                   	pop    ebx
c0007c19:	c3                   	ret    

c0007c1a <Directory::read(unsigned long long, void*, int*)>:
c0007c1a:	53                   	push   ebx
c0007c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2a:	83 f8 19             	cmp    eax,0x19
c0007c2d:	77 35                	ja     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c2f:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 2a                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c40:	85 c0                	test   eax,eax
c0007c42:	74 20                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c48:	74 21                	je     c0007c6b <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	5b                   	pop    ebx
c0007c5f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c62:	ff e0                	jmp    eax
c0007c64:	b8 0b 00 00 00       	mov    eax,0xb
c0007c69:	eb 05                	jmp    c0007c70 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c6b:	b8 05 00 00 00       	mov    eax,0x5
c0007c70:	5b                   	pop    ebx
c0007c71:	c3                   	ret    

c0007c72 <Directory::write(unsigned long long, void*, int*)>:
c0007c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c76:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0007c82:	83 fa 19             	cmp    edx,0x19
c0007c85:	77 18                	ja     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c87:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0007c8e:	85 d2                	test   edx,edx
c0007c90:	74 0d                	je     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c92:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007c99:	19 c0                	sbb    eax,eax
c0007c9b:	83 e0 0a             	and    eax,0xa
c0007c9e:	40                   	inc    eax
c0007c9f:	c3                   	ret    

c0007ca0 <File::isAtty()>:
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	c3                   	ret    
c0007ca3:	90                   	nop

c0007ca4 <Directory::isAtty()>:
c0007ca4:	31 c0                	xor    eax,eax
c0007ca6:	c3                   	ret    
c0007ca7:	90                   	nop

c0007ca8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ca8:	b8 0a 00 00 00       	mov    eax,0xa
c0007cad:	c3                   	ret    

c0007cae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cae:	b8 0a 00 00 00       	mov    eax,0xa
c0007cb3:	c3                   	ret    

c0007cb4 <Filesystem::allocateSwapfile(char const*, int)>:
c0007cb4:	31 c0                	xor    eax,eax
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	c3                   	ret    
c0007cb9:	90                   	nop

c0007cba <File::~File()>:
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	ba f4 30 02 c0       	mov    edx,0xc00230f4
c0007cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc6:	89 10                	mov    DWORD PTR [eax],edx
c0007cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	50                   	push   eax
c0007cd0:	e8 95 b3 00 00       	call   c001306a <UnixFile::~UnixFile()>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	90                   	nop
c0007cd9:	83 c4 0c             	add    esp,0xc
c0007cdc:	c3                   	ret    
c0007cdd:	90                   	nop

c0007cde <File::~File()>:
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	83 ec 0c             	sub    esp,0xc
c0007ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ce8:	e8 cd ff ff ff       	call   c0007cba <File::~File()>
c0007ced:	83 c4 10             	add    esp,0x10
c0007cf0:	83 ec 08             	sub    esp,0x8
c0007cf3:	68 14 01 00 00       	push   0x114
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	e8 5a 55 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c0007d01:	83 c4 10             	add    esp,0x10
c0007d04:	83 c4 0c             	add    esp,0xc
c0007d07:	c3                   	ret    

c0007d08 <Directory::~Directory()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba 10 31 02 c0       	mov    edx,0xc0023110
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 47 b3 00 00       	call   c001306a <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <Directory::~Directory()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <Directory::~Directory()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 0c 55 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Filesystem::Filesystem()>:
c0007d56:	ba 88 30 02 c0       	mov    edx,0xc0023088
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	89 10                	mov    DWORD PTR [eax],edx
c0007d61:	8b 15 04 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b304
c0007d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d72:	a3 04 b3 02 c0       	mov    ds:0xc002b304,eax
c0007d77:	90                   	nop
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Filesystem::~Filesystem()>:
c0007d7a:	ba 88 30 02 c0       	mov    edx,0xc0023088
c0007d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d83:	89 10                	mov    DWORD PTR [eax],edx
c0007d85:	90                   	nop
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Filesystem::~Filesystem()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d8f:	e8 e6 ff ff ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0007d94:	83 c4 04             	add    esp,0x4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 08                	push   0x8
c0007d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da0:	e8 b6 54 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c0007da5:	83 c4 10             	add    esp,0x10
c0007da8:	83 c4 0c             	add    esp,0xc
c0007dab:	c3                   	ret    

c0007dac <Fs::getcwd(Process*, char*, int)>:
c0007dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007db0:	31 c0                	xor    eax,eax
c0007db2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007db9:	7d 15                	jge    c0007dd0 <Fs::getcwd(Process*, char*, int)+0x24>
c0007dbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dbf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dc6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007dc9:	84 c9                	test   cl,cl
c0007dcb:	74 06                	je     c0007dd3 <Fs::getcwd(Process*, char*, int)+0x27>
c0007dcd:	40                   	inc    eax
c0007dce:	eb e2                	jmp    c0007db2 <Fs::getcwd(Process*, char*, int)+0x6>
c0007dd0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007dd3:	31 c0                	xor    eax,eax
c0007dd5:	c3                   	ret    

c0007dd6 <Fs::initVFS()>:
c0007dd6:	83 ec 18             	sub    esp,0x18
c0007dd9:	6a 08                	push   0x8
c0007ddb:	e8 04 7d 00 00       	call   c000fae4 <malloc>
c0007de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de3:	e8 f0 3f 01 00       	call   c001bdd8 <FAT::FAT()>
c0007de8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007def:	e8 f0 7c 00 00       	call   c000fae4 <malloc>
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 0a 4f 01 00       	call   c001cd06 <ISO9660::ISO9660()>
c0007dfc:	83 c4 1c             	add    esp,0x1c
c0007dff:	c3                   	ret    

c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e00:	55                   	push   ebp
c0007e01:	57                   	push   edi
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e0a:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e11:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e18:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e1f:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e2a:	68 00 04 00 00       	push   0x400
c0007e2f:	6a 00                	push   0x0
c0007e31:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e35:	57                   	push   edi
c0007e36:	e8 b5 86 ff ff       	call   c00004f0 <memset>
c0007e3b:	83 c4 10             	add    esp,0x10
c0007e3e:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e42:	75 0b                	jne    c0007e4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e44:	50                   	push   eax
c0007e45:	50                   	push   eax
c0007e46:	56                   	push   esi
c0007e47:	57                   	push   edi
c0007e48:	e8 03 88 ff ff       	call   c0000650 <strcpy>
c0007e4d:	eb 45                	jmp    c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e52:	83 f8 2f             	cmp    eax,0x2f
c0007e55:	74 05                	je     c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e57:	83 f8 5c             	cmp    eax,0x5c
c0007e5a:	75 19                	jne    c0007e75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e5f:	3c 60                	cmp    al,0x60
c0007e61:	7e 03                	jle    c0007e66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e63:	83 e8 20             	sub    eax,0x20
c0007e66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007e6a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007e71:	50                   	push   eax
c0007e72:	50                   	push   eax
c0007e73:	eb 18                	jmp    c0007e8d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007e75:	50                   	push   eax
c0007e76:	50                   	push   eax
c0007e77:	55                   	push   ebp
c0007e78:	57                   	push   edi
c0007e79:	e8 d2 87 ff ff       	call   c0000650 <strcpy>
c0007e7e:	58                   	pop    eax
c0007e7f:	5a                   	pop    edx
c0007e80:	68 04 4e 02 c0       	push   0xc0024e04
c0007e85:	57                   	push   edi
c0007e86:	e8 e5 89 ff ff       	call   c0000870 <strcat>
c0007e8b:	59                   	pop    ecx
c0007e8c:	5d                   	pop    ebp
c0007e8d:	56                   	push   esi
c0007e8e:	57                   	push   edi
c0007e8f:	e8 dc 89 ff ff       	call   c0000870 <strcat>
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007e9b:	3c 60                	cmp    al,0x60
c0007e9d:	7e 03                	jle    c0007ea2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007e9f:	83 e8 20             	sub    eax,0x20
c0007ea2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea6:	be 03 00 00 00       	mov    esi,0x3
c0007eab:	88 03                	mov    BYTE PTR [ebx],al
c0007ead:	b8 03 00 00 00       	mov    eax,0x3
c0007eb2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007eb9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ebf:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007ec3:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007ec8:	89 fa                	mov    edx,edi
c0007eca:	0f be ea             	movsx  ebp,dl
c0007ecd:	85 ed                	test   ebp,ebp
c0007ecf:	0f 84 a1 00 00 00    	je     c0007f76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007ed5:	8d 56 01             	lea    edx,[esi+0x1]
c0007ed8:	83 fd 2f             	cmp    ebp,0x2f
c0007edb:	74 05                	je     c0007ee2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007edd:	83 fd 5c             	cmp    ebp,0x5c
c0007ee0:	75 12                	jne    c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007ee2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ee7:	89 c5                	mov    ebp,eax
c0007ee9:	74 09                	je     c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007eeb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007eef:	40                   	inc    eax
c0007ef0:	89 d6                	mov    esi,edx
c0007ef2:	eb cf                	jmp    c0007ec3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007ef4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007ef9:	89 f9                	mov    ecx,edi
c0007efb:	0f be e9             	movsx  ebp,cl
c0007efe:	75 61                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f00:	83 fd 2e             	cmp    ebp,0x2e
c0007f03:	75 5c                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f05:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f0a:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f0f:	74 19                	je     c0007f2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f11:	83 fd 2e             	cmp    ebp,0x2e
c0007f14:	74 55                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f16:	89 f2                	mov    edx,esi
c0007f18:	42                   	inc    edx
c0007f19:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f1e:	83 f9 2f             	cmp    ecx,0x2f
c0007f21:	74 f5                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f23:	83 f9 5c             	cmp    ecx,0x5c
c0007f26:	74 f0                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f28:	eb c6                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2a:	83 fd 2e             	cmp    ebp,0x2e
c0007f2d:	74 3c                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f2f:	83 f8 03             	cmp    eax,0x3
c0007f32:	74 bc                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f34:	42                   	inc    edx
c0007f35:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f3a:	83 f9 2f             	cmp    ecx,0x2f
c0007f3d:	74 f5                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f3f:	83 f9 5c             	cmp    ecx,0x5c
c0007f42:	74 f0                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f44:	48                   	dec    eax
c0007f45:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f49:	75 06                	jne    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f4b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f4f:	eb f3                	jmp    c0007f44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f51:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f55:	74 07                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f57:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f5b:	48                   	dec    eax
c0007f5c:	eb f3                	jmp    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f5e:	40                   	inc    eax
c0007f5f:	eb 8f                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f61:	83 fd 2f             	cmp    ebp,0x2f
c0007f64:	74 8a                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f66:	83 fd 5c             	cmp    ebp,0x5c
c0007f69:	74 85                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6b:	89 f9                	mov    ecx,edi
c0007f6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007f70:	40                   	inc    eax
c0007f71:	e9 7a ff ff ff       	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	53                   	push   ebx
c0007f7e:	e8 fd 85 ff ff       	call   c0000580 <strlen>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007f8b:	74 1c                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	53                   	push   ebx
c0007f91:	e8 ea 85 ff ff       	call   c0000580 <strlen>
c0007f96:	83 c4 10             	add    esp,0x10
c0007f99:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f9e:	74 09                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fa0:	31 ff                	xor    edi,edi
c0007fa2:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fa7:	eb 5c                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fa9:	83 ec 0c             	sub    esp,0xc
c0007fac:	53                   	push   ebx
c0007fad:	e8 ce 85 ff ff       	call   c0000580 <strlen>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007fba:	74 e4                	je     c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007fbc:	83 ec 0c             	sub    esp,0xc
c0007fbf:	53                   	push   ebx
c0007fc0:	e8 bb 85 ff ff       	call   c0000580 <strlen>
c0007fc5:	83 c4 10             	add    esp,0x10
c0007fc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0007fcd:	eb ab                	jmp    c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0007fcf:	52                   	push   edx
c0007fd0:	52                   	push   edx
c0007fd1:	53                   	push   ebx
c0007fd2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007fd6:	55                   	push   ebp
c0007fd7:	e8 74 86 ff ff       	call   c0000650 <strcpy>
c0007fdc:	59                   	pop    ecx
c0007fdd:	58                   	pop    eax
c0007fde:	53                   	push   ebx
c0007fdf:	55                   	push   ebp
c0007fe0:	e8 a2 f8 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0007fe5:	83 c4 10             	add    esp,0x10
c0007fe8:	48                   	dec    eax
c0007fe9:	75 37                	jne    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0007feb:	50                   	push   eax
c0007fec:	53                   	push   ebx
c0007fed:	55                   	push   ebp
c0007fee:	68 26 30 02 c0       	push   0xc0023026
c0007ff3:	e8 56 ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007ff8:	8d 47 01             	lea    eax,[edi+0x1]
c0007ffb:	83 c4 10             	add    esp,0x10
c0007ffe:	83 ff 14             	cmp    edi,0x14
c0008001:	74 08                	je     c000800b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008003:	89 c7                	mov    edi,eax
c0008005:	85 f6                	test   esi,esi
c0008007:	75 c6                	jne    c0007fcf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008009:	eb 17                	jmp    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000800b:	83 ec 0c             	sub    esp,0xc
c000800e:	bf 15 00 00 00       	mov    edi,0x15
c0008013:	68 41 30 02 c0       	push   0xc0023041
c0008018:	e8 0d 7e 00 00       	call   c000fe2a <KePanic(char const*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	eb e3                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008022:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008028:	5b                   	pop    ebx
c0008029:	5e                   	pop    esi
c000802a:	5f                   	pop    edi
c000802b:	5d                   	pop    ebp
c000802c:	c3                   	ret    
c000802d:	90                   	nop

c000802e <File::File(char const*, Process*, bool)>:
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008035:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	83 ec 08             	sub    esp,0x8
c0008040:	6a 00                	push   0x0
c0008042:	50                   	push   eax
c0008043:	e8 3c ae 00 00       	call   c0012e84 <UnixFile::UnixFile(int)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	ba f4 30 02 c0       	mov    edx,0xc00230f4
c0008050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008054:	89 10                	mov    DWORD PTR [eax],edx
c0008056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000805b:	85 c0                	test   eax,eax
c000805d:	74 0f                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000805f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008064:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008068:	74 04                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000806a:	b0 01                	mov    al,0x1
c000806c:	eb 02                	jmp    c0008070 <File::File(char const*, Process*, bool)+0x42>
c000806e:	b0 00                	mov    al,0x0
c0008070:	0f b6 c0             	movzx  eax,al
c0008073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008077:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000807d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008081:	83 c2 0d             	add    edx,0xd
c0008084:	50                   	push   eax
c0008085:	51                   	push   ecx
c0008086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000808a:	52                   	push   edx
c000808b:	e8 70 fd ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000809a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000809e:	83 c2 0d             	add    edx,0xd
c00080a1:	83 ec 04             	sub    esp,0x4
c00080a4:	50                   	push   eax
c00080a5:	52                   	push   edx
c00080a6:	68 67 30 02 c0       	push   0xc0023067
c00080ab:	e8 9e ee ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00080b0:	83 c4 10             	add    esp,0x10
c00080b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080ba:	83 e8 41             	sub    eax,0x41
c00080bd:	88 c2                	mov    dl,al
c00080bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cd:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080db:	0f b6 c0             	movzx  eax,al
c00080de:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00080e5:	85 c0                	test   eax,eax
c00080e7:	74 3e                	je     c0008127 <File::File(char const*, Process*, bool)+0xf9>
c00080e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ed:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f3:	0f b6 c0             	movzx  eax,al
c00080f6:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00080fd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008103:	85 c0                	test   eax,eax
c0008105:	75 20                	jne    c0008127 <File::File(char const*, Process*, bool)+0xf9>
c0008107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000810b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008111:	0f b6 c0             	movzx  eax,al
c0008114:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	50                   	push   eax
c000811f:	e8 0a 28 00 00       	call   c000a92e <LogicalDisk::mount()>
c0008124:	83 c4 10             	add    esp,0x10
c0008127:	90                   	nop
c0008128:	83 c4 1c             	add    esp,0x1c
c000812b:	c3                   	ret    

c000812c <File::File(char const*, Process*)>:
c000812c:	83 ec 0c             	sub    esp,0xc
c000812f:	6a 01                	push   0x1
c0008131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813d:	e8 ec fe ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0008142:	83 c4 10             	add    esp,0x10
c0008145:	90                   	nop
c0008146:	83 c4 0c             	add    esp,0xc
c0008149:	c3                   	ret    

c000814a <File::open(FileOpenMode)>:
c000814a:	53                   	push   ebx
c000814b:	b8 0b 00 00 00       	mov    eax,0xb
c0008150:	83 ec 08             	sub    esp,0x8
c0008153:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008157:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000815e:	83 fa 19             	cmp    edx,0x19
c0008161:	77 40                	ja     c00081a3 <File::open(FileOpenMode)+0x59>
c0008163:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000816a:	85 d2                	test   edx,edx
c000816c:	74 35                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c000816e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008174:	85 d2                	test   edx,edx
c0008176:	74 2b                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c0008178:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000817c:	b8 06 00 00 00       	mov    eax,0x6
c0008181:	75 20                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c0008183:	8b 02                	mov    eax,DWORD PTR [edx]
c0008185:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000818b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000818f:	51                   	push   ecx
c0008190:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008193:	51                   	push   ecx
c0008194:	52                   	push   edx
c0008195:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008198:	83 c4 10             	add    esp,0x10
c000819b:	85 c0                	test   eax,eax
c000819d:	75 04                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c000819f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a3:	83 c4 08             	add    esp,0x8
c00081a6:	5b                   	pop    ebx
c00081a7:	c3                   	ret    

c00081a8 <File::close()>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081bc:	83 f9 19             	cmp    ecx,0x19
c00081bf:	77 41                	ja     c0008202 <File::close()+0x5a>
c00081c1:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c00081c8:	85 db                	test   ebx,ebx
c00081ca:	74 36                	je     c0008202 <File::close()+0x5a>
c00081cc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d3:	74 2d                	je     c0008202 <File::close()+0x5a>
c00081d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081d9:	b8 05 00 00 00       	mov    eax,0x5
c00081de:	74 22                	je     c0008202 <File::close()+0x5a>
c00081e0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081e4:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c00081eb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f1:	53                   	push   ebx
c00081f2:	53                   	push   ebx
c00081f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081f5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081fb:	50                   	push   eax
c00081fc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081ff:	83 c4 10             	add    esp,0x10
c0008202:	83 c4 08             	add    esp,0x8
c0008205:	5b                   	pop    ebx
c0008206:	c3                   	ret    
c0008207:	90                   	nop

c0008208 <File::seek(unsigned long long)>:
c0008208:	56                   	push   esi
c0008209:	b8 0b 00 00 00       	mov    eax,0xb
c000820e:	53                   	push   ebx
c000820f:	51                   	push   ecx
c0008210:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008214:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008218:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000821c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008223:	83 fa 19             	cmp    edx,0x19
c0008226:	77 31                	ja     c0008259 <File::seek(unsigned long long)+0x51>
c0008228:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000822f:	85 d2                	test   edx,edx
c0008231:	74 26                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008233:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008239:	85 d2                	test   edx,edx
c000823b:	74 1c                	je     c0008259 <File::seek(unsigned long long)+0x51>
c000823d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008241:	b8 05 00 00 00       	mov    eax,0x5
c0008246:	74 11                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008248:	8b 02                	mov    eax,DWORD PTR [edx]
c000824a:	53                   	push   ebx
c000824b:	51                   	push   ecx
c000824c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008252:	52                   	push   edx
c0008253:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008256:	83 c4 10             	add    esp,0x10
c0008259:	5a                   	pop    edx
c000825a:	5b                   	pop    ebx
c000825b:	5e                   	pop    esi
c000825c:	c3                   	ret    
c000825d:	90                   	nop

c000825e <File::truncate(unsigned long long)>:
c000825e:	56                   	push   esi
c000825f:	b8 0b 00 00 00       	mov    eax,0xb
c0008264:	53                   	push   ebx
c0008265:	51                   	push   ecx
c0008266:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000826a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000826e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008272:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008279:	83 fa 19             	cmp    edx,0x19
c000827c:	77 31                	ja     c00082af <File::truncate(unsigned long long)+0x51>
c000827e:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008285:	85 d2                	test   edx,edx
c0008287:	74 26                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008289:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000828f:	85 d2                	test   edx,edx
c0008291:	74 1c                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008293:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008297:	b8 05 00 00 00       	mov    eax,0x5
c000829c:	74 11                	je     c00082af <File::truncate(unsigned long long)+0x51>
c000829e:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a0:	53                   	push   ebx
c00082a1:	51                   	push   ecx
c00082a2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082a8:	52                   	push   edx
c00082a9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082ac:	83 c4 10             	add    esp,0x10
c00082af:	5a                   	pop    edx
c00082b0:	5b                   	pop    ebx
c00082b1:	5e                   	pop    esi
c00082b2:	c3                   	ret    
c00082b3:	90                   	nop

c00082b4 <File::tell(unsigned long long*)>:
c00082b4:	83 ec 0c             	sub    esp,0xc
c00082b7:	b8 0b 00 00 00       	mov    eax,0xb
c00082bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082c7:	83 fa 19             	cmp    edx,0x19
c00082ca:	77 34                	ja     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082cc:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00082d3:	85 d2                	test   edx,edx
c00082d5:	74 29                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082d7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082dd:	85 d2                	test   edx,edx
c00082df:	74 1f                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082e1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082e5:	b8 05 00 00 00       	mov    eax,0x5
c00082ea:	74 14                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082ec:	50                   	push   eax
c00082ed:	8b 02                	mov    eax,DWORD PTR [edx]
c00082ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082f9:	52                   	push   edx
c00082fa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082fd:	83 c4 10             	add    esp,0x10
c0008300:	83 c4 0c             	add    esp,0xc
c0008303:	c3                   	ret    

c0008304 <File::rewind()>:
c0008304:	83 ec 10             	sub    esp,0x10
c0008307:	6a 00                	push   0x0
c0008309:	6a 00                	push   0x0
c000830b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000830f:	e8 f4 fe ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0008314:	83 c4 1c             	add    esp,0x1c
c0008317:	c3                   	ret    

c0008318 <File::unlink()>:
c0008318:	83 ec 0c             	sub    esp,0xc
c000831b:	b8 0b 00 00 00       	mov    eax,0xb
c0008320:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008324:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000832b:	83 f9 19             	cmp    ecx,0x19
c000832e:	77 2f                	ja     c000835f <File::unlink()+0x47>
c0008330:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008337:	85 c9                	test   ecx,ecx
c0008339:	74 24                	je     c000835f <File::unlink()+0x47>
c000833b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008341:	85 c9                	test   ecx,ecx
c0008343:	74 1a                	je     c000835f <File::unlink()+0x47>
c0008345:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008349:	b8 06 00 00 00       	mov    eax,0x6
c000834e:	75 0f                	jne    c000835f <File::unlink()+0x47>
c0008350:	50                   	push   eax
c0008351:	83 c2 0d             	add    edx,0xd
c0008354:	50                   	push   eax
c0008355:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008357:	52                   	push   edx
c0008358:	51                   	push   ecx
c0008359:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000835c:	83 c4 10             	add    esp,0x10
c000835f:	83 c4 0c             	add    esp,0xc
c0008362:	c3                   	ret    
c0008363:	90                   	nop

c0008364 <File::rename(char const*)>:
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	b8 0b 00 00 00       	mov    eax,0xb
c000836c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008370:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008377:	83 f9 19             	cmp    ecx,0x19
c000837a:	77 32                	ja     c00083ae <File::rename(char const*)+0x4a>
c000837c:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008383:	85 c9                	test   ecx,ecx
c0008385:	74 27                	je     c00083ae <File::rename(char const*)+0x4a>
c0008387:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000838d:	85 c9                	test   ecx,ecx
c000838f:	74 1d                	je     c00083ae <File::rename(char const*)+0x4a>
c0008391:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008395:	b8 06 00 00 00       	mov    eax,0x6
c000839a:	75 12                	jne    c00083ae <File::rename(char const*)+0x4a>
c000839c:	50                   	push   eax
c000839d:	83 c2 0d             	add    edx,0xd
c00083a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083a6:	52                   	push   edx
c00083a7:	51                   	push   ecx
c00083a8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083ab:	83 c4 10             	add    esp,0x10
c00083ae:	83 c4 0c             	add    esp,0xc
c00083b1:	c3                   	ret    

c00083b2 <File::chfatattr(unsigned char, unsigned char)>:
c00083b2:	57                   	push   edi
c00083b3:	b8 0b 00 00 00       	mov    eax,0xb
c00083b8:	56                   	push   esi
c00083b9:	53                   	push   ebx
c00083ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cd:	83 f9 19             	cmp    ecx,0x19
c00083d0:	77 37                	ja     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d2:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00083d9:	85 c9                	test   ecx,ecx
c00083db:	74 2c                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e3:	85 c9                	test   ecx,ecx
c00083e5:	74 22                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083eb:	b8 06 00 00 00       	mov    eax,0x6
c00083f0:	75 17                	jne    c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f2:	89 f0                	mov    eax,esi
c00083f4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083f6:	0f b6 db             	movzx  ebx,bl
c00083f9:	0f b6 f0             	movzx  esi,al
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	56                   	push   esi
c0008400:	53                   	push   ebx
c0008401:	52                   	push   edx
c0008402:	51                   	push   ecx
c0008403:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008406:	83 c4 10             	add    esp,0x10
c0008409:	5b                   	pop    ebx
c000840a:	5e                   	pop    esi
c000840b:	5f                   	pop    edi
c000840c:	c3                   	ret    
c000840d:	90                   	nop

c000840e <File::exists()>:
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	31 c0                	xor    eax,eax
c0008413:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008417:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000841e:	83 f9 19             	cmp    ecx,0x19
c0008421:	77 24                	ja     c0008447 <File::exists()+0x39>
c0008423:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000842a:	85 c9                	test   ecx,ecx
c000842c:	74 19                	je     c0008447 <File::exists()+0x39>
c000842e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008434:	85 c9                	test   ecx,ecx
c0008436:	74 0f                	je     c0008447 <File::exists()+0x39>
c0008438:	50                   	push   eax
c0008439:	83 c2 0d             	add    edx,0xd
c000843c:	50                   	push   eax
c000843d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000843f:	52                   	push   edx
c0008440:	51                   	push   ecx
c0008441:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008444:	83 c4 10             	add    esp,0x10
c0008447:	83 c4 0c             	add    esp,0xc
c000844a:	c3                   	ret    
c000844b:	90                   	nop

c000844c <File::stat(unsigned long long*, bool*)>:
c000844c:	56                   	push   esi
c000844d:	53                   	push   ebx
c000844e:	50                   	push   eax
c000844f:	b8 0b 00 00 00       	mov    eax,0xb
c0008454:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008458:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000845c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008460:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008467:	83 f9 19             	cmp    ecx,0x19
c000846a:	77 3d                	ja     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000846c:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008473:	85 c9                	test   ecx,ecx
c0008475:	74 32                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008477:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000847d:	85 c9                	test   ecx,ecx
c000847f:	74 28                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008481:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008485:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008487:	74 13                	je     c000849c <File::stat(unsigned long long*, bool*)+0x50>
c0008489:	83 ec 04             	sub    esp,0x4
c000848c:	56                   	push   esi
c000848d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008493:	51                   	push   ecx
c0008494:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008497:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000849a:	eb 0a                	jmp    c00084a6 <File::stat(unsigned long long*, bool*)+0x5a>
c000849c:	53                   	push   ebx
c000849d:	83 c2 0d             	add    edx,0xd
c00084a0:	56                   	push   esi
c00084a1:	52                   	push   edx
c00084a2:	51                   	push   ecx
c00084a3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084a6:	83 c4 10             	add    esp,0x10
c00084a9:	5a                   	pop    edx
c00084aa:	5b                   	pop    ebx
c00084ab:	5e                   	pop    esi
c00084ac:	c3                   	ret    

c00084ad <Fs::setcwd(Process*, char*)>:
c00084ad:	55                   	push   ebp
c00084ae:	57                   	push   edi
c00084af:	56                   	push   esi
c00084b0:	53                   	push   ebx
c00084b1:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084b7:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084be:	6a 00                	push   0x0
c00084c0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084c6:	57                   	push   edi
c00084c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084ce:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d2:	56                   	push   esi
c00084d3:	e8 28 f9 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084d8:	89 34 24             	mov    DWORD PTR [esp],esi
c00084db:	e8 a0 80 ff ff       	call   c0000580 <strlen>
c00084e0:	83 c4 10             	add    esp,0x10
c00084e3:	83 f8 02             	cmp    eax,0x2
c00084e6:	77 15                	ja     c00084fd <Fs::setcwd(Process*, char*)+0x50>
c00084e8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084ed:	83 eb 41             	sub    ebx,0x41
c00084f0:	8b 04 9d e0 ba 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4520]
c00084f7:	85 c0                	test   eax,eax
c00084f9:	75 1c                	jne    c0008517 <Fs::setcwd(Process*, char*)+0x6a>
c00084fb:	eb 2f                	jmp    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c00084fd:	83 ec 0c             	sub    esp,0xc
c0008500:	56                   	push   esi
c0008501:	e8 7a 80 ff ff       	call   c0000580 <strlen>
c0008506:	83 c4 10             	add    esp,0x10
c0008509:	83 f8 03             	cmp    eax,0x3
c000850c:	75 57                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c000850e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008513:	75 50                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c0008515:	eb d1                	jmp    c00084e8 <Fs::setcwd(Process*, char*)+0x3b>
c0008517:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000851e:	75 0c                	jne    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c0008520:	83 ec 0c             	sub    esp,0xc
c0008523:	50                   	push   eax
c0008524:	e8 05 24 00 00       	call   c000a92e <LogicalDisk::mount()>
c0008529:	83 c4 10             	add    esp,0x10
c000852c:	83 fb 19             	cmp    ebx,0x19
c000852f:	b8 03 00 00 00       	mov    eax,0x3
c0008534:	0f 87 c6 00 00 00    	ja     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000853a:	8b 14 9d e0 ba 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4520]
c0008541:	b8 05 00 00 00       	mov    eax,0x5
c0008546:	85 d2                	test   edx,edx
c0008548:	0f 84 b2 00 00 00    	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000854e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008555:	b8 06 00 00 00       	mov    eax,0x6
c000855a:	0f 85 92 00 00 00    	jne    c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c0008560:	e9 9b 00 00 00       	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c0008565:	83 ec 0c             	sub    esp,0xc
c0008568:	68 14 01 00 00       	push   0x114
c000856d:	e8 72 75 00 00       	call   c000fae4 <malloc>
c0008572:	83 c4 0c             	add    esp,0xc
c0008575:	55                   	push   ebp
c0008576:	56                   	push   esi
c0008577:	50                   	push   eax
c0008578:	89 c3                	mov    ebx,eax
c000857a:	e8 ad fb ff ff       	call   c000812c <File::File(char const*, Process*)>
c000857f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008584:	83 c4 0c             	add    esp,0xc
c0008587:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000858b:	50                   	push   eax
c000858c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008590:	50                   	push   eax
c0008591:	53                   	push   ebx
c0008592:	e8 b5 fe ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0008597:	83 c4 10             	add    esp,0x10
c000859a:	83 f8 02             	cmp    eax,0x2
c000859d:	74 27                	je     c00085c6 <Fs::setcwd(Process*, char*)+0x119>
c000859f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085a4:	75 1c                	jne    c00085c2 <Fs::setcwd(Process*, char*)+0x115>
c00085a6:	85 db                	test   ebx,ebx
c00085a8:	b8 02 00 00 00       	mov    eax,0x2
c00085ad:	74 51                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085b1:	83 ec 0c             	sub    esp,0xc
c00085b4:	53                   	push   ebx
c00085b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	b8 02 00 00 00       	mov    eax,0x2
c00085c0:	eb 3e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085c2:	85 c0                	test   eax,eax
c00085c4:	74 1c                	je     c00085e2 <Fs::setcwd(Process*, char*)+0x135>
c00085c6:	85 db                	test   ebx,ebx
c00085c8:	b8 01 00 00 00       	mov    eax,0x1
c00085cd:	74 31                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d1:	83 ec 0c             	sub    esp,0xc
c00085d4:	53                   	push   ebx
c00085d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085d8:	83 c4 10             	add    esp,0x10
c00085db:	b8 01 00 00 00       	mov    eax,0x1
c00085e0:	eb 1e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085e2:	85 db                	test   ebx,ebx
c00085e4:	74 0c                	je     c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c00085e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085e8:	83 ec 0c             	sub    esp,0xc
c00085eb:	53                   	push   ebx
c00085ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085ef:	83 c4 10             	add    esp,0x10
c00085f2:	50                   	push   eax
c00085f3:	50                   	push   eax
c00085f4:	56                   	push   esi
c00085f5:	57                   	push   edi
c00085f6:	e8 55 80 ff ff       	call   c0000650 <strcpy>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	31 c0                	xor    eax,eax
c0008600:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008606:	5b                   	pop    ebx
c0008607:	5e                   	pop    esi
c0008608:	5f                   	pop    edi
c0008609:	5d                   	pop    ebp
c000860a:	c3                   	ret    
c000860b:	90                   	nop

c000860c <Directory::Directory(char const*, Process*)>:
c000860c:	83 ec 0c             	sub    esp,0xc
c000860f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008613:	83 ec 08             	sub    esp,0x8
c0008616:	6a 00                	push   0x0
c0008618:	50                   	push   eax
c0008619:	e8 66 a8 00 00       	call   c0012e84 <UnixFile::UnixFile(int)>
c000861e:	83 c4 10             	add    esp,0x10
c0008621:	ba 10 31 02 c0       	mov    edx,0xc0023110
c0008626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000862a:	89 10                	mov    DWORD PTR [eax],edx
c000862c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008631:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008635:	0f 95 c0             	setne  al
c0008638:	0f b6 c0             	movzx  eax,al
c000863b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000863f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008645:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008649:	83 c2 0d             	add    edx,0xd
c000864c:	50                   	push   eax
c000864d:	51                   	push   ecx
c000864e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008652:	52                   	push   edx
c0008653:	e8 a8 f7 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008662:	83 e8 41             	sub    eax,0x41
c0008665:	88 c2                	mov    dl,al
c0008667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008675:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008683:	0f b6 c0             	movzx  eax,al
c0008686:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c000868d:	85 c0                	test   eax,eax
c000868f:	74 3e                	je     c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c0008691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008695:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000869b:	0f b6 c0             	movzx  eax,al
c000869e:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086a5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086ab:	85 c0                	test   eax,eax
c00086ad:	75 20                	jne    c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c00086af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086b9:	0f b6 c0             	movzx  eax,al
c00086bc:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086c3:	83 ec 0c             	sub    esp,0xc
c00086c6:	50                   	push   eax
c00086c7:	e8 62 22 00 00       	call   c000a92e <LogicalDisk::mount()>
c00086cc:	83 c4 10             	add    esp,0x10
c00086cf:	90                   	nop
c00086d0:	83 c4 0c             	add    esp,0xc
c00086d3:	c3                   	ret    

c00086d4 <Directory::open()>:
c00086d4:	53                   	push   ebx
c00086d5:	b8 0b 00 00 00       	mov    eax,0xb
c00086da:	83 ec 08             	sub    esp,0x8
c00086dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086e8:	83 fa 19             	cmp    edx,0x19
c00086eb:	77 3d                	ja     c000872a <Directory::open()+0x56>
c00086ed:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00086f4:	85 d2                	test   edx,edx
c00086f6:	74 32                	je     c000872a <Directory::open()+0x56>
c00086f8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086fe:	85 d2                	test   edx,edx
c0008700:	74 28                	je     c000872a <Directory::open()+0x56>
c0008702:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008706:	b8 06 00 00 00       	mov    eax,0x6
c000870b:	75 1d                	jne    c000872a <Directory::open()+0x56>
c000870d:	50                   	push   eax
c000870e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008710:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008716:	51                   	push   ecx
c0008717:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000871a:	51                   	push   ecx
c000871b:	52                   	push   edx
c000871c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000871f:	83 c4 10             	add    esp,0x10
c0008722:	85 c0                	test   eax,eax
c0008724:	75 04                	jne    c000872a <Directory::open()+0x56>
c0008726:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000872a:	83 c4 08             	add    esp,0x8
c000872d:	5b                   	pop    ebx
c000872e:	c3                   	ret    
c000872f:	90                   	nop

c0008730 <Directory::close()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000873d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008744:	83 f9 19             	cmp    ecx,0x19
c0008747:	77 41                	ja     c000878a <Directory::close()+0x5a>
c0008749:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c0008750:	85 db                	test   ebx,ebx
c0008752:	74 36                	je     c000878a <Directory::close()+0x5a>
c0008754:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000875b:	74 2d                	je     c000878a <Directory::close()+0x5a>
c000875d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008761:	b8 05 00 00 00       	mov    eax,0x5
c0008766:	74 22                	je     c000878a <Directory::close()+0x5a>
c0008768:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000876c:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c0008773:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008779:	53                   	push   ebx
c000877a:	53                   	push   ebx
c000877b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000877d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008783:	50                   	push   eax
c0008784:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008787:	83 c4 10             	add    esp,0x10
c000878a:	83 c4 08             	add    esp,0x8
c000878d:	5b                   	pop    ebx
c000878e:	c3                   	ret    
c000878f:	90                   	nop

c0008790 <Directory::unlink()>:
c0008790:	83 ec 0c             	sub    esp,0xc
c0008793:	b8 0b 00 00 00       	mov    eax,0xb
c0008798:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a3:	83 f9 19             	cmp    ecx,0x19
c00087a6:	77 2f                	ja     c00087d7 <Directory::unlink()+0x47>
c00087a8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00087af:	85 c9                	test   ecx,ecx
c00087b1:	74 24                	je     c00087d7 <Directory::unlink()+0x47>
c00087b3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087b9:	85 c9                	test   ecx,ecx
c00087bb:	74 1a                	je     c00087d7 <Directory::unlink()+0x47>
c00087bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c1:	b8 06 00 00 00       	mov    eax,0x6
c00087c6:	75 0f                	jne    c00087d7 <Directory::unlink()+0x47>
c00087c8:	50                   	push   eax
c00087c9:	83 c2 0d             	add    edx,0xd
c00087cc:	50                   	push   eax
c00087cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087cf:	52                   	push   edx
c00087d0:	51                   	push   ecx
c00087d1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087d4:	83 c4 10             	add    esp,0x10
c00087d7:	83 c4 0c             	add    esp,0xc
c00087da:	c3                   	ret    
c00087db:	90                   	nop

c00087dc <Directory::rename(char const*)>:
c00087dc:	83 ec 0c             	sub    esp,0xc
c00087df:	b8 0b 00 00 00       	mov    eax,0xb
c00087e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ef:	83 f9 19             	cmp    ecx,0x19
c00087f2:	77 32                	ja     c0008826 <Directory::rename(char const*)+0x4a>
c00087f4:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00087fb:	85 c9                	test   ecx,ecx
c00087fd:	74 27                	je     c0008826 <Directory::rename(char const*)+0x4a>
c00087ff:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008805:	85 c9                	test   ecx,ecx
c0008807:	74 1d                	je     c0008826 <Directory::rename(char const*)+0x4a>
c0008809:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000880d:	b8 06 00 00 00       	mov    eax,0x6
c0008812:	75 12                	jne    c0008826 <Directory::rename(char const*)+0x4a>
c0008814:	50                   	push   eax
c0008815:	83 c2 0d             	add    edx,0xd
c0008818:	8b 01                	mov    eax,DWORD PTR [ecx]
c000881a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000881e:	52                   	push   edx
c000881f:	51                   	push   ecx
c0008820:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 c4 0c             	add    esp,0xc
c0008829:	c3                   	ret    

c000882a <Directory::exists()>:
c000882a:	83 ec 0c             	sub    esp,0xc
c000882d:	31 c0                	xor    eax,eax
c000882f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008833:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000883a:	83 f9 19             	cmp    ecx,0x19
c000883d:	77 24                	ja     c0008863 <Directory::exists()+0x39>
c000883f:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008846:	85 c9                	test   ecx,ecx
c0008848:	74 19                	je     c0008863 <Directory::exists()+0x39>
c000884a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008850:	85 c9                	test   ecx,ecx
c0008852:	74 0f                	je     c0008863 <Directory::exists()+0x39>
c0008854:	50                   	push   eax
c0008855:	83 c2 0d             	add    edx,0xd
c0008858:	50                   	push   eax
c0008859:	8b 01                	mov    eax,DWORD PTR [ecx]
c000885b:	52                   	push   edx
c000885c:	51                   	push   ecx
c000885d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008860:	83 c4 10             	add    esp,0x10
c0008863:	83 c4 0c             	add    esp,0xc
c0008866:	c3                   	ret    
c0008867:	90                   	nop

c0008868 <Directory::read(dirent*)>:
c0008868:	83 ec 1c             	sub    esp,0x1c
c000886b:	b8 0b 00 00 00       	mov    eax,0xb
c0008870:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008874:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000887b:	83 f9 19             	cmp    ecx,0x19
c000887e:	77 30                	ja     c00088b0 <Directory::read(dirent*)+0x48>
c0008880:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008887:	85 c9                	test   ecx,ecx
c0008889:	74 25                	je     c00088b0 <Directory::read(dirent*)+0x48>
c000888b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008892:	74 1c                	je     c00088b0 <Directory::read(dirent*)+0x48>
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	8b 02                	mov    eax,DWORD PTR [edx]
c0008899:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000889d:	51                   	push   ecx
c000889e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a2:	6a 00                	push   0x0
c00088a4:	68 10 01 00 00       	push   0x110
c00088a9:	52                   	push   edx
c00088aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088ad:	83 c4 20             	add    esp,0x20
c00088b0:	83 c4 1c             	add    esp,0x1c
c00088b3:	c3                   	ret    

c00088b4 <Directory::create()>:
c00088b4:	83 ec 0c             	sub    esp,0xc
c00088b7:	b8 0b 00 00 00       	mov    eax,0xb
c00088bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088c7:	83 f9 19             	cmp    ecx,0x19
c00088ca:	77 2f                	ja     c00088fb <Directory::create()+0x47>
c00088cc:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088d3:	85 c9                	test   ecx,ecx
c00088d5:	74 24                	je     c00088fb <Directory::create()+0x47>
c00088d7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088dd:	85 c9                	test   ecx,ecx
c00088df:	74 1a                	je     c00088fb <Directory::create()+0x47>
c00088e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088e5:	b8 06 00 00 00       	mov    eax,0x6
c00088ea:	75 0f                	jne    c00088fb <Directory::create()+0x47>
c00088ec:	50                   	push   eax
c00088ed:	83 c2 0d             	add    edx,0xd
c00088f0:	50                   	push   eax
c00088f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f3:	52                   	push   edx
c00088f4:	51                   	push   ecx
c00088f5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088f8:	83 c4 10             	add    esp,0x10
c00088fb:	83 c4 0c             	add    esp,0xc
c00088fe:	c3                   	ret    
c00088ff:	90                   	nop

c0008900 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008900:	b8 0a 00 00 00       	mov    eax,0xa
c0008905:	c3                   	ret    
c0008906:	66 90                	xchg   ax,ax

c0008908 <Bus::Bus(char const*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890f:	83 ec 08             	sub    esp,0x8
c0008912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008916:	50                   	push   eax
c0008917:	e8 e0 11 00 00       	call   c0009afc <Device::Device(char const*)>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	ba 2c 31 02 c0       	mov    edx,0xc002312c
c0008924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008928:	89 10                	mov    DWORD PTR [eax],edx
c000892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008938:	90                   	nop
c0008939:	83 c4 0c             	add    esp,0xc
c000893c:	c3                   	ret    
c000893d:	90                   	nop
c000893e:	66 90                	xchg   ax,ax

c0008940 <Bus::~Bus()>:
c0008940:	83 ec 0c             	sub    esp,0xc
c0008943:	ba 2c 31 02 c0       	mov    edx,0xc002312c
c0008948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000894c:	89 10                	mov    DWORD PTR [eax],edx
c000894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008952:	83 ec 0c             	sub    esp,0xc
c0008955:	50                   	push   eax
c0008956:	e8 41 0f 00 00       	call   c000989c <Device::~Device()>
c000895b:	83 c4 10             	add    esp,0x10
c000895e:	90                   	nop
c000895f:	83 c4 0c             	add    esp,0xc
c0008962:	c3                   	ret    
c0008963:	90                   	nop

c0008964 <Bus::~Bus()>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000896e:	e8 cd ff ff ff       	call   c0008940 <Bus::~Bus()>
c0008973:	83 c4 10             	add    esp,0x10
c0008976:	83 ec 08             	sub    esp,0x8
c0008979:	68 58 01 00 00       	push   0x158
c000897e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008982:	e8 d4 48 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c0008987:	83 c4 10             	add    esp,0x10
c000898a:	83 c4 0c             	add    esp,0xc
c000898d:	c3                   	ret    

c000898e <KeBeepThread(void*)>:
c000898e:	83 ec 0c             	sub    esp,0xc
c0008991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008995:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000899c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00089a3:	75 01                	jne    c00089a6 <KeBeepThread(void*)+0x18>
c00089a5:	fb                   	sti    
c00089a6:	6b c0 0a             	imul   eax,eax,0xa
c00089a9:	52                   	push   edx
c00089aa:	52                   	push   edx
c00089ab:	99                   	cdq    
c00089ac:	52                   	push   edx
c00089ad:	50                   	push   eax
c00089ae:	e8 d1 e5 00 00       	call   c0016f84 <milliTenthSleep(unsigned long long)>
c00089b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089ba:	e8 62 16 01 00       	call   c001a021 <HalMakeBeep(int)>
c00089bf:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089c7:	83 c4 1c             	add    esp,0x1c
c00089ca:	e9 81 e4 00 00       	jmp    c0016e50 <blockTask(TaskState)>

c00089cf <KeBeep(int, int, bool)>:
c00089cf:	56                   	push   esi
c00089d0:	53                   	push   ebx
c00089d1:	83 ec 10             	sub    esp,0x10
c00089d4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 3c 16 01 00       	call   c001a021 <HalMakeBeep(int)>
c00089e5:	89 f0                	mov    eax,esi
c00089e7:	83 c4 10             	add    esp,0x10
c00089ea:	84 c0                	test   al,al
c00089ec:	74 1f                	je     c0008a0d <KeBeep(int, int, bool)+0x3e>
c00089ee:	50                   	push   eax
c00089ef:	50                   	push   eax
c00089f0:	6b c3 0a             	imul   eax,ebx,0xa
c00089f3:	99                   	cdq    
c00089f4:	52                   	push   edx
c00089f5:	50                   	push   eax
c00089f6:	e8 89 e5 00 00       	call   c0016f84 <milliTenthSleep(unsigned long long)>
c00089fb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a03:	83 c4 14             	add    esp,0x14
c0008a06:	5b                   	pop    ebx
c0008a07:	5e                   	pop    esi
c0008a08:	e9 14 16 01 00       	jmp    c001a021 <HalMakeBeep(int)>
c0008a0d:	68 e6 00 00 00       	push   0xe6
c0008a12:	53                   	push   ebx
c0008a13:	68 8e 89 00 c0       	push   0xc000898e
c0008a18:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0008a1e:	e8 ed e0 00 00       	call   c0016b10 <Process::createThread(void (*)(void*), void*, int)>
c0008a23:	83 c4 14             	add    esp,0x14
c0008a26:	5b                   	pop    ebx
c0008a27:	5e                   	pop    esi
c0008a28:	c3                   	ret    
c0008a29:	90                   	nop

c0008a2a <KeLoadTimezoneStrings()>:
c0008a2a:	55                   	push   ebp
c0008a2b:	89 e5                	mov    ebp,esp
c0008a2d:	53                   	push   ebx
c0008a2e:	83 ec 44             	sub    esp,0x44
c0008a31:	c6 05 20 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b320,0x1
c0008a38:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a3f:	83 ec 0c             	sub    esp,0xc
c0008a42:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008a45:	e8 9a 70 00 00       	call   c000fae4 <malloc>
c0008a4a:	83 c4 10             	add    esp,0x10
c0008a4d:	89 c3                	mov    ebx,eax
c0008a4f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008a54:	83 ec 04             	sub    esp,0x4
c0008a57:	50                   	push   eax
c0008a58:	68 60 31 02 c0       	push   0xc0023160
c0008a5d:	53                   	push   ebx
c0008a5e:	e8 c9 f6 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0008a63:	83 c4 10             	add    esp,0x10
c0008a66:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008a69:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008a6d:	75 10                	jne    c0008a7f <KeLoadTimezoneStrings()+0x55>
c0008a6f:	83 ec 0c             	sub    esp,0xc
c0008a72:	68 7f 31 02 c0       	push   0xc002317f
c0008a77:	e8 ae 73 00 00       	call   c000fe2a <KePanic(char const*)>
c0008a7c:	83 c4 10             	add    esp,0x10
c0008a7f:	83 ec 08             	sub    esp,0x8
c0008a82:	6a 01                	push   0x1
c0008a84:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008a87:	e8 be f6 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0008a8c:	83 c4 10             	add    esp,0x10
c0008a8f:	83 ec 04             	sub    esp,0x4
c0008a92:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008a95:	50                   	push   eax
c0008a96:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008a99:	50                   	push   eax
c0008a9a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008a9d:	e8 aa f9 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0008aa2:	83 c4 10             	add    esp,0x10
c0008aa5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008aa8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008aab:	83 ec 08             	sub    esp,0x8
c0008aae:	50                   	push   eax
c0008aaf:	68 95 31 02 c0       	push   0xc0023195
c0008ab4:	e8 95 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008ab9:	83 c4 10             	add    esp,0x10
c0008abc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008abf:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ac2:	83 c0 01             	add    eax,0x1
c0008ac5:	83 ec 0c             	sub    esp,0xc
c0008ac8:	50                   	push   eax
c0008ac9:	e8 16 70 00 00       	call   c000fae4 <malloc>
c0008ace:	83 c4 10             	add    esp,0x10
c0008ad1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008ad4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008ad7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ada:	83 ec 04             	sub    esp,0x4
c0008add:	50                   	push   eax
c0008ade:	6a 00                	push   0x0
c0008ae0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008ae3:	e8 08 7a ff ff       	call   c00004f0 <memset>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008aee:	8b 00                	mov    eax,DWORD PTR [eax]
c0008af0:	83 c0 0c             	add    eax,0xc
c0008af3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008af5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008af8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008afb:	83 ec 0c             	sub    esp,0xc
c0008afe:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b01:	53                   	push   ebx
c0008b02:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b05:	52                   	push   edx
c0008b06:	50                   	push   eax
c0008b07:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b0a:	ff d1                	call   ecx
c0008b0c:	83 c4 20             	add    esp,0x20
c0008b0f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b12:	83 ec 08             	sub    esp,0x8
c0008b15:	50                   	push   eax
c0008b16:	68 a5 31 02 c0       	push   0xc00231a5
c0008b1b:	e8 2e e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	83 ec 0c             	sub    esp,0xc
c0008b26:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b29:	e8 7a f6 ff ff       	call   c00081a8 <File::close()>
c0008b2e:	83 c4 10             	add    esp,0x10
c0008b31:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b35:	74 15                	je     c0008b4c <KeLoadTimezoneStrings()+0x122>
c0008b37:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b3c:	83 c0 08             	add    eax,0x8
c0008b3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b41:	83 ec 0c             	sub    esp,0xc
c0008b44:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b47:	ff d0                	call   eax
c0008b49:	83 c4 10             	add    esp,0x10
c0008b4c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008b53:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008b5a:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008b61:	7f 3a                	jg     c0008b9d <KeLoadTimezoneStrings()+0x173>
c0008b63:	83 ec 0c             	sub    esp,0xc
c0008b66:	6a 78                	push   0x78
c0008b68:	e8 77 6f 00 00       	call   c000fae4 <malloc>
c0008b6d:	83 c4 10             	add    esp,0x10
c0008b70:	89 c2                	mov    edx,eax
c0008b72:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b75:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0008b7c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b7f:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008b86:	83 ec 08             	sub    esp,0x8
c0008b89:	68 ae 31 02 c0       	push   0xc00231ae
c0008b8e:	50                   	push   eax
c0008b8f:	e8 bc 7a ff ff       	call   c0000650 <strcpy>
c0008b94:	83 c4 10             	add    esp,0x10
c0008b97:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008b9b:	eb bd                	jmp    c0008b5a <KeLoadTimezoneStrings()+0x130>
c0008b9d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008ba4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ba7:	8d 50 01             	lea    edx,[eax+0x1]
c0008baa:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008bad:	89 c2                	mov    edx,eax
c0008baf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008bb2:	01 d0                	add    eax,edx
c0008bb4:	8a 00                	mov    al,BYTE PTR [eax]
c0008bb6:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008bb9:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008bbd:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bc0:	0f be c0             	movsx  eax,al
c0008bc3:	83 f8 0d             	cmp    eax,0xd
c0008bc6:	0f 84 82 01 00 00    	je     c0008d4e <KeLoadTimezoneStrings()+0x324>
c0008bcc:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bcf:	0f be c0             	movsx  eax,al
c0008bd2:	83 f8 09             	cmp    eax,0x9
c0008bd5:	75 44                	jne    c0008c1b <KeLoadTimezoneStrings()+0x1f1>
c0008bd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008bda:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008be1:	83 ec 0c             	sub    esp,0xc
c0008be4:	50                   	push   eax
c0008be5:	e8 96 79 ff ff       	call   c0000580 <strlen>
c0008bea:	83 c4 10             	add    esp,0x10
c0008bed:	83 f8 08             	cmp    eax,0x8
c0008bf0:	0f 96 c0             	setbe  al
c0008bf3:	0f b6 c0             	movzx  eax,al
c0008bf6:	85 c0                	test   eax,eax
c0008bf8:	0f 84 56 01 00 00    	je     c0008d54 <KeLoadTimezoneStrings()+0x32a>
c0008bfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c01:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c08:	83 ec 08             	sub    esp,0x8
c0008c0b:	68 ae 31 02 c0       	push   0xc00231ae
c0008c10:	50                   	push   eax
c0008c11:	e8 5a 7c ff ff       	call   c0000870 <strcat>
c0008c16:	83 c4 10             	add    esp,0x10
c0008c19:	eb bc                	jmp    c0008bd7 <KeLoadTimezoneStrings()+0x1ad>
c0008c1b:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1e:	0f be c0             	movsx  eax,al
c0008c21:	83 f8 0a             	cmp    eax,0xa
c0008c24:	0f 85 9b 00 00 00    	jne    c0008cc5 <KeLoadTimezoneStrings()+0x29b>
c0008c2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c2d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c34:	83 ec 0c             	sub    esp,0xc
c0008c37:	50                   	push   eax
c0008c38:	e8 43 79 ff ff       	call   c0000580 <strlen>
c0008c3d:	83 c4 10             	add    esp,0x10
c0008c40:	83 f8 35             	cmp    eax,0x35
c0008c43:	0f 96 c0             	setbe  al
c0008c46:	0f b6 c0             	movzx  eax,al
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	74 1d                	je     c0008c6a <KeLoadTimezoneStrings()+0x240>
c0008c4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c50:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c57:	83 ec 08             	sub    esp,0x8
c0008c5a:	68 ae 31 02 c0       	push   0xc00231ae
c0008c5f:	50                   	push   eax
c0008c60:	e8 0b 7c ff ff       	call   c0000870 <strcat>
c0008c65:	83 c4 10             	add    esp,0x10
c0008c68:	eb c0                	jmp    c0008c2a <KeLoadTimezoneStrings()+0x200>
c0008c6a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008c6e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c71:	89 c2                	mov    edx,eax
c0008c73:	c1 fa 1f             	sar    edx,0x1f
c0008c76:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008c79:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008c7c:	39 c8                	cmp    eax,ecx
c0008c7e:	89 d0                	mov    eax,edx
c0008c80:	19 d8                	sbb    eax,ebx
c0008c82:	0f 82 d2 00 00 00    	jb     c0008d5a <KeLoadTimezoneStrings()+0x330>
c0008c88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c8b:	a3 24 b3 02 c0       	mov    ds:0xc002b324,eax
c0008c90:	83 ec 08             	sub    esp,0x8
c0008c93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008c96:	68 b0 31 02 c0       	push   0xc00231b0
c0008c9b:	e8 ae e2 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008ca0:	83 c4 10             	add    esp,0x10
c0008ca3:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008ca8:	83 ec 08             	sub    esp,0x8
c0008cab:	50                   	push   eax
c0008cac:	68 c5 31 02 c0       	push   0xc00231c5
c0008cb1:	e8 98 e2 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008cb6:	83 c4 10             	add    esp,0x10
c0008cb9:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008cc0:	e9 9b 00 00 00       	jmp    c0008d60 <KeLoadTimezoneStrings()+0x336>
c0008cc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cc8:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008ccf:	83 ec 0c             	sub    esp,0xc
c0008cd2:	50                   	push   eax
c0008cd3:	e8 a8 78 ff ff       	call   c0000580 <strlen>
c0008cd8:	83 c4 10             	add    esp,0x10
c0008cdb:	83 f8 31             	cmp    eax,0x31
c0008cde:	0f 96 c0             	setbe  al
c0008ce1:	0f b6 c0             	movzx  eax,al
c0008ce4:	85 c0                	test   eax,eax
c0008ce6:	74 1f                	je     c0008d07 <KeLoadTimezoneStrings()+0x2dd>
c0008ce8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ceb:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cf2:	83 ec 08             	sub    esp,0x8
c0008cf5:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008cf8:	52                   	push   edx
c0008cf9:	50                   	push   eax
c0008cfa:	e8 71 7b ff ff       	call   c0000870 <strcat>
c0008cff:	83 c4 10             	add    esp,0x10
c0008d02:	e9 9d fe ff ff       	jmp    c0008ba4 <KeLoadTimezoneStrings()+0x17a>
c0008d07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d0a:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d11:	83 ec 0c             	sub    esp,0xc
c0008d14:	50                   	push   eax
c0008d15:	e8 66 78 ff ff       	call   c0000580 <strlen>
c0008d1a:	83 c4 10             	add    esp,0x10
c0008d1d:	83 f8 32             	cmp    eax,0x32
c0008d20:	0f 94 c0             	sete   al
c0008d23:	0f b6 c0             	movzx  eax,al
c0008d26:	85 c0                	test   eax,eax
c0008d28:	0f 84 76 fe ff ff    	je     c0008ba4 <KeLoadTimezoneStrings()+0x17a>
c0008d2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d31:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d38:	83 ec 08             	sub    esp,0x8
c0008d3b:	68 c9 31 02 c0       	push   0xc00231c9
c0008d40:	50                   	push   eax
c0008d41:	e8 2a 7b ff ff       	call   c0000870 <strcat>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	e9 56 fe ff ff       	jmp    c0008ba4 <KeLoadTimezoneStrings()+0x17a>
c0008d4e:	90                   	nop
c0008d4f:	e9 50 fe ff ff       	jmp    c0008ba4 <KeLoadTimezoneStrings()+0x17a>
c0008d54:	90                   	nop
c0008d55:	e9 4a fe ff ff       	jmp    c0008ba4 <KeLoadTimezoneStrings()+0x17a>
c0008d5a:	90                   	nop
c0008d5b:	e9 44 fe ff ff       	jmp    c0008ba4 <KeLoadTimezoneStrings()+0x17a>
c0008d60:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d65:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d68:	7d 49                	jge    c0008db3 <KeLoadTimezoneStrings()+0x389>
c0008d6a:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d6f:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d72:	0f 9c c0             	setl   al
c0008d75:	0f b6 d0             	movzx  edx,al
c0008d78:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d7d:	52                   	push   edx
c0008d7e:	50                   	push   eax
c0008d7f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008d82:	68 ce 31 02 c0       	push   0xc00231ce
c0008d87:	e8 c2 e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008d92:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d99:	83 ec 04             	sub    esp,0x4
c0008d9c:	50                   	push   eax
c0008d9d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008da0:	68 dc 31 02 c0       	push   0xc00231dc
c0008da5:	e8 a4 e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008daa:	83 c4 10             	add    esp,0x10
c0008dad:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008db1:	eb ad                	jmp    c0008d60 <KeLoadTimezoneStrings()+0x336>
c0008db3:	90                   	nop
c0008db4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008db7:	c9                   	leave  
c0008db8:	c3                   	ret    

c0008db9 <KeGetTimezoneStringFromID(int)>:
c0008db9:	55                   	push   ebp
c0008dba:	89 e5                	mov    ebp,esp
c0008dbc:	83 ec 08             	sub    esp,0x8
c0008dbf:	83 ec 08             	sub    esp,0x8
c0008dc2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008dc5:	68 e5 31 02 c0       	push   0xc00231e5
c0008dca:	e8 7f e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008dcf:	83 c4 10             	add    esp,0x10
c0008dd2:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0008dd7:	83 f0 01             	xor    eax,0x1
c0008dda:	0f b6 c0             	movzx  eax,al
c0008ddd:	85 c0                	test   eax,eax
c0008ddf:	74 15                	je     c0008df6 <KeGetTimezoneStringFromID(int)+0x3d>
c0008de1:	e8 44 fc ff ff       	call   c0008a2a <KeLoadTimezoneStrings()>
c0008de6:	83 ec 0c             	sub    esp,0xc
c0008de9:	68 03 32 02 c0       	push   0xc0023203
c0008dee:	e8 5b e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008df3:	83 c4 10             	add    esp,0x10
c0008df6:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dfb:	83 ec 04             	sub    esp,0x4
c0008dfe:	50                   	push   eax
c0008dff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e02:	68 14 32 02 c0       	push   0xc0023214
c0008e07:	e8 42 e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e14:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e17:	7d 06                	jge    c0008e1f <KeGetTimezoneStringFromID(int)+0x66>
c0008e19:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e1d:	79 07                	jns    c0008e26 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e1f:	b8 00 00 00 00       	mov    eax,0x0
c0008e24:	eb 2e                	jmp    c0008e54 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e29:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e30:	83 c0 01             	add    eax,0x1
c0008e33:	83 ec 04             	sub    esp,0x4
c0008e36:	50                   	push   eax
c0008e37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e3a:	68 27 32 02 c0       	push   0xc0023227
c0008e3f:	e8 0a e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008e44:	83 c4 10             	add    esp,0x10
c0008e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e4a:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e51:	83 c0 01             	add    eax,0x1
c0008e54:	c9                   	leave  
c0008e55:	c3                   	ret    

c0008e56 <KeUpdateTimezone(char const*)>:
c0008e56:	55                   	push   ebp
c0008e57:	89 e5                	mov    ebp,esp
c0008e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e5c:	8a 00                	mov    al,BYTE PTR [eax]
c0008e5e:	0f be c0             	movsx  eax,al
c0008e61:	83 f8 2b             	cmp    eax,0x2b
c0008e64:	74 11                	je     c0008e77 <KeUpdateTimezone(char const*)+0x21>
c0008e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e69:	8a 00                	mov    al,BYTE PTR [eax]
c0008e6b:	0f be c0             	movsx  eax,al
c0008e6e:	83 f8 2d             	cmp    eax,0x2d
c0008e71:	0f 85 be 00 00 00    	jne    c0008f35 <KeUpdateTimezone(char const*)+0xdf>
c0008e77:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008e7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e81:	83 c0 02             	add    eax,0x2
c0008e84:	8a 00                	mov    al,BYTE PTR [eax]
c0008e86:	0f be c0             	movsx  eax,al
c0008e89:	83 f8 2e             	cmp    eax,0x2e
c0008e8c:	75 10                	jne    c0008e9e <KeUpdateTimezone(char const*)+0x48>
c0008e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e91:	83 c0 03             	add    eax,0x3
c0008e94:	8a 00                	mov    al,BYTE PTR [eax]
c0008e96:	0f be c0             	movsx  eax,al
c0008e99:	83 f8 35             	cmp    eax,0x35
c0008e9c:	74 20                	je     c0008ebe <KeUpdateTimezone(char const*)+0x68>
c0008e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea1:	83 c0 03             	add    eax,0x3
c0008ea4:	8a 00                	mov    al,BYTE PTR [eax]
c0008ea6:	0f be c0             	movsx  eax,al
c0008ea9:	83 f8 2e             	cmp    eax,0x2e
c0008eac:	75 14                	jne    c0008ec2 <KeUpdateTimezone(char const*)+0x6c>
c0008eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb1:	83 c0 04             	add    eax,0x4
c0008eb4:	8a 00                	mov    al,BYTE PTR [eax]
c0008eb6:	0f be c0             	movsx  eax,al
c0008eb9:	83 f8 35             	cmp    eax,0x35
c0008ebc:	75 04                	jne    c0008ec2 <KeUpdateTimezone(char const*)+0x6c>
c0008ebe:	b0 01                	mov    al,0x1
c0008ec0:	eb 02                	jmp    c0008ec4 <KeUpdateTimezone(char const*)+0x6e>
c0008ec2:	b0 00                	mov    al,0x0
c0008ec4:	a2 61 b6 02 c0       	mov    ds:0xc002b661,al
c0008ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ecc:	83 c0 01             	add    eax,0x1
c0008ecf:	8a 00                	mov    al,BYTE PTR [eax]
c0008ed1:	0f be c0             	movsx  eax,al
c0008ed4:	83 e8 30             	sub    eax,0x30
c0008ed7:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edf:	83 c0 03             	add    eax,0x3
c0008ee2:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee4:	0f be c0             	movsx  eax,al
c0008ee7:	83 f8 2e             	cmp    eax,0x2e
c0008eea:	75 2e                	jne    c0008f1a <KeUpdateTimezone(char const*)+0xc4>
c0008eec:	8b 15 64 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b664
c0008ef2:	89 d0                	mov    eax,edx
c0008ef4:	c1 e0 02             	shl    eax,0x2
c0008ef7:	01 d0                	add    eax,edx
c0008ef9:	d1 e0                	shl    eax,1
c0008efb:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f03:	83 c0 02             	add    eax,0x2
c0008f06:	8a 00                	mov    al,BYTE PTR [eax]
c0008f08:	0f be c0             	movsx  eax,al
c0008f0b:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f0e:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f13:	01 d0                	add    eax,edx
c0008f15:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f1d:	8a 00                	mov    al,BYTE PTR [eax]
c0008f1f:	0f be c0             	movsx  eax,al
c0008f22:	83 f8 2d             	cmp    eax,0x2d
c0008f25:	75 26                	jne    c0008f4d <KeUpdateTimezone(char const*)+0xf7>
c0008f27:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f2c:	f7 d8                	neg    eax
c0008f2e:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f33:	eb 18                	jmp    c0008f4d <KeUpdateTimezone(char const*)+0xf7>
c0008f35:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008f3c:	c6 05 61 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b661,0x0
c0008f43:	c7 05 64 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b664,0x0
c0008f4d:	90                   	nop
c0008f4e:	5d                   	pop    ebp
c0008f4f:	c3                   	ret    

c0008f50 <KeSetTimezone(char const*)>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 18             	sub    esp,0x18
c0008f56:	83 ec 0c             	sub    esp,0xc
c0008f59:	68 34 32 02 c0       	push   0xc0023234
c0008f5e:	e8 4d 43 00 00       	call   c000d2b0 <CmOpen(char const*)>
c0008f63:	83 c4 10             	add    esp,0x10
c0008f66:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008f69:	83 ec 08             	sub    esp,0x8
c0008f6c:	68 59 32 02 c0       	push   0xc0023259
c0008f71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f74:	e8 32 4f 00 00       	call   c000deab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008f79:	83 c4 10             	add    esp,0x10
c0008f7c:	83 ec 04             	sub    esp,0x4
c0008f7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008f82:	50                   	push   eax
c0008f83:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f86:	e8 f7 47 00 00       	call   c000d782 <CmSetString(Reghive_Tag*, int, char const*)>
c0008f8b:	83 c4 10             	add    esp,0x10
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f94:	e8 35 44 00 00       	call   c000d3ce <CmClose(Reghive_Tag*)>
c0008f99:	83 c4 10             	add    esp,0x10
c0008f9c:	83 ec 0c             	sub    esp,0xc
c0008f9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fa2:	e8 af fe ff ff       	call   c0008e56 <KeUpdateTimezone(char const*)>
c0008fa7:	83 c4 10             	add    esp,0x10
c0008faa:	90                   	nop
c0008fab:	c9                   	leave  
c0008fac:	c3                   	ret    

c0008fad <KeSetTimezone(int)>:
c0008fad:	55                   	push   ebp
c0008fae:	89 e5                	mov    ebp,esp
c0008fb0:	83 ec 18             	sub    esp,0x18
c0008fb3:	83 ec 0c             	sub    esp,0xc
c0008fb6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fb9:	e8 fb fd ff ff       	call   c0008db9 <KeGetTimezoneStringFromID(int)>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0008fc8:	74 12                	je     c0008fdc <KeSetTimezone(int)+0x2f>
c0008fca:	83 ec 0c             	sub    esp,0xc
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 7b ff ff ff       	call   c0008f50 <KeSetTimezone(char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	b0 01                	mov    al,0x1
c0008fda:	eb 02                	jmp    c0008fde <KeSetTimezone(int)+0x31>
c0008fdc:	b0 00                	mov    al,0x0
c0008fde:	c9                   	leave  
c0008fdf:	c3                   	ret    

c0008fe0 <KeLoadTimezone()>:
c0008fe0:	55                   	push   ebp
c0008fe1:	89 e5                	mov    ebp,esp
c0008fe3:	81 ec 68 02 00 00    	sub    esp,0x268
c0008fe9:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0008ff0:	83 ec 0c             	sub    esp,0xc
c0008ff3:	68 34 32 02 c0       	push   0xc0023234
c0008ff8:	e8 b3 42 00 00       	call   c000d2b0 <CmOpen(char const*)>
c0008ffd:	83 c4 10             	add    esp,0x10
c0009000:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009003:	83 ec 08             	sub    esp,0x8
c0009006:	68 59 32 02 c0       	push   0xc0023259
c000900b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000900e:	e8 98 4e 00 00       	call   c000deab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009013:	83 c4 10             	add    esp,0x10
c0009016:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009019:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000901d:	7e 18                	jle    c0009037 <KeLoadTimezone()+0x57>
c000901f:	83 ec 04             	sub    esp,0x4
c0009022:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009028:	50                   	push   eax
c0009029:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000902c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902f:	e8 ec 43 00 00       	call   c000d420 <CmGetString(Reghive_Tag*, int, char*)>
c0009034:	83 c4 10             	add    esp,0x10
c0009037:	83 ec 0c             	sub    esp,0xc
c000903a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000903d:	e8 8c 43 00 00       	call   c000d3ce <CmClose(Reghive_Tag*)>
c0009042:	83 c4 10             	add    esp,0x10
c0009045:	83 ec 0c             	sub    esp,0xc
c0009048:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c000904e:	50                   	push   eax
c000904f:	e8 02 fe ff ff       	call   c0008e56 <KeUpdateTimezone(char const*)>
c0009054:	83 c4 10             	add    esp,0x10
c0009057:	90                   	nop
c0009058:	c9                   	leave  
c0009059:	c3                   	ret    

c000905a <Clock::Clock(char const*)>:
c000905a:	83 ec 0c             	sub    esp,0xc
c000905d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009061:	83 ec 08             	sub    esp,0x8
c0009064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009068:	50                   	push   eax
c0009069:	e8 8e 0a 00 00       	call   c0009afc <Device::Device(char const*)>
c000906e:	83 c4 10             	add    esp,0x10
c0009071:	ba b8 32 02 c0       	mov    edx,0xc00232b8
c0009076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000907a:	89 10                	mov    DWORD PTR [eax],edx
c000907c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009080:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000908a:	90                   	nop
c000908b:	83 c4 0c             	add    esp,0xc
c000908e:	c3                   	ret    
c000908f:	90                   	nop

c0009090 <Clock::~Clock()>:
c0009090:	83 ec 0c             	sub    esp,0xc
c0009093:	ba b8 32 02 c0       	mov    edx,0xc00232b8
c0009098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000909c:	89 10                	mov    DWORD PTR [eax],edx
c000909e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a2:	83 ec 0c             	sub    esp,0xc
c00090a5:	50                   	push   eax
c00090a6:	e8 f1 07 00 00       	call   c000989c <Device::~Device()>
c00090ab:	83 c4 10             	add    esp,0x10
c00090ae:	90                   	nop
c00090af:	83 c4 0c             	add    esp,0xc
c00090b2:	c3                   	ret    
c00090b3:	90                   	nop

c00090b4 <Clock::~Clock()>:
c00090b4:	83 ec 0c             	sub    esp,0xc
c00090b7:	83 ec 0c             	sub    esp,0xc
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 cd ff ff ff       	call   c0009090 <Clock::~Clock()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	83 ec 08             	sub    esp,0x8
c00090c9:	68 58 01 00 00       	push   0x158
c00090ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d2:	e8 84 41 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c00090d7:	83 c4 10             	add    esp,0x10
c00090da:	83 c4 0c             	add    esp,0xc
c00090dd:	c3                   	ret    

c00090de <Clock::timeInSecondsLocal()>:
c00090de:	55                   	push   ebp
c00090df:	89 e5                	mov    ebp,esp
c00090e1:	53                   	push   ebx
c00090e2:	83 ec 04             	sub    esp,0x4
c00090e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ea:	83 c0 24             	add    eax,0x24
c00090ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ef:	83 ec 0c             	sub    esp,0xc
c00090f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00090f5:	ff d0                	call   eax
c00090f7:	83 c4 10             	add    esp,0x10
c00090fa:	89 c1                	mov    ecx,eax
c00090fc:	89 d3                	mov    ebx,edx
c00090fe:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009103:	0f b6 d0             	movzx  edx,al
c0009106:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c000910b:	01 d0                	add    eax,edx
c000910d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009113:	89 c2                	mov    edx,eax
c0009115:	c1 fa 1f             	sar    edx,0x1f
c0009118:	01 c1                	add    ecx,eax
c000911a:	11 d3                	adc    ebx,edx
c000911c:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c0009121:	0f b6 c0             	movzx  eax,al
c0009124:	85 c0                	test   eax,eax
c0009126:	74 0c                	je     c0009134 <Clock::timeInSecondsLocal()+0x56>
c0009128:	b8 08 07 00 00       	mov    eax,0x708
c000912d:	ba 00 00 00 00       	mov    edx,0x0
c0009132:	eb 0a                	jmp    c000913e <Clock::timeInSecondsLocal()+0x60>
c0009134:	b8 00 00 00 00       	mov    eax,0x0
c0009139:	ba 00 00 00 00       	mov    edx,0x0
c000913e:	01 c8                	add    eax,ecx
c0009140:	11 da                	adc    edx,ebx
c0009142:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009145:	c9                   	leave  
c0009146:	c3                   	ret    
c0009147:	90                   	nop

c0009148 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0009148:	55                   	push   ebp
c0009149:	89 e5                	mov    ebp,esp
c000914b:	56                   	push   esi
c000914c:	53                   	push   ebx
c000914d:	83 ec 10             	sub    esp,0x10
c0009150:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009153:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009156:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009159:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000915c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000915f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009161:	83 c0 2c             	add    eax,0x2c
c0009164:	8b 30                	mov    esi,DWORD PTR [eax]
c0009166:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c000916b:	0f b6 d0             	movzx  edx,al
c000916e:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009173:	01 d0                	add    eax,edx
c0009175:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000917b:	89 c2                	mov    edx,eax
c000917d:	c1 fa 1f             	sar    edx,0x1f
c0009180:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009183:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c0009186:	29 c1                	sub    ecx,eax
c0009188:	19 d3                	sbb    ebx,edx
c000918a:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000918f:	0f b6 c0             	movzx  eax,al
c0009192:	85 c0                	test   eax,eax
c0009194:	74 0c                	je     c00091a2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c0009196:	b8 08 07 00 00       	mov    eax,0x708
c000919b:	ba 00 00 00 00       	mov    edx,0x0
c00091a0:	eb 0a                	jmp    c00091ac <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c00091a2:	b8 00 00 00 00       	mov    eax,0x0
c00091a7:	ba 00 00 00 00       	mov    edx,0x0
c00091ac:	29 c1                	sub    ecx,eax
c00091ae:	19 d3                	sbb    ebx,edx
c00091b0:	89 c8                	mov    eax,ecx
c00091b2:	89 da                	mov    edx,ebx
c00091b4:	83 ec 04             	sub    esp,0x4
c00091b7:	52                   	push   edx
c00091b8:	50                   	push   eax
c00091b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00091bc:	ff d6                	call   esi
c00091be:	83 c4 10             	add    esp,0x10
c00091c1:	8d 65 f8             	lea    esp,[ebp-0x8]
c00091c4:	5b                   	pop    ebx
c00091c5:	5e                   	pop    esi
c00091c6:	5d                   	pop    ebp
c00091c7:	c3                   	ret    

c00091c8 <KeDatetimeToSeconds(datetime_t)>:
c00091c8:	55                   	push   ebp
c00091c9:	89 e5                	mov    ebp,esp
c00091cb:	53                   	push   ebx
c00091cc:	83 ec 24             	sub    esp,0x24
c00091cf:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00091d3:	2d 6c 07 00 00       	sub    eax,0x76c
c00091d8:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00091dc:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00091df:	83 e8 01             	sub    eax,0x1
c00091e2:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c00091e5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c00091ec:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00091f3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00091fa:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009201:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009204:	0f b6 c8             	movzx  ecx,al
c0009207:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000920a:	0f b6 d0             	movzx  edx,al
c000920d:	89 d0                	mov    eax,edx
c000920f:	c1 e0 04             	shl    eax,0x4
c0009212:	29 d0                	sub    eax,edx
c0009214:	c1 e0 02             	shl    eax,0x2
c0009217:	8d 14 01             	lea    edx,[ecx+eax*1]
c000921a:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000921d:	0f b6 c0             	movzx  eax,al
c0009220:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009226:	01 d0                	add    eax,edx
c0009228:	89 c2                	mov    edx,eax
c000922a:	c1 fa 1f             	sar    edx,0x1f
c000922d:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009230:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009233:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009236:	0f b6 c0             	movzx  eax,al
c0009239:	83 e8 01             	sub    eax,0x1
c000923c:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000923f:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009242:	0f b6 c0             	movzx  eax,al
c0009245:	8b 04 85 80 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd80]
c000924c:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000924f:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009252:	0f b6 c0             	movzx  eax,al
c0009255:	83 f8 01             	cmp    eax,0x1
c0009258:	76 7c                	jbe    c00092d6 <KeDatetimeToSeconds(datetime_t)+0x10e>
c000925a:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000925e:	0f b7 c0             	movzx  eax,ax
c0009261:	83 e0 03             	and    eax,0x3
c0009264:	85 c0                	test   eax,eax
c0009266:	75 6e                	jne    c00092d6 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0009268:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000926c:	0f b7 c8             	movzx  ecx,ax
c000926f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009274:	89 c8                	mov    eax,ecx
c0009276:	f7 e2                	mul    edx
c0009278:	c1 ea 05             	shr    edx,0x5
c000927b:	89 d0                	mov    eax,edx
c000927d:	c1 e0 02             	shl    eax,0x2
c0009280:	01 d0                	add    eax,edx
c0009282:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009289:	01 d0                	add    eax,edx
c000928b:	c1 e0 02             	shl    eax,0x2
c000928e:	29 c1                	sub    ecx,eax
c0009290:	89 c8                	mov    eax,ecx
c0009292:	0f b7 c0             	movzx  eax,ax
c0009295:	85 c0                	test   eax,eax
c0009297:	75 39                	jne    c00092d2 <KeDatetimeToSeconds(datetime_t)+0x10a>
c0009299:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000929d:	0f b7 c0             	movzx  eax,ax
c00092a0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00092a6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00092ab:	f7 e9                	imul   ecx
c00092ad:	c1 fa 07             	sar    edx,0x7
c00092b0:	89 c8                	mov    eax,ecx
c00092b2:	c1 f8 1f             	sar    eax,0x1f
c00092b5:	29 c2                	sub    edx,eax
c00092b7:	89 d0                	mov    eax,edx
c00092b9:	c1 e0 02             	shl    eax,0x2
c00092bc:	01 d0                	add    eax,edx
c00092be:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092c5:	01 d0                	add    eax,edx
c00092c7:	c1 e0 04             	shl    eax,0x4
c00092ca:	29 c1                	sub    ecx,eax
c00092cc:	89 ca                	mov    edx,ecx
c00092ce:	85 d2                	test   edx,edx
c00092d0:	75 04                	jne    c00092d6 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092d2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c00092d6:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092da:	0f b7 c0             	movzx  eax,ax
c00092dd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00092e0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00092e3:	83 f8 46             	cmp    eax,0x46
c00092e6:	0f 9f c0             	setg   al
c00092e9:	0f b6 c0             	movzx  eax,al
c00092ec:	85 c0                	test   eax,eax
c00092ee:	0f 84 a4 00 00 00    	je     c0009398 <KeDatetimeToSeconds(datetime_t)+0x1d0>
c00092f4:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c00092fb:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092ff:	0f b7 d0             	movzx  edx,ax
c0009302:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009305:	39 c2                	cmp    edx,eax
c0009307:	0f 8e b8 01 00 00    	jle    c00094c5 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c000930d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009310:	83 e0 03             	and    eax,0x3
c0009313:	85 c0                	test   eax,eax
c0009315:	75 6b                	jne    c0009382 <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009317:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000931a:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000931f:	f7 e9                	imul   ecx
c0009321:	c1 fa 05             	sar    edx,0x5
c0009324:	89 c8                	mov    eax,ecx
c0009326:	c1 f8 1f             	sar    eax,0x1f
c0009329:	29 c2                	sub    edx,eax
c000932b:	89 d0                	mov    eax,edx
c000932d:	c1 e0 02             	shl    eax,0x2
c0009330:	01 d0                	add    eax,edx
c0009332:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009339:	01 d0                	add    eax,edx
c000933b:	c1 e0 02             	shl    eax,0x2
c000933e:	29 c1                	sub    ecx,eax
c0009340:	89 ca                	mov    edx,ecx
c0009342:	85 d2                	test   edx,edx
c0009344:	75 35                	jne    c000937b <KeDatetimeToSeconds(datetime_t)+0x1b3>
c0009346:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009349:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000934f:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009354:	f7 e9                	imul   ecx
c0009356:	c1 fa 07             	sar    edx,0x7
c0009359:	89 c8                	mov    eax,ecx
c000935b:	c1 f8 1f             	sar    eax,0x1f
c000935e:	29 c2                	sub    edx,eax
c0009360:	89 d0                	mov    eax,edx
c0009362:	c1 e0 02             	shl    eax,0x2
c0009365:	01 d0                	add    eax,edx
c0009367:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000936e:	01 d0                	add    eax,edx
c0009370:	c1 e0 04             	shl    eax,0x4
c0009373:	29 c1                	sub    ecx,eax
c0009375:	89 ca                	mov    edx,ecx
c0009377:	85 d2                	test   edx,edx
c0009379:	75 07                	jne    c0009382 <KeDatetimeToSeconds(datetime_t)+0x1ba>
c000937b:	b8 6e 01 00 00       	mov    eax,0x16e
c0009380:	eb 05                	jmp    c0009387 <KeDatetimeToSeconds(datetime_t)+0x1bf>
c0009382:	b8 6d 01 00 00       	mov    eax,0x16d
c0009387:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000938a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000938d:	83 c0 01             	add    eax,0x1
c0009390:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009393:	e9 63 ff ff ff       	jmp    c00092fb <KeDatetimeToSeconds(datetime_t)+0x133>
c0009398:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000939b:	83 f8 45             	cmp    eax,0x45
c000939e:	0f 8f 21 01 00 00    	jg     c00094c5 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c00093a4:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c00093ab:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00093af:	0f b7 d0             	movzx  edx,ax
c00093b2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093b5:	39 c2                	cmp    edx,eax
c00093b7:	0f 8d 8b 00 00 00    	jge    c0009448 <KeDatetimeToSeconds(datetime_t)+0x280>
c00093bd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093c0:	83 e0 03             	and    eax,0x3
c00093c3:	85 c0                	test   eax,eax
c00093c5:	75 6b                	jne    c0009432 <KeDatetimeToSeconds(datetime_t)+0x26a>
c00093c7:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093ca:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093cf:	f7 e9                	imul   ecx
c00093d1:	c1 fa 05             	sar    edx,0x5
c00093d4:	89 c8                	mov    eax,ecx
c00093d6:	c1 f8 1f             	sar    eax,0x1f
c00093d9:	29 c2                	sub    edx,eax
c00093db:	89 d0                	mov    eax,edx
c00093dd:	c1 e0 02             	shl    eax,0x2
c00093e0:	01 d0                	add    eax,edx
c00093e2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093e9:	01 d0                	add    eax,edx
c00093eb:	c1 e0 02             	shl    eax,0x2
c00093ee:	29 c1                	sub    ecx,eax
c00093f0:	89 ca                	mov    edx,ecx
c00093f2:	85 d2                	test   edx,edx
c00093f4:	75 35                	jne    c000942b <KeDatetimeToSeconds(datetime_t)+0x263>
c00093f6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093f9:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093ff:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009404:	f7 e9                	imul   ecx
c0009406:	c1 fa 07             	sar    edx,0x7
c0009409:	89 c8                	mov    eax,ecx
c000940b:	c1 f8 1f             	sar    eax,0x1f
c000940e:	29 c2                	sub    edx,eax
c0009410:	89 d0                	mov    eax,edx
c0009412:	c1 e0 02             	shl    eax,0x2
c0009415:	01 d0                	add    eax,edx
c0009417:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000941e:	01 d0                	add    eax,edx
c0009420:	c1 e0 04             	shl    eax,0x4
c0009423:	29 c1                	sub    ecx,eax
c0009425:	89 ca                	mov    edx,ecx
c0009427:	85 d2                	test   edx,edx
c0009429:	75 07                	jne    c0009432 <KeDatetimeToSeconds(datetime_t)+0x26a>
c000942b:	b8 6e 01 00 00       	mov    eax,0x16e
c0009430:	eb 05                	jmp    c0009437 <KeDatetimeToSeconds(datetime_t)+0x26f>
c0009432:	b8 6d 01 00 00       	mov    eax,0x16d
c0009437:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000943a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000943d:	83 e8 01             	sub    eax,0x1
c0009440:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009443:	e9 63 ff ff ff       	jmp    c00093ab <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009448:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000944b:	83 e0 03             	and    eax,0x3
c000944e:	85 c0                	test   eax,eax
c0009450:	75 6b                	jne    c00094bd <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009452:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009455:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000945a:	f7 e9                	imul   ecx
c000945c:	c1 fa 05             	sar    edx,0x5
c000945f:	89 c8                	mov    eax,ecx
c0009461:	c1 f8 1f             	sar    eax,0x1f
c0009464:	29 c2                	sub    edx,eax
c0009466:	89 d0                	mov    eax,edx
c0009468:	c1 e0 02             	shl    eax,0x2
c000946b:	01 d0                	add    eax,edx
c000946d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009474:	01 d0                	add    eax,edx
c0009476:	c1 e0 02             	shl    eax,0x2
c0009479:	29 c1                	sub    ecx,eax
c000947b:	89 ca                	mov    edx,ecx
c000947d:	85 d2                	test   edx,edx
c000947f:	75 35                	jne    c00094b6 <KeDatetimeToSeconds(datetime_t)+0x2ee>
c0009481:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009484:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000948a:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000948f:	f7 e9                	imul   ecx
c0009491:	c1 fa 07             	sar    edx,0x7
c0009494:	89 c8                	mov    eax,ecx
c0009496:	c1 f8 1f             	sar    eax,0x1f
c0009499:	29 c2                	sub    edx,eax
c000949b:	89 d0                	mov    eax,edx
c000949d:	c1 e0 02             	shl    eax,0x2
c00094a0:	01 d0                	add    eax,edx
c00094a2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a9:	01 d0                	add    eax,edx
c00094ab:	c1 e0 04             	shl    eax,0x4
c00094ae:	29 c1                	sub    ecx,eax
c00094b0:	89 ca                	mov    edx,ecx
c00094b2:	85 d2                	test   edx,edx
c00094b4:	75 07                	jne    c00094bd <KeDatetimeToSeconds(datetime_t)+0x2f5>
c00094b6:	b8 6e 01 00 00       	mov    eax,0x16e
c00094bb:	eb 05                	jmp    c00094c2 <KeDatetimeToSeconds(datetime_t)+0x2fa>
c00094bd:	b8 6d 01 00 00       	mov    eax,0x16d
c00094c2:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00094c8:	89 c2                	mov    edx,eax
c00094ca:	c1 fa 1f             	sar    edx,0x1f
c00094cd:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c00094d3:	6b c8 00             	imul   ecx,eax,0x0
c00094d6:	01 d9                	add    ecx,ebx
c00094d8:	bb 80 51 01 00       	mov    ebx,0x15180
c00094dd:	f7 e3                	mul    ebx
c00094df:	01 d1                	add    ecx,edx
c00094e1:	89 ca                	mov    edx,ecx
c00094e3:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c00094e6:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c00094e9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00094ec:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00094ef:	83 c4 24             	add    esp,0x24
c00094f2:	5b                   	pop    ebx
c00094f3:	5d                   	pop    ebp
c00094f4:	c3                   	ret    
c00094f5:	90                   	nop

c00094f6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00094f6:	55                   	push   ebp
c00094f7:	89 e5                	mov    ebp,esp
c00094f9:	56                   	push   esi
c00094fa:	53                   	push   ebx
c00094fb:	83 ec 20             	sub    esp,0x20
c00094fe:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009501:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009504:	e8 bf fc ff ff       	call   c00091c8 <KeDatetimeToSeconds(datetime_t)>
c0009509:	83 c4 08             	add    esp,0x8
c000950c:	89 c3                	mov    ebx,eax
c000950e:	89 d6                	mov    esi,edx
c0009510:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009515:	0f b6 d0             	movzx  edx,al
c0009518:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c000951d:	01 d0                	add    eax,edx
c000951f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009525:	89 c2                	mov    edx,eax
c0009527:	c1 fa 1f             	sar    edx,0x1f
c000952a:	29 c3                	sub    ebx,eax
c000952c:	19 d6                	sbb    esi,edx
c000952e:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c0009533:	0f b6 c0             	movzx  eax,al
c0009536:	85 c0                	test   eax,eax
c0009538:	74 0c                	je     c0009546 <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c000953a:	b8 08 07 00 00       	mov    eax,0x708
c000953f:	ba 00 00 00 00       	mov    edx,0x0
c0009544:	eb 0a                	jmp    c0009550 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c0009546:	b8 00 00 00 00       	mov    eax,0x0
c000954b:	ba 00 00 00 00       	mov    edx,0x0
c0009550:	29 c3                	sub    ebx,eax
c0009552:	19 d6                	sbb    esi,edx
c0009554:	89 d8                	mov    eax,ebx
c0009556:	89 f2                	mov    edx,esi
c0009558:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000955b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000955e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009561:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009564:	89 d0                	mov    eax,edx
c0009566:	31 d2                	xor    edx,edx
c0009568:	89 c3                	mov    ebx,eax
c000956a:	89 d6                	mov    esi,edx
c000956c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000956f:	80 e5 ff             	and    ch,0xff
c0009572:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009575:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009578:	83 e1 00             	and    ecx,0x0
c000957b:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c000957e:	83 ec 0c             	sub    esp,0xc
c0009581:	56                   	push   esi
c0009582:	53                   	push   ebx
c0009583:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009586:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009589:	68 6e 32 02 c0       	push   0xc002326e
c000958e:	e8 bb d9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0009593:	83 c4 20             	add    esp,0x20
c0009596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009599:	8b 00                	mov    eax,DWORD PTR [eax]
c000959b:	83 c0 2c             	add    eax,0x2c
c000959e:	8b 00                	mov    eax,DWORD PTR [eax]
c00095a0:	83 ec 04             	sub    esp,0x4
c00095a3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00095a6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00095a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00095ac:	ff d0                	call   eax
c00095ae:	83 c4 10             	add    esp,0x10
c00095b1:	8d 65 f8             	lea    esp,[ebp-0x8]
c00095b4:	5b                   	pop    ebx
c00095b5:	5e                   	pop    esi
c00095b6:	5d                   	pop    ebp
c00095b7:	c3                   	ret    

c00095b8 <KeSecondsToDatetime(unsigned long long)>:
c00095b8:	55                   	push   ebp
c00095b9:	89 e5                	mov    ebp,esp
c00095bb:	83 ec 48             	sub    esp,0x48
c00095be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00095c1:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c00095c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00095c7:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c00095ca:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00095cd:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00095d0:	6a 00                	push   0x0
c00095d2:	68 80 51 01 00       	push   0x15180
c00095d7:	52                   	push   edx
c00095d8:	50                   	push   eax
c00095d9:	e8 56 81 01 00       	call   c0021734 <__udivdi3>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	05 6c fa 0a 00       	add    eax,0xafa6c
c00095e6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00095e9:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00095ec:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00095ef:	6a 00                	push   0x0
c00095f1:	68 80 51 01 00       	push   0x15180
c00095f6:	52                   	push   edx
c00095f7:	50                   	push   eax
c00095f8:	e8 37 82 01 00       	call   c0021834 <__umoddi3>
c00095fd:	83 c4 10             	add    esp,0x10
c0009600:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009603:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009607:	79 0b                	jns    c0009614 <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009609:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c0009610:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009614:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009617:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000961c:	89 c8                	mov    eax,ecx
c000961e:	f7 ea                	imul   edx
c0009620:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009623:	c1 f8 0b             	sar    eax,0xb
c0009626:	89 c2                	mov    edx,eax
c0009628:	89 c8                	mov    eax,ecx
c000962a:	c1 f8 1f             	sar    eax,0x1f
c000962d:	29 c2                	sub    edx,eax
c000962f:	89 d0                	mov    eax,edx
c0009631:	88 c2                	mov    dl,al
c0009633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009636:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009639:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000963c:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009641:	89 c8                	mov    eax,ecx
c0009643:	f7 ea                	imul   edx
c0009645:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009648:	c1 f8 0b             	sar    eax,0xb
c000964b:	89 c2                	mov    edx,eax
c000964d:	89 c8                	mov    eax,ecx
c000964f:	c1 f8 1f             	sar    eax,0x1f
c0009652:	29 c2                	sub    edx,eax
c0009654:	89 d0                	mov    eax,edx
c0009656:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000965c:	29 c1                	sub    ecx,eax
c000965e:	89 c8                	mov    eax,ecx
c0009660:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009663:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009666:	ba 89 88 88 88       	mov    edx,0x88888889
c000966b:	89 c8                	mov    eax,ecx
c000966d:	f7 ea                	imul   edx
c000966f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009672:	c1 f8 05             	sar    eax,0x5
c0009675:	89 c2                	mov    edx,eax
c0009677:	89 c8                	mov    eax,ecx
c0009679:	c1 f8 1f             	sar    eax,0x1f
c000967c:	29 c2                	sub    edx,eax
c000967e:	89 d0                	mov    eax,edx
c0009680:	88 c2                	mov    dl,al
c0009682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009685:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009688:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000968b:	ba 89 88 88 88       	mov    edx,0x88888889
c0009690:	89 c8                	mov    eax,ecx
c0009692:	f7 ea                	imul   edx
c0009694:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009697:	c1 f8 05             	sar    eax,0x5
c000969a:	89 c2                	mov    edx,eax
c000969c:	89 c8                	mov    eax,ecx
c000969e:	c1 f8 1f             	sar    eax,0x1f
c00096a1:	29 c2                	sub    edx,eax
c00096a3:	89 d0                	mov    eax,edx
c00096a5:	c1 e0 04             	shl    eax,0x4
c00096a8:	29 d0                	sub    eax,edx
c00096aa:	c1 e0 02             	shl    eax,0x2
c00096ad:	29 c1                	sub    ecx,eax
c00096af:	89 ca                	mov    edx,ecx
c00096b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096b4:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c00096b7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00096bb:	79 20                	jns    c00096dd <KeSecondsToDatetime(unsigned long long)+0x125>
c00096bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00096c0:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c00096c6:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c00096cb:	89 c8                	mov    eax,ecx
c00096cd:	f7 ea                	imul   edx
c00096cf:	c1 fa 0f             	sar    edx,0xf
c00096d2:	89 c8                	mov    eax,ecx
c00096d4:	c1 f8 1f             	sar    eax,0x1f
c00096d7:	29 c2                	sub    edx,eax
c00096d9:	89 d0                	mov    eax,edx
c00096db:	eb 18                	jmp    c00096f5 <KeSecondsToDatetime(unsigned long long)+0x13d>
c00096dd:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00096e0:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c00096e5:	89 c8                	mov    eax,ecx
c00096e7:	f7 ea                	imul   edx
c00096e9:	c1 fa 0f             	sar    edx,0xf
c00096ec:	89 c8                	mov    eax,ecx
c00096ee:	c1 f8 1f             	sar    eax,0x1f
c00096f1:	29 c2                	sub    edx,eax
c00096f3:	89 d0                	mov    eax,edx
c00096f5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00096f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00096fb:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c0009701:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009704:	01 d0                	add    eax,edx
c0009706:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009709:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000970c:	c1 e8 02             	shr    eax,0x2
c000970f:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009714:	f7 e2                	mul    edx
c0009716:	c1 ea 07             	shr    edx,0x7
c0009719:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000971c:	29 d0                	sub    eax,edx
c000971e:	89 c1                	mov    ecx,eax
c0009720:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009723:	c1 e8 02             	shr    eax,0x2
c0009726:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c000972b:	f7 e2                	mul    edx
c000972d:	89 d0                	mov    eax,edx
c000972f:	c1 e8 0b             	shr    eax,0xb
c0009732:	01 c1                	add    ecx,eax
c0009734:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009737:	c1 e8 04             	shr    eax,0x4
c000973a:	ba 41 d6 72 00       	mov    edx,0x72d641
c000973f:	f7 e2                	mul    edx
c0009741:	89 d0                	mov    eax,edx
c0009743:	c1 e8 04             	shr    eax,0x4
c0009746:	29 c1                	sub    ecx,eax
c0009748:	ba 61 f3 19 67       	mov    edx,0x6719f361
c000974d:	89 c8                	mov    eax,ecx
c000974f:	f7 e2                	mul    edx
c0009751:	89 c8                	mov    eax,ecx
c0009753:	29 d0                	sub    eax,edx
c0009755:	d1 e8                	shr    eax,1
c0009757:	01 d0                	add    eax,edx
c0009759:	c1 e8 08             	shr    eax,0x8
c000975c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000975f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009762:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009767:	f7 e2                	mul    edx
c0009769:	89 d1                	mov    ecx,edx
c000976b:	c1 e9 05             	shr    ecx,0x5
c000976e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0009771:	89 d0                	mov    eax,edx
c0009773:	c1 e0 03             	shl    eax,0x3
c0009776:	01 d0                	add    eax,edx
c0009778:	c1 e0 03             	shl    eax,0x3
c000977b:	01 d0                	add    eax,edx
c000977d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009784:	01 c2                	add    edx,eax
c0009786:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009789:	c1 e8 02             	shr    eax,0x2
c000978c:	01 d0                	add    eax,edx
c000978e:	29 c1                	sub    ecx,eax
c0009790:	89 ca                	mov    edx,ecx
c0009792:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009795:	01 d0                	add    eax,edx
c0009797:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000979a:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000979d:	89 d0                	mov    eax,edx
c000979f:	c1 e0 02             	shl    eax,0x2
c00097a2:	01 d0                	add    eax,edx
c00097a4:	83 c0 02             	add    eax,0x2
c00097a7:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c00097ac:	f7 e2                	mul    edx
c00097ae:	89 d0                	mov    eax,edx
c00097b0:	c1 e8 07             	shr    eax,0x7
c00097b3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00097b6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00097b9:	89 d0                	mov    eax,edx
c00097bb:	c1 e0 03             	shl    eax,0x3
c00097be:	01 d0                	add    eax,edx
c00097c0:	89 c2                	mov    edx,eax
c00097c2:	c1 e2 04             	shl    edx,0x4
c00097c5:	01 d0                	add    eax,edx
c00097c7:	83 c0 02             	add    eax,0x2
c00097ca:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00097cf:	f7 e2                	mul    edx
c00097d1:	c1 ea 02             	shr    edx,0x2
c00097d4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00097d7:	29 d0                	sub    eax,edx
c00097d9:	83 c0 01             	add    eax,0x1
c00097dc:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00097df:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c00097e3:	77 07                	ja     c00097ec <KeSecondsToDatetime(unsigned long long)+0x234>
c00097e5:	b8 02 00 00 00       	mov    eax,0x2
c00097ea:	eb 05                	jmp    c00097f1 <KeSecondsToDatetime(unsigned long long)+0x239>
c00097ec:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c00097f1:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c00097f4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00097f7:	89 d0                	mov    eax,edx
c00097f9:	c1 e0 02             	shl    eax,0x2
c00097fc:	01 d0                	add    eax,edx
c00097fe:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009805:	01 d0                	add    eax,edx
c0009807:	c1 e0 04             	shl    eax,0x4
c000980a:	89 c2                	mov    edx,eax
c000980c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000980f:	01 c2                	add    edx,eax
c0009811:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009815:	0f 96 c0             	setbe  al
c0009818:	0f b6 c0             	movzx  eax,al
c000981b:	01 d0                	add    eax,edx
c000981d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0009820:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0009823:	89 c2                	mov    edx,eax
c0009825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009828:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000982c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000982f:	83 c0 01             	add    eax,0x1
c0009832:	88 c2                	mov    dl,al
c0009834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009837:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000983a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000983d:	88 c2                	mov    dl,al
c000983f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009842:	88 10                	mov    BYTE PTR [eax],dl
c0009844:	90                   	nop
c0009845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009848:	c9                   	leave  
c0009849:	c2 04 00             	ret    0x4

c000984c <Clock::timeInDatetimeLocal()>:
c000984c:	55                   	push   ebp
c000984d:	89 e5                	mov    ebp,esp
c000984f:	83 ec 08             	sub    esp,0x8
c0009852:	83 ec 0c             	sub    esp,0xc
c0009855:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009858:	e8 81 f8 ff ff       	call   c00090de <Clock::timeInSecondsLocal()>
c000985d:	83 c4 10             	add    esp,0x10
c0009860:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0009863:	83 ec 04             	sub    esp,0x4
c0009866:	52                   	push   edx
c0009867:	50                   	push   eax
c0009868:	51                   	push   ecx
c0009869:	e8 4a fd ff ff       	call   c00095b8 <KeSecondsToDatetime(unsigned long long)>
c000986e:	83 c4 0c             	add    esp,0xc
c0009871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009874:	c9                   	leave  
c0009875:	c2 04 00             	ret    0x4

c0009878 <Device::hibernate()>:
c0009878:	c3                   	ret    
c0009879:	90                   	nop

c000987a <Device::wake()>:
c000987a:	c3                   	ret    
c000987b:	90                   	nop

c000987c <Device::detect()>:
c000987c:	c3                   	ret    
c000987d:	90                   	nop

c000987e <Device::disableLegacy()>:
c000987e:	c3                   	ret    
c000987f:	90                   	nop

c0009880 <Device::powerSaving(PowerSavingLevel)>:
c0009880:	c3                   	ret    
c0009881:	90                   	nop

c0009882 <DriverlessDevice::close(int, int, void*)>:
c0009882:	31 c0                	xor    eax,eax
c0009884:	c3                   	ret    
c0009885:	90                   	nop

c0009886 <DriverlessDevice::detect()>:
c0009886:	c3                   	ret    
c0009887:	90                   	nop

c0009888 <DriverlessDevice::open(int, int, void*)>:
c0009888:	83 ec 18             	sub    esp,0x18
c000988b:	68 ec 32 02 c0       	push   0xc00232ec
c0009890:	e8 95 65 00 00       	call   c000fe2a <KePanic(char const*)>
c0009895:	83 c8 ff             	or     eax,0xffffffff
c0009898:	83 c4 1c             	add    esp,0x1c
c000989b:	c3                   	ret    

c000989c <Device::~Device()>:
c000989c:	ba 90 33 02 c0       	mov    edx,0xc0023390
c00098a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098a5:	89 10                	mov    DWORD PTR [eax],edx
c00098a7:	90                   	nop
c00098a8:	c3                   	ret    
c00098a9:	90                   	nop

c00098aa <Device::~Device()>:
c00098aa:	83 ec 0c             	sub    esp,0xc
c00098ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00098b1:	e8 e6 ff ff ff       	call   c000989c <Device::~Device()>
c00098b6:	83 c4 04             	add    esp,0x4
c00098b9:	83 ec 08             	sub    esp,0x8
c00098bc:	68 58 01 00 00       	push   0x158
c00098c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098c5:	e8 91 39 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	83 c4 0c             	add    esp,0xc
c00098d0:	c3                   	ret    
c00098d1:	90                   	nop

c00098d2 <Device::findAndLoadDriver()>:
c00098d2:	c7 44 24 04 0a 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc002330a
c00098da:	e9 6f d6 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c00098df:	90                   	nop

c00098e0 <Device::preOpenPCI(PCIDeviceInfo)>:
c00098e0:	57                   	push   edi
c00098e1:	b9 09 00 00 00       	mov    ecx,0x9
c00098e6:	56                   	push   esi
c00098e7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00098eb:	8d 74 24 10          	lea    esi,[esp+0x10]
c00098ef:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00098f9:	81 c7 18 01 00 00    	add    edi,0x118
c00098ff:	fc                   	cld    
c0009900:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009902:	5e                   	pop    esi
c0009903:	5f                   	pop    edi
c0009904:	c3                   	ret    
c0009905:	90                   	nop

c0009906 <Device::preOpenACPI(void*, char*, char*)>:
c0009906:	57                   	push   edi
c0009907:	b9 1e 00 00 00       	mov    ecx,0x1e
c000990c:	56                   	push   esi
c000990d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009911:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009915:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009919:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0009923:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009929:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000992f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009931:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009937:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000993b:	b9 0e 00 00 00       	mov    ecx,0xe
c0009940:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009942:	5e                   	pop    esi
c0009943:	5f                   	pop    edi
c0009944:	c3                   	ret    
c0009945:	90                   	nop

c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009946:	53                   	push   ebx
c0009947:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000994b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000994f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009953:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009957:	0f b6 c0             	movzx  eax,al
c000995a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000995e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009962:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009966:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000996a:	5b                   	pop    ebx
c000996b:	e9 79 0a 01 00       	jmp    c001a3e9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009970 <Device::getParent()>:
c0009970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009974:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000997a:	c3                   	ret    
c000997b:	90                   	nop

c000997c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000997c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009980:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009984:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009989:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000998d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009991:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009995:	e9 c0 0b 01 00       	jmp    c001a55a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000999a <Device::addChild(Device*)>:
c000999a:	53                   	push   ebx
c000999b:	83 ec 08             	sub    esp,0x8
c000999e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099a6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00099ac:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00099b2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00099b4:	85 d2                	test   edx,edx
c00099b6:	74 04                	je     c00099bc <Device::addChild(Device*)+0x22>
c00099b8:	89 d3                	mov    ebx,edx
c00099ba:	eb f6                	jmp    c00099b2 <Device::addChild(Device*)+0x18>
c00099bc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00099bf:	83 ec 0c             	sub    esp,0xc
c00099c2:	6a 08                	push   0x8
c00099c4:	e8 1b 61 00 00       	call   c000fae4 <malloc>
c00099c9:	89 03                	mov    DWORD PTR [ebx],eax
c00099cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00099d8:	83 c4 18             	add    esp,0x18
c00099db:	5b                   	pop    ebx
c00099dc:	c3                   	ret    
c00099dd:	90                   	nop

c00099de <Device::removeAllChildren()>:
c00099de:	56                   	push   esi
c00099df:	53                   	push   ebx
c00099e0:	52                   	push   edx
c00099e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00099e5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00099eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00099ee:	74 17                	je     c0009a07 <Device::removeAllChildren()+0x29>
c00099f0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00099f3:	85 c0                	test   eax,eax
c00099f5:	74 0c                	je     c0009a03 <Device::removeAllChildren()+0x25>
c00099f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00099f9:	83 ec 0c             	sub    esp,0xc
c00099fc:	50                   	push   eax
c00099fd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a00:	83 c4 10             	add    esp,0x10
c0009a03:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a05:	eb e4                	jmp    c00099eb <Device::removeAllChildren()+0xd>
c0009a07:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a0d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a13:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a20:	58                   	pop    eax
c0009a21:	5b                   	pop    ebx
c0009a22:	5e                   	pop    esi
c0009a23:	c3                   	ret    

c0009a24 <Device::hibernateAll()>:
c0009a24:	53                   	push   ebx
c0009a25:	83 ec 14             	sub    esp,0x14
c0009a28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a2e:	53                   	push   ebx
c0009a2f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a32:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a38:	83 c4 10             	add    esp,0x10
c0009a3b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a3e:	74 0f                	je     c0009a4f <Device::hibernateAll()+0x2b>
c0009a40:	83 ec 0c             	sub    esp,0xc
c0009a43:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009a46:	e8 d9 ff ff ff       	call   c0009a24 <Device::hibernateAll()>
c0009a4b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a4d:	eb e9                	jmp    c0009a38 <Device::hibernateAll()+0x14>
c0009a4f:	83 c4 08             	add    esp,0x8
c0009a52:	5b                   	pop    ebx
c0009a53:	c3                   	ret    

c0009a54 <Device::wakeAll()>:
c0009a54:	53                   	push   ebx
c0009a55:	83 ec 14             	sub    esp,0x14
c0009a58:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a5e:	53                   	push   ebx
c0009a5f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009a62:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a68:	83 c4 10             	add    esp,0x10
c0009a6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a6e:	74 0f                	je     c0009a7f <Device::wakeAll()+0x2b>
c0009a70:	83 ec 0c             	sub    esp,0xc
c0009a73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009a76:	e8 d9 ff ff ff       	call   c0009a54 <Device::wakeAll()>
c0009a7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a7d:	eb e9                	jmp    c0009a68 <Device::wakeAll()+0x14>
c0009a7f:	83 c4 08             	add    esp,0x8
c0009a82:	5b                   	pop    ebx
c0009a83:	c3                   	ret    

c0009a84 <Device::detectAll()>:
c0009a84:	53                   	push   ebx
c0009a85:	83 ec 14             	sub    esp,0x14
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a8e:	53                   	push   ebx
c0009a8f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009a92:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a98:	83 c4 10             	add    esp,0x10
c0009a9b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a9e:	74 0f                	je     c0009aaf <Device::detectAll()+0x2b>
c0009aa0:	83 ec 0c             	sub    esp,0xc
c0009aa3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aa6:	e8 d9 ff ff ff       	call   c0009a84 <Device::detectAll()>
c0009aab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009aad:	eb e9                	jmp    c0009a98 <Device::detectAll()+0x14>
c0009aaf:	83 c4 08             	add    esp,0x8
c0009ab2:	5b                   	pop    ebx
c0009ab3:	c3                   	ret    

c0009ab4 <Device::disableLegacyAll()>:
c0009ab4:	c3                   	ret    
c0009ab5:	90                   	nop

c0009ab6 <Device::loadDriversForAll()>:
c0009ab6:	c3                   	ret    
c0009ab7:	90                   	nop

c0009ab8 <Device::powerSavingAll(PowerSavingLevel)>:
c0009ab8:	56                   	push   esi
c0009ab9:	53                   	push   ebx
c0009aba:	83 ec 0c             	sub    esp,0xc
c0009abd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009ac1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009ac5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ac7:	56                   	push   esi
c0009ac8:	53                   	push   ebx
c0009ac9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009acc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ad2:	83 c4 10             	add    esp,0x10
c0009ad5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009ad8:	74 0f                	je     c0009ae9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009ada:	52                   	push   edx
c0009adb:	52                   	push   edx
c0009adc:	56                   	push   esi
c0009add:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ae0:	e8 d3 ff ff ff       	call   c0009ab8 <Device::powerSavingAll(PowerSavingLevel)>
c0009ae5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ae7:	eb e9                	jmp    c0009ad2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009ae9:	58                   	pop    eax
c0009aea:	5b                   	pop    ebx
c0009aeb:	5e                   	pop    esi
c0009aec:	c3                   	ret    
c0009aed:	90                   	nop

c0009aee <Device::setName(char const*)>:
c0009aee:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009af6:	e9 55 6b ff ff       	jmp    c0000650 <strcpy>
c0009afb:	90                   	nop

c0009afc <Device::Device(char const*)>:
c0009afc:	83 ec 1c             	sub    esp,0x1c
c0009aff:	ba 90 33 02 c0       	mov    edx,0xc0023390
c0009b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b08:	89 10                	mov    DWORD PTR [eax],edx
c0009b0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b0e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b1c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b2a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b38:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009b42:	83 ec 08             	sub    esp,0x8
c0009b45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b4d:	e8 9c ff ff ff       	call   c0009aee <Device::setName(char const*)>
c0009b52:	83 c4 10             	add    esp,0x10
c0009b55:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009b5d:	83 ec 0c             	sub    esp,0xc
c0009b60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009b64:	e8 7b 5f 00 00       	call   c000fae4 <malloc>
c0009b69:	83 c4 10             	add    esp,0x10
c0009b6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009b72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b79:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009b7d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009b83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b87:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009b8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009b93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b97:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009b9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ba8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009baf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bb3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009bba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bbe:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009bc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bcc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009bd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bda:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be8:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009bf2:	90                   	nop
c0009bf3:	83 c4 1c             	add    esp,0x1c
c0009bf6:	c3                   	ret    
c0009bf7:	90                   	nop

c0009bf8 <Device::getName()>:
c0009bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bfc:	05 d0 00 00 00       	add    eax,0xd0
c0009c01:	c3                   	ret    

c0009c02 <Device::closeAll()>:
c0009c02:	53                   	push   ebx
c0009c03:	83 ec 08             	sub    esp,0x8
c0009c06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c0a:	53                   	push   ebx
c0009c0b:	e8 e8 ff ff ff       	call   c0009bf8 <Device::getName()>
c0009c10:	52                   	push   edx
c0009c11:	50                   	push   eax
c0009c12:	68 44 33 02 c0       	push   0xc0023344
c0009c17:	e8 32 d3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0009c1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c1e:	6a 00                	push   0x0
c0009c20:	6a 00                	push   0x0
c0009c22:	6a 00                	push   0x0
c0009c24:	53                   	push   ebx
c0009c25:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c2e:	83 c4 20             	add    esp,0x20
c0009c31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c34:	74 12                	je     c0009c48 <Device::closeAll()+0x46>
c0009c36:	83 ec 0c             	sub    esp,0xc
c0009c39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c3c:	e8 c1 ff ff ff       	call   c0009c02 <Device::closeAll()>
c0009c41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009c43:	83 c4 10             	add    esp,0x10
c0009c46:	eb e9                	jmp    c0009c31 <Device::closeAll()+0x2f>
c0009c48:	83 c4 08             	add    esp,0x8
c0009c4b:	5b                   	pop    ebx
c0009c4c:	c3                   	ret    
c0009c4d:	90                   	nop

c0009c4e <DriverlessDevice::DriverlessDevice(char const*)>:
c0009c4e:	83 ec 0c             	sub    esp,0xc
c0009c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c55:	83 ec 08             	sub    esp,0x8
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	50                   	push   eax
c0009c5d:	e8 9a fe ff ff       	call   c0009afc <Device::Device(char const*)>
c0009c62:	83 c4 10             	add    esp,0x10
c0009c65:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c0009c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c6e:	89 10                	mov    DWORD PTR [eax],edx
c0009c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c74:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009c7e:	90                   	nop
c0009c7f:	83 c4 0c             	add    esp,0xc
c0009c82:	c3                   	ret    
c0009c83:	90                   	nop

c0009c84 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009c84:	57                   	push   edi
c0009c85:	56                   	push   esi
c0009c86:	53                   	push   ebx
c0009c87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009c8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009c93:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009c99:	75 0c                	jne    c0009ca7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009c9b:	52                   	push   edx
c0009c9c:	52                   	push   edx
c0009c9d:	53                   	push   ebx
c0009c9e:	56                   	push   esi
c0009c9f:	e8 08 7d 01 00       	call   c00219ac <LinkedList<Device>::addElement(Device*)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009cad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009cb0:	74 12                	je     c0009cc4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009cb2:	50                   	push   eax
c0009cb3:	57                   	push   edi
c0009cb4:	56                   	push   esi
c0009cb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009cb8:	e8 c7 ff ff ff       	call   c0009c84 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009cbd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	eb e9                	jmp    c0009cad <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009cc4:	5b                   	pop    ebx
c0009cc5:	5e                   	pop    esi
c0009cc6:	5f                   	pop    edi
c0009cc7:	c3                   	ret    

c0009cc8 <getDevicesOfType(DeviceType)>:
c0009cc8:	53                   	push   ebx
c0009cc9:	83 ec 14             	sub    esp,0x14
c0009ccc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009cd0:	53                   	push   ebx
c0009cd1:	e8 b2 7d 01 00       	call   c0021a88 <LinkedList<Device>::LinkedList()>
c0009cd6:	83 c4 0c             	add    esp,0xc
c0009cd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009cdd:	53                   	push   ebx
c0009cde:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0009ce4:	e8 9b ff ff ff       	call   c0009c84 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009ce9:	83 c4 18             	add    esp,0x18
c0009cec:	89 d8                	mov    eax,ebx
c0009cee:	5b                   	pop    ebx
c0009cef:	c2 04 00             	ret    0x4
c0009cf2:	66 90                	xchg   ax,ax

c0009cf4 <HardDiskController::HardDiskController(char const*)>:
c0009cf4:	83 ec 0c             	sub    esp,0xc
c0009cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cfb:	83 ec 08             	sub    esp,0x8
c0009cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d02:	50                   	push   eax
c0009d03:	e8 f4 fd ff ff       	call   c0009afc <Device::Device(char const*)>
c0009d08:	83 c4 10             	add    esp,0x10
c0009d0b:	ba e8 33 02 c0       	mov    edx,0xc00233e8
c0009d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d14:	89 10                	mov    DWORD PTR [eax],edx
c0009d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d1a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d24:	90                   	nop
c0009d25:	83 c4 0c             	add    esp,0xc
c0009d28:	c3                   	ret    
c0009d29:	90                   	nop
c0009d2a:	66 90                	xchg   ax,ax

c0009d2c <HardDiskController::~HardDiskController()>:
c0009d2c:	83 ec 0c             	sub    esp,0xc
c0009d2f:	ba e8 33 02 c0       	mov    edx,0xc00233e8
c0009d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d38:	89 10                	mov    DWORD PTR [eax],edx
c0009d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d3e:	83 ec 0c             	sub    esp,0xc
c0009d41:	50                   	push   eax
c0009d42:	e8 55 fb ff ff       	call   c000989c <Device::~Device()>
c0009d47:	83 c4 10             	add    esp,0x10
c0009d4a:	90                   	nop
c0009d4b:	83 c4 0c             	add    esp,0xc
c0009d4e:	c3                   	ret    
c0009d4f:	90                   	nop

c0009d50 <HardDiskController::~HardDiskController()>:
c0009d50:	83 ec 0c             	sub    esp,0xc
c0009d53:	83 ec 0c             	sub    esp,0xc
c0009d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d5a:	e8 cd ff ff ff       	call   c0009d2c <HardDiskController::~HardDiskController()>
c0009d5f:	83 c4 10             	add    esp,0x10
c0009d62:	83 ec 08             	sub    esp,0x8
c0009d65:	68 58 01 00 00       	push   0x158
c0009d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d6e:	e8 e8 34 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	83 c4 0c             	add    esp,0xc
c0009d79:	c3                   	ret    

c0009d7a <PhysicalDisk::eject()>:
c0009d7a:	83 c8 ff             	or     eax,0xffffffff
c0009d7d:	c3                   	ret    

c0009d7e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009d7e:	83 ec 0c             	sub    esp,0xc
c0009d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d85:	83 ec 08             	sub    esp,0x8
c0009d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d8c:	50                   	push   eax
c0009d8d:	e8 6a fd ff ff       	call   c0009afc <Device::Device(char const*)>
c0009d92:	83 c4 10             	add    esp,0x10
c0009d95:	ba 14 34 02 c0       	mov    edx,0xc0023414
c0009d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9e:	89 10                	mov    DWORD PTR [eax],edx
c0009da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009da4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009daf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dba:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dc8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009dcc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009de0:	90                   	nop
c0009de1:	83 c4 0c             	add    esp,0xc
c0009de4:	c3                   	ret    
c0009de5:	90                   	nop

c0009de6 <PhysicalDisk::startCache()>:
c0009de6:	56                   	push   esi
c0009de7:	53                   	push   ebx
c0009de8:	83 ec 10             	sub    esp,0x10
c0009deb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009def:	6a 44                	push   0x44
c0009df1:	e8 ee 5c 00 00       	call   c000fae4 <malloc>
c0009df6:	89 c6                	mov    esi,eax
c0009df8:	58                   	pop    eax
c0009df9:	5a                   	pop    edx
c0009dfa:	53                   	push   ebx
c0009dfb:	56                   	push   esi
c0009dfc:	e8 07 14 00 00       	call   c000b208 <VCache::VCache(PhysicalDisk*)>
c0009e01:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e07:	83 c4 14             	add    esp,0x14
c0009e0a:	5b                   	pop    ebx
c0009e0b:	5e                   	pop    esi
c0009e0c:	c3                   	ret    
c0009e0d:	90                   	nop

c0009e0e <PhysicalDisk::~PhysicalDisk()>:
c0009e0e:	83 ec 0c             	sub    esp,0xc
c0009e11:	ba 14 34 02 c0       	mov    edx,0xc0023414
c0009e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e1a:	89 10                	mov    DWORD PTR [eax],edx
c0009e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e20:	83 ec 0c             	sub    esp,0xc
c0009e23:	50                   	push   eax
c0009e24:	e8 73 fa ff ff       	call   c000989c <Device::~Device()>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	90                   	nop
c0009e2d:	83 c4 0c             	add    esp,0xc
c0009e30:	c3                   	ret    
c0009e31:	90                   	nop

c0009e32 <PhysicalDisk::~PhysicalDisk()>:
c0009e32:	83 ec 0c             	sub    esp,0xc
c0009e35:	83 ec 0c             	sub    esp,0xc
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	e8 cd ff ff ff       	call   c0009e0e <PhysicalDisk::~PhysicalDisk()>
c0009e41:	83 c4 10             	add    esp,0x10
c0009e44:	83 ec 08             	sub    esp,0x8
c0009e47:	68 6c 01 00 00       	push   0x16c
c0009e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e50:	e8 06 34 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c0009e55:	83 c4 10             	add    esp,0x10
c0009e58:	83 c4 0c             	add    esp,0xc
c0009e5b:	c3                   	ret    

c0009e5c <startGUI(void*)>:
c0009e5c:	55                   	push   ebp
c0009e5d:	89 e5                	mov    ebp,esp
c0009e5f:	53                   	push   ebx
c0009e60:	83 ec 04             	sub    esp,0x4
c0009e63:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009e6b:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009e70:	85 c0                	test   eax,eax
c0009e72:	75 01                	jne    c0009e75 <startGUI(void*)+0x19>
c0009e74:	fb                   	sti    
c0009e75:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009e7b:	83 ec 08             	sub    esp,0x8
c0009e7e:	6a 01                	push   0x1
c0009e80:	68 44 34 02 c0       	push   0xc0023444
c0009e85:	e8 77 c3 00 00       	call   c0016201 <Thr::loadDLL(char const*, bool)>
c0009e8a:	83 c4 10             	add    esp,0x10
c0009e8d:	83 ec 08             	sub    esp,0x8
c0009e90:	53                   	push   ebx
c0009e91:	50                   	push   eax
c0009e92:	e8 cb c5 00 00       	call   c0016462 <Thr::executeDLL(unsigned long, void*)>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009ea0:	83 ec 08             	sub    esp,0x8
c0009ea3:	6a 01                	push   0x1
c0009ea5:	68 5e 34 02 c0       	push   0xc002345e
c0009eaa:	e8 52 c3 00 00       	call   c0016201 <Thr::loadDLL(char const*, bool)>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	83 ec 08             	sub    esp,0x8
c0009eb5:	53                   	push   ebx
c0009eb6:	50                   	push   eax
c0009eb7:	e8 a6 c5 00 00       	call   c0016462 <Thr::executeDLL(unsigned long, void*)>
c0009ebc:	83 c4 10             	add    esp,0x10
c0009ebf:	eb fe                	jmp    c0009ebf <startGUI(void*)+0x63>

c0009ec1 <startGUIVESA(void*)>:
c0009ec1:	55                   	push   ebp
c0009ec2:	89 e5                	mov    ebp,esp
c0009ec4:	53                   	push   ebx
c0009ec5:	83 ec 04             	sub    esp,0x4
c0009ec8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009ed0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009ed5:	85 c0                	test   eax,eax
c0009ed7:	75 01                	jne    c0009eda <startGUIVESA(void*)+0x19>
c0009ed9:	fb                   	sti    
c0009eda:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009ee0:	83 ec 08             	sub    esp,0x8
c0009ee3:	6a 01                	push   0x1
c0009ee5:	68 7c 34 02 c0       	push   0xc002347c
c0009eea:	e8 12 c3 00 00       	call   c0016201 <Thr::loadDLL(char const*, bool)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	83 ec 08             	sub    esp,0x8
c0009ef5:	53                   	push   ebx
c0009ef6:	50                   	push   eax
c0009ef7:	e8 66 c5 00 00       	call   c0016462 <Thr::executeDLL(unsigned long, void*)>
c0009efc:	83 c4 10             	add    esp,0x10
c0009eff:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f05:	83 ec 08             	sub    esp,0x8
c0009f08:	6a 01                	push   0x1
c0009f0a:	68 5e 34 02 c0       	push   0xc002345e
c0009f0f:	e8 ed c2 00 00       	call   c0016201 <Thr::loadDLL(char const*, bool)>
c0009f14:	83 c4 10             	add    esp,0x10
c0009f17:	83 ec 08             	sub    esp,0x8
c0009f1a:	53                   	push   ebx
c0009f1b:	50                   	push   eax
c0009f1c:	e8 41 c5 00 00       	call   c0016462 <Thr::executeDLL(unsigned long, void*)>
c0009f21:	83 c4 10             	add    esp,0x10
c0009f24:	eb fe                	jmp    c0009f24 <startGUIVESA(void*)+0x63>

c0009f26 <sendKeyToTerminal(unsigned char)>:
c0009f26:	55                   	push   ebp
c0009f27:	89 e5                	mov    ebp,esp
c0009f29:	83 ec 28             	sub    esp,0x28
c0009f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f2f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f32:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0009f37:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f3b:	83 ec 08             	sub    esp,0x8
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	e8 d1 8a 00 00       	call   c0012a16 <VgaText::receiveKey(unsigned char)>
c0009f45:	83 c4 10             	add    esp,0x10
c0009f48:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f4c:	83 f8 0a             	cmp    eax,0xa
c0009f4f:	74 16                	je     c0009f67 <sendKeyToTerminal(unsigned char)+0x41>
c0009f51:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f55:	83 f8 03             	cmp    eax,0x3
c0009f58:	74 0d                	je     c0009f67 <sendKeyToTerminal(unsigned char)+0x41>
c0009f5a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f5e:	83 f8 1c             	cmp    eax,0x1c
c0009f61:	0f 85 92 00 00 00    	jne    c0009ff9 <sendKeyToTerminal(unsigned char)+0xd3>
c0009f67:	fa                   	cli    
c0009f68:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009f6d:	83 c0 01             	add    eax,0x1
c0009f70:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0009f75:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009f7a:	83 c0 01             	add    eax,0x1
c0009f7d:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0009f82:	a1 80 b6 02 c0       	mov    eax,ds:0xc002b680
c0009f87:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009f8a:	c7 05 80 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b680,0x0
c0009f94:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009f98:	74 1f                	je     c0009fb9 <sendKeyToTerminal(unsigned char)+0x93>
c0009f9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009f9d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009fa0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009fa3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009fa6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fa9:	83 ec 0c             	sub    esp,0xc
c0009fac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009faf:	e8 34 d1 00 00       	call   c00170e8 <unblockTask(ThreadControlBlock*)>
c0009fb4:	83 c4 10             	add    esp,0x10
c0009fb7:	eb db                	jmp    c0009f94 <sendKeyToTerminal(unsigned char)+0x6e>
c0009fb9:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009fbe:	83 e8 01             	sub    eax,0x1
c0009fc1:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0009fc6:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009fcb:	85 c0                	test   eax,eax
c0009fcd:	75 18                	jne    c0009fe7 <sendKeyToTerminal(unsigned char)+0xc1>
c0009fcf:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0009fd4:	85 c0                	test   eax,eax
c0009fd6:	74 0f                	je     c0009fe7 <sendKeyToTerminal(unsigned char)+0xc1>
c0009fd8:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0009fe2:	e8 a9 cd 00 00       	call   c0016d90 <schedule()>
c0009fe7:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009fef:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009ff4:	85 c0                	test   eax,eax
c0009ff6:	75 01                	jne    c0009ff9 <sendKeyToTerminal(unsigned char)+0xd3>
c0009ff8:	fb                   	sti    
c0009ff9:	90                   	nop
c0009ffa:	c9                   	leave  
c0009ffb:	c3                   	ret    

c0009ffc <sendKeyboardToken(KeyboardToken)>:
c0009ffc:	55                   	push   ebp
c0009ffd:	89 e5                	mov    ebp,esp
c0009fff:	83 ec 18             	sub    esp,0x18
c000a002:	e8 4e 67 00 00       	call   c0010755 <KeUserIOReceived()>
c000a007:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a00a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a00d:	0f b7 c0             	movzx  eax,ax
c000a010:	83 f2 01             	xor    edx,0x1
c000a013:	88 90 a0 b6 02 c0    	mov    BYTE PTR [eax-0x3ffd4960],dl
c000a019:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a01e:	85 c0                	test   eax,eax
c000a020:	74 24                	je     c000a046 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a022:	8b 15 88 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b688
c000a028:	83 ec 04             	sub    esp,0x4
c000a02b:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a030:	83 ec 08             	sub    esp,0x8
c000a033:	89 e0                	mov    eax,esp
c000a035:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a038:	89 08                	mov    DWORD PTR [eax],ecx
c000a03a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a03d:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a041:	ff d2                	call   edx
c000a043:	83 c4 10             	add    esp,0x10
c000a046:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a04a:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a04d:	0f b6 c0             	movzx  eax,al
c000a050:	85 c0                	test   eax,eax
c000a052:	0f 84 da 00 00 00    	je     c000a132 <sendKeyboardToken(KeyboardToken)+0x136>
c000a058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a05b:	0f b7 c0             	movzx  eax,ax
c000a05e:	3d 18 03 00 00       	cmp    eax,0x318
c000a063:	75 06                	jne    c000a06b <sendKeyboardToken(KeyboardToken)+0x6f>
c000a065:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a06b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a06e:	0f b7 c0             	movzx  eax,ax
c000a071:	3d 19 03 00 00       	cmp    eax,0x319
c000a076:	75 06                	jne    c000a07e <sendKeyboardToken(KeyboardToken)+0x82>
c000a078:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a07e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a081:	0f b7 c0             	movzx  eax,ax
c000a084:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a089:	75 06                	jne    c000a091 <sendKeyboardToken(KeyboardToken)+0x95>
c000a08b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a094:	0f b7 c0             	movzx  eax,ax
c000a097:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a09c:	75 06                	jne    c000a0a4 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a09e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a0a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0a7:	0f b7 c0             	movzx  eax,ax
c000a0aa:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a0af:	75 06                	jne    c000a0b7 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a0b1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a0b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ba:	0f b7 c0             	movzx  eax,ax
c000a0bd:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a0c2:	75 06                	jne    c000a0ca <sendKeyboardToken(KeyboardToken)+0xce>
c000a0c4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a0ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0cd:	0f b7 c0             	movzx  eax,ax
c000a0d0:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a0d5:	75 06                	jne    c000a0dd <sendKeyboardToken(KeyboardToken)+0xe1>
c000a0d7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a0dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0e0:	0f b7 c0             	movzx  eax,ax
c000a0e3:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a0e8:	75 06                	jne    c000a0f0 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a0ea:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a0f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f3:	0f b7 c0             	movzx  eax,ax
c000a0f6:	3d 20 03 00 00       	cmp    eax,0x320
c000a0fb:	75 06                	jne    c000a103 <sendKeyboardToken(KeyboardToken)+0x107>
c000a0fd:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a106:	0f b7 c0             	movzx  eax,ax
c000a109:	3d 21 03 00 00       	cmp    eax,0x321
c000a10e:	75 06                	jne    c000a116 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a110:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a119:	0f b7 c0             	movzx  eax,ax
c000a11c:	3d 22 03 00 00       	cmp    eax,0x322
c000a121:	0f 85 f1 00 00 00    	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a127:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a12d:	e9 e6 00 00 00       	jmp    c000a218 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a135:	0f b7 c0             	movzx  eax,ax
c000a138:	3d 18 03 00 00       	cmp    eax,0x318
c000a13d:	75 0a                	jne    c000a149 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a13f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a145:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14c:	0f b7 c0             	movzx  eax,ax
c000a14f:	3d 19 03 00 00       	cmp    eax,0x319
c000a154:	75 0a                	jne    c000a160 <sendKeyboardToken(KeyboardToken)+0x164>
c000a156:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a15c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a163:	0f b7 c0             	movzx  eax,ax
c000a166:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a16b:	75 0a                	jne    c000a177 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a16d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a173:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a177:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a17a:	0f b7 c0             	movzx  eax,ax
c000a17d:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a182:	75 0a                	jne    c000a18e <sendKeyboardToken(KeyboardToken)+0x192>
c000a184:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a18a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a18e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a191:	0f b7 c0             	movzx  eax,ax
c000a194:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a199:	75 0a                	jne    c000a1a5 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a19b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a1a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1a8:	0f b7 c0             	movzx  eax,ax
c000a1ab:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a1b0:	75 0a                	jne    c000a1bc <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a1b2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a1b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1bf:	0f b7 c0             	movzx  eax,ax
c000a1c2:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a1c7:	75 0a                	jne    c000a1d3 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a1c9:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a1cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1d6:	0f b7 c0             	movzx  eax,ax
c000a1d9:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a1de:	75 0a                	jne    c000a1ea <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a1e0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a1e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ed:	0f b7 c0             	movzx  eax,ax
c000a1f0:	3d 20 03 00 00       	cmp    eax,0x320
c000a1f5:	75 0a                	jne    c000a201 <sendKeyboardToken(KeyboardToken)+0x205>
c000a1f7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a1fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a204:	0f b7 c0             	movzx  eax,ax
c000a207:	3d 21 03 00 00       	cmp    eax,0x321
c000a20c:	75 0a                	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a20e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a214:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21b:	0f b7 c0             	movzx  eax,ax
c000a21e:	3d 00 02 00 00       	cmp    eax,0x200
c000a223:	75 2f                	jne    c000a254 <sendKeyboardToken(KeyboardToken)+0x258>
c000a225:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a22a:	83 f0 01             	xor    eax,0x1
c000a22d:	0f b6 c0             	movzx  eax,al
c000a230:	85 c0                	test   eax,eax
c000a232:	74 20                	je     c000a254 <sendKeyboardToken(KeyboardToken)+0x258>
c000a234:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a239:	6a 01                	push   0x1
c000a23b:	6a 00                	push   0x0
c000a23d:	68 5c 9e 00 c0       	push   0xc0009e5c
c000a242:	50                   	push   eax
c000a243:	e8 c8 c8 00 00       	call   c0016b10 <Process::createThread(void (*)(void*), void*, int)>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a252:	eb 3a                	jmp    c000a28e <sendKeyboardToken(KeyboardToken)+0x292>
c000a254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a257:	0f b7 c0             	movzx  eax,ax
c000a25a:	3d 01 02 00 00       	cmp    eax,0x201
c000a25f:	75 2d                	jne    c000a28e <sendKeyboardToken(KeyboardToken)+0x292>
c000a261:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a266:	83 f0 01             	xor    eax,0x1
c000a269:	0f b6 c0             	movzx  eax,al
c000a26c:	85 c0                	test   eax,eax
c000a26e:	74 1e                	je     c000a28e <sendKeyboardToken(KeyboardToken)+0x292>
c000a270:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a275:	6a 01                	push   0x1
c000a277:	6a 00                	push   0x0
c000a279:	68 c1 9e 00 c0       	push   0xc0009ec1
c000a27e:	50                   	push   eax
c000a27f:	e8 8c c8 00 00       	call   c0016b10 <Process::createThread(void (*)(void*), void*, int)>
c000a284:	83 c4 10             	add    esp,0x10
c000a287:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a28e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a291:	0f b7 c0             	movzx  eax,ax
c000a294:	3d 25 03 00 00       	cmp    eax,0x325
c000a299:	75 06                	jne    c000a2a1 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a29b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a2a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2a4:	0f b7 c0             	movzx  eax,ax
c000a2a7:	3d 24 03 00 00       	cmp    eax,0x324
c000a2ac:	75 06                	jne    c000a2b4 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a2ae:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a2b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2b7:	0f b7 c0             	movzx  eax,ax
c000a2ba:	3d 23 03 00 00       	cmp    eax,0x323
c000a2bf:	75 06                	jne    c000a2c7 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a2c1:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a2c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2ca:	0f b7 c0             	movzx  eax,ax
c000a2cd:	3d 26 03 00 00       	cmp    eax,0x326
c000a2d2:	75 06                	jne    c000a2da <sendKeyboardToken(KeyboardToken)+0x2de>
c000a2d4:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a2da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2dd:	0f b7 c0             	movzx  eax,ax
c000a2e0:	3d 27 03 00 00       	cmp    eax,0x327
c000a2e5:	75 06                	jne    c000a2ed <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a2e7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a2ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2f0:	0f b7 c0             	movzx  eax,ax
c000a2f3:	3d 22 03 00 00       	cmp    eax,0x322
c000a2f8:	75 06                	jne    c000a300 <sendKeyboardToken(KeyboardToken)+0x304>
c000a2fa:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a300:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a304:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a307:	83 f0 01             	xor    eax,0x1
c000a30a:	0f b6 c0             	movzx  eax,al
c000a30d:	85 c0                	test   eax,eax
c000a30f:	74 7c                	je     c000a38d <sendKeyboardToken(KeyboardToken)+0x391>
c000a311:	a0 a1 b7 02 c0       	mov    al,ds:0xc002b7a1
c000a316:	0f b6 c0             	movzx  eax,al
c000a319:	85 c0                	test   eax,eax
c000a31b:	74 43                	je     c000a360 <sendKeyboardToken(KeyboardToken)+0x364>
c000a31d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a321:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a325:	85 c0                	test   eax,eax
c000a327:	74 2b                	je     c000a354 <sendKeyboardToken(KeyboardToken)+0x358>
c000a329:	8b 15 a4 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002baa4
c000a32f:	89 d0                	mov    eax,edx
c000a331:	c1 e0 02             	shl    eax,0x2
c000a334:	01 d0                	add    eax,edx
c000a336:	d1 e0                	shl    eax,1
c000a338:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a33d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a340:	0f b7 c0             	movzx  eax,ax
c000a343:	8d 50 d0             	lea    edx,[eax-0x30]
c000a346:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a34b:	01 d0                	add    eax,edx
c000a34d:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a352:	eb 71                	jmp    c000a3c5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a354:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a35e:	eb 65                	jmp    c000a3c5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a360:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a365:	85 c0                	test   eax,eax
c000a367:	74 18                	je     c000a381 <sendKeyboardToken(KeyboardToken)+0x385>
c000a369:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a36e:	0f b6 c0             	movzx  eax,al
c000a371:	83 ec 0c             	sub    esp,0xc
c000a374:	50                   	push   eax
c000a375:	e8 ac fb ff ff       	call   c0009f26 <sendKeyToTerminal(unsigned char)>
c000a37a:	83 c4 10             	add    esp,0x10
c000a37d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a381:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a38b:	eb 38                	jmp    c000a3c5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a38d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a390:	0f b7 c0             	movzx  eax,ax
c000a393:	3d 01 01 00 00       	cmp    eax,0x101
c000a398:	75 2b                	jne    c000a3c5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a39a:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a39f:	85 c0                	test   eax,eax
c000a3a1:	74 18                	je     c000a3bb <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a3a3:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3a8:	0f b6 c0             	movzx  eax,al
c000a3ab:	83 ec 0c             	sub    esp,0xc
c000a3ae:	50                   	push   eax
c000a3af:	e8 72 fb ff ff       	call   c0009f26 <sendKeyToTerminal(unsigned char)>
c000a3b4:	83 c4 10             	add    esp,0x10
c000a3b7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3bb:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3c5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a3c8:	83 f0 01             	xor    eax,0x1
c000a3cb:	0f b6 c0             	movzx  eax,al
c000a3ce:	85 c0                	test   eax,eax
c000a3d0:	74 5a                	je     c000a42c <sendKeyboardToken(KeyboardToken)+0x430>
c000a3d2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a3d5:	83 f0 01             	xor    eax,0x1
c000a3d8:	0f b6 c0             	movzx  eax,al
c000a3db:	85 c0                	test   eax,eax
c000a3dd:	74 4d                	je     c000a42c <sendKeyboardToken(KeyboardToken)+0x430>
c000a3df:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a3e4:	83 f0 01             	xor    eax,0x1
c000a3e7:	0f b6 c0             	movzx  eax,al
c000a3ea:	85 c0                	test   eax,eax
c000a3ec:	74 3e                	je     c000a42c <sendKeyboardToken(KeyboardToken)+0x430>
c000a3ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3f1:	0f b7 c0             	movzx  eax,ax
c000a3f4:	83 f8 1f             	cmp    eax,0x1f
c000a3f7:	76 0b                	jbe    c000a404 <sendKeyboardToken(KeyboardToken)+0x408>
c000a3f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3fc:	0f b7 c0             	movzx  eax,ax
c000a3ff:	83 f8 7e             	cmp    eax,0x7e
c000a402:	76 16                	jbe    c000a41a <sendKeyboardToken(KeyboardToken)+0x41e>
c000a404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a407:	0f b7 c0             	movzx  eax,ax
c000a40a:	83 f8 0a             	cmp    eax,0xa
c000a40d:	74 0b                	je     c000a41a <sendKeyboardToken(KeyboardToken)+0x41e>
c000a40f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a412:	0f b7 c0             	movzx  eax,ax
c000a415:	83 f8 08             	cmp    eax,0x8
c000a418:	75 12                	jne    c000a42c <sendKeyboardToken(KeyboardToken)+0x430>
c000a41a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a41d:	0f b6 c0             	movzx  eax,al
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	50                   	push   eax
c000a424:	e8 fd fa ff ff       	call   c0009f26 <sendKeyToTerminal(unsigned char)>
c000a429:	83 c4 10             	add    esp,0x10
c000a42c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a42f:	83 f0 01             	xor    eax,0x1
c000a432:	0f b6 c0             	movzx  eax,al
c000a435:	85 c0                	test   eax,eax
c000a437:	74 5d                	je     c000a496 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a439:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a43c:	83 f0 01             	xor    eax,0x1
c000a43f:	0f b6 c0             	movzx  eax,al
c000a442:	85 c0                	test   eax,eax
c000a444:	74 50                	je     c000a496 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a446:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a44b:	0f b6 c0             	movzx  eax,al
c000a44e:	85 c0                	test   eax,eax
c000a450:	74 44                	je     c000a496 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a455:	0f b7 c0             	movzx  eax,ax
c000a458:	83 f8 3f             	cmp    eax,0x3f
c000a45b:	76 39                	jbe    c000a496 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a45d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a460:	0f b7 c0             	movzx  eax,ax
c000a463:	83 f8 7f             	cmp    eax,0x7f
c000a466:	77 2e                	ja     c000a496 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a46b:	88 c2                	mov    dl,al
c000a46d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a470:	0f b7 c0             	movzx  eax,ax
c000a473:	83 f8 5f             	cmp    eax,0x5f
c000a476:	76 04                	jbe    c000a47c <sendKeyboardToken(KeyboardToken)+0x480>
c000a478:	b0 20                	mov    al,0x20
c000a47a:	eb 02                	jmp    c000a47e <sendKeyboardToken(KeyboardToken)+0x482>
c000a47c:	b0 00                	mov    al,0x0
c000a47e:	89 d1                	mov    ecx,edx
c000a480:	29 c1                	sub    ecx,eax
c000a482:	89 c8                	mov    eax,ecx
c000a484:	83 e8 40             	sub    eax,0x40
c000a487:	0f b6 c0             	movzx  eax,al
c000a48a:	83 ec 0c             	sub    esp,0xc
c000a48d:	50                   	push   eax
c000a48e:	e8 93 fa ff ff       	call   c0009f26 <sendKeyToTerminal(unsigned char)>
c000a493:	83 c4 10             	add    esp,0x10
c000a496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a499:	0f b7 c0             	movzx  eax,ax
c000a49c:	3d 00 03 00 00       	cmp    eax,0x300
c000a4a1:	75 12                	jne    c000a4b5 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4a3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4a6:	83 f0 01             	xor    eax,0x1
c000a4a9:	0f b6 c0             	movzx  eax,al
c000a4ac:	85 c0                	test   eax,eax
c000a4ae:	74 05                	je     c000a4b5 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4b0:	e8 66 7c 00 00       	call   c001211b <doTerminalCycle()>
c000a4b5:	90                   	nop
c000a4b6:	c9                   	leave  
c000a4b7:	c3                   	ret    

c000a4b8 <clearInternalKeybuffer(VgaText*)>:
c000a4b8:	55                   	push   ebp
c000a4b9:	89 e5                	mov    ebp,esp
c000a4bb:	83 ec 08             	sub    esp,0x8
c000a4be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4c1:	05 02 01 00 00       	add    eax,0x102
c000a4c6:	83 ec 0c             	sub    esp,0xc
c000a4c9:	50                   	push   eax
c000a4ca:	e8 b1 60 ff ff       	call   c0000580 <strlen>
c000a4cf:	83 c4 10             	add    esp,0x10
c000a4d2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a4d5:	81 c2 02 01 00 00    	add    edx,0x102
c000a4db:	83 ec 04             	sub    esp,0x4
c000a4de:	50                   	push   eax
c000a4df:	6a 00                	push   0x0
c000a4e1:	52                   	push   edx
c000a4e2:	e8 09 60 ff ff       	call   c00004f0 <memset>
c000a4e7:	83 c4 10             	add    esp,0x10
c000a4ea:	90                   	nop
c000a4eb:	c9                   	leave  
c000a4ec:	c3                   	ret    

c000a4ed <readKeyboard(VgaText*, char*, unsigned long)>:
c000a4ed:	55                   	push   ebp
c000a4ee:	89 e5                	mov    ebp,esp
c000a4f0:	83 ec 18             	sub    esp,0x18
c000a4f3:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a4f8:	85 c0                	test   eax,eax
c000a4fa:	74 2a                	je     c000a526 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a4fc:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a502:	8b 15 88 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b688
c000a508:	83 ec 04             	sub    esp,0x4
c000a50b:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a510:	83 ec 08             	sub    esp,0x8
c000a513:	89 e0                	mov    eax,esp
c000a515:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000a518:	89 08                	mov    DWORD PTR [eax],ecx
c000a51a:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a51d:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a521:	ff d2                	call   edx
c000a523:	83 c4 10             	add    esp,0x10
c000a526:	fb                   	sti    
c000a527:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a52e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a532:	0f 84 08 01 00 00    	je     c000a640 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a538:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a53b:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a541:	0f be c0             	movsx  eax,al
c000a544:	85 c0                	test   eax,eax
c000a546:	75 27                	jne    c000a56f <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a548:	fa                   	cli    
c000a549:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a54e:	83 c0 01             	add    eax,0x1
c000a551:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000a556:	e8 35 c8 00 00       	call   c0016d90 <schedule()>
c000a55b:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000a563:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a568:	85 c0                	test   eax,eax
c000a56a:	75 cc                	jne    c000a538 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a56c:	fb                   	sti    
c000a56d:	eb c9                	jmp    c000a538 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a56f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a572:	8d 50 01             	lea    edx,[eax+0x1]
c000a575:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a578:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a57b:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a581:	88 10                	mov    BYTE PTR [eax],dl
c000a583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a586:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a58c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a58f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a593:	83 f8 03             	cmp    eax,0x3
c000a596:	75 1e                	jne    c000a5b6 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a598:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a59d:	8b 00                	mov    eax,DWORD PTR [eax]
c000a59f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a5a2:	8b 80 80 07 00 00    	mov    eax,DWORD PTR [eax+0x780]
c000a5a8:	83 ec 08             	sub    esp,0x8
c000a5ab:	6a 02                	push   0x2
c000a5ad:	50                   	push   eax
c000a5ae:	e8 dc 69 00 00       	call   c0010f8f <KeRaiseSignal(SigHandlerBlock*, int)>
c000a5b3:	83 c4 10             	add    esp,0x10
c000a5b6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5ba:	83 f8 1c             	cmp    eax,0x1c
c000a5bd:	75 1e                	jne    c000a5dd <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a5bf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a5c9:	8b 80 80 07 00 00    	mov    eax,DWORD PTR [eax+0x780]
c000a5cf:	83 ec 08             	sub    esp,0x8
c000a5d2:	6a 09                	push   0x9
c000a5d4:	50                   	push   eax
c000a5d5:	e8 b5 69 00 00       	call   c0010f8f <KeRaiseSignal(SigHandlerBlock*, int)>
c000a5da:	83 c4 10             	add    esp,0x10
c000a5dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5e0:	05 02 01 00 00       	add    eax,0x102
c000a5e5:	83 ec 0c             	sub    esp,0xc
c000a5e8:	50                   	push   eax
c000a5e9:	e8 92 5f ff ff       	call   c0000580 <strlen>
c000a5ee:	83 c4 10             	add    esp,0x10
c000a5f1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5f4:	81 c2 02 01 00 00    	add    edx,0x102
c000a5fa:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a5fd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a600:	81 c2 02 01 00 00    	add    edx,0x102
c000a606:	83 ec 04             	sub    esp,0x4
c000a609:	50                   	push   eax
c000a60a:	51                   	push   ecx
c000a60b:	52                   	push   edx
c000a60c:	e8 bf 5d ff ff       	call   c00003d0 <memmove>
c000a611:	83 c4 10             	add    esp,0x10
c000a614:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a618:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a61c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a620:	83 f8 0a             	cmp    eax,0xa
c000a623:	74 16                	je     c000a63b <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a625:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a629:	83 f8 03             	cmp    eax,0x3
c000a62c:	74 0d                	je     c000a63b <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a62e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a632:	83 f8 1c             	cmp    eax,0x1c
c000a635:	0f 85 f3 fe ff ff    	jne    c000a52e <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a63b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a63e:	eb 03                	jmp    c000a643 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a640:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a643:	c9                   	leave  
c000a644:	c3                   	ret    
c000a645:	90                   	nop

c000a646 <Keyboard::Keyboard(char const*)>:
c000a646:	83 ec 0c             	sub    esp,0xc
c000a649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a64d:	83 ec 08             	sub    esp,0x8
c000a650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a654:	50                   	push   eax
c000a655:	e8 a2 f4 ff ff       	call   c0009afc <Device::Device(char const*)>
c000a65a:	83 c4 10             	add    esp,0x10
c000a65d:	ba a0 34 02 c0       	mov    edx,0xc00234a0
c000a662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a666:	89 10                	mov    DWORD PTR [eax],edx
c000a668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a66c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a676:	c6 05 84 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b684,0x1
c000a67d:	90                   	nop
c000a67e:	83 c4 0c             	add    esp,0xc
c000a681:	c3                   	ret    

c000a682 <Keyboard::~Keyboard()>:
c000a682:	83 ec 0c             	sub    esp,0xc
c000a685:	ba a0 34 02 c0       	mov    edx,0xc00234a0
c000a68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68e:	89 10                	mov    DWORD PTR [eax],edx
c000a690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a694:	83 ec 0c             	sub    esp,0xc
c000a697:	50                   	push   eax
c000a698:	e8 ff f1 ff ff       	call   c000989c <Device::~Device()>
c000a69d:	83 c4 10             	add    esp,0x10
c000a6a0:	90                   	nop
c000a6a1:	83 c4 0c             	add    esp,0xc
c000a6a4:	c3                   	ret    
c000a6a5:	90                   	nop

c000a6a6 <Keyboard::~Keyboard()>:
c000a6a6:	83 ec 0c             	sub    esp,0xc
c000a6a9:	83 ec 0c             	sub    esp,0xc
c000a6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6b0:	e8 cd ff ff ff       	call   c000a682 <Keyboard::~Keyboard()>
c000a6b5:	83 c4 10             	add    esp,0x10
c000a6b8:	83 ec 08             	sub    esp,0x8
c000a6bb:	68 5c 01 00 00       	push   0x15c
c000a6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6c4:	e8 92 2b 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c000a6c9:	83 c4 10             	add    esp,0x10
c000a6cc:	83 c4 0c             	add    esp,0xc
c000a6cf:	c3                   	ret    

c000a6d0 <LogicalDisk::close(int, int, void*)>:
c000a6d0:	83 c8 ff             	or     eax,0xffffffff
c000a6d3:	c3                   	ret    

c000a6d4 <LogicalDisk::~LogicalDisk()>:
c000a6d4:	83 ec 0c             	sub    esp,0xc
c000a6d7:	ba 18 35 02 c0       	mov    edx,0xc0023518
c000a6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e0:	89 10                	mov    DWORD PTR [eax],edx
c000a6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e6:	83 ec 0c             	sub    esp,0xc
c000a6e9:	50                   	push   eax
c000a6ea:	e8 ad f1 ff ff       	call   c000989c <Device::~Device()>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	90                   	nop
c000a6f3:	83 c4 0c             	add    esp,0xc
c000a6f6:	c3                   	ret    
c000a6f7:	90                   	nop

c000a6f8 <LogicalDisk::~LogicalDisk()>:
c000a6f8:	83 ec 0c             	sub    esp,0xc
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a702:	e8 cd ff ff ff       	call   c000a6d4 <LogicalDisk::~LogicalDisk()>
c000a707:	83 c4 10             	add    esp,0x10
c000a70a:	83 ec 08             	sub    esp,0x8
c000a70d:	68 78 01 00 00       	push   0x178
c000a712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a716:	e8 40 2b 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c000a71b:	83 c4 10             	add    esp,0x10
c000a71e:	83 c4 0c             	add    esp,0xc
c000a721:	c3                   	ret    

c000a722 <LogicalDisk::open(int, int, void*)>:
c000a722:	83 ec 18             	sub    esp,0x18
c000a725:	68 cc 34 02 c0       	push   0xc00234cc
c000a72a:	e8 fb 56 00 00       	call   c000fe2a <KePanic(char const*)>
c000a72f:	83 c8 ff             	or     eax,0xffffffff
c000a732:	83 c4 1c             	add    esp,0x1c
c000a735:	c3                   	ret    

c000a736 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a736:	53                   	push   ebx
c000a737:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a73b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a73f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a743:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a749:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a74f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a755:	77 10                	ja     c000a767 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a757:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a75d:	89 d3                	mov    ebx,edx
c000a75f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a765:	72 05                	jb     c000a76c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a767:	83 c8 ff             	or     eax,0xffffffff
c000a76a:	89 c2                	mov    edx,eax
c000a76c:	5b                   	pop    ebx
c000a76d:	c3                   	ret    

c000a76e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a76e:	56                   	push   esi
c000a76f:	83 c8 ff             	or     eax,0xffffffff
c000a772:	53                   	push   ebx
c000a773:	89 c2                	mov    edx,eax
c000a775:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a779:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a77d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a781:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a787:	77 27                	ja     c000a7b0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a789:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a78f:	89 d8                	mov    eax,ebx
c000a791:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a797:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a79c:	89 c2                	mov    edx,eax
c000a79e:	73 10                	jae    c000a7b0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7a0:	89 c8                	mov    eax,ecx
c000a7a2:	89 da                	mov    edx,ebx
c000a7a4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a7aa:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a7b0:	5b                   	pop    ebx
c000a7b1:	5e                   	pop    esi
c000a7b2:	c3                   	ret    
c000a7b3:	90                   	nop

c000a7b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a7b4:	83 ec 1c             	sub    esp,0x1c
c000a7b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a7bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a7c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a7c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a7cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000a7ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a7d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a7d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a7da:	83 ec 08             	sub    esp,0x8
c000a7dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a7e1:	50                   	push   eax
c000a7e2:	e8 15 f3 ff ff       	call   c0009afc <Device::Device(char const*)>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	ba 18 35 02 c0       	mov    edx,0xc0023518
c000a7ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a7f3:	89 10                	mov    DWORD PTR [eax],edx
c000a7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a7f9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a804:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a80b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a80f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a816:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a81a:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a824:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a828:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a82c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a830:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a836:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a83c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a840:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a843:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a847:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a84d:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a857:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a85b:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a865:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a86f:	90                   	nop
c000a870:	83 c4 1c             	add    esp,0x1c
c000a873:	c3                   	ret    

c000a874 <LogicalDisk::assignDriveLetter()>:
c000a874:	55                   	push   ebp
c000a875:	57                   	push   edi
c000a876:	56                   	push   esi
c000a877:	53                   	push   ebx
c000a878:	83 ec 14             	sub    esp,0x14
c000a87b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a87f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a885:	b0 41                	mov    al,0x41
c000a887:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a88d:	84 d2                	test   dl,dl
c000a88f:	75 02                	jne    c000a893 <LogicalDisk::assignDriveLetter()+0x1f>
c000a891:	b0 43                	mov    al,0x43
c000a893:	8b 3d c0 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac0
c000a899:	0f b6 ca             	movzx  ecx,dl
c000a89c:	0f be e8             	movsx  ebp,al
c000a89f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a8a3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a8a7:	8b 3d c4 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac4
c000a8ad:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a8b1:	3c 43                	cmp    al,0x43
c000a8b3:	75 10                	jne    c000a8c5 <LogicalDisk::assignDriveLetter()+0x51>
c000a8b5:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a8bc:	75 5a                	jne    c000a918 <LogicalDisk::assignDriveLetter()+0xa4>
c000a8be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a8c3:	75 53                	jne    c000a918 <LogicalDisk::assignDriveLetter()+0xa4>
c000a8c5:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a8c8:	ba 01 00 00 00       	mov    edx,0x1
c000a8cd:	89 34 24             	mov    DWORD PTR [esp],esi
c000a8d0:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a8d3:	d3 e2                	shl    edx,cl
c000a8d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a8d9:	89 d7                	mov    edi,edx
c000a8db:	89 d6                	mov    esi,edx
c000a8dd:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a8e1:	c1 ff 1f             	sar    edi,0x1f
c000a8e4:	21 f9                	and    ecx,edi
c000a8e6:	09 d1                	or     ecx,edx
c000a8e8:	75 2e                	jne    c000a918 <LogicalDisk::assignDriveLetter()+0xa4>
c000a8ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8ee:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a8f2:	09 f2                	or     edx,esi
c000a8f4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a8f7:	89 15 c0 ba 02 c0    	mov    DWORD PTR ds:0xc002bac0,edx
c000a8fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a901:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a907:	89 1c b5 e0 ba 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4520],ebx
c000a90e:	09 fa                	or     edx,edi
c000a910:	89 15 c4 ba 02 c0    	mov    DWORD PTR ds:0xc002bac4,edx
c000a916:	eb 0d                	jmp    c000a925 <LogicalDisk::assignDriveLetter()+0xb1>
c000a918:	8d 50 01             	lea    edx,[eax+0x1]
c000a91b:	45                   	inc    ebp
c000a91c:	80 fa 5b             	cmp    dl,0x5b
c000a91f:	88 d0                	mov    al,dl
c000a921:	75 8e                	jne    c000a8b1 <LogicalDisk::assignDriveLetter()+0x3d>
c000a923:	31 c0                	xor    eax,eax
c000a925:	83 c4 14             	add    esp,0x14
c000a928:	5b                   	pop    ebx
c000a929:	5e                   	pop    esi
c000a92a:	5f                   	pop    edi
c000a92b:	5d                   	pop    ebp
c000a92c:	c3                   	ret    
c000a92d:	90                   	nop

c000a92e <LogicalDisk::mount()>:
c000a92e:	56                   	push   esi
c000a92f:	53                   	push   ebx
c000a930:	53                   	push   ebx
c000a931:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a935:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c000a93b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a945:	85 db                	test   ebx,ebx
c000a947:	74 27                	je     c000a970 <LogicalDisk::mount()+0x42>
c000a949:	51                   	push   ecx
c000a94a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a951:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a953:	83 e8 41             	sub    eax,0x41
c000a956:	50                   	push   eax
c000a957:	56                   	push   esi
c000a958:	53                   	push   ebx
c000a959:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a95c:	83 c4 10             	add    esp,0x10
c000a95f:	84 c0                	test   al,al
c000a961:	74 08                	je     c000a96b <LogicalDisk::mount()+0x3d>
c000a963:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a969:	eb 07                	jmp    c000a972 <LogicalDisk::mount()+0x44>
c000a96b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a96e:	eb d5                	jmp    c000a945 <LogicalDisk::mount()+0x17>
c000a970:	31 c0                	xor    eax,eax
c000a972:	5a                   	pop    edx
c000a973:	5b                   	pop    ebx
c000a974:	5e                   	pop    esi
c000a975:	c3                   	ret    

c000a976 <LogicalDisk::unmount()>:
c000a976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a97a:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a984:	c3                   	ret    
c000a985:	90                   	nop

c000a986 <LogicalDisk::eject()>:
c000a986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a98a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a990:	8b 10                	mov    edx,DWORD PTR [eax]
c000a992:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a996:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a999:	90                   	nop

c000a99a <LogicalDisk::unassignDriveLetter()>:
c000a99a:	57                   	push   edi
c000a99b:	56                   	push   esi
c000a99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a9a0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a9a7:	85 c9                	test   ecx,ecx
c000a9a9:	75 0f                	jne    c000a9ba <LogicalDisk::unassignDriveLetter()+0x20>
c000a9ab:	c7 44 24 0c f0 34 02 c0 	mov    DWORD PTR [esp+0xc],0xc00234f0
c000a9b3:	5e                   	pop    esi
c000a9b4:	5f                   	pop    edi
c000a9b5:	e9 70 54 00 00       	jmp    c000fe2a <KePanic(char const*)>
c000a9ba:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a9c1:	83 e9 41             	sub    ecx,0x41
c000a9c4:	b8 01 00 00 00       	mov    eax,0x1
c000a9c9:	c7 04 8d e0 ba 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4520],0x0
c000a9d4:	d3 e0                	shl    eax,cl
c000a9d6:	89 c7                	mov    edi,eax
c000a9d8:	f7 d0                	not    eax
c000a9da:	c1 ff 1f             	sar    edi,0x1f
c000a9dd:	21 05 c0 ba 02 c0    	and    DWORD PTR ds:0xc002bac0,eax
c000a9e3:	89 fe                	mov    esi,edi
c000a9e5:	f7 d6                	not    esi
c000a9e7:	21 35 c4 ba 02 c0    	and    DWORD PTR ds:0xc002bac4,esi
c000a9ed:	5e                   	pop    esi
c000a9ee:	5f                   	pop    edi
c000a9ef:	c3                   	ret    

c000a9f0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a9f0:	57                   	push   edi
c000a9f1:	56                   	push   esi
c000a9f2:	53                   	push   ebx
c000a9f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a9f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a9fb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a9ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa03:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa09:	77 41                	ja     c000aa4c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa0b:	99                   	cdq    
c000aa0c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa12:	01 c8                	add    eax,ecx
c000aa14:	11 da                	adc    edx,ebx
c000aa16:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa1c:	19 d7                	sbb    edi,edx
c000aa1e:	72 33                	jb     c000aa53 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa20:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa26:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa2c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa30:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa34:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa3a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aa40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa44:	5b                   	pop    ebx
c000aa45:	5e                   	pop    esi
c000aa46:	5f                   	pop    edi
c000aa47:	e9 d6 0b 00 00       	jmp    c000b622 <VCache::read(unsigned long long, int, void*)>
c000aa4c:	b8 05 00 00 00       	mov    eax,0x5
c000aa51:	eb 05                	jmp    c000aa58 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aa53:	b8 07 00 00 00       	mov    eax,0x7
c000aa58:	5b                   	pop    ebx
c000aa59:	5e                   	pop    esi
c000aa5a:	5f                   	pop    edi
c000aa5b:	c3                   	ret    

c000aa5c <LogicalDisk::write(unsigned long long, int, void*)>:
c000aa5c:	57                   	push   edi
c000aa5d:	56                   	push   esi
c000aa5e:	53                   	push   ebx
c000aa5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa6f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa75:	77 41                	ja     c000aab8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aa77:	99                   	cdq    
c000aa78:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa7e:	01 c8                	add    eax,ecx
c000aa80:	11 da                	adc    edx,ebx
c000aa82:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa88:	19 d7                	sbb    edi,edx
c000aa8a:	72 33                	jb     c000aabf <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aa8c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa92:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa98:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa9c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aaa0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aaa6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aaac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab0:	5b                   	pop    ebx
c000aab1:	5e                   	pop    esi
c000aab2:	5f                   	pop    edi
c000aab3:	e9 9c 09 00 00       	jmp    c000b454 <VCache::write(unsigned long long, int, void*)>
c000aab8:	b8 05 00 00 00       	mov    eax,0x5
c000aabd:	eb 05                	jmp    c000aac4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000aabf:	b8 07 00 00 00       	mov    eax,0x7
c000aac4:	5b                   	pop    ebx
c000aac5:	5e                   	pop    esi
c000aac6:	5f                   	pop    edi
c000aac7:	c3                   	ret    

c000aac8 <Mouse::Mouse(char const*)>:
c000aac8:	83 ec 0c             	sub    esp,0xc
c000aacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacf:	83 ec 08             	sub    esp,0x8
c000aad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aad6:	50                   	push   eax
c000aad7:	e8 20 f0 ff ff       	call   c0009afc <Device::Device(char const*)>
c000aadc:	83 c4 10             	add    esp,0x10
c000aadf:	ba 44 35 02 c0       	mov    edx,0xc0023544
c000aae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae8:	89 10                	mov    DWORD PTR [eax],edx
c000aaea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaee:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000aaf8:	90                   	nop
c000aaf9:	83 c4 0c             	add    esp,0xc
c000aafc:	c3                   	ret    
c000aafd:	90                   	nop
c000aafe:	66 90                	xchg   ax,ax

c000ab00 <Mouse::~Mouse()>:
c000ab00:	83 ec 0c             	sub    esp,0xc
c000ab03:	ba 44 35 02 c0       	mov    edx,0xc0023544
c000ab08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab0c:	89 10                	mov    DWORD PTR [eax],edx
c000ab0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab12:	83 ec 0c             	sub    esp,0xc
c000ab15:	50                   	push   eax
c000ab16:	e8 81 ed ff ff       	call   c000989c <Device::~Device()>
c000ab1b:	83 c4 10             	add    esp,0x10
c000ab1e:	90                   	nop
c000ab1f:	83 c4 0c             	add    esp,0xc
c000ab22:	c3                   	ret    
c000ab23:	90                   	nop

c000ab24 <Mouse::~Mouse()>:
c000ab24:	83 ec 0c             	sub    esp,0xc
c000ab27:	83 ec 0c             	sub    esp,0xc
c000ab2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab2e:	e8 cd ff ff ff       	call   c000ab00 <Mouse::~Mouse()>
c000ab33:	83 c4 10             	add    esp,0x10
c000ab36:	83 ec 08             	sub    esp,0x8
c000ab39:	68 58 01 00 00       	push   0x158
c000ab3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab42:	e8 14 27 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c000ab47:	83 c4 10             	add    esp,0x10
c000ab4a:	83 c4 0c             	add    esp,0xc
c000ab4d:	c3                   	ret    

c000ab4e <NIC::getMAC()>:
c000ab4e:	31 c0                	xor    eax,eax
c000ab50:	31 d2                	xor    edx,edx
c000ab52:	c3                   	ret    
c000ab53:	90                   	nop

c000ab54 <NIC::write(int, unsigned char*, int*)>:
c000ab54:	b8 01 00 00 00       	mov    eax,0x1
c000ab59:	c3                   	ret    

c000ab5a <NIC::NIC(char const*)>:
c000ab5a:	83 ec 0c             	sub    esp,0xc
c000ab5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab61:	83 ec 08             	sub    esp,0x8
c000ab64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab68:	50                   	push   eax
c000ab69:	e8 8e ef ff ff       	call   c0009afc <Device::Device(char const*)>
c000ab6e:	83 c4 10             	add    esp,0x10
c000ab71:	ba 70 35 02 c0       	mov    edx,0xc0023570
c000ab76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7a:	89 10                	mov    DWORD PTR [eax],edx
c000ab7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab80:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ab8a:	90                   	nop
c000ab8b:	83 c4 0c             	add    esp,0xc
c000ab8e:	c3                   	ret    
c000ab8f:	90                   	nop

c000ab90 <NIC::~NIC()>:
c000ab90:	83 ec 0c             	sub    esp,0xc
c000ab93:	ba 70 35 02 c0       	mov    edx,0xc0023570
c000ab98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab9c:	89 10                	mov    DWORD PTR [eax],edx
c000ab9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba2:	83 ec 0c             	sub    esp,0xc
c000aba5:	50                   	push   eax
c000aba6:	e8 f1 ec ff ff       	call   c000989c <Device::~Device()>
c000abab:	83 c4 10             	add    esp,0x10
c000abae:	90                   	nop
c000abaf:	83 c4 0c             	add    esp,0xc
c000abb2:	c3                   	ret    
c000abb3:	90                   	nop

c000abb4 <NIC::~NIC()>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 0c             	sub    esp,0xc
c000abba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abbe:	e8 cd ff ff ff       	call   c000ab90 <NIC::~NIC()>
c000abc3:	83 c4 10             	add    esp,0x10
c000abc6:	83 ec 08             	sub    esp,0x8
c000abc9:	68 58 01 00 00       	push   0x158
c000abce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abd2:	e8 84 26 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c000abd7:	83 c4 10             	add    esp,0x10
c000abda:	83 c4 0c             	add    esp,0xc
c000abdd:	c3                   	ret    

c000abde <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000abde:	55                   	push   ebp
c000abdf:	57                   	push   edi
c000abe0:	56                   	push   esi
c000abe1:	53                   	push   ebx
c000abe2:	81 ec 28 01 00 00    	sub    esp,0x128
c000abe8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000abef:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000abf6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000abfd:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000ac04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac08:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac0c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac13:	e8 e0 ef ff ff       	call   c0009bf8 <Device::getName()>
c000ac18:	5a                   	pop    edx
c000ac19:	59                   	pop    ecx
c000ac1a:	50                   	push   eax
c000ac1b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac1f:	55                   	push   ebp
c000ac20:	e8 2b 5a ff ff       	call   c0000650 <strcpy>
c000ac25:	5b                   	pop    ebx
c000ac26:	58                   	pop    eax
c000ac27:	68 9c 35 02 c0       	push   0xc002359c
c000ac2c:	55                   	push   ebp
c000ac2d:	e8 3e 5c ff ff       	call   c0000870 <strcat>
c000ac32:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac39:	e8 a6 4e 00 00       	call   c000fae4 <malloc>
c000ac3e:	83 c4 0c             	add    esp,0xc
c000ac41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac45:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac49:	89 c3                	mov    ebx,eax
c000ac4b:	57                   	push   edi
c000ac4c:	56                   	push   esi
c000ac4d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ac54:	55                   	push   ebp
c000ac55:	50                   	push   eax
c000ac56:	e8 59 fb ff ff       	call   c000a7b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ac5b:	83 c4 14             	add    esp,0x14
c000ac5e:	53                   	push   ebx
c000ac5f:	e8 10 fc ff ff       	call   c000a874 <LogicalDisk::assignDriveLetter()>
c000ac64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ac67:	e8 c2 fc ff ff       	call   c000a92e <LogicalDisk::mount()>
c000ac6c:	58                   	pop    eax
c000ac6d:	5a                   	pop    edx
c000ac6e:	53                   	push   ebx
c000ac6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac76:	e8 1f ed ff ff       	call   c000999a <Device::addChild(Device*)>
c000ac7b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ac81:	5b                   	pop    ebx
c000ac82:	5e                   	pop    esi
c000ac83:	5f                   	pop    edi
c000ac84:	5d                   	pop    ebp
c000ac85:	c3                   	ret    

c000ac86 <createPartitionsForDisk(PhysicalDisk*)>:
c000ac86:	55                   	push   ebp
c000ac87:	57                   	push   edi
c000ac88:	56                   	push   esi
c000ac89:	53                   	push   ebx
c000ac8a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ac90:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ac97:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ac9d:	3d 00 02 00 00       	cmp    eax,0x200
c000aca2:	74 27                	je     c000accb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000aca4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000acaa:	83 ec 10             	sub    esp,0x10
c000acad:	99                   	cdq    
c000acae:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000acb4:	52                   	push   edx
c000acb5:	50                   	push   eax
c000acb6:	0f a4 f7 0a          	shld   edi,esi,0xa
c000acba:	c1 e6 0a             	shl    esi,0xa
c000acbd:	89 fd                	mov    ebp,edi
c000acbf:	55                   	push   ebp
c000acc0:	56                   	push   esi
c000acc1:	e8 6e 6a 01 00       	call   c0021734 <__udivdi3>
c000acc6:	e9 b9 00 00 00       	jmp    c000ad84 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000accb:	83 ec 0c             	sub    esp,0xc
c000acce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000acd0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000acd4:	56                   	push   esi
c000acd5:	6a 01                	push   0x1
c000acd7:	6a 00                	push   0x0
c000acd9:	6a 00                	push   0x0
c000acdb:	53                   	push   ebx
c000acdc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000acdf:	83 c4 20             	add    esp,0x20
c000ace2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000acea:	75 0a                	jne    c000acf6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000acec:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000acf4:	74 2c                	je     c000ad22 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000acf6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000acfc:	83 ec 10             	sub    esp,0x10
c000acff:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad05:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad0b:	89 f7                	mov    edi,esi
c000ad0d:	c1 ff 1f             	sar    edi,0x1f
c000ad10:	57                   	push   edi
c000ad11:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad15:	56                   	push   esi
c000ad16:	c1 e0 0a             	shl    eax,0xa
c000ad19:	52                   	push   edx
c000ad1a:	50                   	push   eax
c000ad1b:	e8 14 6a 01 00       	call   c0021734 <__udivdi3>
c000ad20:	eb 62                	jmp    c000ad84 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad22:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad29:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad30:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad37:	89 cf                	mov    edi,ecx
c000ad39:	83 e2 7f             	and    edx,0x7f
c000ad3c:	83 e7 7f             	and    edi,0x7f
c000ad3f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ad42:	83 e0 7f             	and    eax,0x7f
c000ad45:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ad48:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ad4f:	83 e0 7f             	and    eax,0x7f
c000ad52:	01 d0                	add    eax,edx
c000ad54:	84 c0                	test   al,al
c000ad56:	89 c5                	mov    ebp,eax
c000ad58:	74 41                	je     c000ad9b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000ad5a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad60:	83 ec 10             	sub    esp,0x10
c000ad63:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad69:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad6f:	89 f7                	mov    edi,esi
c000ad71:	c1 ff 1f             	sar    edi,0x1f
c000ad74:	57                   	push   edi
c000ad75:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad79:	56                   	push   esi
c000ad7a:	c1 e0 0a             	shl    eax,0xa
c000ad7d:	52                   	push   edx
c000ad7e:	50                   	push   eax
c000ad7f:	e8 b0 69 01 00       	call   c0021734 <__udivdi3>
c000ad84:	83 c4 14             	add    esp,0x14
c000ad87:	52                   	push   edx
c000ad88:	50                   	push   eax
c000ad89:	6a 00                	push   0x0
c000ad8b:	6a 00                	push   0x0
c000ad8d:	53                   	push   ebx
c000ad8e:	e8 4b fe ff ff       	call   c000abde <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ad93:	83 c4 20             	add    esp,0x20
c000ad96:	e9 73 01 00 00       	jmp    c000af0e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ad9b:	89 f0                	mov    eax,esi
c000ad9d:	31 c9                	xor    ecx,ecx
c000ad9f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ada6:	75 02                	jne    c000adaa <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ada8:	89 cd                	mov    ebp,ecx
c000adaa:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000adb2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000adb9:	83 c0 10             	add    eax,0x10
c000adbc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000adc4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000adcb:	c1 e2 08             	shl    edx,0x8
c000adce:	c1 e6 10             	shl    esi,0x10
c000add1:	09 f2                	or     edx,esi
c000add3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000adda:	09 f2                	or     edx,esi
c000addc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ade3:	c1 e6 18             	shl    esi,0x18
c000ade6:	09 f2                	or     edx,esi
c000ade8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000adef:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000adf3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000adfa:	c1 e6 10             	shl    esi,0x10
c000adfd:	c1 e2 08             	shl    edx,0x8
c000ae00:	09 f2                	or     edx,esi
c000ae02:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae09:	09 f2                	or     edx,esi
c000ae0b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae12:	c1 e6 18             	shl    esi,0x18
c000ae15:	09 f2                	or     edx,esi
c000ae17:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae1b:	41                   	inc    ecx
c000ae1c:	83 f9 04             	cmp    ecx,0x4
c000ae1f:	0f 85 7a ff ff ff    	jne    c000ad9f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae29:	83 f0 01             	xor    eax,0x1
c000ae2c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae30:	75 4f                	jne    c000ae81 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae36:	83 f0 01             	xor    eax,0x1
c000ae39:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae3d:	75 42                	jne    c000ae81 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae3f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ae45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000ae4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ae53:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ae5b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ae61:	89 f7                	mov    edi,esi
c000ae63:	c1 ff 1f             	sar    edi,0x1f
c000ae66:	57                   	push   edi
c000ae67:	56                   	push   esi
c000ae68:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ae6c:	52                   	push   edx
c000ae6d:	c1 e0 0a             	shl    eax,0xa
c000ae70:	50                   	push   eax
c000ae71:	e8 be 68 01 00       	call   c0021734 <__udivdi3>
c000ae76:	83 c4 10             	add    esp,0x10
c000ae79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000ae81:	89 e8                	mov    eax,ebp
c000ae83:	0f b6 e8             	movzx  ebp,al
c000ae86:	85 ed                	test   ebp,ebp
c000ae88:	74 50                	je     c000aeda <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000ae8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ae92:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae96:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000ae9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae9e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000aea2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aea6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000aeaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aeae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aeb2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aeb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aeba:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000aebe:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000aec2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000aec6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000aeca:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000aece:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000aed2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000aed6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000aeda:	31 ed                	xor    ebp,ebp
c000aedc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000aee0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000aee4:	89 f8                	mov    eax,edi
c000aee6:	09 f0                	or     eax,esi
c000aee8:	74 1e                	je     c000af08 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000aeea:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000aeee:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000aef2:	89 d1                	mov    ecx,edx
c000aef4:	09 c1                	or     ecx,eax
c000aef6:	74 10                	je     c000af08 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000aef8:	83 ec 0c             	sub    esp,0xc
c000aefb:	57                   	push   edi
c000aefc:	56                   	push   esi
c000aefd:	52                   	push   edx
c000aefe:	50                   	push   eax
c000aeff:	53                   	push   ebx
c000af00:	e8 d9 fc ff ff       	call   c000abde <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af05:	83 c4 20             	add    esp,0x20
c000af08:	45                   	inc    ebp
c000af09:	83 fd 04             	cmp    ebp,0x4
c000af0c:	75 ce                	jne    c000aedc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af0e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af14:	5b                   	pop    ebx
c000af15:	5e                   	pop    esi
c000af16:	5f                   	pop    edi
c000af17:	5d                   	pop    ebp
c000af18:	c3                   	ret    
c000af19:	66 90                	xchg   ax,ax
c000af1b:	90                   	nop

c000af1c <Serial::Serial(char const*)>:
c000af1c:	83 ec 0c             	sub    esp,0xc
c000af1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af23:	83 ec 08             	sub    esp,0x8
c000af26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af2a:	50                   	push   eax
c000af2b:	e8 cc eb ff ff       	call   c0009afc <Device::Device(char const*)>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c000af38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3c:	89 10                	mov    DWORD PTR [eax],edx
c000af3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af42:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000af4c:	90                   	nop
c000af4d:	83 c4 0c             	add    esp,0xc
c000af50:	c3                   	ret    
c000af51:	90                   	nop
c000af52:	66 90                	xchg   ax,ax

c000af54 <Serial::~Serial()>:
c000af54:	83 ec 0c             	sub    esp,0xc
c000af57:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c000af5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af60:	89 10                	mov    DWORD PTR [eax],edx
c000af62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af66:	83 ec 0c             	sub    esp,0xc
c000af69:	50                   	push   eax
c000af6a:	e8 2d e9 ff ff       	call   c000989c <Device::~Device()>
c000af6f:	83 c4 10             	add    esp,0x10
c000af72:	90                   	nop
c000af73:	83 c4 0c             	add    esp,0xc
c000af76:	c3                   	ret    
c000af77:	90                   	nop

c000af78 <Serial::~Serial()>:
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	83 ec 0c             	sub    esp,0xc
c000af7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af82:	e8 cd ff ff ff       	call   c000af54 <Serial::~Serial()>
c000af87:	83 c4 10             	add    esp,0x10
c000af8a:	83 ec 08             	sub    esp,0x8
c000af8d:	68 58 01 00 00       	push   0x158
c000af92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af96:	e8 c0 22 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c000af9b:	83 c4 10             	add    esp,0x10
c000af9e:	83 c4 0c             	add    esp,0xc
c000afa1:	c3                   	ret    
c000afa2:	66 90                	xchg   ax,ax

c000afa4 <Timer::Timer(char const*)>:
c000afa4:	83 ec 0c             	sub    esp,0xc
c000afa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afab:	83 ec 08             	sub    esp,0x8
c000afae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afb2:	50                   	push   eax
c000afb3:	e8 44 eb ff ff       	call   c0009afc <Device::Device(char const*)>
c000afb8:	83 c4 10             	add    esp,0x10
c000afbb:	ba b4 36 02 c0       	mov    edx,0xc00236b4
c000afc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc4:	89 10                	mov    DWORD PTR [eax],edx
c000afc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afca:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000afd4:	90                   	nop
c000afd5:	83 c4 0c             	add    esp,0xc
c000afd8:	c3                   	ret    
c000afd9:	90                   	nop
c000afda:	66 90                	xchg   ax,ax

c000afdc <Timer::~Timer()>:
c000afdc:	83 ec 0c             	sub    esp,0xc
c000afdf:	ba b4 36 02 c0       	mov    edx,0xc00236b4
c000afe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe8:	89 10                	mov    DWORD PTR [eax],edx
c000afea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afee:	83 ec 0c             	sub    esp,0xc
c000aff1:	50                   	push   eax
c000aff2:	e8 a5 e8 ff ff       	call   c000989c <Device::~Device()>
c000aff7:	83 c4 10             	add    esp,0x10
c000affa:	90                   	nop
c000affb:	83 c4 0c             	add    esp,0xc
c000affe:	c3                   	ret    
c000afff:	90                   	nop

c000b000 <Timer::~Timer()>:
c000b000:	83 ec 0c             	sub    esp,0xc
c000b003:	83 ec 0c             	sub    esp,0xc
c000b006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b00a:	e8 cd ff ff ff       	call   c000afdc <Timer::~Timer()>
c000b00f:	83 c4 10             	add    esp,0x10
c000b012:	83 ec 08             	sub    esp,0x8
c000b015:	68 5c 01 00 00       	push   0x15c
c000b01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01e:	e8 38 22 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c000b023:	83 c4 10             	add    esp,0x10
c000b026:	83 c4 0c             	add    esp,0xc
c000b029:	c3                   	ret    

c000b02a <Timer::read()>:
c000b02a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b02e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b034:	c3                   	ret    

c000b035 <setupTimer(int)>:
c000b035:	53                   	push   ebx
c000b036:	83 ec 14             	sub    esp,0x14
c000b039:	68 5c 01 00 00       	push   0x15c
c000b03e:	e8 a1 4a 00 00       	call   c000fae4 <malloc>
c000b043:	89 04 24             	mov    DWORD PTR [esp],eax
c000b046:	89 c3                	mov    ebx,eax
c000b048:	e8 93 5f 01 00       	call   c0020fe0 <PIT::PIT()>
c000b04d:	58                   	pop    eax
c000b04e:	5a                   	pop    edx
c000b04f:	53                   	push   ebx
c000b050:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c000b056:	e8 3f e9 ff ff       	call   c000999a <Device::addChild(Device*)>
c000b05b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b05d:	6a 00                	push   0x0
c000b05f:	6a 00                	push   0x0
c000b061:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b065:	53                   	push   ebx
c000b066:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b069:	83 c4 28             	add    esp,0x28
c000b06c:	89 d8                	mov    eax,ebx
c000b06e:	5b                   	pop    ebx
c000b06f:	c3                   	ret    

c000b070 <timerHandler(unsigned int)>:
c000b070:	57                   	push   edi
c000b071:	31 d2                	xor    edx,edx
c000b073:	56                   	push   esi
c000b074:	53                   	push   ebx
c000b075:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b079:	01 1d 50 bb 02 c0    	add    DWORD PTR ds:0xc002bb50,ebx
c000b07f:	11 15 54 bb 02 c0    	adc    DWORD PTR ds:0xc002bb54,edx
c000b085:	80 3d d5 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d5,0x0
c000b08c:	75 12                	jne    c000b0a0 <timerHandler(unsigned int)+0x30>
c000b08e:	c7 44 24 10 3f 36 02 c0 	mov    DWORD PTR [esp+0x10],0xc002363f
c000b096:	5b                   	pop    ebx
c000b097:	5e                   	pop    esi
c000b098:	5f                   	pop    edi
c000b099:	e9 b0 be ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c000b09e:	66 90                	xchg   ax,ax
c000b0a0:	83 ec 0c             	sub    esp,0xc
c000b0a3:	68 55 36 02 c0       	push   0xc0023655
c000b0a8:	e8 a1 be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b0ad:	fa                   	cli    
c000b0ae:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000b0b4:	c7 04 24 40 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea40
c000b0bb:	e8 0c 6a 01 00       	call   c0021acc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b0c0:	83 c4 10             	add    esp,0x10
c000b0c3:	84 c0                	test   al,al
c000b0c5:	0f 85 a9 00 00 00    	jne    c000b174 <timerHandler(unsigned int)+0x104>
c000b0cb:	83 ec 0c             	sub    esp,0xc
c000b0ce:	68 40 ea 02 c0       	push   0xc002ea40
c000b0d3:	e8 10 6a 01 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b0d8:	83 c4 10             	add    esp,0x10
c000b0db:	89 c6                	mov    esi,eax
c000b0dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b0e0:	83 ec 0c             	sub    esp,0xc
c000b0e3:	68 40 ea 02 c0       	push   0xc002ea40
c000b0e8:	e8 fb 69 01 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b0ed:	c7 04 24 40 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea40
c000b0f4:	89 c7                	mov    edi,eax
c000b0f6:	e8 f5 69 01 00       	call   c0021af0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b0fb:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b0fe:	83 c4 10             	add    esp,0x10
c000b101:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b104:	a1 54 bb 02 c0       	mov    eax,ds:0xc002bb54
c000b109:	39 15 50 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb50,edx
c000b10f:	19 c8                	sbb    eax,ecx
c000b111:	72 21                	jb     c000b134 <timerHandler(unsigned int)+0xc4>
c000b113:	83 ec 0c             	sub    esp,0xc
c000b116:	57                   	push   edi
c000b117:	e8 cc bf 00 00       	call   c00170e8 <unblockTask(ThreadControlBlock*)>
c000b11c:	83 c4 10             	add    esp,0x10
c000b11f:	39 fe                	cmp    esi,edi
c000b121:	75 25                	jne    c000b148 <timerHandler(unsigned int)+0xd8>
c000b123:	83 ec 0c             	sub    esp,0xc
c000b126:	68 40 ea 02 c0       	push   0xc002ea40
c000b12b:	e8 b8 69 01 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b130:	89 c6                	mov    esi,eax
c000b132:	eb 10                	jmp    c000b144 <timerHandler(unsigned int)+0xd4>
c000b134:	51                   	push   ecx
c000b135:	51                   	push   ecx
c000b136:	57                   	push   edi
c000b137:	68 40 ea 02 c0       	push   0xc002ea40
c000b13c:	e8 6b 6a 01 00       	call   c0021bac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b141:	8d 76 00             	lea    esi,[esi+0x0]
c000b144:	83 c4 10             	add    esp,0x10
c000b147:	90                   	nop
c000b148:	83 ec 0c             	sub    esp,0xc
c000b14b:	68 40 ea 02 c0       	push   0xc002ea40
c000b150:	e8 77 69 01 00       	call   c0021acc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b155:	83 c4 10             	add    esp,0x10
c000b158:	84 c0                	test   al,al
c000b15a:	75 18                	jne    c000b174 <timerHandler(unsigned int)+0x104>
c000b15c:	83 ec 0c             	sub    esp,0xc
c000b15f:	68 40 ea 02 c0       	push   0xc002ea40
c000b164:	e8 7f 69 01 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b169:	83 c4 10             	add    esp,0x10
c000b16c:	39 f0                	cmp    eax,esi
c000b16e:	0f 85 6c ff ff ff    	jne    c000b0e0 <timerHandler(unsigned int)+0x70>
c000b174:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b179:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b17c:	85 c0                	test   eax,eax
c000b17e:	74 70                	je     c000b1f0 <timerHandler(unsigned int)+0x180>
c000b180:	80 3d d4 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d4,0x0
c000b187:	74 67                	je     c000b1f0 <timerHandler(unsigned int)+0x180>
c000b189:	52                   	push   edx
c000b18a:	52                   	push   edx
c000b18b:	50                   	push   eax
c000b18c:	68 5d 36 02 c0       	push   0xc002365d
c000b191:	e8 b8 bd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b196:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b19b:	83 c4 10             	add    esp,0x10
c000b19e:	81 78 38 e8 03 00 00 	cmp    DWORD PTR [eax+0x38],0x3e8
c000b1a5:	76 1d                	jbe    c000b1c4 <timerHandler(unsigned int)+0x154>
c000b1a7:	83 ec 0c             	sub    esp,0xc
c000b1aa:	68 6c 36 02 c0       	push   0xc002366c
c000b1af:	e8 9a bd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b1b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b1c3:	90                   	nop
c000b1c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b1ca:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b1cd:	89 c1                	mov    ecx,eax
c000b1cf:	29 d9                	sub    ecx,ebx
c000b1d1:	39 d8                	cmp    eax,ebx
c000b1d3:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b1d6:	77 18                	ja     c000b1f0 <timerHandler(unsigned int)+0x180>
c000b1d8:	83 ec 0c             	sub    esp,0xc
c000b1db:	68 9b 36 02 c0       	push   0xc002369b
c000b1e0:	e8 69 bd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b1e5:	e8 a6 bb 00 00       	call   c0016d90 <schedule()>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b1f0:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000b1f7:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000b1fe:	75 04                	jne    c000b204 <timerHandler(unsigned int)+0x194>
c000b200:	fb                   	sti    
c000b201:	8d 76 00             	lea    esi,[esi+0x0]
c000b204:	5b                   	pop    ebx
c000b205:	5e                   	pop    esi
c000b206:	5f                   	pop    edi
c000b207:	c3                   	ret    

c000b208 <VCache::VCache(PhysicalDisk*)>:
c000b208:	53                   	push   ebx
c000b209:	83 ec 18             	sub    esp,0x18
c000b20c:	ba 24 37 02 c0       	mov    edx,0xc0023724
c000b211:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b215:	89 10                	mov    DWORD PTR [eax],edx
c000b217:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b21b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b226:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b22d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b231:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b238:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b23f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b243:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b24a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b255:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b25c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b260:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b268:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b26f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b27a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b27e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b282:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b286:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b28a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b28e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b292:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b299:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b2a1:	83 ec 0c             	sub    esp,0xc
c000b2a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2a8:	e8 37 48 00 00       	call   c000fae4 <malloc>
c000b2ad:	83 c4 10             	add    esp,0x10
c000b2b0:	89 c3                	mov    ebx,eax
c000b2b2:	83 ec 0c             	sub    esp,0xc
c000b2b5:	53                   	push   ebx
c000b2b6:	e8 55 4b 00 00       	call   c000fe10 <Mutex::Mutex()>
c000b2bb:	83 c4 10             	add    esp,0x10
c000b2be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b2c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b2cd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b2d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b2db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2df:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b2e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2e9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b2ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2f0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b2f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b2fc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b300:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b303:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b30a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b30e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b312:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b318:	05 00 01 00 00       	add    eax,0x100
c000b31d:	c1 e0 04             	shl    eax,0x4
c000b320:	83 ec 0c             	sub    esp,0xc
c000b323:	50                   	push   eax
c000b324:	e8 bb 47 00 00       	call   c000fae4 <malloc>
c000b329:	83 c4 10             	add    esp,0x10
c000b32c:	89 c2                	mov    edx,eax
c000b32e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b332:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b335:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b339:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b340:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b344:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b348:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b34c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b352:	89 d0                	mov    eax,edx
c000b354:	c1 e0 02             	shl    eax,0x2
c000b357:	01 d0                	add    eax,edx
c000b359:	c1 e0 04             	shl    eax,0x4
c000b35c:	83 ec 0c             	sub    esp,0xc
c000b35f:	50                   	push   eax
c000b360:	e8 7f 47 00 00       	call   c000fae4 <malloc>
c000b365:	83 c4 10             	add    esp,0x10
c000b368:	89 c2                	mov    edx,eax
c000b36a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b36e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b371:	90                   	nop
c000b372:	83 c4 18             	add    esp,0x18
c000b375:	5b                   	pop    ebx
c000b376:	c3                   	ret    
c000b377:	90                   	nop

c000b378 <VCache::invalidateReadBuffer()>:
c000b378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b37c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b382:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b386:	c3                   	ret    
c000b387:	90                   	nop

c000b388 <VCache::writeWriteBuffer()>:
c000b388:	53                   	push   ebx
c000b389:	83 ec 08             	sub    esp,0x8
c000b38c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b390:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b394:	74 1e                	je     c000b3b4 <VCache::writeWriteBuffer()+0x2c>
c000b396:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b399:	83 ec 0c             	sub    esp,0xc
c000b39c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b39e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b3a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b3a4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b3aa:	50                   	push   eax
c000b3ab:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b3ae:	83 c4 20             	add    esp,0x20
c000b3b1:	8d 76 00             	lea    esi,[esi+0x0]
c000b3b4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b3bb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b3c2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b3c6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b3cd:	83 c4 08             	add    esp,0x8
c000b3d0:	5b                   	pop    ebx
c000b3d1:	c3                   	ret    
c000b3d2:	66 90                	xchg   ax,ax

c000b3d4 <VCache::~VCache()>:
c000b3d4:	83 ec 0c             	sub    esp,0xc
c000b3d7:	ba 24 37 02 c0       	mov    edx,0xc0023724
c000b3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e0:	89 10                	mov    DWORD PTR [eax],edx
c000b3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b3e9:	0f b6 c0             	movzx  eax,al
c000b3ec:	85 c0                	test   eax,eax
c000b3ee:	74 10                	je     c000b400 <VCache::~VCache()+0x2c>
c000b3f0:	83 ec 0c             	sub    esp,0xc
c000b3f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f7:	e8 8c ff ff ff       	call   c000b388 <VCache::writeWriteBuffer()>
c000b3fc:	83 c4 10             	add    esp,0x10
c000b3ff:	90                   	nop
c000b400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b404:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b407:	83 ec 0c             	sub    esp,0xc
c000b40a:	50                   	push   eax
c000b40b:	e8 e4 46 00 00       	call   c000faf4 <free>
c000b410:	83 c4 10             	add    esp,0x10
c000b413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b417:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b41a:	83 ec 0c             	sub    esp,0xc
c000b41d:	50                   	push   eax
c000b41e:	e8 d1 46 00 00       	call   c000faf4 <free>
c000b423:	83 c4 10             	add    esp,0x10
c000b426:	90                   	nop
c000b427:	83 c4 0c             	add    esp,0xc
c000b42a:	c3                   	ret    
c000b42b:	90                   	nop

c000b42c <VCache::~VCache()>:
c000b42c:	83 ec 0c             	sub    esp,0xc
c000b42f:	83 ec 0c             	sub    esp,0xc
c000b432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b436:	e8 99 ff ff ff       	call   c000b3d4 <VCache::~VCache()>
c000b43b:	83 c4 10             	add    esp,0x10
c000b43e:	83 ec 08             	sub    esp,0x8
c000b441:	6a 44                	push   0x44
c000b443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b447:	e8 0f 1e 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c000b44c:	83 c4 10             	add    esp,0x10
c000b44f:	83 c4 0c             	add    esp,0xc
c000b452:	c3                   	ret    
c000b453:	90                   	nop

c000b454 <VCache::write(unsigned long long, int, void*)>:
c000b454:	55                   	push   ebp
c000b455:	57                   	push   edi
c000b456:	56                   	push   esi
c000b457:	53                   	push   ebx
c000b458:	83 ec 1c             	sub    esp,0x1c
c000b45b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b45f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b463:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b467:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b46b:	e8 58 b6 00 00       	call   c0016ac8 <KeDisablePreemption()>
c000b470:	b9 00 10 00 00       	mov    ecx,0x1000
c000b475:	50                   	push   eax
c000b476:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b479:	0f af c3             	imul   eax,ebx
c000b47c:	05 ff 0f 00 00       	add    eax,0xfff
c000b481:	99                   	cdq    
c000b482:	f7 f9                	idiv   ecx
c000b484:	50                   	push   eax
c000b485:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b489:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b48f:	e8 a8 8b 00 00       	call   c001403c <VAS::canLockPages(unsigned long, int)>
c000b494:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b498:	83 c4 10             	add    esp,0x10
c000b49b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4a0:	74 2a                	je     c000b4cc <VCache::write(unsigned long long, int, void*)+0x78>
c000b4a2:	50                   	push   eax
c000b4a3:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4ab:	0f af c3             	imul   eax,ebx
c000b4ae:	05 ff 0f 00 00       	add    eax,0xfff
c000b4b3:	99                   	cdq    
c000b4b4:	f7 f9                	idiv   ecx
c000b4b6:	50                   	push   eax
c000b4b7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4bb:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b4c1:	e8 70 8f 00 00       	call   c0014436 <VAS::lockPages(unsigned long, int)>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	8d 76 00             	lea    esi,[esi+0x0]
c000b4cc:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b4d0:	74 0e                	je     c000b4e0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b4d2:	83 ec 0c             	sub    esp,0xc
c000b4d5:	55                   	push   ebp
c000b4d6:	e8 9d fe ff ff       	call   c000b378 <VCache::invalidateReadBuffer()>
c000b4db:	83 c4 10             	add    esp,0x10
c000b4de:	66 90                	xchg   ax,ax
c000b4e0:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b4e4:	74 72                	je     c000b558 <VCache::write(unsigned long long, int, void*)+0x104>
c000b4e6:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b4e9:	89 c8                	mov    eax,ecx
c000b4eb:	99                   	cdq    
c000b4ec:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b4ef:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b4f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b502:	31 f0                	xor    eax,esi
c000b504:	31 fa                	xor    edx,edi
c000b506:	09 d0                	or     eax,edx
c000b508:	75 42                	jne    c000b54c <VCache::write(unsigned long long, int, void*)+0xf8>
c000b50a:	83 fb 01             	cmp    ebx,0x1
c000b50d:	75 3d                	jne    c000b54c <VCache::write(unsigned long long, int, void*)+0xf8>
c000b50f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b512:	89 cf                	mov    edi,ecx
c000b514:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b518:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b51e:	0f af f8             	imul   edi,eax
c000b521:	89 c1                	mov    ecx,eax
c000b523:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b526:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b528:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b52b:	40                   	inc    eax
c000b52c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b52f:	83 f8 50             	cmp    eax,0x50
c000b532:	0f 85 a8 00 00 00    	jne    c000b5e0 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b538:	83 ec 0c             	sub    esp,0xc
c000b53b:	55                   	push   ebp
c000b53c:	e8 47 fe ff ff       	call   c000b388 <VCache::writeWriteBuffer()>
c000b541:	83 c4 10             	add    esp,0x10
c000b544:	e9 97 00 00 00       	jmp    c000b5e0 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b549:	8d 76 00             	lea    esi,[esi+0x0]
c000b54c:	83 ec 0c             	sub    esp,0xc
c000b54f:	55                   	push   ebp
c000b550:	e8 33 fe ff ff       	call   c000b388 <VCache::writeWriteBuffer()>
c000b555:	83 c4 10             	add    esp,0x10
c000b558:	83 fb 4f             	cmp    ebx,0x4f
c000b55b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b55e:	7f 20                	jg     c000b580 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b560:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b563:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b567:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b56a:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b56d:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b570:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b574:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b57a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b57c:	eb 62                	jmp    c000b5e0 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b57e:	66 90                	xchg   ax,ax
c000b580:	83 ec 0c             	sub    esp,0xc
c000b583:	8b 10                	mov    edx,DWORD PTR [eax]
c000b585:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b589:	53                   	push   ebx
c000b58a:	57                   	push   edi
c000b58b:	56                   	push   esi
c000b58c:	50                   	push   eax
c000b58d:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b590:	83 c4 20             	add    esp,0x20
c000b593:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b598:	89 c6                	mov    esi,eax
c000b59a:	74 28                	je     c000b5c4 <VCache::write(unsigned long long, int, void*)+0x170>
c000b59c:	52                   	push   edx
c000b59d:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5a2:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5a6:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5ac:	99                   	cdq    
c000b5ad:	f7 f9                	idiv   ecx
c000b5af:	50                   	push   eax
c000b5b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5b4:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b5ba:	e8 b9 8a 00 00       	call   c0014078 <VAS::unlockPages(unsigned long, int)>
c000b5bf:	83 c4 10             	add    esp,0x10
c000b5c2:	66 90                	xchg   ax,ax
c000b5c4:	e8 27 b5 00 00       	call   c0016af0 <KeRestorePreemption()>
c000b5c9:	85 f6                	test   esi,esi
c000b5cb:	74 4b                	je     c000b618 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5cd:	83 ec 0c             	sub    esp,0xc
c000b5d0:	68 dc 36 02 c0       	push   0xc00236dc
c000b5d5:	e8 74 b9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b5da:	83 c4 10             	add    esp,0x10
c000b5dd:	eb 39                	jmp    c000b618 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5df:	90                   	nop
c000b5e0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5e5:	74 29                	je     c000b610 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b5e7:	50                   	push   eax
c000b5e8:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5ed:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5f1:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5f7:	99                   	cdq    
c000b5f8:	f7 f9                	idiv   ecx
c000b5fa:	50                   	push   eax
c000b5fb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5ff:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b605:	e8 6e 8a 00 00       	call   c0014078 <VAS::unlockPages(unsigned long, int)>
c000b60a:	83 c4 10             	add    esp,0x10
c000b60d:	8d 76 00             	lea    esi,[esi+0x0]
c000b610:	e8 db b4 00 00       	call   c0016af0 <KeRestorePreemption()>
c000b615:	31 f6                	xor    esi,esi
c000b617:	90                   	nop
c000b618:	83 c4 1c             	add    esp,0x1c
c000b61b:	89 f0                	mov    eax,esi
c000b61d:	5b                   	pop    ebx
c000b61e:	5e                   	pop    esi
c000b61f:	5f                   	pop    edi
c000b620:	5d                   	pop    ebp
c000b621:	c3                   	ret    

c000b622 <VCache::read(unsigned long long, int, void*)>:
c000b622:	55                   	push   ebp
c000b623:	bd 00 10 00 00       	mov    ebp,0x1000
c000b628:	57                   	push   edi
c000b629:	56                   	push   esi
c000b62a:	53                   	push   ebx
c000b62b:	83 ec 2c             	sub    esp,0x2c
c000b62e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b632:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b636:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b63a:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b63e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b642:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b646:	e8 7d b4 00 00       	call   c0016ac8 <KeDisablePreemption()>
c000b64b:	50                   	push   eax
c000b64c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b64f:	0f af c6             	imul   eax,esi
c000b652:	05 ff 0f 00 00       	add    eax,0xfff
c000b657:	99                   	cdq    
c000b658:	f7 fd                	idiv   ebp
c000b65a:	50                   	push   eax
c000b65b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b65f:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b665:	e8 d2 89 00 00       	call   c001403c <VAS::canLockPages(unsigned long, int)>
c000b66a:	83 c4 10             	add    esp,0x10
c000b66d:	84 c0                	test   al,al
c000b66f:	89 c7                	mov    edi,eax
c000b671:	74 25                	je     c000b698 <VCache::read(unsigned long long, int, void*)+0x76>
c000b673:	50                   	push   eax
c000b674:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b677:	0f af c6             	imul   eax,esi
c000b67a:	05 ff 0f 00 00       	add    eax,0xfff
c000b67f:	99                   	cdq    
c000b680:	f7 fd                	idiv   ebp
c000b682:	50                   	push   eax
c000b683:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b687:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b68d:	e8 a4 8d 00 00       	call   c0014436 <VAS::lockPages(unsigned long, int)>
c000b692:	83 c4 10             	add    esp,0x10
c000b695:	8d 76 00             	lea    esi,[esi+0x0]
c000b698:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b69c:	74 0e                	je     c000b6ac <VCache::read(unsigned long long, int, void*)+0x8a>
c000b69e:	83 ec 0c             	sub    esp,0xc
c000b6a1:	53                   	push   ebx
c000b6a2:	e8 e1 fc ff ff       	call   c000b388 <VCache::writeWriteBuffer()>
c000b6a7:	83 c4 10             	add    esp,0x10
c000b6aa:	66 90                	xchg   ax,ax
c000b6ac:	83 fe 01             	cmp    esi,0x1
c000b6af:	0f 85 fb 00 00 00    	jne    c000b7b0 <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6b5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b6b8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000b6bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6c3:	0f 85 e7 00 00 00    	jne    c000b7b0 <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6c9:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000b6cc:	89 ee                	mov    esi,ebp
c000b6ce:	f7 de                	neg    esi
c000b6d0:	89 f0                	mov    eax,esi
c000b6d2:	c1 f8 1f             	sar    eax,0x1f
c000b6d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b6dd:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000b6e1:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b6e5:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b6e9:	89 ca                	mov    edx,ecx
c000b6eb:	89 f9                	mov    ecx,edi
c000b6ed:	0f b6 f9             	movzx  edi,cl
c000b6f0:	89 f0                	mov    eax,esi
c000b6f2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000b6f6:	74 0c                	je     c000b704 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b6f8:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b6fb:	75 07                	jne    c000b704 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b6fd:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000b700:	74 56                	je     c000b758 <VCache::read(unsigned long long, int, void*)+0x136>
c000b702:	66 90                	xchg   ax,ax
c000b704:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b708:	83 ec 0c             	sub    esp,0xc
c000b70b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b70e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b712:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b715:	8b 37                	mov    esi,DWORD PTR [edi]
c000b717:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b71a:	55                   	push   ebp
c000b71b:	52                   	push   edx
c000b71c:	50                   	push   eax
c000b71d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b721:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b724:	83 c4 20             	add    esp,0x20
c000b727:	85 c0                	test   eax,eax
c000b729:	89 c5                	mov    ebp,eax
c000b72b:	74 2b                	je     c000b758 <VCache::read(unsigned long long, int, void*)+0x136>
c000b72d:	83 ec 0c             	sub    esp,0xc
c000b730:	68 f4 36 02 c0       	push   0xc00236f4
c000b735:	e8 14 b8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b73a:	83 c4 10             	add    esp,0x10
c000b73d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b742:	0f 84 bc 00 00 00    	je     c000b804 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b748:	56                   	push   esi
c000b749:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b74c:	05 ff 0f 00 00       	add    eax,0xfff
c000b751:	e9 92 00 00 00       	jmp    c000b7e8 <VCache::read(unsigned long long, int, void*)+0x1c6>
c000b756:	66 90                	xchg   ax,ax
c000b758:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b75b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000b75f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b765:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b768:	8d 70 ff             	lea    esi,[eax-0x1]
c000b76b:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b76f:	0f af f1             	imul   esi,ecx
c000b772:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b775:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b777:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b77c:	74 26                	je     c000b7a4 <VCache::read(unsigned long long, int, void*)+0x182>
c000b77e:	51                   	push   ecx
c000b77f:	b9 00 10 00 00       	mov    ecx,0x1000
c000b784:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b787:	05 ff 0f 00 00       	add    eax,0xfff
c000b78c:	99                   	cdq    
c000b78d:	f7 f9                	idiv   ecx
c000b78f:	50                   	push   eax
c000b790:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b794:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b79a:	e8 d9 88 00 00       	call   c0014078 <VAS::unlockPages(unsigned long, int)>
c000b79f:	83 c4 10             	add    esp,0x10
c000b7a2:	66 90                	xchg   ax,ax
c000b7a4:	e8 47 b3 00 00       	call   c0016af0 <KeRestorePreemption()>
c000b7a9:	31 ed                	xor    ebp,ebp
c000b7ab:	eb 5f                	jmp    c000b80c <VCache::read(unsigned long long, int, void*)+0x1ea>
c000b7ad:	8d 76 00             	lea    esi,[esi+0x0]
c000b7b0:	83 ec 0c             	sub    esp,0xc
c000b7b3:	53                   	push   ebx
c000b7b4:	e8 bf fb ff ff       	call   c000b378 <VCache::invalidateReadBuffer()>
c000b7b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7bc:	5a                   	pop    edx
c000b7bd:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7bf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b7c3:	56                   	push   esi
c000b7c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7cc:	50                   	push   eax
c000b7cd:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b7d0:	83 c4 20             	add    esp,0x20
c000b7d3:	89 c5                	mov    ebp,eax
c000b7d5:	89 f8                	mov    eax,edi
c000b7d7:	84 c0                	test   al,al
c000b7d9:	74 29                	je     c000b804 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b7db:	50                   	push   eax
c000b7dc:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b7e0:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b7e6:	66 90                	xchg   ax,ax
c000b7e8:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7ed:	99                   	cdq    
c000b7ee:	f7 f9                	idiv   ecx
c000b7f0:	50                   	push   eax
c000b7f1:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b7f5:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b7fb:	e8 78 88 00 00       	call   c0014078 <VAS::unlockPages(unsigned long, int)>
c000b800:	83 c4 10             	add    esp,0x10
c000b803:	90                   	nop
c000b804:	e8 e7 b2 00 00       	call   c0016af0 <KeRestorePreemption()>
c000b809:	8d 76 00             	lea    esi,[esi+0x0]
c000b80c:	83 c4 2c             	add    esp,0x2c
c000b80f:	89 e8                	mov    eax,ebp
c000b811:	5b                   	pop    ebx
c000b812:	5e                   	pop    esi
c000b813:	5f                   	pop    edi
c000b814:	5d                   	pop    ebp
c000b815:	c3                   	ret    

c000b816 <Video::putrect(int, int, int, int, unsigned int)>:
c000b816:	55                   	push   ebp
c000b817:	57                   	push   edi
c000b818:	56                   	push   esi
c000b819:	53                   	push   ebx
c000b81a:	83 ec 1c             	sub    esp,0x1c
c000b81d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b821:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b825:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b829:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b82d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b831:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b835:	01 df                	add    edi,ebx
c000b837:	39 fb                	cmp    ebx,edi
c000b839:	7d 1f                	jge    c000b85a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b83b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b83f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b843:	7d 12                	jge    c000b857 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b845:	8b 16                	mov    edx,DWORD PTR [esi]
c000b847:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b84b:	53                   	push   ebx
c000b84c:	55                   	push   ebp
c000b84d:	45                   	inc    ebp
c000b84e:	56                   	push   esi
c000b84f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b852:	83 c4 10             	add    esp,0x10
c000b855:	eb e8                	jmp    c000b83f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b857:	43                   	inc    ebx
c000b858:	eb dd                	jmp    c000b837 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b85a:	83 c4 1c             	add    esp,0x1c
c000b85d:	5b                   	pop    ebx
c000b85e:	5e                   	pop    esi
c000b85f:	5f                   	pop    edi
c000b860:	5d                   	pop    ebp
c000b861:	c3                   	ret    

c000b862 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b862:	55                   	push   ebp
c000b863:	57                   	push   edi
c000b864:	31 ff                	xor    edi,edi
c000b866:	56                   	push   esi
c000b867:	53                   	push   ebx
c000b868:	83 ec 1c             	sub    esp,0x1c
c000b86b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b86f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b873:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b87a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b87f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b883:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b887:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b88b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b88e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b892:	01 f9                	add    ecx,edi
c000b894:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b898:	7d 2f                	jge    c000b8c9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b89a:	31 f6                	xor    esi,esi
c000b89c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8a0:	01 f2                	add    edx,esi
c000b8a2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8a6:	7d 1a                	jge    c000b8c2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b8a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b8ab:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b8ae:	46                   	inc    esi
c000b8af:	51                   	push   ecx
c000b8b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b8b4:	52                   	push   edx
c000b8b5:	55                   	push   ebp
c000b8b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8b9:	83 c4 10             	add    esp,0x10
c000b8bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b8c0:	eb da                	jmp    c000b89c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b8c2:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b8c6:	47                   	inc    edi
c000b8c7:	eb c5                	jmp    c000b88e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b8c9:	83 c4 1c             	add    esp,0x1c
c000b8cc:	5b                   	pop    ebx
c000b8cd:	5e                   	pop    esi
c000b8ce:	5f                   	pop    edi
c000b8cf:	5d                   	pop    ebp
c000b8d0:	c3                   	ret    
c000b8d1:	90                   	nop

c000b8d2 <Video::blit(unsigned int*, int, int, int, int)>:
c000b8d2:	55                   	push   ebp
c000b8d3:	ba 00 00 00 00       	mov    edx,0x0
c000b8d8:	57                   	push   edi
c000b8d9:	56                   	push   esi
c000b8da:	53                   	push   ebx
c000b8db:	83 ec 1c             	sub    esp,0x1c
c000b8de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b8e2:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b8e6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8ea:	85 c0                	test   eax,eax
c000b8ec:	0f 49 d0             	cmovns edx,eax
c000b8ef:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000b8f6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000b8fa:	89 eb                	mov    ebx,ebp
c000b8fc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b900:	01 ea                	add    edx,ebp
c000b902:	39 da                	cmp    edx,ebx
c000b904:	7e 54                	jle    c000b95a <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b906:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b90c:	7c 4c                	jl     c000b95a <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b90e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b912:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b916:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b91a:	01 c1                	add    ecx,eax
c000b91c:	39 f9                	cmp    ecx,edi
c000b91e:	7e 2f                	jle    c000b94f <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000b920:	83 c2 04             	add    edx,0x4
c000b923:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b929:	7c 21                	jl     c000b94c <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000b92b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b92f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b931:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000b934:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b938:	55                   	push   ebp
c000b939:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b93d:	56                   	push   esi
c000b93e:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b941:	83 c4 10             	add    esp,0x10
c000b944:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b948:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b94c:	47                   	inc    edi
c000b94d:	eb c7                	jmp    c000b916 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000b94f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000b953:	43                   	inc    ebx
c000b954:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000b958:	eb a2                	jmp    c000b8fc <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000b95a:	83 c4 1c             	add    esp,0x1c
c000b95d:	5b                   	pop    ebx
c000b95e:	5e                   	pop    esi
c000b95f:	5f                   	pop    edi
c000b960:	5d                   	pop    ebp
c000b961:	c3                   	ret    

c000b962 <Video::clearScreen(unsigned int)>:
c000b962:	57                   	push   edi
c000b963:	56                   	push   esi
c000b964:	53                   	push   ebx
c000b965:	31 db                	xor    ebx,ebx
c000b967:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b96b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b971:	7e 1f                	jle    c000b992 <Video::clearScreen(unsigned int)+0x30>
c000b973:	31 ff                	xor    edi,edi
c000b975:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b97b:	7e 12                	jle    c000b98f <Video::clearScreen(unsigned int)+0x2d>
c000b97d:	8b 06                	mov    eax,DWORD PTR [esi]
c000b97f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b983:	53                   	push   ebx
c000b984:	57                   	push   edi
c000b985:	47                   	inc    edi
c000b986:	56                   	push   esi
c000b987:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b98a:	83 c4 10             	add    esp,0x10
c000b98d:	eb e6                	jmp    c000b975 <Video::clearScreen(unsigned int)+0x13>
c000b98f:	43                   	inc    ebx
c000b990:	eb d9                	jmp    c000b96b <Video::clearScreen(unsigned int)+0x9>
c000b992:	5b                   	pop    ebx
c000b993:	5e                   	pop    esi
c000b994:	5f                   	pop    edi
c000b995:	c3                   	ret    

c000b996 <Video::putpixel(int, int, unsigned int)>:
c000b996:	c7 44 24 04 2c 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc002372c
c000b99e:	e9 87 44 00 00       	jmp    c000fe2a <KePanic(char const*)>
c000b9a3:	90                   	nop

c000b9a4 <Video::readPixelApprox(int, int)>:
c000b9a4:	83 ec 18             	sub    esp,0x18
c000b9a7:	68 4d 37 02 c0       	push   0xc002374d
c000b9ac:	e8 79 44 00 00       	call   c000fe2a <KePanic(char const*)>
c000b9b1:	31 c0                	xor    eax,eax
c000b9b3:	83 c4 1c             	add    esp,0x1c
c000b9b6:	c3                   	ret    
c000b9b7:	90                   	nop

c000b9b8 <Video::Video(char const*)>:
c000b9b8:	83 ec 0c             	sub    esp,0xc
c000b9bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9bf:	83 ec 08             	sub    esp,0x8
c000b9c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9c6:	50                   	push   eax
c000b9c7:	e8 30 e1 ff ff       	call   c0009afc <Device::Device(char const*)>
c000b9cc:	83 c4 10             	add    esp,0x10
c000b9cf:	ba f0 37 02 c0       	mov    edx,0xc00237f0
c000b9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9d8:	89 10                	mov    DWORD PTR [eax],edx
c000b9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9de:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b9e8:	90                   	nop
c000b9e9:	83 c4 0c             	add    esp,0xc
c000b9ec:	c3                   	ret    
c000b9ed:	90                   	nop

c000b9ee <Video::~Video()>:
c000b9ee:	83 ec 0c             	sub    esp,0xc
c000b9f1:	ba f0 37 02 c0       	mov    edx,0xc00237f0
c000b9f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fa:	89 10                	mov    DWORD PTR [eax],edx
c000b9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba00:	83 ec 0c             	sub    esp,0xc
c000ba03:	50                   	push   eax
c000ba04:	e8 93 de ff ff       	call   c000989c <Device::~Device()>
c000ba09:	83 c4 10             	add    esp,0x10
c000ba0c:	90                   	nop
c000ba0d:	83 c4 0c             	add    esp,0xc
c000ba10:	c3                   	ret    
c000ba11:	90                   	nop

c000ba12 <Video::~Video()>:
c000ba12:	83 ec 0c             	sub    esp,0xc
c000ba15:	83 ec 0c             	sub    esp,0xc
c000ba18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba1c:	e8 cd ff ff ff       	call   c000b9ee <Video::~Video()>
c000ba21:	83 c4 10             	add    esp,0x10
c000ba24:	83 ec 08             	sub    esp,0x8
c000ba27:	68 64 01 00 00       	push   0x164
c000ba2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba30:	e8 26 18 00 00       	call   c000d25b <operator delete(void*, unsigned long)>
c000ba35:	83 c4 10             	add    esp,0x10
c000ba38:	83 c4 0c             	add    esp,0xc
c000ba3b:	c3                   	ret    

c000ba3c <Video::isMonochrome()>:
c000ba3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba40:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba46:	c3                   	ret    
c000ba47:	90                   	nop

c000ba48 <Video::getWidth()>:
c000ba48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba4c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba52:	c3                   	ret    
c000ba53:	90                   	nop

c000ba54 <Video::getHeight()>:
c000ba54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba58:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba5e:	c3                   	ret    
c000ba5f:	90                   	nop

c000ba60 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba60:	55                   	push   ebp
c000ba61:	57                   	push   edi
c000ba62:	56                   	push   esi
c000ba63:	53                   	push   ebx
c000ba64:	83 ec 2c             	sub    esp,0x2c
c000ba67:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ba6b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ba6f:	83 f8 01             	cmp    eax,0x1
c000ba72:	19 c9                	sbb    ecx,ecx
c000ba74:	31 db                	xor    ebx,ebx
c000ba76:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ba7a:	89 ce                	mov    esi,ecx
c000ba7c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ba84:	f7 d6                	not    esi
c000ba86:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ba8c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ba90:	01 d8                	add    eax,ebx
c000ba92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ba96:	57                   	push   edi
c000ba97:	e8 b8 ff ff ff       	call   c000ba54 <Video::getHeight()>
c000ba9c:	59                   	pop    ecx
c000ba9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000baa1:	7e 70                	jle    c000bb13 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000baa3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000baa7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000baab:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000baae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bab2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bab6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000babd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac1:	89 e8                	mov    eax,ebp
c000bac3:	83 c0 20             	add    eax,0x20
c000bac6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000baca:	57                   	push   edi
c000bacb:	e8 78 ff ff ff       	call   c000ba48 <Video::getWidth()>
c000bad0:	5a                   	pop    edx
c000bad1:	39 c5                	cmp    ebp,eax
c000bad3:	7d 34                	jge    c000bb09 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bad5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bada:	74 05                	je     c000bae1 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000badc:	8b 07                	mov    eax,DWORD PTR [edi]
c000bade:	56                   	push   esi
c000badf:	eb 0d                	jmp    c000baee <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bae1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bae6:	74 12                	je     c000bafa <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bae8:	8b 07                	mov    eax,DWORD PTR [edi]
c000baea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000baf2:	55                   	push   ebp
c000baf3:	57                   	push   edi
c000baf4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bafe:	45                   	inc    ebp
c000baff:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb03:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000bb07:	75 c1                	jne    c000baca <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb09:	43                   	inc    ebx
c000bb0a:	83 fb 20             	cmp    ebx,0x20
c000bb0d:	0f 85 79 ff ff ff    	jne    c000ba8c <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb13:	83 c4 2c             	add    esp,0x2c
c000bb16:	5b                   	pop    ebx
c000bb17:	5e                   	pop    esi
c000bb18:	5f                   	pop    edi
c000bb19:	5d                   	pop    ebp
c000bb1a:	c3                   	ret    
c000bb1b:	90                   	nop

c000bb1c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb1c:	55                   	push   ebp
c000bb1d:	57                   	push   edi
c000bb1e:	56                   	push   esi
c000bb1f:	53                   	push   ebx
c000bb20:	83 ec 48             	sub    esp,0x48
c000bb23:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb27:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb2b:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb2f:	c1 e0 08             	shl    eax,0x8
c000bb32:	01 d0                	add    eax,edx
c000bb34:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb3c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb40:	c1 e0 08             	shl    eax,0x8
c000bb43:	01 d0                	add    eax,edx
c000bb45:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb4d:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000bb52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb5a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb61:	50                   	push   eax
c000bb62:	e8 7d 3f 00 00       	call   c000fae4 <malloc>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	85 c0                	test   eax,eax
c000bb6c:	89 c5                	mov    ebp,eax
c000bb6e:	75 10                	jne    c000bb80 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000bb70:	83 ec 0c             	sub    esp,0xc
c000bb73:	68 78 37 02 c0       	push   0xc0023778
c000bb78:	e8 ad 42 00 00       	call   c000fe2a <KePanic(char const*)>
c000bb7d:	83 c4 10             	add    esp,0x10
c000bb80:	52                   	push   edx
c000bb81:	bf 12 00 00 00       	mov    edi,0x12
c000bb86:	52                   	push   edx
c000bb87:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bb8b:	50                   	push   eax
c000bb8c:	68 88 37 02 c0       	push   0xc0023788
c000bb91:	e8 b8 b3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000bb96:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bb99:	83 e0 20             	and    eax,0x20
c000bb9c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000bba0:	85 c0                	test   eax,eax
c000bba2:	59                   	pop    ecx
c000bba3:	0f 94 c0             	sete   al
c000bba6:	0f b6 c0             	movzx  eax,al
c000bba9:	5e                   	pop    esi
c000bbaa:	50                   	push   eax
c000bbab:	68 92 37 02 c0       	push   0xc0023792
c000bbb0:	e8 99 b3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000bbb5:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000bbb9:	83 c4 10             	add    esp,0x10
c000bbbc:	85 c0                	test   eax,eax
c000bbbe:	89 c2                	mov    edx,eax
c000bbc0:	74 11                	je     c000bbd3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000bbc2:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000bbc6:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bbca:	c1 ff 03             	sar    edi,0x3
c000bbcd:	0f af f9             	imul   edi,ecx
c000bbd0:	83 c7 12             	add    edi,0x12
c000bbd3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbd8:	74 07                	je     c000bbe1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000bbda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bbdf:	75 12                	jne    c000bbf3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000bbe1:	83 ec 0c             	sub    esp,0xc
c000bbe4:	68 a0 37 02 c0       	push   0xc00237a0
c000bbe9:	e8 60 b3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000bbee:	e9 aa 02 00 00       	jmp    c000be9d <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000bbf3:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bbf7:	83 f9 02             	cmp    ecx,0x2
c000bbfa:	74 0e                	je     c000bc0a <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000bbfc:	83 f9 0a             	cmp    ecx,0xa
c000bbff:	0f 84 d1 00 00 00    	je     c000bcd6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000bc05:	e9 7e 02 00 00       	jmp    c000be88 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000bc0a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc0f:	75 0e                	jne    c000bc1f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc11:	84 d2                	test   dl,dl
c000bc13:	75 0a                	jne    c000bc1f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc15:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc18:	83 e8 18             	sub    eax,0x18
c000bc1b:	a8 f7                	test   al,0xf7
c000bc1d:	74 0d                	je     c000bc2c <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000bc1f:	83 ec 0c             	sub    esp,0xc
c000bc22:	68 b5 37 02 c0       	push   0xc00237b5
c000bc27:	e9 64 02 00 00       	jmp    c000be90 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bc2c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc34:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000bc39:	31 c0                	xor    eax,eax
c000bc3b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000bc3f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bc47:	89 c6                	mov    esi,eax
c000bc49:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bc4e:	75 15                	jne    c000bc65 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc50:	99                   	cdq    
c000bc51:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bc55:	85 d2                	test   edx,edx
c000bc57:	75 0c                	jne    c000bc65 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc59:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000bc5d:	29 c6                	sub    esi,eax
c000bc5f:	4e                   	dec    esi
c000bc60:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000bc65:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bc69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc71:	75 0c                	jne    c000bc7f <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000bc73:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000bc78:	c1 e2 18             	shl    edx,0x18
c000bc7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc7f:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000bc84:	8d 46 01             	lea    eax,[esi+0x1]
c000bc87:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000bc8b:	c1 e1 10             	shl    ecx,0x10
c000bc8e:	89 ca                	mov    edx,ecx
c000bc90:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000bc95:	c1 e1 08             	shl    ecx,0x8
c000bc98:	09 d1                	or     ecx,edx
c000bc9a:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bc9e:	09 d1                	or     ecx,edx
c000bca0:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000bca4:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000bca8:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bcac:	c1 fa 03             	sar    edx,0x3
c000bcaf:	01 d7                	add    edi,edx
c000bcb1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bcb5:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000bcb9:	7e 04                	jle    c000bcbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000bcbb:	89 c6                	mov    esi,eax
c000bcbd:	eb 8a                	jmp    c000bc49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000bcbf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bcc3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcc7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bccb:	0f 8f 6e ff ff ff    	jg     c000bc3f <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000bcd1:	e9 ce 01 00 00       	jmp    c000bea4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bcd6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bcdb:	75 0e                	jne    c000bceb <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bcdd:	85 c0                	test   eax,eax
c000bcdf:	75 0a                	jne    c000bceb <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bce1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bce4:	83 e8 18             	sub    eax,0x18
c000bce7:	a8 f7                	test   al,0xf7
c000bce9:	74 0d                	je     c000bcf8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000bceb:	83 ec 0c             	sub    esp,0xc
c000bcee:	68 c3 37 02 c0       	push   0xc00237c3
c000bcf3:	e9 98 01 00 00       	jmp    c000be90 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bcf8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bd00:	31 c9                	xor    ecx,ecx
c000bd02:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bd0a:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000bd0e:	0f 8d 90 01 00 00    	jge    c000bea4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd14:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd18:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000bd1c:	0f 8e 82 01 00 00    	jle    c000bea4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd22:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bd26:	8d 77 01             	lea    esi,[edi+0x1]
c000bd29:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd2d:	83 fa 7f             	cmp    edx,0x7f
c000bd30:	89 d0                	mov    eax,edx
c000bd32:	0f 8e a3 00 00 00    	jle    c000bddb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000bd38:	83 e0 7f             	and    eax,0x7f
c000bd3b:	31 d2                	xor    edx,edx
c000bd3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd41:	40                   	inc    eax
c000bd42:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd46:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bd4a:	75 08                	jne    c000bd54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000bd4c:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000bd51:	c1 e2 18             	shl    edx,0x18
c000bd54:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000bd59:	c1 e0 10             	shl    eax,0x10
c000bd5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd60:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000bd65:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000bd69:	c1 e0 08             	shl    eax,0x8
c000bd6c:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000bd70:	09 f8                	or     eax,edi
c000bd72:	31 ff                	xor    edi,edi
c000bd74:	09 d0                	or     eax,edx
c000bd76:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bd7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd83:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000bd88:	75 1d                	jne    c000bda7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bd8a:	89 c8                	mov    eax,ecx
c000bd8c:	99                   	cdq    
c000bd8d:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bd91:	85 d2                	test   edx,edx
c000bd93:	75 12                	jne    c000bda7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bd95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd99:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000bd9d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bda1:	49                   	dec    ecx
c000bda2:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000bda7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bdab:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdae:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000bdb2:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000bdb6:	8d 47 01             	lea    eax,[edi+0x1]
c000bdb9:	7e 06                	jle    c000bdc1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000bdbb:	89 c7                	mov    edi,eax
c000bdbd:	89 d1                	mov    ecx,edx
c000bdbf:	eb c2                	jmp    c000bd83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000bdc1:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bdc5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000bdc9:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000bdcd:	c1 f8 03             	sar    eax,0x3
c000bdd0:	01 c6                	add    esi,eax
c000bdd2:	89 d1                	mov    ecx,edx
c000bdd4:	89 f7                	mov    edi,esi
c000bdd6:	e9 2f ff ff ff       	jmp    c000bd0a <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000bddb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bde3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bde7:	40                   	inc    eax
c000bde8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bdf1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bdf5:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000bdfa:	75 1d                	jne    c000be19 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000bdfc:	89 c8                	mov    eax,ecx
c000bdfe:	99                   	cdq    
c000bdff:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000be03:	85 d2                	test   edx,edx
c000be05:	75 12                	jne    c000be19 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be0b:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000be0f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000be13:	49                   	dec    ecx
c000be14:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000be19:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be1d:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be25:	75 0c                	jne    c000be33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000be27:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000be2c:	c1 e7 18             	shl    edi,0x18
c000be2f:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be33:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000be38:	8d 51 01             	lea    edx,[ecx+0x1]
c000be3b:	c1 e0 10             	shl    eax,0x10
c000be3e:	89 c7                	mov    edi,eax
c000be40:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000be45:	c1 e0 08             	shl    eax,0x8
c000be48:	09 f8                	or     eax,edi
c000be4a:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000be4e:	09 f8                	or     eax,edi
c000be50:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be54:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000be58:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000be5c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be60:	c1 f8 03             	sar    eax,0x3
c000be63:	01 c6                	add    esi,eax
c000be65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be69:	40                   	inc    eax
c000be6a:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000be6e:	7e 0b                	jle    c000be7b <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000be70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be74:	89 d1                	mov    ecx,edx
c000be76:	e9 7a ff ff ff       	jmp    c000bdf5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000be7b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000be7f:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000be83:	e9 4a ff ff ff       	jmp    c000bdd2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000be88:	50                   	push   eax
c000be89:	50                   	push   eax
c000be8a:	51                   	push   ecx
c000be8b:	68 d2 37 02 c0       	push   0xc00237d2
c000be90:	e8 b9 b0 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000be95:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be98:	e8 57 3c 00 00       	call   c000faf4 <free>
c000be9d:	83 c4 10             	add    esp,0x10
c000bea0:	31 ed                	xor    ebp,ebp
c000bea2:	eb 14                	jmp    c000beb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000bea4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bea8:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000beac:	89 18                	mov    DWORD PTR [eax],ebx
c000beae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000beb2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000beb6:	89 18                	mov    DWORD PTR [eax],ebx
c000beb8:	83 c4 3c             	add    esp,0x3c
c000bebb:	89 e8                	mov    eax,ebp
c000bebd:	5b                   	pop    ebx
c000bebe:	5e                   	pop    esi
c000bebf:	5f                   	pop    edi
c000bec0:	5d                   	pop    ebp
c000bec1:	c3                   	ret    

c000bec2 <Video::putTGA(int, int, unsigned char*, int)>:
c000bec2:	55                   	push   ebp
c000bec3:	57                   	push   edi
c000bec4:	56                   	push   esi
c000bec5:	53                   	push   ebx
c000bec6:	83 ec 28             	sub    esp,0x28
c000bec9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000becd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000bed1:	50                   	push   eax
c000bed2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bed6:	50                   	push   eax
c000bed7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bedb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bedf:	55                   	push   ebp
c000bee0:	e8 37 fc ff ff       	call   c000bb1c <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bee5:	83 c4 20             	add    esp,0x20
c000bee8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000beec:	85 c0                	test   eax,eax
c000beee:	74 3b                	je     c000bf2b <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bef0:	89 c6                	mov    esi,eax
c000bef2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bef6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000befa:	39 d8                	cmp    eax,ebx
c000befc:	7e 2d                	jle    c000bf2b <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000befe:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bf02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf06:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf0a:	39 f8                	cmp    eax,edi
c000bf0c:	7e 1a                	jle    c000bf28 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000bf0e:	83 c6 04             	add    esi,0x4
c000bf11:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf14:	85 c0                	test   eax,eax
c000bf16:	79 0d                	jns    c000bf25 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000bf18:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf1b:	50                   	push   eax
c000bf1c:	53                   	push   ebx
c000bf1d:	57                   	push   edi
c000bf1e:	55                   	push   ebp
c000bf1f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000bf22:	83 c4 10             	add    esp,0x10
c000bf25:	47                   	inc    edi
c000bf26:	eb da                	jmp    c000bf02 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf28:	43                   	inc    ebx
c000bf29:	eb c7                	jmp    c000bef2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf2b:	83 c4 1c             	add    esp,0x1c
c000bf2e:	5b                   	pop    ebx
c000bf2f:	5e                   	pop    esi
c000bf30:	5f                   	pop    edi
c000bf31:	5d                   	pop    ebp
c000bf32:	c3                   	ret    
c000bf33:	90                   	nop

c000bf34 <ACPI::close(int, int, void*)>:
c000bf34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf39:	c3                   	ret    
c000bf3a:	66 90                	xchg   ax,ax

c000bf3c <loadACPITables(unsigned char*)>:
c000bf3c:	57                   	push   edi
c000bf3d:	56                   	push   esi
c000bf3e:	53                   	push   ebx
c000bf3f:	83 ec 60             	sub    esp,0x60
c000bf42:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf47:	0f 84 43 02 00 00    	je     c000c190 <loadACPITables(unsigned char*)+0x254>
c000bf4d:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c000bf52:	0f b6 c0             	movzx  eax,al
c000bf55:	85 c0                	test   eax,eax
c000bf57:	74 7b                	je     c000bfd4 <loadACPITables(unsigned char*)+0x98>
c000bf59:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf5d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf61:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf68:	83 e8 24             	sub    eax,0x24
c000bf6b:	c1 e8 03             	shr    eax,0x3
c000bf6e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bf72:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bf7a:	66 90                	xchg   ax,ax
c000bf7c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf80:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bf84:	0f 8d ba 00 00 00    	jge    c000c044 <loadACPITables(unsigned char*)+0x108>
c000bf8a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf8e:	83 c0 24             	add    eax,0x24
c000bf91:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bf95:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bf99:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bf9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfa1:	c1 e0 03             	shl    eax,0x3
c000bfa4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bfa8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bfac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bfaf:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfb1:	89 c1                	mov    ecx,eax
c000bfb3:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bfb8:	8d 50 01             	lea    edx,[eax+0x1]
c000bfbb:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000bfc1:	89 ca                	mov    edx,ecx
c000bfc3:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000bfca:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000bfcf:	eb ab                	jmp    c000bf7c <loadACPITables(unsigned char*)+0x40>
c000bfd1:	8d 76 00             	lea    esi,[esi+0x0]
c000bfd4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfd8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bfdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfe3:	83 e8 24             	sub    eax,0x24
c000bfe6:	c1 e8 02             	shr    eax,0x2
c000bfe9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000bfed:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000bff5:	8d 76 00             	lea    esi,[esi+0x0]
c000bff8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000bffc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c000:	7d 42                	jge    c000c044 <loadACPITables(unsigned char*)+0x108>
c000c002:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c006:	83 c0 24             	add    eax,0x24
c000c009:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c00d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c011:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c015:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c019:	c1 e0 02             	shl    eax,0x2
c000c01c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c020:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c024:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c026:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c02b:	8d 50 01             	lea    edx,[eax+0x1]
c000c02e:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c034:	89 ca                	mov    edx,ecx
c000c036:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c03d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c042:	eb b4                	jmp    c000bff8 <loadACPITables(unsigned char*)+0xbc>
c000c044:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c04c:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c051:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c055:	0f 8d 39 01 00 00    	jge    c000c194 <loadACPITables(unsigned char*)+0x258>
c000c05b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c05f:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c066:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c06a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c06e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c072:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c076:	25 ff 0f 00 00       	and    eax,0xfff
c000c07b:	89 c6                	mov    esi,eax
c000c07d:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c083:	83 ec 0c             	sub    esp,0xc
c000c086:	6a 01                	push   0x1
c000c088:	e8 58 72 00 00       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c000c08d:	83 c4 10             	add    esp,0x10
c000c090:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c094:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c09a:	83 ec 0c             	sub    esp,0xc
c000c09d:	6a 01                	push   0x1
c000c09f:	6a 01                	push   0x1
c000c0a1:	50                   	push   eax
c000c0a2:	52                   	push   edx
c000c0a3:	53                   	push   ebx
c000c0a4:	e8 0f 7b 00 00       	call   c0013bb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0a9:	83 c4 20             	add    esp,0x20
c000c0ac:	09 f0                	or     eax,esi
c000c0ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0b2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0b6:	c1 e0 03             	shl    eax,0x3
c000c0b9:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c0be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c0c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0ca:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c0d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c0e6:	89 c6                	mov    esi,eax
c000c0e8:	89 d7                	mov    edi,edx
c000c0ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c0ec:	89 c8                	mov    eax,ecx
c000c0ee:	89 fa                	mov    edx,edi
c000c0f0:	89 f3                	mov    ebx,esi
c000c0f2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c0f6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c0fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c0fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c102:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c105:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c109:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c10d:	05 00 10 00 00       	add    eax,0x1000
c000c112:	c1 e8 0c             	shr    eax,0xc
c000c115:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c119:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c11d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c121:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c125:	25 ff 0f 00 00       	and    eax,0xfff
c000c12a:	89 c6                	mov    esi,eax
c000c12c:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c132:	83 ec 0c             	sub    esp,0xc
c000c135:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c139:	e8 a7 71 00 00       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c000c13e:	83 c4 10             	add    esp,0x10
c000c141:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c145:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c14b:	83 ec 0c             	sub    esp,0xc
c000c14e:	6a 01                	push   0x1
c000c150:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c154:	50                   	push   eax
c000c155:	52                   	push   edx
c000c156:	53                   	push   ebx
c000c157:	e8 5c 7a 00 00       	call   c0013bb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c15c:	83 c4 20             	add    esp,0x20
c000c15f:	09 f0                	or     eax,esi
c000c161:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c169:	83 ec 0c             	sub    esp,0xc
c000c16c:	50                   	push   eax
c000c16d:	e8 71 74 00 00       	call   c00135e3 <Virt::freeKernelVirtualPages(unsigned long)>
c000c172:	83 c4 10             	add    esp,0x10
c000c175:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c179:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c17d:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c184:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c189:	e9 be fe ff ff       	jmp    c000c04c <loadACPITables(unsigned char*)+0x110>
c000c18e:	66 90                	xchg   ax,ax
c000c190:	90                   	nop
c000c191:	8d 76 00             	lea    esi,[esi+0x0]
c000c194:	83 c4 60             	add    esp,0x60
c000c197:	5b                   	pop    ebx
c000c198:	5e                   	pop    esi
c000c199:	5f                   	pop    edi
c000c19a:	c3                   	ret    
c000c19b:	90                   	nop

c000c19c <findRSDT(unsigned char*)>:
c000c19c:	57                   	push   edi
c000c19d:	56                   	push   esi
c000c19e:	53                   	push   ebx
c000c19f:	83 ec 50             	sub    esp,0x50
c000c1a2:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c1a7:	85 c0                	test   eax,eax
c000c1a9:	75 0d                	jne    c000c1b8 <findRSDT(unsigned char*)+0x1c>
c000c1ab:	b8 00 00 00 00       	mov    eax,0x0
c000c1b0:	e9 2b 01 00 00       	jmp    c000c2e0 <findRSDT(unsigned char*)+0x144>
c000c1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1b8:	89 e0                	mov    eax,esp
c000c1ba:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c1be:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c1c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c1c6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c1ce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c1d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c1da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c1de:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c1e2:	89 c6                	mov    esi,eax
c000c1e4:	89 d7                	mov    edi,edx
c000c1e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c1e8:	89 c8                	mov    eax,ecx
c000c1ea:	89 fa                	mov    edx,edi
c000c1ec:	89 f3                	mov    ebx,esi
c000c1ee:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c1f2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c1f6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c1fa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c1fe:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c202:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c20a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c20e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c212:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c21e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c222:	25 ff 0f 00 00       	and    eax,0xfff
c000c227:	89 c6                	mov    esi,eax
c000c229:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c22f:	83 ec 0c             	sub    esp,0xc
c000c232:	6a 02                	push   0x2
c000c234:	e8 ac 70 00 00       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c000c239:	83 c4 10             	add    esp,0x10
c000c23c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c240:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c246:	83 ec 0c             	sub    esp,0xc
c000c249:	6a 01                	push   0x1
c000c24b:	6a 02                	push   0x2
c000c24d:	50                   	push   eax
c000c24e:	52                   	push   edx
c000c24f:	53                   	push   ebx
c000c250:	e8 63 79 00 00       	call   c0013bb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c255:	83 c4 20             	add    esp,0x20
c000c258:	09 f0                	or     eax,esi
c000c25a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c25e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c262:	25 ff 0f 00 00       	and    eax,0xfff
c000c267:	89 c6                	mov    esi,eax
c000c269:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c26f:	83 ec 0c             	sub    esp,0xc
c000c272:	6a 02                	push   0x2
c000c274:	e8 6c 70 00 00       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c280:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c286:	83 ec 0c             	sub    esp,0xc
c000c289:	6a 01                	push   0x1
c000c28b:	6a 02                	push   0x2
c000c28d:	50                   	push   eax
c000c28e:	52                   	push   edx
c000c28f:	53                   	push   ebx
c000c290:	e8 23 79 00 00       	call   c0013bb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c295:	83 c4 20             	add    esp,0x20
c000c298:	09 f0                	or     eax,esi
c000c29a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c29e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	75 11                	jne    c000c2b8 <findRSDT(unsigned char*)+0x11c>
c000c2a7:	c6 05 80 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bd80,0x0
c000c2ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2b2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2b6:	eb 24                	jmp    c000c2dc <findRSDT(unsigned char*)+0x140>
c000c2b8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2bd:	83 f8 02             	cmp    eax,0x2
c000c2c0:	75 12                	jne    c000c2d4 <findRSDT(unsigned char*)+0x138>
c000c2c2:	c6 05 80 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd80,0x1
c000c2c9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c2cd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2d1:	eb 09                	jmp    c000c2dc <findRSDT(unsigned char*)+0x140>
c000c2d3:	90                   	nop
c000c2d4:	b8 00 00 00 00       	mov    eax,0x0
c000c2d9:	eb 05                	jmp    c000c2e0 <findRSDT(unsigned char*)+0x144>
c000c2db:	90                   	nop
c000c2dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c2e0:	83 c4 50             	add    esp,0x50
c000c2e3:	5b                   	pop    ebx
c000c2e4:	5e                   	pop    esi
c000c2e5:	5f                   	pop    edi
c000c2e6:	c3                   	ret    
c000c2e7:	90                   	nop

c000c2e8 <findDataTable(unsigned char*, char*)>:
c000c2e8:	83 ec 1c             	sub    esp,0x1c
c000c2eb:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c2f0:	75 0a                	jne    c000c2fc <findDataTable(unsigned char*, char*)+0x14>
c000c2f2:	b8 00 00 00 00       	mov    eax,0x0
c000c2f7:	eb 5f                	jmp    c000c358 <findDataTable(unsigned char*, char*)+0x70>
c000c2f9:	8d 76 00             	lea    esi,[esi+0x0]
c000c2fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c304:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c309:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c30d:	7d 41                	jge    c000c350 <findDataTable(unsigned char*, char*)+0x68>
c000c30f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c313:	c1 e0 03             	shl    eax,0x3
c000c316:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c31b:	83 ec 04             	sub    esp,0x4
c000c31e:	6a 04                	push   0x4
c000c320:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c324:	50                   	push   eax
c000c325:	e8 56 40 ff ff       	call   c0000380 <memcmp>
c000c32a:	83 c4 10             	add    esp,0x10
c000c32d:	85 c0                	test   eax,eax
c000c32f:	0f 94 c0             	sete   al
c000c332:	0f b6 c0             	movzx  eax,al
c000c335:	85 c0                	test   eax,eax
c000c337:	74 0f                	je     c000c348 <findDataTable(unsigned char*, char*)+0x60>
c000c339:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c33d:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c344:	eb 12                	jmp    c000c358 <findDataTable(unsigned char*, char*)+0x70>
c000c346:	66 90                	xchg   ax,ax
c000c348:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c34d:	eb b5                	jmp    c000c304 <findDataTable(unsigned char*, char*)+0x1c>
c000c34f:	90                   	nop
c000c350:	b8 00 00 00 00       	mov    eax,0x0
c000c355:	8d 76 00             	lea    esi,[esi+0x0]
c000c358:	83 c4 1c             	add    esp,0x1c
c000c35b:	c3                   	ret    

c000c35c <scanMADT()>:
c000c35c:	53                   	push   ebx
c000c35d:	83 ec 38             	sub    esp,0x38
c000c360:	c7 05 88 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd88,0x0
c000c36a:	c7 05 84 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd84,0x0
c000c374:	e8 9d d2 00 00       	call   c0019616 <HalFindRSDP()>
c000c379:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c000c37e:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c383:	85 c0                	test   eax,eax
c000c385:	0f 84 11 04 00 00    	je     c000c79c <scanMADT()+0x440>
c000c38b:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c390:	83 ec 0c             	sub    esp,0xc
c000c393:	50                   	push   eax
c000c394:	e8 03 fe ff ff       	call   c000c19c <findRSDT(unsigned char*)>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c000c3a1:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3a6:	85 c0                	test   eax,eax
c000c3a8:	0f 84 f2 03 00 00    	je     c000c7a0 <scanMADT()+0x444>
c000c3ae:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3b3:	83 ec 0c             	sub    esp,0xc
c000c3b6:	50                   	push   eax
c000c3b7:	e8 80 fb ff ff       	call   c000bf3c <loadACPITables(unsigned char*)>
c000c3bc:	83 c4 10             	add    esp,0x10
c000c3bf:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3c4:	83 ec 08             	sub    esp,0x8
c000c3c7:	68 34 38 02 c0       	push   0xc0023834
c000c3cc:	50                   	push   eax
c000c3cd:	e8 16 ff ff ff       	call   c000c2e8 <findDataTable(unsigned char*, char*)>
c000c3d2:	83 c4 10             	add    esp,0x10
c000c3d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3d9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c3de:	0f 84 c0 03 00 00    	je     c000c7a4 <scanMADT()+0x448>
c000c3e4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c3ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c3f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c3f3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c3f7:	0f 87 af 03 00 00    	ja     c000c7ac <scanMADT()+0x450>
c000c3fd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c405:	0f 87 a1 03 00 00    	ja     c000c7ac <scanMADT()+0x450>
c000c40b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c40f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c413:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c417:	8d 50 01             	lea    edx,[eax+0x1]
c000c41a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c41e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c422:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c426:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c42a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c42e:	8d 50 01             	lea    edx,[eax+0x1]
c000c431:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c435:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c439:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c43d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c441:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c446:	83 f8 02             	cmp    eax,0x2
c000c449:	0f 86 59 03 00 00    	jbe    c000c7a8 <scanMADT()+0x44c>
c000c44f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c454:	85 c0                	test   eax,eax
c000c456:	75 58                	jne    c000c4b0 <scanMADT()+0x154>
c000c458:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c45c:	8d 50 01             	lea    edx,[eax+0x1]
c000c45f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c463:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c469:	0f b6 d2             	movzx  edx,dl
c000c46c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c470:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c474:	88 82 c0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4040],al
c000c47a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c47e:	8d 50 01             	lea    edx,[eax+0x1]
c000c481:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c485:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c48b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c48e:	88 0d 80 bf 02 c0    	mov    BYTE PTR ds:0xc002bf80,cl
c000c494:	0f b6 d2             	movzx  edx,dl
c000c497:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c49b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c49f:	88 82 a0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4060],al
c000c4a5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c4aa:	e9 d9 02 00 00       	jmp    c000c788 <scanMADT()+0x42c>
c000c4af:	90                   	nop
c000c4b0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4b5:	83 f8 01             	cmp    eax,0x1
c000c4b8:	0f 85 1a 01 00 00    	jne    c000c5d8 <scanMADT()+0x27c>
c000c4be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4c2:	8d 50 01             	lea    edx,[eax+0x1]
c000c4c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c9:	8a 15 40 be 02 c0    	mov    dl,BYTE PTR ds:0xc002be40
c000c4cf:	0f b6 d2             	movzx  edx,dl
c000c4d2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4d6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4da:	88 82 60 be 02 c0    	mov    BYTE PTR [edx-0x3ffd41a0],al
c000c4e0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c4e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4ed:	01 d0                	add    eax,edx
c000c4ef:	83 c0 2c             	add    eax,0x2c
c000c4f2:	8a 00                	mov    al,BYTE PTR [eax]
c000c4f4:	0f b6 d0             	movzx  edx,al
c000c4f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4fb:	8d 48 01             	lea    ecx,[eax+0x1]
c000c4fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c502:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c506:	0f b6 c0             	movzx  eax,al
c000c509:	c1 e0 08             	shl    eax,0x8
c000c50c:	89 d1                	mov    ecx,edx
c000c50e:	09 c1                	or     ecx,eax
c000c510:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c514:	8d 50 02             	lea    edx,[eax+0x2]
c000c517:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c51b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c51f:	0f b6 c0             	movzx  eax,al
c000c522:	c1 e0 10             	shl    eax,0x10
c000c525:	09 c1                	or     ecx,eax
c000c527:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c52b:	8d 50 03             	lea    edx,[eax+0x3]
c000c52e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c532:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c536:	0f b6 c0             	movzx  eax,al
c000c539:	c1 e0 18             	shl    eax,0x18
c000c53c:	09 c1                	or     ecx,eax
c000c53e:	89 ca                	mov    edx,ecx
c000c540:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c545:	0f b6 c0             	movzx  eax,al
c000c548:	89 14 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],edx
c000c54f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c554:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c558:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c55c:	01 d0                	add    eax,edx
c000c55e:	83 c0 2c             	add    eax,0x2c
c000c561:	8a 00                	mov    al,BYTE PTR [eax]
c000c563:	0f b6 d0             	movzx  edx,al
c000c566:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c56a:	8d 48 01             	lea    ecx,[eax+0x1]
c000c56d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c571:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c575:	0f b6 c0             	movzx  eax,al
c000c578:	c1 e0 08             	shl    eax,0x8
c000c57b:	89 d1                	mov    ecx,edx
c000c57d:	09 c1                	or     ecx,eax
c000c57f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c583:	8d 50 02             	lea    edx,[eax+0x2]
c000c586:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c58a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c58e:	0f b6 c0             	movzx  eax,al
c000c591:	c1 e0 10             	shl    eax,0x10
c000c594:	09 c1                	or     ecx,eax
c000c596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c59a:	8d 50 03             	lea    edx,[eax+0x3]
c000c59d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5a1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5a5:	0f b6 c0             	movzx  eax,al
c000c5a8:	c1 e0 18             	shl    eax,0x18
c000c5ab:	09 c1                	or     ecx,eax
c000c5ad:	89 ca                	mov    edx,ecx
c000c5af:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c5b4:	0f b6 c0             	movzx  eax,al
c000c5b7:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c000c5be:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5c3:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c5c8:	83 c0 01             	add    eax,0x1
c000c5cb:	a2 40 be 02 c0       	mov    ds:0xc002be40,al
c000c5d0:	e9 b3 01 00 00       	jmp    c000c788 <scanMADT()+0x42c>
c000c5d5:	8d 76 00             	lea    esi,[esi+0x0]
c000c5d8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c5dd:	83 f8 02             	cmp    eax,0x2
c000c5e0:	0f 85 ea 00 00 00    	jne    c000c6d0 <scanMADT()+0x374>
c000c5e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5ea:	8d 50 01             	lea    edx,[eax+0x1]
c000c5ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c5f9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c5fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c601:	8d 50 01             	lea    edx,[eax+0x1]
c000c604:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c608:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c60c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c610:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c614:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c618:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c61c:	01 d0                	add    eax,edx
c000c61e:	83 c0 2c             	add    eax,0x2c
c000c621:	8a 00                	mov    al,BYTE PTR [eax]
c000c623:	0f b6 d0             	movzx  edx,al
c000c626:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c62a:	8d 48 01             	lea    ecx,[eax+0x1]
c000c62d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c631:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c635:	0f b6 c0             	movzx  eax,al
c000c638:	c1 e0 08             	shl    eax,0x8
c000c63b:	89 d1                	mov    ecx,edx
c000c63d:	09 c1                	or     ecx,eax
c000c63f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c643:	8d 50 02             	lea    edx,[eax+0x2]
c000c646:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c64a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c64e:	0f b6 c0             	movzx  eax,al
c000c651:	c1 e0 10             	shl    eax,0x10
c000c654:	09 c1                	or     ecx,eax
c000c656:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c65a:	8d 50 03             	lea    edx,[eax+0x3]
c000c65d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c661:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c665:	0f b6 c0             	movzx  eax,al
c000c668:	c1 e0 18             	shl    eax,0x18
c000c66b:	09 c8                	or     eax,ecx
c000c66d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c671:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c676:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c67a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c67e:	01 d0                	add    eax,edx
c000c680:	83 c0 2c             	add    eax,0x2c
c000c683:	8a 00                	mov    al,BYTE PTR [eax]
c000c685:	0f b6 d0             	movzx  edx,al
c000c688:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c68c:	8d 48 01             	lea    ecx,[eax+0x1]
c000c68f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c693:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c697:	0f b6 c0             	movzx  eax,al
c000c69a:	c1 e0 08             	shl    eax,0x8
c000c69d:	09 d0                	or     eax,edx
c000c69f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c6a4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c6a9:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6b2:	88 90 88 5f 02 c0    	mov    BYTE PTR [eax-0x3ffda078],dl
c000c6b8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c6bd:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000c6c2:	66 89 94 00 20 be 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd41e0],dx
c000c6ca:	e9 b9 00 00 00       	jmp    c000c788 <scanMADT()+0x42c>
c000c6cf:	90                   	nop
c000c6d0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c6d5:	83 f8 04             	cmp    eax,0x4
c000c6d8:	0f 85 9a 00 00 00    	jne    c000c778 <scanMADT()+0x41c>
c000c6de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6e2:	8d 50 01             	lea    edx,[eax+0x1]
c000c6e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6ed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6f1:	0f b6 c0             	movzx  eax,al
c000c6f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c700:	01 d0                	add    eax,edx
c000c702:	83 c0 2c             	add    eax,0x2c
c000c705:	8a 00                	mov    al,BYTE PTR [eax]
c000c707:	0f b6 d0             	movzx  edx,al
c000c70a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c70e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c711:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c715:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c719:	0f b6 c0             	movzx  eax,al
c000c71c:	c1 e0 08             	shl    eax,0x8
c000c71f:	09 d0                	or     eax,edx
c000c721:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c725:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c72a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c72e:	8d 50 01             	lea    edx,[eax+0x1]
c000c731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c735:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c739:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c73d:	0f b6 c0             	movzx  eax,al
c000c740:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c748:	c1 e0 08             	shl    eax,0x8
c000c74b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c74f:	89 c1                	mov    ecx,eax
c000c751:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c755:	c1 e0 18             	shl    eax,0x18
c000c758:	89 c3                	mov    ebx,eax
c000c75a:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c000c75f:	8d 50 01             	lea    edx,[eax+0x1]
c000c762:	89 15 8c bd 02 c0    	mov    DWORD PTR ds:0xc002bd8c,edx
c000c768:	09 d9                	or     ecx,ebx
c000c76a:	89 ca                	mov    edx,ecx
c000c76c:	89 14 85 a0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4260],edx
c000c773:	eb 13                	jmp    c000c788 <scanMADT()+0x42c>
c000c775:	8d 76 00             	lea    esi,[esi+0x0]
c000c778:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c77d:	83 f8 05             	cmp    eax,0x5
c000c780:	75 06                	jne    c000c788 <scanMADT()+0x42c>
c000c782:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c787:	90                   	nop
c000c788:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c78d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c791:	01 d0                	add    eax,edx
c000c793:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c797:	e9 50 fc ff ff       	jmp    c000c3ec <scanMADT()+0x90>
c000c79c:	90                   	nop
c000c79d:	eb 0d                	jmp    c000c7ac <scanMADT()+0x450>
c000c79f:	90                   	nop
c000c7a0:	90                   	nop
c000c7a1:	eb 09                	jmp    c000c7ac <scanMADT()+0x450>
c000c7a3:	90                   	nop
c000c7a4:	90                   	nop
c000c7a5:	eb 05                	jmp    c000c7ac <scanMADT()+0x450>
c000c7a7:	90                   	nop
c000c7a8:	90                   	nop
c000c7a9:	8d 76 00             	lea    esi,[esi+0x0]
c000c7ac:	83 c4 38             	add    esp,0x38
c000c7af:	5b                   	pop    ebx
c000c7b0:	c3                   	ret    
c000c7b1:	90                   	nop
c000c7b2:	66 90                	xchg   ax,ax

c000c7b4 <ACPI::ACPI()>:
c000c7b4:	83 ec 0c             	sub    esp,0xc
c000c7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7bb:	83 ec 08             	sub    esp,0x8
c000c7be:	68 39 38 02 c0       	push   0xc0023839
c000c7c3:	50                   	push   eax
c000c7c4:	e8 33 d3 ff ff       	call   c0009afc <Device::Device(char const*)>
c000c7c9:	83 c4 10             	add    esp,0x10
c000c7cc:	ba 34 3a 02 c0       	mov    edx,0xc0023a34
c000c7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7d5:	89 10                	mov    DWORD PTR [eax],edx
c000c7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7db:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7e6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7f4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c7fe:	e8 59 fb ff ff       	call   c000c35c <scanMADT()>
c000c803:	90                   	nop
c000c804:	83 c4 0c             	add    esp,0xc
c000c807:	c3                   	ret    

c000c808 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c808:	83 ec 2c             	sub    esp,0x2c
c000c80b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c80f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c813:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000c817:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000c81b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c820:	88 c8                	mov    al,cl
c000c822:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c826:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c82b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c833:	90                   	nop
c000c834:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c838:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c83e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c842:	0f 8d b0 00 00 00    	jge    c000c8f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c848:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c84c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c850:	83 c2 2a             	add    edx,0x2a
c000c853:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c857:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c85c:	0f b7 c0             	movzx  eax,ax
c000c85f:	39 c2                	cmp    edx,eax
c000c861:	0f 85 85 00 00 00    	jne    c000c8ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c867:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c86b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c86f:	83 c2 2a             	add    edx,0x2a
c000c872:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c876:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c87b:	0f b6 c0             	movzx  eax,al
c000c87e:	39 c2                	cmp    edx,eax
c000c880:	75 6a                	jne    c000c8ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c882:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c887:	85 c0                	test   eax,eax
c000c889:	74 3d                	je     c000c8c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c88b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c88f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c893:	83 c2 2a             	add    edx,0x2a
c000c896:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c89a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c89e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8a1:	39 c2                	cmp    edx,eax
c000c8a3:	74 13                	je     c000c8b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c8a5:	83 ec 0c             	sub    esp,0xc
c000c8a8:	68 b4 39 02 c0       	push   0xc00239b4
c000c8ad:	e8 78 35 00 00       	call   c000fe2a <KePanic(char const*)>
c000c8b2:	83 c4 10             	add    esp,0x10
c000c8b5:	8d 76 00             	lea    esi,[esi+0x0]
c000c8b8:	83 ec 0c             	sub    esp,0xc
c000c8bb:	68 3e 38 02 c0       	push   0xc002383e
c000c8c0:	e8 65 35 00 00       	call   c000fe2a <KePanic(char const*)>
c000c8c5:	83 c4 10             	add    esp,0x10
c000c8c8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c8cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8d4:	83 c2 2a             	add    edx,0x2a
c000c8d7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c8db:	8b 02                	mov    eax,DWORD PTR [edx]
c000c8dd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c8e0:	89 01                	mov    DWORD PTR [ecx],eax
c000c8e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c8e5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c8ea:	66 90                	xchg   ax,ax
c000c8ec:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c8f1:	e9 3e ff ff ff       	jmp    c000c834 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c8f6:	66 90                	xchg   ax,ax
c000c8f8:	90                   	nop
c000c8f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8fd:	83 c4 2c             	add    esp,0x2c
c000c900:	c2 04 00             	ret    0x4
c000c903:	90                   	nop

c000c904 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c904:	83 ec 1c             	sub    esp,0x1c
c000c907:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c90b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c90f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c913:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c918:	88 c8                	mov    al,cl
c000c91a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c91e:	88 d0                	mov    al,dl
c000c920:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c928:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c92e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c932:	83 c2 2a             	add    edx,0x2a
c000c935:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000c939:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000c93d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c941:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c94b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c94e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c952:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000c957:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c95b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c961:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c965:	83 c0 01             	add    eax,0x1
c000c968:	88 c1                	mov    cl,al
c000c96a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c96e:	83 c2 2a             	add    edx,0x2a
c000c971:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c979:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c97f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c983:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c986:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c98a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c98e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c992:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c998:	8d 50 01             	lea    edx,[eax+0x1]
c000c99b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c9a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9af:	3d 00 02 00 00       	cmp    eax,0x200
c000c9b4:	75 12                	jne    c000c9c8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c9b6:	83 ec 0c             	sub    esp,0xc
c000c9b9:	68 4d 38 02 c0       	push   0xc002384d
c000c9be:	e8 67 34 00 00       	call   c000fe2a <KePanic(char const*)>
c000c9c3:	83 c4 10             	add    esp,0x10
c000c9c6:	66 90                	xchg   ax,ax
c000c9c8:	90                   	nop
c000c9c9:	83 c4 1c             	add    esp,0x1c
c000c9cc:	c3                   	ret    
c000c9cd:	90                   	nop
c000c9ce:	66 90                	xchg   ax,ax

c000c9d0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000c9d0:	b8 00 00 00 00       	mov    eax,0x0
c000c9d5:	c3                   	ret    
c000c9d6:	66 90                	xchg   ax,ax

c000c9d8 <ACPI::detectPCI()>:
c000c9d8:	53                   	push   ebx
c000c9d9:	83 ec 28             	sub    esp,0x28
c000c9dc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c9e1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000c9e6:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c9eb:	83 ec 08             	sub    esp,0x8
c000c9ee:	68 6a 38 02 c0       	push   0xc002386a
c000c9f3:	50                   	push   eax
c000c9f4:	e8 ef f8 ff ff       	call   c000c2e8 <findDataTable(unsigned char*, char*)>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ca00:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca05:	74 0d                	je     c000ca14 <ACPI::detectPCI()+0x3c>
c000ca07:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca0c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca11:	8d 76 00             	lea    esi,[esi+0x0]
c000ca14:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ca1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca20:	8a 00                	mov    al,BYTE PTR [eax]
c000ca22:	0f b6 c0             	movzx  eax,al
c000ca25:	83 f8 01             	cmp    eax,0x1
c000ca28:	75 0e                	jne    c000ca38 <ACPI::detectPCI()+0x60>
c000ca2a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca2f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca34:	eb 2e                	jmp    c000ca64 <ACPI::detectPCI()+0x8c>
c000ca36:	66 90                	xchg   ax,ax
c000ca38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca3c:	8a 00                	mov    al,BYTE PTR [eax]
c000ca3e:	0f b6 c0             	movzx  eax,al
c000ca41:	83 f8 02             	cmp    eax,0x2
c000ca44:	75 1e                	jne    c000ca64 <ACPI::detectPCI()+0x8c>
c000ca46:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca4b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ca50:	85 c0                	test   eax,eax
c000ca52:	74 10                	je     c000ca64 <ACPI::detectPCI()+0x8c>
c000ca54:	83 ec 0c             	sub    esp,0xc
c000ca57:	68 e4 39 02 c0       	push   0xc00239e4
c000ca5c:	e8 c9 33 00 00       	call   c000fe2a <KePanic(char const*)>
c000ca61:	83 c4 10             	add    esp,0x10
c000ca64:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ca68:	83 f0 01             	xor    eax,0x1
c000ca6b:	0f b6 c0             	movzx  eax,al
c000ca6e:	85 c0                	test   eax,eax
c000ca70:	74 46                	je     c000cab8 <ACPI::detectPCI()+0xe0>
c000ca72:	e8 b9 36 ff ff       	call   c0000130 <manualPCIProbe>
c000ca77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca7b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ca80:	75 0e                	jne    c000ca90 <ACPI::detectPCI()+0xb8>
c000ca82:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca87:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca8c:	eb 2a                	jmp    c000cab8 <ACPI::detectPCI()+0xe0>
c000ca8e:	66 90                	xchg   ax,ax
c000ca90:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ca95:	75 21                	jne    c000cab8 <ACPI::detectPCI()+0xe0>
c000ca97:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca9c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000caa1:	85 c0                	test   eax,eax
c000caa3:	74 13                	je     c000cab8 <ACPI::detectPCI()+0xe0>
c000caa5:	83 ec 0c             	sub    esp,0xc
c000caa8:	68 e4 39 02 c0       	push   0xc00239e4
c000caad:	e8 78 33 00 00       	call   c000fe2a <KePanic(char const*)>
c000cab2:	83 c4 10             	add    esp,0x10
c000cab5:	8d 76 00             	lea    esi,[esi+0x0]
c000cab8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cabd:	85 c0                	test   eax,eax
c000cabf:	0f 84 87 00 00 00    	je     c000cb4c <ACPI::detectPCI()+0x174>
c000cac5:	83 ec 0c             	sub    esp,0xc
c000cac8:	68 6f 38 02 c0       	push   0xc002386f
c000cacd:	e8 c9 06 00 00       	call   c000d19b <KeSetBootMessage(char const*)>
c000cad2:	83 c4 10             	add    esp,0x10
c000cad5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cadd:	83 ec 0c             	sub    esp,0xc
c000cae0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cae4:	e8 fb 2f 00 00       	call   c000fae4 <malloc>
c000cae9:	83 c4 10             	add    esp,0x10
c000caec:	89 c3                	mov    ebx,eax
c000caee:	83 ec 0c             	sub    esp,0xc
c000caf1:	53                   	push   ebx
c000caf2:	e8 f7 08 01 00       	call   c001d3ee <PCI::PCI()>
c000caf7:	83 c4 10             	add    esp,0x10
c000cafa:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cafe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb02:	83 ec 08             	sub    esp,0x8
c000cb05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb09:	50                   	push   eax
c000cb0a:	e8 8b ce ff ff       	call   c000999a <Device::addChild(Device*)>
c000cb0f:	83 c4 10             	add    esp,0x10
c000cb12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb16:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb18:	83 c0 08             	add    eax,0x8
c000cb1b:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb1d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cb22:	85 d2                	test   edx,edx
c000cb24:	74 0a                	je     c000cb30 <ACPI::detectPCI()+0x158>
c000cb26:	ba 01 00 00 00       	mov    edx,0x1
c000cb2b:	eb 0b                	jmp    c000cb38 <ACPI::detectPCI()+0x160>
c000cb2d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb30:	ba 02 00 00 00       	mov    edx,0x2
c000cb35:	8d 76 00             	lea    esi,[esi+0x0]
c000cb38:	6a 00                	push   0x0
c000cb3a:	6a 00                	push   0x0
c000cb3c:	52                   	push   edx
c000cb3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb41:	ff d0                	call   eax
c000cb43:	83 c4 10             	add    esp,0x10
c000cb46:	e9 91 00 00 00       	jmp    c000cbdc <ACPI::detectPCI()+0x204>
c000cb4b:	90                   	nop
c000cb4c:	83 ec 0c             	sub    esp,0xc
c000cb4f:	68 87 38 02 c0       	push   0xc0023887
c000cb54:	e8 42 06 00 00       	call   c000d19b <KeSetBootMessage(char const*)>
c000cb59:	83 c4 10             	add    esp,0x10
c000cb5c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cb63:	83 ec 0c             	sub    esp,0xc
c000cb66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb6a:	e8 75 2f 00 00       	call   c000fae4 <malloc>
c000cb6f:	83 c4 10             	add    esp,0x10
c000cb72:	89 c3                	mov    ebx,eax
c000cb74:	83 ec 0c             	sub    esp,0xc
c000cb77:	53                   	push   ebx
c000cb78:	e8 79 14 01 00       	call   c001dff6 <IDE::IDE()>
c000cb7d:	83 c4 10             	add    esp,0x10
c000cb80:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cb84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb88:	83 ec 08             	sub    esp,0x8
c000cb8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb8f:	50                   	push   eax
c000cb90:	e8 05 ce ff ff       	call   c000999a <Device::addChild(Device*)>
c000cb95:	83 c4 10             	add    esp,0x10
c000cb98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb9c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cba6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbaa:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cbb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbb7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cbc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbc4:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbc6:	83 c0 08             	add    eax,0x8
c000cbc9:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbcb:	6a 00                	push   0x0
c000cbcd:	6a 00                	push   0x0
c000cbcf:	6a 00                	push   0x0
c000cbd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbd5:	ff d0                	call   eax
c000cbd7:	83 c4 10             	add    esp,0x10
c000cbda:	66 90                	xchg   ax,ax
c000cbdc:	90                   	nop
c000cbdd:	83 c4 28             	add    esp,0x28
c000cbe0:	5b                   	pop    ebx
c000cbe1:	c3                   	ret    
c000cbe2:	66 90                	xchg   ax,ax

c000cbe4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cbe4:	83 ec 0c             	sub    esp,0xc
c000cbe7:	83 ec 0c             	sub    esp,0xc
c000cbea:	68 9c 38 02 c0       	push   0xc002389c
c000cbef:	e8 36 32 00 00       	call   c000fe2a <KePanic(char const*)>
c000cbf4:	83 c4 10             	add    esp,0x10
c000cbf7:	90                   	nop
c000cbf8:	83 c4 0c             	add    esp,0xc
c000cbfb:	c3                   	ret    

c000cbfc <ACPI::open(int, int, void*)>:
c000cbfc:	55                   	push   ebp
c000cbfd:	89 e5                	mov    ebp,esp
c000cbff:	53                   	push   ebx
c000cc00:	81 ec 74 01 00 00    	sub    esp,0x174
c000cc06:	83 ec 0c             	sub    esp,0xc
c000cc09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cc0c:	e8 c7 fd ff ff       	call   c000c9d8 <ACPI::detectPCI()>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	83 ec 0c             	sub    esp,0xc
c000cc17:	68 0c 3a 02 c0       	push   0xc0023a0c
c000cc1c:	e8 7a 05 00 00       	call   c000d19b <KeSetBootMessage(char const*)>
c000cc21:	83 c4 10             	add    esp,0x10
c000cc24:	b8 4c 05 00 00       	mov    eax,0x54c
c000cc29:	8a 00                	mov    al,BYTE PTR [eax]
c000cc2b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000cc2e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cc32:	83 f8 01             	cmp    eax,0x1
c000cc35:	75 15                	jne    c000cc4c <ACPI::open(int, int, void*)+0x50>
c000cc37:	83 ec 0c             	sub    esp,0xc
c000cc3a:	68 ad 38 02 c0       	push   0xc00238ad
c000cc3f:	e8 3b 8b 00 00       	call   c001577f <Thr::loadKernelSymbolTable(char const*)>
c000cc44:	83 c4 10             	add    esp,0x10
c000cc47:	eb 33                	jmp    c000cc7c <ACPI::open(int, int, void*)+0x80>
c000cc49:	8d 76 00             	lea    esi,[esi+0x0]
c000cc4c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cc50:	3d bb 00 00 00       	cmp    eax,0xbb
c000cc55:	75 15                	jne    c000cc6c <ACPI::open(int, int, void*)+0x70>
c000cc57:	83 ec 0c             	sub    esp,0xc
c000cc5a:	68 cb 38 02 c0       	push   0xc00238cb
c000cc5f:	e8 1b 8b 00 00       	call   c001577f <Thr::loadKernelSymbolTable(char const*)>
c000cc64:	83 c4 10             	add    esp,0x10
c000cc67:	eb 13                	jmp    c000cc7c <ACPI::open(int, int, void*)+0x80>
c000cc69:	8d 76 00             	lea    esi,[esi+0x0]
c000cc6c:	83 ec 0c             	sub    esp,0xc
c000cc6f:	68 e9 38 02 c0       	push   0xc00238e9
c000cc74:	e8 b1 31 00 00       	call   c000fe2a <KePanic(char const*)>
c000cc79:	83 c4 10             	add    esp,0x10
c000cc7c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000cc80:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000cc87:	83 ec 0c             	sub    esp,0xc
c000cc8a:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000cc8d:	e8 52 2e 00 00       	call   c000fae4 <malloc>
c000cc92:	83 c4 10             	add    esp,0x10
c000cc95:	89 c3                	mov    ebx,eax
c000cc97:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cc9c:	83 ec 04             	sub    esp,0x4
c000cc9f:	50                   	push   eax
c000cca0:	68 03 39 02 c0       	push   0xc0023903
c000cca5:	53                   	push   ebx
c000cca6:	e8 81 b4 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000ccab:	83 c4 10             	add    esp,0x10
c000ccae:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000ccb1:	83 ec 08             	sub    esp,0x8
c000ccb4:	6a 01                	push   0x1
c000ccb6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ccb9:	e8 8c b4 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000ccbe:	83 c4 10             	add    esp,0x10
c000ccc1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000ccc4:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000ccc8:	75 12                	jne    c000ccdc <ACPI::open(int, int, void*)+0xe0>
c000ccca:	83 ec 0c             	sub    esp,0xc
c000cccd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ccd0:	e8 d3 b4 ff ff       	call   c00081a8 <File::close()>
c000ccd5:	83 c4 10             	add    esp,0x10
c000ccd8:	eb 06                	jmp    c000cce0 <ACPI::open(int, int, void*)+0xe4>
c000ccda:	66 90                	xchg   ax,ax
c000ccdc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cce0:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000cce4:	74 16                	je     c000ccfc <ACPI::open(int, int, void*)+0x100>
c000cce6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cce9:	8b 00                	mov    eax,DWORD PTR [eax]
c000cceb:	83 c0 08             	add    eax,0x8
c000ccee:	8b 00                	mov    eax,DWORD PTR [eax]
c000ccf0:	83 ec 0c             	sub    esp,0xc
c000ccf3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ccf6:	ff d0                	call   eax
c000ccf8:	83 c4 10             	add    esp,0x10
c000ccfb:	90                   	nop
c000ccfc:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000ccff:	83 f0 01             	xor    eax,0x1
c000cd02:	0f b6 c0             	movzx  eax,al
c000cd05:	85 c0                	test   eax,eax
c000cd07:	74 27                	je     c000cd30 <ACPI::open(int, int, void*)+0x134>
c000cd09:	83 ec 0c             	sub    esp,0xc
c000cd0c:	68 21 39 02 c0       	push   0xc0023921
c000cd11:	e8 85 04 00 00       	call   c000d19b <KeSetBootMessage(char const*)>
c000cd16:	83 c4 10             	add    esp,0x10
c000cd19:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000cd20:	83 ec 0c             	sub    esp,0xc
c000cd23:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000cd26:	e8 df 67 00 00       	call   c001350a <Virt::setupPageSwapping(int)>
c000cd2b:	83 c4 10             	add    esp,0x10
c000cd2e:	66 90                	xchg   ax,ax
c000cd30:	83 ec 0c             	sub    esp,0xc
c000cd33:	68 3c 39 02 c0       	push   0xc002393c
c000cd38:	e8 5e 04 00 00       	call   c000d19b <KeSetBootMessage(char const*)>
c000cd3d:	83 c4 10             	add    esp,0x10
c000cd40:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cd43:	83 ec 08             	sub    esp,0x8
c000cd46:	6a 13                	push   0x13
c000cd48:	50                   	push   eax
c000cd49:	e8 7a cf ff ff       	call   c0009cc8 <getDevicesOfType(DeviceType)>
c000cd4e:	83 c4 0c             	add    esp,0xc
c000cd51:	8d 76 00             	lea    esi,[esi+0x0]
c000cd54:	83 ec 0c             	sub    esp,0xc
c000cd57:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cd5a:	50                   	push   eax
c000cd5b:	e8 7c 4f 01 00       	call   c0021cdc <LinkedList<Device>::isEmpty()>
c000cd60:	83 c4 10             	add    esp,0x10
c000cd63:	83 f0 01             	xor    eax,0x1
c000cd66:	0f b6 c0             	movzx  eax,al
c000cd69:	85 c0                	test   eax,eax
c000cd6b:	0f 84 1f 01 00 00    	je     c000ce90 <ACPI::open(int, int, void*)+0x294>
c000cd71:	83 ec 0c             	sub    esp,0xc
c000cd74:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cd77:	50                   	push   eax
c000cd78:	e8 7b 4f 01 00       	call   c0021cf8 <LinkedList<Device>::getFirstElement()>
c000cd7d:	83 c4 10             	add    esp,0x10
c000cd80:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000cd83:	83 ec 0c             	sub    esp,0xc
c000cd86:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cd89:	50                   	push   eax
c000cd8a:	e8 71 4f 01 00       	call   c0021d00 <LinkedList<Device>::removeFirst()>
c000cd8f:	83 c4 10             	add    esp,0x10
c000cd92:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000cd95:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000cd98:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000cd9b:	b8 24 00 00 00       	mov    eax,0x24
c000cda0:	83 e0 fc             	and    eax,0xfffffffc
c000cda3:	89 c3                	mov    ebx,eax
c000cda5:	b8 00 00 00 00       	mov    eax,0x0
c000cdaa:	66 90                	xchg   ax,ax
c000cdac:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000cdb3:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000cdba:	83 c0 04             	add    eax,0x4
c000cdbd:	39 d8                	cmp    eax,ebx
c000cdbf:	72 eb                	jb     c000cdac <ACPI::open(int, int, void*)+0x1b0>
c000cdc1:	83 ec 08             	sub    esp,0x8
c000cdc4:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000cdca:	50                   	push   eax
c000cdcb:	83 ec 24             	sub    esp,0x24
c000cdce:	89 e1                	mov    ecx,esp
c000cdd0:	b8 24 00 00 00       	mov    eax,0x24
c000cdd5:	83 e0 fc             	and    eax,0xfffffffc
c000cdd8:	89 c3                	mov    ebx,eax
c000cdda:	b8 00 00 00 00       	mov    eax,0x0
c000cddf:	90                   	nop
c000cde0:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000cde7:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000cdea:	83 c0 04             	add    eax,0x4
c000cded:	39 d8                	cmp    eax,ebx
c000cdef:	72 ef                	jb     c000cde0 <ACPI::open(int, int, void*)+0x1e4>
c000cdf1:	e8 e0 0a 01 00       	call   c001d8d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000cdf6:	83 c4 30             	add    esp,0x30
c000cdf9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000cdfc:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ce00:	0f 84 4e ff ff ff    	je     c000cd54 <ACPI::open(int, int, void*)+0x158>
c000ce06:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ce0d:	83 ec 0c             	sub    esp,0xc
c000ce10:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000ce13:	e8 cc 2c 00 00       	call   c000fae4 <malloc>
c000ce18:	83 c4 10             	add    esp,0x10
c000ce1b:	89 c3                	mov    ebx,eax
c000ce1d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000ce22:	83 ec 04             	sub    esp,0x4
c000ce25:	50                   	push   eax
c000ce26:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ce29:	53                   	push   ebx
c000ce2a:	e8 fd b2 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000ce2f:	83 c4 10             	add    esp,0x10
c000ce32:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000ce35:	83 ec 0c             	sub    esp,0xc
c000ce38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ce3b:	e8 ce b5 ff ff       	call   c000840e <File::exists()>
c000ce40:	83 c4 10             	add    esp,0x10
c000ce43:	0f b6 c0             	movzx  eax,al
c000ce46:	85 c0                	test   eax,eax
c000ce48:	74 22                	je     c000ce6c <ACPI::open(int, int, void*)+0x270>
c000ce4a:	83 ec 08             	sub    esp,0x8
c000ce4d:	6a 01                	push   0x1
c000ce4f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ce52:	e8 aa 93 00 00       	call   c0016201 <Thr::loadDLL(char const*, bool)>
c000ce57:	83 c4 10             	add    esp,0x10
c000ce5a:	83 ec 08             	sub    esp,0x8
c000ce5d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000ce60:	50                   	push   eax
c000ce61:	e8 fc 95 00 00       	call   c0016462 <Thr::executeDLL(unsigned long, void*)>
c000ce66:	83 c4 10             	add    esp,0x10
c000ce69:	8d 76 00             	lea    esi,[esi+0x0]
c000ce6c:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000ce70:	0f 84 de fe ff ff    	je     c000cd54 <ACPI::open(int, int, void*)+0x158>
c000ce76:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000ce79:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce7b:	83 c0 08             	add    eax,0x8
c000ce7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce80:	83 ec 0c             	sub    esp,0xc
c000ce83:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ce86:	ff d0                	call   eax
c000ce88:	83 c4 10             	add    esp,0x10
c000ce8b:	e9 c4 fe ff ff       	jmp    c000cd54 <ACPI::open(int, int, void*)+0x158>
c000ce90:	83 ec 0c             	sub    esp,0xc
c000ce93:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ce96:	50                   	push   eax
c000ce97:	e8 3c 4e 01 00       	call   c0021cd8 <LinkedList<Device>::~LinkedList()>
c000ce9c:	83 c4 10             	add    esp,0x10
c000ce9f:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000cea5:	83 ec 08             	sub    esp,0x8
c000cea8:	6a 01                	push   0x1
c000ceaa:	68 56 39 02 c0       	push   0xc0023956
c000ceaf:	e8 4d 93 00 00       	call   c0016201 <Thr::loadDLL(char const*, bool)>
c000ceb4:	83 c4 10             	add    esp,0x10
c000ceb7:	83 ec 08             	sub    esp,0x8
c000ceba:	53                   	push   ebx
c000cebb:	50                   	push   eax
c000cebc:	e8 a1 95 00 00       	call   c0016462 <Thr::executeDLL(unsigned long, void*)>
c000cec1:	83 c4 10             	add    esp,0x10
c000cec4:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000cec9:	85 c0                	test   eax,eax
c000cecb:	0f 84 ef 00 00 00    	je     c000cfc0 <ACPI::open(int, int, void*)+0x3c4>
c000ced1:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000ced6:	85 c0                	test   eax,eax
c000ced8:	0f 84 e2 00 00 00    	je     c000cfc0 <ACPI::open(int, int, void*)+0x3c4>
c000cede:	83 ec 0c             	sub    esp,0xc
c000cee1:	68 73 39 02 c0       	push   0xc0023973
c000cee6:	e8 b0 02 00 00       	call   c000d19b <KeSetBootMessage(char const*)>
c000ceeb:	83 c4 10             	add    esp,0x10
c000ceee:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000cef5:	83 ec 0c             	sub    esp,0xc
c000cef8:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000cefb:	e8 e4 2b 00 00       	call   c000fae4 <malloc>
c000cf00:	83 c4 10             	add    esp,0x10
c000cf03:	89 c3                	mov    ebx,eax
c000cf05:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cf0a:	83 ec 04             	sub    esp,0x4
c000cf0d:	50                   	push   eax
c000cf0e:	68 90 39 02 c0       	push   0xc0023990
c000cf13:	53                   	push   ebx
c000cf14:	e8 13 b2 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000cf19:	83 c4 10             	add    esp,0x10
c000cf1c:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000cf1f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf23:	74 1b                	je     c000cf40 <ACPI::open(int, int, void*)+0x344>
c000cf25:	83 ec 0c             	sub    esp,0xc
c000cf28:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cf2b:	e8 de b4 ff ff       	call   c000840e <File::exists()>
c000cf30:	83 c4 10             	add    esp,0x10
c000cf33:	0f b6 c0             	movzx  eax,al
c000cf36:	85 c0                	test   eax,eax
c000cf38:	74 06                	je     c000cf40 <ACPI::open(int, int, void*)+0x344>
c000cf3a:	b0 01                	mov    al,0x1
c000cf3c:	eb 06                	jmp    c000cf44 <ACPI::open(int, int, void*)+0x348>
c000cf3e:	66 90                	xchg   ax,ax
c000cf40:	b0 00                	mov    al,0x0
c000cf42:	66 90                	xchg   ax,ax
c000cf44:	0f b6 c0             	movzx  eax,al
c000cf47:	85 c0                	test   eax,eax
c000cf49:	74 21                	je     c000cf6c <ACPI::open(int, int, void*)+0x370>
c000cf4b:	83 ec 08             	sub    esp,0x8
c000cf4e:	6a 01                	push   0x1
c000cf50:	68 90 39 02 c0       	push   0xc0023990
c000cf55:	e8 a7 92 00 00       	call   c0016201 <Thr::loadDLL(char const*, bool)>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	83 ec 08             	sub    esp,0x8
c000cf60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cf63:	50                   	push   eax
c000cf64:	e8 f9 94 00 00       	call   c0016462 <Thr::executeDLL(unsigned long, void*)>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf70:	74 1e                	je     c000cf90 <ACPI::open(int, int, void*)+0x394>
c000cf72:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf76:	74 18                	je     c000cf90 <ACPI::open(int, int, void*)+0x394>
c000cf78:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000cf7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf7d:	83 c0 08             	add    eax,0x8
c000cf80:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf82:	83 ec 0c             	sub    esp,0xc
c000cf85:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cf88:	ff d0                	call   eax
c000cf8a:	83 c4 10             	add    esp,0x10
c000cf8d:	8d 76 00             	lea    esi,[esi+0x0]
c000cf90:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000cf95:	83 ec 08             	sub    esp,0x8
c000cf98:	68 ad 39 02 c0       	push   0xc00239ad
c000cf9d:	50                   	push   eax
c000cf9e:	e8 45 f3 ff ff       	call   c000c2e8 <findDataTable(unsigned char*, char*)>
c000cfa3:	83 c4 10             	add    esp,0x10
c000cfa6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000cfa9:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000cfad:	74 11                	je     c000cfc0 <ACPI::open(int, int, void*)+0x3c4>
c000cfaf:	83 ec 08             	sub    esp,0x8
c000cfb2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000cfb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cfb8:	e8 27 fc ff ff       	call   c000cbe4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000cfbd:	83 c4 10             	add    esp,0x10
c000cfc0:	b8 00 00 00 00       	mov    eax,0x0
c000cfc5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cfc8:	c9                   	leave  
c000cfc9:	c3                   	ret    
c000cfca:	66 90                	xchg   ax,ax

c000cfcc <KeAssertionFailed(char*, char const*, char const*, int)>:
c000cfcc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000cfd2:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000cfd9:	89 c2                	mov    edx,eax
c000cfdb:	c1 fa 1f             	sar    edx,0x1f
c000cfde:	83 ec 04             	sub    esp,0x4
c000cfe1:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000cfe5:	51                   	push   ecx
c000cfe6:	52                   	push   edx
c000cfe7:	50                   	push   eax
c000cfe8:	e8 ef 28 00 00       	call   c000f8dc <KeItoa(long long, char*)>
c000cfed:	83 c4 10             	add    esp,0x10
c000cff0:	83 ec 08             	sub    esp,0x8
c000cff3:	68 58 3a 02 c0       	push   0xc0023a58
c000cff8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000cffc:	50                   	push   eax
c000cffd:	e8 4e 36 ff ff       	call   c0000650 <strcpy>
c000d002:	83 c4 10             	add    esp,0x10
c000d005:	83 ec 08             	sub    esp,0x8
c000d008:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d00f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d013:	50                   	push   eax
c000d014:	e8 57 38 ff ff       	call   c0000870 <strcat>
c000d019:	83 c4 10             	add    esp,0x10
c000d01c:	83 ec 08             	sub    esp,0x8
c000d01f:	68 66 3a 02 c0       	push   0xc0023a66
c000d024:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d028:	50                   	push   eax
c000d029:	e8 42 38 ff ff       	call   c0000870 <strcat>
c000d02e:	83 c4 10             	add    esp,0x10
c000d031:	83 ec 08             	sub    esp,0x8
c000d034:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d03b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d03f:	50                   	push   eax
c000d040:	e8 2b 38 ff ff       	call   c0000870 <strcat>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	83 ec 08             	sub    esp,0x8
c000d04b:	68 69 3a 02 c0       	push   0xc0023a69
c000d050:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d054:	50                   	push   eax
c000d055:	e8 16 38 ff ff       	call   c0000870 <strcat>
c000d05a:	83 c4 10             	add    esp,0x10
c000d05d:	83 ec 08             	sub    esp,0x8
c000d060:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d067:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d06b:	50                   	push   eax
c000d06c:	e8 ff 37 ff ff       	call   c0000870 <strcat>
c000d071:	83 c4 10             	add    esp,0x10
c000d074:	83 ec 08             	sub    esp,0x8
c000d077:	68 69 3a 02 c0       	push   0xc0023a69
c000d07c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d080:	50                   	push   eax
c000d081:	e8 ea 37 ff ff       	call   c0000870 <strcat>
c000d086:	83 c4 10             	add    esp,0x10
c000d089:	83 ec 08             	sub    esp,0x8
c000d08c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d090:	50                   	push   eax
c000d091:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d095:	50                   	push   eax
c000d096:	e8 d5 37 ff ff       	call   c0000870 <strcat>
c000d09b:	83 c4 10             	add    esp,0x10
c000d09e:	83 ec 0c             	sub    esp,0xc
c000d0a1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0a5:	50                   	push   eax
c000d0a6:	e8 7f 2d 00 00       	call   c000fe2a <KePanic(char const*)>
c000d0ab:	83 c4 10             	add    esp,0x10
c000d0ae:	90                   	nop
c000d0af:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d0b5:	c3                   	ret    

c000d0b6 <KeInitialiseAtexit()>:
c000d0b6:	83 ec 10             	sub    esp,0x10
c000d0b9:	6a 60                	push   0x60
c000d0bb:	6a 00                	push   0x0
c000d0bd:	68 60 c0 02 c0       	push   0xc002c060
c000d0c2:	c7 05 e0 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bfe0,0x0
c000d0cc:	e8 1f 34 ff ff       	call   c00004f0 <memset>
c000d0d1:	83 c4 1c             	add    esp,0x1c
c000d0d4:	c3                   	ret    

c000d0d5 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d0d5:	a1 e0 bf 02 c0       	mov    eax,ds:0xc002bfe0
c000d0da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0de:	89 14 85 60 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3fa0],edx
c000d0e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0e9:	89 14 85 00 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4000],edx
c000d0f0:	40                   	inc    eax
c000d0f1:	a3 e0 bf 02 c0       	mov    ds:0xc002bfe0,eax
c000d0f6:	83 f8 17             	cmp    eax,0x17
c000d0f9:	7e 0d                	jle    c000d108 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d0fb:	c7 44 24 04 6b 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023a6b
c000d103:	e9 22 2d 00 00       	jmp    c000fe2a <KePanic(char const*)>
c000d108:	c3                   	ret    

c000d109 <KeExecuteAtexit()>:
c000d109:	53                   	push   ebx
c000d10a:	31 db                	xor    ebx,ebx
c000d10c:	83 ec 08             	sub    esp,0x8
c000d10f:	39 1d e0 bf 02 c0    	cmp    DWORD PTR ds:0xc002bfe0,ebx
c000d115:	7e 50                	jle    c000d167 <KeExecuteAtexit()+0x5e>
c000d117:	8b 04 9d 60 c0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3fa0]
c000d11e:	85 c0                	test   eax,eax
c000d120:	74 42                	je     c000d164 <KeExecuteAtexit()+0x5b>
c000d122:	51                   	push   ecx
c000d123:	50                   	push   eax
c000d124:	53                   	push   ebx
c000d125:	68 84 3a 02 c0       	push   0xc0023a84
c000d12a:	e8 1f 9e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d12f:	58                   	pop    eax
c000d130:	ff 34 9d 00 c0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4000]
c000d137:	ff 14 9d 60 c0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd3fa0]
c000d13e:	c7 04 24 a6 3a 02 c0 	mov    DWORD PTR [esp],0xc0023aa6
c000d145:	e8 04 9e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d14a:	c7 04 24 37 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e37
c000d151:	c7 04 9d 60 c0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd3fa0],0x0
c000d15c:	e8 ed 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d161:	83 c4 10             	add    esp,0x10
c000d164:	43                   	inc    ebx
c000d165:	eb a8                	jmp    c000d10f <KeExecuteAtexit()+0x6>
c000d167:	83 c4 08             	add    esp,0x8
c000d16a:	5b                   	pop    ebx
c000d16b:	c3                   	ret    

c000d16c <KeDisplaySplashScreen()>:
c000d16c:	53                   	push   ebx
c000d16d:	bb 01 00 00 00       	mov    ebx,0x1
c000d172:	83 ec 08             	sub    esp,0x8
c000d175:	43                   	inc    ebx
c000d176:	0f be 83 a9 3a 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc557]
c000d17d:	85 c0                	test   eax,eax
c000d17f:	74 15                	je     c000d196 <KeDisplaySplashScreen()+0x2a>
c000d181:	83 ec 0c             	sub    esp,0xc
c000d184:	6a 01                	push   0x1
c000d186:	53                   	push   ebx
c000d187:	6a 00                	push   0x0
c000d189:	6a 0f                	push   0xf
c000d18b:	50                   	push   eax
c000d18c:	e8 0f de 00 00       	call   c001afa0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d191:	83 c4 20             	add    esp,0x20
c000d194:	eb df                	jmp    c000d175 <KeDisplaySplashScreen()+0x9>
c000d196:	83 c4 08             	add    esp,0x8
c000d199:	5b                   	pop    ebx
c000d19a:	c3                   	ret    

c000d19b <KeSetBootMessage(char const*)>:
c000d19b:	57                   	push   edi
c000d19c:	56                   	push   esi
c000d19d:	53                   	push   ebx
c000d19e:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d1a4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d1ab:	68 9e 00 00 00       	push   0x9e
c000d1b0:	6a 00                	push   0x0
c000d1b2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d1b6:	56                   	push   esi
c000d1b7:	e8 34 33 ff ff       	call   c00004f0 <memset>
c000d1bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d1bf:	e8 bc 33 ff ff       	call   c0000580 <strlen>
c000d1c4:	ba 50 00 00 00       	mov    edx,0x50
c000d1c9:	83 c4 10             	add    esp,0x10
c000d1cc:	31 c9                	xor    ecx,ecx
c000d1ce:	29 c2                	sub    edx,eax
c000d1d0:	83 e2 fe             	and    edx,0xfffffffe
c000d1d3:	01 f2                	add    edx,esi
c000d1d5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d1da:	84 c0                	test   al,al
c000d1dc:	74 0a                	je     c000d1e8 <KeSetBootMessage(char const*)+0x4d>
c000d1de:	80 cc 07             	or     ah,0x7
c000d1e1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d1e5:	41                   	inc    ecx
c000d1e6:	eb ed                	jmp    c000d1d5 <KeSetBootMessage(char const*)+0x3a>
c000d1e8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d1ed:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d1f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d1f4:	50                   	push   eax
c000d1f5:	50                   	push   eax
c000d1f6:	53                   	push   ebx
c000d1f7:	68 be 3a 02 c0       	push   0xc0023abe
c000d1fc:	e8 4d 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d201:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d207:	5b                   	pop    ebx
c000d208:	5e                   	pop    esi
c000d209:	5f                   	pop    edi
c000d20a:	c3                   	ret    

c000d20b <__cxa_atexit>:
c000d20b:	31 c0                	xor    eax,eax
c000d20d:	c3                   	ret    

c000d20e <__cxa_finalize>:
c000d20e:	c3                   	ret    

c000d20f <__stack_chk_fail>:
c000d20f:	55                   	push   ebp
c000d210:	89 e5                	mov    ebp,esp
c000d212:	83 ec 10             	sub    esp,0x10
c000d215:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d218:	68 cc 3a 02 c0       	push   0xc0023acc
c000d21d:	e8 2c 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d222:	58                   	pop    eax
c000d223:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d226:	5a                   	pop    edx
c000d227:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d22a:	68 cc 3a 02 c0       	push   0xc0023acc
c000d22f:	e8 1a 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d234:	c7 04 24 d4 3a 02 c0 	mov    DWORD PTR [esp],0xc0023ad4
c000d23b:	e8 ea 2b 00 00       	call   c000fe2a <KePanic(char const*)>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	c9                   	leave  
c000d244:	c3                   	ret    

c000d245 <__cxa_pure_virtual>:
c000d245:	83 ec 18             	sub    esp,0x18
c000d248:	68 ec 3a 02 c0       	push   0xc0023aec
c000d24d:	e8 d8 2b 00 00       	call   c000fe2a <KePanic(char const*)>
c000d252:	83 c4 1c             	add    esp,0x1c
c000d255:	c3                   	ret    

c000d256 <operator new[](unsigned long)>:
c000d256:	e9 89 28 00 00       	jmp    c000fae4 <malloc>

c000d25b <operator delete(void*, unsigned long)>:
c000d25b:	e9 a4 28 00 00       	jmp    c000fb04 <rfree>

c000d260 <operator delete[](void*)>:
c000d260:	e9 9f 28 00 00       	jmp    c000fb04 <rfree>

c000d265 <operator delete[](void*, unsigned long)>:
c000d265:	e9 9a 28 00 00       	jmp    c000fb04 <rfree>
c000d26a:	66 90                	xchg   ax,ax

c000d26c <CUnlockScheduler>:
c000d26c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000d274:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d279:	85 c0                	test   eax,eax
c000d27b:	75 03                	jne    c000d280 <CUnlockScheduler+0x14>
c000d27d:	fb                   	sti    
c000d27e:	66 90                	xchg   ax,ax
c000d280:	90                   	nop
c000d281:	c3                   	ret    
c000d282:	66 90                	xchg   ax,ax

c000d284 <CLockScheduler>:
c000d284:	fa                   	cli    
c000d285:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d28a:	83 c0 01             	add    eax,0x1
c000d28d:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000d292:	90                   	nop
c000d293:	c3                   	ret    

c000d294 <CPrintf>:
c000d294:	83 ec 0c             	sub    esp,0xc
c000d297:	83 ec 08             	sub    esp,0x8
c000d29a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d29e:	68 ff 3a 02 c0       	push   0xc0023aff
c000d2a3:	e8 a6 9c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d2a8:	83 c4 10             	add    esp,0x10
c000d2ab:	90                   	nop
c000d2ac:	83 c4 0c             	add    esp,0xc
c000d2af:	c3                   	ret    

c000d2b0 <CmOpen(char const*)>:
c000d2b0:	57                   	push   edi
c000d2b1:	56                   	push   esi
c000d2b2:	53                   	push   ebx
c000d2b3:	83 ec 1c             	sub    esp,0x1c
c000d2b6:	6a 30                	push   0x30
c000d2b8:	e8 27 28 00 00       	call   c000fae4 <malloc>
c000d2bd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d2c4:	89 c3                	mov    ebx,eax
c000d2c6:	e8 19 28 00 00       	call   c000fae4 <malloc>
c000d2cb:	83 c4 0c             	add    esp,0xc
c000d2ce:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000d2d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d2d8:	89 c6                	mov    esi,eax
c000d2da:	50                   	push   eax
c000d2db:	e8 4c ae ff ff       	call   c000812c <File::File(char const*, Process*)>
c000d2e0:	83 c4 0c             	add    esp,0xc
c000d2e3:	89 33                	mov    DWORD PTR [ebx],esi
c000d2e5:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d2e9:	50                   	push   eax
c000d2ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d2ee:	50                   	push   eax
c000d2ef:	56                   	push   esi
c000d2f0:	e8 57 b1 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000d2f5:	5a                   	pop    edx
c000d2f6:	59                   	pop    ecx
c000d2f7:	6a 01                	push   0x1
c000d2f9:	ff 33                	push   DWORD PTR [ebx]
c000d2fb:	e8 4a ae ff ff       	call   c000814a <File::open(FileOpenMode)>
c000d300:	5e                   	pop    esi
c000d301:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d305:	e8 da 27 00 00       	call   c000fae4 <malloc>
c000d30a:	5a                   	pop    edx
c000d30b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d30f:	89 c7                	mov    edi,eax
c000d311:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d313:	8b 10                	mov    edx,DWORD PTR [eax]
c000d315:	56                   	push   esi
c000d316:	57                   	push   edi
c000d317:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d31b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d31f:	50                   	push   eax
c000d320:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d323:	83 c4 14             	add    esp,0x14
c000d326:	ff 33                	push   DWORD PTR [ebx]
c000d328:	e8 7b ae ff ff       	call   c00081a8 <File::close()>
c000d32d:	59                   	pop    ecx
c000d32e:	58                   	pop    eax
c000d32f:	6a 13                	push   0x13
c000d331:	ff 33                	push   DWORD PTR [ebx]
c000d333:	e8 12 ae ff ff       	call   c000814a <File::open(FileOpenMode)>
c000d338:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d33a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d33c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d33f:	57                   	push   edi
c000d340:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d344:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d348:	50                   	push   eax
c000d349:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d34c:	83 c4 14             	add    esp,0x14
c000d34f:	57                   	push   edi
c000d350:	e8 9f 27 00 00       	call   c000faf4 <free>
c000d355:	83 c4 10             	add    esp,0x10
c000d358:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d35b:	75 10                	jne    c000d36d <CmOpen(char const*)+0xbd>
c000d35d:	83 ec 0c             	sub    esp,0xc
c000d360:	68 02 3b 02 c0       	push   0xc0023b02
c000d365:	e8 c0 2a 00 00       	call   c000fe2a <KePanic(char const*)>
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	50                   	push   eax
c000d36e:	6a 00                	push   0x0
c000d370:	6a 00                	push   0x0
c000d372:	ff 33                	push   DWORD PTR [ebx]
c000d374:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d377:	e8 8c ae ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d37c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d37e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d380:	89 34 24             	mov    DWORD PTR [esp],esi
c000d383:	57                   	push   edi
c000d384:	6a 00                	push   0x0
c000d386:	6a 2b                	push   0x2b
c000d388:	50                   	push   eax
c000d389:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d38c:	83 c4 1c             	add    esp,0x1c
c000d38f:	6a 00                	push   0x0
c000d391:	6a 00                	push   0x0
c000d393:	ff 33                	push   DWORD PTR [ebx]
c000d395:	e8 6e ae ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d39a:	83 c4 0c             	add    esp,0xc
c000d39d:	6a 08                	push   0x8
c000d39f:	68 13 3b 02 c0       	push   0xc0023b13
c000d3a4:	57                   	push   edi
c000d3a5:	e8 d6 2f ff ff       	call   c0000380 <memcmp>
c000d3aa:	83 c4 10             	add    esp,0x10
c000d3ad:	85 c0                	test   eax,eax
c000d3af:	74 10                	je     c000d3c1 <CmOpen(char const*)+0x111>
c000d3b1:	83 ec 0c             	sub    esp,0xc
c000d3b4:	68 1c 3b 02 c0       	push   0xc0023b1c
c000d3b9:	e8 6c 2a 00 00       	call   c000fe2a <KePanic(char const*)>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d3c5:	83 c4 10             	add    esp,0x10
c000d3c8:	89 d8                	mov    eax,ebx
c000d3ca:	5b                   	pop    ebx
c000d3cb:	5e                   	pop    esi
c000d3cc:	5f                   	pop    edi
c000d3cd:	c3                   	ret    

c000d3ce <CmClose(Reghive_Tag*)>:
c000d3ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3d2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d3d6:	74 0b                	je     c000d3e3 <CmClose(Reghive_Tag*)+0x15>
c000d3d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d3de:	e9 c5 ad ff ff       	jmp    c00081a8 <File::close()>
c000d3e3:	c3                   	ret    

c000d3e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d3e4:	53                   	push   ebx
c000d3e5:	83 ec 18             	sub    esp,0x18
c000d3e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d3ec:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d3f0:	74 29                	je     c000d41b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d3f2:	50                   	push   eax
c000d3f3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d3f8:	99                   	cdq    
c000d3f9:	52                   	push   edx
c000d3fa:	50                   	push   eax
c000d3fb:	ff 33                	push   DWORD PTR [ebx]
c000d3fd:	e8 06 ae ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d402:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d404:	5a                   	pop    edx
c000d405:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d409:	8b 10                	mov    edx,DWORD PTR [eax]
c000d40b:	51                   	push   ecx
c000d40c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d410:	6a 00                	push   0x0
c000d412:	6a 2b                	push   0x2b
c000d414:	50                   	push   eax
c000d415:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d418:	83 c4 20             	add    esp,0x20
c000d41b:	83 c4 18             	add    esp,0x18
c000d41e:	5b                   	pop    ebx
c000d41f:	c3                   	ret    

c000d420 <CmGetString(Reghive_Tag*, int, char*)>:
c000d420:	55                   	push   ebp
c000d421:	57                   	push   edi
c000d422:	56                   	push   esi
c000d423:	53                   	push   ebx
c000d424:	31 db                	xor    ebx,ebx
c000d426:	83 ec 70             	sub    esp,0x70
c000d429:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d42d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d434:	50                   	push   eax
c000d435:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d43c:	55                   	push   ebp
c000d43d:	e8 a2 ff ff ff       	call   c000d3e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d442:	83 c4 10             	add    esp,0x10
c000d445:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d44a:	c1 e0 08             	shl    eax,0x8
c000d44d:	89 c2                	mov    edx,eax
c000d44f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d454:	09 d0                	or     eax,edx
c000d456:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d45b:	c1 e0 08             	shl    eax,0x8
c000d45e:	09 d0                	or     eax,edx
c000d460:	74 25                	je     c000d487 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d462:	52                   	push   edx
c000d463:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d467:	52                   	push   edx
c000d468:	6b fb 0d             	imul   edi,ebx,0xd
c000d46b:	50                   	push   eax
c000d46c:	55                   	push   ebp
c000d46d:	e8 72 ff ff ff       	call   c000d3e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d472:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d476:	b9 27 00 00 00       	mov    ecx,0x27
c000d47b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d482:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d484:	83 c4 10             	add    esp,0x10
c000d487:	83 c3 03             	add    ebx,0x3
c000d48a:	83 fb 15             	cmp    ebx,0x15
c000d48d:	75 b6                	jne    c000d445 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d48f:	83 c4 6c             	add    esp,0x6c
c000d492:	5b                   	pop    ebx
c000d493:	5e                   	pop    esi
c000d494:	5f                   	pop    edi
c000d495:	5d                   	pop    ebp
c000d496:	c3                   	ret    

c000d497 <CmEnterDirectory(Reghive_Tag*, int)>:
c000d497:	83 ec 40             	sub    esp,0x40
c000d49a:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d49e:	50                   	push   eax
c000d49f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4a7:	e8 38 ff ff ff       	call   c000d3e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4ac:	83 c4 10             	add    esp,0x10
c000d4af:	83 c8 ff             	or     eax,0xffffffff
c000d4b2:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d4b7:	75 19                	jne    c000d4d2 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d4b9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d4be:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d4c3:	c1 e0 08             	shl    eax,0x8
c000d4c6:	09 c2                	or     edx,eax
c000d4c8:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d4cd:	c1 e0 10             	shl    eax,0x10
c000d4d0:	09 d0                	or     eax,edx
c000d4d2:	83 c4 3c             	add    esp,0x3c
c000d4d5:	c3                   	ret    

c000d4d6 <CmGetNext(Reghive_Tag*, int)>:
c000d4d6:	83 ec 40             	sub    esp,0x40
c000d4d9:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d4dd:	50                   	push   eax
c000d4de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4e6:	e8 f9 fe ff ff       	call   c000d3e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4eb:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d4f0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d4f5:	c1 e0 08             	shl    eax,0x8
c000d4f8:	09 c2                	or     edx,eax
c000d4fa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d4ff:	83 c4 4c             	add    esp,0x4c
c000d502:	c1 e0 10             	shl    eax,0x10
c000d505:	09 d0                	or     eax,edx
c000d507:	c3                   	ret    

c000d508 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d508:	53                   	push   ebx
c000d509:	83 ec 18             	sub    esp,0x18
c000d50c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d510:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d514:	74 29                	je     c000d53f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d516:	50                   	push   eax
c000d517:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d51c:	99                   	cdq    
c000d51d:	52                   	push   edx
c000d51e:	50                   	push   eax
c000d51f:	ff 33                	push   DWORD PTR [ebx]
c000d521:	e8 e2 ac ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d526:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d528:	5a                   	pop    edx
c000d529:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d52d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d52f:	51                   	push   ecx
c000d530:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d534:	6a 00                	push   0x0
c000d536:	6a 2b                	push   0x2b
c000d538:	50                   	push   eax
c000d539:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d53c:	83 c4 20             	add    esp,0x20
c000d53f:	83 c4 18             	add    esp,0x18
c000d542:	5b                   	pop    ebx
c000d543:	c3                   	ret    

c000d544 <CmFreeExtent(Reghive_Tag*, int)>:
c000d544:	53                   	push   ebx
c000d545:	83 ec 3c             	sub    esp,0x3c
c000d548:	6a 2b                	push   0x2b
c000d54a:	6a 00                	push   0x0
c000d54c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d550:	53                   	push   ebx
c000d551:	e8 9a 2f ff ff       	call   c00004f0 <memset>
c000d556:	83 c4 0c             	add    esp,0xc
c000d559:	53                   	push   ebx
c000d55a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d55e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d562:	e8 a1 ff ff ff       	call   c000d508 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d567:	83 c4 48             	add    esp,0x48
c000d56a:	5b                   	pop    ebx
c000d56b:	c3                   	ret    

c000d56c <CmUpdateHeader(Reghive_Tag*)>:
c000d56c:	83 ec 0c             	sub    esp,0xc
c000d56f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d573:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d577:	74 10                	je     c000d589 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d579:	52                   	push   edx
c000d57a:	8d 50 05             	lea    edx,[eax+0x5]
c000d57d:	52                   	push   edx
c000d57e:	6a 00                	push   0x0
c000d580:	50                   	push   eax
c000d581:	e8 82 ff ff ff       	call   c000d508 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d586:	83 c4 10             	add    esp,0x10
c000d589:	83 c4 0c             	add    esp,0xc
c000d58c:	c3                   	ret    

c000d58d <CmExpand(Reghive_Tag*, int)>:
c000d58d:	55                   	push   ebp
c000d58e:	57                   	push   edi
c000d58f:	83 cf ff             	or     edi,0xffffffff
c000d592:	56                   	push   esi
c000d593:	53                   	push   ebx
c000d594:	83 ec 3c             	sub    esp,0x3c
c000d597:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000d59b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d59f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d5a3:	74 59                	je     c000d5fe <CmExpand(Reghive_Tag*, int)+0x71>
c000d5a5:	50                   	push   eax
c000d5a6:	31 d2                	xor    edx,edx
c000d5a8:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d5ac:	31 ff                	xor    edi,edi
c000d5ae:	52                   	push   edx
c000d5af:	50                   	push   eax
c000d5b0:	ff 33                	push   DWORD PTR [ebx]
c000d5b2:	e8 51 ac ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d5b7:	83 c4 0c             	add    esp,0xc
c000d5ba:	6a 2b                	push   0x2b
c000d5bc:	6a 00                	push   0x0
c000d5be:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000d5c2:	55                   	push   ebp
c000d5c3:	e8 28 2f ff ff       	call   c00004f0 <memset>
c000d5c8:	83 c4 10             	add    esp,0x10
c000d5cb:	39 f7                	cmp    edi,esi
c000d5cd:	7d 1b                	jge    c000d5ea <CmExpand(Reghive_Tag*, int)+0x5d>
c000d5cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d5d1:	83 ec 0c             	sub    esp,0xc
c000d5d4:	47                   	inc    edi
c000d5d5:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d5d9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5db:	51                   	push   ecx
c000d5dc:	55                   	push   ebp
c000d5dd:	6a 00                	push   0x0
c000d5df:	6a 2b                	push   0x2b
c000d5e1:	50                   	push   eax
c000d5e2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d5e5:	83 c4 20             	add    esp,0x20
c000d5e8:	eb e1                	jmp    c000d5cb <CmExpand(Reghive_Tag*, int)+0x3e>
c000d5ea:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000d5ed:	83 ec 0c             	sub    esp,0xc
c000d5f0:	01 fe                	add    esi,edi
c000d5f2:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000d5f5:	53                   	push   ebx
c000d5f6:	e8 71 ff ff ff       	call   c000d56c <CmUpdateHeader(Reghive_Tag*)>
c000d5fb:	83 c4 10             	add    esp,0x10
c000d5fe:	83 c4 3c             	add    esp,0x3c
c000d601:	89 f8                	mov    eax,edi
c000d603:	5b                   	pop    ebx
c000d604:	5e                   	pop    esi
c000d605:	5f                   	pop    edi
c000d606:	5d                   	pop    ebp
c000d607:	c3                   	ret    

c000d608 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d608:	55                   	push   ebp
c000d609:	57                   	push   edi
c000d60a:	56                   	push   esi
c000d60b:	53                   	push   ebx
c000d60c:	83 cb ff             	or     ebx,0xffffffff
c000d60f:	83 ec 1c             	sub    esp,0x1c
c000d612:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d616:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d61a:	74 68                	je     c000d684 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d61c:	51                   	push   ecx
c000d61d:	be 2b 00 00 00       	mov    esi,0x2b
c000d622:	6a 00                	push   0x0
c000d624:	31 ff                	xor    edi,edi
c000d626:	6a 00                	push   0x0
c000d628:	31 db                	xor    ebx,ebx
c000d62a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d62d:	e8 d6 ab ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d632:	83 c4 10             	add    esp,0x10
c000d635:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d638:	76 3b                	jbe    c000d675 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d63a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d63d:	83 ec 0c             	sub    esp,0xc
c000d640:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d644:	8b 10                	mov    edx,DWORD PTR [eax]
c000d646:	51                   	push   ecx
c000d647:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d64b:	51                   	push   ecx
c000d64c:	6a 00                	push   0x0
c000d64e:	6a 01                	push   0x1
c000d650:	50                   	push   eax
c000d651:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d654:	83 c4 20             	add    esp,0x20
c000d657:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d65c:	74 26                	je     c000d684 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d65e:	52                   	push   edx
c000d65f:	43                   	inc    ebx
c000d660:	57                   	push   edi
c000d661:	56                   	push   esi
c000d662:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d665:	e8 9e ab ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d66a:	83 c6 2b             	add    esi,0x2b
c000d66d:	83 d7 00             	adc    edi,0x0
c000d670:	83 c4 10             	add    esp,0x10
c000d673:	eb c0                	jmp    c000d635 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d675:	50                   	push   eax
c000d676:	50                   	push   eax
c000d677:	6a 40                	push   0x40
c000d679:	55                   	push   ebp
c000d67a:	e8 0e ff ff ff       	call   c000d58d <CmExpand(Reghive_Tag*, int)>
c000d67f:	83 c4 10             	add    esp,0x10
c000d682:	89 c3                	mov    ebx,eax
c000d684:	83 c4 1c             	add    esp,0x1c
c000d687:	89 d8                	mov    eax,ebx
c000d689:	5b                   	pop    ebx
c000d68a:	5e                   	pop    esi
c000d68b:	5f                   	pop    edi
c000d68c:	5d                   	pop    ebp
c000d68d:	c3                   	ret    

c000d68e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d68e:	55                   	push   ebp
c000d68f:	57                   	push   edi
c000d690:	56                   	push   esi
c000d691:	53                   	push   ebx
c000d692:	81 ec 88 00 00 00    	sub    esp,0x88
c000d698:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d69f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d6a6:	e8 5d ff ff ff       	call   c000d608 <CmFindUnusedExtent(Reghive_Tag*)>
c000d6ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d6af:	83 c4 0c             	add    esp,0xc
c000d6b2:	6a 2b                	push   0x2b
c000d6b4:	6a 00                	push   0x0
c000d6b6:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d6ba:	55                   	push   ebp
c000d6bb:	e8 30 2e ff ff       	call   c00004f0 <memset>
c000d6c0:	83 c4 10             	add    esp,0x10
c000d6c3:	85 db                	test   ebx,ebx
c000d6c5:	74 12                	je     c000d6d9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d6c7:	51                   	push   ecx
c000d6c8:	55                   	push   ebp
c000d6c9:	53                   	push   ebx
c000d6ca:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d6d1:	e8 0e fd ff ff       	call   c000d3e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d6dd:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d6e4:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d6e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6eb:	85 db                	test   ebx,ebx
c000d6ed:	74 49                	je     c000d738 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d6ef:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d6f4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d6f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6fd:	c1 e0 08             	shl    eax,0x8
c000d700:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d706:	09 c8                	or     eax,ecx
c000d708:	74 11                	je     c000d71b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d70a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d70e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d712:	c1 e8 10             	shr    eax,0x10
c000d715:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d719:	eb 0f                	jmp    c000d72a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d71b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d720:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d725:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d72a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d72e:	c1 ea 08             	shr    edx,0x8
c000d731:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d736:	eb 0f                	jmp    c000d747 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d738:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d73d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d742:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d747:	52                   	push   edx
c000d748:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d74c:	50                   	push   eax
c000d74d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d751:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d758:	e8 ab fd ff ff       	call   c000d508 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d75d:	83 c4 10             	add    esp,0x10
c000d760:	85 db                	test   ebx,ebx
c000d762:	74 12                	je     c000d776 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d764:	50                   	push   eax
c000d765:	55                   	push   ebp
c000d766:	53                   	push   ebx
c000d767:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d76e:	e8 95 fd ff ff       	call   c000d508 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d773:	83 c4 10             	add    esp,0x10
c000d776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d77a:	83 c4 7c             	add    esp,0x7c
c000d77d:	5b                   	pop    ebx
c000d77e:	5e                   	pop    esi
c000d77f:	5f                   	pop    edi
c000d780:	5d                   	pop    ebp
c000d781:	c3                   	ret    

c000d782 <CmSetString(Reghive_Tag*, int, char const*)>:
c000d782:	55                   	push   ebp
c000d783:	57                   	push   edi
c000d784:	56                   	push   esi
c000d785:	53                   	push   ebx
c000d786:	bb 27 00 00 00       	mov    ebx,0x27
c000d78b:	81 ec 88 00 00 00    	sub    esp,0x88
c000d791:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000d798:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d79f:	e8 dc 2d ff ff       	call   c0000580 <strlen>
c000d7a4:	8d 48 26             	lea    ecx,[eax+0x26]
c000d7a7:	89 c8                	mov    eax,ecx
c000d7a9:	99                   	cdq    
c000d7aa:	f7 fb                	idiv   ebx
c000d7ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d7b0:	83 c4 10             	add    esp,0x10
c000d7b3:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d7b9:	7e 10                	jle    c000d7cb <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d7bb:	83 ec 0c             	sub    esp,0xc
c000d7be:	68 2d 3b 02 c0       	push   0xc0023b2d
c000d7c3:	e8 62 26 00 00       	call   c000fe2a <KePanic(char const*)>
c000d7c8:	83 c4 10             	add    esp,0x10
c000d7cb:	53                   	push   ebx
c000d7cc:	31 ed                	xor    ebp,ebp
c000d7ce:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d7d2:	53                   	push   ebx
c000d7d3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7da:	57                   	push   edi
c000d7db:	e8 04 fc ff ff       	call   c000d3e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d7e0:	83 c4 10             	add    esp,0x10
c000d7e3:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000d7e7:	89 f0                	mov    eax,esi
c000d7e9:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000d7ed:	c1 e0 08             	shl    eax,0x8
c000d7f0:	09 c6                	or     esi,eax
c000d7f2:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d7f6:	c1 e6 08             	shl    esi,0x8
c000d7f9:	09 c6                	or     esi,eax
c000d7fb:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000d7ff:	7e 72                	jle    c000d873 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000d801:	85 f6                	test   esi,esi
c000d803:	75 25                	jne    c000d82a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d805:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d80a:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d80e:	50                   	push   eax
c000d80f:	6a 00                	push   0x0
c000d811:	6a 00                	push   0x0
c000d813:	57                   	push   edi
c000d814:	e8 75 fe ff ff       	call   c000d68e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d819:	83 c4 10             	add    esp,0x10
c000d81c:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d81f:	89 c6                	mov    esi,eax
c000d821:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d824:	c1 f8 10             	sar    eax,0x10
c000d827:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d82a:	51                   	push   ecx
c000d82b:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d82f:	52                   	push   edx
c000d830:	56                   	push   esi
c000d831:	57                   	push   edi
c000d832:	e8 ad fb ff ff       	call   c000d3e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d837:	83 c4 0c             	add    esp,0xc
c000d83a:	6a 27                	push   0x27
c000d83c:	6a 00                	push   0x0
c000d83e:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d842:	51                   	push   ecx
c000d843:	e8 a8 2c ff ff       	call   c00004f0 <memset>
c000d848:	6b c5 27             	imul   eax,ebp,0x27
c000d84b:	83 c4 0c             	add    esp,0xc
c000d84e:	6a 27                	push   0x27
c000d850:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d857:	50                   	push   eax
c000d858:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d85c:	51                   	push   ecx
c000d85d:	e8 2e 2e ff ff       	call   c0000690 <strncpy>
c000d862:	83 c4 0c             	add    esp,0xc
c000d865:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d869:	52                   	push   edx
c000d86a:	56                   	push   esi
c000d86b:	57                   	push   edi
c000d86c:	e8 97 fc ff ff       	call   c000d508 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d871:	eb 19                	jmp    c000d88c <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000d873:	85 f6                	test   esi,esi
c000d875:	74 18                	je     c000d88f <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000d877:	52                   	push   edx
c000d878:	52                   	push   edx
c000d879:	56                   	push   esi
c000d87a:	57                   	push   edi
c000d87b:	e8 c4 fc ff ff       	call   c000d544 <CmFreeExtent(Reghive_Tag*, int)>
c000d880:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d884:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d888:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d88c:	83 c4 10             	add    esp,0x10
c000d88f:	45                   	inc    ebp
c000d890:	83 c3 03             	add    ebx,0x3
c000d893:	83 fd 07             	cmp    ebp,0x7
c000d896:	0f 85 47 ff ff ff    	jne    c000d7e3 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d89c:	50                   	push   eax
c000d89d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d8a1:	50                   	push   eax
c000d8a2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8a9:	57                   	push   edi
c000d8aa:	e8 59 fc ff ff       	call   c000d508 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8af:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d8b5:	5b                   	pop    ebx
c000d8b6:	5e                   	pop    esi
c000d8b7:	5f                   	pop    edi
c000d8b8:	5d                   	pop    ebp
c000d8b9:	c3                   	ret    

c000d8ba <CmGetMatch(char*, char*, bool, bool*)>:
c000d8ba:	56                   	push   esi
c000d8bb:	53                   	push   ebx
c000d8bc:	50                   	push   eax
c000d8bd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d8c2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d8c6:	74 25                	je     c000d8ed <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d8c8:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d8cb:	31 db                	xor    ebx,ebx
c000d8cd:	50                   	push   eax
c000d8ce:	50                   	push   eax
c000d8cf:	8d 04 9d a0 5f 02 c0 	lea    eax,[ebx*4-0x3ffda060]
c000d8d6:	50                   	push   eax
c000d8d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8db:	e8 a0 2e ff ff       	call   c0000780 <strcmp>
c000d8e0:	83 c4 10             	add    esp,0x10
c000d8e3:	85 c0                	test   eax,eax
c000d8e5:	74 2e                	je     c000d915 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d8e7:	43                   	inc    ebx
c000d8e8:	83 fb 3f             	cmp    ebx,0x3f
c000d8eb:	75 e0                	jne    c000d8cd <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d8ed:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d8f0:	31 db                	xor    ebx,ebx
c000d8f2:	51                   	push   ecx
c000d8f3:	51                   	push   ecx
c000d8f4:	8d 04 9d a0 5f 02 c0 	lea    eax,[ebx*4-0x3ffda060]
c000d8fb:	50                   	push   eax
c000d8fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d900:	e8 7b 2e ff ff       	call   c0000780 <strcmp>
c000d905:	83 c4 10             	add    esp,0x10
c000d908:	85 c0                	test   eax,eax
c000d90a:	74 09                	je     c000d915 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d90c:	43                   	inc    ebx
c000d90d:	83 fb 3f             	cmp    ebx,0x3f
c000d910:	75 e0                	jne    c000d8f2 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d912:	83 cb ff             	or     ebx,0xffffffff
c000d915:	5a                   	pop    edx
c000d916:	89 d8                	mov    eax,ebx
c000d918:	5b                   	pop    ebx
c000d919:	5e                   	pop    esi
c000d91a:	c3                   	ret    

c000d91b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d91b:	55                   	push   ebp
c000d91c:	31 c0                	xor    eax,eax
c000d91e:	57                   	push   edi
c000d91f:	56                   	push   esi
c000d920:	53                   	push   ebx
c000d921:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d925:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d929:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d92d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d931:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d933:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d936:	83 fd 1f             	cmp    ebp,0x1f
c000d939:	7f 0b                	jg     c000d946 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d93b:	0f b6 c2             	movzx  eax,dl
c000d93e:	d3 e0                	shl    eax,cl
c000d940:	09 07                	or     DWORD PTR [edi],eax
c000d942:	b0 01                	mov    al,0x1
c000d944:	01 33                	add    DWORD PTR [ebx],esi
c000d946:	5b                   	pop    ebx
c000d947:	5e                   	pop    esi
c000d948:	5f                   	pop    edi
c000d949:	5d                   	pop    ebp
c000d94a:	c3                   	ret    

c000d94b <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d94b:	57                   	push   edi
c000d94c:	56                   	push   esi
c000d94d:	53                   	push   ebx
c000d94e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d952:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d956:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d95a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d95e:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d960:	7c 17                	jl     c000d979 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d962:	8b 17                	mov    edx,DWORD PTR [edi]
c000d964:	b8 01 00 00 00       	mov    eax,0x1
c000d969:	d3 e0                	shl    eax,cl
c000d96b:	48                   	dec    eax
c000d96c:	21 d0                	and    eax,edx
c000d96e:	d3 ea                	shr    edx,cl
c000d970:	89 17                	mov    DWORD PTR [edi],edx
c000d972:	29 0b                	sub    DWORD PTR [ebx],ecx
c000d974:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d977:	eb 05                	jmp    c000d97e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000d979:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d97c:	31 c0                	xor    eax,eax
c000d97e:	5b                   	pop    ebx
c000d97f:	5e                   	pop    esi
c000d980:	5f                   	pop    edi
c000d981:	c3                   	ret    

c000d982 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000d982:	83 ec 40             	sub    esp,0x40
c000d985:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d989:	50                   	push   eax
c000d98a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d98e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d992:	e8 4d fa ff ff       	call   c000d3e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d997:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d99b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000d99f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000d9a3:	89 10                	mov    DWORD PTR [eax],edx
c000d9a5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000d9a8:	83 c4 4c             	add    esp,0x4c
c000d9ab:	c3                   	ret    

c000d9ac <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000d9ac:	55                   	push   ebp
c000d9ad:	57                   	push   edi
c000d9ae:	56                   	push   esi
c000d9af:	53                   	push   ebx
c000d9b0:	83 ec 40             	sub    esp,0x40
c000d9b3:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000d9b7:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000d9bb:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000d9bf:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d9c3:	53                   	push   ebx
c000d9c4:	56                   	push   esi
c000d9c5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d9c9:	e8 16 fa ff ff       	call   c000d3e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9ce:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000d9d2:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000d9d6:	83 c4 0c             	add    esp,0xc
c000d9d9:	53                   	push   ebx
c000d9da:	56                   	push   esi
c000d9db:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d9df:	e8 24 fb ff ff       	call   c000d508 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d9e4:	83 c4 4c             	add    esp,0x4c
c000d9e7:	5b                   	pop    ebx
c000d9e8:	5e                   	pop    esi
c000d9e9:	5f                   	pop    edi
c000d9ea:	5d                   	pop    ebp
c000d9eb:	c3                   	ret    

c000d9ec <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000d9ec:	55                   	push   ebp
c000d9ed:	57                   	push   edi
c000d9ee:	56                   	push   esi
c000d9ef:	31 f6                	xor    esi,esi
c000d9f1:	53                   	push   ebx
c000d9f2:	31 db                	xor    ebx,ebx
c000d9f4:	83 ec 40             	sub    esp,0x40
c000d9f7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d9ff:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000da07:	6a 12                	push   0x12
c000da09:	68 ee 00 00 00       	push   0xee
c000da0e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da12:	e8 d9 2a ff ff       	call   c00004f0 <memset>
c000da17:	83 c4 10             	add    esp,0x10
c000da1a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000da1e:	6a 08                	push   0x8
c000da20:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000da24:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000da28:	50                   	push   eax
c000da29:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000da2d:	55                   	push   ebp
c000da2e:	57                   	push   edi
c000da2f:	e8 e7 fe ff ff       	call   c000d91b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000da34:	83 c4 10             	add    esp,0x10
c000da37:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000da3b:	50                   	push   eax
c000da3c:	6a 06                	push   0x6
c000da3e:	55                   	push   ebp
c000da3f:	57                   	push   edi
c000da40:	e8 06 ff ff ff       	call   c000d94b <CmGetShift(unsigned int*, int*, int, bool*)>
c000da45:	83 c4 10             	add    esp,0x10
c000da48:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000da4d:	74 07                	je     c000da56 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000da4f:	46                   	inc    esi
c000da50:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000da54:	eb e1                	jmp    c000da37 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000da56:	43                   	inc    ebx
c000da57:	83 fb 12             	cmp    ebx,0x12
c000da5a:	75 c2                	jne    c000da1e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000da5c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000da60:	31 f6                	xor    esi,esi
c000da62:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000da65:	50                   	push   eax
c000da66:	50                   	push   eax
c000da67:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000da6c:	46                   	inc    esi
c000da6d:	8d 04 85 a0 5f 02 c0 	lea    eax,[eax*4-0x3ffda060]
c000da74:	50                   	push   eax
c000da75:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da79:	e8 f2 2d ff ff       	call   c0000870 <strcat>
c000da7e:	83 c4 10             	add    esp,0x10
c000da81:	83 fe 18             	cmp    esi,0x18
c000da84:	75 df                	jne    c000da65 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000da86:	83 c4 3c             	add    esp,0x3c
c000da89:	31 c0                	xor    eax,eax
c000da8b:	5b                   	pop    ebx
c000da8c:	5e                   	pop    esi
c000da8d:	5f                   	pop    edi
c000da8e:	5d                   	pop    ebp
c000da8f:	c3                   	ret    

c000da90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000da90:	83 ec 40             	sub    esp,0x40
c000da93:	8d 44 24 09          	lea    eax,[esp+0x9]
c000da97:	50                   	push   eax
c000da98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000daa0:	e8 3f f9 ff ff       	call   c000d3e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000daa5:	58                   	pop    eax
c000daa6:	5a                   	pop    edx
c000daa7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000daab:	8d 44 24 15          	lea    eax,[esp+0x15]
c000daaf:	50                   	push   eax
c000dab0:	e8 37 ff ff ff       	call   c000d9ec <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dab5:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000daba:	83 c4 4c             	add    esp,0x4c
c000dabd:	c3                   	ret    

c000dabe <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dabe:	55                   	push   ebp
c000dabf:	57                   	push   edi
c000dac0:	56                   	push   esi
c000dac1:	53                   	push   ebx
c000dac2:	31 db                	xor    ebx,ebx
c000dac4:	83 ec 70             	sub    esp,0x70
c000dac7:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dace:	6a 30                	push   0x30
c000dad0:	6a 00                	push   0x0
c000dad2:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000dad6:	56                   	push   esi
c000dad7:	e8 14 2a ff ff       	call   c00004f0 <memset>
c000dadc:	83 c4 10             	add    esp,0x10
c000dadf:	83 ec 0c             	sub    esp,0xc
c000dae2:	57                   	push   edi
c000dae3:	e8 98 2a ff ff       	call   c0000580 <strlen>
c000dae8:	83 c4 10             	add    esp,0x10
c000daeb:	39 d8                	cmp    eax,ebx
c000daed:	76 16                	jbe    c000db05 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000daef:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000daf3:	83 ec 0c             	sub    esp,0xc
c000daf6:	50                   	push   eax
c000daf7:	e8 64 2e ff ff       	call   c0000960 <toupper>
c000dafc:	83 c4 10             	add    esp,0x10
c000daff:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000db02:	43                   	inc    ebx
c000db03:	eb da                	jmp    c000dadf <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000db05:	52                   	push   edx
c000db06:	31 db                	xor    ebx,ebx
c000db08:	6a 18                	push   0x18
c000db0a:	31 ff                	xor    edi,edi
c000db0c:	6a 3f                	push   0x3f
c000db0e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000db12:	50                   	push   eax
c000db13:	e8 d8 29 ff ff       	call   c00004f0 <memset>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000db1f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000db23:	84 c0                	test   al,al
c000db25:	0f 84 af 00 00 00    	je     c000dbda <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000db2b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000db2f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000db32:	83 ec 0c             	sub    esp,0xc
c000db35:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000db3a:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000db3e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000db42:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000db47:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000db4b:	56                   	push   esi
c000db4c:	e8 2f 2a ff ff       	call   c0000580 <strlen>
c000db51:	83 c4 10             	add    esp,0x10
c000db54:	85 c0                	test   eax,eax
c000db56:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db5a:	74 0b                	je     c000db67 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000db5c:	50                   	push   eax
c000db5d:	6a 01                	push   0x1
c000db5f:	56                   	push   esi
c000db60:	8d 44 24 20          	lea    eax,[esp+0x20]
c000db64:	50                   	push   eax
c000db65:	eb 0a                	jmp    c000db71 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000db67:	50                   	push   eax
c000db68:	6a 00                	push   0x0
c000db6a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000db6e:	50                   	push   eax
c000db6f:	6a 00                	push   0x0
c000db71:	e8 44 fd ff ff       	call   c000d8ba <CmGetMatch(char*, char*, bool, bool*)>
c000db76:	83 c4 10             	add    esp,0x10
c000db79:	83 f8 ff             	cmp    eax,0xffffffff
c000db7c:	75 1a                	jne    c000db98 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	68 42 3b 02 c0       	push   0xc0023b42
c000db86:	e8 9f 22 00 00       	call   c000fe2a <KePanic(char const*)>
c000db8b:	83 c4 10             	add    esp,0x10
c000db8e:	b8 02 00 00 00       	mov    eax,0x2
c000db93:	e9 bb 00 00 00       	jmp    c000dc53 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000db98:	83 ff 18             	cmp    edi,0x18
c000db9b:	75 1a                	jne    c000dbb7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000db9d:	83 ec 0c             	sub    esp,0xc
c000dba0:	68 57 3b 02 c0       	push   0xc0023b57
c000dba5:	e8 80 22 00 00       	call   c000fe2a <KePanic(char const*)>
c000dbaa:	83 c4 10             	add    esp,0x10
c000dbad:	b8 01 00 00 00       	mov    eax,0x1
c000dbb2:	e9 9c 00 00 00       	jmp    c000dc53 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dbb7:	47                   	inc    edi
c000dbb8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dbbd:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dbc1:	0f 45 dd             	cmovne ebx,ebp
c000dbc4:	83 ec 0c             	sub    esp,0xc
c000dbc7:	56                   	push   esi
c000dbc8:	e8 b3 29 ff ff       	call   c0000580 <strlen>
c000dbcd:	83 c4 10             	add    esp,0x10
c000dbd0:	85 c0                	test   eax,eax
c000dbd2:	74 06                	je     c000dbda <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000dbd4:	43                   	inc    ebx
c000dbd5:	e9 41 ff ff ff       	jmp    c000db1b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dbda:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dbe2:	31 db                	xor    ebx,ebx
c000dbe4:	31 ff                	xor    edi,edi
c000dbe6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dbee:	50                   	push   eax
c000dbef:	6a 12                	push   0x12
c000dbf1:	68 ee 00 00 00       	push   0xee
c000dbf6:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dbfd:	e8 ee 28 ff ff       	call   c00004f0 <memset>
c000dc02:	83 c4 10             	add    esp,0x10
c000dc05:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dc09:	83 fb 17             	cmp    ebx,0x17
c000dc0c:	7e 26                	jle    c000dc34 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000dc0e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc12:	50                   	push   eax
c000dc13:	6a 08                	push   0x8
c000dc15:	55                   	push   ebp
c000dc16:	56                   	push   esi
c000dc17:	e8 2f fd ff ff       	call   c000d94b <CmGetShift(unsigned int*, int*, int, bool*)>
c000dc1c:	83 c4 10             	add    esp,0x10
c000dc1f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc24:	74 26                	je     c000dc4c <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000dc26:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dc2d:	4b                   	dec    ebx
c000dc2e:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dc31:	47                   	inc    edi
c000dc32:	eb 1c                	jmp    c000dc50 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dc34:	6a 06                	push   0x6
c000dc36:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000dc3b:	50                   	push   eax
c000dc3c:	55                   	push   ebp
c000dc3d:	56                   	push   esi
c000dc3e:	e8 d8 fc ff ff       	call   c000d91b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dc43:	83 c4 10             	add    esp,0x10
c000dc46:	84 c0                	test   al,al
c000dc48:	75 06                	jne    c000dc50 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dc4a:	eb c2                	jmp    c000dc0e <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000dc4c:	31 c0                	xor    eax,eax
c000dc4e:	eb 03                	jmp    c000dc53 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dc50:	43                   	inc    ebx
c000dc51:	eb b2                	jmp    c000dc05 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000dc53:	83 c4 6c             	add    esp,0x6c
c000dc56:	5b                   	pop    ebx
c000dc57:	5e                   	pop    esi
c000dc58:	5f                   	pop    edi
c000dc59:	5d                   	pop    ebp
c000dc5a:	c3                   	ret    

c000dc5b <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dc5b:	53                   	push   ebx
c000dc5c:	83 ec 3c             	sub    esp,0x3c
c000dc5f:	6a 2b                	push   0x2b
c000dc61:	6a 00                	push   0x0
c000dc63:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dc67:	53                   	push   ebx
c000dc68:	e8 83 28 ff ff       	call   c00004f0 <memset>
c000dc6d:	58                   	pop    eax
c000dc6e:	5a                   	pop    edx
c000dc6f:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dc73:	50                   	push   eax
c000dc74:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc78:	e8 41 fe ff ff       	call   c000dabe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dc7d:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dc82:	83 c4 0c             	add    esp,0xc
c000dc85:	6a 15                	push   0x15
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 5d 28 ff ff       	call   c00004f0 <memset>
c000dc93:	53                   	push   ebx
c000dc94:	6a 00                	push   0x0
c000dc96:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dc9a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dc9e:	e8 eb f9 ff ff       	call   c000d68e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dca3:	83 c4 58             	add    esp,0x58
c000dca6:	5b                   	pop    ebx
c000dca7:	c3                   	ret    

c000dca8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dca8:	56                   	push   esi
c000dca9:	53                   	push   ebx
c000dcaa:	83 ec 48             	sub    esp,0x48
c000dcad:	6a 12                	push   0x12
c000dcaf:	68 ff 00 00 00       	push   0xff
c000dcb4:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dcb8:	56                   	push   esi
c000dcb9:	e8 32 28 ff ff       	call   c00004f0 <memset>
c000dcbe:	5a                   	pop    edx
c000dcbf:	59                   	pop    ecx
c000dcc0:	56                   	push   esi
c000dcc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dcc5:	e8 f4 fd ff ff       	call   c000dabe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dcca:	83 c4 10             	add    esp,0x10
c000dccd:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dcd1:	85 db                	test   ebx,ebx
c000dcd3:	74 42                	je     c000dd17 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dcd5:	50                   	push   eax
c000dcd6:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dcda:	50                   	push   eax
c000dcdb:	53                   	push   ebx
c000dcdc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dce0:	e8 ff f6 ff ff       	call   c000d3e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dce5:	83 c4 0c             	add    esp,0xc
c000dce8:	6a 12                	push   0x12
c000dcea:	8d 44 24 21          	lea    eax,[esp+0x21]
c000dcee:	50                   	push   eax
c000dcef:	56                   	push   esi
c000dcf0:	e8 8b 26 ff ff       	call   c0000380 <memcmp>
c000dcf5:	83 c4 10             	add    esp,0x10
c000dcf8:	85 c0                	test   eax,eax
c000dcfa:	74 1e                	je     c000dd1a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000dcfc:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000dd01:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000dd06:	c1 e3 08             	shl    ebx,0x8
c000dd09:	09 d8                	or     eax,ebx
c000dd0b:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dd10:	c1 e3 10             	shl    ebx,0x10
c000dd13:	09 c3                	or     ebx,eax
c000dd15:	eb ba                	jmp    c000dcd1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dd17:	83 cb ff             	or     ebx,0xffffffff
c000dd1a:	83 c4 44             	add    esp,0x44
c000dd1d:	89 d8                	mov    eax,ebx
c000dd1f:	5b                   	pop    ebx
c000dd20:	5e                   	pop    esi
c000dd21:	c3                   	ret    

c000dd22 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000dd22:	57                   	push   edi
c000dd23:	56                   	push   esi
c000dd24:	53                   	push   ebx
c000dd25:	83 ec 34             	sub    esp,0x34
c000dd28:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000dd2c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000dd30:	6a 2b                	push   0x2b
c000dd32:	6a 00                	push   0x0
c000dd34:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd38:	53                   	push   ebx
c000dd39:	e8 b2 27 ff ff       	call   c00004f0 <memset>
c000dd3e:	58                   	pop    eax
c000dd3f:	5a                   	pop    edx
c000dd40:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd44:	50                   	push   eax
c000dd45:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd49:	e8 70 fd ff ff       	call   c000dabe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd4e:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000dd52:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000dd56:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000dd5a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000dd5e:	53                   	push   ebx
c000dd5f:	6a 00                	push   0x0
c000dd61:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd65:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd69:	e8 20 f9 ff ff       	call   c000d68e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd6e:	83 c4 50             	add    esp,0x50
c000dd71:	5b                   	pop    ebx
c000dd72:	5e                   	pop    esi
c000dd73:	5f                   	pop    edi
c000dd74:	c3                   	ret    

c000dd75 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000dd75:	55                   	push   ebp
c000dd76:	57                   	push   edi
c000dd77:	56                   	push   esi
c000dd78:	53                   	push   ebx
c000dd79:	83 ec 40             	sub    esp,0x40
c000dd7c:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000dd80:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dd84:	6a 2b                	push   0x2b
c000dd86:	6a 00                	push   0x0
c000dd88:	8d 74 24 11          	lea    esi,[esp+0x11]
c000dd8c:	56                   	push   esi
c000dd8d:	e8 5e 27 ff ff       	call   c00004f0 <memset>
c000dd92:	5f                   	pop    edi
c000dd93:	89 ef                	mov    edi,ebp
c000dd95:	58                   	pop    eax
c000dd96:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd9a:	50                   	push   eax
c000dd9b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dd9f:	e8 1a fd ff ff       	call   c000dabe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dda4:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000dda9:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ddae:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000ddb3:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000ddb8:	83 c4 10             	add    esp,0x10
c000ddbb:	85 ed                	test   ebp,ebp
c000ddbd:	74 14                	je     c000ddd3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000ddbf:	51                   	push   ecx
c000ddc0:	51                   	push   ecx
c000ddc1:	57                   	push   edi
c000ddc2:	53                   	push   ebx
c000ddc3:	e8 0e f7 ff ff       	call   c000d4d6 <CmGetNext(Reghive_Tag*, int)>
c000ddc8:	83 c4 10             	add    esp,0x10
c000ddcb:	85 c0                	test   eax,eax
c000ddcd:	74 04                	je     c000ddd3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000ddcf:	89 c7                	mov    edi,eax
c000ddd1:	eb e8                	jmp    c000ddbb <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000ddd3:	56                   	push   esi
c000ddd4:	6a 00                	push   0x0
c000ddd6:	57                   	push   edi
c000ddd7:	53                   	push   ebx
c000ddd8:	e8 b1 f8 ff ff       	call   c000d68e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dddd:	83 c4 0c             	add    esp,0xc
c000dde0:	56                   	push   esi
c000dde1:	50                   	push   eax
c000dde2:	89 c7                	mov    edi,eax
c000dde4:	53                   	push   ebx
c000dde5:	e8 fa f5 ff ff       	call   c000d3e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ddea:	58                   	pop    eax
c000ddeb:	5a                   	pop    edx
c000ddec:	6a 6c                	push   0x6c
c000ddee:	6a 00                	push   0x0
c000ddf0:	6a 00                	push   0x0
c000ddf2:	68 68 3b 02 c0       	push   0xc0023b68
c000ddf7:	57                   	push   edi
c000ddf8:	53                   	push   ebx
c000ddf9:	e8 24 ff ff ff       	call   c000dd22 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000ddfe:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000de02:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000de06:	c1 e8 10             	shr    eax,0x10
c000de09:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000de0d:	83 c4 1c             	add    esp,0x1c
c000de10:	56                   	push   esi
c000de11:	57                   	push   edi
c000de12:	53                   	push   ebx
c000de13:	e8 f0 f6 ff ff       	call   c000d508 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000de18:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000de1d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000de22:	c1 e0 08             	shl    eax,0x8
c000de25:	09 c2                	or     edx,eax
c000de27:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000de2c:	83 c4 4c             	add    esp,0x4c
c000de2f:	5b                   	pop    ebx
c000de30:	5e                   	pop    esi
c000de31:	c1 e0 10             	shl    eax,0x10
c000de34:	09 d0                	or     eax,edx
c000de36:	5f                   	pop    edi
c000de37:	5d                   	pop    ebp
c000de38:	c3                   	ret    

c000de39 <zStrtok(char*, char const*)>:
c000de39:	55                   	push   ebp
c000de3a:	57                   	push   edi
c000de3b:	56                   	push   esi
c000de3c:	53                   	push   ebx
c000de3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de45:	85 db                	test   ebx,ebx
c000de47:	74 2f                	je     c000de78 <zStrtok(char*, char const*)+0x3f>
c000de49:	85 c0                	test   eax,eax
c000de4b:	75 09                	jne    c000de56 <zStrtok(char*, char const*)+0x1d>
c000de4d:	a1 c0 c0 02 c0       	mov    eax,ds:0xc002c0c0
c000de52:	85 c0                	test   eax,eax
c000de54:	74 50                	je     c000dea6 <zStrtok(char*, char const*)+0x6d>
c000de56:	31 c9                	xor    ecx,ecx
c000de58:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000de5c:	74 03                	je     c000de61 <zStrtok(char*, char const*)+0x28>
c000de5e:	41                   	inc    ecx
c000de5f:	eb f7                	jmp    c000de58 <zStrtok(char*, char const*)+0x1f>
c000de61:	31 d2                	xor    edx,edx
c000de63:	39 ca                	cmp    edx,ecx
c000de65:	74 15                	je     c000de7c <zStrtok(char*, char const*)+0x43>
c000de67:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000de6b:	8d 3c 10             	lea    edi,[eax+edx*1]
c000de6e:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000de71:	39 ee                	cmp    esi,ebp
c000de73:	74 13                	je     c000de88 <zStrtok(char*, char const*)+0x4f>
c000de75:	42                   	inc    edx
c000de76:	eb eb                	jmp    c000de63 <zStrtok(char*, char const*)+0x2a>
c000de78:	31 c0                	xor    eax,eax
c000de7a:	eb 2a                	jmp    c000dea6 <zStrtok(char*, char const*)+0x6d>
c000de7c:	c7 05 c0 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c0c0,0x0
c000de86:	eb 1e                	jmp    c000dea6 <zStrtok(char*, char const*)+0x6d>
c000de88:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000de8b:	39 ce                	cmp    esi,ecx
c000de8d:	75 0a                	jne    c000de99 <zStrtok(char*, char const*)+0x60>
c000de8f:	40                   	inc    eax
c000de90:	a3 c0 c0 02 c0       	mov    ds:0xc002c0c0,eax
c000de95:	89 d8                	mov    eax,ebx
c000de97:	eb 0d                	jmp    c000dea6 <zStrtok(char*, char const*)+0x6d>
c000de99:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000de9c:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000dea0:	89 15 c0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0c0,edx
c000dea6:	5b                   	pop    ebx
c000dea7:	5e                   	pop    esi
c000dea8:	5f                   	pop    edi
c000dea9:	5d                   	pop    ebp
c000deaa:	c3                   	ret    

c000deab <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000deab:	57                   	push   edi
c000deac:	56                   	push   esi
c000dead:	53                   	push   ebx
c000deae:	81 ec 08 01 00 00    	sub    esp,0x108
c000deb4:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000debb:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000dec2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000dec6:	53                   	push   ebx
c000dec7:	e8 84 27 ff ff       	call   c0000650 <strcpy>
c000decc:	59                   	pop    ecx
c000decd:	5e                   	pop    esi
c000dece:	68 04 4e 02 c0       	push   0xc0024e04
c000ded3:	53                   	push   ebx
c000ded4:	bb 01 00 00 00       	mov    ebx,0x1
c000ded9:	e8 5b ff ff ff       	call   c000de39 <zStrtok(char*, char const*)>
c000dede:	83 c4 10             	add    esp,0x10
c000dee1:	85 c0                	test   eax,eax
c000dee3:	74 3b                	je     c000df20 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dee5:	52                   	push   edx
c000dee6:	50                   	push   eax
c000dee7:	6a 01                	push   0x1
c000dee9:	57                   	push   edi
c000deea:	e8 b9 fd ff ff       	call   c000dca8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000deef:	59                   	pop    ecx
c000def0:	5e                   	pop    esi
c000def1:	89 c3                	mov    ebx,eax
c000def3:	68 04 4e 02 c0       	push   0xc0024e04
c000def8:	6a 00                	push   0x0
c000defa:	e8 3a ff ff ff       	call   c000de39 <zStrtok(char*, char const*)>
c000deff:	83 c4 10             	add    esp,0x10
c000df02:	85 c0                	test   eax,eax
c000df04:	89 c6                	mov    esi,eax
c000df06:	74 18                	je     c000df20 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df08:	52                   	push   edx
c000df09:	52                   	push   edx
c000df0a:	53                   	push   ebx
c000df0b:	57                   	push   edi
c000df0c:	e8 86 f5 ff ff       	call   c000d497 <CmEnterDirectory(Reghive_Tag*, int)>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	83 f8 ff             	cmp    eax,0xffffffff
c000df17:	89 c3                	mov    ebx,eax
c000df19:	74 05                	je     c000df20 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df1b:	50                   	push   eax
c000df1c:	56                   	push   esi
c000df1d:	53                   	push   ebx
c000df1e:	eb c9                	jmp    c000dee9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000df20:	81 c4 00 01 00 00    	add    esp,0x100
c000df26:	89 d8                	mov    eax,ebx
c000df28:	5b                   	pop    ebx
c000df29:	5e                   	pop    esi
c000df2a:	5f                   	pop    edi
c000df2b:	c3                   	ret    

c000df2c <CmDisplayTree(Reghive_Tag*, int, int)>:
c000df2c:	55                   	push   ebp
c000df2d:	57                   	push   edi
c000df2e:	56                   	push   esi
c000df2f:	53                   	push   ebx
c000df30:	83 ec 5c             	sub    esp,0x5c
c000df33:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000df37:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000df3b:	85 db                	test   ebx,ebx
c000df3d:	0f 8e 84 00 00 00    	jle    c000dfc7 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000df43:	57                   	push   edi
c000df44:	31 ed                	xor    ebp,ebp
c000df46:	6a 32                	push   0x32
c000df48:	6a 00                	push   0x0
c000df4a:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000df4e:	57                   	push   edi
c000df4f:	e8 9c 25 ff ff       	call   c00004f0 <memset>
c000df54:	83 c4 0c             	add    esp,0xc
c000df57:	57                   	push   edi
c000df58:	53                   	push   ebx
c000df59:	56                   	push   esi
c000df5a:	e8 31 fb ff ff       	call   c000da90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000df5f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df63:	83 c4 10             	add    esp,0x10
c000df66:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000df6a:	7d 13                	jge    c000df7f <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000df6c:	83 ec 0c             	sub    esp,0xc
c000df6f:	45                   	inc    ebp
c000df70:	68 f8 52 02 c0       	push   0xc00252f8
c000df75:	e8 d4 8f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000df7a:	83 c4 10             	add    esp,0x10
c000df7d:	eb e7                	jmp    c000df66 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000df7f:	51                   	push   ecx
c000df80:	57                   	push   edi
c000df81:	53                   	push   ebx
c000df82:	68 6e 3b 02 c0       	push   0xc0023b6e
c000df87:	e8 c2 8f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000df8c:	83 c4 10             	add    esp,0x10
c000df8f:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000df94:	75 1e                	jne    c000dfb4 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000df96:	52                   	push   edx
c000df97:	52                   	push   edx
c000df98:	53                   	push   ebx
c000df99:	56                   	push   esi
c000df9a:	e8 f8 f4 ff ff       	call   c000d497 <CmEnterDirectory(Reghive_Tag*, int)>
c000df9f:	83 c4 0c             	add    esp,0xc
c000dfa2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000dfa6:	8d 51 04             	lea    edx,[ecx+0x4]
c000dfa9:	52                   	push   edx
c000dfaa:	50                   	push   eax
c000dfab:	56                   	push   esi
c000dfac:	e8 7b ff ff ff       	call   c000df2c <CmDisplayTree(Reghive_Tag*, int, int)>
c000dfb1:	83 c4 10             	add    esp,0x10
c000dfb4:	50                   	push   eax
c000dfb5:	50                   	push   eax
c000dfb6:	53                   	push   ebx
c000dfb7:	56                   	push   esi
c000dfb8:	e8 19 f5 ff ff       	call   c000d4d6 <CmGetNext(Reghive_Tag*, int)>
c000dfbd:	83 c4 10             	add    esp,0x10
c000dfc0:	89 c3                	mov    ebx,eax
c000dfc2:	e9 74 ff ff ff       	jmp    c000df3b <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000dfc7:	83 c4 5c             	add    esp,0x5c
c000dfca:	5b                   	pop    ebx
c000dfcb:	5e                   	pop    esi
c000dfcc:	5f                   	pop    edi
c000dfcd:	5d                   	pop    ebp
c000dfce:	c3                   	ret    

c000dfcf <CmSplitFinalSlashInPlace(char*)>:
c000dfcf:	53                   	push   ebx
c000dfd0:	83 ec 14             	sub    esp,0x14
c000dfd3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfd7:	53                   	push   ebx
c000dfd8:	e8 a3 25 ff ff       	call   c0000580 <strlen>
c000dfdd:	83 c4 10             	add    esp,0x10
c000dfe0:	48                   	dec    eax
c000dfe1:	85 c0                	test   eax,eax
c000dfe3:	74 15                	je     c000dffa <CmSplitFinalSlashInPlace(char*)+0x2b>
c000dfe5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000dfe9:	8d 14 03             	lea    edx,[ebx+eax*1]
c000dfec:	75 09                	jne    c000dff7 <CmSplitFinalSlashInPlace(char*)+0x28>
c000dfee:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000dff1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000dff5:	eb 05                	jmp    c000dffc <CmSplitFinalSlashInPlace(char*)+0x2d>
c000dff7:	48                   	dec    eax
c000dff8:	eb e7                	jmp    c000dfe1 <CmSplitFinalSlashInPlace(char*)+0x12>
c000dffa:	31 c0                	xor    eax,eax
c000dffc:	83 c4 08             	add    esp,0x8
c000dfff:	5b                   	pop    ebx
c000e000:	c3                   	ret    
c000e001:	66 90                	xchg   ax,ax
c000e003:	90                   	nop

c000e004 <Krnl::handlePowerButton()>:
c000e004:	83 ec 0c             	sub    esp,0xc
c000e007:	e8 54 27 00 00       	call   c0010760 <KeHandlePowerButton()>
c000e00c:	90                   	nop
c000e00d:	83 c4 0c             	add    esp,0xc
c000e010:	c3                   	ret    
c000e011:	8d 76 00             	lea    esi,[esi+0x0]

c000e014 <Krnl::handleSleepButton()>:
c000e014:	83 ec 0c             	sub    esp,0xc
c000e017:	e8 5c 27 00 00       	call   c0010778 <KeHandleSleepButton()>
c000e01c:	90                   	nop
c000e01d:	83 c4 0c             	add    esp,0xc
c000e020:	c3                   	ret    
c000e021:	90                   	nop

c000e022 <Computer::close(int, int, void*)>:
c000e022:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e027:	c3                   	ret    

c000e028 <Computer::open(int, int, void*)>:
c000e028:	56                   	push   esi
c000e029:	53                   	push   ebx
c000e02a:	83 ec 04             	sub    esp,0x4
c000e02d:	f6 05 24 e1 02 c0 04 	test   BYTE PTR ds:0xc002e124,0x4
c000e034:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e038:	0f 94 05 80 66 02 c0 	sete   BYTE PTR ds:0xc0026680
c000e03f:	39 1d d0 c0 02 c0    	cmp    DWORD PTR ds:0xc002c0d0,ebx
c000e045:	74 10                	je     c000e057 <Computer::open(int, int, void*)+0x2f>
c000e047:	83 ec 0c             	sub    esp,0xc
c000e04a:	68 78 3b 02 c0       	push   0xc0023b78
c000e04f:	e8 d6 1d 00 00       	call   c000fe2a <KePanic(char const*)>
c000e054:	83 c4 10             	add    esp,0x10
c000e057:	83 ec 0c             	sub    esp,0xc
c000e05a:	68 30 3c 02 c0       	push   0xc0023c30
c000e05f:	e8 37 f1 ff ff       	call   c000d19b <KeSetBootMessage(char const*)>
c000e064:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e06b:	e8 74 1a 00 00       	call   c000fae4 <malloc>
c000e070:	89 04 24             	mov    DWORD PTR [esp],eax
c000e073:	89 c6                	mov    esi,eax
c000e075:	e8 3a e7 ff ff       	call   c000c7b4 <ACPI::ACPI()>
c000e07a:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000e080:	58                   	pop    eax
c000e081:	5a                   	pop    edx
c000e082:	56                   	push   esi
c000e083:	53                   	push   ebx
c000e084:	e8 11 b9 ff ff       	call   c000999a <Device::addChild(Device*)>
c000e089:	c7 04 24 48 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c48
c000e090:	e8 06 f1 ff ff       	call   c000d19b <KeSetBootMessage(char const*)>
c000e095:	e8 b7 b4 00 00       	call   c0019551 <HalEnableNMI()>
c000e09a:	e8 e7 a6 00 00       	call   c0018786 <HalDetectFeatures()>
c000e09f:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000e0a6:	e8 39 1a 00 00       	call   c000fae4 <malloc>
c000e0ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0ae:	89 c6                	mov    esi,eax
c000e0b0:	e8 d7 bf 00 00       	call   c001a08c <CPU::CPU()>
c000e0b5:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e0bb:	59                   	pop    ecx
c000e0bc:	58                   	pop    eax
c000e0bd:	56                   	push   esi
c000e0be:	53                   	push   ebx
c000e0bf:	e8 d6 b8 ff ff       	call   c000999a <Device::addChild(Device*)>
c000e0c4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e0c8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0d0:	51                   	push   ecx
c000e0d1:	6a 00                	push   0x0
c000e0d3:	6a 00                	push   0x0
c000e0d5:	50                   	push   eax
c000e0d6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e0d9:	83 c4 14             	add    esp,0x14
c000e0dc:	68 a4 3b 02 c0       	push   0xc0023ba4
c000e0e1:	e8 b5 f0 ff ff       	call   c000d19b <KeSetBootMessage(char const*)>
c000e0e6:	e8 fc bb 00 00       	call   c0019ce7 <HalInitialiseCoprocessor()>
c000e0eb:	c7 04 24 62 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c62
c000e0f2:	e8 a4 f0 ff ff       	call   c000d19b <KeSetBootMessage(char const*)>
c000e0f7:	c7 04 24 0e e1 00 c0 	mov    DWORD PTR [esp],0xc000e10e
c000e0fe:	e8 55 8b 00 00       	call   c0016c58 <setupMultitasking(void (*)())>
c000e103:	83 c4 14             	add    esp,0x14
c000e106:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e10b:	5b                   	pop    ebx
c000e10c:	5e                   	pop    esi
c000e10d:	c3                   	ret    

c000e10e <KeFirstTask()>:
c000e10e:	53                   	push   ebx
c000e10f:	83 ec 14             	sub    esp,0x14
c000e112:	fb                   	sti    
c000e113:	68 7d 3c 02 c0       	push   0xc0023c7d
c000e118:	e8 7e f0 ff ff       	call   c000d19b <KeSetBootMessage(char const*)>
c000e11d:	c7 04 24 84 07 00 00 	mov    DWORD PTR [esp],0x784
c000e124:	e8 bb 19 00 00       	call   c000fae4 <malloc>
c000e129:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e130:	89 c3                	mov    ebx,eax
c000e132:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000e137:	50                   	push   eax
c000e138:	68 96 3c 02 c0       	push   0xc0023c96
c000e13d:	6a 01                	push   0x1
c000e13f:	53                   	push   ebx
c000e140:	e8 8b 87 00 00       	call   c00168d0 <Process::Process(bool, char const*, Process*, char**)>
c000e145:	83 c4 20             	add    esp,0x20
c000e148:	68 ff 00 00 00       	push   0xff
c000e14d:	6a 00                	push   0x0
c000e14f:	68 0d ee 00 c0       	push   0xc000ee0d
c000e154:	53                   	push   ebx
c000e155:	e8 b6 89 00 00       	call   c0016b10 <Process::createThread(void (*)(void*), void*, int)>
c000e15a:	8b 15 58 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea58
c000e160:	6a 7a                	push   0x7a
c000e162:	6a 00                	push   0x0
c000e164:	68 6c 74 01 c0       	push   0xc001746c
c000e169:	52                   	push   edx
c000e16a:	e8 a1 89 00 00       	call   c0016b10 <Process::createThread(void (*)(void*), void*, int)>
c000e16f:	83 c4 14             	add    esp,0x14
c000e172:	68 c8 3b 02 c0       	push   0xc0023bc8
c000e177:	a3 10 ea 02 c0       	mov    ds:0xc002ea10,eax
c000e17c:	e8 1a f0 ff ff       	call   c000d19b <KeSetBootMessage(char const*)>
c000e181:	c6 05 d5 c0 02 c0 01 	mov    BYTE PTR ds:0xc002c0d5,0x1
c000e188:	e8 f5 26 00 00       	call   c0010882 <KeInitRand()>
c000e18d:	e8 a8 96 00 00       	call   c001783a <Vm::initialise8086()>
c000e192:	e8 3f 9c ff ff       	call   c0007dd6 <Fs::initVFS()>
c000e197:	c7 04 24 3c 39 02 c0 	mov    DWORD PTR [esp],0xc002393c
c000e19e:	e8 f8 ef ff ff       	call   c000d19b <KeSetBootMessage(char const*)>
c000e1a3:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e1a8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e1ae:	8b 10                	mov    edx,DWORD PTR [eax]
c000e1b0:	6a 00                	push   0x0
c000e1b2:	6a 00                	push   0x0
c000e1b4:	6a 00                	push   0x0
c000e1b6:	50                   	push   eax
c000e1b7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e1ba:	83 c4 14             	add    esp,0x14
c000e1bd:	68 c8 3b 02 c0       	push   0xc0023bc8
c000e1c2:	e8 d4 ef ff ff       	call   c000d19b <KeSetBootMessage(char const*)>
c000e1c7:	e8 ef 93 ff ff       	call   c00075bb <KeInitialiseSymlinks()>
c000e1cc:	e8 f5 05 00 00       	call   c000e7c6 <KeLoadSystemEnv()>
c000e1d1:	e8 ba 25 00 00       	call   c0010790 <KeSetupPowerManager()>
c000e1d6:	c7 04 24 ec 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bec
c000e1dd:	e8 b9 ef ff ff       	call   c000d19b <KeSetBootMessage(char const*)>
c000e1e2:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e1e7:	59                   	pop    ecx
c000e1e8:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000e1ee:	53                   	push   ebx
c000e1ef:	e8 c2 b8 ff ff       	call   c0009ab6 <Device::loadDriversForAll()>
c000e1f4:	c7 04 24 a3 3c 02 c0 	mov    DWORD PTR [esp],0xc0023ca3
c000e1fb:	e8 9b ef ff ff       	call   c000d19b <KeSetBootMessage(char const*)>
c000e200:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000e206:	58                   	pop    eax
c000e207:	5a                   	pop    edx
c000e208:	6a 01                	push   0x1
c000e20a:	68 b4 3c 02 c0       	push   0xc0023cb4
c000e20f:	e8 ed 7f 00 00       	call   c0016201 <Thr::loadDLL(char const*, bool)>
c000e214:	59                   	pop    ecx
c000e215:	5a                   	pop    edx
c000e216:	53                   	push   ebx
c000e217:	50                   	push   eax
c000e218:	e8 45 82 00 00       	call   c0016462 <Thr::executeDLL(unsigned long, void*)>
c000e21d:	83 c4 10             	add    esp,0x10
c000e220:	83 ec 0c             	sub    esp,0xc
c000e223:	6a 02                	push   0x2
c000e225:	e8 26 8c 00 00       	call   c0016e50 <blockTask(TaskState)>
c000e22a:	83 c4 10             	add    esp,0x10
c000e22d:	eb f1                	jmp    c000e220 <KeFirstTask()+0x112>
c000e22f:	90                   	nop

c000e230 <Computer::Computer()>:
c000e230:	83 ec 0c             	sub    esp,0xc
c000e233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e237:	83 ec 08             	sub    esp,0x8
c000e23a:	68 d0 3c 02 c0       	push   0xc0023cd0
c000e23f:	50                   	push   eax
c000e240:	e8 b7 b8 ff ff       	call   c0009afc <Device::Device(char const*)>
c000e245:	83 c4 10             	add    esp,0x10
c000e248:	ba e4 3c 02 c0       	mov    edx,0xc0023ce4
c000e24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e251:	89 10                	mov    DWORD PTR [eax],edx
c000e253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e257:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e265:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e26f:	90                   	nop
c000e270:	83 c4 0c             	add    esp,0xc
c000e273:	c3                   	ret    

c000e274 <KePrepareShutdown()>:
c000e274:	83 ec 0c             	sub    esp,0xc
c000e277:	e8 8d ee ff ff       	call   c000d109 <KeExecuteAtexit()>
c000e27c:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e281:	83 ec 0c             	sub    esp,0xc
c000e284:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e28a:	50                   	push   eax
c000e28b:	e8 72 b9 ff ff       	call   c0009c02 <Device::closeAll()>
c000e290:	83 c4 1c             	add    esp,0x1c
c000e293:	c3                   	ret    

c000e294 <KeShutdown()>:
c000e294:	83 ec 0c             	sub    esp,0xc
c000e297:	e8 d8 ff ff ff       	call   c000e274 <KePrepareShutdown()>
c000e29c:	a1 cc c0 02 c0       	mov    eax,ds:0xc002c0cc
c000e2a1:	85 c0                	test   eax,eax
c000e2a3:	74 02                	je     c000e2a7 <KeShutdown()+0x13>
c000e2a5:	ff d0                	call   eax
c000e2a7:	83 ec 0c             	sub    esp,0xc
c000e2aa:	68 0c 3c 02 c0       	push   0xc0023c0c
c000e2af:	e8 76 1b 00 00       	call   c000fe2a <KePanic(char const*)>
c000e2b4:	83 c4 1c             	add    esp,0x1c
c000e2b7:	c3                   	ret    

c000e2b8 <KeSleep()>:
c000e2b8:	a1 c4 c0 02 c0       	mov    eax,ds:0xc002c0c4
c000e2bd:	85 c0                	test   eax,eax
c000e2bf:	74 02                	je     c000e2c3 <KeSleep()+0xb>
c000e2c1:	ff e0                	jmp    eax
c000e2c3:	c3                   	ret    

c000e2c4 <KeRestart()>:
c000e2c4:	83 ec 0c             	sub    esp,0xc
c000e2c7:	e8 a8 ff ff ff       	call   c000e274 <KePrepareShutdown()>
c000e2cc:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c000e2d1:	85 c0                	test   eax,eax
c000e2d3:	74 02                	je     c000e2d7 <KeRestart()+0x13>
c000e2d5:	ff d0                	call   eax
c000e2d7:	e4 64                	in     al,0x64
c000e2d9:	a8 02                	test   al,0x2
c000e2db:	75 fa                	jne    c000e2d7 <KeRestart()+0x13>
c000e2dd:	b0 fe                	mov    al,0xfe
c000e2df:	e6 64                	out    0x64,al
c000e2e1:	83 c4 0c             	add    esp,0xc
c000e2e4:	c3                   	ret    

c000e2e5 <KeCalculateCRC32(unsigned char*, int)>:
c000e2e5:	53                   	push   ebx
c000e2e6:	83 c8 ff             	or     eax,0xffffffff
c000e2e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e2ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e2f1:	01 cb                	add    ebx,ecx
c000e2f3:	39 d9                	cmp    ecx,ebx
c000e2f5:	74 15                	je     c000e30c <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e2f7:	41                   	inc    ecx
c000e2f8:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e2fb:	31 c2                	xor    edx,eax
c000e2fd:	c1 e8 08             	shr    eax,0x8
c000e300:	0f b6 d2             	movzx  edx,dl
c000e303:	33 04 95 a0 60 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9f60]
c000e30a:	eb e7                	jmp    c000e2f3 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e30c:	5b                   	pop    ebx
c000e30d:	f7 d0                	not    eax
c000e30f:	c3                   	ret    

c000e310 <EnvVarContainer::getEnv(char const*)>:
c000e310:	57                   	push   edi
c000e311:	56                   	push   esi
c000e312:	53                   	push   ebx
c000e313:	31 db                	xor    ebx,ebx
c000e315:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e319:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e31b:	7e 2b                	jle    c000e348 <EnvVarContainer::getEnv(char const*)+0x38>
c000e31d:	50                   	push   eax
c000e31e:	50                   	push   eax
c000e31f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e322:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e329:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e32c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e330:	e8 4b 24 ff ff       	call   c0000780 <strcmp>
c000e335:	83 c4 10             	add    esp,0x10
c000e338:	85 c0                	test   eax,eax
c000e33a:	75 09                	jne    c000e345 <EnvVarContainer::getEnv(char const*)+0x35>
c000e33c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e33f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e343:	eb 05                	jmp    c000e34a <EnvVarContainer::getEnv(char const*)+0x3a>
c000e345:	43                   	inc    ebx
c000e346:	eb d1                	jmp    c000e319 <EnvVarContainer::getEnv(char const*)+0x9>
c000e348:	31 c0                	xor    eax,eax
c000e34a:	5b                   	pop    ebx
c000e34b:	5e                   	pop    esi
c000e34c:	5f                   	pop    edi
c000e34d:	c3                   	ret    

c000e34e <EnvVarContainer::setEnv(char const*, char const*)>:
c000e34e:	55                   	push   ebp
c000e34f:	57                   	push   edi
c000e350:	56                   	push   esi
c000e351:	53                   	push   ebx
c000e352:	83 ec 28             	sub    esp,0x28
c000e355:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e359:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e35d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e361:	56                   	push   esi
c000e362:	e8 19 22 ff ff       	call   c0000580 <strlen>
c000e367:	40                   	inc    eax
c000e368:	89 04 24             	mov    DWORD PTR [esp],eax
c000e36b:	e8 74 17 00 00       	call   c000fae4 <malloc>
c000e370:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e373:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e377:	e8 04 22 ff ff       	call   c0000580 <strlen>
c000e37c:	40                   	inc    eax
c000e37d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e380:	e8 5f 17 00 00       	call   c000fae4 <malloc>
c000e385:	89 34 24             	mov    DWORD PTR [esp],esi
c000e388:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e38c:	e8 ef 21 ff ff       	call   c0000580 <strlen>
c000e391:	83 c4 0c             	add    esp,0xc
c000e394:	40                   	inc    eax
c000e395:	50                   	push   eax
c000e396:	6a 00                	push   0x0
c000e398:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e39c:	e8 4f 21 ff ff       	call   c00004f0 <memset>
c000e3a1:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3a4:	e8 d7 21 ff ff       	call   c0000580 <strlen>
c000e3a9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e3ad:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e3b5:	89 de                	mov    esi,ebx
c000e3b7:	e8 c4 21 ff ff       	call   c0000580 <strlen>
c000e3bc:	83 c4 0c             	add    esp,0xc
c000e3bf:	40                   	inc    eax
c000e3c0:	50                   	push   eax
c000e3c1:	6a 00                	push   0x0
c000e3c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3c7:	e8 24 21 ff ff       	call   c00004f0 <memset>
c000e3cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e3cf:	e8 ac 21 ff ff       	call   c0000580 <strlen>
c000e3d4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3d8:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e3e0:	40                   	inc    eax
c000e3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e3e4:	c1 e0 03             	shl    eax,0x3
c000e3e7:	5a                   	pop    edx
c000e3e8:	59                   	pop    ecx
c000e3e9:	50                   	push   eax
c000e3ea:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e3ed:	e8 de 16 00 00       	call   c000fad0 <realloc>
c000e3f2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e3f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e3f9:	b9 08 00 00 00       	mov    ecx,0x8
c000e3fe:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e401:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e405:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e407:	83 c4 2c             	add    esp,0x2c
c000e40a:	5b                   	pop    ebx
c000e40b:	5e                   	pop    esi
c000e40c:	5f                   	pop    edi
c000e40d:	5d                   	pop    ebp
c000e40e:	c3                   	ret    
c000e40f:	90                   	nop

c000e410 <EnvVarContainer::deleteEnv(char const*)>:
c000e410:	c3                   	ret    
c000e411:	90                   	nop

c000e412 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e412:	55                   	push   ebp
c000e413:	57                   	push   edi
c000e414:	56                   	push   esi
c000e415:	53                   	push   ebx
c000e416:	81 ec 38 01 00 00    	sub    esp,0x138
c000e41c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e423:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e42a:	68 14 01 00 00       	push   0x114
c000e42f:	e8 b0 16 00 00       	call   c000fae4 <malloc>
c000e434:	83 c4 0c             	add    esp,0xc
c000e437:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e43a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e441:	89 c3                	mov    ebx,eax
c000e443:	50                   	push   eax
c000e444:	e8 e3 9c ff ff       	call   c000812c <File::File(char const*, Process*)>
c000e449:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e44c:	e8 bd 9f ff ff       	call   c000840e <File::exists()>
c000e451:	83 c4 10             	add    esp,0x10
c000e454:	84 c0                	test   al,al
c000e456:	75 31                	jne    c000e489 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e458:	50                   	push   eax
c000e459:	50                   	push   eax
c000e45a:	6a 12                	push   0x12
c000e45c:	53                   	push   ebx
c000e45d:	e8 e8 9c ff ff       	call   c000814a <File::open(FileOpenMode)>
c000e462:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e464:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e467:	89 34 24             	mov    DWORD PTR [esp],esi
c000e46a:	e8 11 21 ff ff       	call   c0000580 <strlen>
c000e46f:	5a                   	pop    edx
c000e470:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e474:	52                   	push   edx
c000e475:	31 d2                	xor    edx,edx
c000e477:	56                   	push   esi
c000e478:	52                   	push   edx
c000e479:	50                   	push   eax
c000e47a:	53                   	push   ebx
c000e47b:	ff d7                	call   edi
c000e47d:	83 c4 14             	add    esp,0x14
c000e480:	53                   	push   ebx
c000e481:	e8 22 9d ff ff       	call   c00081a8 <File::close()>
c000e486:	83 c4 10             	add    esp,0x10
c000e489:	56                   	push   esi
c000e48a:	31 f6                	xor    esi,esi
c000e48c:	68 00 01 00 00       	push   0x100
c000e491:	6a 00                	push   0x0
c000e493:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e497:	50                   	push   eax
c000e498:	e8 53 20 ff ff       	call   c00004f0 <memset>
c000e49d:	5f                   	pop    edi
c000e49e:	58                   	pop    eax
c000e49f:	6a 01                	push   0x1
c000e4a1:	53                   	push   ebx
c000e4a2:	e8 a3 9c ff ff       	call   c000814a <File::open(FileOpenMode)>
c000e4a7:	83 c4 10             	add    esp,0x10
c000e4aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e4b2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e4ba:	83 ec 0c             	sub    esp,0xc
c000e4bd:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e4c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e4c3:	52                   	push   edx
c000e4c4:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000e4c8:	51                   	push   ecx
c000e4c9:	6a 00                	push   0x0
c000e4cb:	6a 01                	push   0x1
c000e4cd:	53                   	push   ebx
c000e4ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e4d1:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e4d6:	83 c4 20             	add    esp,0x20
c000e4d9:	85 c0                	test   eax,eax
c000e4db:	89 c1                	mov    ecx,eax
c000e4dd:	0f 84 36 01 00 00    	je     c000e619 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e4e3:	83 f8 0d             	cmp    eax,0xd
c000e4e6:	0f 84 22 01 00 00    	je     c000e60e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e4ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e4f1:	0f 84 f0 00 00 00    	je     c000e5e7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e4f7:	83 f8 0a             	cmp    eax,0xa
c000e4fa:	74 13                	je     c000e50f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e4fc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e501:	74 0c                	je     c000e50f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e503:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e509:	0f 8e f6 00 00 00    	jle    c000e605 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e50f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e513:	83 ec 0c             	sub    esp,0xc
c000e516:	8d 78 01             	lea    edi,[eax+0x1]
c000e519:	57                   	push   edi
c000e51a:	e8 c5 15 00 00       	call   c000fae4 <malloc>
c000e51f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e523:	8d 56 04             	lea    edx,[esi+0x4]
c000e526:	89 14 24             	mov    DWORD PTR [esp],edx
c000e529:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e52d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e531:	e8 ae 15 00 00       	call   c000fae4 <malloc>
c000e536:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e53a:	83 c4 0c             	add    esp,0xc
c000e53d:	57                   	push   edi
c000e53e:	6a 00                	push   0x0
c000e540:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e544:	e8 a7 1f ff ff       	call   c00004f0 <memset>
c000e549:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e54d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e551:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e555:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e557:	83 c4 0c             	add    esp,0xc
c000e55a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e55e:	52                   	push   edx
c000e55f:	6a 00                	push   0x0
c000e561:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e565:	e8 86 1f ff ff       	call   c00004f0 <memset>
c000e56a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e56e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e572:	89 34 24             	mov    DWORD PTR [esp],esi
c000e575:	e8 06 20 ff ff       	call   c0000580 <strlen>
c000e57a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e57e:	89 c1                	mov    ecx,eax
c000e580:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e582:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e585:	83 c4 10             	add    esp,0x10
c000e588:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e58b:	40                   	inc    eax
c000e58c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e58f:	85 d2                	test   edx,edx
c000e591:	75 0c                	jne    c000e59f <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e593:	83 ec 0c             	sub    esp,0xc
c000e596:	6a 08                	push   0x8
c000e598:	e8 47 15 00 00       	call   c000fae4 <malloc>
c000e59d:	eb 0c                	jmp    c000e5ab <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e59f:	51                   	push   ecx
c000e5a0:	51                   	push   ecx
c000e5a1:	c1 e0 03             	shl    eax,0x3
c000e5a4:	50                   	push   eax
c000e5a5:	52                   	push   edx
c000e5a6:	e8 25 15 00 00       	call   c000fad0 <realloc>
c000e5ab:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e5ae:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e5b1:	83 c4 10             	add    esp,0x10
c000e5b4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e5b7:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e5bb:	b9 08 00 00 00       	mov    ecx,0x8
c000e5c0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e5c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5c6:	50                   	push   eax
c000e5c7:	31 f6                	xor    esi,esi
c000e5c9:	68 00 01 00 00       	push   0x100
c000e5ce:	6a 00                	push   0x0
c000e5d0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e5d4:	50                   	push   eax
c000e5d5:	e8 16 1f ff ff       	call   c00004f0 <memset>
c000e5da:	83 c4 10             	add    esp,0x10
c000e5dd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e5e5:	eb 27                	jmp    c000e60e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5e7:	83 f8 3d             	cmp    eax,0x3d
c000e5ea:	74 1e                	je     c000e60a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e5ec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e5f2:	7f 07                	jg     c000e5fb <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e5f4:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000e5f8:	46                   	inc    esi
c000e5f9:	eb 13                	jmp    c000e60e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5fb:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e603:	eb 09                	jmp    c000e60e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e605:	83 f8 3d             	cmp    eax,0x3d
c000e608:	75 ea                	jne    c000e5f4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e60a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e60e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e613:	0f 85 99 fe ff ff    	jne    c000e4b2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e619:	83 ec 0c             	sub    esp,0xc
c000e61c:	53                   	push   ebx
c000e61d:	e8 86 9b ff ff       	call   c00081a8 <File::close()>
c000e622:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e624:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e627:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e62a:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e630:	5b                   	pop    ebx
c000e631:	5e                   	pop    esi
c000e632:	5f                   	pop    edi
c000e633:	5d                   	pop    ebp
c000e634:	c3                   	ret    
c000e635:	90                   	nop

c000e636 <EnvVarContainer::__loadSystem()>:
c000e636:	83 ec 10             	sub    esp,0x10
c000e639:	68 a0 64 02 c0       	push   0xc00264a0
c000e63e:	68 08 3d 02 c0       	push   0xc0023d08
c000e643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e647:	e8 c6 fd ff ff       	call   c000e412 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e64c:	83 c4 1c             	add    esp,0x1c
c000e64f:	c3                   	ret    

c000e650 <EnvVarContainer::__loadUser()>:
c000e650:	c3                   	ret    
c000e651:	90                   	nop

c000e652 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e656:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e65c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e664:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e667:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e66b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e672:	90                   	nop
c000e673:	c3                   	ret    

c000e674 <EnvVarContainer::~EnvVarContainer()>:
c000e674:	83 ec 0c             	sub    esp,0xc
c000e677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e67e:	85 c0                	test   eax,eax
c000e680:	74 1d                	je     c000e69f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e686:	8b 00                	mov    eax,DWORD PTR [eax]
c000e688:	85 c0                	test   eax,eax
c000e68a:	74 13                	je     c000e69f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e690:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e693:	83 ec 0c             	sub    esp,0xc
c000e696:	50                   	push   eax
c000e697:	e8 58 14 00 00       	call   c000faf4 <free>
c000e69c:	83 c4 10             	add    esp,0x10
c000e69f:	90                   	nop
c000e6a0:	83 c4 0c             	add    esp,0xc
c000e6a3:	c3                   	ret    

c000e6a4 <KeGetEnv(Process*, char const*)>:
c000e6a4:	53                   	push   ebx
c000e6a5:	83 ec 08             	sub    esp,0x8
c000e6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ac:	39 05 58 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea58,eax
c000e6b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e6b6:	74 04                	je     c000e6bc <KeGetEnv(Process*, char const*)+0x18>
c000e6b8:	85 c0                	test   eax,eax
c000e6ba:	75 0b                	jne    c000e6c7 <KeGetEnv(Process*, char const*)+0x23>
c000e6bc:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e6c1:	85 c0                	test   eax,eax
c000e6c3:	75 19                	jne    c000e6de <KeGetEnv(Process*, char const*)+0x3a>
c000e6c5:	eb 27                	jmp    c000e6ee <KeGetEnv(Process*, char const*)+0x4a>
c000e6c7:	52                   	push   edx
c000e6c8:	52                   	push   edx
c000e6c9:	53                   	push   ebx
c000e6ca:	ff b0 7a 07 00 00    	push   DWORD PTR [eax+0x77a]
c000e6d0:	e8 3b fc ff ff       	call   c000e310 <EnvVarContainer::getEnv(char const*)>
c000e6d5:	83 c4 10             	add    esp,0x10
c000e6d8:	85 c0                	test   eax,eax
c000e6da:	75 28                	jne    c000e704 <KeGetEnv(Process*, char const*)+0x60>
c000e6dc:	eb de                	jmp    c000e6bc <KeGetEnv(Process*, char const*)+0x18>
c000e6de:	52                   	push   edx
c000e6df:	52                   	push   edx
c000e6e0:	53                   	push   ebx
c000e6e1:	50                   	push   eax
c000e6e2:	e8 29 fc ff ff       	call   c000e310 <EnvVarContainer::getEnv(char const*)>
c000e6e7:	83 c4 10             	add    esp,0x10
c000e6ea:	85 c0                	test   eax,eax
c000e6ec:	75 16                	jne    c000e704 <KeGetEnv(Process*, char const*)+0x60>
c000e6ee:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e6f2:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e6f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6fb:	83 c4 08             	add    esp,0x8
c000e6fe:	5b                   	pop    ebx
c000e6ff:	e9 0c fc ff ff       	jmp    c000e310 <EnvVarContainer::getEnv(char const*)>
c000e704:	83 c4 08             	add    esp,0x8
c000e707:	5b                   	pop    ebx
c000e708:	c3                   	ret    

c000e709 <KeSetEnvSystem(char const*, char const*)>:
c000e709:	83 ec 10             	sub    esp,0x10
c000e70c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e710:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e714:	ff 35 dc c0 02 c0    	push   DWORD PTR ds:0xc002c0dc
c000e71a:	e8 2f fc ff ff       	call   c000e34e <EnvVarContainer::setEnv(char const*, char const*)>
c000e71f:	83 c4 1c             	add    esp,0x1c
c000e722:	c3                   	ret    

c000e723 <KeSetEnvUser(char const*, char const*)>:
c000e723:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e728:	85 c0                	test   eax,eax
c000e72a:	74 15                	je     c000e741 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e72c:	83 ec 10             	sub    esp,0x10
c000e72f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e733:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e737:	50                   	push   eax
c000e738:	e8 11 fc ff ff       	call   c000e34e <EnvVarContainer::setEnv(char const*, char const*)>
c000e73d:	83 c4 1c             	add    esp,0x1c
c000e740:	c3                   	ret    
c000e741:	c3                   	ret    

c000e742 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e746:	8b 80 7a 07 00 00    	mov    eax,DWORD PTR [eax+0x77a]
c000e74c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e750:	e9 f9 fb ff ff       	jmp    c000e34e <EnvVarContainer::setEnv(char const*, char const*)>

c000e755 <KeDeleteEnvSystem(char const*)>:
c000e755:	c3                   	ret    

c000e756 <KeDeleteEnvUser(char const*)>:
c000e756:	c3                   	ret    

c000e757 <KeDeleteEnvProcess(Process*, char const*)>:
c000e757:	c3                   	ret    

c000e758 <KeNewProcessEnv(Process*)>:
c000e758:	83 ec 28             	sub    esp,0x28
c000e75b:	6a 0c                	push   0xc
c000e75d:	e8 82 13 00 00       	call   c000fae4 <malloc>
c000e762:	5a                   	pop    edx
c000e763:	59                   	pop    ecx
c000e764:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e768:	50                   	push   eax
c000e769:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e76d:	e8 e0 fe ff ff       	call   c000e652 <EnvVarContainer::EnvVarContainer(Process*)>
c000e772:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e776:	83 c4 2c             	add    esp,0x2c
c000e779:	c3                   	ret    

c000e77a <KeCopyProcessEnv(Process*, Process*)>:
c000e77a:	57                   	push   edi
c000e77b:	56                   	push   esi
c000e77c:	53                   	push   ebx
c000e77d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e781:	83 ec 0c             	sub    esp,0xc
c000e784:	8b b8 7a 07 00 00    	mov    edi,DWORD PTR [eax+0x77a]
c000e78a:	6a 0c                	push   0xc
c000e78c:	e8 53 13 00 00       	call   c000fae4 <malloc>
c000e791:	89 c3                	mov    ebx,eax
c000e793:	58                   	pop    eax
c000e794:	5a                   	pop    edx
c000e795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e799:	53                   	push   ebx
c000e79a:	e8 b3 fe ff ff       	call   c000e652 <EnvVarContainer::EnvVarContainer(Process*)>
c000e79f:	8b 07                	mov    eax,DWORD PTR [edi]
c000e7a1:	89 03                	mov    DWORD PTR [ebx],eax
c000e7a3:	c1 e0 03             	shl    eax,0x3
c000e7a6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7a9:	e8 36 13 00 00       	call   c000fae4 <malloc>
c000e7ae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e7b1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e7b3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e7b6:	89 c7                	mov    edi,eax
c000e7b8:	c1 e1 03             	shl    ecx,0x3
c000e7bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7bd:	83 c4 10             	add    esp,0x10
c000e7c0:	89 d8                	mov    eax,ebx
c000e7c2:	5b                   	pop    ebx
c000e7c3:	5e                   	pop    esi
c000e7c4:	5f                   	pop    edi
c000e7c5:	c3                   	ret    

c000e7c6 <KeLoadSystemEnv()>:
c000e7c6:	53                   	push   ebx
c000e7c7:	83 ec 14             	sub    esp,0x14
c000e7ca:	6a 0c                	push   0xc
c000e7cc:	e8 13 13 00 00       	call   c000fae4 <malloc>
c000e7d1:	89 c3                	mov    ebx,eax
c000e7d3:	58                   	pop    eax
c000e7d4:	5a                   	pop    edx
c000e7d5:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e7db:	53                   	push   ebx
c000e7dc:	e8 71 fe ff ff       	call   c000e652 <EnvVarContainer::EnvVarContainer(Process*)>
c000e7e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7e4:	89 1d dc c0 02 c0    	mov    DWORD PTR ds:0xc002c0dc,ebx
c000e7ea:	e8 47 fe ff ff       	call   c000e636 <EnvVarContainer::__loadSystem()>
c000e7ef:	83 c4 18             	add    esp,0x18
c000e7f2:	5b                   	pop    ebx
c000e7f3:	c3                   	ret    

c000e7f4 <KeLoadUserEnv()>:
c000e7f4:	53                   	push   ebx
c000e7f5:	83 ec 14             	sub    esp,0x14
c000e7f8:	6a 0c                	push   0xc
c000e7fa:	e8 e5 12 00 00       	call   c000fae4 <malloc>
c000e7ff:	89 c3                	mov    ebx,eax
c000e801:	58                   	pop    eax
c000e802:	5a                   	pop    edx
c000e803:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e809:	53                   	push   ebx
c000e80a:	e8 43 fe ff ff       	call   c000e652 <EnvVarContainer::EnvVarContainer(Process*)>
c000e80f:	89 1d d8 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d8,ebx
c000e815:	83 c4 18             	add    esp,0x18
c000e818:	5b                   	pop    ebx
c000e819:	c3                   	ret    

c000e81a <KeFlushEnv()>:
c000e81a:	c3                   	ret    

c000e81b <KeGetProcessTotalEnvCount(Process*)>:
c000e81b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e81f:	8b 15 d8 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0d8
c000e825:	8b 88 7a 07 00 00    	mov    ecx,DWORD PTR [eax+0x77a]
c000e82b:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e830:	8b 00                	mov    eax,DWORD PTR [eax]
c000e832:	03 01                	add    eax,DWORD PTR [ecx]
c000e834:	85 d2                	test   edx,edx
c000e836:	74 02                	je     c000e83a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e838:	03 02                	add    eax,DWORD PTR [edx]
c000e83a:	c3                   	ret    

c000e83b <KeGetProcessEnvPair(Process*, int)>:
c000e83b:	57                   	push   edi
c000e83c:	56                   	push   esi
c000e83d:	8b 35 d8 c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0d8
c000e843:	53                   	push   ebx
c000e844:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e848:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e84c:	85 f6                	test   esi,esi
c000e84e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e852:	8b 88 7a 07 00 00    	mov    ecx,DWORD PTR [eax+0x77a]
c000e858:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e85a:	75 16                	jne    c000e872 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e85c:	39 c2                	cmp    edx,eax
c000e85e:	7c 16                	jl     c000e876 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e860:	8b 0d dc c0 02 c0    	mov    ecx,DWORD PTR ds:0xc002c0dc
c000e866:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e868:	01 c6                	add    esi,eax
c000e86a:	39 d6                	cmp    esi,edx
c000e86c:	7e 3c                	jle    c000e8aa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e86e:	29 c2                	sub    edx,eax
c000e870:	eb 04                	jmp    c000e876 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e872:	39 c2                	cmp    edx,eax
c000e874:	7d 05                	jge    c000e87b <KeGetProcessEnvPair(Process*, int)+0x40>
c000e876:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e879:	eb 20                	jmp    c000e89b <KeGetProcessEnvPair(Process*, int)+0x60>
c000e87b:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e87d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e880:	39 d1                	cmp    ecx,edx
c000e882:	7e 04                	jle    c000e888 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e884:	29 c2                	sub    edx,eax
c000e886:	eb 10                	jmp    c000e898 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e888:	8b 35 dc c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0dc
c000e88e:	03 0e                	add    ecx,DWORD PTR [esi]
c000e890:	39 d1                	cmp    ecx,edx
c000e892:	7e 16                	jle    c000e8aa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e894:	29 c2                	sub    edx,eax
c000e896:	29 fa                	sub    edx,edi
c000e898:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e89b:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e89e:	8b 02                	mov    eax,DWORD PTR [edx]
c000e8a0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e8a3:	89 03                	mov    DWORD PTR [ebx],eax
c000e8a5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e8a8:	eb 1d                	jmp    c000e8c7 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e8aa:	83 ec 0c             	sub    esp,0xc
c000e8ad:	68 2a 3d 02 c0       	push   0xc0023d2a
c000e8b2:	e8 73 15 00 00       	call   c000fe2a <KePanic(char const*)>
c000e8b7:	83 c4 10             	add    esp,0x10
c000e8ba:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e8c0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e8c7:	89 d8                	mov    eax,ebx
c000e8c9:	5b                   	pop    ebx
c000e8ca:	5e                   	pop    esi
c000e8cb:	5f                   	pop    edi
c000e8cc:	c2 04 00             	ret    0x4
c000e8cf:	90                   	nop

c000e8d0 <KeSetupInterrupts()>:
c000e8d0:	83 ec 10             	sub    esp,0x10
c000e8d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e8db:	90                   	nop
c000e8dc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e8e4:	7f 5a                	jg     c000e940 <KeSetupInterrupts()+0x70>
c000e8e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e8ee:	66 90                	xchg   ax,ax
c000e8f0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e8f5:	7f 41                	jg     c000e938 <KeSetupInterrupts()+0x68>
c000e8f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8fb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e902:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e906:	01 d0                	add    eax,edx
c000e908:	c7 04 85 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f20],0x0
c000e913:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e917:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e91e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e922:	01 d0                	add    eax,edx
c000e924:	c7 04 85 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd3f20],0x0
c000e92f:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e934:	eb ba                	jmp    c000e8f0 <KeSetupInterrupts()+0x20>
c000e936:	66 90                	xchg   ax,ax
c000e938:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e93d:	eb 9d                	jmp    c000e8dc <KeSetupInterrupts()+0xc>
c000e93f:	90                   	nop
c000e940:	90                   	nop
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	c3                   	ret    
c000e945:	8d 76 00             	lea    esi,[esi+0x0]

c000e948 <int_handler>:
c000e948:	83 ec 2c             	sub    esp,0x2c
c000e94b:	90                   	nop
c000e94c:	a0 28 e1 02 c0       	mov    al,ds:0xc002e128
c000e951:	0f b6 c0             	movzx  eax,al
c000e954:	85 c0                	test   eax,eax
c000e956:	74 04                	je     c000e95c <int_handler+0x14>
c000e958:	fa                   	cli    
c000e959:	f4                   	hlt    
c000e95a:	eb f0                	jmp    c000e94c <int_handler+0x4>
c000e95c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e960:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e967:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000e96c:	7e 1a                	jle    c000e988 <int_handler+0x40>
c000e96e:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000e973:	7f 13                	jg     c000e988 <int_handler+0x40>
c000e975:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e979:	83 e8 20             	sub    eax,0x20
c000e97c:	83 ec 0c             	sub    esp,0xc
c000e97f:	50                   	push   eax
c000e980:	e8 d9 b6 00 00       	call   c001a05e <HalEndOfInterrupt(int)>
c000e985:	83 c4 10             	add    esp,0x10
c000e988:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e98c:	c1 e0 04             	shl    eax,0x4
c000e98f:	05 e0 d0 02 c0       	add    eax,0xc002d0e0
c000e994:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e998:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e99c:	c1 e0 04             	shl    eax,0x4
c000e99f:	05 e0 c0 02 c0       	add    eax,0xc002c0e0
c000e9a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9a8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e9b0:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000e9b5:	0f 8f ad 00 00 00    	jg     c000ea68 <int_handler+0x120>
c000e9bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9ca:	01 d0                	add    eax,edx
c000e9cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9ce:	85 c0                	test   eax,eax
c000e9d0:	0f 84 86 00 00 00    	je     c000ea5c <int_handler+0x114>
c000e9d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9da:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e9dd:	83 f8 60             	cmp    eax,0x60
c000e9e0:	75 46                	jne    c000ea28 <int_handler+0xe0>
c000e9e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9e6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9f1:	01 d0                	add    eax,edx
c000e9f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9f9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ea00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ea04:	01 ca                	add    edx,ecx
c000ea06:	8b 12                	mov    edx,DWORD PTR [edx]
c000ea08:	83 ec 08             	sub    esp,0x8
c000ea0b:	52                   	push   edx
c000ea0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea10:	ff d0                	call   eax
c000ea12:	83 c4 10             	add    esp,0x10
c000ea15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ea1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea25:	eb 4d                	jmp    c000ea74 <int_handler+0x12c>
c000ea27:	90                   	nop
c000ea28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea2c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea37:	01 d0                	add    eax,edx
c000ea39:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ea3f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ea46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ea4a:	01 ca                	add    edx,ecx
c000ea4c:	8b 12                	mov    edx,DWORD PTR [edx]
c000ea4e:	83 ec 08             	sub    esp,0x8
c000ea51:	52                   	push   edx
c000ea52:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea56:	ff d0                	call   eax
c000ea58:	83 c4 10             	add    esp,0x10
c000ea5b:	90                   	nop
c000ea5c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000ea61:	e9 4a ff ff ff       	jmp    c000e9b0 <int_handler+0x68>
c000ea66:	66 90                	xchg   ax,ax
c000ea68:	b8 00 00 00 00       	mov    eax,0x0
c000ea6d:	ba 00 00 00 00       	mov    edx,0x0
c000ea72:	66 90                	xchg   ax,ax
c000ea74:	83 c4 2c             	add    esp,0x2c
c000ea77:	c3                   	ret    

c000ea78 <KeDisplayProgramFault(char const*)>:
c000ea78:	83 ec 0c             	sub    esp,0xc
c000ea7b:	83 ec 0c             	sub    esp,0xc
c000ea7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea82:	e8 c7 84 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ea87:	83 c4 10             	add    esp,0x10
c000ea8a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ea8f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea91:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea94:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c000ea9a:	85 c0                	test   eax,eax
c000ea9c:	74 22                	je     c000eac0 <KeDisplayProgramFault(char const*)+0x48>
c000ea9e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eaa3:	8b 00                	mov    eax,DWORD PTR [eax]
c000eaa5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eaa8:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c000eaae:	6a 04                	push   0x4
c000eab0:	6a 0f                	push   0xf
c000eab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eab6:	50                   	push   eax
c000eab7:	e8 80 3c 00 00       	call   c001273c <VgaText::puts(char const*, VgaColour, VgaColour)>
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	90                   	nop
c000eac0:	90                   	nop
c000eac1:	83 c4 0c             	add    esp,0xc
c000eac4:	c3                   	ret    
c000eac5:	8d 76 00             	lea    esi,[esi+0x0]

c000eac8 <KeGeneralProtectionFault(void*, void*)>:
c000eac8:	83 ec 0c             	sub    esp,0xc
c000eacb:	83 ec 08             	sub    esp,0x8
c000eace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ead2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ead6:	e8 25 ab 00 00       	call   c0019600 <HalHandleGeneralProtectionFault(void*, void*)>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	0f b6 c0             	movzx  eax,al
c000eae1:	85 c0                	test   eax,eax
c000eae3:	75 2f                	jne    c000eb14 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000eae5:	83 ec 0c             	sub    esp,0xc
c000eae8:	68 44 3d 02 c0       	push   0xc0023d44
c000eaed:	e8 86 ff ff ff       	call   c000ea78 <KeDisplayProgramFault(char const*)>
c000eaf2:	83 c4 10             	add    esp,0x10
c000eaf5:	83 ec 0c             	sub    esp,0xc
c000eaf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eafc:	e8 99 ac 00 00       	call   c001979a <HalDisplayDebugInfo(void*)>
c000eb01:	83 c4 10             	add    esp,0x10
c000eb04:	83 ec 0c             	sub    esp,0xc
c000eb07:	6a 00                	push   0x0
c000eb09:	e8 86 8b 00 00       	call   c0017694 <Thr::terminateFromIRQ(int)>
c000eb0e:	83 c4 10             	add    esp,0x10
c000eb11:	eb 05                	jmp    c000eb18 <KeGeneralProtectionFault(void*, void*)+0x50>
c000eb13:	90                   	nop
c000eb14:	90                   	nop
c000eb15:	8d 76 00             	lea    esi,[esi+0x0]
c000eb18:	83 c4 0c             	add    esp,0xc
c000eb1b:	c3                   	ret    

c000eb1c <KePageFault(void*, void*)>:
c000eb1c:	83 ec 0c             	sub    esp,0xc
c000eb1f:	83 ec 0c             	sub    esp,0xc
c000eb22:	68 5d 3d 02 c0       	push   0xc0023d5d
c000eb27:	e8 22 84 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb2c:	83 c4 10             	add    esp,0x10
c000eb2f:	83 ec 08             	sub    esp,0x8
c000eb32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb3a:	e8 6c ab 00 00       	call   c00196ab <HalHandlePageFault(void*, void*)>
c000eb3f:	83 c4 10             	add    esp,0x10
c000eb42:	0f b6 c0             	movzx  eax,al
c000eb45:	85 c0                	test   eax,eax
c000eb47:	75 2f                	jne    c000eb78 <KePageFault(void*, void*)+0x5c>
c000eb49:	83 ec 0c             	sub    esp,0xc
c000eb4c:	68 6a 3d 02 c0       	push   0xc0023d6a
c000eb51:	e8 22 ff ff ff       	call   c000ea78 <KeDisplayProgramFault(char const*)>
c000eb56:	83 c4 10             	add    esp,0x10
c000eb59:	83 ec 0c             	sub    esp,0xc
c000eb5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb60:	e8 35 ac 00 00       	call   c001979a <HalDisplayDebugInfo(void*)>
c000eb65:	83 c4 10             	add    esp,0x10
c000eb68:	83 ec 0c             	sub    esp,0xc
c000eb6b:	6a 00                	push   0x0
c000eb6d:	e8 22 8b 00 00       	call   c0017694 <Thr::terminateFromIRQ(int)>
c000eb72:	83 c4 10             	add    esp,0x10
c000eb75:	eb 05                	jmp    c000eb7c <KePageFault(void*, void*)+0x60>
c000eb77:	90                   	nop
c000eb78:	90                   	nop
c000eb79:	8d 76 00             	lea    esi,[esi+0x0]
c000eb7c:	83 c4 0c             	add    esp,0xc
c000eb7f:	c3                   	ret    

c000eb80 <KeNonMaskableInterrupt(void*, void*)>:
c000eb80:	83 ec 0c             	sub    esp,0xc
c000eb83:	e8 a0 af 00 00       	call   c0019b28 <HalReceivedNMI()>
c000eb88:	90                   	nop
c000eb89:	83 c4 0c             	add    esp,0xc
c000eb8c:	c3                   	ret    
c000eb8d:	8d 76 00             	lea    esi,[esi+0x0]

c000eb90 <KeOtherFault(void*, void*)>:
c000eb90:	83 ec 0c             	sub    esp,0xc
c000eb93:	83 ec 0c             	sub    esp,0xc
c000eb96:	68 78 3d 02 c0       	push   0xc0023d78
c000eb9b:	e8 d8 fe ff ff       	call   c000ea78 <KeDisplayProgramFault(char const*)>
c000eba0:	83 c4 10             	add    esp,0x10
c000eba3:	83 ec 0c             	sub    esp,0xc
c000eba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebaa:	e8 eb ab 00 00       	call   c001979a <HalDisplayDebugInfo(void*)>
c000ebaf:	83 c4 10             	add    esp,0x10
c000ebb2:	83 ec 0c             	sub    esp,0xc
c000ebb5:	6a 00                	push   0x0
c000ebb7:	e8 d8 8a 00 00       	call   c0017694 <Thr::terminateFromIRQ(int)>
c000ebbc:	83 c4 10             	add    esp,0x10
c000ebbf:	90                   	nop
c000ebc0:	83 c4 0c             	add    esp,0xc
c000ebc3:	c3                   	ret    

c000ebc4 <KeOpcodeFault(void*, void*)>:
c000ebc4:	55                   	push   ebp
c000ebc5:	89 e5                	mov    ebp,esp
c000ebc7:	83 ec 08             	sub    esp,0x8
c000ebca:	83 ec 08             	sub    esp,0x8
c000ebcd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ebd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ebd3:	e8 80 ab 00 00       	call   c0019758 <HalHandleOpcodeFault(void*, void*)>
c000ebd8:	83 c4 10             	add    esp,0x10
c000ebdb:	0f b6 c0             	movzx  eax,al
c000ebde:	85 c0                	test   eax,eax
c000ebe0:	75 2e                	jne    c000ec10 <KeOpcodeFault(void*, void*)+0x4c>
c000ebe2:	83 ec 0c             	sub    esp,0xc
c000ebe5:	68 a0 3d 02 c0       	push   0xc0023da0
c000ebea:	e8 89 fe ff ff       	call   c000ea78 <KeDisplayProgramFault(char const*)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ebf8:	e8 9d ab 00 00       	call   c001979a <HalDisplayDebugInfo(void*)>
c000ebfd:	83 c4 10             	add    esp,0x10
c000ec00:	83 ec 0c             	sub    esp,0xc
c000ec03:	6a 00                	push   0x0
c000ec05:	e8 8a 8a 00 00       	call   c0017694 <Thr::terminateFromIRQ(int)>
c000ec0a:	83 c4 10             	add    esp,0x10
c000ec0d:	eb 05                	jmp    c000ec14 <KeOpcodeFault(void*, void*)+0x50>
c000ec0f:	90                   	nop
c000ec10:	90                   	nop
c000ec11:	8d 76 00             	lea    esi,[esi+0x0]
c000ec14:	c9                   	leave  
c000ec15:	c3                   	ret    
c000ec16:	66 90                	xchg   ax,ax

c000ec18 <KeDoubleFault(void*, void*)>:
c000ec18:	55                   	push   ebp
c000ec19:	89 e5                	mov    ebp,esp
c000ec1b:	83 ec 08             	sub    esp,0x8
c000ec1e:	83 ec 0c             	sub    esp,0xc
c000ec21:	68 ad 3d 02 c0       	push   0xc0023dad
c000ec26:	e8 ff 11 00 00       	call   c000fe2a <KePanic(char const*)>
c000ec2b:	83 c4 10             	add    esp,0x10
c000ec2e:	90                   	nop
c000ec2f:	c9                   	leave  
c000ec30:	c3                   	ret    
c000ec31:	90                   	nop

c000ec32 <GDTEntry::setBase(unsigned int)>:
c000ec32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ec3a:	89 c1                	mov    ecx,eax
c000ec3c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ec40:	c1 e9 10             	shr    ecx,0x10
c000ec43:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ec46:	c1 e8 18             	shr    eax,0x18
c000ec49:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ec4c:	c3                   	ret    
c000ec4d:	90                   	nop

c000ec4e <GDTEntry::setLimit(unsigned int)>:
c000ec4e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ec52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec56:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ec59:	66 89 01             	mov    WORD PTR [ecx],ax
c000ec5c:	c1 e8 10             	shr    eax,0x10
c000ec5f:	83 e0 0f             	and    eax,0xf
c000ec62:	83 e2 f0             	and    edx,0xfffffff0
c000ec65:	09 d0                	or     eax,edx
c000ec67:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ec6a:	c3                   	ret    
c000ec6b:	90                   	nop

c000ec6c <GDT::GDT()>:
c000ec6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec80:	90                   	nop
c000ec81:	c3                   	ret    

c000ec82 <GDT::addEntry(GDTEntry)>:
c000ec82:	53                   	push   ebx
c000ec83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ec8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ec8f:	8b 02                	mov    eax,DWORD PTR [edx]
c000ec91:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ec95:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec98:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ec9c:	c1 e0 03             	shl    eax,0x3
c000ec9f:	89 0a                	mov    DWORD PTR [edx],ecx
c000eca1:	5b                   	pop    ebx
c000eca2:	c3                   	ret    
c000eca3:	90                   	nop

c000eca4 <GDT::getNumberOfEntries()>:
c000eca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eca8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecaa:	c3                   	ret    
c000ecab:	90                   	nop

c000ecac <GDT::flush()>:
c000ecac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecb0:	8b 10                	mov    edx,DWORD PTR [eax]
c000ecb2:	83 c0 04             	add    eax,0x4
c000ecb5:	a3 e2 e0 02 c0       	mov    ds:0xc002e0e2,eax
c000ecba:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ecc1:	66 89 15 e0 e0 02 c0 	mov    WORD PTR ds:0xc002e0e0,dx
c000ecc8:	e9 8d 16 ff ff       	jmp    c000035a <loadGDT>
c000eccd:	90                   	nop

c000ecce <GDT::setup()>:
c000ecce:	57                   	push   edi
c000eccf:	56                   	push   esi
c000ecd0:	53                   	push   ebx
c000ecd1:	83 ec 30             	sub    esp,0x30
c000ecd4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ecd8:	6a 00                	push   0x0
c000ecda:	8d 74 24 14          	lea    esi,[esp+0x14]
c000ecde:	56                   	push   esi
c000ecdf:	e8 4e ff ff ff       	call   c000ec32 <GDTEntry::setBase(unsigned int)>
c000ece4:	6a 00                	push   0x0
c000ece6:	56                   	push   esi
c000ece7:	e8 62 ff ff ff       	call   c000ec4e <GDTEntry::setLimit(unsigned int)>
c000ecec:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000ecf4:	6a 00                	push   0x0
c000ecf6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ecfa:	56                   	push   esi
c000ecfb:	e8 32 ff ff ff       	call   c000ec32 <GDTEntry::setBase(unsigned int)>
c000ed00:	68 ff ff ff 00       	push   0xffffff
c000ed05:	56                   	push   esi
c000ed06:	e8 43 ff ff ff       	call   c000ec4e <GDTEntry::setLimit(unsigned int)>
c000ed0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed0f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ed13:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ed18:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000ed1c:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ed21:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ed25:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ed29:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ed2d:	89 f8                	mov    eax,edi
c000ed2f:	89 fa                	mov    edx,edi
c000ed31:	80 e4 f7             	and    ah,0xf7
c000ed34:	80 ce 60             	or     dh,0x60
c000ed37:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ed3b:	89 c7                	mov    edi,eax
c000ed3d:	80 cc 60             	or     ah,0x60
c000ed40:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed44:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ed48:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed4c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ed50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ed54:	83 c4 20             	add    esp,0x20
c000ed57:	6a 00                	push   0x0
c000ed59:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ed5d:	50                   	push   eax
c000ed5e:	e8 cf fe ff ff       	call   c000ec32 <GDTEntry::setBase(unsigned int)>
c000ed63:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ed67:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ed6b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ed6f:	83 e0 3f             	and    eax,0x3f
c000ed72:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ed76:	6a 00                	push   0x0
c000ed78:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ed7c:	50                   	push   eax
c000ed7d:	e8 b0 fe ff ff       	call   c000ec32 <GDTEntry::setBase(unsigned int)>
c000ed82:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ed86:	83 e0 3f             	and    eax,0x3f
c000ed89:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ed8d:	83 c4 0c             	add    esp,0xc
c000ed90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed98:	53                   	push   ebx
c000ed99:	e8 e4 fe ff ff       	call   c000ec82 <GDT::addEntry(GDTEntry)>
c000ed9e:	83 c4 0c             	add    esp,0xc
c000eda1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eda5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eda9:	53                   	push   ebx
c000edaa:	e8 d3 fe ff ff       	call   c000ec82 <GDT::addEntry(GDTEntry)>
c000edaf:	83 c4 0c             	add    esp,0xc
c000edb2:	57                   	push   edi
c000edb3:	56                   	push   esi
c000edb4:	53                   	push   ebx
c000edb5:	e8 c8 fe ff ff       	call   c000ec82 <GDT::addEntry(GDTEntry)>
c000edba:	83 c4 0c             	add    esp,0xc
c000edbd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000edc1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000edc5:	53                   	push   ebx
c000edc6:	e8 b7 fe ff ff       	call   c000ec82 <GDT::addEntry(GDTEntry)>
c000edcb:	83 c4 0c             	add    esp,0xc
c000edce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000edd2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000edd6:	53                   	push   ebx
c000edd7:	e8 a6 fe ff ff       	call   c000ec82 <GDT::addEntry(GDTEntry)>
c000eddc:	83 c4 0c             	add    esp,0xc
c000eddf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ede3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ede7:	53                   	push   ebx
c000ede8:	e8 95 fe ff ff       	call   c000ec82 <GDT::addEntry(GDTEntry)>
c000eded:	83 c4 0c             	add    esp,0xc
c000edf0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000edf4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000edf8:	53                   	push   ebx
c000edf9:	e8 84 fe ff ff       	call   c000ec82 <GDT::addEntry(GDTEntry)>
c000edfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee01:	e8 a6 fe ff ff       	call   c000ecac <GDT::flush()>
c000ee06:	83 c4 40             	add    esp,0x40
c000ee09:	5b                   	pop    ebx
c000ee0a:	5e                   	pop    esi
c000ee0b:	5f                   	pop    edi
c000ee0c:	c3                   	ret    

c000ee0d <idleFunction(void*)>:
c000ee0d:	83 ec 0c             	sub    esp,0xc
c000ee10:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000ee17:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000ee1e:	75 01                	jne    c000ee21 <idleFunction(void*)+0x14>
c000ee20:	fb                   	sti    
c000ee21:	e8 9d ad 00 00       	call   c0019bc3 <HalSystemIdle()>
c000ee26:	e8 db 2f 01 00       	call   c0021e06 <idleCommon()>
c000ee2b:	eb f4                	jmp    c000ee21 <idleFunction(void*)+0x14>
c000ee2d:	66 90                	xchg   ax,ax
c000ee2f:	90                   	nop

c000ee30 <IDTEntry::IDTEntry(bool)>:
c000ee30:	53                   	push   ebx
c000ee31:	83 ec 04             	sub    esp,0x4
c000ee34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee38:	88 04 24             	mov    BYTE PTR [esp],al
c000ee3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee3f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ee45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee49:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ee4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee51:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee54:	83 e2 f0             	and    edx,0xfffffff0
c000ee57:	83 ca 0e             	or     edx,0xe
c000ee5a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee61:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee64:	83 e2 ef             	and    edx,0xffffffef
c000ee67:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee6a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ee6e:	85 c0                	test   eax,eax
c000ee70:	74 06                	je     c000ee78 <IDTEntry::IDTEntry(bool)+0x48>
c000ee72:	b2 03                	mov    dl,0x3
c000ee74:	eb 06                	jmp    c000ee7c <IDTEntry::IDTEntry(bool)+0x4c>
c000ee76:	66 90                	xchg   ax,ax
c000ee78:	b2 00                	mov    dl,0x0
c000ee7a:	66 90                	xchg   ax,ax
c000ee7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee80:	83 e2 03             	and    edx,0x3
c000ee83:	89 d3                	mov    ebx,edx
c000ee85:	c1 e3 05             	shl    ebx,0x5
c000ee88:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee8b:	83 e2 9f             	and    edx,0xffffff9f
c000ee8e:	88 d1                	mov    cl,dl
c000ee90:	88 da                	mov    dl,bl
c000ee92:	09 ca                	or     edx,ecx
c000ee94:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee9b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee9e:	83 ca 80             	or     edx,0xffffff80
c000eea1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eea4:	90                   	nop
c000eea5:	83 c4 04             	add    esp,0x4
c000eea8:	5b                   	pop    ebx
c000eea9:	c3                   	ret    

c000eeaa <IDTEntry::setOffset(unsigned int)>:
c000eeaa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eeae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeb2:	66 89 02             	mov    WORD PTR [edx],ax
c000eeb5:	c1 e8 10             	shr    eax,0x10
c000eeb8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000eebc:	c3                   	ret    
c000eebd:	90                   	nop
c000eebe:	66 90                	xchg   ax,ax

c000eec0 <IDT::IDT()>:
c000eec0:	90                   	nop
c000eec1:	c3                   	ret    

c000eec2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000eec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec6:	83 c0 30             	add    eax,0x30
c000eec9:	c3                   	ret    

c000eeca <IDT::addEntry(IDTEntry, int)>:
c000eeca:	53                   	push   ebx
c000eecb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eecf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eed3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eed7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eedb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000eede:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000eee2:	5b                   	pop    ebx
c000eee3:	c3                   	ret    

c000eee4 <IDT::addEntry(int, void (*)(), bool)>:
c000eee4:	53                   	push   ebx
c000eee5:	83 ec 10             	sub    esp,0x10
c000eee8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000eeed:	50                   	push   eax
c000eeee:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000eef2:	53                   	push   ebx
c000eef3:	e8 38 ff ff ff       	call   c000ee30 <IDTEntry::IDTEntry(bool)>
c000eef8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eefc:	53                   	push   ebx
c000eefd:	e8 a8 ff ff ff       	call   c000eeaa <IDTEntry::setOffset(unsigned int)>
c000ef02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef12:	e8 b3 ff ff ff       	call   c000eeca <IDT::addEntry(IDTEntry, int)>
c000ef17:	83 c4 30             	add    esp,0x30
c000ef1a:	5b                   	pop    ebx
c000ef1b:	c3                   	ret    

c000ef1c <IDT::flush()>:
c000ef1c:	66 c7 05 e8 e0 02 c0 ff 07 	mov    WORD PTR ds:0xc002e0e8,0x7ff
c000ef25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef29:	a3 ea e0 02 c0       	mov    ds:0xc002e0ea,eax
c000ef2e:	0f 01 1d e8 e0 02 c0 	lidtd  ds:0xc002e0e8
c000ef35:	c3                   	ret    

c000ef36 <IDT::setup()>:
c000ef36:	57                   	push   edi
c000ef37:	56                   	push   esi
c000ef38:	53                   	push   ebx
c000ef39:	83 ec 10             	sub    esp,0x10
c000ef3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ef40:	6a 00                	push   0x0
c000ef42:	68 e0 10 02 c0       	push   0xc00210e0
c000ef47:	6a 00                	push   0x0
c000ef49:	53                   	push   ebx
c000ef4a:	e8 95 ff ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000ef4f:	6a 00                	push   0x0
c000ef51:	68 f0 10 02 c0       	push   0xc00210f0
c000ef56:	6a 01                	push   0x1
c000ef58:	53                   	push   ebx
c000ef59:	e8 86 ff ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000ef5e:	83 c4 20             	add    esp,0x20
c000ef61:	6a 00                	push   0x0
c000ef63:	68 fa 10 02 c0       	push   0xc00210fa
c000ef68:	6a 02                	push   0x2
c000ef6a:	53                   	push   ebx
c000ef6b:	e8 74 ff ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000ef70:	6a 00                	push   0x0
c000ef72:	68 04 11 02 c0       	push   0xc0021104
c000ef77:	6a 03                	push   0x3
c000ef79:	53                   	push   ebx
c000ef7a:	e8 65 ff ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000ef7f:	83 c4 20             	add    esp,0x20
c000ef82:	6a 00                	push   0x0
c000ef84:	68 0e 11 02 c0       	push   0xc002110e
c000ef89:	6a 04                	push   0x4
c000ef8b:	53                   	push   ebx
c000ef8c:	e8 53 ff ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000ef91:	6a 00                	push   0x0
c000ef93:	68 18 11 02 c0       	push   0xc0021118
c000ef98:	6a 05                	push   0x5
c000ef9a:	53                   	push   ebx
c000ef9b:	e8 44 ff ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000efa0:	83 c4 20             	add    esp,0x20
c000efa3:	6a 00                	push   0x0
c000efa5:	68 22 11 02 c0       	push   0xc0021122
c000efaa:	6a 06                	push   0x6
c000efac:	53                   	push   ebx
c000efad:	e8 32 ff ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000efb2:	6a 00                	push   0x0
c000efb4:	68 2c 11 02 c0       	push   0xc002112c
c000efb9:	6a 07                	push   0x7
c000efbb:	53                   	push   ebx
c000efbc:	e8 23 ff ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000efc1:	83 c4 20             	add    esp,0x20
c000efc4:	6a 00                	push   0x0
c000efc6:	68 36 11 02 c0       	push   0xc0021136
c000efcb:	6a 08                	push   0x8
c000efcd:	53                   	push   ebx
c000efce:	e8 11 ff ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000efd3:	6a 00                	push   0x0
c000efd5:	68 3e 11 02 c0       	push   0xc002113e
c000efda:	6a 09                	push   0x9
c000efdc:	53                   	push   ebx
c000efdd:	e8 02 ff ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000efe2:	83 c4 20             	add    esp,0x20
c000efe5:	6a 00                	push   0x0
c000efe7:	68 48 11 02 c0       	push   0xc0021148
c000efec:	6a 0a                	push   0xa
c000efee:	53                   	push   ebx
c000efef:	e8 f0 fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000eff4:	6a 00                	push   0x0
c000eff6:	68 50 11 02 c0       	push   0xc0021150
c000effb:	6a 0b                	push   0xb
c000effd:	53                   	push   ebx
c000effe:	e8 e1 fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f003:	83 c4 20             	add    esp,0x20
c000f006:	6a 00                	push   0x0
c000f008:	68 58 11 02 c0       	push   0xc0021158
c000f00d:	6a 0c                	push   0xc
c000f00f:	53                   	push   ebx
c000f010:	e8 cf fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f015:	6a 00                	push   0x0
c000f017:	68 60 11 02 c0       	push   0xc0021160
c000f01c:	6a 0d                	push   0xd
c000f01e:	53                   	push   ebx
c000f01f:	e8 c0 fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f024:	83 c4 20             	add    esp,0x20
c000f027:	6a 00                	push   0x0
c000f029:	68 7a 11 02 c0       	push   0xc002117a
c000f02e:	6a 0e                	push   0xe
c000f030:	53                   	push   ebx
c000f031:	e8 ae fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f036:	6a 00                	push   0x0
c000f038:	68 82 11 02 c0       	push   0xc0021182
c000f03d:	6a 0f                	push   0xf
c000f03f:	53                   	push   ebx
c000f040:	e8 9f fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f045:	83 c4 20             	add    esp,0x20
c000f048:	6a 00                	push   0x0
c000f04a:	68 8c 11 02 c0       	push   0xc002118c
c000f04f:	6a 10                	push   0x10
c000f051:	53                   	push   ebx
c000f052:	e8 8d fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f057:	6a 00                	push   0x0
c000f059:	68 96 11 02 c0       	push   0xc0021196
c000f05e:	6a 11                	push   0x11
c000f060:	53                   	push   ebx
c000f061:	e8 7e fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f066:	83 c4 20             	add    esp,0x20
c000f069:	6a 00                	push   0x0
c000f06b:	68 a0 11 02 c0       	push   0xc00211a0
c000f070:	6a 12                	push   0x12
c000f072:	53                   	push   ebx
c000f073:	e8 6c fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f078:	6a 01                	push   0x1
c000f07a:	68 3a 12 02 c0       	push   0xc002123a
c000f07f:	6a 60                	push   0x60
c000f081:	53                   	push   ebx
c000f082:	e8 5d fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f087:	83 c4 20             	add    esp,0x20
c000f08a:	6a 00                	push   0x0
c000f08c:	68 41 12 02 c0       	push   0xc0021241
c000f091:	6a 20                	push   0x20
c000f093:	53                   	push   ebx
c000f094:	e8 4b fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f099:	6a 00                	push   0x0
c000f09b:	68 2c 12 02 c0       	push   0xc002122c
c000f0a0:	6a 21                	push   0x21
c000f0a2:	53                   	push   ebx
c000f0a3:	e8 3c fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f0a8:	83 c4 20             	add    esp,0x20
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 33 12 02 c0       	push   0xc0021233
c000f0b2:	6a 22                	push   0x22
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 2a fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	6a 00                	push   0x0
c000f0bc:	68 aa 11 02 c0       	push   0xc00211aa
c000f0c1:	6a 23                	push   0x23
c000f0c3:	53                   	push   ebx
c000f0c4:	e8 1b fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f0c9:	83 c4 20             	add    esp,0x20
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 b4 11 02 c0       	push   0xc00211b4
c000f0d3:	6a 24                	push   0x24
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 09 fe ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	6a 00                	push   0x0
c000f0dd:	68 be 11 02 c0       	push   0xc00211be
c000f0e2:	6a 25                	push   0x25
c000f0e4:	53                   	push   ebx
c000f0e5:	e8 fa fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f0ea:	83 c4 20             	add    esp,0x20
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 c8 11 02 c0       	push   0xc00211c8
c000f0f4:	6a 26                	push   0x26
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 e8 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	6a 00                	push   0x0
c000f0fe:	68 d2 11 02 c0       	push   0xc00211d2
c000f103:	6a 27                	push   0x27
c000f105:	53                   	push   ebx
c000f106:	e8 d9 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f10b:	83 c4 20             	add    esp,0x20
c000f10e:	6a 00                	push   0x0
c000f110:	68 dc 11 02 c0       	push   0xc00211dc
c000f115:	6a 28                	push   0x28
c000f117:	53                   	push   ebx
c000f118:	e8 c7 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	6a 00                	push   0x0
c000f11f:	68 e6 11 02 c0       	push   0xc00211e6
c000f124:	6a 29                	push   0x29
c000f126:	53                   	push   ebx
c000f127:	e8 b8 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f12c:	83 c4 20             	add    esp,0x20
c000f12f:	6a 00                	push   0x0
c000f131:	68 f0 11 02 c0       	push   0xc00211f0
c000f136:	6a 2a                	push   0x2a
c000f138:	53                   	push   ebx
c000f139:	e8 a6 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	6a 00                	push   0x0
c000f140:	68 fa 11 02 c0       	push   0xc00211fa
c000f145:	6a 2b                	push   0x2b
c000f147:	53                   	push   ebx
c000f148:	e8 97 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f14d:	83 c4 20             	add    esp,0x20
c000f150:	6a 00                	push   0x0
c000f152:	68 04 12 02 c0       	push   0xc0021204
c000f157:	6a 2c                	push   0x2c
c000f159:	53                   	push   ebx
c000f15a:	e8 85 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	6a 00                	push   0x0
c000f161:	68 0e 12 02 c0       	push   0xc002120e
c000f166:	6a 2d                	push   0x2d
c000f168:	53                   	push   ebx
c000f169:	e8 76 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	68 18 12 02 c0       	push   0xc0021218
c000f178:	6a 2e                	push   0x2e
c000f17a:	53                   	push   ebx
c000f17b:	e8 64 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	6a 00                	push   0x0
c000f182:	68 22 12 02 c0       	push   0xc0021222
c000f187:	6a 2f                	push   0x2f
c000f189:	53                   	push   ebx
c000f18a:	e8 55 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f18f:	83 c4 20             	add    esp,0x20
c000f192:	6a 00                	push   0x0
c000f194:	68 44 13 02 c0       	push   0xc0021344
c000f199:	6a 30                	push   0x30
c000f19b:	53                   	push   ebx
c000f19c:	e8 43 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	6a 00                	push   0x0
c000f1a3:	68 4e 13 02 c0       	push   0xc002134e
c000f1a8:	6a 31                	push   0x31
c000f1aa:	53                   	push   ebx
c000f1ab:	e8 34 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f1b0:	83 c4 20             	add    esp,0x20
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 58 13 02 c0       	push   0xc0021358
c000f1ba:	6a 32                	push   0x32
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 22 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	6a 00                	push   0x0
c000f1c4:	68 62 13 02 c0       	push   0xc0021362
c000f1c9:	6a 33                	push   0x33
c000f1cb:	53                   	push   ebx
c000f1cc:	e8 13 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f1d1:	83 c4 20             	add    esp,0x20
c000f1d4:	6a 00                	push   0x0
c000f1d6:	68 6c 13 02 c0       	push   0xc002136c
c000f1db:	6a 34                	push   0x34
c000f1dd:	53                   	push   ebx
c000f1de:	e8 01 fd ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	6a 00                	push   0x0
c000f1e5:	68 76 13 02 c0       	push   0xc0021376
c000f1ea:	6a 35                	push   0x35
c000f1ec:	53                   	push   ebx
c000f1ed:	e8 f2 fc ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f1f2:	83 c4 20             	add    esp,0x20
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 80 13 02 c0       	push   0xc0021380
c000f1fc:	6a 36                	push   0x36
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 e0 fc ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	6a 00                	push   0x0
c000f206:	68 8a 13 02 c0       	push   0xc002138a
c000f20b:	6a 37                	push   0x37
c000f20d:	53                   	push   ebx
c000f20e:	e8 d1 fc ff ff       	call   c000eee4 <IDT::addEntry(int, void (*)(), bool)>
c000f213:	83 c4 1c             	add    esp,0x1c
c000f216:	6a 03                	push   0x3
c000f218:	6a 02                	push   0x2
c000f21a:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000f220:	e8 a1 48 00 00       	call   c0013ac6 <VAS::allocatePages(int, int)>
c000f225:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f22c:	89 c6                	mov    esi,eax
c000f22e:	e8 b1 08 00 00       	call   c000fae4 <malloc>
c000f233:	81 c6 00 20 00 00    	add    esi,0x2000
c000f239:	89 04 24             	mov    DWORD PTR [esp],eax
c000f23c:	89 c7                	mov    edi,eax
c000f23e:	e8 45 39 00 00       	call   c0012b88 <TSS::TSS()>
c000f243:	83 c4 0c             	add    esp,0xc
c000f246:	68 36 11 02 c0       	push   0xc0021136
c000f24b:	56                   	push   esi
c000f24c:	57                   	push   edi
c000f24d:	e8 7a 39 00 00       	call   c0012bcc <TSS::setup(unsigned long, unsigned long)>
c000f252:	89 c6                	mov    esi,eax
c000f254:	58                   	pop    eax
c000f255:	5a                   	pop    edx
c000f256:	6a 00                	push   0x0
c000f258:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f25c:	50                   	push   eax
c000f25d:	e8 ce fb ff ff       	call   c000ee30 <IDTEntry::IDTEntry(bool)>
c000f262:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f266:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f26b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f272:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f276:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f27c:	80 ce 05             	or     dh,0x5
c000f27f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f283:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f286:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f28a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f28d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f290:	e8 87 fc ff ff       	call   c000ef1c <IDT::flush()>
c000f295:	83 c4 20             	add    esp,0x20
c000f298:	5b                   	pop    ebx
c000f299:	5e                   	pop    esi
c000f29a:	5f                   	pop    edi
c000f29b:	c3                   	ret    

c000f29c <CPU::current()>:
c000f29c:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000f2a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f2a7:	c3                   	ret    

c000f2a8 <operator new(unsigned long)>:
c000f2a8:	e9 37 08 00 00       	jmp    c000fae4 <malloc>

c000f2ad <operator delete(void*)>:
c000f2ad:	e9 52 08 00 00       	jmp    c000fb04 <rfree>

c000f2b2 <disableIRQs()>:
c000f2b2:	fa                   	cli    
c000f2b3:	c3                   	ret    

c000f2b4 <enableIRQs()>:
c000f2b4:	fb                   	sti    
c000f2b5:	c3                   	ret    

c000f2b6 <lockScheduler()>:
c000f2b6:	fa                   	cli    
c000f2b7:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f2bd:	c3                   	ret    

c000f2be <unlockScheduler()>:
c000f2be:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f2c5:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f2cc:	75 01                	jne    c000f2cf <unlockScheduler()+0x11>
c000f2ce:	fb                   	sti    
c000f2cf:	c3                   	ret    

c000f2d0 <lockStuff()>:
c000f2d0:	fa                   	cli    
c000f2d1:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f2d7:	ff 05 2c ea 02 c0    	inc    DWORD PTR ds:0xc002ea2c
c000f2dd:	c3                   	ret    

c000f2de <unlockStuff()>:
c000f2de:	83 ec 0c             	sub    esp,0xc
c000f2e1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000f2e6:	48                   	dec    eax
c000f2e7:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c000f2ec:	75 18                	jne    c000f306 <unlockStuff()+0x28>
c000f2ee:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c000f2f5:	74 0f                	je     c000f306 <unlockStuff()+0x28>
c000f2f7:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c000f301:	e8 8a 7a 00 00       	call   c0016d90 <schedule()>
c000f306:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f30d:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f314:	75 01                	jne    c000f317 <unlockStuff()+0x39>
c000f316:	fb                   	sti    
c000f317:	83 c4 0c             	add    esp,0xc
c000f31a:	c3                   	ret    

c000f31b <Virt::getAKernelVAS()>:
c000f31b:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c000f320:	c3                   	ret    

c000f321 <__not_memcpy>:
c000f321:	57                   	push   edi
c000f322:	56                   	push   esi
c000f323:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f327:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f32b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f32f:	89 c7                	mov    edi,eax
c000f331:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f333:	5e                   	pop    esi
c000f334:	5f                   	pop    edi
c000f335:	c3                   	ret    

c000f336 <KeFormatDate(char*, int, int, int, int, bool)>:
c000f336:	55                   	push   ebp
c000f337:	57                   	push   edi
c000f338:	56                   	push   esi
c000f339:	be e8 03 00 00       	mov    esi,0x3e8
c000f33e:	53                   	push   ebx
c000f33f:	bb 0a 00 00 00       	mov    ebx,0xa
c000f344:	81 ec ac 00 00 00    	sub    esp,0xac
c000f34a:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f34f:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000f356:	89 c8                	mov    eax,ecx
c000f358:	99                   	cdq    
c000f359:	f7 fb                	idiv   ebx
c000f35b:	89 d5                	mov    ebp,edx
c000f35d:	99                   	cdq    
c000f35e:	f7 fb                	idiv   ebx
c000f360:	8d 42 30             	lea    eax,[edx+0x30]
c000f363:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f367:	8d 45 30             	lea    eax,[ebp+0x30]
c000f36a:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000f372:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f376:	89 c8                	mov    eax,ecx
c000f378:	99                   	cdq    
c000f379:	f7 fe                	idiv   esi
c000f37b:	be 64 00 00 00       	mov    esi,0x64
c000f380:	99                   	cdq    
c000f381:	f7 fb                	idiv   ebx
c000f383:	8d 42 30             	lea    eax,[edx+0x30]
c000f386:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f38a:	89 c8                	mov    eax,ecx
c000f38c:	99                   	cdq    
c000f38d:	f7 fe                	idiv   esi
c000f38f:	99                   	cdq    
c000f390:	f7 fb                	idiv   ebx
c000f392:	31 db                	xor    ebx,ebx
c000f394:	8d 42 30             	lea    eax,[edx+0x30]
c000f397:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f39b:	0f be 8b 04 e1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd1efc]
c000f3a2:	83 f9 59             	cmp    ecx,0x59
c000f3a5:	0f 84 1f 01 00 00    	je     c000f4ca <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000f3ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f3af:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000f3b6:	83 f9 4d             	cmp    ecx,0x4d
c000f3b9:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000f3c1:	57                   	push   edi
c000f3c2:	57                   	push   edi
c000f3c3:	89 d7                	mov    edi,edx
c000f3c5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f3c9:	c1 ff 1f             	sar    edi,0x1f
c000f3cc:	57                   	push   edi
c000f3cd:	52                   	push   edx
c000f3ce:	e8 6d 04 00 00       	call   c000f840 <KeGetDigitsInNumber(long long)>
c000f3d3:	83 c4 10             	add    esp,0x10
c000f3d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3da:	48                   	dec    eax
c000f3db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f3df:	75 1c                	jne    c000f3fd <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f3e1:	83 f9 44             	cmp    ecx,0x44
c000f3e4:	75 09                	jne    c000f3ef <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000f3e6:	80 3d 20 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e120,0x0
c000f3ed:	eb 0c                	jmp    c000f3fb <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000f3ef:	83 f9 4d             	cmp    ecx,0x4d
c000f3f2:	75 60                	jne    c000f454 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f3f4:	80 3d 21 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e121,0x0
c000f3fb:	74 57                	je     c000f454 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f3fd:	89 d0                	mov    eax,edx
c000f3ff:	b9 0a 00 00 00       	mov    ecx,0xa
c000f404:	99                   	cdq    
c000f405:	f7 f9                	idiv   ecx
c000f407:	89 d6                	mov    esi,edx
c000f409:	99                   	cdq    
c000f40a:	f7 f9                	idiv   ecx
c000f40c:	83 c2 30             	add    edx,0x30
c000f40f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f413:	8d 56 30             	lea    edx,[esi+0x30]
c000f416:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f41a:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f41f:	56                   	push   esi
c000f420:	56                   	push   esi
c000f421:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f425:	57                   	push   edi
c000f426:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f42a:	56                   	push   esi
c000f42b:	e8 40 14 ff ff       	call   c0000870 <strcat>
c000f430:	83 c4 10             	add    esp,0x10
c000f433:	83 fb 02             	cmp    ebx,0x2
c000f436:	74 34                	je     c000f46c <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f438:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f43d:	a0 08 e1 02 c0       	mov    al,ds:0xc002e108
c000f442:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f446:	51                   	push   ecx
c000f447:	51                   	push   ecx
c000f448:	57                   	push   edi
c000f449:	56                   	push   esi
c000f44a:	e8 21 14 ff ff       	call   c0000870 <strcat>
c000f44f:	83 c4 10             	add    esp,0x10
c000f452:	eb 18                	jmp    c000f46c <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f454:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f459:	89 d0                	mov    eax,edx
c000f45b:	b9 0a 00 00 00       	mov    ecx,0xa
c000f460:	99                   	cdq    
c000f461:	f7 f9                	idiv   ecx
c000f463:	83 c2 30             	add    edx,0x30
c000f466:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f46a:	eb b3                	jmp    c000f41f <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f46c:	43                   	inc    ebx
c000f46d:	83 fb 03             	cmp    ebx,0x3
c000f470:	0f 85 25 ff ff ff    	jne    c000f39b <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000f476:	52                   	push   edx
c000f477:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f47e:	6a 00                	push   0x0
c000f480:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f487:	e8 64 10 ff ff       	call   c00004f0 <memset>
c000f48c:	89 34 24             	mov    DWORD PTR [esp],esi
c000f48f:	e8 ec 10 ff ff       	call   c0000580 <strlen>
c000f494:	83 c4 10             	add    esp,0x10
c000f497:	40                   	inc    eax
c000f498:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f49f:	72 14                	jb     c000f4b5 <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000f4a1:	50                   	push   eax
c000f4a2:	50                   	push   eax
c000f4a3:	56                   	push   esi
c000f4a4:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f4ab:	e8 a0 11 ff ff       	call   c0000650 <strcpy>
c000f4b0:	83 c4 10             	add    esp,0x10
c000f4b3:	eb 58                	jmp    c000f50d <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f4b5:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f4bc:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f4c3:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f4c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4c8:	eb 43                	jmp    c000f50d <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f4ca:	85 ed                	test   ebp,ebp
c000f4cc:	74 2a                	je     c000f4f8 <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000f4ce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f4d3:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f4d7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f4db:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f4df:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f4e3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f4e7:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f4eb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f4ef:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f4f3:	e9 27 ff ff ff       	jmp    c000f41f <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f4f8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f4fc:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f500:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f504:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f508:	e9 0d ff ff ff       	jmp    c000f41a <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000f50d:	81 c4 ac 00 00 00    	add    esp,0xac
c000f513:	5b                   	pop    ebx
c000f514:	5e                   	pop    esi
c000f515:	5f                   	pop    edi
c000f516:	5d                   	pop    ebp
c000f517:	c3                   	ret    

c000f518 <KeFormatShortDate(char*, int, int, int, int)>:
c000f518:	83 ec 14             	sub    esp,0x14
c000f51b:	6a 00                	push   0x0
c000f51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f521:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f525:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f529:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f52d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f531:	e8 00 fe ff ff       	call   c000f336 <KeFormatDate(char*, int, int, int, int, bool)>
c000f536:	83 c4 2c             	add    esp,0x2c
c000f539:	c3                   	ret    

c000f53a <KeFormatLongDate(char*, int, int, int, int)>:
c000f53a:	83 ec 14             	sub    esp,0x14
c000f53d:	6a 01                	push   0x1
c000f53f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f543:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f547:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f54b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f54f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f553:	e8 de fd ff ff       	call   c000f336 <KeFormatDate(char*, int, int, int, int, bool)>
c000f558:	83 c4 2c             	add    esp,0x2c
c000f55b:	c3                   	ret    

c000f55c <KeSetLocale(klocale_t)>:
c000f55c:	57                   	push   edi
c000f55d:	b9 09 00 00 00       	mov    ecx,0x9
c000f562:	56                   	push   esi
c000f563:	bf 00 e1 02 c0       	mov    edi,0xc002e100
c000f568:	fc                   	cld    
c000f569:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f56d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f56f:	5e                   	pop    esi
c000f570:	5f                   	pop    edi
c000f571:	c3                   	ret    

c000f572 <KeInitialiseLocale()>:
c000f572:	57                   	push   edi
c000f573:	56                   	push   esi
c000f574:	83 ec 3c             	sub    esp,0x3c
c000f577:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f57f:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f587:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f58f:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f597:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f59e:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f5a6:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f5ae:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f5b5:	68 ba 3d 02 c0       	push   0xc0023dba
c000f5ba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f5be:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f5c2:	50                   	push   eax
c000f5c3:	e8 88 10 ff ff       	call   c0000650 <strcpy>
c000f5c8:	83 ec 20             	sub    esp,0x20
c000f5cb:	b9 09 00 00 00       	mov    ecx,0x9
c000f5d0:	fc                   	cld    
c000f5d1:	89 e7                	mov    edi,esp
c000f5d3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f5d5:	e8 82 ff ff ff       	call   c000f55c <KeSetLocale(klocale_t)>
c000f5da:	83 c4 64             	add    esp,0x64
c000f5dd:	5e                   	pop    esi
c000f5de:	5f                   	pop    edi
c000f5df:	c3                   	ret    

c000f5e0 <KeFormatCurrency(char*, int, long long, long long)>:
c000f5e0:	c3                   	ret    

c000f5e1 <KeFormatCurrency(char*, int, double)>:
c000f5e1:	c3                   	ret    

c000f5e2 <KeFormatNumber(char*, long long, long long)>:
c000f5e2:	c3                   	ret    

c000f5e3 <KeFormatNumber(char*, double)>:
c000f5e3:	c3                   	ret    

c000f5e4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f5e4:	55                   	push   ebp
c000f5e5:	57                   	push   edi
c000f5e6:	56                   	push   esi
c000f5e7:	53                   	push   ebx
c000f5e8:	83 ec 4c             	sub    esp,0x4c
c000f5eb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f5f3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f5f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f5fb:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f603:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f60b:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f613:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f61b:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f620:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f624:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f62c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f630:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f634:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f638:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f63d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f641:	89 c2                	mov    edx,eax
c000f643:	c1 fa 1f             	sar    edx,0x1f
c000f646:	52                   	push   edx
c000f647:	50                   	push   eax
c000f648:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f64c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f650:	e8 df 20 01 00       	call   c0021734 <__udivdi3>
c000f655:	83 c4 10             	add    esp,0x10
c000f658:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f65c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f660:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f664:	80 f4 00             	xor    ah,0x0
c000f667:	89 c7                	mov    edi,eax
c000f669:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f66d:	80 f4 00             	xor    ah,0x0
c000f670:	89 c5                	mov    ebp,eax
c000f672:	89 e8                	mov    eax,ebp
c000f674:	09 f8                	or     eax,edi
c000f676:	74 04                	je     c000f67c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000f678:	eb be                	jmp    c000f638 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f67a:	66 90                	xchg   ax,ax
c000f67c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f680:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f683:	90                   	nop
c000f684:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f688:	89 c7                	mov    edi,eax
c000f68a:	89 c5                	mov    ebp,eax
c000f68c:	c1 fd 1f             	sar    ebp,0x1f
c000f68f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f693:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	52                   	push   edx
c000f69a:	50                   	push   eax
c000f69b:	e8 94 21 01 00       	call   c0021834 <__umoddi3>
c000f6a0:	83 c4 10             	add    esp,0x10
c000f6a3:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f6a8:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f6ac:	01 c8                	add    eax,ecx
c000f6ae:	8a 10                	mov    dl,BYTE PTR [eax]
c000f6b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6b4:	88 10                	mov    BYTE PTR [eax],dl
c000f6b6:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f6ba:	89 c2                	mov    edx,eax
c000f6bc:	c1 fa 1f             	sar    edx,0x1f
c000f6bf:	52                   	push   edx
c000f6c0:	50                   	push   eax
c000f6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6c9:	e8 66 20 01 00       	call   c0021734 <__udivdi3>
c000f6ce:	83 c4 10             	add    esp,0x10
c000f6d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f6d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f6dd:	80 f4 00             	xor    ah,0x0
c000f6e0:	89 c3                	mov    ebx,eax
c000f6e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f6e6:	80 f4 00             	xor    ah,0x0
c000f6e9:	89 c6                	mov    esi,eax
c000f6eb:	89 f0                	mov    eax,esi
c000f6ed:	09 d8                	or     eax,ebx
c000f6ef:	74 03                	je     c000f6f4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000f6f1:	eb 91                	jmp    c000f684 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000f6f3:	90                   	nop
c000f6f4:	90                   	nop
c000f6f5:	83 c4 4c             	add    esp,0x4c
c000f6f8:	5b                   	pop    ebx
c000f6f9:	5e                   	pop    esi
c000f6fa:	5f                   	pop    edi
c000f6fb:	5d                   	pop    ebp
c000f6fc:	c3                   	ret    
c000f6fd:	8d 76 00             	lea    esi,[esi+0x0]

c000f700 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f700:	55                   	push   ebp
c000f701:	57                   	push   edi
c000f702:	56                   	push   esi
c000f703:	53                   	push   ebx
c000f704:	83 ec 4c             	sub    esp,0x4c
c000f707:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f70b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f70f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f713:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f717:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f71f:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f727:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f72f:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f737:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f73c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f740:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f744:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f749:	79 1d                	jns    c000f768 <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000f74b:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000f74f:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000f754:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000f758:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f75c:	8d 50 01             	lea    edx,[eax+0x1]
c000f75f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f763:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f766:	66 90                	xchg   ax,ax
c000f768:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f76c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f770:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f774:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f778:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f77d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f781:	89 c2                	mov    edx,eax
c000f783:	c1 fa 1f             	sar    edx,0x1f
c000f786:	52                   	push   edx
c000f787:	50                   	push   eax
c000f788:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f78c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f790:	e8 9f 1f 01 00       	call   c0021734 <__udivdi3>
c000f795:	83 c4 10             	add    esp,0x10
c000f798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f79c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f7a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7a4:	80 f4 00             	xor    ah,0x0
c000f7a7:	89 c7                	mov    edi,eax
c000f7a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f7ad:	80 f4 00             	xor    ah,0x0
c000f7b0:	89 c5                	mov    ebp,eax
c000f7b2:	89 e8                	mov    eax,ebp
c000f7b4:	09 f8                	or     eax,edi
c000f7b6:	74 04                	je     c000f7bc <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f7b8:	eb be                	jmp    c000f778 <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000f7ba:	66 90                	xchg   ax,ax
c000f7bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f7c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f7c3:	90                   	nop
c000f7c4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f7c8:	89 c7                	mov    edi,eax
c000f7ca:	89 c5                	mov    ebp,eax
c000f7cc:	c1 fd 1f             	sar    ebp,0x1f
c000f7cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f7d7:	55                   	push   ebp
c000f7d8:	57                   	push   edi
c000f7d9:	52                   	push   edx
c000f7da:	50                   	push   eax
c000f7db:	e8 d4 1d 01 00       	call   c00215b4 <__moddi3>
c000f7e0:	83 c4 10             	add    esp,0x10
c000f7e3:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f7e8:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f7ec:	01 c8                	add    eax,ecx
c000f7ee:	8a 10                	mov    dl,BYTE PTR [eax]
c000f7f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f7f4:	88 10                	mov    BYTE PTR [eax],dl
c000f7f6:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f7fa:	89 c2                	mov    edx,eax
c000f7fc:	c1 fa 1f             	sar    edx,0x1f
c000f7ff:	52                   	push   edx
c000f800:	50                   	push   eax
c000f801:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f805:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f809:	e8 5a 1c 01 00       	call   c0021468 <__divdi3>
c000f80e:	83 c4 10             	add    esp,0x10
c000f811:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f815:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f81d:	80 f4 00             	xor    ah,0x0
c000f820:	89 c3                	mov    ebx,eax
c000f822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f826:	80 f4 00             	xor    ah,0x0
c000f829:	89 c6                	mov    esi,eax
c000f82b:	89 f0                	mov    eax,esi
c000f82d:	09 d8                	or     eax,ebx
c000f82f:	74 03                	je     c000f834 <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000f831:	eb 91                	jmp    c000f7c4 <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000f833:	90                   	nop
c000f834:	90                   	nop
c000f835:	83 c4 4c             	add    esp,0x4c
c000f838:	5b                   	pop    ebx
c000f839:	5e                   	pop    esi
c000f83a:	5f                   	pop    edi
c000f83b:	5d                   	pop    ebp
c000f83c:	c3                   	ret    
c000f83d:	8d 76 00             	lea    esi,[esi+0x0]

c000f840 <KeGetDigitsInNumber(long long)>:
c000f840:	56                   	push   esi
c000f841:	53                   	push   ebx
c000f842:	83 ec 24             	sub    esp,0x24
c000f845:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f849:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f84d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f851:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f855:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f85d:	8d 76 00             	lea    esi,[esi+0x0]
c000f860:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f864:	80 f4 00             	xor    ah,0x0
c000f867:	89 c3                	mov    ebx,eax
c000f869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f86d:	80 f4 00             	xor    ah,0x0
c000f870:	89 c6                	mov    esi,eax
c000f872:	89 f0                	mov    eax,esi
c000f874:	09 d8                	or     eax,ebx
c000f876:	74 28                	je     c000f8a0 <KeGetDigitsInNumber(long long)+0x60>
c000f878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f87c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f880:	6a 00                	push   0x0
c000f882:	6a 0a                	push   0xa
c000f884:	52                   	push   edx
c000f885:	50                   	push   eax
c000f886:	e8 dd 1b 01 00       	call   c0021468 <__divdi3>
c000f88b:	83 c4 10             	add    esp,0x10
c000f88e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f892:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f896:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f89b:	eb c3                	jmp    c000f860 <KeGetDigitsInNumber(long long)+0x20>
c000f89d:	8d 76 00             	lea    esi,[esi+0x0]
c000f8a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8a4:	83 c4 24             	add    esp,0x24
c000f8a7:	5b                   	pop    ebx
c000f8a8:	5e                   	pop    esi
c000f8a9:	c3                   	ret    
c000f8aa:	66 90                	xchg   ax,ax

c000f8ac <KeItoa(unsigned long long, char*)>:
c000f8ac:	83 ec 1c             	sub    esp,0x1c
c000f8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f8b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f8bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8bf:	6a 0a                	push   0xa
c000f8c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8cd:	e8 12 fd ff ff       	call   c000f5e4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f8d2:	83 c4 10             	add    esp,0x10
c000f8d5:	90                   	nop
c000f8d6:	83 c4 1c             	add    esp,0x1c
c000f8d9:	c3                   	ret    
c000f8da:	66 90                	xchg   ax,ax

c000f8dc <KeItoa(long long, char*)>:
c000f8dc:	83 ec 1c             	sub    esp,0x1c
c000f8df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f8e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f8e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f8eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8ef:	6a 0a                	push   0xa
c000f8f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8fd:	e8 fe fd ff ff       	call   c000f700 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f902:	83 c4 10             	add    esp,0x10
c000f905:	90                   	nop
c000f906:	83 c4 1c             	add    esp,0x1c
c000f909:	c3                   	ret    
c000f90a:	66 90                	xchg   ax,ax

c000f90c <KeXtoa(unsigned long long, char*)>:
c000f90c:	83 ec 1c             	sub    esp,0x1c
c000f90f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f913:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f917:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f91b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f91f:	6a 10                	push   0x10
c000f921:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f92d:	e8 b2 fc ff ff       	call   c000f5e4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f932:	83 c4 10             	add    esp,0x10
c000f935:	90                   	nop
c000f936:	83 c4 1c             	add    esp,0x1c
c000f939:	c3                   	ret    

c000f93a <sbrk>:
c000f93a:	55                   	push   ebp
c000f93b:	57                   	push   edi
c000f93c:	56                   	push   esi
c000f93d:	53                   	push   ebx
c000f93e:	83 ec 1c             	sub    esp,0x1c
c000f941:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f945:	85 c0                	test   eax,eax
c000f947:	74 66                	je     c000f9af <sbrk+0x75>
c000f949:	78 6b                	js     c000f9b6 <sbrk+0x7c>
c000f94b:	8b 15 f0 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264f0
c000f951:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f955:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000f95b:	05 ff 0f 00 00       	add    eax,0xfff
c000f960:	0f 49 e8             	cmovns ebp,eax
c000f963:	c1 fd 0c             	sar    ebp,0xc
c000f966:	bb 00 00 00 00       	mov    ebx,0x0
c000f96b:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000f971:	8b 3d f0 64 02 c0    	mov    edi,DWORD PTR ds:0xc00264f0
c000f977:	e8 a8 06 00 00       	call   c0010024 <Phys::allocatePage()>
c000f97c:	68 01 04 00 00       	push   0x401
c000f981:	57                   	push   edi
c000f982:	50                   	push   eax
c000f983:	56                   	push   esi
c000f984:	e8 35 40 00 00       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c000f989:	81 05 f0 64 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00264f0,0x1000
c000f993:	83 c3 01             	add    ebx,0x1
c000f996:	83 c4 10             	add    esp,0x10
c000f999:	39 dd                	cmp    ebp,ebx
c000f99b:	75 ce                	jne    c000f96b <sbrk+0x31>
c000f99d:	0f 20 d8             	mov    eax,cr3
c000f9a0:	0f 22 d8             	mov    cr3,eax
c000f9a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9a7:	83 c4 1c             	add    esp,0x1c
c000f9aa:	5b                   	pop    ebx
c000f9ab:	5e                   	pop    esi
c000f9ac:	5f                   	pop    edi
c000f9ad:	5d                   	pop    ebp
c000f9ae:	c3                   	ret    
c000f9af:	a1 f0 64 02 c0       	mov    eax,ds:0xc00264f0
c000f9b4:	eb f1                	jmp    c000f9a7 <sbrk+0x6d>
c000f9b6:	83 ec 08             	sub    esp,0x8
c000f9b9:	50                   	push   eax
c000f9ba:	68 c0 3d 02 c0       	push   0xc0023dc0
c000f9bf:	e8 8a 75 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f9c4:	83 c4 10             	add    esp,0x10
c000f9c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f9cc:	eb d9                	jmp    c000f9a7 <sbrk+0x6d>

c000f9ce <sbrk_thunk>:
c000f9ce:	83 ec 0c             	sub    esp,0xc
c000f9d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9d5:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f9da:	7f 10                	jg     c000f9ec <sbrk_thunk+0x1e>
c000f9dc:	83 ec 0c             	sub    esp,0xc
c000f9df:	50                   	push   eax
c000f9e0:	e8 55 ff ff ff       	call   c000f93a <sbrk>
c000f9e5:	83 c4 10             	add    esp,0x10
c000f9e8:	83 c4 0c             	add    esp,0xc
c000f9eb:	c3                   	ret    
c000f9ec:	83 ec 08             	sub    esp,0x8
c000f9ef:	50                   	push   eax
c000f9f0:	68 f0 3d 02 c0       	push   0xc0023df0
c000f9f5:	e8 54 75 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f9fa:	83 c4 10             	add    esp,0x10
c000f9fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fa02:	eb e4                	jmp    c000f9e8 <sbrk_thunk+0x1a>

c000fa04 <mmap>:
c000fa04:	55                   	push   ebp
c000fa05:	57                   	push   edi
c000fa06:	56                   	push   esi
c000fa07:	53                   	push   ebx
c000fa08:	83 ec 18             	sub    esp,0x18
c000fa0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa0f:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fa15:	89 fb                	mov    ebx,edi
c000fa17:	c1 eb 0c             	shr    ebx,0xc
c000fa1a:	53                   	push   ebx
c000fa1b:	e8 c5 38 00 00       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c000fa20:	89 c5                	mov    ebp,eax
c000fa22:	83 c4 10             	add    esp,0x10
c000fa25:	85 db                	test   ebx,ebx
c000fa27:	7e 2f                	jle    c000fa58 <mmap+0x54>
c000fa29:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000fa2f:	01 c7                	add    edi,eax
c000fa31:	89 c3                	mov    ebx,eax
c000fa33:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000fa39:	e8 e6 05 00 00       	call   c0010024 <Phys::allocatePage()>
c000fa3e:	68 01 04 00 00       	push   0x401
c000fa43:	53                   	push   ebx
c000fa44:	50                   	push   eax
c000fa45:	56                   	push   esi
c000fa46:	e8 73 3f 00 00       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c000fa4b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fa51:	83 c4 10             	add    esp,0x10
c000fa54:	39 fb                	cmp    ebx,edi
c000fa56:	75 db                	jne    c000fa33 <mmap+0x2f>
c000fa58:	89 e8                	mov    eax,ebp
c000fa5a:	83 c4 0c             	add    esp,0xc
c000fa5d:	5b                   	pop    ebx
c000fa5e:	5e                   	pop    esi
c000fa5f:	5f                   	pop    edi
c000fa60:	5d                   	pop    ebp
c000fa61:	c3                   	ret    

c000fa62 <munmap>:
c000fa62:	83 ec 18             	sub    esp,0x18
c000fa65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa69:	e8 75 3b 00 00       	call   c00135e3 <Virt::freeKernelVirtualPages(unsigned long)>
c000fa6e:	b8 00 00 00 00       	mov    eax,0x0
c000fa73:	83 c4 1c             	add    esp,0x1c
c000fa76:	c3                   	ret    

c000fa77 <liballoc_lock()>:
c000fa77:	fa                   	cli    
c000fa78:	83 05 30 ea 02 c0 01 	add    DWORD PTR ds:0xc002ea30,0x1
c000fa7f:	b8 00 00 00 00       	mov    eax,0x0
c000fa84:	c3                   	ret    

c000fa85 <liballoc_unlock()>:
c000fa85:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fa8d:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000fa94:	75 01                	jne    c000fa97 <liballoc_unlock()+0x12>
c000fa96:	fb                   	sti    
c000fa97:	b8 00 00 00 00       	mov    eax,0x0
c000fa9c:	c3                   	ret    

c000fa9d <liballoc_alloc(int)>:
c000fa9d:	83 ec 10             	sub    esp,0x10
c000faa0:	6a 01                	push   0x1
c000faa2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000faa6:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000faac:	e8 15 40 00 00       	call   c0013ac6 <VAS::allocatePages(int, int)>
c000fab1:	83 c4 1c             	add    esp,0x1c
c000fab4:	c3                   	ret    

c000fab5 <liballoc_free(void*, int)>:
c000fab5:	83 ec 14             	sub    esp,0x14
c000fab8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fabc:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000fac2:	e8 59 3c 00 00       	call   c0013720 <VAS::freeAllocatedPages(unsigned long)>
c000fac7:	b8 00 00 00 00       	mov    eax,0x0
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	c3                   	ret    

c000fad0 <realloc>:
c000fad0:	83 ec 14             	sub    esp,0x14
c000fad3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fad7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fadb:	e8 a5 1c ff ff       	call   c0001785 <dlrealloc>
c000fae0:	83 c4 1c             	add    esp,0x1c
c000fae3:	c3                   	ret    

c000fae4 <malloc>:
c000fae4:	83 ec 18             	sub    esp,0x18
c000fae7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000faeb:	e8 58 17 ff ff       	call   c0001248 <dlmalloc>
c000faf0:	83 c4 1c             	add    esp,0x1c
c000faf3:	c3                   	ret    

c000faf4 <free>:
c000faf4:	83 ec 18             	sub    esp,0x18
c000faf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fafb:	e8 86 12 ff ff       	call   c0000d86 <dlfree>
c000fb00:	83 c4 1c             	add    esp,0x1c
c000fb03:	c3                   	ret    

c000fb04 <rfree>:
c000fb04:	83 ec 18             	sub    esp,0x18
c000fb07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb0b:	e8 76 12 ff ff       	call   c0000d86 <dlfree>
c000fb10:	83 c4 1c             	add    esp,0x1c
c000fb13:	c3                   	ret    

c000fb14 <calloc>:
c000fb14:	56                   	push   esi
c000fb15:	53                   	push   ebx
c000fb16:	83 ec 10             	sub    esp,0x10
c000fb19:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fb1d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fb22:	53                   	push   ebx
c000fb23:	e8 bc ff ff ff       	call   c000fae4 <malloc>
c000fb28:	89 c6                	mov    esi,eax
c000fb2a:	83 c4 0c             	add    esp,0xc
c000fb2d:	53                   	push   ebx
c000fb2e:	6a 00                	push   0x0
c000fb30:	50                   	push   eax
c000fb31:	e8 ba 09 ff ff       	call   c00004f0 <memset>
c000fb36:	89 f0                	mov    eax,esi
c000fb38:	83 c4 14             	add    esp,0x14
c000fb3b:	5b                   	pop    ebx
c000fb3c:	5e                   	pop    esi
c000fb3d:	c3                   	ret    
c000fb3e:	66 90                	xchg   ax,ax

c000fb40 <KeMailboxTryPost(Mailbox*, void*)>:
c000fb40:	83 ec 10             	sub    esp,0x10
c000fb43:	fa                   	cli    
c000fb44:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fb49:	83 c0 01             	add    eax,0x1
c000fb4c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fb51:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fb56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb5d:	85 c0                	test   eax,eax
c000fb5f:	75 23                	jne    c000fb84 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fb61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fb69:	89 10                	mov    DWORD PTR [eax],edx
c000fb6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb72:	8d 50 01             	lea    edx,[eax+0x1]
c000fb75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb79:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fb7c:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fb81:	8d 76 00             	lea    esi,[esi+0x0]
c000fb84:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fb8c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fb91:	85 c0                	test   eax,eax
c000fb93:	75 03                	jne    c000fb98 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fb95:	fb                   	sti    
c000fb96:	66 90                	xchg   ax,ax
c000fb98:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fb9c:	83 c4 10             	add    esp,0x10
c000fb9f:	c3                   	ret    

c000fba0 <KeMailboxTryGet(Mailbox*, void**)>:
c000fba0:	83 ec 10             	sub    esp,0x10
c000fba3:	fa                   	cli    
c000fba4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fba9:	83 c0 01             	add    eax,0x1
c000fbac:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fbb1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fbb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbbd:	83 f8 01             	cmp    eax,0x1
c000fbc0:	75 22                	jne    c000fbe4 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fbc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbc6:	8b 10                	mov    edx,DWORD PTR [eax]
c000fbc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fbcc:	89 10                	mov    DWORD PTR [eax],edx
c000fbce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbd5:	8d 50 ff             	lea    edx,[eax-0x1]
c000fbd8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbdc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fbdf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fbe4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fbec:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fbf1:	85 c0                	test   eax,eax
c000fbf3:	75 03                	jne    c000fbf8 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fbf5:	fb                   	sti    
c000fbf6:	66 90                	xchg   ax,ax
c000fbf8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fbfc:	83 c4 10             	add    esp,0x10
c000fbff:	c3                   	ret    

c000fc00 <KeMailboxCreate()>:
c000fc00:	83 ec 1c             	sub    esp,0x1c
c000fc03:	83 ec 0c             	sub    esp,0xc
c000fc06:	6a 08                	push   0x8
c000fc08:	e8 d7 fe ff ff       	call   c000fae4 <malloc>
c000fc0d:	83 c4 10             	add    esp,0x10
c000fc10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc18:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fc1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fc29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc2d:	83 c4 1c             	add    esp,0x1c
c000fc30:	c3                   	ret    
c000fc31:	8d 76 00             	lea    esi,[esi+0x0]

c000fc34 <KeMailboxPost(Mailbox*, void*)>:
c000fc34:	83 ec 1c             	sub    esp,0x1c
c000fc37:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fc3c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc44:	e8 f7 fe ff ff       	call   c000fb40 <KeMailboxTryPost(Mailbox*, void*)>
c000fc49:	83 c4 08             	add    esp,0x8
c000fc4c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fc50:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fc54:	83 f0 01             	xor    eax,0x1
c000fc57:	0f b6 c0             	movzx  eax,al
c000fc5a:	85 c0                	test   eax,eax
c000fc5c:	74 26                	je     c000fc84 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fc5e:	fa                   	cli    
c000fc5f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fc64:	83 c0 01             	add    eax,0x1
c000fc67:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fc6c:	e8 1f 71 00 00       	call   c0016d90 <schedule()>
c000fc71:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fc79:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fc7e:	85 c0                	test   eax,eax
c000fc80:	75 02                	jne    c000fc84 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fc82:	fb                   	sti    
c000fc83:	90                   	nop
c000fc84:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fc89:	85 c0                	test   eax,eax
c000fc8b:	75 03                	jne    c000fc90 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fc8d:	eb ad                	jmp    c000fc3c <KeMailboxPost(Mailbox*, void*)+0x8>
c000fc8f:	90                   	nop
c000fc90:	90                   	nop
c000fc91:	83 c4 1c             	add    esp,0x1c
c000fc94:	c3                   	ret    
c000fc95:	8d 76 00             	lea    esi,[esi+0x0]

c000fc98 <KeMailboxGet(Mailbox*, void**)>:
c000fc98:	83 ec 1c             	sub    esp,0x1c
c000fc9b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fca4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fca8:	e8 f3 fe ff ff       	call   c000fba0 <KeMailboxTryGet(Mailbox*, void**)>
c000fcad:	83 c4 08             	add    esp,0x8
c000fcb0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fcb4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fcb8:	83 f0 01             	xor    eax,0x1
c000fcbb:	0f b6 c0             	movzx  eax,al
c000fcbe:	85 c0                	test   eax,eax
c000fcc0:	74 26                	je     c000fce8 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fcc2:	fa                   	cli    
c000fcc3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fcc8:	83 c0 01             	add    eax,0x1
c000fccb:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fcd0:	e8 bb 70 00 00       	call   c0016d90 <schedule()>
c000fcd5:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fcdd:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fce2:	85 c0                	test   eax,eax
c000fce4:	75 02                	jne    c000fce8 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fce6:	fb                   	sti    
c000fce7:	90                   	nop
c000fce8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fced:	85 c0                	test   eax,eax
c000fcef:	75 03                	jne    c000fcf4 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fcf1:	eb ad                	jmp    c000fca0 <KeMailboxGet(Mailbox*, void**)+0x8>
c000fcf3:	90                   	nop
c000fcf4:	90                   	nop
c000fcf5:	83 c4 1c             	add    esp,0x1c
c000fcf8:	c3                   	ret    
c000fcf9:	8d 76 00             	lea    esi,[esi+0x0]

c000fcfc <KeMailboxDestroy(Mailbox*)>:
c000fcfc:	83 ec 0c             	sub    esp,0xc
c000fcff:	83 ec 0c             	sub    esp,0xc
c000fd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd06:	e8 e9 fd ff ff       	call   c000faf4 <free>
c000fd0b:	83 c4 10             	add    esp,0x10
c000fd0e:	90                   	nop
c000fd0f:	83 c4 0c             	add    esp,0xc
c000fd12:	c3                   	ret    

c000fd13 <KeEntryPoint>:
c000fd13:	57                   	push   edi
c000fd14:	bf f9 03 00 00       	mov    edi,0x3f9
c000fd19:	56                   	push   esi
c000fd1a:	31 f6                	xor    esi,esi
c000fd1c:	53                   	push   ebx
c000fd1d:	89 fa                	mov    edx,edi
c000fd1f:	83 ec 2c             	sub    esp,0x2c
c000fd22:	a1 00 05 00 00       	mov    eax,ds:0x500
c000fd27:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c000fd2c:	89 f0                	mov    eax,esi
c000fd2e:	ee                   	out    dx,al
c000fd2f:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fd34:	b0 80                	mov    al,0x80
c000fd36:	89 da                	mov    edx,ebx
c000fd38:	ee                   	out    dx,al
c000fd39:	b1 03                	mov    cl,0x3
c000fd3b:	ba f8 03 00 00       	mov    edx,0x3f8
c000fd40:	88 c8                	mov    al,cl
c000fd42:	ee                   	out    dx,al
c000fd43:	89 f0                	mov    eax,esi
c000fd45:	89 fa                	mov    edx,edi
c000fd47:	ee                   	out    dx,al
c000fd48:	88 c8                	mov    al,cl
c000fd4a:	89 da                	mov    edx,ebx
c000fd4c:	ee                   	out    dx,al
c000fd4d:	b0 c7                	mov    al,0xc7
c000fd4f:	ba fa 03 00 00       	mov    edx,0x3fa
c000fd54:	ee                   	out    dx,al
c000fd55:	b0 0b                	mov    al,0xb
c000fd57:	ba fc 03 00 00       	mov    edx,0x3fc
c000fd5c:	ee                   	out    dx,al
c000fd5d:	68 ff 3d 02 c0       	push   0xc0023dff
c000fd62:	e8 e7 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd67:	e8 00 d4 ff ff       	call   c000d16c <KeDisplaySplashScreen()>
c000fd6c:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fd71:	05 ff 0f 00 00       	add    eax,0xfff
c000fd76:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd7b:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd7e:	e8 32 04 00 00       	call   c00101b5 <Phys::physicalMemorySetup(unsigned int)>
c000fd83:	e8 31 37 00 00       	call   c00134b9 <Virt::virtualMemorySetup()>
c000fd88:	e8 29 d3 ff ff       	call   c000d0b6 <KeInitialiseAtexit()>
c000fd8d:	c7 04 24 16 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e16
c000fd94:	e8 b5 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd99:	58                   	pop    eax
c000fd9a:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fd9e:	53                   	push   ebx
c000fd9f:	e8 fc 39 00 00       	call   c00137a0 <VAS::VAS()>
c000fda4:	c7 04 24 26 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e26
c000fdab:	89 1d 50 e2 02 c0    	mov    DWORD PTR ds:0xc002e250,ebx
c000fdb1:	e8 98 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fdb6:	e8 93 1b 01 00       	call   c002194e <_init>
c000fdbb:	c7 04 24 3a 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e3a
c000fdc2:	e8 87 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fdc7:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000fdce:	e8 11 fd ff ff       	call   c000fae4 <malloc>
c000fdd3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fdd6:	89 c6                	mov    esi,eax
c000fdd8:	e8 53 e4 ff ff       	call   c000e230 <Computer::Computer()>
c000fddd:	5a                   	pop    edx
c000fdde:	89 35 d0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d0,esi
c000fde4:	59                   	pop    ecx
c000fde5:	56                   	push   esi
c000fde6:	68 49 3e 02 c0       	push   0xc0023e49
c000fdeb:	e8 5e 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fdf0:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000fdf5:	8b 10                	mov    edx,DWORD PTR [eax]
c000fdf7:	53                   	push   ebx
c000fdf8:	6a 00                	push   0x0
c000fdfa:	6a 00                	push   0x0
c000fdfc:	50                   	push   eax
c000fdfd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fe00:	83 c4 14             	add    esp,0x14
c000fe03:	53                   	push   ebx
c000fe04:	e8 4d 3a 00 00       	call   c0013856 <VAS::~VAS()>
c000fe09:	83 c4 30             	add    esp,0x30
c000fe0c:	5b                   	pop    ebx
c000fe0d:	5e                   	pop    esi
c000fe0e:	5f                   	pop    edi
c000fe0f:	c3                   	ret    

c000fe10 <Mutex::Mutex()>:
c000fe10:	83 ec 0c             	sub    esp,0xc
c000fe13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe17:	83 ec 08             	sub    esp,0x8
c000fe1a:	6a 01                	push   0x1
c000fe1c:	50                   	push   eax
c000fe1d:	e8 4e 0c 00 00       	call   c0010a70 <Semaphore::Semaphore(int)>
c000fe22:	83 c4 10             	add    esp,0x10
c000fe25:	90                   	nop
c000fe26:	83 c4 0c             	add    esp,0xc
c000fe29:	c3                   	ret    

c000fe2a <KePanic(char const*)>:
c000fe2a:	c6 05 28 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e128,0x1
c000fe31:	e9 35 9f 00 00       	jmp    c0019d6b <HalPanic(char const*)>

c000fe36 <Phys::allocateDMA(unsigned long)>:
c000fe36:	55                   	push   ebp
c000fe37:	31 ed                	xor    ebp,ebp
c000fe39:	57                   	push   edi
c000fe3a:	56                   	push   esi
c000fe3b:	31 f6                	xor    esi,esi
c000fe3d:	53                   	push   ebx
c000fe3e:	31 db                	xor    ebx,ebx
c000fe40:	83 ec 1c             	sub    esp,0x1c
c000fe43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe47:	05 ff 0f 00 00       	add    eax,0xfff
c000fe4c:	c1 e8 0c             	shr    eax,0xc
c000fe4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe53:	31 c0                	xor    eax,eax
c000fe55:	eb 1b                	jmp    c000fe72 <Phys::allocateDMA(unsigned long)+0x3c>
c000fe57:	8d 78 01             	lea    edi,[eax+0x1]
c000fe5a:	85 c0                	test   eax,eax
c000fe5c:	0f 44 eb             	cmove  ebp,ebx
c000fe5f:	0f 44 f3             	cmove  esi,ebx
c000fe62:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000fe66:	74 37                	je     c000fe9f <Phys::allocateDMA(unsigned long)+0x69>
c000fe68:	89 f8                	mov    eax,edi
c000fe6a:	83 c3 01             	add    ebx,0x1
c000fe6d:	83 fb 0f             	cmp    ebx,0xf
c000fe70:	7f 13                	jg     c000fe85 <Phys::allocateDMA(unsigned long)+0x4f>
c000fe72:	80 bb 44 e1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd1ebc],0x0
c000fe79:	74 dc                	je     c000fe57 <Phys::allocateDMA(unsigned long)+0x21>
c000fe7b:	31 c0                	xor    eax,eax
c000fe7d:	83 c3 01             	add    ebx,0x1
c000fe80:	83 fb 0f             	cmp    ebx,0xf
c000fe83:	7e ed                	jle    c000fe72 <Phys::allocateDMA(unsigned long)+0x3c>
c000fe85:	83 ec 0c             	sub    esp,0xc
c000fe88:	68 60 3e 02 c0       	push   0xc0023e60
c000fe8d:	e8 98 ff ff ff       	call   c000fe2a <KePanic(char const*)>
c000fe92:	83 c4 10             	add    esp,0x10
c000fe95:	31 c0                	xor    eax,eax
c000fe97:	83 c4 1c             	add    esp,0x1c
c000fe9a:	5b                   	pop    ebx
c000fe9b:	5e                   	pop    esi
c000fe9c:	5f                   	pop    edi
c000fe9d:	5d                   	pop    ebp
c000fe9e:	c3                   	ret    
c000fe9f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fea3:	89 f2                	mov    edx,esi
c000fea5:	c1 fa 04             	sar    edx,0x4
c000fea8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000feac:	01 f1                	add    ecx,esi
c000feae:	8d 51 0e             	lea    edx,[ecx+0xe]
c000feb1:	83 e9 01             	sub    ecx,0x1
c000feb4:	0f 48 ca             	cmovs  ecx,edx
c000feb7:	c1 f9 04             	sar    ecx,0x4
c000feba:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000febe:	74 06                	je     c000fec6 <Phys::allocateDMA(unsigned long)+0x90>
c000fec0:	89 eb                	mov    ebx,ebp
c000fec2:	31 c0                	xor    eax,eax
c000fec4:	eb b7                	jmp    c000fe7d <Phys::allocateDMA(unsigned long)+0x47>
c000fec6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feca:	85 d2                	test   edx,edx
c000fecc:	74 17                	je     c000fee5 <Phys::allocateDMA(unsigned long)+0xaf>
c000fece:	8d 96 44 e1 02 c0    	lea    edx,[esi-0x3ffd1ebc]
c000fed4:	8d 84 06 45 e1 02 c0 	lea    eax,[esi+eax*1-0x3ffd1ebb]
c000fedb:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fede:	83 c2 01             	add    edx,0x1
c000fee1:	39 d0                	cmp    eax,edx
c000fee3:	75 f6                	jne    c000fedb <Phys::allocateDMA(unsigned long)+0xa5>
c000fee5:	8b 15 3c e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e13c
c000feeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000feef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fef3:	01 c2                	add    edx,eax
c000fef5:	89 15 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edx
c000fefb:	85 c9                	test   ecx,ecx
c000fefd:	74 17                	je     c000ff16 <Phys::allocateDMA(unsigned long)+0xe0>
c000feff:	83 ec 0c             	sub    esp,0xc
c000ff02:	68 60 3e 02 c0       	push   0xc0023e60
c000ff07:	e8 1e ff ff ff       	call   c000fe2a <KePanic(char const*)>
c000ff0c:	83 c4 10             	add    esp,0x10
c000ff0f:	89 f8                	mov    eax,edi
c000ff11:	e9 54 ff ff ff       	jmp    c000fe6a <Phys::allocateDMA(unsigned long)+0x34>
c000ff16:	c1 e6 0c             	shl    esi,0xc
c000ff19:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000ff1f:	e9 73 ff ff ff       	jmp    c000fe97 <Phys::allocateDMA(unsigned long)+0x61>

c000ff24 <Phys::freeDMA(unsigned long, unsigned long)>:
c000ff24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff28:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000ff2e:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c000ff33:	c1 ea 0c             	shr    edx,0xc
c000ff36:	29 d0                	sub    eax,edx
c000ff38:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c000ff3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff41:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ff46:	c1 e8 0c             	shr    eax,0xc
c000ff49:	85 d2                	test   edx,edx
c000ff4b:	74 11                	je     c000ff5e <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ff4d:	05 44 e1 02 c0       	add    eax,0xc002e144
c000ff52:	01 c2                	add    edx,eax
c000ff54:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ff57:	83 c0 01             	add    eax,0x1
c000ff5a:	39 d0                	cmp    eax,edx
c000ff5c:	75 f6                	jne    c000ff54 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ff5e:	c3                   	ret    

c000ff5f <Phys::setPageState(unsigned long, bool)>:
c000ff5f:	57                   	push   edi
c000ff60:	56                   	push   esi
c000ff61:	8b 35 f4 64 02 c0    	mov    esi,DWORD PTR ds:0xc00264f4
c000ff67:	53                   	push   ebx
c000ff68:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ff6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff75:	89 ca                	mov    edx,ecx
c000ff77:	83 e1 07             	and    ecx,0x7
c000ff7a:	c1 ea 03             	shr    edx,0x3
c000ff7d:	0f b6 c0             	movzx  eax,al
c000ff80:	d3 c3                	rol    ebx,cl
c000ff82:	01 d6                	add    esi,edx
c000ff84:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ff87:	d3 e0                	shl    eax,cl
c000ff89:	21 fb                	and    ebx,edi
c000ff8b:	88 1e                	mov    BYTE PTR [esi],bl
c000ff8d:	8b 1d f4 64 02 c0    	mov    ebx,DWORD PTR ds:0xc00264f4
c000ff93:	01 da                	add    edx,ebx
c000ff95:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ff97:	09 c8                	or     eax,ecx
c000ff99:	88 02                	mov    BYTE PTR [edx],al
c000ff9b:	5b                   	pop    ebx
c000ff9c:	5e                   	pop    esi
c000ff9d:	5f                   	pop    edi
c000ff9e:	c3                   	ret    

c000ff9f <Phys::getPageState(unsigned long)>:
c000ff9f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ffa3:	8b 15 f4 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264f4
c000ffa9:	89 c8                	mov    eax,ecx
c000ffab:	83 e1 07             	and    ecx,0x7
c000ffae:	c1 e8 03             	shr    eax,0x3
c000ffb1:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ffb5:	d3 f8                	sar    eax,cl
c000ffb7:	83 e0 01             	and    eax,0x1
c000ffba:	c3                   	ret    

c000ffbb <Phys::freePage(unsigned long)>:
c000ffbb:	53                   	push   ebx
c000ffbc:	83 ec 08             	sub    esp,0x8
c000ffbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc3:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ffc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000ffcf:	76 41                	jbe    c0010012 <Phys::freePage(unsigned long)+0x57>
c000ffd1:	c1 e8 0c             	shr    eax,0xc
c000ffd4:	50                   	push   eax
c000ffd5:	89 c3                	mov    ebx,eax
c000ffd7:	e8 c3 ff ff ff       	call   c000ff9f <Phys::getPageState(unsigned long)>
c000ffdc:	5a                   	pop    edx
c000ffdd:	84 c0                	test   al,al
c000ffdf:	74 20                	je     c0010001 <Phys::freePage(unsigned long)+0x46>
c000ffe1:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c000ffe6:	83 ec 08             	sub    esp,0x8
c000ffe9:	6a 00                	push   0x0
c000ffeb:	53                   	push   ebx
c000ffec:	83 e8 01             	sub    eax,0x1
c000ffef:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c000fff4:	e8 66 ff ff ff       	call   c000ff5f <Phys::setPageState(unsigned long, bool)>
c000fff9:	83 c4 10             	add    esp,0x10
c000fffc:	83 c4 08             	add    esp,0x8
c000ffff:	5b                   	pop    ebx
c0010000:	c3                   	ret    
c0010001:	c7 44 24 10 65 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023f65
c0010009:	83 c4 08             	add    esp,0x8
c001000c:	5b                   	pop    ebx
c001000d:	e9 18 fe ff ff       	jmp    c000fe2a <KePanic(char const*)>
c0010012:	68 00 10 00 00       	push   0x1000
c0010017:	50                   	push   eax
c0010018:	e8 07 ff ff ff       	call   c000ff24 <Phys::freeDMA(unsigned long, unsigned long)>
c001001d:	59                   	pop    ecx
c001001e:	5b                   	pop    ebx
c001001f:	83 c4 08             	add    esp,0x8
c0010022:	5b                   	pop    ebx
c0010023:	c3                   	ret    

c0010024 <Phys::allocatePage()>:
c0010024:	56                   	push   esi
c0010025:	53                   	push   ebx
c0010026:	83 ec 14             	sub    esp,0x14
c0010029:	8b 35 30 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e130
c001002f:	89 f3                	mov    ebx,esi
c0010031:	eb 0a                	jmp    c001003d <Phys::allocatePage()+0x19>
c0010033:	89 1d 30 e1 02 c0    	mov    DWORD PTR ds:0xc002e130,ebx
c0010039:	39 de                	cmp    esi,ebx
c001003b:	74 26                	je     c0010063 <Phys::allocatePage()+0x3f>
c001003d:	53                   	push   ebx
c001003e:	e8 5c ff ff ff       	call   c000ff9f <Phys::getPageState(unsigned long)>
c0010043:	59                   	pop    ecx
c0010044:	84 c0                	test   al,al
c0010046:	74 67                	je     c00100af <Phys::allocatePage()+0x8b>
c0010048:	83 c3 01             	add    ebx,0x1
c001004b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010051:	75 e0                	jne    c0010033 <Phys::allocatePage()+0xf>
c0010053:	c7 05 30 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e130,0x0
c001005d:	31 db                	xor    ebx,ebx
c001005f:	39 de                	cmp    esi,ebx
c0010061:	75 da                	jne    c001003d <Phys::allocatePage()+0x19>
c0010063:	a0 54 e1 02 c0       	mov    al,ds:0xc002e154
c0010068:	83 ec 0c             	sub    esp,0xc
c001006b:	83 f0 01             	xor    eax,0x1
c001006e:	a2 54 e1 02 c0       	mov    ds:0xc002e154,al
c0010073:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010078:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001007b:	8b 88 72 05 00 00    	mov    ecx,DWORD PTR [eax+0x572]
c0010081:	51                   	push   ecx
c0010082:	e8 8b 44 00 00       	call   c0014512 <VAS::scanForEviction()>
c0010087:	83 c4 10             	add    esp,0x10
c001008a:	85 c0                	test   eax,eax
c001008c:	75 48                	jne    c00100d6 <Phys::allocatePage()+0xb2>
c001008e:	83 ec 0c             	sub    esp,0xc
c0010091:	68 88 3e 02 c0       	push   0xc0023e88
c0010096:	e8 8f fd ff ff       	call   c000fe2a <KePanic(char const*)>
c001009b:	8b 1d 30 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e130
c00100a1:	83 c4 10             	add    esp,0x10
c00100a4:	53                   	push   ebx
c00100a5:	e8 f5 fe ff ff       	call   c000ff9f <Phys::getPageState(unsigned long)>
c00100aa:	59                   	pop    ecx
c00100ab:	84 c0                	test   al,al
c00100ad:	75 99                	jne    c0010048 <Phys::allocatePage()+0x24>
c00100af:	6a 01                	push   0x1
c00100b1:	53                   	push   ebx
c00100b2:	e8 a8 fe ff ff       	call   c000ff5f <Phys::setPageState(unsigned long, bool)>
c00100b7:	8b 1d 3c e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e13c
c00100bd:	5e                   	pop    esi
c00100be:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c00100c3:	5a                   	pop    edx
c00100c4:	83 c3 01             	add    ebx,0x1
c00100c7:	89 1d 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,ebx
c00100cd:	c1 e0 0c             	shl    eax,0xc
c00100d0:	83 c4 14             	add    esp,0x14
c00100d3:	5b                   	pop    ebx
c00100d4:	5e                   	pop    esi
c00100d5:	c3                   	ret    
c00100d6:	8b 15 3c e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e13c
c00100dc:	83 ec 08             	sub    esp,0x8
c00100df:	6a 01                	push   0x1
c00100e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100e5:	83 c2 01             	add    edx,0x1
c00100e8:	89 15 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edx
c00100ee:	89 c2                	mov    edx,eax
c00100f0:	c1 ea 0c             	shr    edx,0xc
c00100f3:	52                   	push   edx
c00100f4:	e8 66 fe ff ff       	call   c000ff5f <Phys::setPageState(unsigned long, bool)>
c00100f9:	83 c4 10             	add    esp,0x10
c00100fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010100:	eb ce                	jmp    c00100d0 <Phys::allocatePage()+0xac>

c0010102 <Phys::allocateContiguousPages(int)>:
c0010102:	57                   	push   edi
c0010103:	56                   	push   esi
c0010104:	53                   	push   ebx
c0010105:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010109:	fa                   	cli    
c001010a:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0010110:	83 ec 0c             	sub    esp,0xc
c0010113:	31 db                	xor    ebx,ebx
c0010115:	68 b8 3e 02 c0       	push   0xc0023eb8
c001011a:	83 c2 01             	add    edx,0x1
c001011d:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c0010123:	e8 26 6e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010128:	83 c4 10             	add    esp,0x10
c001012b:	85 db                	test   ebx,ebx
c001012d:	75 11                	jne    c0010140 <Phys::allocateContiguousPages(int)+0x3e>
c001012f:	e8 f0 fe ff ff       	call   c0010024 <Phys::allocatePage()>
c0010134:	83 ff 01             	cmp    edi,0x1
c0010137:	89 c6                	mov    esi,eax
c0010139:	74 21                	je     c001015c <Phys::allocateContiguousPages(int)+0x5a>
c001013b:	bb 01 00 00 00       	mov    ebx,0x1
c0010140:	e8 df fe ff ff       	call   c0010024 <Phys::allocatePage()>
c0010145:	89 da                	mov    edx,ebx
c0010147:	c1 e2 0c             	shl    edx,0xc
c001014a:	01 f2                	add    edx,esi
c001014c:	39 c2                	cmp    edx,eax
c001014e:	74 24                	je     c0010174 <Phys::allocateContiguousPages(int)+0x72>
c0010150:	83 ff 01             	cmp    edi,0x1
c0010153:	bb 01 00 00 00       	mov    ebx,0x1
c0010158:	89 c6                	mov    esi,eax
c001015a:	75 e4                	jne    c0010140 <Phys::allocateContiguousPages(int)+0x3e>
c001015c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010164:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010169:	85 c0                	test   eax,eax
c001016b:	75 01                	jne    c001016e <Phys::allocateContiguousPages(int)+0x6c>
c001016d:	fb                   	sti    
c001016e:	5b                   	pop    ebx
c001016f:	89 f0                	mov    eax,esi
c0010171:	5e                   	pop    esi
c0010172:	5f                   	pop    edi
c0010173:	c3                   	ret    
c0010174:	83 c3 01             	add    ebx,0x1
c0010177:	39 fb                	cmp    ebx,edi
c0010179:	75 b0                	jne    c001012b <Phys::allocateContiguousPages(int)+0x29>
c001017b:	eb df                	jmp    c001015c <Phys::allocateContiguousPages(int)+0x5a>

c001017d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001017d:	56                   	push   esi
c001017e:	53                   	push   ebx
c001017f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010183:	39 1d 34 e1 02 c0    	cmp    DWORD PTR ds:0xc002e134,ebx
c0010189:	73 06                	jae    c0010191 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001018b:	89 1d 34 e1 02 c0    	mov    DWORD PTR ds:0xc002e134,ebx
c0010191:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010195:	c1 eb 0c             	shr    ebx,0xc
c0010198:	c1 e8 0c             	shr    eax,0xc
c001019b:	39 d8                	cmp    eax,ebx
c001019d:	73 13                	jae    c00101b2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001019f:	6a 00                	push   0x0
c00101a1:	50                   	push   eax
c00101a2:	8d 70 01             	lea    esi,[eax+0x1]
c00101a5:	e8 b5 fd ff ff       	call   c000ff5f <Phys::setPageState(unsigned long, bool)>
c00101aa:	39 f3                	cmp    ebx,esi
c00101ac:	89 f0                	mov    eax,esi
c00101ae:	5a                   	pop    edx
c00101af:	59                   	pop    ecx
c00101b0:	75 ed                	jne    c001019f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00101b2:	5b                   	pop    ebx
c00101b3:	5e                   	pop    esi
c00101b4:	c3                   	ret    

c00101b5 <Phys::physicalMemorySetup(unsigned int)>:
c00101b5:	55                   	push   ebp
c00101b6:	57                   	push   edi
c00101b7:	56                   	push   esi
c00101b8:	53                   	push   ebx
c00101b9:	31 db                	xor    ebx,ebx
c00101bb:	83 ec 40             	sub    esp,0x40
c00101be:	6a 10                	push   0x10
c00101c0:	6a 00                	push   0x0
c00101c2:	68 44 e1 02 c0       	push   0xc002e144
c00101c7:	e8 24 03 ff ff       	call   c00004f0 <memset>
c00101cc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00101d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00101d5:	05 00 10 00 00       	add    eax,0x1000
c00101da:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00101de:	5a                   	pop    edx
c00101df:	59                   	pop    ecx
c00101e0:	50                   	push   eax
c00101e1:	68 7b 3f 02 c0       	push   0xc0023f7b
c00101e6:	e8 63 6d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00101eb:	83 c4 10             	add    esp,0x10
c00101ee:	83 ec 08             	sub    esp,0x8
c00101f1:	6a 01                	push   0x1
c00101f3:	53                   	push   ebx
c00101f4:	83 c3 01             	add    ebx,0x1
c00101f7:	e8 63 fd ff ff       	call   c000ff5f <Phys::setPageState(unsigned long, bool)>
c00101fc:	83 c4 10             	add    esp,0x10
c00101ff:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010205:	75 e7                	jne    c00101ee <Phys::physicalMemorySetup(unsigned int)+0x39>
c0010207:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c001020e:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0010215:	c1 e0 08             	shl    eax,0x8
c0010218:	09 c2                	or     edx,eax
c001021a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001021e:	0f 84 43 01 00 00    	je     c0010367 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0010224:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001022c:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010231:	e9 82 00 00 00       	jmp    c00102b8 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0010236:	ba 00 00 08 00       	mov    edx,0x80000
c001023b:	89 c1                	mov    ecx,eax
c001023d:	39 f2                	cmp    edx,esi
c001023f:	19 f9                	sbb    ecx,edi
c0010241:	0f 82 c0 00 00 00    	jb     c0010307 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0010247:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001024b:	89 c5                	mov    ebp,eax
c001024d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010251:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010255:	19 cd                	sbb    ebp,ecx
c0010257:	0f 83 af 00 00 00    	jae    c001030c <Phys::physicalMemorySetup(unsigned int)+0x157>
c001025d:	89 d6                	mov    esi,edx
c001025f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010264:	39 f2                	cmp    edx,esi
c0010266:	89 cf                	mov    edi,ecx
c0010268:	19 c8                	sbb    eax,ecx
c001026a:	73 07                	jae    c0010273 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c001026c:	be 00 00 0a 00       	mov    esi,0xa0000
c0010271:	31 ff                	xor    edi,edi
c0010273:	89 f2                	mov    edx,esi
c0010275:	b8 ff 1f 00 00       	mov    eax,0x1fff
c001027a:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0010280:	89 f9                	mov    ecx,edi
c0010282:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010286:	83 d1 ff             	adc    ecx,0xffffffff
c0010289:	39 d0                	cmp    eax,edx
c001028b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001028f:	b8 00 00 00 00       	mov    eax,0x0
c0010294:	19 c8                	sbb    eax,ecx
c0010296:	0f 82 9d 01 00 00    	jb     c0010439 <Phys::physicalMemorySetup(unsigned int)+0x284>
c001029c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00102a0:	83 c3 18             	add    ebx,0x18
c00102a3:	83 c6 01             	add    esi,0x1
c00102a6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00102aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102ae:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00102b2:	0f 84 bf 00 00 00    	je     c0010377 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c00102b8:	8b 33                	mov    esi,DWORD PTR [ebx]
c00102ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00102bd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00102c0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00102c3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00102c7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00102ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102ce:	01 f0                	add    eax,esi
c00102d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102d4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00102d8:	55                   	push   ebp
c00102d9:	11 fa                	adc    edx,edi
c00102db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102df:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00102e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102e7:	50                   	push   eax
c00102e8:	56                   	push   esi
c00102e9:	68 18 3f 02 c0       	push   0xc0023f18
c00102ee:	e8 5b 6c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00102f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102f7:	83 c4 10             	add    esp,0x10
c00102fa:	09 f8                	or     eax,edi
c00102fc:	75 79                	jne    c0010377 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c00102fe:	83 fd 01             	cmp    ebp,0x1
c0010301:	0f 84 2f ff ff ff    	je     c0010236 <Phys::physicalMemorySetup(unsigned int)+0x81>
c0010307:	83 fd 01             	cmp    ebp,0x1
c001030a:	75 90                	jne    c001029c <Phys::physicalMemorySetup(unsigned int)+0xe7>
c001030c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010310:	31 d2                	xor    edx,edx
c0010312:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0010316:	89 c8                	mov    eax,ecx
c0010318:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001031c:	19 d1                	sbb    ecx,edx
c001031e:	0f 82 78 ff ff ff    	jb     c001029c <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0010324:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0010329:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c001032d:	b9 00 00 00 00       	mov    ecx,0x0
c0010332:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0010336:	0f 83 60 ff ff ff    	jae    c001029c <Phys::physicalMemorySetup(unsigned int)+0xe7>
c001033c:	39 c6                	cmp    esi,eax
c001033e:	19 d7                	sbb    edi,edx
c0010340:	0f 83 ff 00 00 00    	jae    c0010445 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0010346:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001034a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001034e:	29 c7                	sub    edi,eax
c0010350:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010354:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010358:	19 d5                	sbb    ebp,edx
c001035a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001035e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010362:	e9 de 00 00 00       	jmp    c0010445 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0010367:	83 ec 0c             	sub    esp,0xc
c001036a:	68 93 3f 02 c0       	push   0xc0023f93
c001036f:	e8 b6 fa ff ff       	call   c000fe2a <KePanic(char const*)>
c0010374:	83 c4 10             	add    esp,0x10
c0010377:	83 ec 08             	sub    esp,0x8
c001037a:	bb 60 00 00 00       	mov    ebx,0x60
c001037f:	6a 00                	push   0x0
c0010381:	6a 06                	push   0x6
c0010383:	e8 d7 fb ff ff       	call   c000ff5f <Phys::setPageState(unsigned long, bool)>
c0010388:	58                   	pop    eax
c0010389:	5a                   	pop    edx
c001038a:	6a 00                	push   0x0
c001038c:	6a 07                	push   0x7
c001038e:	e8 cc fb ff ff       	call   c000ff5f <Phys::setPageState(unsigned long, bool)>
c0010393:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c0010399:	83 c4 10             	add    esp,0x10
c001039c:	83 c1 02             	add    ecx,0x2
c001039f:	89 0d 40 e1 02 c0    	mov    DWORD PTR ds:0xc002e140,ecx
c00103a5:	83 ec 08             	sub    esp,0x8
c00103a8:	6a 00                	push   0x0
c00103aa:	53                   	push   ebx
c00103ab:	83 c3 01             	add    ebx,0x1
c00103ae:	e8 ac fb ff ff       	call   c000ff5f <Phys::setPageState(unsigned long, bool)>
c00103b3:	83 c4 10             	add    esp,0x10
c00103b6:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00103bc:	75 e7                	jne    c00103a5 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c00103be:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00103c3:	bb 40 01 00 00       	mov    ebx,0x140
c00103c8:	83 c0 20             	add    eax,0x20
c00103cb:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00103d0:	eb 26                	jmp    c00103f8 <Phys::physicalMemorySetup(unsigned int)+0x243>
c00103d2:	83 ec 08             	sub    esp,0x8
c00103d5:	6a 00                	push   0x0
c00103d7:	53                   	push   ebx
c00103d8:	83 c3 01             	add    ebx,0x1
c00103db:	e8 7f fb ff ff       	call   c000ff5f <Phys::setPageState(unsigned long, bool)>
c00103e0:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00103e5:	83 c4 10             	add    esp,0x10
c00103e8:	83 c0 01             	add    eax,0x1
c00103eb:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00103f1:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00103f6:	74 07                	je     c00103ff <Phys::physicalMemorySetup(unsigned int)+0x24a>
c00103f8:	3d ff 03 00 00       	cmp    eax,0x3ff
c00103fd:	7e d3                	jle    c00103d2 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c00103ff:	bb d0 01 00 00       	mov    ebx,0x1d0
c0010404:	3d ff 07 00 00       	cmp    eax,0x7ff
c0010409:	7f 26                	jg     c0010431 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c001040b:	83 ec 08             	sub    esp,0x8
c001040e:	6a 00                	push   0x0
c0010410:	53                   	push   ebx
c0010411:	83 c3 01             	add    ebx,0x1
c0010414:	e8 46 fb ff ff       	call   c000ff5f <Phys::setPageState(unsigned long, bool)>
c0010419:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c001041e:	83 c4 10             	add    esp,0x10
c0010421:	83 c0 01             	add    eax,0x1
c0010424:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c001042a:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c001042f:	75 d3                	jne    c0010404 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0010431:	83 c4 3c             	add    esp,0x3c
c0010434:	5b                   	pop    ebx
c0010435:	5e                   	pop    esi
c0010436:	5f                   	pop    edi
c0010437:	5d                   	pop    ebp
c0010438:	c3                   	ret    
c0010439:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001043d:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0010445:	83 ec 04             	sub    esp,0x4
c0010448:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001044c:	56                   	push   esi
c001044d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010451:	57                   	push   edi
c0010452:	68 3c 3f 02 c0       	push   0xc0023f3c
c0010457:	e8 f2 6a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001045c:	5d                   	pop    ebp
c001045d:	58                   	pop    eax
c001045e:	56                   	push   esi
c001045f:	57                   	push   edi
c0010460:	e8 18 fd ff ff       	call   c001017d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010465:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010469:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001046d:	83 c4 0c             	add    esp,0xc
c0010470:	8b 35 40 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e140
c0010476:	0f ac d0 0c          	shrd   eax,edx,0xc
c001047a:	01 f0                	add    eax,esi
c001047c:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c0010481:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010488:	52                   	push   edx
c0010489:	50                   	push   eax
c001048a:	68 a1 3f 02 c0       	push   0xc0023fa1
c001048f:	e8 ba 6a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010494:	83 c4 10             	add    esp,0x10
c0010497:	e9 00 fe ff ff       	jmp    c001029c <Phys::physicalMemorySetup(unsigned int)+0xe7>

c001049c <Pipe::isAtty()>:
c001049c:	31 c0                	xor    eax,eax
c001049e:	c3                   	ret    
c001049f:	90                   	nop

c00104a0 <Pipe::~Pipe()>:
c00104a0:	83 ec 0c             	sub    esp,0xc
c00104a3:	ba 00 40 02 c0       	mov    edx,0xc0024000
c00104a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ac:	89 10                	mov    DWORD PTR [eax],edx
c00104ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b2:	83 ec 0c             	sub    esp,0xc
c00104b5:	50                   	push   eax
c00104b6:	e8 af 2b 00 00       	call   c001306a <UnixFile::~UnixFile()>
c00104bb:	83 c4 10             	add    esp,0x10
c00104be:	90                   	nop
c00104bf:	83 c4 0c             	add    esp,0xc
c00104c2:	c3                   	ret    
c00104c3:	90                   	nop

c00104c4 <Pipe::~Pipe()>:
c00104c4:	83 ec 0c             	sub    esp,0xc
c00104c7:	83 ec 0c             	sub    esp,0xc
c00104ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ce:	e8 cd ff ff ff       	call   c00104a0 <Pipe::~Pipe()>
c00104d3:	83 c4 10             	add    esp,0x10
c00104d6:	83 ec 08             	sub    esp,0x8
c00104d9:	6a 20                	push   0x20
c00104db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104df:	e8 77 cd ff ff       	call   c000d25b <operator delete(void*, unsigned long)>
c00104e4:	83 c4 10             	add    esp,0x10
c00104e7:	83 c4 0c             	add    esp,0xc
c00104ea:	c3                   	ret    
c00104eb:	90                   	nop

c00104ec <Pipe::write(unsigned long long, void*, int*)>:
c00104ec:	55                   	push   ebp
c00104ed:	57                   	push   edi
c00104ee:	56                   	push   esi
c00104ef:	53                   	push   ebx
c00104f0:	83 ec 1c             	sub    esp,0x1c
c00104f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104f7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00104fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00104ff:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010502:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010506:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010509:	89 04 24             	mov    DWORD PTR [esp],eax
c001050c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010510:	89 d8                	mov    eax,ebx
c0010512:	89 d6                	mov    esi,edx
c0010514:	89 d7                	mov    edi,edx
c0010516:	c1 ff 1f             	sar    edi,0x1f
c0010519:	03 34 24             	add    esi,DWORD PTR [esp]
c001051c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010520:	c1 f8 1f             	sar    eax,0x1f
c0010523:	39 f3                	cmp    ebx,esi
c0010525:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001052d:	19 f8                	sbb    eax,edi
c001052f:	b8 01 00 00 00       	mov    eax,0x1
c0010534:	72 72                	jb     c00105a8 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0010536:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010539:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001053d:	01 d0                	add    eax,edx
c001053f:	99                   	cdq    
c0010540:	f7 fb                	idiv   ebx
c0010542:	89 d8                	mov    eax,ebx
c0010544:	29 d0                	sub    eax,edx
c0010546:	89 d6                	mov    esi,edx
c0010548:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001054b:	89 c3                	mov    ebx,eax
c001054d:	c1 fb 1f             	sar    ebx,0x1f
c0010550:	39 c2                	cmp    edx,eax
c0010552:	19 df                	sbb    edi,ebx
c0010554:	bb 00 00 00 00       	mov    ebx,0x0
c0010559:	72 04                	jb     c001055f <Pipe::write(unsigned long long, void*, int*)+0x73>
c001055b:	89 d3                	mov    ebx,edx
c001055d:	29 c3                	sub    ebx,eax
c001055f:	89 d0                	mov    eax,edx
c0010561:	29 d8                	sub    eax,ebx
c0010563:	74 0d                	je     c0010572 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0010565:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010568:	89 c1                	mov    ecx,eax
c001056a:	01 f7                	add    edi,esi
c001056c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010570:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010572:	85 db                	test   ebx,ebx
c0010574:	74 0d                	je     c0010583 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0010576:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001057a:	89 d9                	mov    ecx,ebx
c001057c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001057f:	89 c6                	mov    esi,eax
c0010581:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010583:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010586:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001058b:	75 10                	jne    c001059d <Pipe::write(unsigned long long, void*, int*)+0xb1>
c001058d:	83 ec 0c             	sub    esp,0xc
c0010590:	68 bd 3f 02 c0       	push   0xc0023fbd
c0010595:	e8 90 f8 ff ff       	call   c000fe2a <KePanic(char const*)>
c001059a:	83 c4 10             	add    esp,0x10
c001059d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00105a1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00105a4:	89 08                	mov    DWORD PTR [eax],ecx
c00105a6:	31 c0                	xor    eax,eax
c00105a8:	83 c4 1c             	add    esp,0x1c
c00105ab:	5b                   	pop    ebx
c00105ac:	5e                   	pop    esi
c00105ad:	5f                   	pop    edi
c00105ae:	5d                   	pop    ebp
c00105af:	c3                   	ret    

c00105b0 <Pipe::read(unsigned long long, void*, int*)>:
c00105b0:	55                   	push   ebp
c00105b1:	57                   	push   edi
c00105b2:	56                   	push   esi
c00105b3:	53                   	push   ebx
c00105b4:	83 ec 1c             	sub    esp,0x1c
c00105b7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00105bb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00105bf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00105c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00105c6:	89 c8                	mov    eax,ecx
c00105c8:	99                   	cdq    
c00105c9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00105cd:	74 27                	je     c00105f6 <Pipe::read(unsigned long long, void*, int*)+0x46>
c00105cf:	39 f9                	cmp    ecx,edi
c00105d1:	89 d1                	mov    ecx,edx
c00105d3:	19 f1                	sbb    ecx,esi
c00105d5:	73 1f                	jae    c00105f6 <Pipe::read(unsigned long long, void*, int*)+0x46>
c00105d7:	fa                   	cli    
c00105d8:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00105de:	e8 ad 67 00 00       	call   c0016d90 <schedule()>
c00105e3:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00105ea:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00105f1:	75 d0                	jne    c00105c3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00105f3:	fb                   	sti    
c00105f4:	eb cd                	jmp    c00105c3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00105f6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00105fa:	39 f8                	cmp    eax,edi
c00105fc:	89 d1                	mov    ecx,edx
c00105fe:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010602:	19 f1                	sbb    ecx,esi
c0010604:	73 08                	jae    c001060e <Pipe::read(unsigned long long, void*, int*)+0x5e>
c0010606:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001060a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001060e:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010611:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010614:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0010618:	29 f7                	sub    edi,esi
c001061a:	89 f8                	mov    eax,edi
c001061c:	99                   	cdq    
c001061d:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0010621:	89 d0                	mov    eax,edx
c0010623:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010627:	19 c2                	sbb    edx,eax
c0010629:	89 f8                	mov    eax,edi
c001062b:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0010630:	89 ea                	mov    edx,ebp
c0010632:	29 c2                	sub    edx,eax
c0010634:	85 c0                	test   eax,eax
c0010636:	74 0b                	je     c0010643 <Pipe::read(unsigned long long, void*, int*)+0x93>
c0010638:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001063b:	89 c1                	mov    ecx,eax
c001063d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010641:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010643:	85 d2                	test   edx,edx
c0010645:	74 0d                	je     c0010654 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c0010647:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001064b:	89 d1                	mov    ecx,edx
c001064d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010650:	89 c7                	mov    edi,eax
c0010652:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010654:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010657:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001065a:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001065d:	99                   	cdq    
c001065e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010662:	89 f7                	mov    edi,esi
c0010664:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010668:	c1 ff 1f             	sar    edi,0x1f
c001066b:	57                   	push   edi
c001066c:	56                   	push   esi
c001066d:	52                   	push   edx
c001066e:	50                   	push   eax
c001066f:	e8 c0 11 01 00       	call   c0021834 <__umoddi3>
c0010674:	83 c4 10             	add    esp,0x10
c0010677:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001067c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001067f:	75 10                	jne    c0010691 <Pipe::read(unsigned long long, void*, int*)+0xe1>
c0010681:	83 ec 0c             	sub    esp,0xc
c0010684:	68 da 3f 02 c0       	push   0xc0023fda
c0010689:	e8 9c f7 ff ff       	call   c000fe2a <KePanic(char const*)>
c001068e:	83 c4 10             	add    esp,0x10
c0010691:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010695:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010699:	89 10                	mov    DWORD PTR [eax],edx
c001069b:	83 c4 1c             	add    esp,0x1c
c001069e:	31 c0                	xor    eax,eax
c00106a0:	5b                   	pop    ebx
c00106a1:	5e                   	pop    esi
c00106a2:	5f                   	pop    edi
c00106a3:	5d                   	pop    ebp
c00106a4:	c3                   	ret    
c00106a5:	90                   	nop

c00106a6 <Pipe::Pipe(int)>:
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ad:	83 ec 08             	sub    esp,0x8
c00106b0:	6a 00                	push   0x0
c00106b2:	50                   	push   eax
c00106b3:	e8 cc 27 00 00       	call   c0012e84 <UnixFile::UnixFile(int)>
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	ba 00 40 02 c0       	mov    edx,0xc0024000
c00106c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c4:	89 10                	mov    DWORD PTR [eax],edx
c00106c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00106ce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00106d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d5:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00106dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e0:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00106e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106eb:	83 ec 0c             	sub    esp,0xc
c00106ee:	50                   	push   eax
c00106ef:	e8 f0 f3 ff ff       	call   c000fae4 <malloc>
c00106f4:	83 c4 10             	add    esp,0x10
c00106f7:	89 c2                	mov    edx,eax
c00106f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106fd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010704:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010708:	90                   	nop
c0010709:	83 c4 0c             	add    esp,0xc
c001070c:	c3                   	ret    

c001070d <KePowerThread(void*)>:
c001070d:	83 ec 0c             	sub    esp,0xc
c0010710:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0010717:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001071e:	75 01                	jne    c0010721 <KePowerThread(void*)+0x14>
c0010720:	fb                   	sti    
c0010721:	50                   	push   eax
c0010722:	50                   	push   eax
c0010723:	6a 00                	push   0x0
c0010725:	6a 0a                	push   0xa
c0010727:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c001072e:	e8 69 68 00 00       	call   c0016f9c <sleep(unsigned long long)>
c0010733:	83 c4 10             	add    esp,0x10
c0010736:	83 05 a4 e1 02 c0 0a 	add    DWORD PTR ds:0xc002e1a4,0xa
c001073d:	eb e2                	jmp    c0010721 <KePowerThread(void*)+0x14>

c001073f <KeChangePowerSettings(PowerSettings)>:
c001073f:	57                   	push   edi
c0010740:	b9 09 00 00 00       	mov    ecx,0x9
c0010745:	56                   	push   esi
c0010746:	bf 80 e1 02 c0       	mov    edi,0xc002e180
c001074b:	fc                   	cld    
c001074c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010750:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010752:	5e                   	pop    esi
c0010753:	5f                   	pop    edi
c0010754:	c3                   	ret    

c0010755 <KeUserIOReceived()>:
c0010755:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c001075f:	c3                   	ret    

c0010760 <KeHandlePowerButton()>:
c0010760:	a1 80 e1 02 c0       	mov    eax,ds:0xc002e180
c0010765:	83 f8 02             	cmp    eax,0x2
c0010768:	75 05                	jne    c001076f <KeHandlePowerButton()+0xf>
c001076a:	e9 25 db ff ff       	jmp    c000e294 <KeShutdown()>
c001076f:	48                   	dec    eax
c0010770:	75 05                	jne    c0010777 <KeHandlePowerButton()+0x17>
c0010772:	e9 41 db ff ff       	jmp    c000e2b8 <KeSleep()>
c0010777:	c3                   	ret    

c0010778 <KeHandleSleepButton()>:
c0010778:	a1 84 e1 02 c0       	mov    eax,ds:0xc002e184
c001077d:	83 f8 02             	cmp    eax,0x2
c0010780:	75 05                	jne    c0010787 <KeHandleSleepButton()+0xf>
c0010782:	e9 0d db ff ff       	jmp    c000e294 <KeShutdown()>
c0010787:	48                   	dec    eax
c0010788:	75 05                	jne    c001078f <KeHandleSleepButton()+0x17>
c001078a:	e9 29 db ff ff       	jmp    c000e2b8 <KeSleep()>
c001078f:	c3                   	ret    

c0010790 <KeSetupPowerManager()>:
c0010790:	83 ec 0c             	sub    esp,0xc
c0010793:	68 f0 00 00 00       	push   0xf0
c0010798:	6a 00                	push   0x0
c001079a:	68 0d 07 01 c0       	push   0xc001070d
c001079f:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00107a5:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c00107af:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c00107b6:	e8 55 63 00 00       	call   c0016b10 <Process::createThread(void (*)(void*), void*, int)>
c00107bb:	c7 05 80 e1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002e180,0x2
c00107c5:	c7 05 84 e1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e184,0x1
c00107cf:	c7 05 88 e1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002e188,0x3
c00107d9:	c7 05 8c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e18c,0x0
c00107e3:	c7 05 98 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e198,0x0
c00107ed:	c7 05 90 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e190,0x0
c00107f7:	c7 05 9c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e19c,0x0
c0010801:	c7 05 94 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e194,0x3c
c001080b:	c7 05 a0 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e1a0,0x3c
c0010815:	83 c4 1c             	add    esp,0x1c
c0010818:	c3                   	ret    

c0010819 <KeRand()>:
c0010819:	69 05 a8 e1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002e1a8,0x2875
c0010823:	69 0d ac e1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002e1ac,0xa2e7b175
c001082d:	53                   	push   ebx
c001082e:	01 c1                	add    ecx,eax
c0010830:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010835:	f7 25 a8 e1 02 c0    	mul    DWORD PTR ds:0xc002e1a8
c001083b:	01 ca                	add    edx,ecx
c001083d:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010842:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c0010847:	83 d2 00             	adc    edx,0x0
c001084a:	0f b7 da             	movzx  ebx,dx
c001084d:	89 1d ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,ebx
c0010853:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0010857:	5b                   	pop    ebx
c0010858:	c3                   	ret    

c0010859 <KeSeedRand(unsigned int)>:
c0010859:	53                   	push   ebx
c001085a:	83 ec 08             	sub    esp,0x8
c001085d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010861:	e8 f5 97 00 00       	call   c001a05b <HalGetRand()>
c0010866:	c7 05 ac e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1ac,0x0
c0010870:	31 d8                	xor    eax,ebx
c0010872:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c0010877:	e8 9d ff ff ff       	call   c0010819 <KeRand()>
c001087c:	83 c4 08             	add    esp,0x8
c001087f:	5b                   	pop    ebx
c0010880:	eb 97                	jmp    c0010819 <KeRand()>

c0010882 <KeInitRand()>:
c0010882:	83 ec 0c             	sub    esp,0xc
c0010885:	e8 f5 95 00 00       	call   c0019e7f <HalQueryPerformanceCounter()>
c001088a:	0f 20 da             	mov    edx,cr3
c001088d:	0f 22 da             	mov    cr3,edx
c0010890:	0f 20 da             	mov    edx,cr3
c0010893:	0f 22 da             	mov    cr3,edx
c0010896:	0f 20 da             	mov    edx,cr3
c0010899:	0f 22 da             	mov    cr3,edx
c001089c:	0f 20 da             	mov    edx,cr3
c001089f:	0f 22 da             	mov    cr3,edx
c00108a2:	83 ec 0c             	sub    esp,0xc
c00108a5:	35 03 8a 95 38       	xor    eax,0x38958a03
c00108aa:	50                   	push   eax
c00108ab:	e8 a9 ff ff ff       	call   c0010859 <KeSeedRand(unsigned int)>
c00108b0:	83 c4 1c             	add    esp,0x1c
c00108b3:	c3                   	ret    

c00108b4 <KeResolveCompatibilitySymbol(char*)>:
c00108b4:	83 ec 0c             	sub    esp,0xc
c00108b7:	83 ec 08             	sub    esp,0x8
c00108ba:	68 14 40 02 c0       	push   0xc0024014
c00108bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108c3:	e8 b8 fe fe ff       	call   c0000780 <strcmp>
c00108c8:	83 c4 10             	add    esp,0x10
c00108cb:	85 c0                	test   eax,eax
c00108cd:	0f 94 c0             	sete   al
c00108d0:	0f b6 c0             	movzx  eax,al
c00108d3:	85 c0                	test   eax,eax
c00108d5:	74 0d                	je     c00108e4 <KeResolveCompatibilitySymbol(char*)+0x30>
c00108d7:	b8 d0 c0 02 c0       	mov    eax,0xc002c0d0
c00108dc:	e9 8b 01 00 00       	jmp    c0010a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00108e1:	8d 76 00             	lea    esi,[esi+0x0]
c00108e4:	83 ec 08             	sub    esp,0x8
c00108e7:	68 1d 40 02 c0       	push   0xc002401d
c00108ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108f0:	e8 8b fe fe ff       	call   c0000780 <strcmp>
c00108f5:	83 c4 10             	add    esp,0x10
c00108f8:	85 c0                	test   eax,eax
c00108fa:	0f 94 c0             	sete   al
c00108fd:	0f b6 c0             	movzx  eax,al
c0010900:	85 c0                	test   eax,eax
c0010902:	74 0c                	je     c0010910 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010904:	b8 34 17 02 c0       	mov    eax,0xc0021734
c0010909:	e9 5e 01 00 00       	jmp    c0010a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001090e:	66 90                	xchg   ax,ax
c0010910:	83 ec 08             	sub    esp,0x8
c0010913:	68 27 40 02 c0       	push   0xc0024027
c0010918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001091c:	e8 5f fe fe ff       	call   c0000780 <strcmp>
c0010921:	83 c4 10             	add    esp,0x10
c0010924:	85 c0                	test   eax,eax
c0010926:	0f 94 c0             	sete   al
c0010929:	0f b6 c0             	movzx  eax,al
c001092c:	85 c0                	test   eax,eax
c001092e:	74 0c                	je     c001093c <KeResolveCompatibilitySymbol(char*)+0x88>
c0010930:	b8 68 14 02 c0       	mov    eax,0xc0021468
c0010935:	e9 32 01 00 00       	jmp    c0010a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001093a:	66 90                	xchg   ax,ax
c001093c:	83 ec 08             	sub    esp,0x8
c001093f:	68 30 40 02 c0       	push   0xc0024030
c0010944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010948:	e8 33 fe fe ff       	call   c0000780 <strcmp>
c001094d:	83 c4 10             	add    esp,0x10
c0010950:	85 c0                	test   eax,eax
c0010952:	0f 94 c0             	sete   al
c0010955:	0f b6 c0             	movzx  eax,al
c0010958:	85 c0                	test   eax,eax
c001095a:	74 0c                	je     c0010968 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001095c:	b8 2a fe 00 c0       	mov    eax,0xc000fe2a
c0010961:	e9 06 01 00 00       	jmp    c0010a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010966:	66 90                	xchg   ax,ax
c0010968:	83 ec 08             	sub    esp,0x8
c001096b:	68 43 40 02 c0       	push   0xc0024043
c0010970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010974:	e8 07 fe fe ff       	call   c0000780 <strcmp>
c0010979:	83 c4 10             	add    esp,0x10
c001097c:	85 c0                	test   eax,eax
c001097e:	0f 94 c0             	sete   al
c0010981:	0f b6 c0             	movzx  eax,al
c0010984:	85 c0                	test   eax,eax
c0010986:	74 0c                	je     c0010994 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010988:	b8 9b d1 00 c0       	mov    eax,0xc000d19b
c001098d:	e9 da 00 00 00       	jmp    c0010a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010992:	66 90                	xchg   ax,ax
c0010994:	83 ec 08             	sub    esp,0x8
c0010997:	68 60 40 02 c0       	push   0xc0024060
c001099c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a0:	e8 db fd fe ff       	call   c0000780 <strcmp>
c00109a5:	83 c4 10             	add    esp,0x10
c00109a8:	85 c0                	test   eax,eax
c00109aa:	0f 94 c0             	sete   al
c00109ad:	0f b6 c0             	movzx  eax,al
c00109b0:	85 c0                	test   eax,eax
c00109b2:	74 0c                	je     c00109c0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00109b4:	b8 34 18 02 c0       	mov    eax,0xc0021834
c00109b9:	e9 ae 00 00 00       	jmp    c0010a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00109be:	66 90                	xchg   ax,ax
c00109c0:	83 ec 08             	sub    esp,0x8
c00109c3:	68 6a 40 02 c0       	push   0xc002406a
c00109c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109cc:	e8 af fd fe ff       	call   c0000780 <strcmp>
c00109d1:	83 c4 10             	add    esp,0x10
c00109d4:	85 c0                	test   eax,eax
c00109d6:	0f 94 c0             	sete   al
c00109d9:	0f b6 c0             	movzx  eax,al
c00109dc:	85 c0                	test   eax,eax
c00109de:	74 0c                	je     c00109ec <KeResolveCompatibilitySymbol(char*)+0x138>
c00109e0:	b8 b4 15 02 c0       	mov    eax,0xc00215b4
c00109e5:	e9 82 00 00 00       	jmp    c0010a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00109ea:	66 90                	xchg   ax,ax
c00109ec:	83 ec 08             	sub    esp,0x8
c00109ef:	68 73 40 02 c0       	push   0xc0024073
c00109f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109f8:	e8 83 fd fe ff       	call   c0000780 <strcmp>
c00109fd:	83 c4 10             	add    esp,0x10
c0010a00:	85 c0                	test   eax,eax
c0010a02:	0f 94 c0             	sete   al
c0010a05:	0f b6 c0             	movzx  eax,al
c0010a08:	85 c0                	test   eax,eax
c0010a0a:	74 08                	je     c0010a14 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010a0c:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c0010a11:	eb 59                	jmp    c0010a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a13:	90                   	nop
c0010a14:	83 ec 08             	sub    esp,0x8
c0010a17:	68 8b 40 02 c0       	push   0xc002408b
c0010a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a20:	e8 5b fd fe ff       	call   c0000780 <strcmp>
c0010a25:	83 c4 10             	add    esp,0x10
c0010a28:	85 c0                	test   eax,eax
c0010a2a:	0f 94 c0             	sete   al
c0010a2d:	0f b6 c0             	movzx  eax,al
c0010a30:	85 c0                	test   eax,eax
c0010a32:	74 08                	je     c0010a3c <KeResolveCompatibilitySymbol(char*)+0x188>
c0010a34:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c0010a39:	eb 31                	jmp    c0010a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a3b:	90                   	nop
c0010a3c:	83 ec 08             	sub    esp,0x8
c0010a3f:	68 98 40 02 c0       	push   0xc0024098
c0010a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a48:	e8 33 fd fe ff       	call   c0000780 <strcmp>
c0010a4d:	83 c4 10             	add    esp,0x10
c0010a50:	85 c0                	test   eax,eax
c0010a52:	0f 94 c0             	sete   al
c0010a55:	0f b6 c0             	movzx  eax,al
c0010a58:	85 c0                	test   eax,eax
c0010a5a:	74 08                	je     c0010a64 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010a5c:	b8 d5 c0 02 c0       	mov    eax,0xc002c0d5
c0010a61:	eb 09                	jmp    c0010a6c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a63:	90                   	nop
c0010a64:	b8 00 00 00 00       	mov    eax,0x0
c0010a69:	8d 76 00             	lea    esi,[esi+0x0]
c0010a6c:	83 c4 0c             	add    esp,0xc
c0010a6f:	c3                   	ret    

c0010a70 <Semaphore::Semaphore(int)>:
c0010a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a78:	89 10                	mov    DWORD PTR [eax],edx
c0010a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a7e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010a85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010a90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010a9b:	90                   	nop
c0010a9c:	c3                   	ret    
c0010a9d:	90                   	nop
c0010a9e:	66 90                	xchg   ax,ax

c0010aa0 <Semaphore::tryAcquire()>:
c0010aa0:	83 ec 0c             	sub    esp,0xc
c0010aa3:	fa                   	cli    
c0010aa4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010aa9:	83 c0 01             	add    eax,0x1
c0010aac:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010ab1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ab6:	83 c0 01             	add    eax,0x1
c0010ab9:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010acb:	39 c2                	cmp    edx,eax
c0010acd:	7d 59                	jge    c0010b28 <Semaphore::tryAcquire()+0x88>
c0010acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010ad6:	8d 50 01             	lea    edx,[eax+0x1]
c0010ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010add:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010ae0:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ae5:	83 e8 01             	sub    eax,0x1
c0010ae8:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010aed:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010af2:	85 c0                	test   eax,eax
c0010af4:	75 1a                	jne    c0010b10 <Semaphore::tryAcquire()+0x70>
c0010af6:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010afb:	85 c0                	test   eax,eax
c0010afd:	74 11                	je     c0010b10 <Semaphore::tryAcquire()+0x70>
c0010aff:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010b09:	e8 82 62 00 00       	call   c0016d90 <schedule()>
c0010b0e:	66 90                	xchg   ax,ax
c0010b10:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010b18:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010b1d:	85 c0                	test   eax,eax
c0010b1f:	75 03                	jne    c0010b24 <Semaphore::tryAcquire()+0x84>
c0010b21:	fb                   	sti    
c0010b22:	66 90                	xchg   ax,ax
c0010b24:	b0 01                	mov    al,0x1
c0010b26:	eb 48                	jmp    c0010b70 <Semaphore::tryAcquire()+0xd0>
c0010b28:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010b2d:	83 e8 01             	sub    eax,0x1
c0010b30:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010b35:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010b3a:	85 c0                	test   eax,eax
c0010b3c:	75 1a                	jne    c0010b58 <Semaphore::tryAcquire()+0xb8>
c0010b3e:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010b43:	85 c0                	test   eax,eax
c0010b45:	74 11                	je     c0010b58 <Semaphore::tryAcquire()+0xb8>
c0010b47:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010b51:	e8 3a 62 00 00       	call   c0016d90 <schedule()>
c0010b56:	66 90                	xchg   ax,ax
c0010b58:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010b60:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010b65:	85 c0                	test   eax,eax
c0010b67:	75 03                	jne    c0010b6c <Semaphore::tryAcquire()+0xcc>
c0010b69:	fb                   	sti    
c0010b6a:	66 90                	xchg   ax,ax
c0010b6c:	b0 00                	mov    al,0x0
c0010b6e:	66 90                	xchg   ax,ax
c0010b70:	83 c4 0c             	add    esp,0xc
c0010b73:	c3                   	ret    

c0010b74 <Semaphore::assertLocked(char const*)>:
c0010b74:	83 ec 0c             	sub    esp,0xc
c0010b77:	fa                   	cli    
c0010b78:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010b7d:	83 c0 01             	add    eax,0x1
c0010b80:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010b85:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010b8a:	83 c0 01             	add    eax,0x1
c0010b8d:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b96:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b9f:	39 c2                	cmp    edx,eax
c0010ba1:	7d 11                	jge    c0010bb4 <Semaphore::assertLocked(char const*)+0x40>
c0010ba3:	83 ec 0c             	sub    esp,0xc
c0010ba6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010baa:	e8 7b f2 ff ff       	call   c000fe2a <KePanic(char const*)>
c0010baf:	83 c4 10             	add    esp,0x10
c0010bb2:	66 90                	xchg   ax,ax
c0010bb4:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010bb9:	83 e8 01             	sub    eax,0x1
c0010bbc:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010bc1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010bc6:	85 c0                	test   eax,eax
c0010bc8:	75 1a                	jne    c0010be4 <Semaphore::assertLocked(char const*)+0x70>
c0010bca:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010bcf:	85 c0                	test   eax,eax
c0010bd1:	74 11                	je     c0010be4 <Semaphore::assertLocked(char const*)+0x70>
c0010bd3:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010bdd:	e8 ae 61 00 00       	call   c0016d90 <schedule()>
c0010be2:	66 90                	xchg   ax,ax
c0010be4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010bec:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010bf1:	85 c0                	test   eax,eax
c0010bf3:	75 03                	jne    c0010bf8 <Semaphore::assertLocked(char const*)+0x84>
c0010bf5:	fb                   	sti    
c0010bf6:	66 90                	xchg   ax,ax
c0010bf8:	90                   	nop
c0010bf9:	83 c4 0c             	add    esp,0xc
c0010bfc:	c3                   	ret    
c0010bfd:	90                   	nop
c0010bfe:	66 90                	xchg   ax,ax

c0010c00 <Semaphore::acquire(int)>:
c0010c00:	83 ec 1c             	sub    esp,0x1c
c0010c03:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010c08:	0f 84 ae 00 00 00    	je     c0010cbc <Semaphore::acquire(int)+0xbc>
c0010c0e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010c16:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010c1b:	90                   	nop
c0010c1c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010c21:	85 c0                	test   eax,eax
c0010c23:	0f 84 87 00 00 00    	je     c0010cb0 <Semaphore::acquire(int)+0xb0>
c0010c29:	83 ec 0c             	sub    esp,0xc
c0010c2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c30:	e8 6b fe ff ff       	call   c0010aa0 <Semaphore::tryAcquire()>
c0010c35:	83 c4 10             	add    esp,0x10
c0010c38:	83 f0 01             	xor    eax,0x1
c0010c3b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010c3f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010c43:	83 f0 01             	xor    eax,0x1
c0010c46:	0f b6 c0             	movzx  eax,al
c0010c49:	85 c0                	test   eax,eax
c0010c4b:	75 5f                	jne    c0010cac <Semaphore::acquire(int)+0xac>
c0010c4d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010c52:	7f 34                	jg     c0010c88 <Semaphore::acquire(int)+0x88>
c0010c54:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010c58:	89 d0                	mov    eax,edx
c0010c5a:	c1 e0 02             	shl    eax,0x2
c0010c5d:	01 d0                	add    eax,edx
c0010c5f:	d1 e0                	shl    eax,1
c0010c61:	89 c2                	mov    edx,eax
c0010c63:	c1 fa 1f             	sar    edx,0x1f
c0010c66:	83 ec 08             	sub    esp,0x8
c0010c69:	52                   	push   edx
c0010c6a:	50                   	push   eax
c0010c6b:	e8 14 63 00 00       	call   c0016f84 <milliTenthSleep(unsigned long long)>
c0010c70:	83 c4 10             	add    esp,0x10
c0010c73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c77:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010c7b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010c83:	eb 97                	jmp    c0010c1c <Semaphore::acquire(int)+0x1c>
c0010c85:	8d 76 00             	lea    esi,[esi+0x0]
c0010c88:	83 ec 08             	sub    esp,0x8
c0010c8b:	6a 00                	push   0x0
c0010c8d:	68 90 01 00 00       	push   0x190
c0010c92:	e8 ed 62 00 00       	call   c0016f84 <milliTenthSleep(unsigned long long)>
c0010c97:	83 c4 10             	add    esp,0x10
c0010c9a:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010c9f:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010ca4:	e9 73 ff ff ff       	jmp    c0010c1c <Semaphore::acquire(int)+0x1c>
c0010ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0010cac:	90                   	nop
c0010cad:	8d 76 00             	lea    esi,[esi+0x0]
c0010cb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cb4:	e9 fb 00 00 00       	jmp    c0010db4 <Semaphore::acquire(int)+0x1b4>
c0010cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0010cbc:	fa                   	cli    
c0010cbd:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010cc2:	83 c0 01             	add    eax,0x1
c0010cc5:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010cca:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ccf:	83 c0 01             	add    eax,0x1
c0010cd2:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010cd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cdb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010cde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ce2:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ce4:	39 c2                	cmp    edx,eax
c0010ce6:	7d 14                	jge    c0010cfc <Semaphore::acquire(int)+0xfc>
c0010ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010cef:	8d 50 01             	lea    edx,[eax+0x1]
c0010cf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cf6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010cf9:	eb 6d                	jmp    c0010d68 <Semaphore::acquire(int)+0x168>
c0010cfb:	90                   	nop
c0010cfc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d01:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d03:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d11:	85 c0                	test   eax,eax
c0010d13:	75 13                	jne    c0010d28 <Semaphore::acquire(int)+0x128>
c0010d15:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d1a:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d23:	eb 17                	jmp    c0010d3c <Semaphore::acquire(int)+0x13c>
c0010d25:	8d 76 00             	lea    esi,[esi+0x0]
c0010d28:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d34:	8b 12                	mov    edx,DWORD PTR [edx]
c0010d36:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010d39:	8d 76 00             	lea    esi,[esi+0x0]
c0010d3c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d41:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d47:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010d4a:	83 ec 0c             	sub    esp,0xc
c0010d4d:	68 a8 40 02 c0       	push   0xc00240a8
c0010d52:	e8 f7 61 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010d57:	83 c4 10             	add    esp,0x10
c0010d5a:	83 ec 0c             	sub    esp,0xc
c0010d5d:	6a 05                	push   0x5
c0010d5f:	e8 ec 60 00 00       	call   c0016e50 <blockTask(TaskState)>
c0010d64:	83 c4 10             	add    esp,0x10
c0010d67:	90                   	nop
c0010d68:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d6d:	83 e8 01             	sub    eax,0x1
c0010d70:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010d75:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d7a:	85 c0                	test   eax,eax
c0010d7c:	75 1a                	jne    c0010d98 <Semaphore::acquire(int)+0x198>
c0010d7e:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010d83:	85 c0                	test   eax,eax
c0010d85:	74 11                	je     c0010d98 <Semaphore::acquire(int)+0x198>
c0010d87:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010d91:	e8 fa 5f 00 00       	call   c0016d90 <schedule()>
c0010d96:	66 90                	xchg   ax,ax
c0010d98:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010da0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010da5:	85 c0                	test   eax,eax
c0010da7:	75 03                	jne    c0010dac <Semaphore::acquire(int)+0x1ac>
c0010da9:	fb                   	sti    
c0010daa:	66 90                	xchg   ax,ax
c0010dac:	b8 00 00 00 00       	mov    eax,0x0
c0010db1:	8d 76 00             	lea    esi,[esi+0x0]
c0010db4:	83 c4 1c             	add    esp,0x1c
c0010db7:	c3                   	ret    

c0010db8 <Semaphore::acquire()>:
c0010db8:	83 ec 0c             	sub    esp,0xc
c0010dbb:	83 ec 08             	sub    esp,0x8
c0010dbe:	6a 00                	push   0x0
c0010dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc4:	e8 37 fe ff ff       	call   c0010c00 <Semaphore::acquire(int)>
c0010dc9:	83 c4 10             	add    esp,0x10
c0010dcc:	90                   	nop
c0010dcd:	83 c4 0c             	add    esp,0xc
c0010dd0:	c3                   	ret    
c0010dd1:	90                   	nop
c0010dd2:	66 90                	xchg   ax,ax

c0010dd4 <Semaphore::release()>:
c0010dd4:	83 ec 1c             	sub    esp,0x1c
c0010dd7:	fa                   	cli    
c0010dd8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010ddd:	83 c0 01             	add    eax,0x1
c0010de0:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010de5:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010dea:	83 c0 01             	add    eax,0x1
c0010ded:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010df2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010df6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010df9:	85 c0                	test   eax,eax
c0010dfb:	74 2b                	je     c0010e28 <Semaphore::release()+0x54>
c0010dfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e0c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010e0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e13:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e16:	83 ec 0c             	sub    esp,0xc
c0010e19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e1d:	e8 c6 62 00 00       	call   c00170e8 <unblockTask(ThreadControlBlock*)>
c0010e22:	83 c4 10             	add    esp,0x10
c0010e25:	eb 15                	jmp    c0010e3c <Semaphore::release()+0x68>
c0010e27:	90                   	nop
c0010e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e2c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010e2f:	8d 50 ff             	lea    edx,[eax-0x1]
c0010e32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e36:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e39:	8d 76 00             	lea    esi,[esi+0x0]
c0010e3c:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010e41:	83 e8 01             	sub    eax,0x1
c0010e44:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010e49:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010e4e:	85 c0                	test   eax,eax
c0010e50:	75 1a                	jne    c0010e6c <Semaphore::release()+0x98>
c0010e52:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010e57:	85 c0                	test   eax,eax
c0010e59:	74 11                	je     c0010e6c <Semaphore::release()+0x98>
c0010e5b:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010e65:	e8 26 5f 00 00       	call   c0016d90 <schedule()>
c0010e6a:	66 90                	xchg   ax,ax
c0010e6c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010e74:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010e79:	85 c0                	test   eax,eax
c0010e7b:	75 03                	jne    c0010e80 <Semaphore::release()+0xac>
c0010e7d:	fb                   	sti    
c0010e7e:	66 90                	xchg   ax,ax
c0010e80:	90                   	nop
c0010e81:	83 c4 1c             	add    esp,0x1c
c0010e84:	c3                   	ret    

c0010e85 <KiSigKill(int)>:
c0010e85:	83 ec 0c             	sub    esp,0xc
c0010e88:	6a 00                	push   0x0
c0010e8a:	6a 00                	push   0x0
c0010e8c:	6a ff                	push   0xffffffff
c0010e8e:	6a 01                	push   0x1
c0010e90:	e8 bd 61 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010e95:	83 c4 1c             	add    esp,0x1c
c0010e98:	c3                   	ret    

c0010e99 <KiDefaultSignalHandlerIgnore(int)>:
c0010e99:	c3                   	ret    

c0010e9a <KiDefaultSignalHandlerPause(int)>:
c0010e9a:	57                   	push   edi
c0010e9b:	b9 07 00 00 00       	mov    ecx,0x7
c0010ea0:	56                   	push   esi
c0010ea1:	be 03 41 02 c0       	mov    esi,0xc0024103
c0010ea6:	83 ec 24             	sub    esp,0x24
c0010ea9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010ead:	fc                   	cld    
c0010eae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010eb0:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010eb4:	50                   	push   eax
c0010eb5:	6a 00                	push   0x0
c0010eb7:	6a 00                	push   0x0
c0010eb9:	6a 27                	push   0x27
c0010ebb:	e8 92 61 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ec0:	83 c4 34             	add    esp,0x34
c0010ec3:	5e                   	pop    esi
c0010ec4:	5f                   	pop    edi
c0010ec5:	c3                   	ret    

c0010ec6 <KiDefaultSignalHandlerResume(int)>:
c0010ec6:	57                   	push   edi
c0010ec7:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010ecc:	56                   	push   esi
c0010ecd:	be 1f 41 02 c0       	mov    esi,0xc002411f
c0010ed2:	83 ec 24             	sub    esp,0x24
c0010ed5:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010ed9:	fc                   	cld    
c0010eda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010edc:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010ee0:	50                   	push   eax
c0010ee1:	6a 00                	push   0x0
c0010ee3:	6a 00                	push   0x0
c0010ee5:	6a 27                	push   0x27
c0010ee7:	e8 66 61 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010eec:	83 c4 34             	add    esp,0x34
c0010eef:	5e                   	pop    esi
c0010ef0:	5f                   	pop    edi
c0010ef1:	c3                   	ret    

c0010ef2 <KeDeinitSignals(SigHandlerBlock*)>:
c0010ef2:	e9 fd eb ff ff       	jmp    c000faf4 <free>

c0010ef7 <KeInitSignals()>:
c0010ef7:	53                   	push   ebx
c0010ef8:	83 ec 14             	sub    esp,0x14
c0010efb:	68 c8 00 00 00       	push   0xc8
c0010f00:	e8 df eb ff ff       	call   c000fae4 <malloc>
c0010f05:	83 c4 0c             	add    esp,0xc
c0010f08:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010f12:	89 c3                	mov    ebx,eax
c0010f14:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010f1e:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010f24:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0010f28:	6a 20                	push   0x20
c0010f2a:	6a 00                	push   0x0
c0010f2c:	50                   	push   eax
c0010f2d:	e8 be f5 fe ff       	call   c00004f0 <memset>
c0010f32:	83 c4 0c             	add    esp,0xc
c0010f35:	6a 44                	push   0x44
c0010f37:	6a 00                	push   0x0
c0010f39:	53                   	push   ebx
c0010f3a:	e8 b1 f5 fe ff       	call   c00004f0 <memset>
c0010f3f:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0010f45:	83 c4 0c             	add    esp,0xc
c0010f48:	6a 11                	push   0x11
c0010f4a:	6a 00                	push   0x0
c0010f4c:	50                   	push   eax
c0010f4d:	e8 9e f5 fe ff       	call   c00004f0 <memset>
c0010f52:	83 c4 18             	add    esp,0x18
c0010f55:	89 d8                	mov    eax,ebx
c0010f57:	5b                   	pop    ebx
c0010f58:	c3                   	ret    

c0010f59 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010f59:	53                   	push   ebx
c0010f5a:	b8 01 00 00 00       	mov    eax,0x1
c0010f5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010f63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f67:	83 f9 10             	cmp    ecx,0x10
c0010f6a:	7f 21                	jg     c0010f8d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f70:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010f73:	89 03                	mov    DWORD PTR [ebx],eax
c0010f75:	b8 01 00 00 00       	mov    eax,0x1
c0010f7a:	d3 e0                	shl    eax,cl
c0010f7c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010f80:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010f83:	31 c0                	xor    eax,eax
c0010f85:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010f8d:	5b                   	pop    ebx
c0010f8e:	c3                   	ret    

c0010f8f <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010f8f:	55                   	push   ebp
c0010f90:	57                   	push   edi
c0010f91:	bf 08 00 00 00       	mov    edi,0x8
c0010f96:	56                   	push   esi
c0010f97:	53                   	push   ebx
c0010f98:	83 ec 14             	sub    esp,0x14
c0010f9b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010f9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010fa3:	68 3c 41 02 c0       	push   0xc002413c
c0010fa8:	e8 a1 5f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010fad:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010fb3:	83 c4 10             	add    esp,0x10
c0010fb6:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010fbd:	31 c9                	xor    ecx,ecx
c0010fbf:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010fc3:	99                   	cdq    
c0010fc4:	f7 ff                	idiv   edi
c0010fc6:	8d 42 24             	lea    eax,[edx+0x24]
c0010fc9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010fcd:	85 f6                	test   esi,esi
c0010fcf:	75 1a                	jne    c0010feb <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0010fd1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010fd5:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0010fd9:	50                   	push   eax
c0010fda:	50                   	push   eax
c0010fdb:	52                   	push   edx
c0010fdc:	68 52 41 02 c0       	push   0xc0024152
c0010fe1:	e8 68 5f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010fe6:	83 c4 10             	add    esp,0x10
c0010fe9:	eb 1b                	jmp    c0011006 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0010feb:	41                   	inc    ecx
c0010fec:	83 f9 08             	cmp    ecx,0x8
c0010fef:	75 ce                	jne    c0010fbf <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0010ff1:	83 ec 0c             	sub    esp,0xc
c0010ff4:	be 01 00 00 00       	mov    esi,0x1
c0010ff9:	68 73 41 02 c0       	push   0xc0024173
c0010ffe:	e8 4b 5f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	83 c4 0c             	add    esp,0xc
c0011009:	89 f0                	mov    eax,esi
c001100b:	5b                   	pop    ebx
c001100c:	5e                   	pop    esi
c001100d:	5f                   	pop    edi
c001100e:	5d                   	pop    ebp
c001100f:	c3                   	ret    

c0011010 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011010:	55                   	push   ebp
c0011011:	57                   	push   edi
c0011012:	56                   	push   esi
c0011013:	53                   	push   ebx
c0011014:	83 ec 28             	sub    esp,0x28
c0011017:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001101b:	68 84 41 02 c0       	push   0xc0024184
c0011020:	e8 29 5f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011025:	83 c4 10             	add    esp,0x10
c0011028:	85 db                	test   ebx,ebx
c001102a:	0f 84 38 01 00 00    	je     c0011168 <KeCheckSignal(SigHandlerBlock*, int*)+0x158>
c0011030:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011037:	75 0d                	jne    c0011046 <KeCheckSignal(SigHandlerBlock*, int*)+0x36>
c0011039:	83 ec 0c             	sub    esp,0xc
c001103c:	68 93 41 02 c0       	push   0xc0024193
c0011041:	e9 83 00 00 00       	jmp    c00110c9 <KeCheckSignal(SigHandlerBlock*, int*)+0xb9>
c0011046:	83 ec 0c             	sub    esp,0xc
c0011049:	31 ff                	xor    edi,edi
c001104b:	68 af 41 02 c0       	push   0xc00241af
c0011050:	e8 f9 5e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	8b 83 bc 00 00 00    	mov    eax,DWORD PTR [ebx+0xbc]
c001105e:	bd 08 00 00 00       	mov    ebp,0x8
c0011063:	51                   	push   ecx
c0011064:	01 f8                	add    eax,edi
c0011066:	99                   	cdq    
c0011067:	f7 fd                	idiv   ebp
c0011069:	ff b4 93 9c 00 00 00 	push   DWORD PTR [ebx+edx*4+0x9c]
c0011070:	52                   	push   edx
c0011071:	68 c3 41 02 c0       	push   0xc00241c3
c0011076:	e8 d3 5e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001107b:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011081:	83 c4 10             	add    esp,0x10
c0011084:	8d 04 3e             	lea    eax,[esi+edi*1]
c0011087:	99                   	cdq    
c0011088:	f7 fd                	idiv   ebp
c001108a:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011091:	85 ed                	test   ebp,ebp
c0011093:	0f 84 f0 00 00 00    	je     c0011189 <KeCheckSignal(SigHandlerBlock*, int*)+0x179>
c0011099:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001109f:	89 e9                	mov    ecx,ebp
c00110a1:	bf 01 00 00 00       	mov    edi,0x1
c00110a6:	d3 e7                	shl    edi,cl
c00110a8:	31 c9                	xor    ecx,ecx
c00110aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110ae:	b8 01 00 00 00       	mov    eax,0x1
c00110b3:	d3 e0                	shl    eax,cl
c00110b5:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c00110b9:	74 18                	je     c00110d3 <KeCheckSignal(SigHandlerBlock*, int*)+0xc3>
c00110bb:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00110bf:	74 12                	je     c00110d3 <KeCheckSignal(SigHandlerBlock*, int*)+0xc3>
c00110c1:	83 ec 0c             	sub    esp,0xc
c00110c4:	68 d7 41 02 c0       	push   0xc00241d7
c00110c9:	e8 80 5e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00110ce:	e9 92 00 00 00       	jmp    c0011165 <KeCheckSignal(SigHandlerBlock*, int*)+0x155>
c00110d3:	41                   	inc    ecx
c00110d4:	83 f9 11             	cmp    ecx,0x11
c00110d7:	75 d5                	jne    c00110ae <KeCheckSignal(SigHandlerBlock*, int*)+0x9e>
c00110d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110dd:	46                   	inc    esi
c00110de:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00110e4:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00110ef:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00110f6:	09 f8                	or     eax,edi
c00110f8:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00110fe:	31 c0                	xor    eax,eax
c0011100:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011108:	74 09                	je     c0011113 <KeCheckSignal(SigHandlerBlock*, int*)+0x103>
c001110a:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011111:	eb 06                	jmp    c0011119 <KeCheckSignal(SigHandlerBlock*, int*)+0x109>
c0011113:	40                   	inc    eax
c0011114:	83 f8 08             	cmp    eax,0x8
c0011117:	75 e7                	jne    c0011100 <KeCheckSignal(SigHandlerBlock*, int*)+0xf0>
c0011119:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001111d:	8b 34 ab             	mov    esi,DWORD PTR [ebx+ebp*4]
c0011120:	89 28                	mov    DWORD PTR [eax],ebp
c0011122:	50                   	push   eax
c0011123:	50                   	push   eax
c0011124:	56                   	push   esi
c0011125:	68 eb 41 02 c0       	push   0xc00241eb
c001112a:	e8 1f 5e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001112f:	83 c4 10             	add    esp,0x10
c0011132:	83 fd 09             	cmp    ebp,0x9
c0011135:	75 14                	jne    c001114b <KeCheckSignal(SigHandlerBlock*, int*)+0x13b>
c0011137:	83 ec 0c             	sub    esp,0xc
c001113a:	be 85 0e 01 c0       	mov    esi,0xc0010e85
c001113f:	68 fb 41 02 c0       	push   0xc00241fb
c0011144:	e8 05 5e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011149:	eb 39                	jmp    c0011184 <KeCheckSignal(SigHandlerBlock*, int*)+0x174>
c001114b:	83 fe 01             	cmp    esi,0x1
c001114e:	75 1c                	jne    c001116c <KeCheckSignal(SigHandlerBlock*, int*)+0x15c>
c0011150:	83 ec 0c             	sub    esp,0xc
c0011153:	f7 d7                	not    edi
c0011155:	68 05 42 02 c0       	push   0xc0024205
c001115a:	e8 ef 5d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001115f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011165:	83 c4 10             	add    esp,0x10
c0011168:	31 f6                	xor    esi,esi
c001116a:	eb 30                	jmp    c001119c <KeCheckSignal(SigHandlerBlock*, int*)+0x18c>
c001116c:	85 f6                	test   esi,esi
c001116e:	75 2c                	jne    c001119c <KeCheckSignal(SigHandlerBlock*, int*)+0x18c>
c0011170:	83 ec 0c             	sub    esp,0xc
c0011173:	68 12 42 02 c0       	push   0xc0024212
c0011178:	e8 d1 5d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001117d:	8b 34 ad 00 65 02 c0 	mov    esi,DWORD PTR [ebp*4-0x3ffd9b00]
c0011184:	83 c4 10             	add    esp,0x10
c0011187:	eb 13                	jmp    c001119c <KeCheckSignal(SigHandlerBlock*, int*)+0x18c>
c0011189:	47                   	inc    edi
c001118a:	46                   	inc    esi
c001118b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011191:	83 ff 08             	cmp    edi,0x8
c0011194:	0f 85 be fe ff ff    	jne    c0011058 <KeCheckSignal(SigHandlerBlock*, int*)+0x48>
c001119a:	eb cc                	jmp    c0011168 <KeCheckSignal(SigHandlerBlock*, int*)+0x158>
c001119c:	83 c4 1c             	add    esp,0x1c
c001119f:	89 f0                	mov    eax,esi
c00111a1:	5b                   	pop    ebx
c00111a2:	5e                   	pop    esi
c00111a3:	5f                   	pop    edi
c00111a4:	5d                   	pop    ebp
c00111a5:	c3                   	ret    

c00111a6 <KiCheckSignalZ>:
c00111a6:	53                   	push   ebx
c00111a7:	31 db                	xor    ebx,ebx
c00111a9:	83 ec 20             	sub    esp,0x20
c00111ac:	8d 44 24 14          	lea    eax,[esp+0x14]
c00111b0:	50                   	push   eax
c00111b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111b9:	ff b0 80 07 00 00    	push   DWORD PTR [eax+0x780]
c00111bf:	e8 4c fe ff ff       	call   c0011010 <KeCheckSignal(SigHandlerBlock*, int*)>
c00111c4:	83 c4 10             	add    esp,0x10
c00111c7:	85 c0                	test   eax,eax
c00111c9:	74 2a                	je     c00111f5 <KiCheckSignalZ+0x4f>
c00111cb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00111d1:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c00111d4:	89 03                	mov    DWORD PTR [ebx],eax
c00111d6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00111dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00111e1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00111e4:	52                   	push   edx
c00111e5:	6a 00                	push   0x0
c00111e7:	50                   	push   eax
c00111e8:	68 35 42 02 c0       	push   0xc0024235
c00111ed:	e8 5c 5d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00111f2:	83 c4 10             	add    esp,0x10
c00111f5:	83 c4 18             	add    esp,0x18
c00111f8:	89 d8                	mov    eax,ebx
c00111fa:	5b                   	pop    ebx
c00111fb:	c3                   	ret    

c00111fc <KeCompleteSignal(SigHandlerBlock*, int)>:
c00111fc:	56                   	push   esi
c00111fd:	53                   	push   ebx
c00111fe:	bb 01 00 00 00       	mov    ebx,0x1
c0011203:	52                   	push   edx
c0011204:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011208:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001120c:	d3 e3                	shl    ebx,cl
c001120e:	83 f9 10             	cmp    ecx,0x10
c0011211:	7f 08                	jg     c001121b <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011213:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011219:	75 10                	jne    c001122b <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001121b:	83 ec 0c             	sub    esp,0xc
c001121e:	68 51 42 02 c0       	push   0xc0024251
c0011223:	e8 02 ec ff ff       	call   c000fe2a <KePanic(char const*)>
c0011228:	83 c4 10             	add    esp,0x10
c001122b:	f7 d3                	not    ebx
c001122d:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011233:	58                   	pop    eax
c0011234:	5b                   	pop    ebx
c0011235:	5e                   	pop    esi
c0011236:	c3                   	ret    

c0011237 <KiFinishSignalZ>:
c0011237:	53                   	push   ebx
c0011238:	83 ec 08             	sub    esp,0x8
c001123b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011240:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011244:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0011247:	83 fa 08             	cmp    edx,0x8
c001124a:	75 0c                	jne    c0011258 <KiFinishSignalZ+0x21>
c001124c:	83 ec 0c             	sub    esp,0xc
c001124f:	50                   	push   eax
c0011250:	e8 93 5e 00 00       	call   c00170e8 <unblockTask(ThreadControlBlock*)>
c0011255:	83 c4 10             	add    esp,0x10
c0011258:	50                   	push   eax
c0011259:	50                   	push   eax
c001125a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001125d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011262:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011265:	ff b0 80 07 00 00    	push   DWORD PTR [eax+0x780]
c001126b:	e8 8c ff ff ff       	call   c00111fc <KeCompleteSignal(SigHandlerBlock*, int)>
c0011270:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011276:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001127d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011284:	83 c4 18             	add    esp,0x18
c0011287:	5b                   	pop    ebx
c0011288:	c3                   	ret    

c0011289 <SysSeekDir(regs*)>:
c0011289:	31 c0                	xor    eax,eax
c001128b:	31 d2                	xor    edx,edx
c001128d:	c3                   	ret    

c001128e <SysTellDir(regs*)>:
c001128e:	31 c0                	xor    eax,eax
c0011290:	31 d2                	xor    edx,edx
c0011292:	c3                   	ret    

c0011293 <SysVerify(regs*)>:
c0011293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011297:	31 d2                	xor    edx,edx
c0011299:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001129c:	c3                   	ret    

c001129d <SysGetArgc(regs*)>:
c001129d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00112a5:	8b 80 76 05 00 00    	mov    eax,DWORD PTR [eax+0x576]
c00112ab:	89 c2                	mov    edx,eax
c00112ad:	c1 fa 1f             	sar    edx,0x1f
c00112b0:	c3                   	ret    

c00112b1 <SysTTYName(regs*)>:
c00112b1:	b8 01 00 00 00       	mov    eax,0x1
c00112b6:	31 d2                	xor    edx,edx
c00112b8:	c3                   	ret    

c00112b9 <SysFormatDisk(regs*)>:
c00112b9:	56                   	push   esi
c00112ba:	53                   	push   ebx
c00112bb:	83 ec 04             	sub    esp,0x4
c00112be:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112c2:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c00112c8:	eb 2a                	jmp    c00112f4 <SysFormatDisk(regs*)+0x3b>
c00112ca:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00112cd:	83 ec 0c             	sub    esp,0xc
c00112d0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00112d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00112d5:	51                   	push   ecx
c00112d6:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00112d9:	51                   	push   ecx
c00112da:	50                   	push   eax
c00112db:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00112e2:	50                   	push   eax
c00112e3:	53                   	push   ebx
c00112e4:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00112e7:	83 c4 20             	add    esp,0x20
c00112ea:	83 f8 08             	cmp    eax,0x8
c00112ed:	89 c1                	mov    ecx,eax
c00112ef:	75 14                	jne    c0011305 <SysFormatDisk(regs*)+0x4c>
c00112f1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00112f4:	85 db                	test   ebx,ebx
c00112f6:	75 d2                	jne    c00112ca <SysFormatDisk(regs*)+0x11>
c00112f8:	b8 03 00 00 00       	mov    eax,0x3
c00112fd:	31 d2                	xor    edx,edx
c00112ff:	83 c4 04             	add    esp,0x4
c0011302:	5b                   	pop    ebx
c0011303:	5e                   	pop    esi
c0011304:	c3                   	ret    
c0011305:	85 c0                	test   eax,eax
c0011307:	74 13                	je     c001131c <SysFormatDisk(regs*)+0x63>
c0011309:	31 d2                	xor    edx,edx
c001130b:	83 f9 09             	cmp    ecx,0x9
c001130e:	b8 01 00 00 00       	mov    eax,0x1
c0011313:	74 ea                	je     c00112ff <SysFormatDisk(regs*)+0x46>
c0011315:	b8 02 00 00 00       	mov    eax,0x2
c001131a:	eb e1                	jmp    c00112fd <SysFormatDisk(regs*)+0x44>
c001131c:	31 c0                	xor    eax,eax
c001131e:	eb dd                	jmp    c00112fd <SysFormatDisk(regs*)+0x44>

c0011320 <SysSetDiskVolumeLabel(regs*)>:
c0011320:	56                   	push   esi
c0011321:	53                   	push   ebx
c0011322:	83 ec 04             	sub    esp,0x4
c0011325:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011329:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001132c:	83 f8 19             	cmp    eax,0x19
c001132f:	77 33                	ja     c0011364 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011331:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c0011338:	85 c9                	test   ecx,ecx
c001133a:	74 28                	je     c0011364 <SysSetDiskVolumeLabel(regs*)+0x44>
c001133c:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001133f:	85 db                	test   ebx,ebx
c0011341:	74 21                	je     c0011364 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011343:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011349:	85 d2                	test   edx,edx
c001134b:	74 17                	je     c0011364 <SysSetDiskVolumeLabel(regs*)+0x44>
c001134d:	8b 32                	mov    esi,DWORD PTR [edx]
c001134f:	53                   	push   ebx
c0011350:	50                   	push   eax
c0011351:	51                   	push   ecx
c0011352:	52                   	push   edx
c0011353:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011356:	83 c4 10             	add    esp,0x10
c0011359:	83 c4 04             	add    esp,0x4
c001135c:	5b                   	pop    ebx
c001135d:	5e                   	pop    esi
c001135e:	89 c2                	mov    edx,eax
c0011360:	c1 fa 1f             	sar    edx,0x1f
c0011363:	c3                   	ret    
c0011364:	83 c4 04             	add    esp,0x4
c0011367:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001136c:	5b                   	pop    ebx
c001136d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011372:	5e                   	pop    esi
c0011373:	c3                   	ret    

c0011374 <SysGetDiskVolumeLabel(regs*)>:
c0011374:	57                   	push   edi
c0011375:	56                   	push   esi
c0011376:	53                   	push   ebx
c0011377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001137b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001137e:	83 fa 19             	cmp    edx,0x19
c0011381:	77 3c                	ja     c00113bf <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011383:	8b 0c 95 e0 ba 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4520]
c001138a:	85 c9                	test   ecx,ecx
c001138c:	74 31                	je     c00113bf <SysGetDiskVolumeLabel(regs*)+0x4b>
c001138e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011391:	85 db                	test   ebx,ebx
c0011393:	74 2a                	je     c00113bf <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011395:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011398:	85 f6                	test   esi,esi
c001139a:	74 23                	je     c00113bf <SysGetDiskVolumeLabel(regs*)+0x4b>
c001139c:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00113a2:	85 c0                	test   eax,eax
c00113a4:	74 19                	je     c00113bf <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113a6:	83 ec 0c             	sub    esp,0xc
c00113a9:	8b 38                	mov    edi,DWORD PTR [eax]
c00113ab:	56                   	push   esi
c00113ac:	53                   	push   ebx
c00113ad:	52                   	push   edx
c00113ae:	51                   	push   ecx
c00113af:	50                   	push   eax
c00113b0:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00113b3:	83 c4 20             	add    esp,0x20
c00113b6:	5b                   	pop    ebx
c00113b7:	5e                   	pop    esi
c00113b8:	89 c2                	mov    edx,eax
c00113ba:	c1 fa 1f             	sar    edx,0x1f
c00113bd:	5f                   	pop    edi
c00113be:	c3                   	ret    
c00113bf:	5b                   	pop    ebx
c00113c0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00113c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113ca:	5e                   	pop    esi
c00113cb:	5f                   	pop    edi
c00113cc:	c3                   	ret    

c00113cd <SysRealpath(regs*)>:
c00113cd:	53                   	push   ebx
c00113ce:	83 ec 08             	sub    esp,0x8
c00113d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00113d8:	85 c9                	test   ecx,ecx
c00113da:	74 36                	je     c0011412 <SysRealpath(regs*)+0x45>
c00113dc:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00113df:	31 d2                	xor    edx,edx
c00113e1:	b8 01 00 00 00       	mov    eax,0x1
c00113e6:	85 db                	test   ebx,ebx
c00113e8:	75 05                	jne    c00113ef <SysRealpath(regs*)+0x22>
c00113ea:	83 c4 08             	add    esp,0x8
c00113ed:	5b                   	pop    ebx
c00113ee:	c3                   	ret    
c00113ef:	6a 00                	push   0x0
c00113f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113f9:	05 0c 01 00 00       	add    eax,0x10c
c00113fe:	50                   	push   eax
c00113ff:	51                   	push   ecx
c0011400:	53                   	push   ebx
c0011401:	e8 fa 69 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011406:	83 c4 10             	add    esp,0x10
c0011409:	31 c0                	xor    eax,eax
c001140b:	31 d2                	xor    edx,edx
c001140d:	83 c4 08             	add    esp,0x8
c0011410:	5b                   	pop    ebx
c0011411:	c3                   	ret    
c0011412:	b8 01 00 00 00       	mov    eax,0x1
c0011417:	31 d2                	xor    edx,edx
c0011419:	eb f2                	jmp    c001140d <SysRealpath(regs*)+0x40>

c001141b <SysReadDir(regs*)>:
c001141b:	53                   	push   ebx
c001141c:	83 ec 18             	sub    esp,0x18
c001141f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011423:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011426:	83 f8 02             	cmp    eax,0x2
c0011429:	76 4f                	jbe    c001147a <SysReadDir(regs*)+0x5f>
c001142b:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011432:	77 52                	ja     c0011486 <SysReadDir(regs*)+0x6b>
c0011434:	83 ec 0c             	sub    esp,0xc
c0011437:	50                   	push   eax
c0011438:	e8 3c 1d 00 00       	call   c0013179 <KeGetFileFromDescriptor(int)>
c001143d:	83 c4 10             	add    esp,0x10
c0011440:	85 c0                	test   eax,eax
c0011442:	74 42                	je     c0011486 <SysReadDir(regs*)+0x6b>
c0011444:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001144c:	83 ec 0c             	sub    esp,0xc
c001144f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011453:	8b 10                	mov    edx,DWORD PTR [eax]
c0011455:	51                   	push   ecx
c0011456:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011459:	51                   	push   ecx
c001145a:	6a 00                	push   0x0
c001145c:	68 10 01 00 00       	push   0x110
c0011461:	50                   	push   eax
c0011462:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011465:	83 c4 20             	add    esp,0x20
c0011468:	85 c0                	test   eax,eax
c001146a:	89 c1                	mov    ecx,eax
c001146c:	74 27                	je     c0011495 <SysReadDir(regs*)+0x7a>
c001146e:	31 d2                	xor    edx,edx
c0011470:	83 f9 07             	cmp    ecx,0x7
c0011473:	b8 02 00 00 00       	mov    eax,0x2
c0011478:	75 16                	jne    c0011490 <SysReadDir(regs*)+0x75>
c001147a:	b8 01 00 00 00       	mov    eax,0x1
c001147f:	31 d2                	xor    edx,edx
c0011481:	83 c4 18             	add    esp,0x18
c0011484:	5b                   	pop    ebx
c0011485:	c3                   	ret    
c0011486:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001148b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011490:	83 c4 18             	add    esp,0x18
c0011493:	5b                   	pop    ebx
c0011494:	c3                   	ret    
c0011495:	31 c0                	xor    eax,eax
c0011497:	31 d2                	xor    edx,edx
c0011499:	eb e6                	jmp    c0011481 <SysReadDir(regs*)+0x66>

c001149b <SysIsATTY(regs*)>:
c001149b:	83 ec 0c             	sub    esp,0xc
c001149e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00114a5:	83 f8 02             	cmp    eax,0x2
c00114a8:	76 07                	jbe    c00114b1 <SysIsATTY(regs*)+0x16>
c00114aa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00114af:	75 26                	jne    c00114d7 <SysIsATTY(regs*)+0x3c>
c00114b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114b9:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c00114bf:	85 c0                	test   eax,eax
c00114c1:	74 24                	je     c00114e7 <SysIsATTY(regs*)+0x4c>
c00114c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00114c5:	83 ec 0c             	sub    esp,0xc
c00114c8:	50                   	push   eax
c00114c9:	ff 12                	call   DWORD PTR [edx]
c00114cb:	83 c4 10             	add    esp,0x10
c00114ce:	31 d2                	xor    edx,edx
c00114d0:	83 c4 0c             	add    esp,0xc
c00114d3:	0f b6 c0             	movzx  eax,al
c00114d6:	c3                   	ret    
c00114d7:	83 ec 0c             	sub    esp,0xc
c00114da:	50                   	push   eax
c00114db:	e8 99 1c 00 00       	call   c0013179 <KeGetFileFromDescriptor(int)>
c00114e0:	83 c4 10             	add    esp,0x10
c00114e3:	85 c0                	test   eax,eax
c00114e5:	75 dc                	jne    c00114c3 <SysIsATTY(regs*)+0x28>
c00114e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114f1:	83 c4 0c             	add    esp,0xc
c00114f4:	c3                   	ret    

c00114f5 <SysSeek(regs*)>:
c00114f5:	53                   	push   ebx
c00114f6:	83 ec 08             	sub    esp,0x8
c00114f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011500:	8d 50 fd             	lea    edx,[eax-0x3]
c0011503:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011509:	77 39                	ja     c0011544 <SysSeek(regs*)+0x4f>
c001150b:	83 ec 0c             	sub    esp,0xc
c001150e:	50                   	push   eax
c001150f:	e8 65 1c 00 00       	call   c0013179 <KeGetFileFromDescriptor(int)>
c0011514:	83 c4 10             	add    esp,0x10
c0011517:	85 c0                	test   eax,eax
c0011519:	74 29                	je     c0011544 <SysSeek(regs*)+0x4f>
c001151b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001151e:	83 ec 04             	sub    esp,0x4
c0011521:	31 db                	xor    ebx,ebx
c0011523:	53                   	push   ebx
c0011524:	51                   	push   ecx
c0011525:	50                   	push   eax
c0011526:	e8 dd 6c ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001152b:	83 c4 10             	add    esp,0x10
c001152e:	85 c0                	test   eax,eax
c0011530:	0f 95 c0             	setne  al
c0011533:	31 d2                	xor    edx,edx
c0011535:	0f b6 c0             	movzx  eax,al
c0011538:	f7 d8                	neg    eax
c001153a:	83 d2 00             	adc    edx,0x0
c001153d:	83 c4 08             	add    esp,0x8
c0011540:	5b                   	pop    ebx
c0011541:	f7 da                	neg    edx
c0011543:	c3                   	ret    
c0011544:	83 c4 08             	add    esp,0x8
c0011547:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001154c:	5b                   	pop    ebx
c001154d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011552:	c3                   	ret    

c0011553 <SysTell(regs*)>:
c0011553:	53                   	push   ebx
c0011554:	83 ec 08             	sub    esp,0x8
c0011557:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001155b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001155e:	83 f8 02             	cmp    eax,0x2
c0011561:	76 56                	jbe    c00115b9 <SysTell(regs*)+0x66>
c0011563:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011568:	76 19                	jbe    c0011583 <SysTell(regs*)+0x30>
c001156a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001156d:	31 d2                	xor    edx,edx
c001156f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011575:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001157c:	83 c4 08             	add    esp,0x8
c001157f:	31 c0                	xor    eax,eax
c0011581:	5b                   	pop    ebx
c0011582:	c3                   	ret    
c0011583:	83 ec 0c             	sub    esp,0xc
c0011586:	50                   	push   eax
c0011587:	e8 ed 1b 00 00       	call   c0013179 <KeGetFileFromDescriptor(int)>
c001158c:	83 c4 10             	add    esp,0x10
c001158f:	85 c0                	test   eax,eax
c0011591:	74 26                	je     c00115b9 <SysTell(regs*)+0x66>
c0011593:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011596:	83 ec 08             	sub    esp,0x8
c0011599:	52                   	push   edx
c001159a:	50                   	push   eax
c001159b:	e8 14 6d ff ff       	call   c00082b4 <File::tell(unsigned long long*)>
c00115a0:	83 c4 10             	add    esp,0x10
c00115a3:	85 c0                	test   eax,eax
c00115a5:	0f 95 c0             	setne  al
c00115a8:	31 d2                	xor    edx,edx
c00115aa:	0f b6 c0             	movzx  eax,al
c00115ad:	f7 d8                	neg    eax
c00115af:	83 d2 00             	adc    edx,0x0
c00115b2:	83 c4 08             	add    esp,0x8
c00115b5:	5b                   	pop    ebx
c00115b6:	f7 da                	neg    edx
c00115b8:	c3                   	ret    
c00115b9:	83 c4 08             	add    esp,0x8
c00115bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115c1:	5b                   	pop    ebx
c00115c2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115c7:	c3                   	ret    

c00115c8 <SysSize(regs*)>:
c00115c8:	53                   	push   ebx
c00115c9:	83 ec 18             	sub    esp,0x18
c00115cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115d3:	83 f8 02             	cmp    eax,0x2
c00115d6:	76 5b                	jbe    c0011633 <SysSize(regs*)+0x6b>
c00115d8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115dd:	76 19                	jbe    c00115f8 <SysSize(regs*)+0x30>
c00115df:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115e2:	31 d2                	xor    edx,edx
c00115e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115f1:	83 c4 18             	add    esp,0x18
c00115f4:	31 c0                	xor    eax,eax
c00115f6:	5b                   	pop    ebx
c00115f7:	c3                   	ret    
c00115f8:	83 ec 0c             	sub    esp,0xc
c00115fb:	50                   	push   eax
c00115fc:	e8 78 1b 00 00       	call   c0013179 <KeGetFileFromDescriptor(int)>
c0011601:	83 c4 10             	add    esp,0x10
c0011604:	85 c0                	test   eax,eax
c0011606:	74 2b                	je     c0011633 <SysSize(regs*)+0x6b>
c0011608:	83 ec 04             	sub    esp,0x4
c001160b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001160f:	52                   	push   edx
c0011610:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011613:	52                   	push   edx
c0011614:	50                   	push   eax
c0011615:	e8 32 6e ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001161a:	83 c4 10             	add    esp,0x10
c001161d:	85 c0                	test   eax,eax
c001161f:	0f 95 c0             	setne  al
c0011622:	31 d2                	xor    edx,edx
c0011624:	0f b6 c0             	movzx  eax,al
c0011627:	f7 d8                	neg    eax
c0011629:	83 d2 00             	adc    edx,0x0
c001162c:	83 c4 18             	add    esp,0x18
c001162f:	5b                   	pop    ebx
c0011630:	f7 da                	neg    edx
c0011632:	c3                   	ret    
c0011633:	83 c4 18             	add    esp,0x18
c0011636:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001163b:	5b                   	pop    ebx
c001163c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011641:	c3                   	ret    

c0011642 <SysSizeFromFilename(regs*)>:
c0011642:	55                   	push   ebp
c0011643:	57                   	push   edi
c0011644:	56                   	push   esi
c0011645:	53                   	push   ebx
c0011646:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001164c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011653:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011656:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011659:	85 f6                	test   esi,esi
c001165b:	89 f8                	mov    eax,edi
c001165d:	74 09                	je     c0011668 <SysSizeFromFilename(regs*)+0x26>
c001165f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011665:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011668:	83 f8 02             	cmp    eax,0x2
c001166b:	0f 86 c9 00 00 00    	jbe    c001173a <SysSizeFromFilename(regs*)+0xf8>
c0011671:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011676:	76 1f                	jbe    c0011697 <SysSizeFromFilename(regs*)+0x55>
c0011678:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001167b:	31 d2                	xor    edx,edx
c001167d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011683:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001168a:	31 c0                	xor    eax,eax
c001168c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011692:	5b                   	pop    ebx
c0011693:	5e                   	pop    esi
c0011694:	5f                   	pop    edi
c0011695:	5d                   	pop    ebp
c0011696:	c3                   	ret    
c0011697:	83 ec 0c             	sub    esp,0xc
c001169a:	68 14 01 00 00       	push   0x114
c001169f:	e8 40 e4 ff ff       	call   c000fae4 <malloc>
c00116a4:	6a 01                	push   0x1
c00116a6:	89 c5                	mov    ebp,eax
c00116a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116b0:	50                   	push   eax
c00116b1:	57                   	push   edi
c00116b2:	55                   	push   ebp
c00116b3:	e8 76 69 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00116b8:	83 c4 20             	add    esp,0x20
c00116bb:	85 ed                	test   ebp,ebp
c00116bd:	74 7b                	je     c001173a <SysSizeFromFilename(regs*)+0xf8>
c00116bf:	83 ec 04             	sub    esp,0x4
c00116c2:	8d 44 24 13          	lea    eax,[esp+0x13]
c00116c6:	50                   	push   eax
c00116c7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00116ca:	51                   	push   ecx
c00116cb:	55                   	push   ebp
c00116cc:	e8 7b 6d ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c00116d1:	89 c3                	mov    ebx,eax
c00116d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00116d6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00116d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116dc:	83 c4 10             	add    esp,0x10
c00116df:	85 db                	test   ebx,ebx
c00116e1:	75 57                	jne    c001173a <SysSizeFromFilename(regs*)+0xf8>
c00116e3:	6a 00                	push   0x0
c00116e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116ed:	05 0c 01 00 00       	add    eax,0x10c
c00116f2:	50                   	push   eax
c00116f3:	57                   	push   edi
c00116f4:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00116fb:	53                   	push   ebx
c00116fc:	e8 ff 66 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011701:	58                   	pop    eax
c0011702:	5a                   	pop    edx
c0011703:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011707:	50                   	push   eax
c0011708:	53                   	push   ebx
c0011709:	e8 79 61 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c001170e:	83 c4 10             	add    esp,0x10
c0011711:	ba 00 00 00 00       	mov    edx,0x0
c0011716:	83 f8 01             	cmp    eax,0x1
c0011719:	b8 00 00 00 00       	mov    eax,0x0
c001171e:	74 2f                	je     c001174f <SysSizeFromFilename(regs*)+0x10d>
c0011720:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011725:	74 3b                	je     c0011762 <SysSizeFromFilename(regs*)+0x120>
c0011727:	85 f6                	test   esi,esi
c0011729:	0f 84 5d ff ff ff    	je     c001168c <SysSizeFromFilename(regs*)+0x4a>
c001172f:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011735:	e9 52 ff ff ff       	jmp    c001168c <SysSizeFromFilename(regs*)+0x4a>
c001173a:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011740:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011745:	5b                   	pop    ebx
c0011746:	ba ff ff ff ff       	mov    edx,0xffffffff
c001174b:	5e                   	pop    esi
c001174c:	5f                   	pop    edi
c001174d:	5d                   	pop    ebp
c001174e:	c3                   	ret    
c001174f:	85 f6                	test   esi,esi
c0011751:	0f 84 35 ff ff ff    	je     c001168c <SysSizeFromFilename(regs*)+0x4a>
c0011757:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001175d:	e9 2a ff ff ff       	jmp    c001168c <SysSizeFromFilename(regs*)+0x4a>
c0011762:	85 f6                	test   esi,esi
c0011764:	0f 84 22 ff ff ff    	je     c001168c <SysSizeFromFilename(regs*)+0x4a>
c001176a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011770:	e9 17 ff ff ff       	jmp    c001168c <SysSizeFromFilename(regs*)+0x4a>

c0011775 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011775:	55                   	push   ebp
c0011776:	57                   	push   edi
c0011777:	56                   	push   esi
c0011778:	53                   	push   ebx
c0011779:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001177f:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011786:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011789:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001178c:	85 f6                	test   esi,esi
c001178e:	89 f8                	mov    eax,edi
c0011790:	74 09                	je     c001179b <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0011792:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011798:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001179b:	83 f8 02             	cmp    eax,0x2
c001179e:	0f 86 c9 00 00 00    	jbe    c001186d <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00117a4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117a9:	76 1f                	jbe    c00117ca <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c00117ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00117ae:	31 d2                	xor    edx,edx
c00117b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00117b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117bd:	31 c0                	xor    eax,eax
c00117bf:	81 c4 4c 02 00 00    	add    esp,0x24c
c00117c5:	5b                   	pop    ebx
c00117c6:	5e                   	pop    esi
c00117c7:	5f                   	pop    edi
c00117c8:	5d                   	pop    ebp
c00117c9:	c3                   	ret    
c00117ca:	83 ec 0c             	sub    esp,0xc
c00117cd:	68 14 01 00 00       	push   0x114
c00117d2:	e8 0d e3 ff ff       	call   c000fae4 <malloc>
c00117d7:	6a 00                	push   0x0
c00117d9:	89 c5                	mov    ebp,eax
c00117db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117e3:	50                   	push   eax
c00117e4:	57                   	push   edi
c00117e5:	55                   	push   ebp
c00117e6:	e8 43 68 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00117eb:	83 c4 20             	add    esp,0x20
c00117ee:	85 ed                	test   ebp,ebp
c00117f0:	74 7b                	je     c001186d <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00117f2:	83 ec 04             	sub    esp,0x4
c00117f5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00117f9:	50                   	push   eax
c00117fa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00117fd:	51                   	push   ecx
c00117fe:	55                   	push   ebp
c00117ff:	e8 48 6c ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0011804:	89 c3                	mov    ebx,eax
c0011806:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011809:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001180c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001180f:	83 c4 10             	add    esp,0x10
c0011812:	85 db                	test   ebx,ebx
c0011814:	75 57                	jne    c001186d <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011816:	6a 00                	push   0x0
c0011818:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001181d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011820:	05 0c 01 00 00       	add    eax,0x10c
c0011825:	50                   	push   eax
c0011826:	57                   	push   edi
c0011827:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001182e:	53                   	push   ebx
c001182f:	e8 cc 65 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011834:	58                   	pop    eax
c0011835:	5a                   	pop    edx
c0011836:	8d 44 24 18          	lea    eax,[esp+0x18]
c001183a:	50                   	push   eax
c001183b:	53                   	push   ebx
c001183c:	e8 46 60 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	ba 00 00 00 00       	mov    edx,0x0
c0011849:	83 f8 01             	cmp    eax,0x1
c001184c:	b8 00 00 00 00       	mov    eax,0x0
c0011851:	74 2f                	je     c0011882 <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c0011853:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011858:	74 3b                	je     c0011895 <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c001185a:	85 f6                	test   esi,esi
c001185c:	0f 84 5d ff ff ff    	je     c00117bf <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011862:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011868:	e9 52 ff ff ff       	jmp    c00117bf <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001186d:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011873:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011878:	5b                   	pop    ebx
c0011879:	ba ff ff ff ff       	mov    edx,0xffffffff
c001187e:	5e                   	pop    esi
c001187f:	5f                   	pop    edi
c0011880:	5d                   	pop    ebp
c0011881:	c3                   	ret    
c0011882:	85 f6                	test   esi,esi
c0011884:	0f 84 35 ff ff ff    	je     c00117bf <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001188a:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011890:	e9 2a ff ff ff       	jmp    c00117bf <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011895:	85 f6                	test   esi,esi
c0011897:	0f 84 22 ff ff ff    	je     c00117bf <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001189d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00118a3:	e9 17 ff ff ff       	jmp    c00117bf <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c00118a8 <SysClose(regs*)>:
c00118a8:	57                   	push   edi
c00118a9:	56                   	push   esi
c00118aa:	53                   	push   ebx
c00118ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118b2:	83 f8 02             	cmp    eax,0x2
c00118b5:	76 44                	jbe    c00118fb <SysClose(regs*)+0x53>
c00118b7:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00118bd:	31 f6                	xor    esi,esi
c00118bf:	31 ff                	xor    edi,edi
c00118c1:	83 fa 01             	cmp    edx,0x1
c00118c4:	76 2d                	jbe    c00118f3 <SysClose(regs*)+0x4b>
c00118c6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00118cb:	77 2e                	ja     c00118fb <SysClose(regs*)+0x53>
c00118cd:	83 ec 0c             	sub    esp,0xc
c00118d0:	50                   	push   eax
c00118d1:	e8 a3 18 00 00       	call   c0013179 <KeGetFileFromDescriptor(int)>
c00118d6:	83 c4 10             	add    esp,0x10
c00118d9:	85 c0                	test   eax,eax
c00118db:	89 c3                	mov    ebx,eax
c00118dd:	74 1c                	je     c00118fb <SysClose(regs*)+0x53>
c00118df:	83 ec 0c             	sub    esp,0xc
c00118e2:	50                   	push   eax
c00118e3:	e8 c0 68 ff ff       	call   c00081a8 <File::close()>
c00118e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118f0:	83 c4 10             	add    esp,0x10
c00118f3:	5b                   	pop    ebx
c00118f4:	89 f0                	mov    eax,esi
c00118f6:	89 fa                	mov    edx,edi
c00118f8:	5e                   	pop    esi
c00118f9:	5f                   	pop    edi
c00118fa:	c3                   	ret    
c00118fb:	5b                   	pop    ebx
c00118fc:	be ff ff ff ff       	mov    esi,0xffffffff
c0011901:	89 f0                	mov    eax,esi
c0011903:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011908:	89 fa                	mov    edx,edi
c001190a:	5e                   	pop    esi
c001190b:	5f                   	pop    edi
c001190c:	c3                   	ret    

c001190d <SysOpenDir(regs*)>:
c001190d:	56                   	push   esi
c001190e:	53                   	push   ebx
c001190f:	83 ec 04             	sub    esp,0x4
c0011912:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011916:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011919:	85 c9                	test   ecx,ecx
c001191b:	74 5d                	je     c001197a <SysOpenDir(regs*)+0x6d>
c001191d:	83 ec 0c             	sub    esp,0xc
c0011920:	68 14 01 00 00       	push   0x114
c0011925:	e8 ba e1 ff ff       	call   c000fae4 <malloc>
c001192a:	83 c4 0c             	add    esp,0xc
c001192d:	89 c6                	mov    esi,eax
c001192f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011934:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011937:	50                   	push   eax
c0011938:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001193b:	52                   	push   edx
c001193c:	56                   	push   esi
c001193d:	e8 ca 6c ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c0011942:	83 c4 10             	add    esp,0x10
c0011945:	85 f6                	test   esi,esi
c0011947:	74 31                	je     c001197a <SysOpenDir(regs*)+0x6d>
c0011949:	83 ec 0c             	sub    esp,0xc
c001194c:	56                   	push   esi
c001194d:	e8 82 6d ff ff       	call   c00086d4 <Directory::open()>
c0011952:	83 c4 10             	add    esp,0x10
c0011955:	85 c0                	test   eax,eax
c0011957:	75 21                	jne    c001197a <SysOpenDir(regs*)+0x6d>
c0011959:	83 ec 0c             	sub    esp,0xc
c001195c:	56                   	push   esi
c001195d:	e8 1a 15 00 00       	call   c0012e7c <UnixFile::getFileDescriptor()>
c0011962:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011965:	83 c4 10             	add    esp,0x10
c0011968:	89 02                	mov    DWORD PTR [edx],eax
c001196a:	c1 f8 1f             	sar    eax,0x1f
c001196d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011970:	83 c4 04             	add    esp,0x4
c0011973:	31 c0                	xor    eax,eax
c0011975:	5b                   	pop    ebx
c0011976:	31 d2                	xor    edx,edx
c0011978:	5e                   	pop    esi
c0011979:	c3                   	ret    
c001197a:	83 c4 04             	add    esp,0x4
c001197d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011982:	5b                   	pop    ebx
c0011983:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011988:	5e                   	pop    esi
c0011989:	c3                   	ret    

c001198a <SysMakeDir(regs*)>:
c001198a:	56                   	push   esi
c001198b:	53                   	push   ebx
c001198c:	83 ec 10             	sub    esp,0x10
c001198f:	68 14 01 00 00       	push   0x114
c0011994:	e8 4b e1 ff ff       	call   c000fae4 <malloc>
c0011999:	83 c4 0c             	add    esp,0xc
c001199c:	89 c3                	mov    ebx,eax
c001199e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119a6:	50                   	push   eax
c00119a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00119ab:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00119ae:	52                   	push   edx
c00119af:	53                   	push   ebx
c00119b0:	e8 57 6c ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c00119b5:	83 c4 10             	add    esp,0x10
c00119b8:	85 db                	test   ebx,ebx
c00119ba:	74 2c                	je     c00119e8 <SysMakeDir(regs*)+0x5e>
c00119bc:	83 ec 0c             	sub    esp,0xc
c00119bf:	53                   	push   ebx
c00119c0:	e8 ef 6e ff ff       	call   c00088b4 <Directory::create()>
c00119c5:	89 c6                	mov    esi,eax
c00119c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119cf:	83 c4 10             	add    esp,0x10
c00119d2:	31 c0                	xor    eax,eax
c00119d4:	85 f6                	test   esi,esi
c00119d6:	0f 95 c0             	setne  al
c00119d9:	31 d2                	xor    edx,edx
c00119db:	f7 d8                	neg    eax
c00119dd:	83 d2 00             	adc    edx,0x0
c00119e0:	83 c4 04             	add    esp,0x4
c00119e3:	5b                   	pop    ebx
c00119e4:	f7 da                	neg    edx
c00119e6:	5e                   	pop    esi
c00119e7:	c3                   	ret    
c00119e8:	83 c4 04             	add    esp,0x4
c00119eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119f0:	5b                   	pop    ebx
c00119f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119f6:	5e                   	pop    esi
c00119f7:	c3                   	ret    

c00119f8 <SysCloseDir(regs*)>:
c00119f8:	53                   	push   ebx
c00119f9:	83 ec 08             	sub    esp,0x8
c00119fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a00:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a03:	8d 50 fd             	lea    edx,[eax-0x3]
c0011a06:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011a0c:	77 2f                	ja     c0011a3d <SysCloseDir(regs*)+0x45>
c0011a0e:	83 ec 0c             	sub    esp,0xc
c0011a11:	50                   	push   eax
c0011a12:	e8 62 17 00 00       	call   c0013179 <KeGetFileFromDescriptor(int)>
c0011a17:	83 c4 10             	add    esp,0x10
c0011a1a:	85 c0                	test   eax,eax
c0011a1c:	89 c3                	mov    ebx,eax
c0011a1e:	74 1d                	je     c0011a3d <SysCloseDir(regs*)+0x45>
c0011a20:	83 ec 0c             	sub    esp,0xc
c0011a23:	50                   	push   eax
c0011a24:	e8 07 6d ff ff       	call   c0008730 <Directory::close()>
c0011a29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a31:	83 c4 10             	add    esp,0x10
c0011a34:	31 c0                	xor    eax,eax
c0011a36:	83 c4 08             	add    esp,0x8
c0011a39:	31 d2                	xor    edx,edx
c0011a3b:	5b                   	pop    ebx
c0011a3c:	c3                   	ret    
c0011a3d:	83 c4 08             	add    esp,0x8
c0011a40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a45:	5b                   	pop    ebx
c0011a46:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a4b:	c3                   	ret    

c0011a4c <SysWait(regs*)>:
c0011a4c:	83 ec 10             	sub    esp,0x10
c0011a4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a53:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011a56:	52                   	push   edx
c0011a57:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011a5a:	51                   	push   ecx
c0011a5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a5e:	50                   	push   eax
c0011a5f:	e8 28 54 00 00       	call   c0016e8c <waitTask(int, int*, int)>
c0011a64:	83 c4 1c             	add    esp,0x1c
c0011a67:	89 c2                	mov    edx,eax
c0011a69:	c1 fa 1f             	sar    edx,0x1f
c0011a6c:	c3                   	ret    

c0011a6d <SysNotImpl(regs*)>:
c0011a6d:	83 ec 18             	sub    esp,0x18
c0011a70:	68 62 42 02 c0       	push   0xc0024262
c0011a75:	e8 b0 e3 ff ff       	call   c000fe2a <KePanic(char const*)>
c0011a7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a84:	83 c4 1c             	add    esp,0x1c
c0011a87:	c3                   	ret    

c0011a88 <SysPanic(regs*)>:
c0011a88:	83 ec 18             	sub    esp,0x18
c0011a8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a8f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011a92:	50                   	push   eax
c0011a93:	e8 92 e3 ff ff       	call   c000fe2a <KePanic(char const*)>
c0011a98:	b8 01 00 00 00       	mov    eax,0x1
c0011a9d:	31 d2                	xor    edx,edx
c0011a9f:	83 c4 1c             	add    esp,0x1c
c0011aa2:	c3                   	ret    

c0011aa3 <SysRmdir(regs*)>:
c0011aa3:	56                   	push   esi
c0011aa4:	53                   	push   ebx
c0011aa5:	83 ec 10             	sub    esp,0x10
c0011aa8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011aac:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011aaf:	68 14 01 00 00       	push   0x114
c0011ab4:	e8 2b e0 ff ff       	call   c000fae4 <malloc>
c0011ab9:	6a 00                	push   0x0
c0011abb:	89 c3                	mov    ebx,eax
c0011abd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ac2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ac5:	50                   	push   eax
c0011ac6:	56                   	push   esi
c0011ac7:	53                   	push   ebx
c0011ac8:	e8 61 65 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0011acd:	83 c4 14             	add    esp,0x14
c0011ad0:	53                   	push   ebx
c0011ad1:	e8 42 68 ff ff       	call   c0008318 <File::unlink()>
c0011ad6:	83 c4 10             	add    esp,0x10
c0011ad9:	85 db                	test   ebx,ebx
c0011adb:	89 c6                	mov    esi,eax
c0011add:	74 0c                	je     c0011aeb <SysRmdir(regs*)+0x48>
c0011adf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ae1:	83 ec 0c             	sub    esp,0xc
c0011ae4:	53                   	push   ebx
c0011ae5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ae8:	83 c4 10             	add    esp,0x10
c0011aeb:	31 c0                	xor    eax,eax
c0011aed:	85 f6                	test   esi,esi
c0011aef:	0f 95 c0             	setne  al
c0011af2:	31 d2                	xor    edx,edx
c0011af4:	f7 d8                	neg    eax
c0011af6:	83 d2 00             	adc    edx,0x0
c0011af9:	83 c4 04             	add    esp,0x4
c0011afc:	5b                   	pop    ebx
c0011afd:	f7 da                	neg    edx
c0011aff:	5e                   	pop    esi
c0011b00:	c3                   	ret    

c0011b01 <SysUnlink(regs*)>:
c0011b01:	56                   	push   esi
c0011b02:	53                   	push   ebx
c0011b03:	83 ec 10             	sub    esp,0x10
c0011b06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b0a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011b0d:	68 14 01 00 00       	push   0x114
c0011b12:	e8 cd df ff ff       	call   c000fae4 <malloc>
c0011b17:	6a 00                	push   0x0
c0011b19:	89 c3                	mov    ebx,eax
c0011b1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b23:	50                   	push   eax
c0011b24:	56                   	push   esi
c0011b25:	53                   	push   ebx
c0011b26:	e8 03 65 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0011b2b:	83 c4 14             	add    esp,0x14
c0011b2e:	53                   	push   ebx
c0011b2f:	e8 e4 67 ff ff       	call   c0008318 <File::unlink()>
c0011b34:	83 c4 10             	add    esp,0x10
c0011b37:	85 db                	test   ebx,ebx
c0011b39:	89 c6                	mov    esi,eax
c0011b3b:	74 0c                	je     c0011b49 <SysUnlink(regs*)+0x48>
c0011b3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b3f:	83 ec 0c             	sub    esp,0xc
c0011b42:	53                   	push   ebx
c0011b43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b46:	83 c4 10             	add    esp,0x10
c0011b49:	31 c0                	xor    eax,eax
c0011b4b:	85 f6                	test   esi,esi
c0011b4d:	0f 95 c0             	setne  al
c0011b50:	31 d2                	xor    edx,edx
c0011b52:	f7 d8                	neg    eax
c0011b54:	83 d2 00             	adc    edx,0x0
c0011b57:	83 c4 04             	add    esp,0x4
c0011b5a:	5b                   	pop    ebx
c0011b5b:	f7 da                	neg    edx
c0011b5d:	5e                   	pop    esi
c0011b5e:	c3                   	ret    

c0011b5f <SysGetArgv(regs*)>:
c0011b5f:	83 ec 0c             	sub    esp,0xc
c0011b62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011b66:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011b69:	85 c0                	test   eax,eax
c0011b6b:	78 2c                	js     c0011b99 <SysGetArgv(regs*)+0x3a>
c0011b6d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011b73:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011b76:	3b 81 76 05 00 00    	cmp    eax,DWORD PTR [ecx+0x576]
c0011b7c:	7d 1b                	jge    c0011b99 <SysGetArgv(regs*)+0x3a>
c0011b7e:	8b 84 81 7a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x57a]
c0011b85:	85 c0                	test   eax,eax
c0011b87:	74 18                	je     c0011ba1 <SysGetArgv(regs*)+0x42>
c0011b89:	83 ec 08             	sub    esp,0x8
c0011b8c:	50                   	push   eax
c0011b8d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011b90:	50                   	push   eax
c0011b91:	e8 ba ea fe ff       	call   c0000650 <strcpy>
c0011b96:	83 c4 10             	add    esp,0x10
c0011b99:	31 c0                	xor    eax,eax
c0011b9b:	31 d2                	xor    edx,edx
c0011b9d:	83 c4 0c             	add    esp,0xc
c0011ba0:	c3                   	ret    
c0011ba1:	b8 01 00 00 00       	mov    eax,0x1
c0011ba6:	31 d2                	xor    edx,edx
c0011ba8:	83 c4 0c             	add    esp,0xc
c0011bab:	c3                   	ret    

c0011bac <SysUSleep(regs*)>:
c0011bac:	83 ec 1c             	sub    esp,0x1c
c0011baf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011bb3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011bb6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011bb9:	6a 00                	push   0x0
c0011bbb:	6a 64                	push   0x64
c0011bbd:	52                   	push   edx
c0011bbe:	50                   	push   eax
c0011bbf:	e8 70 fb 00 00       	call   c0021734 <__udivdi3>
c0011bc4:	83 c4 18             	add    esp,0x18
c0011bc7:	52                   	push   edx
c0011bc8:	50                   	push   eax
c0011bc9:	e8 b6 53 00 00       	call   c0016f84 <milliTenthSleep(unsigned long long)>
c0011bce:	31 c0                	xor    eax,eax
c0011bd0:	31 d2                	xor    edx,edx
c0011bd2:	83 c4 1c             	add    esp,0x1c
c0011bd5:	c3                   	ret    

c0011bd6 <SysSpawn(regs*)>:
c0011bd6:	56                   	push   esi
c0011bd7:	53                   	push   ebx
c0011bd8:	83 ec 04             	sub    esp,0x4
c0011bdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011bdf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011be2:	85 f6                	test   esi,esi
c0011be4:	75 0a                	jne    c0011bf0 <SysSpawn(regs*)+0x1a>
c0011be6:	83 c4 04             	add    esp,0x4
c0011be9:	31 c0                	xor    eax,eax
c0011beb:	5b                   	pop    ebx
c0011bec:	31 d2                	xor    edx,edx
c0011bee:	5e                   	pop    esi
c0011bef:	c3                   	ret    
c0011bf0:	83 ec 0c             	sub    esp,0xc
c0011bf3:	68 84 07 00 00       	push   0x784
c0011bf8:	e8 e7 de ff ff       	call   c000fae4 <malloc>
c0011bfd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011c00:	83 c4 10             	add    esp,0x10
c0011c03:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c06:	89 c6                	mov    esi,eax
c0011c08:	31 c0                	xor    eax,eax
c0011c0a:	85 c9                	test   ecx,ecx
c0011c0c:	74 08                	je     c0011c16 <SysSpawn(regs*)+0x40>
c0011c0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c16:	52                   	push   edx
c0011c17:	50                   	push   eax
c0011c18:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c1b:	50                   	push   eax
c0011c1c:	56                   	push   esi
c0011c1d:	e8 86 4a 00 00       	call   c00166a8 <Process::Process(char const*, Process*, char**)>
c0011c22:	83 c4 10             	add    esp,0x10
c0011c25:	80 be 7e 07 00 00 00 	cmp    BYTE PTR [esi+0x77e],0x0
c0011c2c:	75 b8                	jne    c0011be6 <SysSpawn(regs*)+0x10>
c0011c2e:	83 ec 0c             	sub    esp,0xc
c0011c31:	56                   	push   esi
c0011c32:	e8 01 50 00 00       	call   c0016c38 <Process::createUserThread()>
c0011c37:	8b 06                	mov    eax,DWORD PTR [esi]
c0011c39:	83 c4 10             	add    esp,0x10
c0011c3c:	83 c4 04             	add    esp,0x4
c0011c3f:	5b                   	pop    ebx
c0011c40:	89 c2                	mov    edx,eax
c0011c42:	c1 fa 1f             	sar    edx,0x1f
c0011c45:	5e                   	pop    esi
c0011c46:	c3                   	ret    

c0011c47 <SysGetEnv(regs*)>:
c0011c47:	57                   	push   edi
c0011c48:	56                   	push   esi
c0011c49:	53                   	push   ebx
c0011c4a:	83 ec 1c             	sub    esp,0x1c
c0011c4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c52:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011c56:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011c59:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011c5c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011c5f:	51                   	push   ecx
c0011c60:	e8 b6 cb ff ff       	call   c000e81b <KeGetProcessTotalEnvCount(Process*)>
c0011c65:	83 c4 10             	add    esp,0x10
c0011c68:	39 c7                	cmp    edi,eax
c0011c6a:	7c 12                	jl     c0011c7e <SysGetEnv(regs*)+0x37>
c0011c6c:	31 c0                	xor    eax,eax
c0011c6e:	31 d2                	xor    edx,edx
c0011c70:	85 f6                	test   esi,esi
c0011c72:	74 03                	je     c0011c77 <SysGetEnv(regs*)+0x30>
c0011c74:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011c77:	83 c4 10             	add    esp,0x10
c0011c7a:	5b                   	pop    ebx
c0011c7b:	5e                   	pop    esi
c0011c7c:	5f                   	pop    edi
c0011c7d:	c3                   	ret    
c0011c7e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011c82:	83 ec 04             	sub    esp,0x4
c0011c85:	57                   	push   edi
c0011c86:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c8c:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011c8f:	57                   	push   edi
c0011c90:	50                   	push   eax
c0011c91:	e8 a5 cb ff ff       	call   c000e83b <KeGetProcessEnvPair(Process*, int)>
c0011c96:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011ca1:	83 c4 0c             	add    esp,0xc
c0011ca4:	85 d2                	test   edx,edx
c0011ca6:	75 23                	jne    c0011ccb <SysGetEnv(regs*)+0x84>
c0011ca8:	83 ec 0c             	sub    esp,0xc
c0011cab:	50                   	push   eax
c0011cac:	e8 cf e8 fe ff       	call   c0000580 <strlen>
c0011cb1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011cb4:	89 c3                	mov    ebx,eax
c0011cb6:	e8 c5 e8 fe ff       	call   c0000580 <strlen>
c0011cbb:	83 c4 10             	add    esp,0x10
c0011cbe:	31 d2                	xor    edx,edx
c0011cc0:	83 c4 10             	add    esp,0x10
c0011cc3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011cc7:	5b                   	pop    ebx
c0011cc8:	5e                   	pop    esi
c0011cc9:	5f                   	pop    edi
c0011cca:	c3                   	ret    
c0011ccb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011cce:	83 ec 08             	sub    esp,0x8
c0011cd1:	50                   	push   eax
c0011cd2:	56                   	push   esi
c0011cd3:	e8 78 e9 fe ff       	call   c0000650 <strcpy>
c0011cd8:	58                   	pop    eax
c0011cd9:	5a                   	pop    edx
c0011cda:	68 7c 42 02 c0       	push   0xc002427c
c0011cdf:	56                   	push   esi
c0011ce0:	e8 8b eb fe ff       	call   c0000870 <strcat>
c0011ce5:	59                   	pop    ecx
c0011ce6:	5b                   	pop    ebx
c0011ce7:	57                   	push   edi
c0011ce8:	56                   	push   esi
c0011ce9:	e8 82 eb fe ff       	call   c0000870 <strcat>
c0011cee:	83 c4 10             	add    esp,0x10
c0011cf1:	31 c0                	xor    eax,eax
c0011cf3:	83 c4 10             	add    esp,0x10
c0011cf6:	31 d2                	xor    edx,edx
c0011cf8:	5b                   	pop    ebx
c0011cf9:	5e                   	pop    esi
c0011cfa:	5f                   	pop    edi
c0011cfb:	c3                   	ret    

c0011cfc <SysSetFatAttrib(regs*)>:
c0011cfc:	57                   	push   edi
c0011cfd:	56                   	push   esi
c0011cfe:	53                   	push   ebx
c0011cff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d03:	83 ec 0c             	sub    esp,0xc
c0011d06:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011d09:	68 14 01 00 00       	push   0x114
c0011d0e:	e8 d1 dd ff ff       	call   c000fae4 <malloc>
c0011d13:	83 c4 0c             	add    esp,0xc
c0011d16:	89 c3                	mov    ebx,eax
c0011d18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d1d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d20:	50                   	push   eax
c0011d21:	57                   	push   edi
c0011d22:	53                   	push   ebx
c0011d23:	e8 04 64 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0011d28:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011d2b:	83 c4 0c             	add    esp,0xc
c0011d2e:	0f b6 d4             	movzx  edx,ah
c0011d31:	0f b6 c0             	movzx  eax,al
c0011d34:	52                   	push   edx
c0011d35:	50                   	push   eax
c0011d36:	53                   	push   ebx
c0011d37:	e8 76 66 ff ff       	call   c00083b2 <File::chfatattr(unsigned char, unsigned char)>
c0011d3c:	83 c4 10             	add    esp,0x10
c0011d3f:	85 db                	test   ebx,ebx
c0011d41:	89 c6                	mov    esi,eax
c0011d43:	74 0c                	je     c0011d51 <SysSetFatAttrib(regs*)+0x55>
c0011d45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d47:	83 ec 0c             	sub    esp,0xc
c0011d4a:	53                   	push   ebx
c0011d4b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d4e:	83 c4 10             	add    esp,0x10
c0011d51:	5b                   	pop    ebx
c0011d52:	31 c0                	xor    eax,eax
c0011d54:	85 f6                	test   esi,esi
c0011d56:	0f 95 c0             	setne  al
c0011d59:	31 d2                	xor    edx,edx
c0011d5b:	5e                   	pop    esi
c0011d5c:	f7 d8                	neg    eax
c0011d5e:	83 d2 00             	adc    edx,0x0
c0011d61:	f7 da                	neg    edx
c0011d63:	5f                   	pop    edi
c0011d64:	c3                   	ret    

c0011d65 <SysShutdown(regs*)>:
c0011d65:	83 ec 1c             	sub    esp,0x1c
c0011d68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d6c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011d6f:	85 c9                	test   ecx,ecx
c0011d71:	74 18                	je     c0011d8b <SysShutdown(regs*)+0x26>
c0011d73:	83 f9 01             	cmp    ecx,0x1
c0011d76:	74 26                	je     c0011d9e <SysShutdown(regs*)+0x39>
c0011d78:	83 f9 02             	cmp    ecx,0x2
c0011d7b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d80:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d85:	74 24                	je     c0011dab <SysShutdown(regs*)+0x46>
c0011d87:	83 c4 1c             	add    esp,0x1c
c0011d8a:	c3                   	ret    
c0011d8b:	e8 04 c5 ff ff       	call   c000e294 <KeShutdown()>
c0011d90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d95:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d9a:	83 c4 1c             	add    esp,0x1c
c0011d9d:	c3                   	ret    
c0011d9e:	e8 15 c5 ff ff       	call   c000e2b8 <KeSleep()>
c0011da3:	31 c0                	xor    eax,eax
c0011da5:	31 d2                	xor    edx,edx
c0011da7:	83 c4 1c             	add    esp,0x1c
c0011daa:	c3                   	ret    
c0011dab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011daf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011db3:	e8 0c c5 ff ff       	call   c000e2c4 <KeRestart()>
c0011db8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011dbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011dc0:	eb c5                	jmp    c0011d87 <SysShutdown(regs*)+0x22>

c0011dc2 <SysPipe(regs*)>:
c0011dc2:	57                   	push   edi
c0011dc3:	56                   	push   esi
c0011dc4:	53                   	push   ebx
c0011dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dc9:	83 ec 0c             	sub    esp,0xc
c0011dcc:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011dcf:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011dd2:	6a 20                	push   0x20
c0011dd4:	e8 0b dd ff ff       	call   c000fae4 <malloc>
c0011dd9:	89 c3                	mov    ebx,eax
c0011ddb:	58                   	pop    eax
c0011ddc:	5a                   	pop    edx
c0011ddd:	68 00 50 00 00       	push   0x5000
c0011de2:	53                   	push   ebx
c0011de3:	e8 be e8 ff ff       	call   c00106a6 <Pipe::Pipe(int)>
c0011de8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011deb:	e8 8c 10 00 00       	call   c0012e7c <UnixFile::getFileDescriptor()>
c0011df0:	89 07                	mov    DWORD PTR [edi],eax
c0011df2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011df5:	e8 82 10 00 00       	call   c0012e7c <UnixFile::getFileDescriptor()>
c0011dfa:	83 c4 10             	add    esp,0x10
c0011dfd:	31 d2                	xor    edx,edx
c0011dff:	89 06                	mov    DWORD PTR [esi],eax
c0011e01:	31 c0                	xor    eax,eax
c0011e03:	5b                   	pop    ebx
c0011e04:	5e                   	pop    esi
c0011e05:	5f                   	pop    edi
c0011e06:	c3                   	ret    

c0011e07 <SysGetUnixTime(regs*)>:
c0011e07:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0011e0c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011e12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e16:	e9 c3 72 ff ff       	jmp    c00090de <Clock::timeInSecondsLocal()>

c0011e1b <string_ends_with(char const*, char const*)>:
c0011e1b:	57                   	push   edi
c0011e1c:	56                   	push   esi
c0011e1d:	53                   	push   ebx
c0011e1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e22:	83 ec 0c             	sub    esp,0xc
c0011e25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011e29:	53                   	push   ebx
c0011e2a:	e8 51 e7 fe ff       	call   c0000580 <strlen>
c0011e2f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e32:	89 c6                	mov    esi,eax
c0011e34:	e8 47 e7 fe ff       	call   c0000580 <strlen>
c0011e39:	83 c4 10             	add    esp,0x10
c0011e3c:	31 d2                	xor    edx,edx
c0011e3e:	39 c6                	cmp    esi,eax
c0011e40:	7d 06                	jge    c0011e48 <string_ends_with(char const*, char const*)+0x2d>
c0011e42:	5b                   	pop    ebx
c0011e43:	89 d0                	mov    eax,edx
c0011e45:	5e                   	pop    esi
c0011e46:	5f                   	pop    edi
c0011e47:	c3                   	ret    
c0011e48:	83 ec 08             	sub    esp,0x8
c0011e4b:	29 c6                	sub    esi,eax
c0011e4d:	57                   	push   edi
c0011e4e:	01 f3                	add    ebx,esi
c0011e50:	53                   	push   ebx
c0011e51:	e8 2a e9 fe ff       	call   c0000780 <strcmp>
c0011e56:	83 c4 10             	add    esp,0x10
c0011e59:	31 d2                	xor    edx,edx
c0011e5b:	5b                   	pop    ebx
c0011e5c:	5e                   	pop    esi
c0011e5d:	85 c0                	test   eax,eax
c0011e5f:	5f                   	pop    edi
c0011e60:	0f 94 c2             	sete   dl
c0011e63:	89 d0                	mov    eax,edx
c0011e65:	c3                   	ret    

c0011e66 <SysOpen(regs*)>:
c0011e66:	56                   	push   esi
c0011e67:	53                   	push   ebx
c0011e68:	81 ec 04 01 00 00    	sub    esp,0x104
c0011e6e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011e75:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e78:	85 c0                	test   eax,eax
c0011e7a:	0f 84 c4 01 00 00    	je     c0012044 <SysOpen(regs*)+0x1de>
c0011e80:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e83:	85 c0                	test   eax,eax
c0011e85:	0f 84 b9 01 00 00    	je     c0012044 <SysOpen(regs*)+0x1de>
c0011e8b:	6a 00                	push   0x0
c0011e8d:	68 7e 42 02 c0       	push   0xc002427e
c0011e92:	50                   	push   eax
c0011e93:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011e97:	56                   	push   esi
c0011e98:	e8 63 5f ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011e9d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ea0:	e8 db e6 fe ff       	call   c0000580 <strlen>
c0011ea5:	83 c4 10             	add    esp,0x10
c0011ea8:	83 e8 01             	sub    eax,0x1
c0011eab:	74 29                	je     c0011ed6 <SysOpen(regs*)+0x70>
c0011ead:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011eb1:	83 fa 2e             	cmp    edx,0x2e
c0011eb4:	74 1c                	je     c0011ed2 <SysOpen(regs*)+0x6c>
c0011eb6:	83 fa 3a             	cmp    edx,0x3a
c0011eb9:	74 17                	je     c0011ed2 <SysOpen(regs*)+0x6c>
c0011ebb:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011ebf:	83 e8 01             	sub    eax,0x1
c0011ec2:	74 12                	je     c0011ed6 <SysOpen(regs*)+0x70>
c0011ec4:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011ec8:	83 fa 3a             	cmp    edx,0x3a
c0011ecb:	74 05                	je     c0011ed2 <SysOpen(regs*)+0x6c>
c0011ecd:	83 fa 2e             	cmp    edx,0x2e
c0011ed0:	75 e9                	jne    c0011ebb <SysOpen(regs*)+0x55>
c0011ed2:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011ed6:	83 ec 08             	sub    esp,0x8
c0011ed9:	68 82 42 02 c0       	push   0xc0024282
c0011ede:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ee1:	50                   	push   eax
c0011ee2:	e8 34 ff ff ff       	call   c0011e1b <string_ends_with(char const*, char const*)>
c0011ee7:	83 c4 10             	add    esp,0x10
c0011eea:	85 c0                	test   eax,eax
c0011eec:	74 1d                	je     c0011f0b <SysOpen(regs*)+0xa5>
c0011eee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ef1:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011ef7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011efe:	81 c4 04 01 00 00    	add    esp,0x104
c0011f04:	31 c0                	xor    eax,eax
c0011f06:	5b                   	pop    ebx
c0011f07:	31 d2                	xor    edx,edx
c0011f09:	5e                   	pop    esi
c0011f0a:	c3                   	ret    
c0011f0b:	83 ec 08             	sub    esp,0x8
c0011f0e:	68 87 42 02 c0       	push   0xc0024287
c0011f13:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f16:	50                   	push   eax
c0011f17:	e8 ff fe ff ff       	call   c0011e1b <string_ends_with(char const*, char const*)>
c0011f1c:	83 c4 10             	add    esp,0x10
c0011f1f:	85 c0                	test   eax,eax
c0011f21:	75 cb                	jne    c0011eee <SysOpen(regs*)+0x88>
c0011f23:	83 ec 08             	sub    esp,0x8
c0011f26:	68 83 42 02 c0       	push   0xc0024283
c0011f2b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f2e:	50                   	push   eax
c0011f2f:	e8 4c e8 fe ff       	call   c0000780 <strcmp>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	85 c0                	test   eax,eax
c0011f39:	74 b3                	je     c0011eee <SysOpen(regs*)+0x88>
c0011f3b:	83 ec 08             	sub    esp,0x8
c0011f3e:	68 82 42 02 c0       	push   0xc0024282
c0011f43:	56                   	push   esi
c0011f44:	e8 d2 fe ff ff       	call   c0011e1b <string_ends_with(char const*, char const*)>
c0011f49:	83 c4 10             	add    esp,0x10
c0011f4c:	85 c0                	test   eax,eax
c0011f4e:	75 9e                	jne    c0011eee <SysOpen(regs*)+0x88>
c0011f50:	83 ec 08             	sub    esp,0x8
c0011f53:	68 8c 42 02 c0       	push   0xc002428c
c0011f58:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f5b:	50                   	push   eax
c0011f5c:	e8 ba fe ff ff       	call   c0011e1b <string_ends_with(char const*, char const*)>
c0011f61:	83 c4 10             	add    esp,0x10
c0011f64:	85 c0                	test   eax,eax
c0011f66:	0f 85 eb 00 00 00    	jne    c0012057 <SysOpen(regs*)+0x1f1>
c0011f6c:	83 ec 08             	sub    esp,0x8
c0011f6f:	68 91 42 02 c0       	push   0xc0024291
c0011f74:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f77:	50                   	push   eax
c0011f78:	e8 9e fe ff ff       	call   c0011e1b <string_ends_with(char const*, char const*)>
c0011f7d:	83 c4 10             	add    esp,0x10
c0011f80:	85 c0                	test   eax,eax
c0011f82:	0f 85 cf 00 00 00    	jne    c0012057 <SysOpen(regs*)+0x1f1>
c0011f88:	83 ec 08             	sub    esp,0x8
c0011f8b:	68 8d 42 02 c0       	push   0xc002428d
c0011f90:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f93:	51                   	push   ecx
c0011f94:	e8 e7 e7 fe ff       	call   c0000780 <strcmp>
c0011f99:	83 c4 10             	add    esp,0x10
c0011f9c:	85 c0                	test   eax,eax
c0011f9e:	0f 84 b3 00 00 00    	je     c0012057 <SysOpen(regs*)+0x1f1>
c0011fa4:	83 ec 08             	sub    esp,0x8
c0011fa7:	68 8c 42 02 c0       	push   0xc002428c
c0011fac:	56                   	push   esi
c0011fad:	e8 69 fe ff ff       	call   c0011e1b <string_ends_with(char const*, char const*)>
c0011fb2:	83 c4 10             	add    esp,0x10
c0011fb5:	85 c0                	test   eax,eax
c0011fb7:	0f 85 9a 00 00 00    	jne    c0012057 <SysOpen(regs*)+0x1f1>
c0011fbd:	83 ec 0c             	sub    esp,0xc
c0011fc0:	68 14 01 00 00       	push   0x114
c0011fc5:	e8 1a db ff ff       	call   c000fae4 <malloc>
c0011fca:	83 c4 0c             	add    esp,0xc
c0011fcd:	89 c6                	mov    esi,eax
c0011fcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fd4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011fd7:	50                   	push   eax
c0011fd8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011fdb:	52                   	push   edx
c0011fdc:	56                   	push   esi
c0011fdd:	e8 4a 61 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0011fe2:	83 c4 10             	add    esp,0x10
c0011fe5:	85 f6                	test   esi,esi
c0011fe7:	74 5b                	je     c0012044 <SysOpen(regs*)+0x1de>
c0011fe9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011fec:	0f b6 c2             	movzx  eax,dl
c0011fef:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011ff2:	89 d0                	mov    eax,edx
c0011ff4:	83 e0 01             	and    eax,0x1
c0011ff7:	f6 c2 02             	test   dl,0x2
c0011ffa:	74 03                	je     c0011fff <SysOpen(regs*)+0x199>
c0011ffc:	83 c8 02             	or     eax,0x2
c0011fff:	f6 c2 04             	test   dl,0x4
c0012002:	74 03                	je     c0012007 <SysOpen(regs*)+0x1a1>
c0012004:	83 c8 04             	or     eax,0x4
c0012007:	f6 c2 08             	test   dl,0x8
c001200a:	74 03                	je     c001200f <SysOpen(regs*)+0x1a9>
c001200c:	83 c8 0a             	or     eax,0xa
c001200f:	80 e2 10             	and    dl,0x10
c0012012:	74 03                	je     c0012017 <SysOpen(regs*)+0x1b1>
c0012014:	83 c8 12             	or     eax,0x12
c0012017:	83 ec 08             	sub    esp,0x8
c001201a:	50                   	push   eax
c001201b:	56                   	push   esi
c001201c:	e8 29 61 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0012021:	83 c4 10             	add    esp,0x10
c0012024:	85 c0                	test   eax,eax
c0012026:	75 1c                	jne    c0012044 <SysOpen(regs*)+0x1de>
c0012028:	83 ec 0c             	sub    esp,0xc
c001202b:	56                   	push   esi
c001202c:	e8 4b 0e 00 00       	call   c0012e7c <UnixFile::getFileDescriptor()>
c0012031:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012034:	83 c4 10             	add    esp,0x10
c0012037:	89 02                	mov    DWORD PTR [edx],eax
c0012039:	c1 f8 1f             	sar    eax,0x1f
c001203c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001203f:	e9 ba fe ff ff       	jmp    c0011efe <SysOpen(regs*)+0x98>
c0012044:	81 c4 04 01 00 00    	add    esp,0x104
c001204a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001204f:	5b                   	pop    ebx
c0012050:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012055:	5e                   	pop    esi
c0012056:	c3                   	ret    
c0012057:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001205a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012060:	e9 92 fe ff ff       	jmp    c0011ef7 <SysOpen(regs*)+0x91>

c0012065 <KeSystemCall(regs*, void*)>:
c0012065:	53                   	push   ebx
c0012066:	83 ec 08             	sub    esp,0x8
c0012069:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001206d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012070:	83 f8 42             	cmp    eax,0x42
c0012073:	77 16                	ja     c001208b <KeSystemCall(regs*, void*)+0x26>
c0012075:	8b 14 85 60 65 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9aa0]
c001207c:	85 d2                	test   edx,edx
c001207e:	74 0b                	je     c001208b <KeSystemCall(regs*, void*)+0x26>
c0012080:	83 ec 0c             	sub    esp,0xc
c0012083:	53                   	push   ebx
c0012084:	ff d2                	call   edx
c0012086:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012089:	eb 0d                	jmp    c0012098 <KeSystemCall(regs*, void*)+0x33>
c001208b:	52                   	push   edx
c001208c:	52                   	push   edx
c001208d:	50                   	push   eax
c001208e:	68 96 42 02 c0       	push   0xc0024296
c0012093:	e8 b6 4e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012098:	83 c4 10             	add    esp,0x10
c001209b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00120a0:	83 c4 08             	add    esp,0x8
c00120a3:	31 d2                	xor    edx,edx
c00120a5:	5b                   	pop    ebx
c00120a6:	c3                   	ret    
c00120a7:	90                   	nop

c00120a8 <VgaText::isAtty()>:
c00120a8:	b0 01                	mov    al,0x1
c00120aa:	c3                   	ret    
c00120ab:	90                   	nop

c00120ac <VgaText::~VgaText()>:
c00120ac:	83 ec 0c             	sub    esp,0xc
c00120af:	ba 10 43 02 c0       	mov    edx,0xc0024310
c00120b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120b8:	89 10                	mov    DWORD PTR [eax],edx
c00120ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120be:	83 ec 0c             	sub    esp,0xc
c00120c1:	50                   	push   eax
c00120c2:	e8 a3 0f 00 00       	call   c001306a <UnixFile::~UnixFile()>
c00120c7:	83 c4 10             	add    esp,0x10
c00120ca:	90                   	nop
c00120cb:	83 c4 0c             	add    esp,0xc
c00120ce:	c3                   	ret    
c00120cf:	90                   	nop

c00120d0 <VgaText::~VgaText()>:
c00120d0:	83 ec 0c             	sub    esp,0xc
c00120d3:	83 ec 0c             	sub    esp,0xc
c00120d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120da:	e8 cd ff ff ff       	call   c00120ac <VgaText::~VgaText()>
c00120df:	83 c4 10             	add    esp,0x10
c00120e2:	83 ec 08             	sub    esp,0x8
c00120e5:	68 84 01 00 00       	push   0x184
c00120ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120ee:	e8 68 b1 ff ff       	call   c000d25b <operator delete(void*, unsigned long)>
c00120f3:	83 c4 10             	add    esp,0x10
c00120f6:	83 c4 0c             	add    esp,0xc
c00120f9:	c3                   	ret    

c00120fa <VgaText::read(unsigned long long, void*, int*)>:
c00120fa:	83 ec 10             	sub    esp,0x10
c00120fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012101:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012105:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012109:	e8 df 83 ff ff       	call   c000a4ed <readKeyboard(VgaText*, char*, unsigned long)>
c001210e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012112:	89 02                	mov    DWORD PTR [edx],eax
c0012114:	31 c0                	xor    eax,eax
c0012116:	83 c4 1c             	add    esp,0x1c
c0012119:	c3                   	ret    

c001211a <setTerminalScrollLock(bool)>:
c001211a:	c3                   	ret    

c001211b <doTerminalCycle()>:
c001211b:	c3                   	ret    

c001211c <addToTerminalCycle(VgaText*)>:
c001211c:	c3                   	ret    

c001211d <scrollTerminalScrollLock(int)>:
c001211d:	c3                   	ret    

c001211e <VgaText::updateTitle()>:
c001211e:	c3                   	ret    
c001211f:	90                   	nop

c0012120 <VgaText::load()>:
c0012120:	c3                   	ret    
c0012121:	90                   	nop

c0012122 <VgaText::updateCursor()>:
c0012122:	83 ec 14             	sub    esp,0x14
c0012125:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012129:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001212c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001212f:	e8 d0 8e 00 00       	call   c001b004 <HalConsoleCursorUpdate(int, int)>
c0012134:	83 c4 1c             	add    esp,0x1c
c0012137:	c3                   	ret    

c0012138 <VgaText::doANSI_SGR(int)>:
c0012138:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001213c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012140:	85 d2                	test   edx,edx
c0012142:	75 0b                	jne    c001214f <VgaText::doANSI_SGR(int)+0x17>
c0012144:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012147:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001214a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001214d:	eb 59                	jmp    c00121a8 <VgaText::doANSI_SGR(int)+0x70>
c001214f:	83 fa 07             	cmp    edx,0x7
c0012152:	75 0b                	jne    c001215f <VgaText::doANSI_SGR(int)+0x27>
c0012154:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0012157:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001215a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001215d:	eb 49                	jmp    c00121a8 <VgaText::doANSI_SGR(int)+0x70>
c001215f:	83 fa 1b             	cmp    edx,0x1b
c0012162:	74 e0                	je     c0012144 <VgaText::doANSI_SGR(int)+0xc>
c0012164:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012167:	83 f9 07             	cmp    ecx,0x7
c001216a:	77 09                	ja     c0012175 <VgaText::doANSI_SGR(int)+0x3d>
c001216c:	8b 14 8d a0 66 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9960]
c0012173:	eb 20                	jmp    c0012195 <VgaText::doANSI_SGR(int)+0x5d>
c0012175:	8d 4a d8             	lea    ecx,[edx-0x28]
c0012178:	83 f9 07             	cmp    ecx,0x7
c001217b:	77 09                	ja     c0012186 <VgaText::doANSI_SGR(int)+0x4e>
c001217d:	8b 14 8d a0 66 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9960]
c0012184:	eb 22                	jmp    c00121a8 <VgaText::doANSI_SGR(int)+0x70>
c0012186:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0012189:	83 f9 07             	cmp    ecx,0x7
c001218c:	77 0b                	ja     c0012199 <VgaText::doANSI_SGR(int)+0x61>
c001218e:	8b 14 95 58 65 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9aa8]
c0012195:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012198:	c3                   	ret    
c0012199:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001219c:	83 f9 07             	cmp    ecx,0x7
c001219f:	77 0a                	ja     c00121ab <VgaText::doANSI_SGR(int)+0x73>
c00121a1:	8b 14 95 30 65 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9ad0]
c00121a8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00121ab:	c3                   	ret    

c00121ac <VgaText::setDefaultBgColour(VgaColour)>:
c00121ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121b4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00121b7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00121ba:	c3                   	ret    
c00121bb:	90                   	nop

c00121bc <VgaText::setDefaultFgColour(VgaColour)>:
c00121bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121c4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00121c7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00121ca:	c3                   	ret    
c00121cb:	90                   	nop

c00121cc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00121cc:	53                   	push   ebx
c00121cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00121d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00121d9:	51                   	push   ecx
c00121da:	e8 cd ff ff ff       	call   c00121ac <VgaText::setDefaultBgColour(VgaColour)>
c00121df:	58                   	pop    eax
c00121e0:	5a                   	pop    edx
c00121e1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00121e5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00121e9:	5b                   	pop    ebx
c00121ea:	eb d0                	jmp    c00121bc <VgaText::setDefaultFgColour(VgaColour)>

c00121ec <VgaText::setTitleTextColour(VgaColour)>:
c00121ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121f4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00121f7:	c3                   	ret    

c00121f8 <VgaText::setTitleColour(VgaColour)>:
c00121f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012200:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012203:	c3                   	ret    

c0012204 <VgaText::setTitle(char*)>:
c0012204:	c3                   	ret    
c0012205:	90                   	nop

c0012206 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001220a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001220f:	83 e0 0f             	and    eax,0xf
c0012212:	c1 e2 04             	shl    edx,0x4
c0012215:	09 d0                	or     eax,edx
c0012217:	c3                   	ret    

c0012218 <VgaText::scrollScreen()>:
c0012218:	55                   	push   ebp
c0012219:	57                   	push   edi
c001221a:	56                   	push   esi
c001221b:	be 01 00 00 00       	mov    esi,0x1
c0012220:	53                   	push   ebx
c0012221:	83 ec 0c             	sub    esp,0xc
c0012224:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012228:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001222b:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0012231:	31 ff                	xor    edi,edi
c0012233:	01 e9                	add    ecx,ebp
c0012235:	8a 01                	mov    al,BYTE PTR [ecx]
c0012237:	83 fe 18             	cmp    esi,0x18
c001223a:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0012240:	75 20                	jne    c0012262 <VgaText::scrollScreen()+0x4a>
c0012242:	f7 c7 01 00 00 00    	test   edi,0x1
c0012248:	74 15                	je     c001225f <VgaText::scrollScreen()+0x47>
c001224a:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001224e:	50                   	push   eax
c001224f:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012253:	50                   	push   eax
c0012254:	e8 ad ff ff ff       	call   c0012206 <VgaText::combineColours(unsigned char, unsigned char)>
c0012259:	5a                   	pop    edx
c001225a:	5a                   	pop    edx
c001225b:	88 01                	mov    BYTE PTR [ecx],al
c001225d:	eb 03                	jmp    c0012262 <VgaText::scrollScreen()+0x4a>
c001225f:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012262:	47                   	inc    edi
c0012263:	41                   	inc    ecx
c0012264:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001226a:	75 c9                	jne    c0012235 <VgaText::scrollScreen()+0x1d>
c001226c:	46                   	inc    esi
c001226d:	83 fe 19             	cmp    esi,0x19
c0012270:	75 b9                	jne    c001222b <VgaText::scrollScreen()+0x13>
c0012272:	39 1d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,ebx
c0012278:	75 1f                	jne    c0012299 <VgaText::scrollScreen()+0x81>
c001227a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001227e:	74 05                	je     c0012285 <VgaText::scrollScreen()+0x6d>
c0012280:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0012283:	eb 14                	jmp    c0012299 <VgaText::scrollScreen()+0x81>
c0012285:	50                   	push   eax
c0012286:	50                   	push   eax
c0012287:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001228b:	50                   	push   eax
c001228c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012290:	50                   	push   eax
c0012291:	e8 02 8c 00 00       	call   c001ae98 <HalConsoleScroll(int, int)>
c0012296:	83 c4 10             	add    esp,0x10
c0012299:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001229d:	83 c4 0c             	add    esp,0xc
c00122a0:	5b                   	pop    ebx
c00122a1:	5e                   	pop    esi
c00122a2:	5f                   	pop    edi
c00122a3:	5d                   	pop    ebp
c00122a4:	e9 79 fe ff ff       	jmp    c0012122 <VgaText::updateCursor()>
c00122a9:	90                   	nop

c00122aa <VgaText::combineCharAndColour(char, unsigned char)>:
c00122aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00122af:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00122b4:	c1 e0 08             	shl    eax,0x8
c00122b7:	09 d0                	or     eax,edx
c00122b9:	c3                   	ret    

c00122ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00122ba:	55                   	push   ebp
c00122bb:	57                   	push   edi
c00122bc:	56                   	push   esi
c00122bd:	53                   	push   ebx
c00122be:	83 ec 1c             	sub    esp,0x1c
c00122c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122c5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00122c9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00122cd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00122d1:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c00122d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122d8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122dc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00122e0:	85 ed                	test   ebp,ebp
c00122e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122e6:	75 14                	jne    c00122fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c00122e8:	c7 44 24 30 aa 42 02 c0 	mov    DWORD PTR [esp+0x30],0xc00242aa
c00122f0:	83 c4 1c             	add    esp,0x1c
c00122f3:	5b                   	pop    ebx
c00122f4:	5e                   	pop    esi
c00122f5:	5f                   	pop    edi
c00122f6:	5d                   	pop    ebp
c00122f7:	e9 2e db ff ff       	jmp    c000fe2a <KePanic(char const*)>
c00122fc:	50                   	push   eax
c00122fd:	50                   	push   eax
c00122fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012303:	50                   	push   eax
c0012304:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012309:	50                   	push   eax
c001230a:	e8 f7 fe ff ff       	call   c0012206 <VgaText::combineColours(unsigned char, unsigned char)>
c001230f:	5a                   	pop    edx
c0012310:	5a                   	pop    edx
c0012311:	0f b6 c0             	movzx  eax,al
c0012314:	0f be c9             	movsx  ecx,cl
c0012317:	50                   	push   eax
c0012318:	51                   	push   ecx
c0012319:	e8 8c ff ff ff       	call   c00122aa <VgaText::combineCharAndColour(char, unsigned char)>
c001231e:	6b d6 50             	imul   edx,esi,0x50
c0012321:	83 c4 10             	add    esp,0x10
c0012324:	01 da                	add    edx,ebx
c0012326:	0f b7 d2             	movzx  edx,dx
c0012329:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c001232e:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c0012334:	75 28                	jne    c001235e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012336:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001233a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001233e:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012342:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012346:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001234a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001234e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012352:	83 c4 1c             	add    esp,0x1c
c0012355:	5b                   	pop    ebx
c0012356:	5e                   	pop    esi
c0012357:	5f                   	pop    edi
c0012358:	5d                   	pop    ebp
c0012359:	e9 42 8c 00 00       	jmp    c001afa0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001235e:	83 c4 1c             	add    esp,0x1c
c0012361:	5b                   	pop    ebx
c0012362:	5e                   	pop    esi
c0012363:	5f                   	pop    edi
c0012364:	5d                   	pop    ebp
c0012365:	c3                   	ret    

c0012366 <VgaText::getCursorX()>:
c0012366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001236a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001236d:	c3                   	ret    

c001236e <VgaText::getCursorY()>:
c001236e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012372:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012375:	c3                   	ret    

c0012376 <VgaText::setCursor(int, int)>:
c0012376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001237a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001237e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0012381:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012385:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012388:	e9 95 fd ff ff       	jmp    c0012122 <VgaText::updateCursor()>

c001238d <setActiveTerminal(VgaText*)>:
c001238d:	53                   	push   ebx
c001238e:	83 ec 08             	sub    esp,0x8
c0012391:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012395:	85 db                	test   ebx,ebx
c0012397:	75 11                	jne    c00123aa <setActiveTerminal(VgaText*)+0x1d>
c0012399:	c7 44 24 10 ba 42 02 c0 	mov    DWORD PTR [esp+0x10],0xc00242ba
c00123a1:	83 c4 08             	add    esp,0x8
c00123a4:	5b                   	pop    ebx
c00123a5:	e9 80 da ff ff       	jmp    c000fe2a <KePanic(char const*)>
c00123aa:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c00123af:	85 c0                	test   eax,eax
c00123b1:	74 0c                	je     c00123bf <setActiveTerminal(VgaText*)+0x32>
c00123b3:	83 ec 0c             	sub    esp,0xc
c00123b6:	50                   	push   eax
c00123b7:	e8 66 fd ff ff       	call   c0012122 <VgaText::updateCursor()>
c00123bc:	83 c4 10             	add    esp,0x10
c00123bf:	50                   	push   eax
c00123c0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00123c3:	89 1d b4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1b4,ebx
c00123c9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00123cc:	53                   	push   ebx
c00123cd:	e8 a4 ff ff ff       	call   c0012376 <VgaText::setCursor(int, int)>
c00123d2:	83 c4 18             	add    esp,0x18
c00123d5:	5b                   	pop    ebx
c00123d6:	c3                   	ret    
c00123d7:	90                   	nop

c00123d8 <VgaText::clearScreen()>:
c00123d8:	57                   	push   edi
c00123d9:	56                   	push   esi
c00123da:	31 f6                	xor    esi,esi
c00123dc:	53                   	push   ebx
c00123dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123e1:	52                   	push   edx
c00123e2:	6a 00                	push   0x0
c00123e4:	6a 00                	push   0x0
c00123e6:	53                   	push   ebx
c00123e7:	e8 8a ff ff ff       	call   c0012376 <VgaText::setCursor(int, int)>
c00123ec:	83 c4 10             	add    esp,0x10
c00123ef:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00123f6:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00123f9:	7e 20                	jle    c001241b <VgaText::clearScreen()+0x43>
c00123fb:	31 ff                	xor    edi,edi
c00123fd:	50                   	push   eax
c00123fe:	50                   	push   eax
c00123ff:	56                   	push   esi
c0012400:	57                   	push   edi
c0012401:	47                   	inc    edi
c0012402:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012405:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012408:	6a 20                	push   0x20
c001240a:	53                   	push   ebx
c001240b:	e8 aa fe ff ff       	call   c00122ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012410:	83 c4 20             	add    esp,0x20
c0012413:	83 ff 50             	cmp    edi,0x50
c0012416:	75 e5                	jne    c00123fd <VgaText::clearScreen()+0x25>
c0012418:	46                   	inc    esi
c0012419:	eb db                	jmp    c00123f6 <VgaText::clearScreen()+0x1e>
c001241b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012422:	5b                   	pop    ebx
c0012423:	5e                   	pop    esi
c0012424:	5f                   	pop    edi
c0012425:	c3                   	ret    

c0012426 <VgaText::setCursorX(int)>:
c0012426:	83 ec 10             	sub    esp,0x10
c0012429:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001242d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012434:	50                   	push   eax
c0012435:	e8 3c ff ff ff       	call   c0012376 <VgaText::setCursor(int, int)>
c001243a:	83 c4 1c             	add    esp,0x1c
c001243d:	c3                   	ret    

c001243e <VgaText::setCursorY(int)>:
c001243e:	83 ec 10             	sub    esp,0x10
c0012441:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012445:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012449:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001244c:	50                   	push   eax
c001244d:	e8 24 ff ff ff       	call   c0012376 <VgaText::setCursor(int, int)>
c0012452:	83 c4 1c             	add    esp,0x1c
c0012455:	c3                   	ret    

c0012456 <VgaText::incrementCursor(bool)>:
c0012456:	56                   	push   esi
c0012457:	53                   	push   ebx
c0012458:	51                   	push   ecx
c0012459:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001245d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012461:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012464:	40                   	inc    eax
c0012465:	83 f8 50             	cmp    eax,0x50
c0012468:	74 05                	je     c001246f <VgaText::incrementCursor(bool)+0x19>
c001246a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001246d:	eb 24                	jmp    c0012493 <VgaText::incrementCursor(bool)+0x3d>
c001246f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012476:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012479:	8d 50 01             	lea    edx,[eax+0x1]
c001247c:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001247f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012482:	75 0f                	jne    c0012493 <VgaText::incrementCursor(bool)+0x3d>
c0012484:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012487:	83 ec 0c             	sub    esp,0xc
c001248a:	53                   	push   ebx
c001248b:	e8 88 fd ff ff       	call   c0012218 <VgaText::scrollScreen()>
c0012490:	83 c4 10             	add    esp,0x10
c0012493:	89 f0                	mov    eax,esi
c0012495:	84 c0                	test   al,al
c0012497:	74 0c                	je     c00124a5 <VgaText::incrementCursor(bool)+0x4f>
c0012499:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001249d:	5a                   	pop    edx
c001249e:	5b                   	pop    ebx
c001249f:	5e                   	pop    esi
c00124a0:	e9 7d fc ff ff       	jmp    c0012122 <VgaText::updateCursor()>
c00124a5:	58                   	pop    eax
c00124a6:	5b                   	pop    ebx
c00124a7:	5e                   	pop    esi
c00124a8:	c3                   	ret    
c00124a9:	90                   	nop

c00124aa <VgaText::decrementCursor(bool)>:
c00124aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00124ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00124b2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00124b5:	85 c0                	test   eax,eax
c00124b7:	74 04                	je     c00124bd <VgaText::decrementCursor(bool)+0x13>
c00124b9:	48                   	dec    eax
c00124ba:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00124bd:	84 c9                	test   cl,cl
c00124bf:	74 09                	je     c00124ca <VgaText::decrementCursor(bool)+0x20>
c00124c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00124c5:	e9 58 fc ff ff       	jmp    c0012122 <VgaText::updateCursor()>
c00124ca:	c3                   	ret    
c00124cb:	90                   	nop

c00124cc <VgaText::putchar(char, VgaColour, VgaColour)>:
c00124cc:	53                   	push   ebx
c00124cd:	83 ec 08             	sub    esp,0x8
c00124d0:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00124d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00124dd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00124e1:	83 f8 07             	cmp    eax,0x7
c00124e4:	75 21                	jne    c0012507 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00124e6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00124ee:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00124f6:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00124fe:	83 c4 08             	add    esp,0x8
c0012501:	5b                   	pop    ebx
c0012502:	e9 c8 64 ff ff       	jmp    c00089cf <KeBeep(int, int, bool)>
c0012507:	83 f8 0d             	cmp    eax,0xd
c001250a:	75 09                	jne    c0012515 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001250c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012513:	eb 2d                	jmp    c0012542 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012515:	83 f8 0a             	cmp    eax,0xa
c0012518:	75 31                	jne    c001254b <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001251a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012521:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012524:	8d 50 01             	lea    edx,[eax+0x1]
c0012527:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001252a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001252d:	75 0f                	jne    c001253e <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c001252f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012532:	83 ec 0c             	sub    esp,0xc
c0012535:	53                   	push   ebx
c0012536:	e8 dd fc ff ff       	call   c0012218 <VgaText::scrollScreen()>
c001253b:	83 c4 10             	add    esp,0x10
c001253e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012542:	83 c4 08             	add    esp,0x8
c0012545:	5b                   	pop    ebx
c0012546:	e9 d7 fb ff ff       	jmp    c0012122 <VgaText::updateCursor()>
c001254b:	83 f8 08             	cmp    eax,0x8
c001254e:	75 25                	jne    c0012575 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012550:	50                   	push   eax
c0012551:	50                   	push   eax
c0012552:	6a 01                	push   0x1
c0012554:	53                   	push   ebx
c0012555:	e8 50 ff ff ff       	call   c00124aa <VgaText::decrementCursor(bool)>
c001255a:	5a                   	pop    edx
c001255b:	59                   	pop    ecx
c001255c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001255f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012562:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012565:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012568:	6a 20                	push   0x20
c001256a:	53                   	push   ebx
c001256b:	e8 4a fd ff ff       	call   c00122ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012570:	83 c4 28             	add    esp,0x28
c0012573:	5b                   	pop    ebx
c0012574:	c3                   	ret    
c0012575:	83 ec 08             	sub    esp,0x8
c0012578:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001257b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001257e:	51                   	push   ecx
c001257f:	52                   	push   edx
c0012580:	50                   	push   eax
c0012581:	53                   	push   ebx
c0012582:	e8 33 fd ff ff       	call   c00122ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012587:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001258b:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012593:	83 c4 28             	add    esp,0x28
c0012596:	5b                   	pop    ebx
c0012597:	e9 ba fe ff ff       	jmp    c0012456 <VgaText::incrementCursor(bool)>

c001259c <VgaText::putchar(char)>:
c001259c:	57                   	push   edi
c001259d:	56                   	push   esi
c001259e:	53                   	push   ebx
c001259f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00125a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125a7:	0f be c2             	movsx  eax,dl
c00125aa:	83 f8 5b             	cmp    eax,0x5b
c00125ad:	75 18                	jne    c00125c7 <VgaText::putchar(char)+0x2b>
c00125af:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00125b3:	74 20                	je     c00125d5 <VgaText::putchar(char)+0x39>
c00125b5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00125bb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00125c2:	e9 b8 00 00 00       	jmp    c001267f <VgaText::putchar(char)+0xe3>
c00125c7:	83 f8 1b             	cmp    eax,0x1b
c00125ca:	75 09                	jne    c00125d5 <VgaText::putchar(char)+0x39>
c00125cc:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00125d0:	e9 aa 00 00 00       	jmp    c001267f <VgaText::putchar(char)+0xe3>
c00125d5:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00125d9:	89 f9                	mov    ecx,edi
c00125db:	84 c9                	test   cl,cl
c00125dd:	0f 84 8c 00 00 00    	je     c001266f <VgaText::putchar(char)+0xd3>
c00125e3:	8d 4a c0             	lea    ecx,[edx-0x40]
c00125e6:	80 f9 3e             	cmp    cl,0x3e
c00125e9:	77 70                	ja     c001265b <VgaText::putchar(char)+0xbf>
c00125eb:	83 f8 6d             	cmp    eax,0x6d
c00125ee:	75 3f                	jne    c001262f <VgaText::putchar(char)+0x93>
c00125f0:	31 f6                	xor    esi,esi
c00125f2:	31 d2                	xor    edx,edx
c00125f4:	31 c0                	xor    eax,eax
c00125f6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00125f9:	7e 25                	jle    c0012620 <VgaText::putchar(char)+0x84>
c00125fb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012600:	83 fa 3b             	cmp    edx,0x3b
c0012603:	75 0f                	jne    c0012614 <VgaText::putchar(char)+0x78>
c0012605:	50                   	push   eax
c0012606:	53                   	push   ebx
c0012607:	e8 2c fb ff ff       	call   c0012138 <VgaText::doANSI_SGR(int)>
c001260c:	31 d2                	xor    edx,edx
c001260e:	59                   	pop    ecx
c001260f:	58                   	pop    eax
c0012610:	31 c0                	xor    eax,eax
c0012612:	eb 09                	jmp    c001261d <VgaText::putchar(char)+0x81>
c0012614:	6b c0 0a             	imul   eax,eax,0xa
c0012617:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001261b:	89 fa                	mov    edx,edi
c001261d:	46                   	inc    esi
c001261e:	eb d6                	jmp    c00125f6 <VgaText::putchar(char)+0x5a>
c0012620:	84 d2                	test   dl,dl
c0012622:	74 2f                	je     c0012653 <VgaText::putchar(char)+0xb7>
c0012624:	50                   	push   eax
c0012625:	53                   	push   ebx
c0012626:	e8 0d fb ff ff       	call   c0012138 <VgaText::doANSI_SGR(int)>
c001262b:	58                   	pop    eax
c001262c:	5a                   	pop    edx
c001262d:	eb 24                	jmp    c0012653 <VgaText::putchar(char)+0xb7>
c001262f:	83 f8 4a             	cmp    eax,0x4a
c0012632:	75 1f                	jne    c0012653 <VgaText::putchar(char)+0xb7>
c0012634:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012638:	75 19                	jne    c0012653 <VgaText::putchar(char)+0xb7>
c001263a:	83 ec 0c             	sub    esp,0xc
c001263d:	53                   	push   ebx
c001263e:	e8 95 fd ff ff       	call   c00123d8 <VgaText::clearScreen()>
c0012643:	83 c4 0c             	add    esp,0xc
c0012646:	6a 00                	push   0x0
c0012648:	6a 00                	push   0x0
c001264a:	53                   	push   ebx
c001264b:	e8 26 fd ff ff       	call   c0012376 <VgaText::setCursor(int, int)>
c0012650:	83 c4 10             	add    esp,0x10
c0012653:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012659:	eb 24                	jmp    c001267f <VgaText::putchar(char)+0xe3>
c001265b:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001265e:	83 f8 0e             	cmp    eax,0xe
c0012661:	7f 1c                	jg     c001267f <VgaText::putchar(char)+0xe3>
c0012663:	8d 48 01             	lea    ecx,[eax+0x1]
c0012666:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0012669:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c001266d:	eb 10                	jmp    c001267f <VgaText::putchar(char)+0xe3>
c001266f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012672:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012675:	50                   	push   eax
c0012676:	53                   	push   ebx
c0012677:	e8 50 fe ff ff       	call   c00124cc <VgaText::putchar(char, VgaColour, VgaColour)>
c001267c:	83 c4 10             	add    esp,0x10
c001267f:	5b                   	pop    ebx
c0012680:	5e                   	pop    esi
c0012681:	5f                   	pop    edi
c0012682:	c3                   	ret    
c0012683:	90                   	nop

c0012684 <VgaText::putx(unsigned int)>:
c0012684:	57                   	push   edi
c0012685:	b9 11 00 00 00       	mov    ecx,0x11
c001268a:	56                   	push   esi
c001268b:	be c8 42 02 c0       	mov    esi,0xc00242c8
c0012690:	53                   	push   ebx
c0012691:	83 ec 20             	sub    esp,0x20
c0012694:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012698:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001269c:	fc                   	cld    
c001269d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001269f:	be 08 00 00 00       	mov    esi,0x8
c00126a4:	50                   	push   eax
c00126a5:	50                   	push   eax
c00126a6:	89 d8                	mov    eax,ebx
c00126a8:	c1 e8 1c             	shr    eax,0x1c
c00126ab:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00126b0:	c1 e3 04             	shl    ebx,0x4
c00126b3:	50                   	push   eax
c00126b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126b8:	e8 df fe ff ff       	call   c001259c <VgaText::putchar(char)>
c00126bd:	83 c4 10             	add    esp,0x10
c00126c0:	4e                   	dec    esi
c00126c1:	75 e1                	jne    c00126a4 <VgaText::putx(unsigned int)+0x20>
c00126c3:	83 c4 20             	add    esp,0x20
c00126c6:	5b                   	pop    ebx
c00126c7:	5e                   	pop    esi
c00126c8:	5f                   	pop    edi
c00126c9:	c3                   	ret    

c00126ca <VgaText::puts(char const*)>:
c00126ca:	53                   	push   ebx
c00126cb:	83 ec 08             	sub    esp,0x8
c00126ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00126d2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00126d5:	85 c0                	test   eax,eax
c00126d7:	74 12                	je     c00126eb <VgaText::puts(char const*)+0x21>
c00126d9:	51                   	push   ecx
c00126da:	43                   	inc    ebx
c00126db:	51                   	push   ecx
c00126dc:	50                   	push   eax
c00126dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126e1:	e8 b6 fe ff ff       	call   c001259c <VgaText::putchar(char)>
c00126e6:	83 c4 10             	add    esp,0x10
c00126e9:	eb e7                	jmp    c00126d2 <VgaText::puts(char const*)+0x8>
c00126eb:	83 c4 08             	add    esp,0x8
c00126ee:	5b                   	pop    ebx
c00126ef:	c3                   	ret    

c00126f0 <VgaText::write(unsigned long long, void*, int*)>:
c00126f0:	55                   	push   ebp
c00126f1:	57                   	push   edi
c00126f2:	56                   	push   esi
c00126f3:	53                   	push   ebx
c00126f4:	83 ec 0c             	sub    esp,0xc
c00126f7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126fb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00126ff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012703:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001270a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001270d:	39 eb                	cmp    ebx,ebp
c001270f:	74 13                	je     c0012724 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012711:	50                   	push   eax
c0012712:	43                   	inc    ebx
c0012713:	50                   	push   eax
c0012714:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012718:	50                   	push   eax
c0012719:	56                   	push   esi
c001271a:	e8 7d fe ff ff       	call   c001259c <VgaText::putchar(char)>
c001271f:	83 c4 10             	add    esp,0x10
c0012722:	eb e9                	jmp    c001270d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012724:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001272b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001272f:	89 38                	mov    DWORD PTR [eax],edi
c0012731:	83 c4 0c             	add    esp,0xc
c0012734:	31 c0                	xor    eax,eax
c0012736:	5b                   	pop    ebx
c0012737:	5e                   	pop    esi
c0012738:	5f                   	pop    edi
c0012739:	5d                   	pop    ebp
c001273a:	c3                   	ret    
c001273b:	90                   	nop

c001273c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001273c:	55                   	push   ebp
c001273d:	57                   	push   edi
c001273e:	56                   	push   esi
c001273f:	53                   	push   ebx
c0012740:	83 ec 1c             	sub    esp,0x1c
c0012743:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012747:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001274b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001274f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012753:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012756:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001275a:	85 db                	test   ebx,ebx
c001275c:	75 14                	jne    c0012772 <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c001275e:	c7 44 24 30 d9 42 02 c0 	mov    DWORD PTR [esp+0x30],0xc00242d9
c0012766:	83 c4 1c             	add    esp,0x1c
c0012769:	5b                   	pop    ebx
c001276a:	5e                   	pop    esi
c001276b:	5f                   	pop    edi
c001276c:	5d                   	pop    ebp
c001276d:	e9 b8 d6 ff ff       	jmp    c000fe2a <KePanic(char const*)>
c0012772:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0012779:	50                   	push   eax
c001277a:	50                   	push   eax
c001277b:	89 e8                	mov    eax,ebp
c001277d:	0f b6 c0             	movzx  eax,al
c0012780:	50                   	push   eax
c0012781:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012786:	50                   	push   eax
c0012787:	e8 7a fa ff ff       	call   c0012206 <VgaText::combineColours(unsigned char, unsigned char)>
c001278c:	83 c4 10             	add    esp,0x10
c001278f:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012793:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012796:	0f b6 c0             	movzx  eax,al
c0012799:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001279d:	0f b7 c9             	movzx  ecx,cx
c00127a0:	01 c9                	add    ecx,ecx
c00127a2:	01 cb                	add    ebx,ecx
c00127a4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00127a7:	85 c0                	test   eax,eax
c00127a9:	0f 84 ef 00 00 00    	je     c001289e <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00127af:	83 f8 0d             	cmp    eax,0xd
c00127b2:	75 0c                	jne    c00127c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00127b4:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00127bb:	e9 d8 00 00 00       	jmp    c0012898 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00127c0:	83 f8 0a             	cmp    eax,0xa
c00127c3:	75 44                	jne    c0012809 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c00127c5:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00127cc:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00127cf:	8d 48 01             	lea    ecx,[eax+0x1]
c00127d2:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c00127d5:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c00127d8:	75 0f                	jne    c00127e9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c00127da:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c00127dd:	83 ec 0c             	sub    esp,0xc
c00127e0:	57                   	push   edi
c00127e1:	e8 32 fa ff ff       	call   c0012218 <VgaText::scrollScreen()>
c00127e6:	83 c4 10             	add    esp,0x10
c00127e9:	83 ec 0c             	sub    esp,0xc
c00127ec:	57                   	push   edi
c00127ed:	e8 30 f9 ff ff       	call   c0012122 <VgaText::updateCursor()>
c00127f2:	83 c4 10             	add    esp,0x10
c00127f5:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00127f9:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c00127fc:	0f b7 db             	movzx  ebx,bx
c00127ff:	01 db                	add    ebx,ebx
c0012801:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012804:	e9 8f 00 00 00       	jmp    c0012898 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012809:	83 f8 08             	cmp    eax,0x8
c001280c:	75 34                	jne    c0012842 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c001280e:	51                   	push   ecx
c001280f:	51                   	push   ecx
c0012810:	6a 01                	push   0x1
c0012812:	57                   	push   edi
c0012813:	e8 92 fc ff ff       	call   c00124aa <VgaText::decrementCursor(bool)>
c0012818:	5b                   	pop    ebx
c0012819:	58                   	pop    eax
c001281a:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001281d:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012820:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012823:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012826:	6a 20                	push   0x20
c0012828:	57                   	push   edi
c0012829:	e8 8c fa ff ff       	call   c00122ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001282e:	83 c4 20             	add    esp,0x20
c0012831:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012835:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012838:	0f b7 db             	movzx  ebx,bx
c001283b:	01 db                	add    ebx,ebx
c001283d:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012840:	eb 56                	jmp    c0012898 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012842:	52                   	push   edx
c0012843:	52                   	push   edx
c0012844:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012848:	50                   	push   eax
c0012849:	e8 5c fa ff ff       	call   c00122aa <VgaText::combineCharAndColour(char, unsigned char)>
c001284e:	83 c4 10             	add    esp,0x10
c0012851:	66 89 03             	mov    WORD PTR [ebx],ax
c0012854:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c001285a:	75 1a                	jne    c0012876 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c001285c:	83 ec 0c             	sub    esp,0xc
c001285f:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012862:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012865:	55                   	push   ebp
c0012866:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001286a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001286d:	50                   	push   eax
c001286e:	e8 2d 87 00 00       	call   c001afa0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012873:	83 c4 20             	add    esp,0x20
c0012876:	50                   	push   eax
c0012877:	83 c3 02             	add    ebx,0x2
c001287a:	50                   	push   eax
c001287b:	6a 00                	push   0x0
c001287d:	57                   	push   edi
c001287e:	e8 d3 fb ff ff       	call   c0012456 <VgaText::incrementCursor(bool)>
c0012883:	83 c4 10             	add    esp,0x10
c0012886:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c001288a:	75 0c                	jne    c0012898 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001288c:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012890:	0f b7 db             	movzx  ebx,bx
c0012893:	01 db                	add    ebx,ebx
c0012895:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012898:	46                   	inc    esi
c0012899:	e9 06 ff ff ff       	jmp    c00127a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c001289e:	83 ec 0c             	sub    esp,0xc
c00128a1:	57                   	push   edi
c00128a2:	e8 7b f8 ff ff       	call   c0012122 <VgaText::updateCursor()>
c00128a7:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c00128ae:	83 c4 2c             	add    esp,0x2c
c00128b1:	5b                   	pop    ebx
c00128b2:	5e                   	pop    esi
c00128b3:	5f                   	pop    edi
c00128b4:	5d                   	pop    ebp
c00128b5:	c3                   	ret    

c00128b6 <VgaText::VgaText(char const*)>:
c00128b6:	56                   	push   esi
c00128b7:	53                   	push   ebx
c00128b8:	83 ec 04             	sub    esp,0x4
c00128bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128bf:	83 ec 08             	sub    esp,0x8
c00128c2:	6a 00                	push   0x0
c00128c4:	50                   	push   eax
c00128c5:	e8 ba 05 00 00       	call   c0012e84 <UnixFile::UnixFile(int)>
c00128ca:	83 c4 10             	add    esp,0x10
c00128cd:	ba 10 43 02 c0       	mov    edx,0xc0024310
c00128d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128d6:	89 10                	mov    DWORD PTR [eax],edx
c00128d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128dc:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00128e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128e7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00128ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128f2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00128f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128fa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00128fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012902:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001290d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012918:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001291f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012923:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001292a:	83 ec 0c             	sub    esp,0xc
c001292d:	68 e9 42 02 c0       	push   0xc00242e9
c0012932:	e8 17 46 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012937:	83 c4 10             	add    esp,0x10
c001293a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001293e:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012945:	83 ec 0c             	sub    esp,0xc
c0012948:	6a 01                	push   0x1
c001294a:	e8 96 09 00 00       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c001294f:	83 c4 10             	add    esp,0x10
c0012952:	89 c2                	mov    edx,eax
c0012954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012958:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001295b:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c0012961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012965:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012968:	89 c6                	mov    esi,eax
c001296a:	e8 b5 d6 ff ff       	call   c0010024 <Phys::allocatePage()>
c001296f:	68 05 0c 00 00       	push   0xc05
c0012974:	56                   	push   esi
c0012975:	50                   	push   eax
c0012976:	53                   	push   ebx
c0012977:	e8 42 10 00 00       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c001297c:	83 c4 10             	add    esp,0x10
c001297f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012983:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012986:	83 ec 04             	sub    esp,0x4
c0012989:	68 a0 0f 00 00       	push   0xfa0
c001298e:	6a 00                	push   0x0
c0012990:	50                   	push   eax
c0012991:	e8 5a db fe ff       	call   c00004f0 <memset>
c0012996:	83 c4 10             	add    esp,0x10
c0012999:	83 ec 04             	sub    esp,0x4
c001299c:	6a 00                	push   0x0
c001299e:	6a 07                	push   0x7
c00129a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129a4:	e8 23 f8 ff ff       	call   c00121cc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00129a9:	83 c4 10             	add    esp,0x10
c00129ac:	83 ec 04             	sub    esp,0x4
c00129af:	6a 00                	push   0x0
c00129b1:	6a 00                	push   0x0
c00129b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129b7:	e8 ba f9 ff ff       	call   c0012376 <VgaText::setCursor(int, int)>
c00129bc:	83 c4 10             	add    esp,0x10
c00129bf:	83 ec 0c             	sub    esp,0xc
c00129c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129c6:	e8 0d fa ff ff       	call   c00123d8 <VgaText::clearScreen()>
c00129cb:	83 c4 10             	add    esp,0x10
c00129ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129d2:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00129d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129da:	05 82 00 00 00       	add    eax,0x82
c00129df:	83 ec 04             	sub    esp,0x4
c00129e2:	68 80 00 00 00       	push   0x80
c00129e7:	6a 00                	push   0x0
c00129e9:	50                   	push   eax
c00129ea:	e8 01 db fe ff       	call   c00004f0 <memset>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129f6:	05 02 01 00 00       	add    eax,0x102
c00129fb:	83 ec 04             	sub    esp,0x4
c00129fe:	68 80 00 00 00       	push   0x80
c0012a03:	6a 00                	push   0x0
c0012a05:	50                   	push   eax
c0012a06:	e8 e5 da fe ff       	call   c00004f0 <memset>
c0012a0b:	83 c4 10             	add    esp,0x10
c0012a0e:	90                   	nop
c0012a0f:	83 c4 04             	add    esp,0x4
c0012a12:	5b                   	pop    ebx
c0012a13:	5e                   	pop    esi
c0012a14:	c3                   	ret    
c0012a15:	90                   	nop

c0012a16 <VgaText::receiveKey(unsigned char)>:
c0012a16:	55                   	push   ebp
c0012a17:	57                   	push   edi
c0012a18:	56                   	push   esi
c0012a19:	53                   	push   ebx
c0012a1a:	83 ec 2c             	sub    esp,0x2c
c0012a1d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012a21:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012a25:	89 fd                	mov    ebp,edi
c0012a27:	81 e5 ff 00 00 00    	and    ebp,0xff
c0012a2d:	0f 84 48 01 00 00    	je     c0012b7b <VgaText::receiveKey(unsigned char)+0x165>
c0012a33:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012a39:	83 fd 08             	cmp    ebp,0x8
c0012a3c:	75 6a                	jne    c0012aa8 <VgaText::receiveKey(unsigned char)+0x92>
c0012a3e:	83 ec 0c             	sub    esp,0xc
c0012a41:	56                   	push   esi
c0012a42:	e8 39 db fe ff       	call   c0000580 <strlen>
c0012a47:	83 c4 10             	add    esp,0x10
c0012a4a:	85 c0                	test   eax,eax
c0012a4c:	0f 84 ef 00 00 00    	je     c0012b41 <VgaText::receiveKey(unsigned char)+0x12b>
c0012a52:	50                   	push   eax
c0012a53:	50                   	push   eax
c0012a54:	6a 08                	push   0x8
c0012a56:	53                   	push   ebx
c0012a57:	e8 40 fb ff ff       	call   c001259c <VgaText::putchar(char)>
c0012a5c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a5f:	e8 1c db fe ff       	call   c0000580 <strlen>
c0012a64:	83 c4 10             	add    esp,0x10
c0012a67:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012a6f:	83 fa 1f             	cmp    edx,0x1f
c0012a72:	89 d0                	mov    eax,edx
c0012a74:	7f 1c                	jg     c0012a92 <VgaText::receiveKey(unsigned char)+0x7c>
c0012a76:	83 e8 08             	sub    eax,0x8
c0012a79:	3c 02                	cmp    al,0x2
c0012a7b:	76 15                	jbe    c0012a92 <VgaText::receiveKey(unsigned char)+0x7c>
c0012a7d:	83 fa 0d             	cmp    edx,0xd
c0012a80:	74 10                	je     c0012a92 <VgaText::receiveKey(unsigned char)+0x7c>
c0012a82:	57                   	push   edi
c0012a83:	57                   	push   edi
c0012a84:	68 fc 42 02 c0       	push   0xc00242fc
c0012a89:	53                   	push   ebx
c0012a8a:	e8 3b fc ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0012a8f:	83 c4 10             	add    esp,0x10
c0012a92:	83 ec 0c             	sub    esp,0xc
c0012a95:	56                   	push   esi
c0012a96:	e8 e5 da fe ff       	call   c0000580 <strlen>
c0012a9b:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012aa3:	e9 96 00 00 00       	jmp    c0012b3e <VgaText::receiveKey(unsigned char)+0x128>
c0012aa8:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012aae:	83 ec 0c             	sub    esp,0xc
c0012ab1:	50                   	push   eax
c0012ab2:	e8 c9 da fe ff       	call   c0000580 <strlen>
c0012ab7:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012abe:	e8 bd da fe ff       	call   c0000580 <strlen>
c0012ac3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ac7:	83 c4 10             	add    esp,0x10
c0012aca:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012ace:	3d 80 00 00 00       	cmp    eax,0x80
c0012ad3:	0f 87 a2 00 00 00    	ja     c0012b7b <VgaText::receiveKey(unsigned char)+0x165>
c0012ad9:	8d 47 ff             	lea    eax,[edi-0x1]
c0012adc:	3c 1e                	cmp    al,0x1e
c0012ade:	77 35                	ja     c0012b15 <VgaText::receiveKey(unsigned char)+0xff>
c0012ae0:	8d 47 f7             	lea    eax,[edi-0x9]
c0012ae3:	3c 01                	cmp    al,0x1
c0012ae5:	76 2e                	jbe    c0012b15 <VgaText::receiveKey(unsigned char)+0xff>
c0012ae7:	83 fd 0d             	cmp    ebp,0xd
c0012aea:	74 29                	je     c0012b15 <VgaText::receiveKey(unsigned char)+0xff>
c0012aec:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012aef:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012af2:	68 02 43 02 c0       	push   0xc0024302
c0012af7:	53                   	push   ebx
c0012af8:	e8 3f fc ff ff       	call   c001273c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012afd:	8d 47 40             	lea    eax,[edi+0x40]
c0012b00:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012b03:	0f b6 c0             	movzx  eax,al
c0012b06:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012b09:	50                   	push   eax
c0012b0a:	53                   	push   ebx
c0012b0b:	e8 bc f9 ff ff       	call   c00124cc <VgaText::putchar(char, VgaColour, VgaColour)>
c0012b10:	83 c4 20             	add    esp,0x20
c0012b13:	eb 11                	jmp    c0012b26 <VgaText::receiveKey(unsigned char)+0x110>
c0012b15:	51                   	push   ecx
c0012b16:	89 f8                	mov    eax,edi
c0012b18:	51                   	push   ecx
c0012b19:	0f be c0             	movsx  eax,al
c0012b1c:	50                   	push   eax
c0012b1d:	53                   	push   ebx
c0012b1e:	e8 79 fa ff ff       	call   c001259c <VgaText::putchar(char)>
c0012b23:	83 c4 10             	add    esp,0x10
c0012b26:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012b2b:	89 f8                	mov    eax,edi
c0012b2d:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012b31:	52                   	push   edx
c0012b32:	52                   	push   edx
c0012b33:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012b37:	50                   	push   eax
c0012b38:	56                   	push   esi
c0012b39:	e8 32 dd fe ff       	call   c0000870 <strcat>
c0012b3e:	83 c4 10             	add    esp,0x10
c0012b41:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0012b48:	75 0f                	jne    c0012b59 <VgaText::receiveKey(unsigned char)+0x143>
c0012b4a:	83 fd 1c             	cmp    ebp,0x1c
c0012b4d:	77 2c                	ja     c0012b7b <VgaText::receiveKey(unsigned char)+0x165>
c0012b4f:	b8 08 04 00 10       	mov    eax,0x10000408
c0012b54:	0f a3 e8             	bt     eax,ebp
c0012b57:	73 22                	jae    c0012b7b <VgaText::receiveKey(unsigned char)+0x165>
c0012b59:	50                   	push   eax
c0012b5a:	81 c3 02 01 00 00    	add    ebx,0x102
c0012b60:	50                   	push   eax
c0012b61:	56                   	push   esi
c0012b62:	53                   	push   ebx
c0012b63:	e8 08 dd fe ff       	call   c0000870 <strcat>
c0012b68:	83 c4 0c             	add    esp,0xc
c0012b6b:	68 80 00 00 00       	push   0x80
c0012b70:	6a 00                	push   0x0
c0012b72:	56                   	push   esi
c0012b73:	e8 78 d9 fe ff       	call   c00004f0 <memset>
c0012b78:	83 c4 10             	add    esp,0x10
c0012b7b:	83 c4 2c             	add    esp,0x2c
c0012b7e:	5b                   	pop    ebx
c0012b7f:	5e                   	pop    esi
c0012b80:	5f                   	pop    edi
c0012b81:	5d                   	pop    ebp
c0012b82:	c3                   	ret    
c0012b83:	90                   	nop

c0012b84 <VgaText::doUpdate()>:
c0012b84:	c3                   	ret    
c0012b85:	66 90                	xchg   ax,ax
c0012b87:	90                   	nop

c0012b88 <TSS::TSS()>:
c0012b88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012b93:	90                   	nop
c0012b94:	c3                   	ret    
c0012b95:	90                   	nop
c0012b96:	66 90                	xchg   ax,ax

c0012b98 <TSS::setESP(unsigned long)>:
c0012b98:	55                   	push   ebp
c0012b99:	89 e5                	mov    ebp,esp
c0012b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ba1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012ba4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ba7:	90                   	nop
c0012ba8:	5d                   	pop    ebp
c0012ba9:	c3                   	ret    
c0012baa:	66 90                	xchg   ax,ax

c0012bac <TSS::flush()>:
c0012bac:	55                   	push   ebp
c0012bad:	89 e5                	mov    ebp,esp
c0012baf:	83 ec 10             	sub    esp,0x10
c0012bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bb7:	83 c8 03             	or     eax,0x3
c0012bba:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012bbe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012bc2:	66 89 d0             	mov    ax,dx
c0012bc5:	0f 00 d8             	ltr    ax
c0012bc8:	90                   	nop
c0012bc9:	c9                   	leave  
c0012bca:	c3                   	ret    
c0012bcb:	90                   	nop

c0012bcc <TSS::setup(unsigned long, unsigned long)>:
c0012bcc:	55                   	push   ebp
c0012bcd:	89 e5                	mov    ebp,esp
c0012bcf:	83 ec 18             	sub    esp,0x18
c0012bd2:	83 ec 0c             	sub    esp,0xc
c0012bd5:	6a 68                	push   0x68
c0012bd7:	e8 08 cf ff ff       	call   c000fae4 <malloc>
c0012bdc:	83 c4 10             	add    esp,0x10
c0012bdf:	89 c2                	mov    edx,eax
c0012be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012be7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bed:	83 ec 08             	sub    esp,0x8
c0012bf0:	50                   	push   eax
c0012bf1:	68 24 43 02 c0       	push   0xc0024324
c0012bf6:	e8 53 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012bfb:	83 c4 10             	add    esp,0x10
c0012bfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c04:	83 ec 04             	sub    esp,0x4
c0012c07:	6a 68                	push   0x68
c0012c09:	6a 00                	push   0x0
c0012c0b:	50                   	push   eax
c0012c0c:	e8 df d8 fe ff       	call   c00004f0 <memset>
c0012c11:	83 c4 10             	add    esp,0x10
c0012c14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c1a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012c20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c26:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012c2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c32:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012c35:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c3e:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012c44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c4a:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012c50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c56:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012c5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c62:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c6e:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c7a:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012c80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c86:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012c89:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012c8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c92:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012c95:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c9e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012ca5:	83 ec 0c             	sub    esp,0xc
c0012ca8:	68 3b 43 02 c0       	push   0xc002433b
c0012cad:	e8 9c 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012cb2:	83 c4 10             	add    esp,0x10
c0012cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cbb:	0f 20 da             	mov    edx,cr3
c0012cbe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012cc1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012cc4:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012cc7:	83 ec 0c             	sub    esp,0xc
c0012cca:	68 3e 43 02 c0       	push   0xc002433e
c0012ccf:	e8 7a 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012cd4:	83 c4 10             	add    esp,0x10
c0012cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cdd:	83 ec 08             	sub    esp,0x8
c0012ce0:	50                   	push   eax
c0012ce1:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012ce4:	50                   	push   eax
c0012ce5:	e8 48 bf ff ff       	call   c000ec32 <GDTEntry::setBase(unsigned int)>
c0012cea:	83 c4 10             	add    esp,0x10
c0012ced:	83 ec 08             	sub    esp,0x8
c0012cf0:	6a 68                	push   0x68
c0012cf2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012cf5:	50                   	push   eax
c0012cf6:	e8 53 bf ff ff       	call   c000ec4e <GDTEntry::setLimit(unsigned int)>
c0012cfb:	83 c4 10             	add    esp,0x10
c0012cfe:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012d02:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012d05:	83 e0 0f             	and    eax,0xf
c0012d08:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012d0e:	83 c8 40             	or     eax,0x40
c0012d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012d14:	83 ec 0c             	sub    esp,0xc
c0012d17:	68 41 43 02 c0       	push   0xc0024341
c0012d1c:	e8 2d 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d21:	83 c4 10             	add    esp,0x10
c0012d24:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012d29:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012d2f:	83 ec 08             	sub    esp,0x8
c0012d32:	50                   	push   eax
c0012d33:	68 44 43 02 c0       	push   0xc0024344
c0012d38:	e8 11 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d3d:	83 c4 10             	add    esp,0x10
c0012d40:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012d45:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012d4b:	05 64 01 00 00       	add    eax,0x164
c0012d50:	83 ec 04             	sub    esp,0x4
c0012d53:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012d56:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012d59:	50                   	push   eax
c0012d5a:	e8 23 bf ff ff       	call   c000ec82 <GDT::addEntry(GDTEntry)>
c0012d5f:	83 c4 10             	add    esp,0x10
c0012d62:	89 c2                	mov    edx,eax
c0012d64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d67:	89 10                	mov    DWORD PTR [eax],edx
c0012d69:	83 ec 0c             	sub    esp,0xc
c0012d6c:	68 59 43 02 c0       	push   0xc0024359
c0012d71:	e8 d8 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012d76:	83 c4 10             	add    esp,0x10
c0012d79:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012d7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012d84:	05 64 01 00 00       	add    eax,0x164
c0012d89:	83 ec 0c             	sub    esp,0xc
c0012d8c:	50                   	push   eax
c0012d8d:	e8 1a bf ff ff       	call   c000ecac <GDT::flush()>
c0012d92:	83 c4 10             	add    esp,0x10
c0012d95:	83 ec 0c             	sub    esp,0xc
c0012d98:	68 5c 43 02 c0       	push   0xc002435c
c0012d9d:	e8 ac 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012da2:	83 c4 10             	add    esp,0x10
c0012da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012da8:	8b 00                	mov    eax,DWORD PTR [eax]
c0012daa:	c9                   	leave  
c0012dab:	c3                   	ret    

c0012dac <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012dac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012db0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012db4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012db7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012dbc:	75 08                	jne    c0012dc6 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012dbe:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012dc4:	eb 38                	jmp    c0012dfe <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012dc6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012dcb:	75 17                	jne    c0012de4 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012dcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dd2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012dd5:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0012ddb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ddd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012de1:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012de4:	89 c1                	mov    ecx,eax
c0012de6:	83 e1 fd             	and    ecx,0xfffffffd
c0012de9:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012def:	74 cd                	je     c0012dbe <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012df1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012df6:	83 e0 ef             	and    eax,0xffffffef
c0012df9:	83 f8 08             	cmp    eax,0x8
c0012dfc:	76 c0                	jbe    c0012dbe <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012dfe:	31 c0                	xor    eax,eax
c0012e00:	c3                   	ret    
c0012e01:	90                   	nop

c0012e02 <ReservedFilename::isAtty()>:
c0012e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e06:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012e09:	31 c0                	xor    eax,eax
c0012e0b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012e11:	74 09                	je     c0012e1c <ReservedFilename::isAtty()+0x1a>
c0012e13:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012e19:	0f 94 c0             	sete   al
c0012e1c:	c3                   	ret    
c0012e1d:	90                   	nop

c0012e1e <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012e1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012e26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012e2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e2d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012e32:	75 08                	jne    c0012e3c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012e34:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012e3a:	eb 3d                	jmp    c0012e79 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012e3c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012e41:	75 17                	jne    c0012e5a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012e43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e48:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012e4b:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0012e51:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e57:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012e5a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012e5f:	75 04                	jne    c0012e65 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012e61:	89 0a                	mov    DWORD PTR [edx],ecx
c0012e63:	eb 14                	jmp    c0012e79 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012e65:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012e6a:	74 c8                	je     c0012e34 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012e6c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012e71:	83 e0 ef             	and    eax,0xffffffef
c0012e74:	83 f8 08             	cmp    eax,0x8
c0012e77:	76 bb                	jbe    c0012e34 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012e79:	31 c0                	xor    eax,eax
c0012e7b:	c3                   	ret    

c0012e7c <UnixFile::getFileDescriptor()>:
c0012e7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e83:	c3                   	ret    

c0012e84 <UnixFile::UnixFile(int)>:
c0012e84:	53                   	push   ebx
c0012e85:	83 ec 28             	sub    esp,0x28
c0012e88:	ba ac 43 02 c0       	mov    edx,0xc00243ac
c0012e8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e91:	89 10                	mov    DWORD PTR [eax],edx
c0012e93:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012e9b:	0f 8f 90 01 00 00    	jg     c0013031 <UnixFile::UnixFile(int)+0x1ad>
c0012ea1:	a1 e0 66 02 c0       	mov    eax,ds:0xc00266e0
c0012ea6:	8d 50 01             	lea    edx,[eax+0x1]
c0012ea9:	89 15 e0 66 02 c0    	mov    DWORD PTR ds:0xc00266e0,edx
c0012eaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012eb3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012eb6:	83 ec 08             	sub    esp,0x8
c0012eb9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ebd:	68 38 e2 02 c0       	push   0xc002e238
c0012ec2:	e8 a7 ef 00 00       	call   c0021e6e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012ec7:	83 c4 10             	add    esp,0x10
c0012eca:	a0 34 e2 02 c0       	mov    al,ds:0xc002e234
c0012ecf:	83 f0 01             	xor    eax,0x1
c0012ed2:	0f b6 c0             	movzx  eax,al
c0012ed5:	85 c0                	test   eax,eax
c0012ed7:	0f 84 55 01 00 00    	je     c0013032 <UnixFile::UnixFile(int)+0x1ae>
c0012edd:	c6 05 34 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e234,0x1
c0012ee4:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012eec:	83 ec 0c             	sub    esp,0xc
c0012eef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ef3:	e8 ec cb ff ff       	call   c000fae4 <malloc>
c0012ef8:	83 c4 10             	add    esp,0x10
c0012efb:	89 c3                	mov    ebx,eax
c0012efd:	83 ec 08             	sub    esp,0x8
c0012f00:	68 03 ff ff 0f       	push   0xfffff03
c0012f05:	53                   	push   ebx
c0012f06:	e8 2d 01 00 00       	call   c0013038 <ReservedFilename::ReservedFilename(int)>
c0012f0b:	83 c4 10             	add    esp,0x10
c0012f0e:	89 1d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ebx
c0012f14:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012f1c:	83 ec 0c             	sub    esp,0xc
c0012f1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f23:	e8 bc cb ff ff       	call   c000fae4 <malloc>
c0012f28:	83 c4 10             	add    esp,0x10
c0012f2b:	89 c3                	mov    ebx,eax
c0012f2d:	83 ec 08             	sub    esp,0x8
c0012f30:	68 01 ff ff 0f       	push   0xfffff01
c0012f35:	53                   	push   ebx
c0012f36:	e8 fd 00 00 00       	call   c0013038 <ReservedFilename::ReservedFilename(int)>
c0012f3b:	83 c4 10             	add    esp,0x10
c0012f3e:	89 1d 30 e2 02 c0    	mov    DWORD PTR ds:0xc002e230,ebx
c0012f44:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012f4c:	83 ec 0c             	sub    esp,0xc
c0012f4f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012f53:	e8 8c cb ff ff       	call   c000fae4 <malloc>
c0012f58:	83 c4 10             	add    esp,0x10
c0012f5b:	89 c3                	mov    ebx,eax
c0012f5d:	83 ec 08             	sub    esp,0x8
c0012f60:	68 00 ff ff 0f       	push   0xfffff00
c0012f65:	53                   	push   ebx
c0012f66:	e8 cd 00 00 00       	call   c0013038 <ReservedFilename::ReservedFilename(int)>
c0012f6b:	83 c4 10             	add    esp,0x10
c0012f6e:	89 1d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,ebx
c0012f74:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012f7c:	83 ec 0c             	sub    esp,0xc
c0012f7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012f83:	e8 5c cb ff ff       	call   c000fae4 <malloc>
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	89 c3                	mov    ebx,eax
c0012f8d:	83 ec 08             	sub    esp,0x8
c0012f90:	68 02 ff ff 0f       	push   0xfffff02
c0012f95:	53                   	push   ebx
c0012f96:	e8 9d 00 00 00       	call   c0013038 <ReservedFilename::ReservedFilename(int)>
c0012f9b:	83 c4 10             	add    esp,0x10
c0012f9e:	89 1d 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,ebx
c0012fa4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012fac:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012fb1:	7f 7f                	jg     c0013032 <UnixFile::UnixFile(int)+0x1ae>
c0012fb3:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0012fbb:	83 ec 0c             	sub    esp,0xc
c0012fbe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012fc2:	e8 1d cb ff ff       	call   c000fae4 <malloc>
c0012fc7:	83 c4 10             	add    esp,0x10
c0012fca:	89 c3                	mov    ebx,eax
c0012fcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fd0:	05 10 ff ff 0f       	add    eax,0xfffff10
c0012fd5:	83 ec 08             	sub    esp,0x8
c0012fd8:	50                   	push   eax
c0012fd9:	53                   	push   ebx
c0012fda:	e8 59 00 00 00       	call   c0013038 <ReservedFilename::ReservedFilename(int)>
c0012fdf:	83 c4 10             	add    esp,0x10
c0012fe2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fe6:	89 1c 85 00 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e00],ebx
c0012fed:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0012ff5:	83 ec 0c             	sub    esp,0xc
c0012ff8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ffc:	e8 e3 ca ff ff       	call   c000fae4 <malloc>
c0013001:	83 c4 10             	add    esp,0x10
c0013004:	89 c3                	mov    ebx,eax
c0013006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001300a:	05 20 ff ff 0f       	add    eax,0xfffff20
c001300f:	83 ec 08             	sub    esp,0x8
c0013012:	50                   	push   eax
c0013013:	53                   	push   ebx
c0013014:	e8 1f 00 00 00       	call   c0013038 <ReservedFilename::ReservedFilename(int)>
c0013019:	83 c4 10             	add    esp,0x10
c001301c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013020:	89 1c 85 c0 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e40],ebx
c0013027:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001302c:	e9 7b ff ff ff       	jmp    c0012fac <UnixFile::UnixFile(int)+0x128>
c0013031:	90                   	nop
c0013032:	83 c4 28             	add    esp,0x28
c0013035:	5b                   	pop    ebx
c0013036:	c3                   	ret    
c0013037:	90                   	nop

c0013038 <ReservedFilename::ReservedFilename(int)>:
c0013038:	83 ec 0c             	sub    esp,0xc
c001303b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303f:	83 ec 08             	sub    esp,0x8
c0013042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013046:	50                   	push   eax
c0013047:	e8 38 fe ff ff       	call   c0012e84 <UnixFile::UnixFile(int)>
c001304c:	83 c4 10             	add    esp,0x10
c001304f:	ba c8 43 02 c0       	mov    edx,0xc00243c8
c0013054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013058:	89 10                	mov    DWORD PTR [eax],edx
c001305a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001305e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013062:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013065:	90                   	nop
c0013066:	83 c4 0c             	add    esp,0xc
c0013069:	c3                   	ret    

c001306a <UnixFile::~UnixFile()>:
c001306a:	83 ec 1c             	sub    esp,0x1c
c001306d:	ba ac 43 02 c0       	mov    edx,0xc00243ac
c0013072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013076:	89 10                	mov    DWORD PTR [eax],edx
c0013078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001307c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001307f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0013084:	7f 76                	jg     c00130fc <UnixFile::~UnixFile()+0x92>
c0013086:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001308e:	83 ec 0c             	sub    esp,0xc
c0013091:	68 38 e2 02 c0       	push   0xc002e238
c0013096:	e8 a7 ee 00 00       	call   c0021f42 <LinkedList<UnixFile>::getFirstElement()>
c001309b:	83 c4 10             	add    esp,0x10
c001309e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130a2:	83 ec 0c             	sub    esp,0xc
c00130a5:	68 38 e2 02 c0       	push   0xc002e238
c00130aa:	e8 9b ee 00 00       	call   c0021f4a <LinkedList<UnixFile>::removeFirst()>
c00130af:	83 c4 10             	add    esp,0x10
c00130b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00130b6:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00130ba:	74 43                	je     c00130ff <UnixFile::~UnixFile()+0x95>
c00130bc:	83 ec 08             	sub    esp,0x8
c00130bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00130c3:	68 38 e2 02 c0       	push   0xc002e238
c00130c8:	e8 a1 ed 00 00       	call   c0021e6e <LinkedList<UnixFile>::addElement(UnixFile*)>
c00130cd:	83 c4 10             	add    esp,0x10
c00130d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00130d4:	8d 50 01             	lea    edx,[eax+0x1]
c00130d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130db:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00130e0:	0f 94 c0             	sete   al
c00130e3:	0f b6 c0             	movzx  eax,al
c00130e6:	85 c0                	test   eax,eax
c00130e8:	74 a4                	je     c001308e <UnixFile::~UnixFile()+0x24>
c00130ea:	83 ec 0c             	sub    esp,0xc
c00130ed:	68 60 43 02 c0       	push   0xc0024360
c00130f2:	e8 33 cd ff ff       	call   c000fe2a <KePanic(char const*)>
c00130f7:	83 c4 10             	add    esp,0x10
c00130fa:	eb 92                	jmp    c001308e <UnixFile::~UnixFile()+0x24>
c00130fc:	90                   	nop
c00130fd:	eb 01                	jmp    c0013100 <UnixFile::~UnixFile()+0x96>
c00130ff:	90                   	nop
c0013100:	90                   	nop
c0013101:	83 c4 1c             	add    esp,0x1c
c0013104:	c3                   	ret    
c0013105:	90                   	nop

c0013106 <UnixFile::~UnixFile()>:
c0013106:	83 ec 0c             	sub    esp,0xc
c0013109:	83 ec 0c             	sub    esp,0xc
c001310c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013110:	e8 55 ff ff ff       	call   c001306a <UnixFile::~UnixFile()>
c0013115:	83 c4 10             	add    esp,0x10
c0013118:	83 ec 08             	sub    esp,0x8
c001311b:	6a 0c                	push   0xc
c001311d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013121:	e8 35 a1 ff ff       	call   c000d25b <operator delete(void*, unsigned long)>
c0013126:	83 c4 10             	add    esp,0x10
c0013129:	83 c4 0c             	add    esp,0xc
c001312c:	c3                   	ret    
c001312d:	90                   	nop

c001312e <ReservedFilename::~ReservedFilename()>:
c001312e:	83 ec 0c             	sub    esp,0xc
c0013131:	ba c8 43 02 c0       	mov    edx,0xc00243c8
c0013136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001313a:	89 10                	mov    DWORD PTR [eax],edx
c001313c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013140:	83 ec 0c             	sub    esp,0xc
c0013143:	50                   	push   eax
c0013144:	e8 21 ff ff ff       	call   c001306a <UnixFile::~UnixFile()>
c0013149:	83 c4 10             	add    esp,0x10
c001314c:	90                   	nop
c001314d:	83 c4 0c             	add    esp,0xc
c0013150:	c3                   	ret    
c0013151:	90                   	nop

c0013152 <ReservedFilename::~ReservedFilename()>:
c0013152:	83 ec 0c             	sub    esp,0xc
c0013155:	83 ec 0c             	sub    esp,0xc
c0013158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001315c:	e8 cd ff ff ff       	call   c001312e <ReservedFilename::~ReservedFilename()>
c0013161:	83 c4 10             	add    esp,0x10
c0013164:	83 ec 08             	sub    esp,0x8
c0013167:	6a 0c                	push   0xc
c0013169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001316d:	e8 e9 a0 ff ff       	call   c000d25b <operator delete(void*, unsigned long)>
c0013172:	83 c4 10             	add    esp,0x10
c0013175:	83 c4 0c             	add    esp,0xc
c0013178:	c3                   	ret    

c0013179 <KeGetFileFromDescriptor(int)>:
c0013179:	53                   	push   ebx
c001317a:	83 ec 10             	sub    esp,0x10
c001317d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013181:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0013187:	53                   	push   ebx
c0013188:	68 80 43 02 c0       	push   0xc0024380
c001318d:	e8 bc 3d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013192:	83 c4 10             	add    esp,0x10
c0013195:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001319b:	7f 30                	jg     c00131cd <KeGetFileFromDescriptor(int)+0x54>
c001319d:	83 ec 0c             	sub    esp,0xc
c00131a0:	68 38 e2 02 c0       	push   0xc002e238
c00131a5:	e8 98 ed 00 00       	call   c0021f42 <LinkedList<UnixFile>::getFirstElement()>
c00131aa:	8d 50 ff             	lea    edx,[eax-0x1]
c00131ad:	83 c4 10             	add    esp,0x10
c00131b0:	83 fa fd             	cmp    edx,0xfffffffd
c00131b3:	76 04                	jbe    c00131b9 <KeGetFileFromDescriptor(int)+0x40>
c00131b5:	31 c0                	xor    eax,eax
c00131b7:	eb 6e                	jmp    c0013227 <KeGetFileFromDescriptor(int)+0xae>
c00131b9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00131bc:	74 69                	je     c0013227 <KeGetFileFromDescriptor(int)+0xae>
c00131be:	52                   	push   edx
c00131bf:	52                   	push   edx
c00131c0:	50                   	push   eax
c00131c1:	68 38 e2 02 c0       	push   0xc002e238
c00131c6:	e8 21 ee 00 00       	call   c0021fec <LinkedList<UnixFile>::getNext(UnixFile*)>
c00131cb:	eb dd                	jmp    c00131aa <KeGetFileFromDescriptor(int)+0x31>
c00131cd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00131d3:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c00131d8:	74 4d                	je     c0013227 <KeGetFileFromDescriptor(int)+0xae>
c00131da:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00131e0:	a1 30 e2 02 c0       	mov    eax,ds:0xc002e230
c00131e5:	74 40                	je     c0013227 <KeGetFileFromDescriptor(int)+0xae>
c00131e7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00131ed:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c00131f2:	74 33                	je     c0013227 <KeGetFileFromDescriptor(int)+0xae>
c00131f4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00131fa:	a1 24 e2 02 c0       	mov    eax,ds:0xc002e224
c00131ff:	74 26                	je     c0013227 <KeGetFileFromDescriptor(int)+0xae>
c0013201:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013207:	83 f8 08             	cmp    eax,0x8
c001320a:	77 09                	ja     c0013215 <KeGetFileFromDescriptor(int)+0x9c>
c001320c:	8b 04 85 00 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e00]
c0013213:	eb 12                	jmp    c0013227 <KeGetFileFromDescriptor(int)+0xae>
c0013215:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001321b:	83 fb 08             	cmp    ebx,0x8
c001321e:	77 95                	ja     c00131b5 <KeGetFileFromDescriptor(int)+0x3c>
c0013220:	8b 04 9d c0 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1e40]
c0013227:	83 c4 08             	add    esp,0x8
c001322a:	5b                   	pop    ebx
c001322b:	c3                   	ret    

c001322c <__static_initialization_and_destruction_0(int, int)>:
c001322c:	83 ec 0c             	sub    esp,0xc
c001322f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013234:	75 34                	jne    c001326a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013236:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001323e:	75 2a                	jne    c001326a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013240:	83 ec 0c             	sub    esp,0xc
c0013243:	68 38 e2 02 c0       	push   0xc002e238
c0013248:	e8 df eb 00 00       	call   c0021e2c <LinkedList<UnixFile>::LinkedList()>
c001324d:	83 c4 10             	add    esp,0x10
c0013250:	83 ec 04             	sub    esp,0x4
c0013253:	68 48 5f 02 c0       	push   0xc0025f48
c0013258:	68 38 e2 02 c0       	push   0xc002e238
c001325d:	68 2a 1e 02 c0       	push   0xc0021e2a
c0013262:	e8 a4 9f ff ff       	call   c000d20b <__cxa_atexit>
c0013267:	83 c4 10             	add    esp,0x10
c001326a:	90                   	nop
c001326b:	83 c4 0c             	add    esp,0xc
c001326e:	c3                   	ret    

c001326f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001326f:	83 ec 0c             	sub    esp,0xc
c0013272:	83 ec 08             	sub    esp,0x8
c0013275:	68 ff ff 00 00       	push   0xffff
c001327a:	6a 01                	push   0x1
c001327c:	e8 ab ff ff ff       	call   c001322c <__static_initialization_and_destruction_0(int, int)>
c0013281:	83 c4 10             	add    esp,0x10
c0013284:	83 c4 0c             	add    esp,0xc
c0013287:	c3                   	ret    

c0013288 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013288:	53                   	push   ebx
c0013289:	8b 15 e8 66 02 c0    	mov    edx,DWORD PTR ds:0xc00266e8
c001328f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013293:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013297:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c001329d:	89 d8                	mov    eax,ebx
c001329f:	d1 e8                	shr    eax,1
c00132a1:	01 d0                	add    eax,edx
c00132a3:	80 e3 01             	and    bl,0x1
c00132a6:	8a 10                	mov    dl,BYTE PTR [eax]
c00132a8:	75 09                	jne    c00132b3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00132aa:	83 e2 f0             	and    edx,0xfffffff0
c00132ad:	09 ca                	or     edx,ecx
c00132af:	88 10                	mov    BYTE PTR [eax],dl
c00132b1:	5b                   	pop    ebx
c00132b2:	c3                   	ret    
c00132b3:	0f b6 c9             	movzx  ecx,cl
c00132b6:	83 e2 0f             	and    edx,0xf
c00132b9:	c1 e1 04             	shl    ecx,0x4
c00132bc:	09 ca                	or     edx,ecx
c00132be:	88 10                	mov    BYTE PTR [eax],dl
c00132c0:	5b                   	pop    ebx
c00132c1:	c3                   	ret    

c00132c2 <Virt::getPageState(unsigned long)>:
c00132c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132c6:	8b 0d e8 66 02 c0    	mov    ecx,DWORD PTR ds:0xc00266e8
c00132cc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00132d2:	89 d0                	mov    eax,edx
c00132d4:	d1 e8                	shr    eax,1
c00132d6:	80 e2 01             	and    dl,0x1
c00132d9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00132dc:	74 03                	je     c00132e1 <Virt::getPageState(unsigned long)+0x1f>
c00132de:	c1 e8 04             	shr    eax,0x4
c00132e1:	83 e0 0f             	and    eax,0xf
c00132e4:	c3                   	ret    

c00132e5 <Virt::allocateKernelVirtualPages(int)>:
c00132e5:	55                   	push   ebp
c00132e6:	57                   	push   edi
c00132e7:	56                   	push   esi
c00132e8:	31 f6                	xor    esi,esi
c00132ea:	53                   	push   ebx
c00132eb:	31 db                	xor    ebx,ebx
c00132ed:	83 ec 1c             	sub    esp,0x1c
c00132f0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00132f5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00132f9:	8b 2d e4 66 02 c0    	mov    ebp,DWORD PTR ds:0xc00266e4
c00132ff:	55                   	push   ebp
c0013300:	e8 bd ff ff ff       	call   c00132c2 <Virt::getPageState(unsigned long)>
c0013305:	5a                   	pop    edx
c0013306:	84 c0                	test   al,al
c0013308:	75 3d                	jne    c0013347 <Virt::allocateKernelVirtualPages(int)+0x62>
c001330a:	85 db                	test   ebx,ebx
c001330c:	0f 44 f5             	cmove  esi,ebp
c001330f:	83 c3 01             	add    ebx,0x1
c0013312:	39 fb                	cmp    ebx,edi
c0013314:	74 5e                	je     c0013374 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0013316:	83 c5 01             	add    ebp,0x1
c0013319:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c001331f:	76 33                	jbe    c0013354 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0013321:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0013326:	c7 05 e4 66 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00266e4,0xc8000
c0013330:	75 2a                	jne    c001335c <Virt::allocateKernelVirtualPages(int)+0x77>
c0013332:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0013337:	bd 00 80 0c 00       	mov    ebp,0xc8000
c001333c:	55                   	push   ebp
c001333d:	e8 80 ff ff ff       	call   c00132c2 <Virt::getPageState(unsigned long)>
c0013342:	5a                   	pop    edx
c0013343:	84 c0                	test   al,al
c0013345:	74 c3                	je     c001330a <Virt::allocateKernelVirtualPages(int)+0x25>
c0013347:	83 c5 01             	add    ebp,0x1
c001334a:	31 db                	xor    ebx,ebx
c001334c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013352:	77 cd                	ja     c0013321 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0013354:	89 2d e4 66 02 c0    	mov    DWORD PTR ds:0xc00266e4,ebp
c001335a:	eb a3                	jmp    c00132ff <Virt::allocateKernelVirtualPages(int)+0x1a>
c001335c:	83 ec 0c             	sub    esp,0xc
c001335f:	68 dc 43 02 c0       	push   0xc00243dc
c0013364:	e8 c1 ca ff ff       	call   c000fe2a <KePanic(char const*)>
c0013369:	8b 2d e4 66 02 c0    	mov    ebp,DWORD PTR ds:0xc00266e4
c001336f:	83 c4 10             	add    esp,0x10
c0013372:	eb 8b                	jmp    c00132ff <Virt::allocateKernelVirtualPages(int)+0x1a>
c0013374:	89 35 e4 66 02 c0    	mov    DWORD PTR ds:0xc00266e4,esi
c001337a:	83 fb 01             	cmp    ebx,0x1
c001337d:	74 63                	je     c00133e2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c001337f:	85 ff                	test   edi,edi
c0013381:	74 41                	je     c00133c4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0013383:	89 f0                	mov    eax,esi
c0013385:	31 db                	xor    ebx,ebx
c0013387:	8d 6f ff             	lea    ebp,[edi-0x1]
c001338a:	eb 16                	jmp    c00133a2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c001338c:	6a 01                	push   0x1
c001338e:	83 c3 01             	add    ebx,0x1
c0013391:	50                   	push   eax
c0013392:	e8 f1 fe ff ff       	call   c0013288 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013397:	39 fb                	cmp    ebx,edi
c0013399:	58                   	pop    eax
c001339a:	5a                   	pop    edx
c001339b:	74 27                	je     c00133c4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c001339d:	a1 e4 66 02 c0       	mov    eax,ds:0xc00266e4
c00133a2:	8d 50 01             	lea    edx,[eax+0x1]
c00133a5:	85 db                	test   ebx,ebx
c00133a7:	89 15 e4 66 02 c0    	mov    DWORD PTR ds:0xc00266e4,edx
c00133ad:	74 22                	je     c00133d1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00133af:	39 dd                	cmp    ebp,ebx
c00133b1:	75 d9                	jne    c001338c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00133b3:	6a 03                	push   0x3
c00133b5:	83 c3 01             	add    ebx,0x1
c00133b8:	50                   	push   eax
c00133b9:	e8 ca fe ff ff       	call   c0013288 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00133be:	39 fb                	cmp    ebx,edi
c00133c0:	59                   	pop    ecx
c00133c1:	58                   	pop    eax
c00133c2:	75 d9                	jne    c001339d <Virt::allocateKernelVirtualPages(int)+0xb8>
c00133c4:	83 c4 1c             	add    esp,0x1c
c00133c7:	89 f0                	mov    eax,esi
c00133c9:	5b                   	pop    ebx
c00133ca:	c1 e0 0c             	shl    eax,0xc
c00133cd:	5e                   	pop    esi
c00133ce:	5f                   	pop    edi
c00133cf:	5d                   	pop    ebp
c00133d0:	c3                   	ret    
c00133d1:	6a 02                	push   0x2
c00133d3:	bb 01 00 00 00       	mov    ebx,0x1
c00133d8:	50                   	push   eax
c00133d9:	e8 aa fe ff ff       	call   c0013288 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00133de:	58                   	pop    eax
c00133df:	5a                   	pop    edx
c00133e0:	eb bb                	jmp    c001339d <Virt::allocateKernelVirtualPages(int)+0xb8>
c00133e2:	6a 04                	push   0x4
c00133e4:	56                   	push   esi
c00133e5:	8d 46 01             	lea    eax,[esi+0x1]
c00133e8:	a3 e4 66 02 c0       	mov    ds:0xc00266e4,eax
c00133ed:	e8 96 fe ff ff       	call   c0013288 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00133f2:	89 f0                	mov    eax,esi
c00133f4:	59                   	pop    ecx
c00133f5:	c1 e0 0c             	shl    eax,0xc
c00133f8:	5b                   	pop    ebx
c00133f9:	83 c4 1c             	add    esp,0x1c
c00133fc:	5b                   	pop    ebx
c00133fd:	5e                   	pop    esi
c00133fe:	5f                   	pop    edi
c00133ff:	5d                   	pop    ebp
c0013400:	c3                   	ret    

c0013401 <Virt::freeSwapfilePage(unsigned long)>:
c0013401:	53                   	push   ebx
c0013402:	8b 15 4c e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e24c
c0013408:	b8 01 00 00 00       	mov    eax,0x1
c001340d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013411:	d3 e0                	shl    eax,cl
c0013413:	89 cb                	mov    ebx,ecx
c0013415:	c1 eb 05             	shr    ebx,0x5
c0013418:	f7 d0                	not    eax
c001341a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001341d:	21 c1                	and    ecx,eax
c001341f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013422:	5b                   	pop    ebx
c0013423:	c3                   	ret    

c0013424 <Virt::swapIDToSector(unsigned long)>:
c0013424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013428:	8b 15 ec 66 02 c0    	mov    edx,DWORD PTR ds:0xc00266ec
c001342e:	8b 0d f4 66 02 c0    	mov    ecx,DWORD PTR ds:0xc00266f4
c0013434:	0f af c2             	imul   eax,edx
c0013437:	01 c8                	add    eax,ecx
c0013439:	c3                   	ret    

c001343a <Virt::allocateSwapfilePage()>:
c001343a:	55                   	push   ebp
c001343b:	31 d2                	xor    edx,edx
c001343d:	57                   	push   edi
c001343e:	56                   	push   esi
c001343f:	53                   	push   ebx
c0013440:	83 ec 0c             	sub    esp,0xc
c0013443:	8b 1d f0 66 02 c0    	mov    ebx,DWORD PTR ds:0xc00266f0
c0013449:	8b 0d ec 66 02 c0    	mov    ecx,DWORD PTR ds:0xc00266ec
c001344f:	89 d8                	mov    eax,ebx
c0013451:	f7 f1                	div    ecx
c0013453:	39 cb                	cmp    ebx,ecx
c0013455:	72 2f                	jb     c0013486 <Virt::allocateSwapfilePage()+0x4c>
c0013457:	8b 35 4c e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e24c
c001345d:	8b 16                	mov    edx,DWORD PTR [esi]
c001345f:	f6 c2 01             	test   dl,0x1
c0013462:	74 3e                	je     c00134a2 <Virt::allocateSwapfilePage()+0x68>
c0013464:	31 c9                	xor    ecx,ecx
c0013466:	bf 01 00 00 00       	mov    edi,0x1
c001346b:	eb 12                	jmp    c001347f <Virt::allocateSwapfilePage()+0x45>
c001346d:	89 ca                	mov    edx,ecx
c001346f:	89 fd                	mov    ebp,edi
c0013471:	c1 ea 05             	shr    edx,0x5
c0013474:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013477:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013479:	d3 e5                	shl    ebp,cl
c001347b:	85 ea                	test   edx,ebp
c001347d:	74 2c                	je     c00134ab <Virt::allocateSwapfilePage()+0x71>
c001347f:	83 c1 01             	add    ecx,0x1
c0013482:	39 c8                	cmp    eax,ecx
c0013484:	77 e7                	ja     c001346d <Virt::allocateSwapfilePage()+0x33>
c0013486:	83 ec 0c             	sub    esp,0xc
c0013489:	68 5f 49 02 c0       	push   0xc002495f
c001348e:	e8 97 c9 ff ff       	call   c000fe2a <KePanic(char const*)>
c0013493:	83 c4 10             	add    esp,0x10
c0013496:	31 c9                	xor    ecx,ecx
c0013498:	83 c4 0c             	add    esp,0xc
c001349b:	89 c8                	mov    eax,ecx
c001349d:	5b                   	pop    ebx
c001349e:	5e                   	pop    esi
c001349f:	5f                   	pop    edi
c00134a0:	5d                   	pop    ebp
c00134a1:	c3                   	ret    
c00134a2:	89 f3                	mov    ebx,esi
c00134a4:	bd 01 00 00 00       	mov    ebp,0x1
c00134a9:	31 c9                	xor    ecx,ecx
c00134ab:	09 ea                	or     edx,ebp
c00134ad:	89 c8                	mov    eax,ecx
c00134af:	89 13                	mov    DWORD PTR [ebx],edx
c00134b1:	83 c4 0c             	add    esp,0xc
c00134b4:	5b                   	pop    ebx
c00134b5:	5e                   	pop    esi
c00134b6:	5f                   	pop    edi
c00134b7:	5d                   	pop    ebp
c00134b8:	c3                   	ret    

c00134b9 <Virt::virtualMemorySetup()>:
c00134b9:	53                   	push   ebx
c00134ba:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00134bf:	6a 0f                	push   0xf
c00134c1:	53                   	push   ebx
c00134c2:	83 c3 01             	add    ebx,0x1
c00134c5:	e8 be fd ff ff       	call   c0013288 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00134ca:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00134d0:	58                   	pop    eax
c00134d1:	5a                   	pop    edx
c00134d2:	75 eb                	jne    c00134bf <Virt::virtualMemorySetup()+0x6>
c00134d4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00134d9:	6a 00                	push   0x0
c00134db:	53                   	push   ebx
c00134dc:	83 c3 01             	add    ebx,0x1
c00134df:	e8 a4 fd ff ff       	call   c0013288 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00134e4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00134ea:	59                   	pop    ecx
c00134eb:	58                   	pop    eax
c00134ec:	75 eb                	jne    c00134d9 <Virt::virtualMemorySetup()+0x20>
c00134ee:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00134f3:	6a 0f                	push   0xf
c00134f5:	53                   	push   ebx
c00134f6:	83 c3 01             	add    ebx,0x1
c00134f9:	e8 8a fd ff ff       	call   c0013288 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00134fe:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013504:	58                   	pop    eax
c0013505:	5a                   	pop    edx
c0013506:	75 eb                	jne    c00134f3 <Virt::virtualMemorySetup()+0x3a>
c0013508:	5b                   	pop    ebx
c0013509:	c3                   	ret    

c001350a <Virt::setupPageSwapping(int)>:
c001350a:	53                   	push   ebx
c001350b:	83 ec 0c             	sub    esp,0xc
c001350e:	a1 e8 ba 02 c0       	mov    eax,ds:0xc002bae8
c0013513:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013517:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001351d:	8b 10                	mov    edx,DWORD PTR [eax]
c001351f:	53                   	push   ebx
c0013520:	68 76 49 02 c0       	push   0xc0024976
c0013525:	50                   	push   eax
c0013526:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013529:	c1 e3 0b             	shl    ebx,0xb
c001352c:	89 1d f0 66 02 c0    	mov    DWORD PTR ds:0xc00266f0,ebx
c0013532:	c1 eb 08             	shr    ebx,0x8
c0013535:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013538:	c6 05 f8 66 02 c0 43 	mov    BYTE PTR ds:0xc00266f8,0x43
c001353f:	c7 05 ec 66 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00266ec,0x8
c0013549:	a3 f4 66 02 c0       	mov    ds:0xc00266f4,eax
c001354e:	e8 91 c5 ff ff       	call   c000fae4 <malloc>
c0013553:	31 d2                	xor    edx,edx
c0013555:	83 c4 0c             	add    esp,0xc
c0013558:	a3 4c e2 02 c0       	mov    ds:0xc002e24c,eax
c001355d:	89 c1                	mov    ecx,eax
c001355f:	a1 f0 66 02 c0       	mov    eax,ds:0xc00266f0
c0013564:	f7 35 ec 66 02 c0    	div    DWORD PTR ds:0xc00266ec
c001356a:	c1 e8 05             	shr    eax,0x5
c001356d:	50                   	push   eax
c001356e:	6a 00                	push   0x0
c0013570:	51                   	push   ecx
c0013571:	e8 7a cf fe ff       	call   c00004f0 <memset>
c0013576:	83 c4 18             	add    esp,0x18
c0013579:	5b                   	pop    ebx
c001357a:	c3                   	ret    
c001357b:	90                   	nop

c001357c <VAS::setCPUSpecific(unsigned long)>:
c001357c:	c3                   	ret    
c001357d:	90                   	nop

c001357e <VAS::VAS(VAS*)>:
c001357e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013582:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013589:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001358d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013594:	90                   	nop
c0013595:	c3                   	ret    

c0013596 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0013596:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001359a:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001359f:	89 c2                	mov    edx,eax
c00135a1:	c1 ea 16             	shr    edx,0x16
c00135a4:	c1 e8 0a             	shr    eax,0xa
c00135a7:	83 f9 01             	cmp    ecx,0x1
c00135aa:	19 c9                	sbb    ecx,ecx
c00135ac:	25 fc 0f 00 00       	and    eax,0xffc
c00135b1:	c1 e2 0c             	shl    edx,0xc
c00135b4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00135ba:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00135c1:	01 d0                	add    eax,edx
c00135c3:	c3                   	ret    

c00135c4 <VAS::getPageTableEntry(unsigned long)>:
c00135c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00135c8:	89 ca                	mov    edx,ecx
c00135ca:	c1 ea 16             	shr    edx,0x16
c00135cd:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00135d3:	c1 e9 0a             	shr    ecx,0xa
c00135d6:	c1 e0 0c             	shl    eax,0xc
c00135d9:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00135df:	8d 04 08             	lea    eax,[eax+ecx*1]
c00135e2:	c3                   	ret    

c00135e3 <Virt::freeKernelVirtualPages(unsigned long)>:
c00135e3:	55                   	push   ebp
c00135e4:	57                   	push   edi
c00135e5:	bf 01 00 00 00       	mov    edi,0x1
c00135ea:	56                   	push   esi
c00135eb:	53                   	push   ebx
c00135ec:	83 ec 1c             	sub    esp,0x1c
c00135ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00135f3:	c1 ee 0c             	shr    esi,0xc
c00135f6:	eb 48                	jmp    c0013640 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00135f8:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c00135fd:	83 ec 08             	sub    esp,0x8
c0013600:	55                   	push   ebp
c0013601:	50                   	push   eax
c0013602:	e8 bd ff ff ff       	call   c00135c4 <VAS::getPageTableEntry(unsigned long)>
c0013607:	83 c4 10             	add    esp,0x10
c001360a:	8b 10                	mov    edx,DWORD PTR [eax]
c001360c:	f6 c6 04             	test   dh,0x4
c001360f:	75 70                	jne    c0013681 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013611:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013617:	83 fb 04             	cmp    ebx,0x4
c001361a:	0f 84 8a 00 00 00    	je     c00136aa <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013620:	83 fb 02             	cmp    ebx,0x2
c0013623:	0f 84 9a 00 00 00    	je     c00136c3 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013629:	83 fb 03             	cmp    ebx,0x3
c001362c:	0f 84 be 00 00 00    	je     c00136f0 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013632:	83 fb 01             	cmp    ebx,0x1
c0013635:	0f 84 a2 00 00 00    	je     c00136dd <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001363b:	83 c6 01             	add    esi,0x1
c001363e:	31 ff                	xor    edi,edi
c0013640:	56                   	push   esi
c0013641:	89 f5                	mov    ebp,esi
c0013643:	e8 7a fc ff ff       	call   c00132c2 <Virt::getPageState(unsigned long)>
c0013648:	c1 e5 0c             	shl    ebp,0xc
c001364b:	5a                   	pop    edx
c001364c:	0f b6 d8             	movzx  ebx,al
c001364f:	85 db                	test   ebx,ebx
c0013651:	75 a5                	jne    c00135f8 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013653:	83 ec 0c             	sub    esp,0xc
c0013656:	68 8d 49 02 c0       	push   0xc002498d
c001365b:	e8 ca c7 ff ff       	call   c000fe2a <KePanic(char const*)>
c0013660:	5a                   	pop    edx
c0013661:	59                   	pop    ecx
c0013662:	55                   	push   ebp
c0013663:	8b 2d 50 e2 02 c0    	mov    ebp,DWORD PTR ds:0xc002e250
c0013669:	55                   	push   ebp
c001366a:	e8 55 ff ff ff       	call   c00135c4 <VAS::getPageTableEntry(unsigned long)>
c001366f:	83 c4 10             	add    esp,0x10
c0013672:	8b 10                	mov    edx,DWORD PTR [eax]
c0013674:	f6 c6 04             	test   dh,0x4
c0013677:	75 08                	jne    c0013681 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013679:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001367f:	eb ba                	jmp    c001363b <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013681:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013685:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001368b:	83 ec 0c             	sub    esp,0xc
c001368e:	52                   	push   edx
c001368f:	e8 27 c9 ff ff       	call   c000ffbb <Phys::freePage(unsigned long)>
c0013694:	83 c4 10             	add    esp,0x10
c0013697:	83 fb 04             	cmp    ebx,0x4
c001369a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001369e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136a4:	0f 85 76 ff ff ff    	jne    c0013620 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00136aa:	83 e7 01             	and    edi,0x1
c00136ad:	75 46                	jne    c00136f5 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00136af:	c7 44 24 30 fc 43 02 c0 	mov    DWORD PTR [esp+0x30],0xc00243fc
c00136b7:	83 c4 1c             	add    esp,0x1c
c00136ba:	5b                   	pop    ebx
c00136bb:	5e                   	pop    esi
c00136bc:	5f                   	pop    edi
c00136bd:	5d                   	pop    ebp
c00136be:	e9 67 c7 ff ff       	jmp    c000fe2a <KePanic(char const*)>
c00136c3:	83 e7 01             	and    edi,0x1
c00136c6:	75 15                	jne    c00136dd <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00136c8:	83 ec 0c             	sub    esp,0xc
c00136cb:	68 a9 49 02 c0       	push   0xc00249a9
c00136d0:	e8 55 c7 ff ff       	call   c000fe2a <KePanic(char const*)>
c00136d5:	83 c4 10             	add    esp,0x10
c00136d8:	e9 5e ff ff ff       	jmp    c001363b <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00136dd:	83 ec 08             	sub    esp,0x8
c00136e0:	6a 00                	push   0x0
c00136e2:	56                   	push   esi
c00136e3:	e8 a0 fb ff ff       	call   c0013288 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136e8:	83 c4 10             	add    esp,0x10
c00136eb:	e9 4b ff ff ff       	jmp    c001363b <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00136f0:	83 e7 01             	and    edi,0x1
c00136f3:	75 16                	jne    c001370b <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00136f5:	83 ec 08             	sub    esp,0x8
c00136f8:	6a 00                	push   0x0
c00136fa:	56                   	push   esi
c00136fb:	e8 88 fb ff ff       	call   c0013288 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013700:	83 c4 10             	add    esp,0x10
c0013703:	83 c4 1c             	add    esp,0x1c
c0013706:	5b                   	pop    ebx
c0013707:	5e                   	pop    esi
c0013708:	5f                   	pop    edi
c0013709:	5d                   	pop    ebp
c001370a:	c3                   	ret    
c001370b:	c7 44 24 30 c5 49 02 c0 	mov    DWORD PTR [esp+0x30],0xc00249c5
c0013713:	83 c4 1c             	add    esp,0x1c
c0013716:	5b                   	pop    ebx
c0013717:	5e                   	pop    esi
c0013718:	5f                   	pop    edi
c0013719:	5d                   	pop    ebp
c001371a:	e9 0b c7 ff ff       	jmp    c000fe2a <KePanic(char const*)>
c001371f:	90                   	nop

c0013720 <VAS::freeAllocatedPages(unsigned long)>:
c0013720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013724:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013728:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001372c:	74 09                	je     c0013737 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001372e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013732:	e9 ac fe ff ff       	jmp    c00135e3 <Virt::freeKernelVirtualPages(unsigned long)>
c0013737:	c7 44 24 04 20 44 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024420
c001373f:	e9 0a 38 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0013744 <VAS::virtualToPhysical(unsigned long)>:
c0013744:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013748:	50                   	push   eax
c0013749:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001374d:	52                   	push   edx
c001374e:	e8 71 fe ff ff       	call   c00135c4 <VAS::getPageTableEntry(unsigned long)>
c0013753:	59                   	pop    ecx
c0013754:	5a                   	pop    edx
c0013755:	8b 00                	mov    eax,DWORD PTR [eax]
c0013757:	25 00 f0 ff ff       	and    eax,0xfffff000
c001375c:	c3                   	ret    
c001375d:	90                   	nop

c001375e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c001375e:	55                   	push   ebp
c001375f:	57                   	push   edi
c0013760:	56                   	push   esi
c0013761:	53                   	push   ebx
c0013762:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013766:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001376a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001376e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013772:	85 db                	test   ebx,ebx
c0013774:	7e 24                	jle    c001379a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013776:	c1 e3 0c             	shl    ebx,0xc
c0013779:	01 f3                	add    ebx,esi
c001377b:	56                   	push   esi
c001377c:	81 c6 00 10 00 00    	add    esi,0x1000
c0013782:	55                   	push   ebp
c0013783:	e8 3c fe ff ff       	call   c00135c4 <VAS::getPageTableEntry(unsigned long)>
c0013788:	5a                   	pop    edx
c0013789:	59                   	pop    ecx
c001378a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001378c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013790:	21 f9                	and    ecx,edi
c0013792:	09 d1                	or     ecx,edx
c0013794:	39 f3                	cmp    ebx,esi
c0013796:	89 08                	mov    DWORD PTR [eax],ecx
c0013798:	75 e1                	jne    c001377b <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c001379a:	5b                   	pop    ebx
c001379b:	5e                   	pop    esi
c001379c:	5f                   	pop    edi
c001379d:	5d                   	pop    ebp
c001379e:	c3                   	ret    
c001379f:	90                   	nop

c00137a0 <VAS::VAS()>:
c00137a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00137ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00137b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137ba:	a3 50 e2 02 c0       	mov    ds:0xc002e250,eax
c00137bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137c3:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00137c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137cb:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00137ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137d2:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00137d9:	ba 7d 70 02 c0       	mov    edx,0xc002707d
c00137de:	b8 00 70 02 c0       	mov    eax,0xc0027000
c00137e3:	29 c2                	sub    edx,eax
c00137e5:	89 d0                	mov    eax,edx
c00137e7:	05 ff 0f 00 00       	add    eax,0xfff
c00137ec:	c1 e8 0c             	shr    eax,0xc
c00137ef:	89 c2                	mov    edx,eax
c00137f1:	b8 00 70 02 c0       	mov    eax,0xc0027000
c00137f6:	6a 04                	push   0x4
c00137f8:	6a ff                	push   0xffffffff
c00137fa:	52                   	push   edx
c00137fb:	50                   	push   eax
c00137fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013800:	e8 59 ff ff ff       	call   c001375e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013805:	83 c4 14             	add    esp,0x14
c0013808:	90                   	nop
c0013809:	c3                   	ret    

c001380a <VAS::setToWriteCombining(unsigned long, int)>:
c001380a:	a1 e4 ea 02 c0       	mov    eax,ds:0xc002eae4
c001380f:	50                   	push   eax
c0013810:	6a ff                	push   0xffffffff
c0013812:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013816:	52                   	push   edx
c0013817:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001381b:	51                   	push   ecx
c001381c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013820:	50                   	push   eax
c0013821:	e8 38 ff ff ff       	call   c001375e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013826:	83 c4 14             	add    esp,0x14
c0013829:	c3                   	ret    

c001382a <VAS::mapOtherVASIn(bool, VAS*)>:
c001382a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001382e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013831:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013835:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013838:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001383d:	83 f8 01             	cmp    eax,0x1
c0013840:	19 c0                	sbb    eax,eax
c0013842:	83 ca 03             	or     edx,0x3
c0013845:	83 e0 fc             	and    eax,0xfffffffc
c0013848:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001384f:	0f 20 d8             	mov    eax,cr3
c0013852:	0f 22 d8             	mov    cr3,eax
c0013855:	c3                   	ret    

c0013856 <VAS::~VAS()>:
c0013856:	83 ec 2c             	sub    esp,0x2c
c0013859:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013861:	fa                   	cli    
c0013862:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013867:	83 c0 01             	add    eax,0x1
c001386a:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001386f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013874:	8b 00                	mov    eax,DWORD PTR [eax]
c0013876:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013879:	8b 80 72 05 00 00    	mov    eax,DWORD PTR [eax+0x572]
c001387f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013883:	6a 01                	push   0x1
c0013885:	50                   	push   eax
c0013886:	e8 9f ff ff ff       	call   c001382a <VAS::mapOtherVASIn(bool, VAS*)>
c001388b:	83 c4 0c             	add    esp,0xc
c001388e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013896:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001389e:	0f 8f d8 00 00 00    	jg     c001397c <VAS::~VAS()+0x126>
c00138a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00138ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00138af:	c1 e2 02             	shl    edx,0x2
c00138b2:	01 d0                	add    eax,edx
c00138b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00138b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00138ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138be:	83 e0 01             	and    eax,0x1
c00138c1:	0f 84 ab 00 00 00    	je     c0013972 <VAS::~VAS()+0x11c>
c00138c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00138cf:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00138d7:	7f 74                	jg     c001394d <VAS::~VAS()+0xf7>
c00138d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138dd:	c1 e0 0a             	shl    eax,0xa
c00138e0:	89 c2                	mov    edx,eax
c00138e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00138e6:	01 d0                	add    eax,edx
c00138e8:	c1 e0 0c             	shl    eax,0xc
c00138eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138ef:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00138f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00138f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00138f9:	8b 80 72 05 00 00    	mov    eax,DWORD PTR [eax+0x572]
c00138ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013903:	6a 01                	push   0x1
c0013905:	50                   	push   eax
c0013906:	e8 8b fc ff ff       	call   c0013596 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001390b:	83 c4 0c             	add    esp,0xc
c001390e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013912:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013916:	8b 00                	mov    eax,DWORD PTR [eax]
c0013918:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001391c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013920:	25 01 04 00 00       	and    eax,0x401
c0013925:	3d 01 04 00 00       	cmp    eax,0x401
c001392a:	75 1a                	jne    c0013946 <VAS::~VAS()+0xf0>
c001392c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013930:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013935:	83 ec 0c             	sub    esp,0xc
c0013938:	50                   	push   eax
c0013939:	e8 7d c6 ff ff       	call   c000ffbb <Phys::freePage(unsigned long)>
c001393e:	83 c4 10             	add    esp,0x10
c0013941:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013946:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c001394b:	eb 82                	jmp    c00138cf <VAS::~VAS()+0x79>
c001394d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013951:	25 00 04 00 00       	and    eax,0x400
c0013956:	74 1a                	je     c0013972 <VAS::~VAS()+0x11c>
c0013958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001395c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013961:	83 ec 0c             	sub    esp,0xc
c0013964:	50                   	push   eax
c0013965:	e8 51 c6 ff ff       	call   c000ffbb <Phys::freePage(unsigned long)>
c001396a:	83 c4 10             	add    esp,0x10
c001396d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013972:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013977:	e9 1a ff ff ff       	jmp    c0013896 <VAS::~VAS()+0x40>
c001397c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013980:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013983:	83 ec 0c             	sub    esp,0xc
c0013986:	50                   	push   eax
c0013987:	e8 57 fc ff ff       	call   c00135e3 <Virt::freeKernelVirtualPages(unsigned long)>
c001398c:	83 c4 10             	add    esp,0x10
c001398f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013993:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013996:	83 ec 0c             	sub    esp,0xc
c0013999:	50                   	push   eax
c001399a:	e8 1c c6 ff ff       	call   c000ffbb <Phys::freePage(unsigned long)>
c001399f:	83 c4 10             	add    esp,0x10
c00139a2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00139a7:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00139af:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00139b4:	85 c0                	test   eax,eax
c00139b6:	75 01                	jne    c00139b9 <VAS::~VAS()+0x163>
c00139b8:	fb                   	sti    
c00139b9:	90                   	nop
c00139ba:	83 c4 2c             	add    esp,0x2c
c00139bd:	c3                   	ret    

c00139be <VAS::mapPage(unsigned long, unsigned long, int)>:
c00139be:	55                   	push   ebp
c00139bf:	57                   	push   edi
c00139c0:	56                   	push   esi
c00139c1:	53                   	push   ebx
c00139c2:	83 ec 1c             	sub    esp,0x1c
c00139c5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00139c9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00139cd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00139d1:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00139d7:	77 08                	ja     c00139e1 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c00139d9:	0f 20 d8             	mov    eax,cr3
c00139dc:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00139df:	75 43                	jne    c0013a24 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00139e1:	89 d8                	mov    eax,ebx
c00139e3:	09 f8                	or     eax,edi
c00139e5:	a9 ff 0f 00 00       	test   eax,0xfff
c00139ea:	75 53                	jne    c0013a3f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c00139ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00139ef:	89 de                	mov    esi,ebx
c00139f1:	c1 ee 16             	shr    esi,0x16
c00139f4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00139fb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00139ff:	74 50                	je     c0013a51 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0013a01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013a05:	c1 eb 0a             	shr    ebx,0xa
c0013a08:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013a0e:	c1 e6 0c             	shl    esi,0xc
c0013a11:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013a17:	09 c7                	or     edi,eax
c0013a19:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0013a1c:	83 c4 1c             	add    esp,0x1c
c0013a1f:	5b                   	pop    ebx
c0013a20:	5e                   	pop    esi
c0013a21:	5f                   	pop    edi
c0013a22:	5d                   	pop    ebp
c0013a23:	c3                   	ret    
c0013a24:	83 ec 0c             	sub    esp,0xc
c0013a27:	68 44 44 02 c0       	push   0xc0024444
c0013a2c:	e8 1d 35 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013a31:	89 d8                	mov    eax,ebx
c0013a33:	83 c4 10             	add    esp,0x10
c0013a36:	09 f8                	or     eax,edi
c0013a38:	a9 ff 0f 00 00       	test   eax,0xfff
c0013a3d:	74 ad                	je     c00139ec <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013a3f:	83 ec 0c             	sub    esp,0xc
c0013a42:	68 ac 44 02 c0       	push   0xc00244ac
c0013a47:	e8 de c3 ff ff       	call   c000fe2a <KePanic(char const*)>
c0013a4c:	83 c4 10             	add    esp,0x10
c0013a4f:	eb 9b                	jmp    c00139ec <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013a51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013a55:	e8 ca c5 ff ff       	call   c0010024 <Phys::allocatePage()>
c0013a5a:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013a60:	83 ec 0c             	sub    esp,0xc
c0013a63:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013a67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013a6b:	6a 01                	push   0x1
c0013a6d:	e8 73 f8 ff ff       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c0013a72:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013a79:	6a 01                	push   0x1
c0013a7b:	50                   	push   eax
c0013a7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a80:	52                   	push   edx
c0013a81:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013a85:	51                   	push   ecx
c0013a86:	e8 2d 01 00 00       	call   c0013bb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013a8b:	83 c4 1c             	add    esp,0x1c
c0013a8e:	68 00 10 00 00       	push   0x1000
c0013a93:	6a 00                	push   0x0
c0013a95:	50                   	push   eax
c0013a96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a9a:	e8 51 ca fe ff       	call   c00004f0 <memset>
c0013a9f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013aa3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013aa6:	e8 38 fb ff ff       	call   c00135e3 <Virt::freeKernelVirtualPages(unsigned long)>
c0013aab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013aaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ab3:	83 c4 10             	add    esp,0x10
c0013ab6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0013ab9:	0d 07 04 00 00       	or     eax,0x407
c0013abe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0013ac1:	e9 3b ff ff ff       	jmp    c0013a01 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0013ac6 <VAS::allocatePages(int, int)>:
c0013ac6:	55                   	push   ebp
c0013ac7:	57                   	push   edi
c0013ac8:	56                   	push   esi
c0013ac9:	53                   	push   ebx
c0013aca:	83 ec 1c             	sub    esp,0x1c
c0013acd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013ad1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013ad5:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013ad9:	75 75                	jne    c0013b50 <VAS::allocatePages(int, int)+0x8a>
c0013adb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013ade:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ae2:	85 c0                	test   eax,eax
c0013ae4:	74 49                	je     c0013b2f <VAS::allocatePages(int, int)+0x69>
c0013ae6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013aea:	89 d5                	mov    ebp,edx
c0013aec:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013af0:	c1 e5 0c             	shl    ebp,0xc
c0013af3:	01 dd                	add    ebp,ebx
c0013af5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013af8:	81 cf 00 04 00 00    	or     edi,0x400
c0013afe:	85 d2                	test   edx,edx
c0013b00:	7e 1b                	jle    c0013b1d <VAS::allocatePages(int, int)+0x57>
c0013b02:	e8 1d c5 ff ff       	call   c0010024 <Phys::allocatePage()>
c0013b07:	57                   	push   edi
c0013b08:	53                   	push   ebx
c0013b09:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013b0f:	50                   	push   eax
c0013b10:	56                   	push   esi
c0013b11:	e8 a8 fe ff ff       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b16:	83 c4 10             	add    esp,0x10
c0013b19:	39 dd                	cmp    ebp,ebx
c0013b1b:	75 e5                	jne    c0013b02 <VAS::allocatePages(int, int)+0x3c>
c0013b1d:	0f 20 d8             	mov    eax,cr3
c0013b20:	0f 22 d8             	mov    cr3,eax
c0013b23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b27:	83 c4 1c             	add    esp,0x1c
c0013b2a:	5b                   	pop    ebx
c0013b2b:	5e                   	pop    esi
c0013b2c:	5f                   	pop    edi
c0013b2d:	5d                   	pop    ebp
c0013b2e:	c3                   	ret    
c0013b2f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013b33:	83 ec 0c             	sub    esp,0xc
c0013b36:	68 d0 44 02 c0       	push   0xc00244d0
c0013b3b:	e8 ea c2 ff ff       	call   c000fe2a <KePanic(char const*)>
c0013b40:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b43:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013b47:	83 c4 10             	add    esp,0x10
c0013b4a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013b4e:	eb 96                	jmp    c0013ae6 <VAS::allocatePages(int, int)+0x20>
c0013b50:	83 ec 0c             	sub    esp,0xc
c0013b53:	52                   	push   edx
c0013b54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0013b58:	e8 88 f7 ff ff       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c0013b5d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013b61:	83 c4 10             	add    esp,0x10
c0013b64:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013b69:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013b6d:	77 38                	ja     c0013ba7 <VAS::allocatePages(int, int)+0xe1>
c0013b6f:	85 d2                	test   edx,edx
c0013b71:	7e aa                	jle    c0013b1d <VAS::allocatePages(int, int)+0x57>
c0013b73:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013b77:	c1 e2 0c             	shl    edx,0xc
c0013b7a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013b7e:	81 cf 00 04 00 00    	or     edi,0x400
c0013b84:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0013b87:	e8 98 c4 ff ff       	call   c0010024 <Phys::allocatePage()>
c0013b8c:	57                   	push   edi
c0013b8d:	53                   	push   ebx
c0013b8e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013b94:	50                   	push   eax
c0013b95:	56                   	push   esi
c0013b96:	e8 23 fe ff ff       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b9b:	83 c4 10             	add    esp,0x10
c0013b9e:	39 dd                	cmp    ebp,ebx
c0013ba0:	75 e5                	jne    c0013b87 <VAS::allocatePages(int, int)+0xc1>
c0013ba2:	e9 76 ff ff ff       	jmp    c0013b1d <VAS::allocatePages(int, int)+0x57>
c0013ba7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013bab:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013bb0:	09 c1                	or     ecx,eax
c0013bb2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013bb6:	eb b7                	jmp    c0013b6f <VAS::allocatePages(int, int)+0xa9>

c0013bb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013bb8:	55                   	push   ebp
c0013bb9:	57                   	push   edi
c0013bba:	56                   	push   esi
c0013bbb:	53                   	push   ebx
c0013bbc:	83 ec 1c             	sub    esp,0x1c
c0013bbf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013bc3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013bc7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013bcb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0013bcf:	85 db                	test   ebx,ebx
c0013bd1:	7e 2c                	jle    c0013bff <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0013bd3:	c1 e3 0c             	shl    ebx,0xc
c0013bd6:	8d 04 33             	lea    eax,[ebx+esi*1]
c0013bd9:	89 f3                	mov    ebx,esi
c0013bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013bdf:	55                   	push   ebp
c0013be0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013be4:	29 f2                	sub    edx,esi
c0013be6:	01 da                	add    edx,ebx
c0013be8:	52                   	push   edx
c0013be9:	53                   	push   ebx
c0013bea:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013bf0:	57                   	push   edi
c0013bf1:	e8 c8 fd ff ff       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c0013bf6:	83 c4 10             	add    esp,0x10
c0013bf9:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0013bfd:	75 e0                	jne    c0013bdf <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0013bff:	0f 20 d8             	mov    eax,cr3
c0013c02:	0f 22 d8             	mov    cr3,eax
c0013c05:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013c09:	83 c4 1c             	add    esp,0x1c
c0013c0c:	5b                   	pop    ebx
c0013c0d:	5e                   	pop    esi
c0013c0e:	5f                   	pop    edi
c0013c0f:	5d                   	pop    ebp
c0013c10:	c3                   	ret    
c0013c11:	90                   	nop

c0013c12 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013c12:	55                   	push   ebp
c0013c13:	57                   	push   edi
c0013c14:	56                   	push   esi
c0013c15:	53                   	push   ebx
c0013c16:	83 ec 1c             	sub    esp,0x1c
c0013c19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c1d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013c21:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013c25:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013c2d:	09 d8                	or     eax,ebx
c0013c2f:	a9 ff 0f 00 00       	test   eax,0xfff
c0013c34:	75 4b                	jne    c0013c81 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013c36:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013c39:	89 de                	mov    esi,ebx
c0013c3b:	c1 ee 16             	shr    esi,0x16
c0013c3e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0013c45:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0013c49:	74 48                	je     c0013c93 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0013c4b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0013c50:	c1 eb 0a             	shr    ebx,0xa
c0013c53:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013c57:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013c5b:	83 ff 01             	cmp    edi,0x1
c0013c5e:	19 c0                	sbb    eax,eax
c0013c60:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013c66:	c1 e6 0c             	shl    esi,0xc
c0013c69:	25 00 00 c0 ff       	and    eax,0xffc00000
c0013c6e:	01 f3                	add    ebx,esi
c0013c70:	09 ca                	or     edx,ecx
c0013c72:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0013c79:	83 c4 1c             	add    esp,0x1c
c0013c7c:	5b                   	pop    ebx
c0013c7d:	5e                   	pop    esi
c0013c7e:	5f                   	pop    edi
c0013c7f:	5d                   	pop    ebp
c0013c80:	c3                   	ret    
c0013c81:	83 ec 0c             	sub    esp,0xc
c0013c84:	68 fc 44 02 c0       	push   0xc00244fc
c0013c89:	e8 9c c1 ff ff       	call   c000fe2a <KePanic(char const*)>
c0013c8e:	83 c4 10             	add    esp,0x10
c0013c91:	eb a3                	jmp    c0013c36 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0013c93:	e8 8c c3 ff ff       	call   c0010024 <Phys::allocatePage()>
c0013c98:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013c9e:	83 ec 0c             	sub    esp,0xc
c0013ca1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013ca5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ca9:	6a 01                	push   0x1
c0013cab:	e8 35 f6 ff ff       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c0013cb0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013cb7:	6a 01                	push   0x1
c0013cb9:	50                   	push   eax
c0013cba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cbe:	50                   	push   eax
c0013cbf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013cc3:	51                   	push   ecx
c0013cc4:	e8 ef fe ff ff       	call   c0013bb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013cc9:	83 c4 1c             	add    esp,0x1c
c0013ccc:	68 00 10 00 00       	push   0x1000
c0013cd1:	6a 00                	push   0x0
c0013cd3:	50                   	push   eax
c0013cd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cd8:	e8 13 c8 fe ff       	call   c00004f0 <memset>
c0013cdd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013ce1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013ce4:	e8 fa f8 ff ff       	call   c00135e3 <Virt::freeKernelVirtualPages(unsigned long)>
c0013ce9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ced:	83 c4 10             	add    esp,0x10
c0013cf0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013cf3:	81 ca 07 04 00 00    	or     edx,0x407
c0013cf9:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0013cfc:	e9 4a ff ff ff       	jmp    c0013c4b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0013d01:	90                   	nop

c0013d02 <VAS::VAS(bool)>:
c0013d02:	53                   	push   ebx
c0013d03:	83 ec 28             	sub    esp,0x28
c0013d06:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d0a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013d0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013d24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d28:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013d2c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013d2f:	e8 f0 c2 ff ff       	call   c0010024 <Phys::allocatePage()>
c0013d34:	89 c2                	mov    edx,eax
c0013d36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d3a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013d3d:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c0013d43:	83 ec 0c             	sub    esp,0xc
c0013d46:	6a 01                	push   0x1
c0013d48:	e8 98 f5 ff ff       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c0013d4d:	83 c4 10             	add    esp,0x10
c0013d50:	89 c2                	mov    edx,eax
c0013d52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d56:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d59:	83 ec 0c             	sub    esp,0xc
c0013d5c:	6a 03                	push   0x3
c0013d5e:	6a 01                	push   0x1
c0013d60:	52                   	push   edx
c0013d61:	50                   	push   eax
c0013d62:	53                   	push   ebx
c0013d63:	e8 50 fe ff ff       	call   c0013bb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013d68:	83 c4 20             	add    esp,0x20
c0013d6b:	89 c2                	mov    edx,eax
c0013d6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d71:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013d74:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013d7c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013d84:	7f 1d                	jg     c0013da3 <VAS::VAS(bool)+0xa1>
c0013d86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d8a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013d91:	c1 e2 02             	shl    edx,0x2
c0013d94:	01 d0                	add    eax,edx
c0013d96:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013d9c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013da1:	eb d9                	jmp    c0013d7c <VAS::VAS(bool)+0x7a>
c0013da3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013dab:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013db3:	7f 59                	jg     c0013e0e <VAS::VAS(bool)+0x10c>
c0013db5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013db9:	2d 00 02 00 00       	sub    eax,0x200
c0013dbe:	c1 e0 0c             	shl    eax,0xc
c0013dc1:	89 c2                	mov    edx,eax
c0013dc3:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013dc8:	89 d1                	mov    ecx,edx
c0013dca:	09 c1                	or     ecx,eax
c0013dcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013dd3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dd7:	c1 e2 02             	shl    edx,0x2
c0013dda:	01 d0                	add    eax,edx
c0013ddc:	83 c9 05             	or     ecx,0x5
c0013ddf:	89 ca                	mov    edx,ecx
c0013de1:	89 10                	mov    DWORD PTR [eax],edx
c0013de3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013de7:	2d 40 03 00 00       	sub    eax,0x340
c0013dec:	83 f8 7f             	cmp    eax,0x7f
c0013def:	77 16                	ja     c0013e07 <VAS::VAS(bool)+0x105>
c0013df1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013df5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013df8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dfc:	c1 e2 02             	shl    edx,0x2
c0013dff:	01 d0                	add    eax,edx
c0013e01:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013e07:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013e0c:	eb 9d                	jmp    c0013dab <VAS::VAS(bool)+0xa9>
c0013e0e:	8b 15 e8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae8
c0013e14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e1b:	05 20 0c 00 00       	add    eax,0xc20
c0013e20:	81 ca 03 40 00 00    	or     edx,0x4003
c0013e26:	89 10                	mov    DWORD PTR [eax],edx
c0013e28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e2c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013e2f:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013e34:	09 c2                	or     edx,eax
c0013e36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e3d:	05 fc 0f 00 00       	add    eax,0xffc
c0013e42:	83 ca 03             	or     edx,0x3
c0013e45:	89 10                	mov    DWORD PTR [eax],edx
c0013e47:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0013e4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e52:	83 ec 0c             	sub    esp,0xc
c0013e55:	50                   	push   eax
c0013e56:	e8 9d 5d ff ff       	call   c0009bf8 <Device::getName()>
c0013e5b:	83 c4 10             	add    esp,0x10
c0013e5e:	83 ec 08             	sub    esp,0x8
c0013e61:	68 df 49 02 c0       	push   0xc00249df
c0013e66:	50                   	push   eax
c0013e67:	e8 14 c9 fe ff       	call   c0000780 <strcmp>
c0013e6c:	83 c4 10             	add    esp,0x10
c0013e6f:	85 c0                	test   eax,eax
c0013e71:	0f 94 c0             	sete   al
c0013e74:	0f b6 c0             	movzx  eax,al
c0013e77:	85 c0                	test   eax,eax
c0013e79:	74 68                	je     c0013ee3 <VAS::VAS(bool)+0x1e1>
c0013e7b:	fa                   	cli    
c0013e7c:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0013e81:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e87:	05 68 09 00 00       	add    eax,0x968
c0013e8c:	83 ec 0c             	sub    esp,0xc
c0013e8f:	50                   	push   eax
c0013e90:	e8 2d b0 ff ff       	call   c000eec2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013e95:	83 c4 10             	add    esp,0x10
c0013e98:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013e9d:	89 c3                	mov    ebx,eax
c0013e9f:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0013ea4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013eaa:	05 68 09 00 00       	add    eax,0x968
c0013eaf:	83 ec 0c             	sub    esp,0xc
c0013eb2:	50                   	push   eax
c0013eb3:	e8 0a b0 ff ff       	call   c000eec2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013eb8:	83 c4 10             	add    esp,0x10
c0013ebb:	83 ec 08             	sub    esp,0x8
c0013ebe:	50                   	push   eax
c0013ebf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013ec3:	e8 fc f6 ff ff       	call   c00135c4 <VAS::getPageTableEntry(unsigned long)>
c0013ec8:	83 c4 10             	add    esp,0x10
c0013ecb:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ecd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ed2:	6a 11                	push   0x11
c0013ed4:	53                   	push   ebx
c0013ed5:	50                   	push   eax
c0013ed6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013eda:	e8 df fa ff ff       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c0013edf:	83 c4 10             	add    esp,0x10
c0013ee2:	fb                   	sti    
c0013ee3:	90                   	nop
c0013ee4:	83 c4 28             	add    esp,0x28
c0013ee7:	5b                   	pop    ebx
c0013ee8:	c3                   	ret    
c0013ee9:	90                   	nop

c0013eea <VAS::evict(unsigned long)>:
c0013eea:	55                   	push   ebp
c0013eeb:	57                   	push   edi
c0013eec:	56                   	push   esi
c0013eed:	53                   	push   ebx
c0013eee:	83 ec 24             	sub    esp,0x24
c0013ef1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013ef5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013ef9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013efd:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013f02:	50                   	push   eax
c0013f03:	68 ed 49 02 c0       	push   0xc00249ed
c0013f08:	e8 41 30 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013f0d:	e8 28 f5 ff ff       	call   c001343a <Virt::allocateSwapfilePage()>
c0013f12:	83 c4 10             	add    esp,0x10
c0013f15:	89 c7                	mov    edi,eax
c0013f17:	a1 ec 66 02 c0       	mov    eax,ds:0xc00266ec
c0013f1c:	85 c0                	test   eax,eax
c0013f1e:	7e 40                	jle    c0013f60 <VAS::evict(unsigned long)+0x76>
c0013f20:	89 ee                	mov    esi,ebp
c0013f22:	31 db                	xor    ebx,ebx
c0013f24:	83 ec 0c             	sub    esp,0xc
c0013f27:	57                   	push   edi
c0013f28:	e8 f7 f4 ff ff       	call   c0013424 <Virt::swapIDToSector(unsigned long)>
c0013f2d:	31 d2                	xor    edx,edx
c0013f2f:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f32:	81 c6 00 02 00 00    	add    esi,0x200
c0013f38:	6a 01                	push   0x1
c0013f3a:	52                   	push   edx
c0013f3b:	01 d8                	add    eax,ebx
c0013f3d:	83 c3 01             	add    ebx,0x1
c0013f40:	50                   	push   eax
c0013f41:	0f be 05 f8 66 02 c0 	movsx  eax,BYTE PTR ds:0xc00266f8
c0013f48:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c0013f4f:	50                   	push   eax
c0013f50:	e8 07 6b ff ff       	call   c000aa5c <LogicalDisk::write(unsigned long long, int, void*)>
c0013f55:	83 c4 20             	add    esp,0x20
c0013f58:	39 1d ec 66 02 c0    	cmp    DWORD PTR ds:0xc00266ec,ebx
c0013f5e:	7f c4                	jg     c0013f24 <VAS::evict(unsigned long)+0x3a>
c0013f60:	c1 e7 0c             	shl    edi,0xc
c0013f63:	83 ec 08             	sub    esp,0x8
c0013f66:	55                   	push   ebp
c0013f67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f6b:	50                   	push   eax
c0013f6c:	e8 53 f6 ff ff       	call   c00135c4 <VAS::getPageTableEntry(unsigned long)>
c0013f71:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f73:	89 d3                	mov    ebx,edx
c0013f75:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013f7b:	09 d7                	or     edi,edx
c0013f7d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013f83:	89 38                	mov    DWORD PTR [eax],edi
c0013f85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f88:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c0013f8e:	83 c2 01             	add    edx,0x1
c0013f91:	89 15 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,edx
c0013f97:	e8 1f c0 ff ff       	call   c000ffbb <Phys::freePage(unsigned long)>
c0013f9c:	0f 20 d8             	mov    eax,cr3
c0013f9f:	0f 22 d8             	mov    cr3,eax
c0013fa2:	8b 0d 48 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e248
c0013fa8:	51                   	push   ecx
c0013fa9:	55                   	push   ebp
c0013faa:	53                   	push   ebx
c0013fab:	68 20 45 02 c0       	push   0xc0024520
c0013fb0:	e8 99 2f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013fb5:	a1 44 e2 02 c0       	mov    eax,ds:0xc002e244
c0013fba:	83 c4 18             	add    esp,0x18
c0013fbd:	50                   	push   eax
c0013fbe:	68 02 4a 02 c0       	push   0xc0024a02
c0013fc3:	8d 50 01             	lea    edx,[eax+0x1]
c0013fc6:	89 15 44 e2 02 c0    	mov    DWORD PTR ds:0xc002e244,edx
c0013fcc:	e8 7d 2f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013fd1:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013fd6:	c7 44 24 40 14 4a 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024a14
c0013fde:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013fe2:	83 c4 2c             	add    esp,0x2c
c0013fe5:	5b                   	pop    ebx
c0013fe6:	5e                   	pop    esi
c0013fe7:	5f                   	pop    edi
c0013fe8:	5d                   	pop    ebp
c0013fe9:	e9 60 2f ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0013fee <VAS::canLockPage(unsigned long)>:
c0013fee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ff2:	50                   	push   eax
c0013ff3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013ff7:	52                   	push   edx
c0013ff8:	e8 c7 f5 ff ff       	call   c00135c4 <VAS::getPageTableEntry(unsigned long)>
c0013ffd:	59                   	pop    ecx
c0013ffe:	5a                   	pop    edx
c0013fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0014001:	c1 e8 0b             	shr    eax,0xb
c0014004:	83 e0 01             	and    eax,0x1
c0014007:	c3                   	ret    

c0014008 <VAS::unlockPage(unsigned long)>:
c0014008:	83 ec 0c             	sub    esp,0xc
c001400b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001400f:	50                   	push   eax
c0014010:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014014:	52                   	push   edx
c0014015:	e8 aa f5 ff ff       	call   c00135c4 <VAS::getPageTableEntry(unsigned long)>
c001401a:	59                   	pop    ecx
c001401b:	5a                   	pop    edx
c001401c:	8b 10                	mov    edx,DWORD PTR [eax]
c001401e:	f6 c6 08             	test   dh,0x8
c0014021:	75 09                	jne    c001402c <VAS::unlockPage(unsigned long)+0x24>
c0014023:	80 ce 08             	or     dh,0x8
c0014026:	89 10                	mov    DWORD PTR [eax],edx
c0014028:	83 c4 0c             	add    esp,0xc
c001402b:	c3                   	ret    
c001402c:	c7 44 24 10 54 45 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024554
c0014034:	83 c4 0c             	add    esp,0xc
c0014037:	e9 ee bd ff ff       	jmp    c000fe2a <KePanic(char const*)>

c001403c <VAS::canLockPages(unsigned long, int)>:
c001403c:	55                   	push   ebp
c001403d:	57                   	push   edi
c001403e:	56                   	push   esi
c001403f:	53                   	push   ebx
c0014040:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014044:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0014048:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001404c:	85 ff                	test   edi,edi
c001404e:	7e 23                	jle    c0014073 <VAS::canLockPages(unsigned long, int)+0x37>
c0014050:	31 f6                	xor    esi,esi
c0014052:	eb 0d                	jmp    c0014061 <VAS::canLockPages(unsigned long, int)+0x25>
c0014054:	83 c6 01             	add    esi,0x1
c0014057:	81 c3 00 10 00 00    	add    ebx,0x1000
c001405d:	39 f7                	cmp    edi,esi
c001405f:	74 0d                	je     c001406e <VAS::canLockPages(unsigned long, int)+0x32>
c0014061:	53                   	push   ebx
c0014062:	55                   	push   ebp
c0014063:	e8 86 ff ff ff       	call   c0013fee <VAS::canLockPage(unsigned long)>
c0014068:	5a                   	pop    edx
c0014069:	59                   	pop    ecx
c001406a:	84 c0                	test   al,al
c001406c:	75 e6                	jne    c0014054 <VAS::canLockPages(unsigned long, int)+0x18>
c001406e:	5b                   	pop    ebx
c001406f:	5e                   	pop    esi
c0014070:	5f                   	pop    edi
c0014071:	5d                   	pop    ebp
c0014072:	c3                   	ret    
c0014073:	b0 01                	mov    al,0x1
c0014075:	eb f7                	jmp    c001406e <VAS::canLockPages(unsigned long, int)+0x32>
c0014077:	90                   	nop

c0014078 <VAS::unlockPages(unsigned long, int)>:
c0014078:	55                   	push   ebp
c0014079:	57                   	push   edi
c001407a:	56                   	push   esi
c001407b:	53                   	push   ebx
c001407c:	83 ec 0c             	sub    esp,0xc
c001407f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014083:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014087:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001408b:	85 ff                	test   edi,edi
c001408d:	7e 1c                	jle    c00140ab <VAS::unlockPages(unsigned long, int)+0x33>
c001408f:	31 f6                	xor    esi,esi
c0014091:	83 ec 08             	sub    esp,0x8
c0014094:	83 c6 01             	add    esi,0x1
c0014097:	53                   	push   ebx
c0014098:	81 c3 00 10 00 00    	add    ebx,0x1000
c001409e:	55                   	push   ebp
c001409f:	e8 64 ff ff ff       	call   c0014008 <VAS::unlockPage(unsigned long)>
c00140a4:	83 c4 10             	add    esp,0x10
c00140a7:	39 f7                	cmp    edi,esi
c00140a9:	75 e6                	jne    c0014091 <VAS::unlockPages(unsigned long, int)+0x19>
c00140ab:	83 c4 0c             	add    esp,0xc
c00140ae:	5b                   	pop    ebx
c00140af:	5e                   	pop    esi
c00140b0:	5f                   	pop    edi
c00140b1:	5d                   	pop    ebp
c00140b2:	c3                   	ret    
c00140b3:	90                   	nop

c00140b4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00140b4:	55                   	push   ebp
c00140b5:	57                   	push   edi
c00140b6:	56                   	push   esi
c00140b7:	53                   	push   ebx
c00140b8:	81 ec 0c 10 00 00    	sub    esp,0x100c
c00140be:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c00140c5:	89 f3                	mov    ebx,esi
c00140c7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00140cd:	53                   	push   ebx
c00140ce:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c00140d5:	50                   	push   eax
c00140d6:	e8 e9 f4 ff ff       	call   c00135c4 <VAS::getPageTableEntry(unsigned long)>
c00140db:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c00140e1:	5a                   	pop    edx
c00140e2:	59                   	pop    ecx
c00140e3:	89 c5                	mov    ebp,eax
c00140e5:	0f 87 cb 00 00 00    	ja     c00141b6 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c00140eb:	83 ec 08             	sub    esp,0x8
c00140ee:	56                   	push   esi
c00140ef:	68 84 45 02 c0       	push   0xc0024584
c00140f4:	e8 55 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00140f9:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00140fe:	5e                   	pop    esi
c00140ff:	5f                   	pop    edi
c0014100:	50                   	push   eax
c0014101:	68 b4 45 02 c0       	push   0xc00245b4
c0014106:	e8 43 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001410b:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014111:	58                   	pop    eax
c0014112:	5a                   	pop    edx
c0014113:	51                   	push   ecx
c0014114:	68 d8 45 02 c0       	push   0xc00245d8
c0014119:	e8 30 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001411e:	83 c4 10             	add    esp,0x10
c0014121:	85 db                	test   ebx,ebx
c0014123:	74 5b                	je     c0014180 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0014125:	85 ed                	test   ebp,ebp
c0014127:	74 21                	je     c001414a <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c0014129:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c001412c:	f7 c6 00 02 00 00    	test   esi,0x200
c0014132:	0f 85 c5 00 00 00    	jne    c00141fd <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c0014138:	89 f0                	mov    eax,esi
c001413a:	25 01 04 00 00       	and    eax,0x401
c001413f:	3d 00 04 00 00       	cmp    eax,0x400
c0014144:	0f 84 39 01 00 00    	je     c0014283 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c001414a:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c001414f:	83 ec 08             	sub    esp,0x8
c0014152:	50                   	push   eax
c0014153:	68 cc 47 02 c0       	push   0xc00247cc
c0014158:	e8 f1 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001415d:	8b 1d 30 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea30
c0014163:	5a                   	pop    edx
c0014164:	59                   	pop    ecx
c0014165:	53                   	push   ebx
c0014166:	68 f0 47 02 c0       	push   0xc00247f0
c001416b:	e8 de 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014170:	83 c4 10             	add    esp,0x10
c0014173:	31 c0                	xor    eax,eax
c0014175:	81 c4 0c 10 00 00    	add    esp,0x100c
c001417b:	5b                   	pop    ebx
c001417c:	5e                   	pop    esi
c001417d:	5f                   	pop    edi
c001417e:	5d                   	pop    ebp
c001417f:	c3                   	ret    
c0014180:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0014185:	83 ec 08             	sub    esp,0x8
c0014188:	50                   	push   eax
c0014189:	68 fc 45 02 c0       	push   0xc00245fc
c001418e:	e8 bb 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014193:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014199:	58                   	pop    eax
c001419a:	5a                   	pop    edx
c001419b:	51                   	push   ecx
c001419c:	68 20 46 02 c0       	push   0xc0024620
c00141a1:	e8 a8 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00141a6:	83 c4 10             	add    esp,0x10
c00141a9:	31 c0                	xor    eax,eax
c00141ab:	81 c4 0c 10 00 00    	add    esp,0x100c
c00141b1:	5b                   	pop    ebx
c00141b2:	5e                   	pop    esi
c00141b3:	5f                   	pop    edi
c00141b4:	5d                   	pop    ebp
c00141b5:	c3                   	ret    
c00141b6:	83 ec 0c             	sub    esp,0xc
c00141b9:	68 29 4a 02 c0       	push   0xc0024a29
c00141be:	e8 67 bc ff ff       	call   c000fe2a <KePanic(char const*)>
c00141c3:	5f                   	pop    edi
c00141c4:	58                   	pop    eax
c00141c5:	56                   	push   esi
c00141c6:	68 84 45 02 c0       	push   0xc0024584
c00141cb:	e8 7e 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00141d0:	8b 0d 0c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea0c
c00141d6:	58                   	pop    eax
c00141d7:	5a                   	pop    edx
c00141d8:	51                   	push   ecx
c00141d9:	68 b4 45 02 c0       	push   0xc00245b4
c00141de:	e8 6b 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00141e3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00141e8:	5e                   	pop    esi
c00141e9:	5f                   	pop    edi
c00141ea:	50                   	push   eax
c00141eb:	68 d8 45 02 c0       	push   0xc00245d8
c00141f0:	e8 59 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00141f5:	83 c4 10             	add    esp,0x10
c00141f8:	e9 28 ff ff ff       	jmp    c0014125 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c00141fd:	83 ec 0c             	sub    esp,0xc
c0014200:	68 44 46 02 c0       	push   0xc0024644
c0014205:	e8 44 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001420a:	e8 15 be ff ff       	call   c0010024 <Phys::allocatePage()>
c001420f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014212:	83 ca 01             	or     edx,0x1
c0014215:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0014218:	0f 20 da             	mov    edx,cr3
c001421b:	0f 22 da             	mov    cr3,edx
c001421e:	ba 00 10 00 00       	mov    edx,0x1000
c0014223:	89 de                	mov    esi,ebx
c0014225:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014229:	89 d1                	mov    ecx,edx
c001422b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001422d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014230:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0014236:	09 c8                	or     eax,ecx
c0014238:	83 c8 02             	or     eax,0x2
c001423b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001423e:	0f 20 d8             	mov    eax,cr3
c0014241:	0f 22 d8             	mov    cr3,eax
c0014244:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014248:	89 df                	mov    edi,ebx
c001424a:	89 d1                	mov    ecx,edx
c001424c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001424e:	59                   	pop    ecx
c001424f:	8b 35 0c ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea0c
c0014255:	5b                   	pop    ebx
c0014256:	56                   	push   esi
c0014257:	68 64 46 02 c0       	push   0xc0024664
c001425c:	e8 ed 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014261:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014266:	5f                   	pop    edi
c0014267:	5d                   	pop    ebp
c0014268:	50                   	push   eax
c0014269:	68 88 46 02 c0       	push   0xc0024688
c001426e:	e8 db 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014273:	83 c4 10             	add    esp,0x10
c0014276:	b0 01                	mov    al,0x1
c0014278:	81 c4 0c 10 00 00    	add    esp,0x100c
c001427e:	5b                   	pop    ebx
c001427f:	5e                   	pop    esi
c0014280:	5f                   	pop    edi
c0014281:	5d                   	pop    ebp
c0014282:	c3                   	ret    
c0014283:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014288:	c1 ee 0c             	shr    esi,0xc
c001428b:	83 ec 08             	sub    esp,0x8
c001428e:	50                   	push   eax
c001428f:	68 ac 46 02 c0       	push   0xc00246ac
c0014294:	e8 b5 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014299:	e8 86 bd ff ff       	call   c0010024 <Phys::allocatePage()>
c001429e:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00142a4:	89 c7                	mov    edi,eax
c00142a6:	58                   	pop    eax
c00142a7:	5a                   	pop    edx
c00142a8:	51                   	push   ecx
c00142a9:	68 d0 46 02 c0       	push   0xc00246d0
c00142ae:	e8 9b 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00142b3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00142b6:	83 c4 10             	add    esp,0x10
c00142b9:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00142bf:	09 fa                	or     edx,edi
c00142c1:	31 ff                	xor    edi,edi
c00142c3:	81 ca 01 08 00 00    	or     edx,0x801
c00142c9:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00142cc:	89 dd                	mov    ebp,ebx
c00142ce:	a1 ec 66 02 c0       	mov    eax,ds:0xc00266ec
c00142d3:	85 c0                	test   eax,eax
c00142d5:	7e 61                	jle    c0014338 <VAS::tryLoadBackOffDisk(unsigned long)+0x284>
c00142d7:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00142dc:	83 ec 08             	sub    esp,0x8
c00142df:	50                   	push   eax
c00142e0:	68 84 47 02 c0       	push   0xc0024784
c00142e5:	e8 64 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00142ea:	89 34 24             	mov    DWORD PTR [esp],esi
c00142ed:	e8 32 f1 ff ff       	call   c0013424 <Virt::swapIDToSector(unsigned long)>
c00142f2:	31 d2                	xor    edx,edx
c00142f4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00142f7:	81 c5 00 02 00 00    	add    ebp,0x200
c00142fd:	6a 01                	push   0x1
c00142ff:	52                   	push   edx
c0014300:	01 f8                	add    eax,edi
c0014302:	83 c7 01             	add    edi,0x1
c0014305:	50                   	push   eax
c0014306:	0f be 05 f8 66 02 c0 	movsx  eax,BYTE PTR ds:0xc00266f8
c001430d:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c0014314:	50                   	push   eax
c0014315:	e8 d6 66 ff ff       	call   c000a9f0 <LogicalDisk::read(unsigned long long, int, void*)>
c001431a:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001431f:	83 c4 18             	add    esp,0x18
c0014322:	50                   	push   eax
c0014323:	68 a8 47 02 c0       	push   0xc00247a8
c0014328:	e8 21 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001432d:	83 c4 10             	add    esp,0x10
c0014330:	39 3d ec 66 02 c0    	cmp    DWORD PTR ds:0xc00266ec,edi
c0014336:	7f 9f                	jg     c00142d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x223>
c0014338:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001433d:	83 ec 08             	sub    esp,0x8
c0014340:	50                   	push   eax
c0014341:	68 f4 46 02 c0       	push   0xc00246f4
c0014346:	e8 03 2c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001434b:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0014350:	83 c4 0c             	add    esp,0xc
c0014353:	83 e8 01             	sub    eax,0x1
c0014356:	50                   	push   eax
c0014357:	53                   	push   ebx
c0014358:	68 3b 4a 02 c0       	push   0xc0024a3b
c001435d:	a3 48 e2 02 c0       	mov    ds:0xc002e248,eax
c0014362:	e8 e7 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014367:	89 34 24             	mov    DWORD PTR [esp],esi
c001436a:	e8 92 f0 ff ff       	call   c0013401 <Virt::freeSwapfilePage(unsigned long)>
c001436f:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014375:	58                   	pop    eax
c0014376:	5a                   	pop    edx
c0014377:	51                   	push   ecx
c0014378:	68 18 47 02 c0       	push   0xc0024718
c001437d:	e8 cc 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014382:	0f 20 d8             	mov    eax,cr3
c0014385:	0f 22 d8             	mov    cr3,eax
c0014388:	c7 04 24 50 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a50
c001438f:	e8 ba 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014394:	8b 3d 0c ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea0c
c001439a:	5b                   	pop    ebx
c001439b:	5e                   	pop    esi
c001439c:	57                   	push   edi
c001439d:	68 3c 47 02 c0       	push   0xc002473c
c00143a2:	e8 a7 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00143a7:	5d                   	pop    ebp
c00143a8:	58                   	pop    eax
c00143a9:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00143ae:	50                   	push   eax
c00143af:	68 60 47 02 c0       	push   0xc0024760
c00143b4:	e8 95 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00143b9:	83 c4 10             	add    esp,0x10
c00143bc:	b0 01                	mov    al,0x1
c00143be:	e9 b2 fd ff ff       	jmp    c0014175 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>
c00143c3:	90                   	nop

c00143c4 <VAS::lockPage(unsigned long)>:
c00143c4:	56                   	push   esi
c00143c5:	53                   	push   ebx
c00143c6:	83 ec 04             	sub    esp,0x4
c00143c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143d1:	50                   	push   eax
c00143d2:	56                   	push   esi
c00143d3:	e8 ec f1 ff ff       	call   c00135c4 <VAS::getPageTableEntry(unsigned long)>
c00143d8:	5a                   	pop    edx
c00143d9:	59                   	pop    ecx
c00143da:	89 c3                	mov    ebx,eax
c00143dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00143de:	a8 01                	test   al,0x1
c00143e0:	74 10                	je     c00143f2 <VAS::lockPage(unsigned long)+0x2e>
c00143e2:	f6 c4 08             	test   ah,0x8
c00143e5:	74 28                	je     c001440f <VAS::lockPage(unsigned long)+0x4b>
c00143e7:	80 e4 f7             	and    ah,0xf7
c00143ea:	89 03                	mov    DWORD PTR [ebx],eax
c00143ec:	83 c4 04             	add    esp,0x4
c00143ef:	5b                   	pop    ebx
c00143f0:	5e                   	pop    esi
c00143f1:	c3                   	ret    
c00143f2:	83 ec 08             	sub    esp,0x8
c00143f5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00143fa:	50                   	push   eax
c00143fb:	56                   	push   esi
c00143fc:	e8 b3 fc ff ff       	call   c00140b4 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014401:	83 c4 10             	add    esp,0x10
c0014404:	84 c0                	test   al,al
c0014406:	74 19                	je     c0014421 <VAS::lockPage(unsigned long)+0x5d>
c0014408:	8b 03                	mov    eax,DWORD PTR [ebx]
c001440a:	f6 c4 08             	test   ah,0x8
c001440d:	75 d8                	jne    c00143e7 <VAS::lockPage(unsigned long)+0x23>
c001440f:	c7 44 24 10 54 45 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024554
c0014417:	83 c4 04             	add    esp,0x4
c001441a:	5b                   	pop    ebx
c001441b:	5e                   	pop    esi
c001441c:	e9 09 ba ff ff       	jmp    c000fe2a <KePanic(char const*)>
c0014421:	83 ec 0c             	sub    esp,0xc
c0014424:	68 14 48 02 c0       	push   0xc0024814
c0014429:	e8 fc b9 ff ff       	call   c000fe2a <KePanic(char const*)>
c001442e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014430:	83 c4 10             	add    esp,0x10
c0014433:	eb ad                	jmp    c00143e2 <VAS::lockPage(unsigned long)+0x1e>
c0014435:	90                   	nop

c0014436 <VAS::lockPages(unsigned long, int)>:
c0014436:	55                   	push   ebp
c0014437:	57                   	push   edi
c0014438:	56                   	push   esi
c0014439:	53                   	push   ebx
c001443a:	83 ec 0c             	sub    esp,0xc
c001443d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014441:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014445:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014449:	85 ff                	test   edi,edi
c001444b:	7e 1c                	jle    c0014469 <VAS::lockPages(unsigned long, int)+0x33>
c001444d:	31 f6                	xor    esi,esi
c001444f:	83 ec 08             	sub    esp,0x8
c0014452:	83 c6 01             	add    esi,0x1
c0014455:	53                   	push   ebx
c0014456:	81 c3 00 10 00 00    	add    ebx,0x1000
c001445c:	55                   	push   ebp
c001445d:	e8 62 ff ff ff       	call   c00143c4 <VAS::lockPage(unsigned long)>
c0014462:	83 c4 10             	add    esp,0x10
c0014465:	39 f7                	cmp    edi,esi
c0014467:	75 e6                	jne    c001444f <VAS::lockPages(unsigned long, int)+0x19>
c0014469:	83 c4 0c             	add    esp,0xc
c001446c:	5b                   	pop    ebx
c001446d:	5e                   	pop    esi
c001446e:	5f                   	pop    edi
c001446f:	5d                   	pop    ebp
c0014470:	c3                   	ret    
c0014471:	90                   	nop

c0014472 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014472:	55                   	push   ebp
c0014473:	57                   	push   edi
c0014474:	56                   	push   esi
c0014475:	53                   	push   ebx
c0014476:	83 ec 28             	sub    esp,0x28
c0014479:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001447d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014481:	50                   	push   eax
c0014482:	e8 5e ee ff ff       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c0014487:	83 c4 0c             	add    esp,0xc
c001448a:	6a 07                	push   0x7
c001448c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014490:	52                   	push   edx
c0014491:	89 c5                	mov    ebp,eax
c0014493:	53                   	push   ebx
c0014494:	e8 2d f6 ff ff       	call   c0013ac6 <VAS::allocatePages(int, int)>
c0014499:	83 c4 10             	add    esp,0x10
c001449c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00144a0:	89 c7                	mov    edi,eax
c00144a2:	85 c9                	test   ecx,ecx
c00144a4:	74 2f                	je     c00144d5 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c00144a6:	31 f6                	xor    esi,esi
c00144a8:	e8 77 bb ff ff       	call   c0010024 <Phys::allocatePage()>
c00144ad:	83 c6 01             	add    esi,0x1
c00144b0:	6a 03                	push   0x3
c00144b2:	55                   	push   ebp
c00144b3:	50                   	push   eax
c00144b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144b8:	53                   	push   ebx
c00144b9:	e8 00 f5 ff ff       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c00144be:	6a 07                	push   0x7
c00144c0:	57                   	push   edi
c00144c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00144c5:	50                   	push   eax
c00144c6:	53                   	push   ebx
c00144c7:	e8 f2 f4 ff ff       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c00144cc:	83 c4 20             	add    esp,0x20
c00144cf:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c00144d3:	75 d3                	jne    c00144a8 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c00144d5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00144d9:	89 28                	mov    DWORD PTR [eax],ebp
c00144db:	83 c4 1c             	add    esp,0x1c
c00144de:	89 f8                	mov    eax,edi
c00144e0:	5b                   	pop    ebx
c00144e1:	5e                   	pop    esi
c00144e2:	5f                   	pop    edi
c00144e3:	5d                   	pop    ebp
c00144e4:	c3                   	ret    
c00144e5:	90                   	nop

c00144e6 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c00144e6:	53                   	push   ebx
c00144e7:	83 ec 14             	sub    esp,0x14
c00144ea:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00144ee:	68 44 48 02 c0       	push   0xc0024844
c00144f3:	e8 56 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00144f8:	c7 04 24 a4 48 02 c0 	mov    DWORD PTR [esp],0xc00248a4
c00144ff:	e8 4a 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014504:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014508:	83 c4 18             	add    esp,0x18
c001450b:	5b                   	pop    ebx
c001450c:	e9 d2 f0 ff ff       	jmp    c00135e3 <Virt::freeKernelVirtualPages(unsigned long)>
c0014511:	90                   	nop

c0014512 <VAS::scanForEviction()>:
c0014512:	57                   	push   edi
c0014513:	56                   	push   esi
c0014514:	31 f6                	xor    esi,esi
c0014516:	53                   	push   ebx
c0014517:	83 ec 18             	sub    esp,0x18
c001451a:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001451f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014523:	50                   	push   eax
c0014524:	68 20 49 02 c0       	push   0xc0024920
c0014529:	e8 20 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001452e:	c7 04 24 57 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a57
c0014535:	e8 14 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001453a:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001453d:	83 c4 10             	add    esp,0x10
c0014540:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014546:	75 0e                	jne    c0014556 <VAS::scanForEviction()+0x44>
c0014548:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001454b:	89 da                	mov    edx,ebx
c001454d:	c1 ea 16             	shr    edx,0x16
c0014550:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014554:	74 5b                	je     c00145b1 <VAS::scanForEviction()+0x9f>
c0014556:	83 ec 08             	sub    esp,0x8
c0014559:	53                   	push   ebx
c001455a:	57                   	push   edi
c001455b:	e8 64 f0 ff ff       	call   c00135c4 <VAS::getPageTableEntry(unsigned long)>
c0014560:	83 c4 10             	add    esp,0x10
c0014563:	8b 10                	mov    edx,DWORD PTR [eax]
c0014565:	89 d1                	mov    ecx,edx
c0014567:	c1 e9 0c             	shr    ecx,0xc
c001456a:	74 10                	je     c001457c <VAS::scanForEviction()+0x6a>
c001456c:	89 d1                	mov    ecx,edx
c001456e:	81 e1 01 08 00 00    	and    ecx,0x801
c0014574:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001457a:	74 40                	je     c00145bc <VAS::scanForEviction()+0xaa>
c001457c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014582:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014588:	76 2d                	jbe    c00145b7 <VAS::scanForEviction()+0xa5>
c001458a:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014591:	83 c6 01             	add    esi,0x1
c0014594:	83 fe 03             	cmp    esi,0x3
c0014597:	74 32                	je     c00145cb <VAS::scanForEviction()+0xb9>
c0014599:	31 db                	xor    ebx,ebx
c001459b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00145a1:	75 b3                	jne    c0014556 <VAS::scanForEviction()+0x44>
c00145a3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00145a6:	89 da                	mov    edx,ebx
c00145a8:	c1 ea 16             	shr    edx,0x16
c00145ab:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00145af:	75 a5                	jne    c0014556 <VAS::scanForEviction()+0x44>
c00145b1:	81 c3 00 00 40 00    	add    ebx,0x400000
c00145b7:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c00145ba:	eb 84                	jmp    c0014540 <VAS::scanForEviction()+0x2e>
c00145bc:	f6 c2 20             	test   dl,0x20
c00145bf:	74 13                	je     c00145d4 <VAS::scanForEviction()+0xc2>
c00145c1:	83 e2 df             	and    edx,0xffffffdf
c00145c4:	89 10                	mov    DWORD PTR [eax],edx
c00145c6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00145c9:	eb b1                	jmp    c001457c <VAS::scanForEviction()+0x6a>
c00145cb:	83 c4 10             	add    esp,0x10
c00145ce:	31 c0                	xor    eax,eax
c00145d0:	5b                   	pop    ebx
c00145d1:	5e                   	pop    esi
c00145d2:	5f                   	pop    edi
c00145d3:	c3                   	ret    
c00145d4:	89 d0                	mov    eax,edx
c00145d6:	83 ec 08             	sub    esp,0x8
c00145d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00145de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145e2:	53                   	push   ebx
c00145e3:	68 73 4a 02 c0       	push   0xc0024a73
c00145e8:	e8 61 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00145ed:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00145f0:	58                   	pop    eax
c00145f1:	5a                   	pop    edx
c00145f2:	51                   	push   ecx
c00145f3:	57                   	push   edi
c00145f4:	e8 f1 f8 ff ff       	call   c0013eea <VAS::evict(unsigned long)>
c00145f9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00145fc:	5b                   	pop    ebx
c00145fd:	5e                   	pop    esi
c00145fe:	50                   	push   eax
c00145ff:	68 87 4a 02 c0       	push   0xc0024a87
c0014604:	e8 45 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014609:	58                   	pop    eax
c001460a:	5a                   	pop    edx
c001460b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001460f:	50                   	push   eax
c0014610:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014614:	68 9a 4a 02 c0       	push   0xc0024a9a
c0014619:	e8 30 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001461e:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014621:	81 c1 00 10 00 00    	add    ecx,0x1000
c0014627:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c001462a:	8b 3d 30 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea30
c0014630:	5b                   	pop    ebx
c0014631:	5e                   	pop    esi
c0014632:	57                   	push   edi
c0014633:	68 40 49 02 c0       	push   0xc0024940
c0014638:	e8 11 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001463d:	83 c4 10             	add    esp,0x10
c0014640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014644:	83 c4 10             	add    esp,0x10
c0014647:	5b                   	pop    ebx
c0014648:	5e                   	pop    esi
c0014649:	5f                   	pop    edi
c001464a:	c3                   	ret    

c001464b <mapVASFirstTime>:
c001464b:	55                   	push   ebp
c001464c:	57                   	push   edi
c001464d:	56                   	push   esi
c001464e:	53                   	push   ebx
c001464f:	83 ec 0c             	sub    esp,0xc
c0014652:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014657:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001465a:	83 fa 01             	cmp    edx,0x1
c001465d:	0f 84 cb 00 00 00    	je     c001472e <mapVASFirstTime+0xe3>
c0014663:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014666:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001466b:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014670:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014673:	8b b2 72 05 00 00    	mov    esi,DWORD PTR [edx+0x572]
c0014679:	c1 e5 15             	shl    ebp,0x15
c001467c:	29 eb                	sub    ebx,ebp
c001467e:	29 ef                	sub    edi,ebp
c0014680:	e8 9f b9 ff ff       	call   c0010024 <Phys::allocatePage()>
c0014685:	83 ec 0c             	sub    esp,0xc
c0014688:	68 03 04 00 00       	push   0x403
c001468d:	6a 01                	push   0x1
c001468f:	53                   	push   ebx
c0014690:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014696:	50                   	push   eax
c0014697:	56                   	push   esi
c0014698:	e8 1b f5 ff ff       	call   c0013bb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001469d:	83 c4 20             	add    esp,0x20
c00146a0:	39 fb                	cmp    ebx,edi
c00146a2:	75 dc                	jne    c0014680 <mapVASFirstTime+0x35>
c00146a4:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00146a9:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00146ae:	29 eb                	sub    ebx,ebp
c00146b0:	29 ef                	sub    edi,ebp
c00146b2:	e8 6d b9 ff ff       	call   c0010024 <Phys::allocatePage()>
c00146b7:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c00146bb:	83 fa 01             	cmp    edx,0x1
c00146be:	19 d2                	sbb    edx,edx
c00146c0:	83 ec 0c             	sub    esp,0xc
c00146c3:	83 e2 04             	and    edx,0x4
c00146c6:	81 c2 03 04 00 00    	add    edx,0x403
c00146cc:	52                   	push   edx
c00146cd:	6a 01                	push   0x1
c00146cf:	53                   	push   ebx
c00146d0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00146d6:	50                   	push   eax
c00146d7:	56                   	push   esi
c00146d8:	e8 db f4 ff ff       	call   c0013bb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00146dd:	83 c4 20             	add    esp,0x20
c00146e0:	39 df                	cmp    edi,ebx
c00146e2:	75 ce                	jne    c00146b2 <mapVASFirstTime+0x67>
c00146e4:	83 ec 0c             	sub    esp,0xc
c00146e7:	bb 7c 80 02 c0       	mov    ebx,0xc002807c
c00146ec:	6a 04                	push   0x4
c00146ee:	81 eb 00 70 02 c0    	sub    ebx,0xc0027000
c00146f4:	6a ff                	push   0xffffffff
c00146f6:	c1 eb 0c             	shr    ebx,0xc
c00146f9:	53                   	push   ebx
c00146fa:	68 00 70 02 c0       	push   0xc0027000
c00146ff:	56                   	push   esi
c0014700:	e8 59 f0 ff ff       	call   c001375e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014705:	83 c4 14             	add    esp,0x14
c0014708:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001470d:	6a 04                	push   0x4
c001470f:	6a ff                	push   0xffffffff
c0014711:	53                   	push   ebx
c0014712:	68 00 70 02 c0       	push   0xc0027000
c0014717:	50                   	push   eax
c0014718:	e8 41 f0 ff ff       	call   c001375e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001471d:	0f 20 d8             	mov    eax,cr3
c0014720:	0f 22 d8             	mov    cr3,eax
c0014723:	83 c4 20             	add    esp,0x20
c0014726:	83 c4 0c             	add    esp,0xc
c0014729:	5b                   	pop    ebx
c001472a:	5e                   	pop    esi
c001472b:	5f                   	pop    edi
c001472c:	5d                   	pop    ebp
c001472d:	c3                   	ret    
c001472e:	83 ec 0c             	sub    esp,0xc
c0014731:	68 a7 4a 02 c0       	push   0xc0024aa7
c0014736:	e8 13 28 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001473b:	83 c4 10             	add    esp,0x10
c001473e:	83 c4 0c             	add    esp,0xc
c0014741:	5b                   	pop    ebx
c0014742:	5e                   	pop    esi
c0014743:	5f                   	pop    edi
c0014744:	5d                   	pop    ebp
c0014745:	c3                   	ret    

c0014746 <SysAlarm(regs*)>:
c0014746:	53                   	push   ebx
c0014747:	83 ec 10             	sub    esp,0x10
c001474a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001474e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014751:	68 c0 4a 02 c0       	push   0xc0024ac0
c0014756:	e8 f3 27 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001475b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001475e:	83 c4 0c             	add    esp,0xc
c0014761:	31 d2                	xor    edx,edx
c0014763:	52                   	push   edx
c0014764:	50                   	push   eax
c0014765:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001476b:	e8 5c 09 00 00       	call   c00150cc <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014770:	83 c4 18             	add    esp,0x18
c0014773:	5b                   	pop    ebx
c0014774:	c3                   	ret    

c0014775 <SysEject(regs*)>:
c0014775:	83 ec 0c             	sub    esp,0xc
c0014778:	83 ca ff             	or     edx,0xffffffff
c001477b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014782:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014787:	83 e9 41             	sub    ecx,0x41
c001478a:	83 f9 19             	cmp    ecx,0x19
c001478d:	77 18                	ja     c00147a7 <SysEject(regs*)+0x32>
c001478f:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0014796:	85 c9                	test   ecx,ecx
c0014798:	74 0d                	je     c00147a7 <SysEject(regs*)+0x32>
c001479a:	83 ec 0c             	sub    esp,0xc
c001479d:	51                   	push   ecx
c001479e:	e8 e3 61 ff ff       	call   c000a986 <LogicalDisk::eject()>
c00147a3:	83 c4 10             	add    esp,0x10
c00147a6:	99                   	cdq    
c00147a7:	83 c4 0c             	add    esp,0xc
c00147aa:	c3                   	ret    

c00147ab <SysExit(regs*)>:
c00147ab:	83 ec 18             	sub    esp,0x18
c00147ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147b2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00147b5:	e8 ca 2d 00 00       	call   c0017584 <terminateTask(int)>
c00147ba:	83 c8 ff             	or     eax,0xffffffff
c00147bd:	83 c4 1c             	add    esp,0x1c
c00147c0:	89 c2                	mov    edx,eax
c00147c2:	c3                   	ret    

c00147c3 <SysGetCwd(regs*)>:
c00147c3:	83 ec 10             	sub    esp,0x10
c00147c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147ca:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00147cd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00147d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147d5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00147d8:	e8 cf 35 ff ff       	call   c0007dac <Fs::getcwd(Process*, char*, int)>
c00147dd:	83 c4 1c             	add    esp,0x1c
c00147e0:	99                   	cdq    
c00147e1:	c3                   	ret    

c00147e2 <SysGetPID(regs*)>:
c00147e2:	83 ec 14             	sub    esp,0x14
c00147e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00147ed:	ff 30                	push   DWORD PTR [eax]
c00147ef:	68 d5 4a 02 c0       	push   0xc0024ad5
c00147f4:	e8 55 27 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00147f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014801:	8b 00                	mov    eax,DWORD PTR [eax]
c0014803:	83 c4 1c             	add    esp,0x1c
c0014806:	99                   	cdq    
c0014807:	c3                   	ret    

c0014808 <SysGetRAMData(regs*)>:
c0014808:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001480d:	03 05 3c e1 02 c0    	add    eax,DWORD PTR ds:0xc002e13c
c0014813:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c0014819:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c001481f:	99                   	cdq    
c0014820:	f7 f9                	idiv   ecx
c0014822:	c1 e0 18             	shl    eax,0x18
c0014825:	09 c8                	or     eax,ecx
c0014827:	99                   	cdq    
c0014828:	c3                   	ret    

c0014829 <SysGetVGAPtr(regs*)>:
c0014829:	55                   	push   ebp
c001482a:	57                   	push   edi
c001482b:	56                   	push   esi
c001482c:	53                   	push   ebx
c001482d:	83 ec 0c             	sub    esp,0xc
c0014830:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014834:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014837:	83 f8 ff             	cmp    eax,0xffffffff
c001483a:	74 1b                	je     c0014857 <SysGetVGAPtr(regs*)+0x2e>
c001483c:	83 ec 0c             	sub    esp,0xc
c001483f:	50                   	push   eax
c0014840:	e8 f7 27 00 00       	call   c001703c <Thr::processFromPID(int)>
c0014845:	83 c4 10             	add    esp,0x10
c0014848:	31 d2                	xor    edx,edx
c001484a:	89 c1                	mov    ecx,eax
c001484c:	b8 01 00 00 00       	mov    eax,0x1
c0014851:	85 c9                	test   ecx,ecx
c0014853:	75 0a                	jne    c001485f <SysGetVGAPtr(regs*)+0x36>
c0014855:	eb 61                	jmp    c00148b8 <SysGetVGAPtr(regs*)+0x8f>
c0014857:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001485c:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c001485f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014863:	8b a9 66 05 00 00    	mov    ebp,DWORD PTR [ecx+0x566]
c0014869:	74 0c                	je     c0014877 <SysGetVGAPtr(regs*)+0x4e>
c001486b:	83 ec 0c             	sub    esp,0xc
c001486e:	55                   	push   ebp
c001486f:	e8 19 db ff ff       	call   c001238d <setActiveTerminal(VgaText*)>
c0014874:	83 c4 10             	add    esp,0x10
c0014877:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001487a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001487f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014882:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014884:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014887:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001488a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0014890:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014893:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014896:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001489c:	50                   	push   eax
c001489d:	50                   	push   eax
c001489e:	68 e4 4a 02 c0       	push   0xc0024ae4
c00148a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00148a6:	05 a8 0f 00 00       	add    eax,0xfa8
c00148ab:	50                   	push   eax
c00148ac:	e8 9f bd fe ff       	call   c0000650 <strcpy>
c00148b1:	83 c4 10             	add    esp,0x10
c00148b4:	31 c0                	xor    eax,eax
c00148b6:	31 d2                	xor    edx,edx
c00148b8:	83 c4 0c             	add    esp,0xc
c00148bb:	5b                   	pop    ebx
c00148bc:	5e                   	pop    esi
c00148bd:	5f                   	pop    edi
c00148be:	5d                   	pop    ebp
c00148bf:	c3                   	ret    

c00148c0 <SysKill(regs*)>:
c00148c0:	53                   	push   ebx
c00148c1:	83 ec 08             	sub    esp,0x8
c00148c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148c8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00148cc:	75 16                	jne    c00148e4 <SysKill(regs*)+0x24>
c00148ce:	83 ec 0c             	sub    esp,0xc
c00148d1:	68 ee 4a 02 c0       	push   0xc0024aee
c00148d6:	e8 4f b5 ff ff       	call   c000fe2a <KePanic(char const*)>
c00148db:	83 c4 10             	add    esp,0x10
c00148de:	e9 89 00 00 00       	jmp    c001496c <SysKill(regs*)+0xac>
c00148e3:	90                   	nop
c00148e4:	83 ec 0c             	sub    esp,0xc
c00148e7:	68 4c ea 02 c0       	push   0xc002ea4c
c00148ec:	e8 f7 d1 00 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00148f1:	8d 76 00             	lea    esi,[esi+0x0]
c00148f4:	83 c4 10             	add    esp,0x10
c00148f7:	85 c0                	test   eax,eax
c00148f9:	74 19                	je     c0014914 <SysKill(regs*)+0x54>
c00148fb:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00148fe:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014901:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014903:	74 33                	je     c0014938 <SysKill(regs*)+0x78>
c0014905:	52                   	push   edx
c0014906:	52                   	push   edx
c0014907:	50                   	push   eax
c0014908:	68 4c ea 02 c0       	push   0xc002ea4c
c001490d:	e8 e2 d6 00 00       	call   c0021ff4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014912:	eb e0                	jmp    c00148f4 <SysKill(regs*)+0x34>
c0014914:	83 ec 0c             	sub    esp,0xc
c0014917:	68 40 ea 02 c0       	push   0xc002ea40
c001491c:	e8 c7 d1 00 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014921:	8d 76 00             	lea    esi,[esi+0x0]
c0014924:	83 c4 10             	add    esp,0x10
c0014927:	85 c0                	test   eax,eax
c0014929:	74 41                	je     c001496c <SysKill(regs*)+0xac>
c001492b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001492e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014931:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014933:	75 27                	jne    c001495c <SysKill(regs*)+0x9c>
c0014935:	8d 76 00             	lea    esi,[esi+0x0]
c0014938:	51                   	push   ecx
c0014939:	51                   	push   ecx
c001493a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001493d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014942:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014945:	ff b0 80 07 00 00    	push   DWORD PTR [eax+0x780]
c001494b:	e8 3f c6 ff ff       	call   c0010f8f <KeRaiseSignal(SigHandlerBlock*, int)>
c0014950:	83 c4 10             	add    esp,0x10
c0014953:	31 c0                	xor    eax,eax
c0014955:	31 d2                	xor    edx,edx
c0014957:	eb 1b                	jmp    c0014974 <SysKill(regs*)+0xb4>
c0014959:	8d 76 00             	lea    esi,[esi+0x0]
c001495c:	52                   	push   edx
c001495d:	52                   	push   edx
c001495e:	50                   	push   eax
c001495f:	68 40 ea 02 c0       	push   0xc002ea40
c0014964:	e8 8b d6 00 00       	call   c0021ff4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014969:	eb b9                	jmp    c0014924 <SysKill(regs*)+0x64>
c001496b:	90                   	nop
c001496c:	83 c8 ff             	or     eax,0xffffffff
c001496f:	89 c2                	mov    edx,eax
c0014971:	8d 76 00             	lea    esi,[esi+0x0]
c0014974:	83 c4 08             	add    esp,0x8
c0014977:	5b                   	pop    ebx
c0014978:	c3                   	ret    

c0014979 <SysLoadDLL(regs*)>:
c0014979:	56                   	push   esi
c001497a:	31 d2                	xor    edx,edx
c001497c:	53                   	push   ebx
c001497d:	b8 01 00 00 00       	mov    eax,0x1
c0014982:	51                   	push   ecx
c0014983:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014987:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001498b:	0f 84 8c 00 00 00    	je     c0014a1d <SysLoadDLL(regs*)+0xa4>
c0014991:	83 ec 0c             	sub    esp,0xc
c0014994:	68 14 01 00 00       	push   0x114
c0014999:	e8 46 b1 ff ff       	call   c000fae4 <malloc>
c001499e:	83 c4 0c             	add    esp,0xc
c00149a1:	89 c3                	mov    ebx,eax
c00149a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149a8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00149ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00149ae:	53                   	push   ebx
c00149af:	e8 78 37 ff ff       	call   c000812c <File::File(char const*, Process*)>
c00149b4:	83 c4 10             	add    esp,0x10
c00149b7:	31 d2                	xor    edx,edx
c00149b9:	85 db                	test   ebx,ebx
c00149bb:	b8 02 00 00 00       	mov    eax,0x2
c00149c0:	74 5b                	je     c0014a1d <SysLoadDLL(regs*)+0xa4>
c00149c2:	83 ec 0c             	sub    esp,0xc
c00149c5:	53                   	push   ebx
c00149c6:	e8 43 3a ff ff       	call   c000840e <File::exists()>
c00149cb:	83 c4 10             	add    esp,0x10
c00149ce:	84 c0                	test   al,al
c00149d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149d2:	75 11                	jne    c00149e5 <SysLoadDLL(regs*)+0x6c>
c00149d4:	83 ec 0c             	sub    esp,0xc
c00149d7:	53                   	push   ebx
c00149d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00149db:	83 c4 10             	add    esp,0x10
c00149de:	b8 03 00 00 00       	mov    eax,0x3
c00149e3:	eb 36                	jmp    c0014a1b <SysLoadDLL(regs*)+0xa2>
c00149e5:	83 ec 0c             	sub    esp,0xc
c00149e8:	53                   	push   ebx
c00149e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00149ec:	58                   	pop    eax
c00149ed:	5a                   	pop    edx
c00149ee:	6a 00                	push   0x0
c00149f0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00149f3:	e8 09 18 00 00       	call   c0016201 <Thr::loadDLL(char const*, bool)>
c00149f8:	83 c4 10             	add    esp,0x10
c00149fb:	31 d2                	xor    edx,edx
c00149fd:	89 c1                	mov    ecx,eax
c00149ff:	b8 04 00 00 00       	mov    eax,0x4
c0014a04:	85 c9                	test   ecx,ecx
c0014a06:	74 15                	je     c0014a1d <SysLoadDLL(regs*)+0xa4>
c0014a08:	53                   	push   ebx
c0014a09:	53                   	push   ebx
c0014a0a:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0014a10:	51                   	push   ecx
c0014a11:	e8 4c 1a 00 00       	call   c0016462 <Thr::executeDLL(unsigned long, void*)>
c0014a16:	83 c4 10             	add    esp,0x10
c0014a19:	31 c0                	xor    eax,eax
c0014a1b:	31 d2                	xor    edx,edx
c0014a1d:	59                   	pop    ecx
c0014a1e:	5b                   	pop    ebx
c0014a1f:	5e                   	pop    esi
c0014a20:	c3                   	ret    

c0014a21 <SysPause(regs*)>:
c0014a21:	83 ec 18             	sub    esp,0x18
c0014a24:	6a 08                	push   0x8
c0014a26:	e8 25 24 00 00       	call   c0016e50 <blockTask(TaskState)>
c0014a2b:	31 c0                	xor    eax,eax
c0014a2d:	31 d2                	xor    edx,edx
c0014a2f:	83 c4 1c             	add    esp,0x1c
c0014a32:	c3                   	ret    

c0014a33 <SysRead(regs*)>:
c0014a33:	57                   	push   edi
c0014a34:	56                   	push   esi
c0014a35:	53                   	push   ebx
c0014a36:	83 ec 10             	sub    esp,0x10
c0014a39:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014a3d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a40:	83 f8 02             	cmp    eax,0x2
c0014a43:	77 10                	ja     c0014a55 <SysRead(regs*)+0x22>
c0014a45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a4d:	8b 88 66 05 00 00    	mov    ecx,DWORD PTR [eax+0x566]
c0014a53:	eb 0e                	jmp    c0014a63 <SysRead(regs*)+0x30>
c0014a55:	83 ec 0c             	sub    esp,0xc
c0014a58:	50                   	push   eax
c0014a59:	e8 1b e7 ff ff       	call   c0013179 <KeGetFileFromDescriptor(int)>
c0014a5e:	83 c4 10             	add    esp,0x10
c0014a61:	89 c1                	mov    ecx,eax
c0014a63:	83 c8 ff             	or     eax,0xffffffff
c0014a66:	85 c9                	test   ecx,ecx
c0014a68:	89 c2                	mov    edx,eax
c0014a6a:	74 28                	je     c0014a94 <SysRead(regs*)+0x61>
c0014a6c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014a74:	83 ec 0c             	sub    esp,0xc
c0014a77:	31 ff                	xor    edi,edi
c0014a79:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014a7d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014a7f:	52                   	push   edx
c0014a80:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014a83:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014a86:	57                   	push   edi
c0014a87:	56                   	push   esi
c0014a88:	51                   	push   ecx
c0014a89:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014a90:	83 c4 20             	add    esp,0x20
c0014a93:	99                   	cdq    
c0014a94:	83 c4 10             	add    esp,0x10
c0014a97:	5b                   	pop    ebx
c0014a98:	5e                   	pop    esi
c0014a99:	5f                   	pop    edi
c0014a9a:	c3                   	ret    

c0014a9b <SysRegisterSignal(regs*)>:
c0014a9b:	83 ec 18             	sub    esp,0x18
c0014a9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014aa2:	6a 00                	push   0x0
c0014aa4:	6a 00                	push   0x0
c0014aa6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014aa9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014aac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ab1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ab4:	ff b0 80 07 00 00    	push   DWORD PTR [eax+0x780]
c0014aba:	e8 9a c4 ff ff       	call   c0010f59 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014abf:	83 c4 2c             	add    esp,0x2c
c0014ac2:	99                   	cdq    
c0014ac3:	c3                   	ret    

c0014ac4 <SysRegistryGetTypeFromPath(regs*)>:
c0014ac4:	53                   	push   ebx
c0014ac5:	81 ec 40 01 00 00    	sub    esp,0x140
c0014acb:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014ad2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ad5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014ad8:	e8 ce 93 ff ff       	call   c000deab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014add:	83 c4 10             	add    esp,0x10
c0014ae0:	85 c0                	test   eax,eax
c0014ae2:	89 c1                	mov    ecx,eax
c0014ae4:	74 15                	je     c0014afb <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014ae6:	50                   	push   eax
c0014ae7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014aeb:	50                   	push   eax
c0014aec:	51                   	push   ecx
c0014aed:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014af0:	e8 9b 8f ff ff       	call   c000da90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014af5:	83 c4 10             	add    esp,0x10
c0014af8:	99                   	cdq    
c0014af9:	eb 05                	jmp    c0014b00 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014afb:	83 c8 ff             	or     eax,0xffffffff
c0014afe:	89 c2                	mov    edx,eax
c0014b00:	81 c4 38 01 00 00    	add    esp,0x138
c0014b06:	5b                   	pop    ebx
c0014b07:	c3                   	ret    

c0014b08 <SysRegistryReadExtent(regs*)>:
c0014b08:	83 ec 1c             	sub    esp,0x1c
c0014b0b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b0f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014b12:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014b15:	85 c0                	test   eax,eax
c0014b17:	79 1f                	jns    c0014b38 <SysRegistryReadExtent(regs*)+0x30>
c0014b19:	52                   	push   edx
c0014b1a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014b1f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014b23:	52                   	push   edx
c0014b24:	50                   	push   eax
c0014b25:	51                   	push   ecx
c0014b26:	e8 57 8e ff ff       	call   c000d982 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014b2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b33:	83 c4 10             	add    esp,0x10
c0014b36:	eb 14                	jmp    c0014b4c <SysRegistryReadExtent(regs*)+0x44>
c0014b38:	83 ec 04             	sub    esp,0x4
c0014b3b:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014b3e:	50                   	push   eax
c0014b3f:	51                   	push   ecx
c0014b40:	e8 db 88 ff ff       	call   c000d420 <CmGetString(Reghive_Tag*, int, char*)>
c0014b45:	83 c4 10             	add    esp,0x10
c0014b48:	31 c0                	xor    eax,eax
c0014b4a:	31 d2                	xor    edx,edx
c0014b4c:	83 c4 1c             	add    esp,0x1c
c0014b4f:	c3                   	ret    

c0014b50 <SysRegistryPathToExtentLookup(regs*)>:
c0014b50:	83 ec 14             	sub    esp,0x14
c0014b53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b57:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014b5a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b5d:	e8 49 93 ff ff       	call   c000deab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014b62:	83 c4 1c             	add    esp,0x1c
c0014b65:	99                   	cdq    
c0014b66:	c3                   	ret    

c0014b67 <SysRegistryEnterDirectory(regs*)>:
c0014b67:	83 ec 14             	sub    esp,0x14
c0014b6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b6e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014b71:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b74:	e8 1e 89 ff ff       	call   c000d497 <CmEnterDirectory(Reghive_Tag*, int)>
c0014b79:	83 c4 1c             	add    esp,0x1c
c0014b7c:	99                   	cdq    
c0014b7d:	c3                   	ret    

c0014b7e <SysRegistryGetNext(regs*)>:
c0014b7e:	83 ec 14             	sub    esp,0x14
c0014b81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b85:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014b88:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b8b:	e8 46 89 ff ff       	call   c000d4d6 <CmGetNext(Reghive_Tag*, int)>
c0014b90:	83 c4 1c             	add    esp,0x1c
c0014b93:	99                   	cdq    
c0014b94:	c3                   	ret    

c0014b95 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014b95:	57                   	push   edi
c0014b96:	56                   	push   esi
c0014b97:	53                   	push   ebx
c0014b98:	81 ec 34 01 00 00    	sub    esp,0x134
c0014b9e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014ba5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014ba9:	57                   	push   edi
c0014baa:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014bad:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014bb0:	e8 db 8e ff ff       	call   c000da90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014bb5:	89 c3                	mov    ebx,eax
c0014bb7:	58                   	pop    eax
c0014bb8:	5a                   	pop    edx
c0014bb9:	57                   	push   edi
c0014bba:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014bbd:	e8 8e ba fe ff       	call   c0000650 <strcpy>
c0014bc2:	81 c4 40 01 00 00    	add    esp,0x140
c0014bc8:	89 d8                	mov    eax,ebx
c0014bca:	5b                   	pop    ebx
c0014bcb:	99                   	cdq    
c0014bcc:	5e                   	pop    esi
c0014bcd:	5f                   	pop    edi
c0014bce:	c3                   	ret    

c0014bcf <SysRegistryOpen(regs*)>:
c0014bcf:	83 ec 18             	sub    esp,0x18
c0014bd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bd6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014bd9:	e8 d2 86 ff ff       	call   c000d2b0 <CmOpen(char const*)>
c0014bde:	83 c4 1c             	add    esp,0x1c
c0014be1:	99                   	cdq    
c0014be2:	c3                   	ret    

c0014be3 <SysRegistryClose(regs*)>:
c0014be3:	83 ec 18             	sub    esp,0x18
c0014be6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bea:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014bed:	e8 dc 87 ff ff       	call   c000d3ce <CmClose(Reghive_Tag*)>
c0014bf2:	31 c0                	xor    eax,eax
c0014bf4:	31 d2                	xor    edx,edx
c0014bf6:	83 c4 1c             	add    esp,0x1c
c0014bf9:	c3                   	ret    

c0014bfa <SysRegistryEasyReadString(regs*)>:
c0014bfa:	57                   	push   edi
c0014bfb:	56                   	push   esi
c0014bfc:	53                   	push   ebx
c0014bfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c01:	83 ec 0c             	sub    esp,0xc
c0014c04:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014c07:	e8 a4 86 ff ff       	call   c000d2b0 <CmOpen(char const*)>
c0014c0c:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014c0f:	5a                   	pop    edx
c0014c10:	59                   	pop    ecx
c0014c11:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c14:	89 c3                	mov    ebx,eax
c0014c16:	50                   	push   eax
c0014c17:	e8 8f 92 ff ff       	call   c000deab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014c1c:	83 c4 10             	add    esp,0x10
c0014c1f:	89 c1                	mov    ecx,eax
c0014c21:	b8 01 00 00 00       	mov    eax,0x1
c0014c26:	85 c9                	test   ecx,ecx
c0014c28:	7e 16                	jle    c0014c40 <SysRegistryEasyReadString(regs*)+0x46>
c0014c2a:	50                   	push   eax
c0014c2b:	57                   	push   edi
c0014c2c:	51                   	push   ecx
c0014c2d:	53                   	push   ebx
c0014c2e:	e8 ed 87 ff ff       	call   c000d420 <CmGetString(Reghive_Tag*, int, char*)>
c0014c33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c36:	e8 93 87 ff ff       	call   c000d3ce <CmClose(Reghive_Tag*)>
c0014c3b:	83 c4 10             	add    esp,0x10
c0014c3e:	31 c0                	xor    eax,eax
c0014c40:	5b                   	pop    ebx
c0014c41:	31 d2                	xor    edx,edx
c0014c43:	5e                   	pop    esi
c0014c44:	5f                   	pop    edi
c0014c45:	c3                   	ret    

c0014c46 <SysRegistryEasyReadInteger(regs*)>:
c0014c46:	56                   	push   esi
c0014c47:	53                   	push   ebx
c0014c48:	83 ec 10             	sub    esp,0x10
c0014c4b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014c4f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014c52:	e8 59 86 ff ff       	call   c000d2b0 <CmOpen(char const*)>
c0014c57:	5a                   	pop    edx
c0014c58:	59                   	pop    ecx
c0014c59:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c5c:	89 c3                	mov    ebx,eax
c0014c5e:	50                   	push   eax
c0014c5f:	e8 47 92 ff ff       	call   c000deab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014c64:	83 c4 10             	add    esp,0x10
c0014c67:	89 c1                	mov    ecx,eax
c0014c69:	b8 01 00 00 00       	mov    eax,0x1
c0014c6e:	85 c9                	test   ecx,ecx
c0014c70:	7e 18                	jle    c0014c8a <SysRegistryEasyReadInteger(regs*)+0x44>
c0014c72:	50                   	push   eax
c0014c73:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014c76:	51                   	push   ecx
c0014c77:	53                   	push   ebx
c0014c78:	e8 05 8d ff ff       	call   c000d982 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014c7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c80:	e8 49 87 ff ff       	call   c000d3ce <CmClose(Reghive_Tag*)>
c0014c85:	83 c4 10             	add    esp,0x10
c0014c88:	31 c0                	xor    eax,eax
c0014c8a:	59                   	pop    ecx
c0014c8b:	31 d2                	xor    edx,edx
c0014c8d:	5b                   	pop    ebx
c0014c8e:	5e                   	pop    esi
c0014c8f:	c3                   	ret    

c0014c90 <SysSbrk(regs*)>:
c0014c90:	56                   	push   esi
c0014c91:	53                   	push   ebx
c0014c92:	50                   	push   eax
c0014c93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014c9c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c9f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014ca2:	8b 88 72 05 00 00    	mov    ecx,DWORD PTR [eax+0x572]
c0014ca8:	85 db                	test   ebx,ebx
c0014caa:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014cad:	74 02                	je     c0014cb1 <SysSbrk(regs*)+0x21>
c0014caf:	79 06                	jns    c0014cb7 <SysSbrk(regs*)+0x27>
c0014cb1:	89 f0                	mov    eax,esi
c0014cb3:	31 d2                	xor    edx,edx
c0014cb5:	eb 2a                	jmp    c0014ce1 <SysSbrk(regs*)+0x51>
c0014cb7:	83 c8 ff             	or     eax,0xffffffff
c0014cba:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014cc0:	89 c2                	mov    edx,eax
c0014cc2:	77 1d                	ja     c0014ce1 <SysSbrk(regs*)+0x51>
c0014cc4:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014cca:	50                   	push   eax
c0014ccb:	68 07 0c 00 00       	push   0xc07
c0014cd0:	c1 ea 0c             	shr    edx,0xc
c0014cd3:	52                   	push   edx
c0014cd4:	51                   	push   ecx
c0014cd5:	e8 ec ed ff ff       	call   c0013ac6 <VAS::allocatePages(int, int)>
c0014cda:	89 f0                	mov    eax,esi
c0014cdc:	31 d2                	xor    edx,edx
c0014cde:	83 c4 10             	add    esp,0x10
c0014ce1:	59                   	pop    ecx
c0014ce2:	5b                   	pop    ebx
c0014ce3:	5e                   	pop    esi
c0014ce4:	c3                   	ret    

c0014ce5 <SysSetCwd(regs*)>:
c0014ce5:	83 ec 14             	sub    esp,0x14
c0014ce8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cec:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014cef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cf4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014cf7:	e8 b1 37 ff ff       	call   c00084ad <Fs::setcwd(Process*, char*)>
c0014cfc:	83 c4 1c             	add    esp,0x1c
c0014cff:	99                   	cdq    
c0014d00:	c3                   	ret    

c0014d01 <SysSetTime(regs*)>:
c0014d01:	55                   	push   ebp
c0014d02:	31 d2                	xor    edx,edx
c0014d04:	57                   	push   edi
c0014d05:	56                   	push   esi
c0014d06:	53                   	push   ebx
c0014d07:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014d0c:	83 ec 30             	sub    esp,0x30
c0014d0f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0014d13:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0014d16:	89 f0                	mov    eax,esi
c0014d18:	f7 f3                	div    ebx
c0014d1a:	89 d7                	mov    edi,edx
c0014d1c:	31 d2                	xor    edx,edx
c0014d1e:	f7 f3                	div    ebx
c0014d20:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014d25:	89 f0                	mov    eax,esi
c0014d27:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014d2b:	31 d2                	xor    edx,edx
c0014d2d:	f7 f3                	div    ebx
c0014d2f:	bb 18 00 00 00       	mov    ebx,0x18
c0014d34:	31 d2                	xor    edx,edx
c0014d36:	f7 f3                	div    ebx
c0014d38:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014d3b:	bb 0c 00 00 00       	mov    ebx,0xc
c0014d40:	89 c6                	mov    esi,eax
c0014d42:	c1 e8 05             	shr    eax,0x5
c0014d45:	83 e6 1f             	and    esi,0x1f
c0014d48:	46                   	inc    esi
c0014d49:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d4d:	31 d2                	xor    edx,edx
c0014d4f:	f7 f3                	div    ebx
c0014d51:	31 db                	xor    ebx,ebx
c0014d53:	57                   	push   edi
c0014d54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d5c:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c0014d60:	55                   	push   ebp
c0014d61:	52                   	push   edx
c0014d62:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0014d66:	56                   	push   esi
c0014d67:	68 0f 4b 02 c0       	push   0xc0024b0f
c0014d6c:	e8 dd 21 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014d71:	83 c4 1c             	add    esp,0x1c
c0014d74:	57                   	push   edi
c0014d75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d7d:	55                   	push   ebp
c0014d7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014d82:	52                   	push   edx
c0014d83:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014d87:	56                   	push   esi
c0014d88:	68 31 4b 02 c0       	push   0xc0024b31
c0014d8d:	e8 bc 21 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014d92:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0014d97:	31 c9                	xor    ecx,ecx
c0014d99:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014d9d:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c0014da1:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c0014da5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014dab:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014daf:	89 f0                	mov    eax,esi
c0014db1:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0014db5:	88 c1                	mov    cl,al
c0014db7:	89 e8                	mov    eax,ebp
c0014db9:	88 d5                	mov    ch,dl
c0014dbb:	83 c4 1c             	add    esp,0x1c
c0014dbe:	c1 e0 10             	shl    eax,0x10
c0014dc1:	0f b7 d1             	movzx  edx,cx
c0014dc4:	09 c2                	or     edx,eax
c0014dc6:	89 f8                	mov    eax,edi
c0014dc8:	c1 e0 10             	shl    eax,0x10
c0014dcb:	89 d1                	mov    ecx,edx
c0014dcd:	89 da                	mov    edx,ebx
c0014dcf:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c0014dd5:	09 c2                	or     edx,eax
c0014dd7:	52                   	push   edx
c0014dd8:	51                   	push   ecx
c0014dd9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ddd:	e8 14 47 ff ff       	call   c00094f6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014de2:	83 c4 3c             	add    esp,0x3c
c0014de5:	31 d2                	xor    edx,edx
c0014de7:	5b                   	pop    ebx
c0014de8:	5e                   	pop    esi
c0014de9:	83 f0 01             	xor    eax,0x1
c0014dec:	5f                   	pop    edi
c0014ded:	0f b6 c0             	movzx  eax,al
c0014df0:	5d                   	pop    ebp
c0014df1:	c3                   	ret    

c0014df2 <SysSymlink(regs*)>:
c0014df2:	56                   	push   esi
c0014df3:	83 c8 ff             	or     eax,0xffffffff
c0014df6:	53                   	push   ebx
c0014df7:	89 c2                	mov    edx,eax
c0014df9:	81 ec 34 02 00 00    	sub    esp,0x234
c0014dff:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014e06:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014e0a:	74 50                	je     c0014e5c <SysSymlink(regs*)+0x6a>
c0014e0c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014e0f:	85 c9                	test   ecx,ecx
c0014e11:	74 49                	je     c0014e5c <SysSymlink(regs*)+0x6a>
c0014e13:	6a 01                	push   0x1
c0014e15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e1a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e1d:	05 0c 01 00 00       	add    eax,0x10c
c0014e22:	50                   	push   eax
c0014e23:	51                   	push   ecx
c0014e24:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014e28:	56                   	push   esi
c0014e29:	e8 d2 2f ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014e2e:	6a 01                	push   0x1
c0014e30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e35:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e38:	05 0c 01 00 00       	add    eax,0x10c
c0014e3d:	50                   	push   eax
c0014e3e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e41:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014e48:	53                   	push   ebx
c0014e49:	e8 b2 2f ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014e4e:	83 c4 18             	add    esp,0x18
c0014e51:	56                   	push   esi
c0014e52:	53                   	push   ebx
c0014e53:	e8 d6 2b ff ff       	call   c0007a2e <KeCreateSymlink(char const*, char const*)>
c0014e58:	83 c4 10             	add    esp,0x10
c0014e5b:	99                   	cdq    
c0014e5c:	81 c4 34 02 00 00    	add    esp,0x234
c0014e62:	5b                   	pop    ebx
c0014e63:	5e                   	pop    esi
c0014e64:	c3                   	ret    

c0014e65 <SysTimezone(regs*)>:
c0014e65:	83 ec 0c             	sub    esp,0xc
c0014e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e6c:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014e70:	75 17                	jne    c0014e89 <SysTimezone(regs*)+0x24>
c0014e72:	83 ec 0c             	sub    esp,0xc
c0014e75:	68 53 4b 02 c0       	push   0xc0024b53
c0014e7a:	e8 cf 20 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014e7f:	83 c8 ff             	or     eax,0xffffffff
c0014e82:	83 c4 10             	add    esp,0x10
c0014e85:	89 c2                	mov    edx,eax
c0014e87:	eb 16                	jmp    c0014e9f <SysTimezone(regs*)+0x3a>
c0014e89:	83 ec 0c             	sub    esp,0xc
c0014e8c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e8f:	e8 19 41 ff ff       	call   c0008fad <KeSetTimezone(int)>
c0014e94:	31 d2                	xor    edx,edx
c0014e96:	83 c4 10             	add    esp,0x10
c0014e99:	83 f0 01             	xor    eax,0x1
c0014e9c:	0f b6 c0             	movzx  eax,al
c0014e9f:	83 c4 0c             	add    esp,0xc
c0014ea2:	c3                   	ret    

c0014ea3 <SysTruncate(regs*)>:
c0014ea3:	55                   	push   ebp
c0014ea4:	57                   	push   edi
c0014ea5:	31 ff                	xor    edi,edi
c0014ea7:	56                   	push   esi
c0014ea8:	53                   	push   ebx
c0014ea9:	83 ec 0c             	sub    esp,0xc
c0014eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eb0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014eb3:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014eb7:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014eba:	89 ce                	mov    esi,ecx
c0014ebc:	0f 84 9a 00 00 00    	je     c0014f5c <SysTruncate(regs*)+0xb9>
c0014ec2:	83 ec 0c             	sub    esp,0xc
c0014ec5:	68 14 01 00 00       	push   0x114
c0014eca:	e8 15 ac ff ff       	call   c000fae4 <malloc>
c0014ecf:	83 c4 0c             	add    esp,0xc
c0014ed2:	89 c3                	mov    ebx,eax
c0014ed4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ed9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014edc:	55                   	push   ebp
c0014edd:	53                   	push   ebx
c0014ede:	e8 49 32 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0014ee3:	83 c4 10             	add    esp,0x10
c0014ee6:	31 d2                	xor    edx,edx
c0014ee8:	85 db                	test   ebx,ebx
c0014eea:	b8 03 00 00 00       	mov    eax,0x3
c0014eef:	0f 84 a2 00 00 00    	je     c0014f97 <SysTruncate(regs*)+0xf4>
c0014ef5:	51                   	push   ecx
c0014ef6:	51                   	push   ecx
c0014ef7:	6a 02                	push   0x2
c0014ef9:	53                   	push   ebx
c0014efa:	e8 4b 32 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0014eff:	83 c4 10             	add    esp,0x10
c0014f02:	85 c0                	test   eax,eax
c0014f04:	74 13                	je     c0014f19 <SysTruncate(regs*)+0x76>
c0014f06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f08:	83 ec 0c             	sub    esp,0xc
c0014f0b:	53                   	push   ebx
c0014f0c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f0f:	83 c4 10             	add    esp,0x10
c0014f12:	b8 04 00 00 00       	mov    eax,0x4
c0014f17:	eb 7c                	jmp    c0014f95 <SysTruncate(regs*)+0xf2>
c0014f19:	52                   	push   edx
c0014f1a:	57                   	push   edi
c0014f1b:	56                   	push   esi
c0014f1c:	53                   	push   ebx
c0014f1d:	e8 3c 33 ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0014f22:	83 c4 10             	add    esp,0x10
c0014f25:	85 c0                	test   eax,eax
c0014f27:	74 1b                	je     c0014f44 <SysTruncate(regs*)+0xa1>
c0014f29:	83 ec 0c             	sub    esp,0xc
c0014f2c:	53                   	push   ebx
c0014f2d:	e8 76 32 ff ff       	call   c00081a8 <File::close()>
c0014f32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f3a:	83 c4 10             	add    esp,0x10
c0014f3d:	b8 05 00 00 00       	mov    eax,0x5
c0014f42:	eb 51                	jmp    c0014f95 <SysTruncate(regs*)+0xf2>
c0014f44:	83 ec 0c             	sub    esp,0xc
c0014f47:	53                   	push   ebx
c0014f48:	e8 5b 32 ff ff       	call   c00081a8 <File::close()>
c0014f4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f52:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f55:	83 c4 10             	add    esp,0x10
c0014f58:	31 c0                	xor    eax,eax
c0014f5a:	eb 39                	jmp    c0014f95 <SysTruncate(regs*)+0xf2>
c0014f5c:	31 d2                	xor    edx,edx
c0014f5e:	83 fd 02             	cmp    ebp,0x2
c0014f61:	b8 01 00 00 00       	mov    eax,0x1
c0014f66:	7e 2f                	jle    c0014f97 <SysTruncate(regs*)+0xf4>
c0014f68:	83 ec 0c             	sub    esp,0xc
c0014f6b:	51                   	push   ecx
c0014f6c:	e8 08 e2 ff ff       	call   c0013179 <KeGetFileFromDescriptor(int)>
c0014f71:	83 c4 10             	add    esp,0x10
c0014f74:	31 d2                	xor    edx,edx
c0014f76:	89 c1                	mov    ecx,eax
c0014f78:	b8 02 00 00 00       	mov    eax,0x2
c0014f7d:	85 c9                	test   ecx,ecx
c0014f7f:	74 16                	je     c0014f97 <SysTruncate(regs*)+0xf4>
c0014f81:	50                   	push   eax
c0014f82:	57                   	push   edi
c0014f83:	56                   	push   esi
c0014f84:	51                   	push   ecx
c0014f85:	e8 d4 32 ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0014f8a:	83 c4 10             	add    esp,0x10
c0014f8d:	85 c0                	test   eax,eax
c0014f8f:	0f 95 c0             	setne  al
c0014f92:	0f b6 c0             	movzx  eax,al
c0014f95:	31 d2                	xor    edx,edx
c0014f97:	83 c4 0c             	add    esp,0xc
c0014f9a:	5b                   	pop    ebx
c0014f9b:	5e                   	pop    esi
c0014f9c:	5f                   	pop    edi
c0014f9d:	5d                   	pop    ebp
c0014f9e:	c3                   	ret    

c0014f9f <SysWrite(regs*)>:
c0014f9f:	57                   	push   edi
c0014fa0:	56                   	push   esi
c0014fa1:	53                   	push   ebx
c0014fa2:	83 ec 10             	sub    esp,0x10
c0014fa5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014fa9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014fac:	83 f8 02             	cmp    eax,0x2
c0014faf:	77 10                	ja     c0014fc1 <SysWrite(regs*)+0x22>
c0014fb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fb6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fb9:	8b 88 66 05 00 00    	mov    ecx,DWORD PTR [eax+0x566]
c0014fbf:	eb 0e                	jmp    c0014fcf <SysWrite(regs*)+0x30>
c0014fc1:	83 ec 0c             	sub    esp,0xc
c0014fc4:	50                   	push   eax
c0014fc5:	e8 af e1 ff ff       	call   c0013179 <KeGetFileFromDescriptor(int)>
c0014fca:	83 c4 10             	add    esp,0x10
c0014fcd:	89 c1                	mov    ecx,eax
c0014fcf:	83 c8 ff             	or     eax,0xffffffff
c0014fd2:	85 c9                	test   ecx,ecx
c0014fd4:	89 c2                	mov    edx,eax
c0014fd6:	74 28                	je     c0015000 <SysWrite(regs*)+0x61>
c0014fd8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014fe0:	83 ec 0c             	sub    esp,0xc
c0014fe3:	31 ff                	xor    edi,edi
c0014fe5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014fe9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014feb:	52                   	push   edx
c0014fec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014fef:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014ff2:	57                   	push   edi
c0014ff3:	56                   	push   esi
c0014ff4:	51                   	push   ecx
c0014ff5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014ff8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014ffc:	83 c4 20             	add    esp,0x20
c0014fff:	99                   	cdq    
c0015000:	83 c4 10             	add    esp,0x10
c0015003:	5b                   	pop    ebx
c0015004:	5e                   	pop    esi
c0015005:	5f                   	pop    edi
c0015006:	c3                   	ret    

c0015007 <SysWsbe(regs*)>:
c0015007:	55                   	push   ebp
c0015008:	57                   	push   edi
c0015009:	56                   	push   esi
c001500a:	53                   	push   ebx
c001500b:	83 ec 3c             	sub    esp,0x3c
c001500e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015012:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0015019:	75 2d                	jne    c0015048 <SysWsbe(regs*)+0x41>
c001501b:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0015022:	75 24                	jne    c0015048 <SysWsbe(regs*)+0x41>
c0015024:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c001502b:	75 1b                	jne    c0015048 <SysWsbe(regs*)+0x41>
c001502d:	6a 01                	push   0x1
c001502f:	6a 00                	push   0x0
c0015031:	68 c1 9e 00 c0       	push   0xc0009ec1
c0015036:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001503c:	e8 cf 1a 00 00       	call   c0016b10 <Process::createThread(void (*)(void*), void*, int)>
c0015041:	83 c4 10             	add    esp,0x10
c0015044:	31 c0                	xor    eax,eax
c0015046:	eb 52                	jmp    c001509a <SysWsbe(regs*)+0x93>
c0015048:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001504c:	be 68 4b 02 c0       	mov    esi,0xc0024b68
c0015051:	b9 0b 00 00 00       	mov    ecx,0xb
c0015056:	fc                   	cld    
c0015057:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015059:	83 ec 0c             	sub    esp,0xc
c001505c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015060:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015065:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015068:	8b b0 66 05 00 00    	mov    esi,DWORD PTR [eax+0x566]
c001506e:	8b 06                	mov    eax,DWORD PTR [esi]
c0015070:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0015073:	57                   	push   edi
c0015074:	e8 07 b5 fe ff       	call   c0000580 <strlen>
c0015079:	5a                   	pop    edx
c001507a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001507e:	52                   	push   edx
c001507f:	31 d2                	xor    edx,edx
c0015081:	57                   	push   edi
c0015082:	52                   	push   edx
c0015083:	50                   	push   eax
c0015084:	56                   	push   esi
c0015085:	ff d5                	call   ebp
c0015087:	83 c4 14             	add    esp,0x14
c001508a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001508d:	e8 f2 24 00 00       	call   c0017584 <terminateTask(int)>
c0015092:	83 c4 10             	add    esp,0x10
c0015095:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001509a:	83 c4 3c             	add    esp,0x3c
c001509d:	31 d2                	xor    edx,edx
c001509f:	5b                   	pop    ebx
c00150a0:	5e                   	pop    esi
c00150a1:	5f                   	pop    edi
c00150a2:	5d                   	pop    ebp
c00150a3:	c3                   	ret    

c00150a4 <SysYield(regs*)>:
c00150a4:	83 ec 0c             	sub    esp,0xc
c00150a7:	fa                   	cli    
c00150a8:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00150ae:	e8 dd 1c 00 00       	call   c0016d90 <schedule()>
c00150b3:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00150ba:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00150c1:	75 01                	jne    c00150c4 <SysYield(regs*)+0x20>
c00150c3:	fb                   	sti    
c00150c4:	31 c0                	xor    eax,eax
c00150c6:	31 d2                	xor    edx,edx
c00150c8:	83 c4 0c             	add    esp,0xc
c00150cb:	c3                   	ret    

c00150cc <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c00150cc:	55                   	push   ebp
c00150cd:	57                   	push   edi
c00150ce:	56                   	push   esi
c00150cf:	53                   	push   ebx
c00150d0:	83 ec 2c             	sub    esp,0x2c
c00150d3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00150d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00150db:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00150df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00150e7:	83 ec 08             	sub    esp,0x8
c00150ea:	50                   	push   eax
c00150eb:	68 94 4b 02 c0       	push   0xc0024b94
c00150f0:	e8 59 1e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00150f5:	83 c4 10             	add    esp,0x10
c00150f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00150fc:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c00150ff:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c0015102:	89 c1                	mov    ecx,eax
c0015104:	80 f5 00             	xor    ch,0x0
c0015107:	89 cf                	mov    edi,ecx
c0015109:	89 d0                	mov    eax,edx
c001510b:	80 f4 00             	xor    ah,0x0
c001510e:	89 c5                	mov    ebp,eax
c0015110:	89 e8                	mov    eax,ebp
c0015112:	09 f8                	or     eax,edi
c0015114:	74 22                	je     c0015138 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x6c>
c0015116:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001511a:	8b 78 63             	mov    edi,DWORD PTR [eax+0x63]
c001511d:	8b 68 67             	mov    ebp,DWORD PTR [eax+0x67]
c0015120:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0015125:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c001512b:	29 c7                	sub    edi,eax
c001512d:	19 d5                	sbb    ebp,edx
c001512f:	89 f8                	mov    eax,edi
c0015131:	89 ea                	mov    edx,ebp
c0015133:	eb 0f                	jmp    c0015144 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x78>
c0015135:	8d 76 00             	lea    esi,[esi+0x0]
c0015138:	b8 00 00 00 00       	mov    eax,0x0
c001513d:	ba 00 00 00 00       	mov    edx,0x0
c0015142:	66 90                	xchg   ax,ax
c0015144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015148:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001514c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015150:	80 f4 00             	xor    ah,0x0
c0015153:	89 c3                	mov    ebx,eax
c0015155:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015159:	80 f4 00             	xor    ah,0x0
c001515c:	89 c6                	mov    esi,eax
c001515e:	89 f0                	mov    eax,esi
c0015160:	09 d8                	or     eax,ebx
c0015162:	74 1c                	je     c0015180 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xb4>
c0015164:	8b 0d 50 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bb50
c001516a:	8b 1d 54 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb54
c0015170:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015174:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015178:	01 c8                	add    eax,ecx
c001517a:	11 da                	adc    edx,ebx
c001517c:	eb 0e                	jmp    c001518c <KeAlarm(ThreadControlBlock*, unsigned long long)+0xc0>
c001517e:	66 90                	xchg   ax,ax
c0015180:	b8 00 00 00 00       	mov    eax,0x0
c0015185:	ba 00 00 00 00       	mov    edx,0x0
c001518a:	66 90                	xchg   ax,ax
c001518c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0015190:	89 41 63             	mov    DWORD PTR [ecx+0x63],eax
c0015193:	89 51 67             	mov    DWORD PTR [ecx+0x67],edx
c0015196:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001519a:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c001519d:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c00151a0:	83 ec 08             	sub    esp,0x8
c00151a3:	50                   	push   eax
c00151a4:	68 a8 4b 02 c0       	push   0xc0024ba8
c00151a9:	e8 a0 1d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00151ae:	83 c4 10             	add    esp,0x10
c00151b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151b5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00151b9:	83 c4 2c             	add    esp,0x2c
c00151bc:	5b                   	pop    ebx
c00151bd:	5e                   	pop    esi
c00151be:	5f                   	pop    edi
c00151bf:	5d                   	pop    ebp
c00151c0:	c3                   	ret    
c00151c1:	8d 76 00             	lea    esi,[esi+0x0]

c00151c4 <KeCheckAlarm(ThreadControlBlock*)>:
c00151c4:	56                   	push   esi
c00151c5:	53                   	push   ebx
c00151c6:	83 ec 04             	sub    esp,0x4
c00151c9:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c00151ce:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c00151d4:	89 c1                	mov    ecx,eax
c00151d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151da:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c00151dd:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c00151e0:	83 ec 04             	sub    esp,0x4
c00151e3:	51                   	push   ecx
c00151e4:	50                   	push   eax
c00151e5:	68 b4 4b 02 c0       	push   0xc0024bb4
c00151ea:	e8 5f 1d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00151ef:	83 c4 10             	add    esp,0x10
c00151f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151f6:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c00151f9:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c00151fc:	89 c1                	mov    ecx,eax
c00151fe:	80 f5 00             	xor    ch,0x0
c0015201:	89 cb                	mov    ebx,ecx
c0015203:	89 d0                	mov    eax,edx
c0015205:	80 f4 00             	xor    ah,0x0
c0015208:	89 c6                	mov    esi,eax
c001520a:	89 f0                	mov    eax,esi
c001520c:	09 d8                	or     eax,ebx
c001520e:	74 5c                	je     c001526c <KeCheckAlarm(ThreadControlBlock*)+0xa8>
c0015210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015214:	8b 48 63             	mov    ecx,DWORD PTR [eax+0x63]
c0015217:	8b 58 67             	mov    ebx,DWORD PTR [eax+0x67]
c001521a:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c001521f:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0015225:	39 c8                	cmp    eax,ecx
c0015227:	89 d0                	mov    eax,edx
c0015229:	19 d8                	sbb    eax,ebx
c001522b:	72 3f                	jb     c001526c <KeCheckAlarm(ThreadControlBlock*)+0xa8>
c001522d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015231:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c0015238:	c7 40 67 00 00 00 00 	mov    DWORD PTR [eax+0x67],0x0
c001523f:	83 ec 0c             	sub    esp,0xc
c0015242:	68 d0 4b 02 c0       	push   0xc0024bd0
c0015247:	e8 02 1d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001524c:	83 c4 10             	add    esp,0x10
c001524f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015253:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015256:	8b 80 80 07 00 00    	mov    eax,DWORD PTR [eax+0x780]
c001525c:	83 ec 08             	sub    esp,0x8
c001525f:	6a 0e                	push   0xe
c0015261:	50                   	push   eax
c0015262:	e8 28 bd ff ff       	call   c0010f8f <KeRaiseSignal(SigHandlerBlock*, int)>
c0015267:	83 c4 10             	add    esp,0x10
c001526a:	66 90                	xchg   ax,ax
c001526c:	90                   	nop
c001526d:	83 c4 04             	add    esp,0x4
c0015270:	5b                   	pop    ebx
c0015271:	5e                   	pop    esi
c0015272:	c3                   	ret    

c0015273 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015273:	55                   	push   ebp
c0015274:	57                   	push   edi
c0015275:	56                   	push   esi
c0015276:	53                   	push   ebx
c0015277:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001527d:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015288:	74 3b                	je     c00152c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001528a:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015292:	74 31                	je     c00152c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015294:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001529c:	75 27                	jne    c00152c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001529e:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00152a5:	05 00 10 00 00       	add    eax,0x1000
c00152aa:	89 c2                	mov    edx,eax
c00152ac:	25 00 f0 ff ff       	and    eax,0xfffff000
c00152b1:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00152b8:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00152be:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00152c5:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00152cc:	83 ec 0c             	sub    esp,0xc
c00152cf:	6a 01                	push   0x1
c00152d1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00152d7:	e8 09 e0 ff ff       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c00152dc:	83 c4 10             	add    esp,0x10
c00152df:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00152e5:	89 c3                	mov    ebx,eax
c00152e7:	0f 86 27 01 00 00    	jbe    c0015414 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c00152ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00152f5:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00152fc:	c1 ee 0c             	shr    esi,0xc
c00152ff:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015303:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001530a:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015311:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015315:	29 ef                	sub    edi,ebp
c0015317:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001531b:	0f 83 fa 00 00 00    	jae    c001541b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0015321:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015327:	b8 00 10 00 00       	mov    eax,0x1000
c001532c:	0f 47 f8             	cmova  edi,eax
c001532f:	83 ec 0c             	sub    esp,0xc
c0015332:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015339:	31 d2                	xor    edx,edx
c001533b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001533d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015341:	50                   	push   eax
c0015342:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015346:	56                   	push   esi
c0015347:	52                   	push   edx
c0015348:	57                   	push   edi
c0015349:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015350:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015353:	83 c4 20             	add    esp,0x20
c0015356:	85 c0                	test   eax,eax
c0015358:	75 06                	jne    c0015360 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c001535a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001535e:	74 13                	je     c0015373 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0015360:	83 ec 0c             	sub    esp,0xc
c0015363:	53                   	push   ebx
c0015364:	e8 7a e2 ff ff       	call   c00135e3 <Virt::freeKernelVirtualPages(unsigned long)>
c0015369:	83 c4 10             	add    esp,0x10
c001536c:	31 c0                	xor    eax,eax
c001536e:	e9 80 01 00 00       	jmp    c00154f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0015373:	fa                   	cli    
c0015374:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001537a:	e8 a5 ac ff ff       	call   c0010024 <Phys::allocatePage()>
c001537f:	6a 07                	push   0x7
c0015381:	53                   	push   ebx
c0015382:	50                   	push   eax
c0015383:	89 c7                	mov    edi,eax
c0015385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001538a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001538d:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c0015393:	e8 26 e6 ff ff       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c0015398:	83 c4 0c             	add    esp,0xc
c001539b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00153a2:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00153a8:	6a 00                	push   0x0
c00153aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153b2:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00153b8:	e8 6d e4 ff ff       	call   c001382a <VAS::mapOtherVASIn(bool, VAS*)>
c00153bd:	58                   	pop    eax
c00153be:	5a                   	pop    edx
c00153bf:	68 07 0c 00 00       	push   0xc07
c00153c4:	55                   	push   ebp
c00153c5:	57                   	push   edi
c00153c6:	89 df                	mov    edi,ebx
c00153c8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00153cf:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00153d5:	6a 00                	push   0x0
c00153d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153df:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00153e5:	e8 28 e8 ff ff       	call   c0013c12 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00153ea:	b9 00 10 00 00       	mov    ecx,0x1000
c00153ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00153f1:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00153f8:	83 c4 20             	add    esp,0x20
c00153fb:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0015402:	75 01                	jne    c0015405 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0015404:	fb                   	sti    
c0015405:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015409:	81 c5 00 10 00 00    	add    ebp,0x1000
c001540f:	e9 ef fe ff ff       	jmp    c0015303 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0015414:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001541b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015422:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015428:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001542e:	0f 86 b1 00 00 00    	jbe    c00154e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0015434:	fa                   	cli    
c0015435:	51                   	push   ecx
c0015436:	31 ff                	xor    edi,edi
c0015438:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001543f:	c1 ee 0c             	shr    esi,0xc
c0015442:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0015448:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c001544e:	6a 00                	push   0x0
c0015450:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015455:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015458:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c001545e:	e8 c7 e3 ff ff       	call   c001382a <VAS::mapOtherVASIn(bool, VAS*)>
c0015463:	83 c4 10             	add    esp,0x10
c0015466:	e8 b9 ab ff ff       	call   c0010024 <Phys::allocatePage()>
c001546b:	47                   	inc    edi
c001546c:	6a 07                	push   0x7
c001546e:	53                   	push   ebx
c001546f:	50                   	push   eax
c0015470:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015474:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001547a:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001547d:	ff b2 72 05 00 00    	push   DWORD PTR [edx+0x572]
c0015483:	e8 36 e5 ff ff       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c0015488:	58                   	pop    eax
c0015489:	5a                   	pop    edx
c001548a:	68 07 0c 00 00       	push   0xc07
c001548f:	55                   	push   ebp
c0015490:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015496:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001549a:	50                   	push   eax
c001549b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00154a2:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00154a8:	6a 00                	push   0x0
c00154aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154b2:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00154b8:	e8 55 e7 ff ff       	call   c0013c12 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00154bd:	83 c4 1c             	add    esp,0x1c
c00154c0:	68 00 10 00 00       	push   0x1000
c00154c5:	6a 00                	push   0x0
c00154c7:	53                   	push   ebx
c00154c8:	e8 23 b0 fe ff       	call   c00004f0 <memset>
c00154cd:	83 c4 10             	add    esp,0x10
c00154d0:	39 fe                	cmp    esi,edi
c00154d2:	77 92                	ja     c0015466 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c00154d4:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00154db:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00154e2:	75 01                	jne    c00154e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00154e4:	fb                   	sti    
c00154e5:	83 ec 0c             	sub    esp,0xc
c00154e8:	53                   	push   ebx
c00154e9:	e8 f5 e0 ff ff       	call   c00135e3 <Virt::freeKernelVirtualPages(unsigned long)>
c00154ee:	83 c4 10             	add    esp,0x10
c00154f1:	b0 01                	mov    al,0x1
c00154f3:	81 c4 2c 10 00 00    	add    esp,0x102c
c00154f9:	5b                   	pop    ebx
c00154fa:	5e                   	pop    esi
c00154fb:	5f                   	pop    edi
c00154fc:	5d                   	pop    ebp
c00154fd:	c3                   	ret    

c00154fe <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00154fe:	55                   	push   ebp
c00154ff:	57                   	push   edi
c0015500:	56                   	push   esi
c0015501:	53                   	push   ebx
c0015502:	83 ec 48             	sub    esp,0x48
c0015505:	68 14 01 00 00       	push   0x114
c001550a:	e8 d5 a5 ff ff       	call   c000fae4 <malloc>
c001550f:	83 c4 0c             	add    esp,0xc
c0015512:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0015516:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001551a:	89 c7                	mov    edi,eax
c001551c:	50                   	push   eax
c001551d:	e8 0a 2c ff ff       	call   c000812c <File::File(char const*, Process*)>
c0015522:	58                   	pop    eax
c0015523:	5a                   	pop    edx
c0015524:	6a 01                	push   0x1
c0015526:	57                   	push   edi
c0015527:	e8 1e 2c ff ff       	call   c000814a <File::open(FileOpenMode)>
c001552c:	83 c4 10             	add    esp,0x10
c001552f:	85 c0                	test   eax,eax
c0015531:	0f 85 4c 01 00 00    	jne    c0015683 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0015537:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001553f:	83 ec 0c             	sub    esp,0xc
c0015542:	6a 34                	push   0x34
c0015544:	e8 9b a5 ff ff       	call   c000fae4 <malloc>
c0015549:	89 c3                	mov    ebx,eax
c001554b:	58                   	pop    eax
c001554c:	8b 07                	mov    eax,DWORD PTR [edi]
c001554e:	8d 74 24 38          	lea    esi,[esp+0x38]
c0015552:	56                   	push   esi
c0015553:	53                   	push   ebx
c0015554:	6a 00                	push   0x0
c0015556:	6a 34                	push   0x34
c0015558:	57                   	push   edi
c0015559:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001555c:	83 c4 20             	add    esp,0x20
c001555f:	85 c0                	test   eax,eax
c0015561:	0f 85 1c 01 00 00    	jne    c0015683 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0015567:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001556d:	0f 85 10 01 00 00    	jne    c0015683 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0015573:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015576:	85 c0                	test   eax,eax
c0015578:	0f 84 05 01 00 00    	je     c0015683 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001557e:	31 d2                	xor    edx,edx
c0015580:	55                   	push   ebp
c0015581:	52                   	push   edx
c0015582:	50                   	push   eax
c0015583:	57                   	push   edi
c0015584:	e8 7f 2c ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015589:	83 c4 10             	add    esp,0x10
c001558c:	85 c0                	test   eax,eax
c001558e:	0f 85 ef 00 00 00    	jne    c0015683 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0015594:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015597:	83 ec 0c             	sub    esp,0xc
c001559a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001559e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00155a2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00155a6:	0f af c2             	imul   eax,edx
c00155a9:	50                   	push   eax
c00155aa:	e8 35 a5 ff ff       	call   c000fae4 <malloc>
c00155af:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00155b1:	89 34 24             	mov    DWORD PTR [esp],esi
c00155b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00155b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00155bc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00155c0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00155c4:	0f af c2             	imul   eax,edx
c00155c7:	99                   	cdq    
c00155c8:	52                   	push   edx
c00155c9:	50                   	push   eax
c00155ca:	57                   	push   edi
c00155cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00155ce:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00155d1:	83 c4 20             	add    esp,0x20
c00155d4:	85 c0                	test   eax,eax
c00155d6:	0f 84 a7 00 00 00    	je     c0015683 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00155dc:	31 d2                	xor    edx,edx
c00155de:	51                   	push   ecx
c00155df:	52                   	push   edx
c00155e0:	50                   	push   eax
c00155e1:	57                   	push   edi
c00155e2:	e8 21 2c ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00155e7:	83 c4 10             	add    esp,0x10
c00155ea:	85 c0                	test   eax,eax
c00155ec:	0f 85 91 00 00 00    	jne    c0015683 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00155f2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00155f6:	83 ec 0c             	sub    esp,0xc
c00155f9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00155fd:	0f af c2             	imul   eax,edx
c0015600:	50                   	push   eax
c0015601:	e8 de a4 ff ff       	call   c000fae4 <malloc>
c0015606:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0015608:	89 34 24             	mov    DWORD PTR [esp],esi
c001560b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001560f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015613:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015617:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001561b:	0f af c2             	imul   eax,edx
c001561e:	99                   	cdq    
c001561f:	52                   	push   edx
c0015620:	50                   	push   eax
c0015621:	57                   	push   edi
c0015622:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015625:	83 c4 20             	add    esp,0x20
c0015628:	31 c9                	xor    ecx,ecx
c001562a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015632:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0015636:	0f b7 e9             	movzx  ebp,cx
c0015639:	0f 83 86 00 00 00    	jae    c00156c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c001563f:	c1 e5 05             	shl    ebp,0x5
c0015642:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0015646:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c001564a:	75 73                	jne    c00156bf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c001564c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015653:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0015656:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001565a:	52                   	push   edx
c001565b:	31 d2                	xor    edx,edx
c001565d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015660:	52                   	push   edx
c0015661:	50                   	push   eax
c0015662:	57                   	push   edi
c0015663:	e8 a0 2b ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015668:	83 c4 10             	add    esp,0x10
c001566b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001566f:	85 c0                	test   eax,eax
c0015671:	74 17                	je     c001568a <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0015673:	83 ec 0c             	sub    esp,0xc
c0015676:	68 e1 4b 02 c0       	push   0xc0024be1
c001567b:	e8 ce 18 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015680:	83 c4 10             	add    esp,0x10
c0015683:	31 c0                	xor    eax,eax
c0015685:	e9 8b 00 00 00       	jmp    c0015715 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c001568a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001568e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0015691:	83 ec 0c             	sub    esp,0xc
c0015694:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0015697:	50                   	push   eax
c0015698:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001569c:	56                   	push   esi
c001569d:	57                   	push   edi
c001569e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00156a2:	e8 cc fb ff ff       	call   c0015273 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00156a7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00156ab:	83 c4 20             	add    esp,0x20
c00156ae:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00156b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00156b6:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c00156bb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00156bf:	41                   	inc    ecx
c00156c0:	e9 6d ff ff ff       	jmp    c0015632 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00156c5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00156c9:	83 ec 0c             	sub    esp,0xc
c00156cc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00156d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00156d4:	89 8a 6e 05 00 00    	mov    DWORD PTR [edx+0x56e],ecx
c00156da:	8b 92 72 05 00 00    	mov    edx,DWORD PTR [edx+0x572]
c00156e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00156e5:	05 00 10 00 00       	add    eax,0x1000
c00156ea:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00156ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156f1:	e8 fe a3 ff ff       	call   c000faf4 <free>
c00156f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156f9:	e8 f6 a3 ff ff       	call   c000faf4 <free>
c00156fe:	58                   	pop    eax
c00156ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015703:	e8 ec a3 ff ff       	call   c000faf4 <free>
c0015708:	89 3c 24             	mov    DWORD PTR [esp],edi
c001570b:	e8 98 2a ff ff       	call   c00081a8 <File::close()>
c0015710:	83 c4 10             	add    esp,0x10
c0015713:	b0 01                	mov    al,0x1
c0015715:	83 c4 3c             	add    esp,0x3c
c0015718:	5b                   	pop    ebx
c0015719:	5e                   	pop    esi
c001571a:	5f                   	pop    edi
c001571b:	5d                   	pop    ebp
c001571c:	c3                   	ret    

c001571d <Thr::runtimeReferenceHelper()>:
c001571d:	83 ec 18             	sub    esp,0x18
c0015720:	68 e9 4b 02 c0       	push   0xc0024be9
c0015725:	e8 24 18 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001572a:	fa                   	cli    
c001572b:	83 c4 10             	add    esp,0x10
c001572e:	eb fe                	jmp    c001572e <Thr::runtimeReferenceHelper()+0x11>

c0015730 <Thr::getAddressOfKernelSymbol(char const*)>:
c0015730:	57                   	push   edi
c0015731:	56                   	push   esi
c0015732:	53                   	push   ebx
c0015733:	31 db                	xor    ebx,ebx
c0015735:	39 1d 00 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea00,ebx
c001573b:	7e 3c                	jle    c0015779 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001573d:	8b 34 9d 80 e9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1680]
c0015744:	31 ff                	xor    edi,edi
c0015746:	39 3c 9d 80 e8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1780],edi
c001574d:	7e 27                	jle    c0015776 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001574f:	50                   	push   eax
c0015750:	50                   	push   eax
c0015751:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015755:	8b 06                	mov    eax,DWORD PTR [esi]
c0015757:	03 04 9d 00 e9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1700]
c001575e:	50                   	push   eax
c001575f:	e8 1c b0 fe ff       	call   c0000780 <strcmp>
c0015764:	83 c4 10             	add    esp,0x10
c0015767:	85 c0                	test   eax,eax
c0015769:	75 05                	jne    c0015770 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001576b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001576e:	eb 0b                	jmp    c001577b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015770:	83 c6 10             	add    esi,0x10
c0015773:	47                   	inc    edi
c0015774:	eb d0                	jmp    c0015746 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015776:	43                   	inc    ebx
c0015777:	eb bc                	jmp    c0015735 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015779:	31 c0                	xor    eax,eax
c001577b:	5b                   	pop    ebx
c001577c:	5e                   	pop    esi
c001577d:	5f                   	pop    edi
c001577e:	c3                   	ret    

c001577f <Thr::loadKernelSymbolTable(char const*)>:
c001577f:	55                   	push   ebp
c0015780:	57                   	push   edi
c0015781:	56                   	push   esi
c0015782:	53                   	push   ebx
c0015783:	83 ec 68             	sub    esp,0x68
c0015786:	68 14 01 00 00       	push   0x114
c001578b:	8b 35 58 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea58
c0015791:	e8 4e a3 ff ff       	call   c000fae4 <malloc>
c0015796:	83 c4 0c             	add    esp,0xc
c0015799:	56                   	push   esi
c001579a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001579e:	89 c3                	mov    ebx,eax
c00157a0:	50                   	push   eax
c00157a1:	e8 86 29 ff ff       	call   c000812c <File::File(char const*, Process*)>
c00157a6:	5e                   	pop    esi
c00157a7:	5f                   	pop    edi
c00157a8:	6a 01                	push   0x1
c00157aa:	53                   	push   ebx
c00157ab:	e8 9a 29 ff ff       	call   c000814a <File::open(FileOpenMode)>
c00157b0:	83 c4 10             	add    esp,0x10
c00157b3:	85 c0                	test   eax,eax
c00157b5:	74 0a                	je     c00157c1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00157b7:	83 ec 0c             	sub    esp,0xc
c00157ba:	68 0b 4c 02 c0       	push   0xc0024c0b
c00157bf:	eb 34                	jmp    c00157f5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00157c1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00157c9:	83 ec 0c             	sub    esp,0xc
c00157cc:	6a 34                	push   0x34
c00157ce:	e8 11 a3 ff ff       	call   c000fae4 <malloc>
c00157d3:	59                   	pop    ecx
c00157d4:	8d 74 24 34          	lea    esi,[esp+0x34]
c00157d8:	89 c7                	mov    edi,eax
c00157da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157dc:	56                   	push   esi
c00157dd:	57                   	push   edi
c00157de:	6a 00                	push   0x0
c00157e0:	6a 34                	push   0x34
c00157e2:	53                   	push   ebx
c00157e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00157e6:	83 c4 20             	add    esp,0x20
c00157e9:	85 c0                	test   eax,eax
c00157eb:	74 17                	je     c0015804 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00157ed:	83 ec 0c             	sub    esp,0xc
c00157f0:	68 22 4c 02 c0       	push   0xc0024c22
c00157f5:	e8 30 a6 ff ff       	call   c000fe2a <KePanic(char const*)>
c00157fa:	83 c4 10             	add    esp,0x10
c00157fd:	31 c0                	xor    eax,eax
c00157ff:	e9 31 02 00 00       	jmp    c0015a35 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015804:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001580a:	75 e1                	jne    c00157ed <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001580c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001580f:	85 c0                	test   eax,eax
c0015811:	74 da                	je     c00157ed <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015813:	52                   	push   edx
c0015814:	31 d2                	xor    edx,edx
c0015816:	52                   	push   edx
c0015817:	50                   	push   eax
c0015818:	53                   	push   ebx
c0015819:	e8 ea 29 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001581e:	83 c4 10             	add    esp,0x10
c0015821:	85 c0                	test   eax,eax
c0015823:	75 c8                	jne    c00157ed <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015825:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015829:	83 ec 0c             	sub    esp,0xc
c001582c:	31 ed                	xor    ebp,ebp
c001582e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015832:	0f af c2             	imul   eax,edx
c0015835:	50                   	push   eax
c0015836:	e8 a9 a2 ff ff       	call   c000fae4 <malloc>
c001583b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001583d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015844:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015848:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001584c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015850:	0f af c2             	imul   eax,edx
c0015853:	99                   	cdq    
c0015854:	52                   	push   edx
c0015855:	50                   	push   eax
c0015856:	53                   	push   ebx
c0015857:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001585a:	83 c4 20             	add    esp,0x20
c001585d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015865:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001586d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015875:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001587d:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015881:	0f b7 f5             	movzx  esi,bp
c0015884:	0f 83 a7 00 00 00    	jae    c0015931 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001588a:	6b f6 28             	imul   esi,esi,0x28
c001588d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015891:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015894:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015898:	50                   	push   eax
c0015899:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001589d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00158a1:	8b 16                	mov    edx,DWORD PTR [esi]
c00158a3:	6b c0 28             	imul   eax,eax,0x28
c00158a6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00158aa:	89 d0                	mov    eax,edx
c00158ac:	31 d2                	xor    edx,edx
c00158ae:	52                   	push   edx
c00158af:	50                   	push   eax
c00158b0:	53                   	push   ebx
c00158b1:	e8 52 29 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00158b6:	83 c4 0c             	add    esp,0xc
c00158b9:	6a 20                	push   0x20
c00158bb:	6a 00                	push   0x0
c00158bd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00158c1:	52                   	push   edx
c00158c2:	e8 29 ac fe ff       	call   c00004f0 <memset>
c00158c7:	58                   	pop    eax
c00158c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158ca:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00158ce:	51                   	push   ecx
c00158cf:	8d 54 24 40          	lea    edx,[esp+0x40]
c00158d3:	52                   	push   edx
c00158d4:	6a 00                	push   0x0
c00158d6:	6a 1f                	push   0x1f
c00158d8:	53                   	push   ebx
c00158d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00158dc:	83 c4 18             	add    esp,0x18
c00158df:	68 39 4c 02 c0       	push   0xc0024c39
c00158e4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00158e8:	52                   	push   edx
c00158e9:	e8 92 ae fe ff       	call   c0000780 <strcmp>
c00158ee:	83 c4 10             	add    esp,0x10
c00158f1:	85 c0                	test   eax,eax
c00158f3:	75 0f                	jne    c0015904 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00158f5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00158f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00158fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015900:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015904:	50                   	push   eax
c0015905:	50                   	push   eax
c0015906:	68 41 4c 02 c0       	push   0xc0024c41
c001590b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001590f:	50                   	push   eax
c0015910:	e8 6b ae fe ff       	call   c0000780 <strcmp>
c0015915:	83 c4 10             	add    esp,0x10
c0015918:	85 c0                	test   eax,eax
c001591a:	75 0f                	jne    c001592b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001591c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001591f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015923:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015927:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001592b:	45                   	inc    ebp
c001592c:	e9 4c ff ff ff       	jmp    c001587d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015931:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015936:	75 10                	jne    c0015948 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015938:	83 ec 0c             	sub    esp,0xc
c001593b:	68 49 4c 02 c0       	push   0xc0024c49
c0015940:	e8 e5 a4 ff ff       	call   c000fe2a <KePanic(char const*)>
c0015945:	83 c4 10             	add    esp,0x10
c0015948:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001594d:	75 10                	jne    c001595f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001594f:	83 ec 0c             	sub    esp,0xc
c0015952:	68 49 4c 02 c0       	push   0xc0024c49
c0015957:	e8 ce a4 ff ff       	call   c000fe2a <KePanic(char const*)>
c001595c:	83 c4 10             	add    esp,0x10
c001595f:	50                   	push   eax
c0015960:	31 d2                	xor    edx,edx
c0015962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015966:	52                   	push   edx
c0015967:	50                   	push   eax
c0015968:	53                   	push   ebx
c0015969:	e8 9a 28 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001596e:	5a                   	pop    edx
c001596f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015973:	e8 6c a1 ff ff       	call   c000fae4 <malloc>
c0015978:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001597c:	31 c9                	xor    ecx,ecx
c001597e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015982:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015984:	5e                   	pop    esi
c0015985:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015989:	55                   	push   ebp
c001598a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001598e:	51                   	push   ecx
c001598f:	52                   	push   edx
c0015990:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015994:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015998:	53                   	push   ebx
c0015999:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001599c:	83 c4 14             	add    esp,0x14
c001599f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00159a3:	e8 3c a1 ff ff       	call   c000fae4 <malloc>
c00159a8:	89 c6                	mov    esi,eax
c00159aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159ac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00159af:	56                   	push   esi
c00159b0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00159b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00159b8:	51                   	push   ecx
c00159b9:	52                   	push   edx
c00159ba:	53                   	push   ebx
c00159bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00159be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00159c2:	83 c4 1c             	add    esp,0x1c
c00159c5:	8b 15 00 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea00
c00159cb:	c1 e8 04             	shr    eax,0x4
c00159ce:	89 04 95 80 e8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1780],eax
c00159d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159d9:	31 d2                	xor    edx,edx
c00159db:	52                   	push   edx
c00159dc:	50                   	push   eax
c00159dd:	53                   	push   ebx
c00159de:	e8 25 28 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00159e3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00159e5:	31 d2                	xor    edx,edx
c00159e7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00159ea:	56                   	push   esi
c00159eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00159ef:	52                   	push   edx
c00159f0:	50                   	push   eax
c00159f1:	53                   	push   ebx
c00159f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00159f5:	83 c4 14             	add    esp,0x14
c00159f8:	53                   	push   ebx
c00159f9:	e8 aa 27 ff ff       	call   c00081a8 <File::close()>
c00159fe:	5d                   	pop    ebp
c00159ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a03:	e8 ec a0 ff ff       	call   c000faf4 <free>
c0015a08:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015a0b:	e8 e4 a0 ff ff       	call   c000faf4 <free>
c0015a10:	a1 00 ea 02 c0       	mov    eax,ds:0xc002ea00
c0015a15:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015a19:	83 c4 10             	add    esp,0x10
c0015a1c:	89 34 85 00 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1700],esi
c0015a23:	8d 50 01             	lea    edx,[eax+0x1]
c0015a26:	89 0c 85 80 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1680],ecx
c0015a2d:	b0 01                	mov    al,0x1
c0015a2f:	89 15 00 ea 02 c0    	mov    DWORD PTR ds:0xc002ea00,edx
c0015a35:	83 c4 5c             	add    esp,0x5c
c0015a38:	5b                   	pop    ebx
c0015a39:	5e                   	pop    esi
c0015a3a:	5f                   	pop    edi
c0015a3b:	5d                   	pop    ebp
c0015a3c:	c3                   	ret    

c0015a3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015a3d:	55                   	push   ebp
c0015a3e:	57                   	push   edi
c0015a3f:	56                   	push   esi
c0015a40:	53                   	push   ebx
c0015a41:	81 ec 68 03 00 00    	sub    esp,0x368
c0015a47:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0015a4e:	8b 35 58 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea58
c0015a54:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015a58:	68 14 01 00 00       	push   0x114
c0015a5d:	e8 82 a0 ff ff       	call   c000fae4 <malloc>
c0015a62:	83 c4 0c             	add    esp,0xc
c0015a65:	56                   	push   esi
c0015a66:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015a6d:	50                   	push   eax
c0015a6e:	89 c3                	mov    ebx,eax
c0015a70:	e8 b7 26 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0015a75:	5f                   	pop    edi
c0015a76:	5d                   	pop    ebp
c0015a77:	6a 01                	push   0x1
c0015a79:	53                   	push   ebx
c0015a7a:	e8 cb 26 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0015a7f:	83 c4 10             	add    esp,0x10
c0015a82:	85 c0                	test   eax,eax
c0015a84:	0f 85 b3 06 00 00    	jne    c001613d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015a8a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015a92:	83 ec 0c             	sub    esp,0xc
c0015a95:	6a 34                	push   0x34
c0015a97:	e8 48 a0 ff ff       	call   c000fae4 <malloc>
c0015a9c:	5e                   	pop    esi
c0015a9d:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015aa1:	89 c5                	mov    ebp,eax
c0015aa3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015aa5:	56                   	push   esi
c0015aa6:	55                   	push   ebp
c0015aa7:	6a 00                	push   0x0
c0015aa9:	6a 34                	push   0x34
c0015aab:	53                   	push   ebx
c0015aac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015aaf:	83 c4 20             	add    esp,0x20
c0015ab2:	85 c0                	test   eax,eax
c0015ab4:	0f 85 83 06 00 00    	jne    c001613d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015aba:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0015ac1:	0f 85 76 06 00 00    	jne    c001613d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015ac7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015aca:	85 c0                	test   eax,eax
c0015acc:	0f 84 6b 06 00 00    	je     c001613d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015ad2:	31 d2                	xor    edx,edx
c0015ad4:	51                   	push   ecx
c0015ad5:	52                   	push   edx
c0015ad6:	50                   	push   eax
c0015ad7:	53                   	push   ebx
c0015ad8:	e8 2b 27 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015add:	83 c4 10             	add    esp,0x10
c0015ae0:	85 c0                	test   eax,eax
c0015ae2:	0f 85 55 06 00 00    	jne    c001613d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015ae8:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0015aeb:	83 ec 0c             	sub    esp,0xc
c0015aee:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0015af2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015af6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015afa:	0f af c2             	imul   eax,edx
c0015afd:	50                   	push   eax
c0015afe:	e8 e1 9f ff ff       	call   c000fae4 <malloc>
c0015b03:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015b05:	89 34 24             	mov    DWORD PTR [esp],esi
c0015b08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015b0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b10:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0015b14:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015b18:	0f af c2             	imul   eax,edx
c0015b1b:	99                   	cdq    
c0015b1c:	52                   	push   edx
c0015b1d:	50                   	push   eax
c0015b1e:	53                   	push   ebx
c0015b1f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015b22:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0015b25:	83 c4 20             	add    esp,0x20
c0015b28:	85 c0                	test   eax,eax
c0015b2a:	0f 84 0d 06 00 00    	je     c001613d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015b30:	52                   	push   edx
c0015b31:	31 d2                	xor    edx,edx
c0015b33:	52                   	push   edx
c0015b34:	50                   	push   eax
c0015b35:	53                   	push   ebx
c0015b36:	e8 cd 26 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015b3b:	83 c4 10             	add    esp,0x10
c0015b3e:	85 c0                	test   eax,eax
c0015b40:	0f 85 f7 05 00 00    	jne    c001613d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015b46:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0015b4a:	83 ec 0c             	sub    esp,0xc
c0015b4d:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015b51:	0f af c2             	imul   eax,edx
c0015b54:	50                   	push   eax
c0015b55:	e8 8a 9f ff ff       	call   c000fae4 <malloc>
c0015b5a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015b5c:	89 34 24             	mov    DWORD PTR [esp],esi
c0015b5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015b63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015b67:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0015b6b:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015b6f:	0f af c2             	imul   eax,edx
c0015b72:	99                   	cdq    
c0015b73:	52                   	push   edx
c0015b74:	50                   	push   eax
c0015b75:	53                   	push   ebx
c0015b76:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015b79:	83 c4 20             	add    esp,0x20
c0015b7c:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0015b82:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015b85:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0015b89:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0015b8d:	73 78                	jae    c0015c07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0015b8f:	c1 e7 05             	shl    edi,0x5
c0015b92:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0015b96:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015b99:	75 63                	jne    c0015bfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0015b9b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015b9e:	31 d2                	xor    edx,edx
c0015ba0:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0015ba3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ba7:	50                   	push   eax
c0015ba8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015bab:	52                   	push   edx
c0015bac:	50                   	push   eax
c0015bad:	53                   	push   ebx
c0015bae:	e8 55 26 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015bb3:	83 c4 10             	add    esp,0x10
c0015bb6:	85 c0                	test   eax,eax
c0015bb8:	0f 85 7f 05 00 00    	jne    c001613d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015bbe:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015bc5:	83 ec 0c             	sub    esp,0xc
c0015bc8:	31 d2                	xor    edx,edx
c0015bca:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0015bce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015bd0:	01 c6                	add    esi,eax
c0015bd2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015bd9:	50                   	push   eax
c0015bda:	56                   	push   esi
c0015bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bdf:	52                   	push   edx
c0015be0:	50                   	push   eax
c0015be1:	53                   	push   ebx
c0015be2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015be5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015be8:	83 c4 1c             	add    esp,0x1c
c0015beb:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015bee:	50                   	push   eax
c0015bef:	6a 00                	push   0x0
c0015bf1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0015bf5:	56                   	push   esi
c0015bf6:	e8 f5 a8 fe ff       	call   c00004f0 <memset>
c0015bfb:	83 c4 10             	add    esp,0x10
c0015bfe:	66 ff 04 24          	inc    WORD PTR [esp]
c0015c02:	e9 7b ff ff ff       	jmp    c0015b82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0015c07:	50                   	push   eax
c0015c08:	68 00 01 00 00       	push   0x100
c0015c0d:	6a 00                	push   0x0
c0015c0f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015c13:	50                   	push   eax
c0015c14:	e8 d7 a8 fe ff       	call   c00004f0 <memset>
c0015c19:	83 c4 0c             	add    esp,0xc
c0015c1c:	68 00 01 00 00       	push   0x100
c0015c21:	6a 00                	push   0x0
c0015c23:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015c2a:	50                   	push   eax
c0015c2b:	e8 c0 a8 fe ff       	call   c00004f0 <memset>
c0015c30:	83 c4 10             	add    esp,0x10
c0015c33:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0015c3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015c41:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c49:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015c51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015c59:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015c61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c65:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0015c69:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015c6e:	0f 83 16 01 00 00    	jae    c0015d8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015c74:	6b ff 28             	imul   edi,edi,0x28
c0015c77:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0015c7b:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015c7e:	51                   	push   ecx
c0015c7f:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015c83:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015c87:	8b 07                	mov    eax,DWORD PTR [edi]
c0015c89:	6b d2 28             	imul   edx,edx,0x28
c0015c8c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015c90:	31 d2                	xor    edx,edx
c0015c92:	52                   	push   edx
c0015c93:	50                   	push   eax
c0015c94:	53                   	push   ebx
c0015c95:	e8 6e 25 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015c9a:	83 c4 0c             	add    esp,0xc
c0015c9d:	6a 20                	push   0x20
c0015c9f:	6a 00                	push   0x0
c0015ca1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015ca8:	51                   	push   ecx
c0015ca9:	e8 42 a8 fe ff       	call   c00004f0 <memset>
c0015cae:	58                   	pop    eax
c0015caf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015cb1:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015cb5:	52                   	push   edx
c0015cb6:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015cbd:	51                   	push   ecx
c0015cbe:	6a 00                	push   0x0
c0015cc0:	6a 1f                	push   0x1f
c0015cc2:	53                   	push   ebx
c0015cc3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015cc6:	83 c4 1c             	add    esp,0x1c
c0015cc9:	6a 09                	push   0x9
c0015ccb:	68 63 4c 02 c0       	push   0xc0024c63
c0015cd0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015cd7:	51                   	push   ecx
c0015cd8:	e8 a3 a6 fe ff       	call   c0000380 <memcmp>
c0015cdd:	83 c4 10             	add    esp,0x10
c0015ce0:	85 c0                	test   eax,eax
c0015ce2:	75 1a                	jne    c0015cfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0015ce4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015ce7:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0015cea:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015cee:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015cf1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015cf8:	89 d0                	mov    eax,edx
c0015cfa:	40                   	inc    eax
c0015cfb:	89 04 24             	mov    DWORD PTR [esp],eax
c0015cfe:	52                   	push   edx
c0015cff:	6a 09                	push   0x9
c0015d01:	68 6d 4c 02 c0       	push   0xc0024c6d
c0015d06:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015d0d:	50                   	push   eax
c0015d0e:	e8 6d a6 fe ff       	call   c0000380 <memcmp>
c0015d13:	83 c4 10             	add    esp,0x10
c0015d16:	85 c0                	test   eax,eax
c0015d18:	75 1a                	jne    c0015d34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0015d1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015d1d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015d20:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015d24:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015d27:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015d2e:	89 c8                	mov    eax,ecx
c0015d30:	40                   	inc    eax
c0015d31:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d34:	50                   	push   eax
c0015d35:	50                   	push   eax
c0015d36:	68 39 4c 02 c0       	push   0xc0024c39
c0015d3b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015d42:	50                   	push   eax
c0015d43:	e8 38 aa fe ff       	call   c0000780 <strcmp>
c0015d48:	83 c4 10             	add    esp,0x10
c0015d4b:	85 c0                	test   eax,eax
c0015d4d:	75 0b                	jne    c0015d5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0015d4f:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0015d53:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015d56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d5a:	50                   	push   eax
c0015d5b:	50                   	push   eax
c0015d5c:	68 41 4c 02 c0       	push   0xc0024c41
c0015d61:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015d68:	50                   	push   eax
c0015d69:	e8 12 aa fe ff       	call   c0000780 <strcmp>
c0015d6e:	83 c4 10             	add    esp,0x10
c0015d71:	85 c0                	test   eax,eax
c0015d73:	75 0b                	jne    c0015d80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015d75:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0015d79:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015d7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d80:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015d85:	e9 d7 fe ff ff       	jmp    c0015c61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0015d8a:	50                   	push   eax
c0015d8b:	31 d2                	xor    edx,edx
c0015d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d91:	52                   	push   edx
c0015d92:	50                   	push   eax
c0015d93:	53                   	push   ebx
c0015d94:	e8 6f 24 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015d99:	58                   	pop    eax
c0015d9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d9e:	e8 41 9d ff ff       	call   c000fae4 <malloc>
c0015da3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015da5:	31 d2                	xor    edx,edx
c0015da7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015dab:	58                   	pop    eax
c0015dac:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015db0:	56                   	push   esi
c0015db1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015db5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015db9:	52                   	push   edx
c0015dba:	50                   	push   eax
c0015dbb:	53                   	push   ebx
c0015dbc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015dbf:	83 c4 14             	add    esp,0x14
c0015dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dc6:	e8 19 9d ff ff       	call   c000fae4 <malloc>
c0015dcb:	31 d2                	xor    edx,edx
c0015dcd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015dd1:	83 c4 0c             	add    esp,0xc
c0015dd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dd8:	52                   	push   edx
c0015dd9:	50                   	push   eax
c0015dda:	53                   	push   ebx
c0015ddb:	e8 28 24 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015de0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015de2:	31 d2                	xor    edx,edx
c0015de4:	89 34 24             	mov    DWORD PTR [esp],esi
c0015de7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015deb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015def:	52                   	push   edx
c0015df0:	50                   	push   eax
c0015df1:	53                   	push   ebx
c0015df2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015df5:	83 c4 20             	add    esp,0x20
c0015df8:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0015dfd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015e05:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015e09:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015e0d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0015e10:	0f 84 2b 03 00 00    	je     c0016141 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0015e16:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0015e1d:	31 d2                	xor    edx,edx
c0015e1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e23:	c1 e8 03             	shr    eax,0x3
c0015e26:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015e2a:	51                   	push   ecx
c0015e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e2f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015e33:	52                   	push   edx
c0015e34:	50                   	push   eax
c0015e35:	53                   	push   ebx
c0015e36:	e8 cd 23 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015e3b:	5e                   	pop    esi
c0015e3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e40:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015e47:	e8 98 9c ff ff       	call   c000fae4 <malloc>
c0015e4c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015e4e:	31 d2                	xor    edx,edx
c0015e50:	89 c7                	mov    edi,eax
c0015e52:	58                   	pop    eax
c0015e53:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015e57:	50                   	push   eax
c0015e58:	57                   	push   edi
c0015e59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e5d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015e64:	52                   	push   edx
c0015e65:	50                   	push   eax
c0015e66:	53                   	push   ebx
c0015e67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e6a:	83 c4 20             	add    esp,0x20
c0015e6d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015e75:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015e79:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015e7d:	0f 8d a5 02 00 00    	jge    c0016128 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0015e83:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0015e88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e8c:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015e8f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015e93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e97:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0015e9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e9f:	c1 e8 08             	shr    eax,0x8
c0015ea2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015ea6:	89 c2                	mov    edx,eax
c0015ea8:	c1 e2 04             	shl    edx,0x4
c0015eab:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015eaf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0015eb2:	85 f6                	test   esi,esi
c0015eb4:	0f 85 cf 00 00 00    	jne    c0015f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015eba:	83 ec 0c             	sub    esp,0xc
c0015ebd:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ec5:	03 02                	add    eax,DWORD PTR [edx]
c0015ec7:	50                   	push   eax
c0015ec8:	e8 63 f8 ff ff       	call   c0015730 <Thr::getAddressOfKernelSymbol(char const*)>
c0015ecd:	83 c4 10             	add    esp,0x10
c0015ed0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ed4:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0015ed9:	85 c0                	test   eax,eax
c0015edb:	89 c6                	mov    esi,eax
c0015edd:	0f 85 a6 00 00 00    	jne    c0015f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015ee3:	83 ec 0c             	sub    esp,0xc
c0015ee6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eee:	03 02                	add    eax,DWORD PTR [edx]
c0015ef0:	50                   	push   eax
c0015ef1:	e8 be a9 ff ff       	call   c00108b4 <KeResolveCompatibilitySymbol(char*)>
c0015ef6:	83 c4 10             	add    esp,0x10
c0015ef9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015efd:	85 c0                	test   eax,eax
c0015eff:	89 c6                	mov    esi,eax
c0015f01:	0f 85 82 00 00 00    	jne    c0015f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015f07:	50                   	push   eax
c0015f08:	50                   	push   eax
c0015f09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f0d:	03 02                	add    eax,DWORD PTR [edx]
c0015f0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015f13:	50                   	push   eax
c0015f14:	68 77 4c 02 c0       	push   0xc0024c77
c0015f19:	e8 30 10 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015f1e:	58                   	pop    eax
c0015f1f:	5a                   	pop    edx
c0015f20:	68 91 4c 02 c0       	push   0xc0024c91
c0015f25:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015f2c:	51                   	push   ecx
c0015f2d:	e8 1e a7 fe ff       	call   c0000650 <strcpy>
c0015f32:	59                   	pop    ecx
c0015f33:	58                   	pop    eax
c0015f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015f38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f3c:	03 02                	add    eax,DWORD PTR [edx]
c0015f3e:	50                   	push   eax
c0015f3f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015f46:	51                   	push   ecx
c0015f47:	e8 24 a9 fe ff       	call   c0000870 <strcat>
c0015f4c:	58                   	pop    eax
c0015f4d:	5a                   	pop    edx
c0015f4e:	68 2b 4d 02 c0       	push   0xc0024d2b
c0015f53:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015f5a:	51                   	push   ecx
c0015f5b:	e8 10 a9 fe ff       	call   c0000870 <strcat>
c0015f60:	83 c4 10             	add    esp,0x10
c0015f63:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015f68:	0f 84 77 01 00 00    	je     c00160e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015f6e:	83 ec 0c             	sub    esp,0xc
c0015f71:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015f78:	51                   	push   ecx
c0015f79:	e8 ac 9e ff ff       	call   c000fe2a <KePanic(char const*)>
c0015f7e:	83 c4 10             	add    esp,0x10
c0015f81:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015f85:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f89:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015f8e:	83 f8 01             	cmp    eax,0x1
c0015f91:	0f 85 9b 00 00 00    	jne    c0016032 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0015f97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f9b:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0015fa2:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0015fa6:	01 d0                	add    eax,edx
c0015fa8:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015fb0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015fb4:	0f 94 c0             	sete   al
c0015fb7:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015fbf:	0f 94 c1             	sete   cl
c0015fc2:	09 c1                	or     ecx,eax
c0015fc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015fc8:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015fcd:	0f b6 c9             	movzx  ecx,cl
c0015fd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015fd2:	74 41                	je     c0016015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0015fd4:	8d 14 06             	lea    edx,[esi+eax*1]
c0015fd7:	85 c9                	test   ecx,ecx
c0015fd9:	75 15                	jne    c0015ff0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0015fdb:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015fdf:	66 83 f8 0c          	cmp    ax,0xc
c0015fe3:	76 05                	jbe    c0015fea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0015fe5:	b8 0c 00 00 00       	mov    eax,0xc
c0015fea:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015fee:	76 37                	jbe    c0016027 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015ff0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015ff5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015ff9:	0f 84 e6 00 00 00    	je     c00160e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015fff:	83 ec 0c             	sub    esp,0xc
c0016002:	68 a8 4c 02 c0       	push   0xc0024ca8
c0016007:	e8 1e 9e ff ff       	call   c000fe2a <KePanic(char const*)>
c001600c:	83 c4 10             	add    esp,0x10
c001600f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016013:	eb 12                	jmp    c0016027 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0016015:	01 c2                	add    edx,eax
c0016017:	85 c9                	test   ecx,ecx
c0016019:	75 0c                	jne    c0016027 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001601b:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001601f:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0016023:	77 02                	ja     c0016027 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0016025:	01 f2                	add    edx,esi
c0016027:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001602b:	89 10                	mov    DWORD PTR [eax],edx
c001602d:	e9 ed 00 00 00       	jmp    c001611f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0016032:	83 f8 02             	cmp    eax,0x2
c0016035:	0f 85 81 00 00 00    	jne    c00160bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001603b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016042:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0016046:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c001604a:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0016052:	74 21                	je     c0016075 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0016054:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c001605c:	74 17                	je     c0016075 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001605e:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0016062:	ba 0a 00 00 00       	mov    edx,0xa
c0016067:	83 f9 0e             	cmp    ecx,0xe
c001606a:	77 03                	ja     c001606f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c001606c:	8d 51 fc             	lea    edx,[ecx-0x4]
c001606f:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0016073:	76 1f                	jbe    c0016094 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0016075:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001607a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001607e:	74 65                	je     c00160e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0016080:	83 ec 0c             	sub    esp,0xc
c0016083:	68 c4 4c 02 c0       	push   0xc0024cc4
c0016088:	e8 9d 9d ff ff       	call   c000fe2a <KePanic(char const*)>
c001608d:	83 c4 10             	add    esp,0x10
c0016090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016094:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0016099:	8b 10                	mov    edx,DWORD PTR [eax]
c001609b:	74 15                	je     c00160b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001609d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00160a1:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00160a8:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00160ac:	01 d1                	add    ecx,edx
c00160ae:	01 ce                	add    esi,ecx
c00160b0:	eb 06                	jmp    c00160b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00160b2:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00160b6:	01 d6                	add    esi,edx
c00160b8:	89 30                	mov    DWORD PTR [eax],esi
c00160ba:	eb 63                	jmp    c001611f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00160bc:	56                   	push   esi
c00160bd:	56                   	push   esi
c00160be:	50                   	push   eax
c00160bf:	68 e0 4c 02 c0       	push   0xc0024ce0
c00160c4:	e8 85 0e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00160c9:	83 c4 10             	add    esp,0x10
c00160cc:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00160d1:	74 12                	je     c00160e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00160d3:	83 ec 0c             	sub    esp,0xc
c00160d6:	68 eb 4c 02 c0       	push   0xc0024ceb
c00160db:	e8 4a 9d ff ff       	call   c000fe2a <KePanic(char const*)>
c00160e0:	83 c4 10             	add    esp,0x10
c00160e3:	eb 3a                	jmp    c001611f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00160e5:	83 ec 0c             	sub    esp,0xc
c00160e8:	53                   	push   ebx
c00160e9:	e8 ba 20 ff ff       	call   c00081a8 <File::close()>
c00160ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00160f9:	e8 f6 99 ff ff       	call   c000faf4 <free>
c00160fe:	59                   	pop    ecx
c00160ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016103:	e8 ec 99 ff ff       	call   c000faf4 <free>
c0016108:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001610b:	e8 e4 99 ff ff       	call   c000faf4 <free>
c0016110:	5b                   	pop    ebx
c0016111:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016115:	e8 da 99 ff ff       	call   c000faf4 <free>
c001611a:	83 c4 10             	add    esp,0x10
c001611d:	eb 1e                	jmp    c001613d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001611f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016123:	e9 4d fd ff ff       	jmp    c0015e75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0016128:	83 ec 0c             	sub    esp,0xc
c001612b:	57                   	push   edi
c001612c:	e8 c3 99 ff ff       	call   c000faf4 <free>
c0016131:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0016135:	83 c4 10             	add    esp,0x10
c0016138:	e9 cc fc ff ff       	jmp    c0015e09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c001613d:	31 c0                	xor    eax,eax
c001613f:	eb 32                	jmp    c0016173 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0016141:	83 ec 0c             	sub    esp,0xc
c0016144:	53                   	push   ebx
c0016145:	e8 5e 20 ff ff       	call   c00081a8 <File::close()>
c001614a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001614c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001614f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016152:	58                   	pop    eax
c0016153:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016157:	e8 98 99 ff ff       	call   c000faf4 <free>
c001615c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001615f:	e8 90 99 ff ff       	call   c000faf4 <free>
c0016164:	5a                   	pop    edx
c0016165:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016169:	e8 86 99 ff ff       	call   c000faf4 <free>
c001616e:	83 c4 10             	add    esp,0x10
c0016171:	b0 01                	mov    al,0x1
c0016173:	81 c4 5c 03 00 00    	add    esp,0x35c
c0016179:	5b                   	pop    ebx
c001617a:	5e                   	pop    esi
c001617b:	5f                   	pop    edi
c001617c:	5d                   	pop    ebp
c001617d:	c3                   	ret    

c001617e <Thr::getDriverBaseFromAddress(unsigned long)>:
c001617e:	56                   	push   esi
c001617f:	31 d2                	xor    edx,edx
c0016181:	53                   	push   ebx
c0016182:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c0016188:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001618c:	39 d3                	cmp    ebx,edx
c001618e:	7e 1b                	jle    c00161ab <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0016190:	8b 04 95 80 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b80]
c0016197:	39 c8                	cmp    eax,ecx
c0016199:	77 0d                	ja     c00161a8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001619b:	8b 34 95 80 e2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd1d80]
c00161a2:	01 c6                	add    esi,eax
c00161a4:	39 ce                	cmp    esi,ecx
c00161a6:	77 05                	ja     c00161ad <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00161a8:	42                   	inc    edx
c00161a9:	eb e1                	jmp    c001618c <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00161ab:	31 c0                	xor    eax,eax
c00161ad:	5b                   	pop    ebx
c00161ae:	5e                   	pop    esi
c00161af:	c3                   	ret    

c00161b0 <Thr::getDriverNameFromAddress(unsigned long)>:
c00161b0:	53                   	push   ebx
c00161b1:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c00161b7:	31 c0                	xor    eax,eax
c00161b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00161bd:	39 c3                	cmp    ebx,eax
c00161bf:	7e 22                	jle    c00161e3 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00161c1:	8b 14 85 80 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b80]
c00161c8:	39 ca                	cmp    edx,ecx
c00161ca:	77 14                	ja     c00161e0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00161cc:	03 14 85 80 e2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd1d80]
c00161d3:	39 ca                	cmp    edx,ecx
c00161d5:	76 09                	jbe    c00161e0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00161d7:	8b 04 85 80 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1980]
c00161de:	eb 05                	jmp    c00161e5 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00161e0:	40                   	inc    eax
c00161e1:	eb da                	jmp    c00161bd <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00161e3:	31 c0                	xor    eax,eax
c00161e5:	5b                   	pop    ebx
c00161e6:	c3                   	ret    

c00161e7 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00161e7:	53                   	push   ebx
c00161e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00161ec:	53                   	push   ebx
c00161ed:	e8 8c ff ff ff       	call   c001617e <Thr::getDriverBaseFromAddress(unsigned long)>
c00161f2:	5a                   	pop    edx
c00161f3:	31 d2                	xor    edx,edx
c00161f5:	85 c0                	test   eax,eax
c00161f7:	74 04                	je     c00161fd <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00161f9:	89 da                	mov    edx,ebx
c00161fb:	29 c2                	sub    edx,eax
c00161fd:	5b                   	pop    ebx
c00161fe:	89 d0                	mov    eax,edx
c0016200:	c3                   	ret    

c0016201 <Thr::loadDLL(char const*, bool)>:
c0016201:	55                   	push   ebp
c0016202:	57                   	push   edi
c0016203:	56                   	push   esi
c0016204:	53                   	push   ebx
c0016205:	81 ec 34 01 00 00    	sub    esp,0x134
c001620b:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016212:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0016219:	56                   	push   esi
c001621a:	68 03 4d 02 c0       	push   0xc0024d03
c001621f:	e8 2a 0d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016224:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001622b:	e8 b4 98 ff ff       	call   c000fae4 <malloc>
c0016230:	83 c4 0c             	add    esp,0xc
c0016233:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0016239:	56                   	push   esi
c001623a:	50                   	push   eax
c001623b:	89 c3                	mov    ebx,eax
c001623d:	e8 ea 1e ff ff       	call   c000812c <File::File(char const*, Process*)>
c0016242:	83 c4 10             	add    esp,0x10
c0016245:	85 db                	test   ebx,ebx
c0016247:	75 3c                	jne    c0016285 <Thr::loadDLL(char const*, bool)+0x84>
c0016249:	89 e8                	mov    eax,ebp
c001624b:	84 c0                	test   al,al
c001624d:	0f 84 02 02 00 00    	je     c0016455 <Thr::loadDLL(char const*, bool)+0x254>
c0016253:	50                   	push   eax
c0016254:	50                   	push   eax
c0016255:	68 14 4d 02 c0       	push   0xc0024d14
c001625a:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001625e:	57                   	push   edi
c001625f:	e8 ec a3 fe ff       	call   c0000650 <strcpy>
c0016264:	58                   	pop    eax
c0016265:	5a                   	pop    edx
c0016266:	56                   	push   esi
c0016267:	57                   	push   edi
c0016268:	e8 03 a6 fe ff       	call   c0000870 <strcat>
c001626d:	59                   	pop    ecx
c001626e:	58                   	pop    eax
c001626f:	68 2b 4d 02 c0       	push   0xc0024d2b
c0016274:	57                   	push   edi
c0016275:	e8 f6 a5 fe ff       	call   c0000870 <strcat>
c001627a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001627d:	e8 a8 9b ff ff       	call   c000fe2a <KePanic(char const*)>
c0016282:	83 c4 10             	add    esp,0x10
c0016285:	50                   	push   eax
c0016286:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001628a:	50                   	push   eax
c001628b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001628f:	50                   	push   eax
c0016290:	53                   	push   ebx
c0016291:	e8 b6 21 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0016296:	83 c4 10             	add    esp,0x10
c0016299:	85 db                	test   ebx,ebx
c001629b:	89 c7                	mov    edi,eax
c001629d:	74 0c                	je     c00162ab <Thr::loadDLL(char const*, bool)+0xaa>
c001629f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162a1:	83 ec 0c             	sub    esp,0xc
c00162a4:	53                   	push   ebx
c00162a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162a8:	83 c4 10             	add    esp,0x10
c00162ab:	83 ec 0c             	sub    esp,0xc
c00162ae:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00162b3:	50                   	push   eax
c00162b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162bc:	57                   	push   edi
c00162bd:	68 2d 4d 02 c0       	push   0xc0024d2d
c00162c2:	e8 87 0c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00162c7:	83 c4 20             	add    esp,0x20
c00162ca:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00162cf:	75 0a                	jne    c00162db <Thr::loadDLL(char const*, bool)+0xda>
c00162d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162d5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00162d9:	75 3e                	jne    c0016319 <Thr::loadDLL(char const*, bool)+0x118>
c00162db:	89 e8                	mov    eax,ebp
c00162dd:	31 db                	xor    ebx,ebx
c00162df:	84 c0                	test   al,al
c00162e1:	0f 84 6e 01 00 00    	je     c0016455 <Thr::loadDLL(char const*, bool)+0x254>
c00162e7:	50                   	push   eax
c00162e8:	50                   	push   eax
c00162e9:	68 4e 4d 02 c0       	push   0xc0024d4e
c00162ee:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00162f2:	53                   	push   ebx
c00162f3:	e8 58 a3 fe ff       	call   c0000650 <strcpy>
c00162f8:	58                   	pop    eax
c00162f9:	5a                   	pop    edx
c00162fa:	56                   	push   esi
c00162fb:	53                   	push   ebx
c00162fc:	e8 6f a5 fe ff       	call   c0000870 <strcat>
c0016301:	59                   	pop    ecx
c0016302:	5f                   	pop    edi
c0016303:	68 2b 4d 02 c0       	push   0xc0024d2b
c0016308:	53                   	push   ebx
c0016309:	e8 62 a5 fe ff       	call   c0000870 <strcat>
c001630e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016311:	e8 14 9b ff ff       	call   c000fe2a <KePanic(char const*)>
c0016316:	83 c4 10             	add    esp,0x10
c0016319:	53                   	push   ebx
c001631a:	6a 03                	push   0x3
c001631c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016320:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016324:	05 ff 0f 00 00       	add    eax,0xfff
c0016329:	83 d2 00             	adc    edx,0x0
c001632c:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016330:	50                   	push   eax
c0016331:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c0016337:	e8 8a d7 ff ff       	call   c0013ac6 <VAS::allocatePages(int, int)>
c001633c:	89 c3                	mov    ebx,eax
c001633e:	58                   	pop    eax
c001633f:	5a                   	pop    edx
c0016340:	53                   	push   ebx
c0016341:	68 86 3f 02 c0       	push   0xc0023f86
c0016346:	e8 03 0c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001634b:	89 34 24             	mov    DWORD PTR [esp],esi
c001634e:	e8 2d a2 fe ff       	call   c0000580 <strlen>
c0016353:	8b 3d 60 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e260
c0016359:	40                   	inc    eax
c001635a:	89 04 24             	mov    DWORD PTR [esp],eax
c001635d:	e8 82 97 ff ff       	call   c000fae4 <malloc>
c0016362:	59                   	pop    ecx
c0016363:	89 04 bd 80 e6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1980],eax
c001636a:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c001636f:	5f                   	pop    edi
c0016370:	56                   	push   esi
c0016371:	ff 34 85 80 e6 02 c0 	push   DWORD PTR [eax*4-0x3ffd1980]
c0016378:	e8 d3 a2 fe ff       	call   c0000650 <strcpy>
c001637d:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c0016382:	89 1c 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],ebx
c0016389:	8d 50 01             	lea    edx,[eax+0x1]
c001638c:	89 15 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,edx
c0016392:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016396:	83 c4 0c             	add    esp,0xc
c0016399:	6a 01                	push   0x1
c001639b:	53                   	push   ebx
c001639c:	56                   	push   esi
c001639d:	89 14 85 80 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d80],edx
c00163a4:	e8 94 f6 ff ff       	call   c0015a3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00163a9:	83 c4 10             	add    esp,0x10
c00163ac:	89 c7                	mov    edi,eax
c00163ae:	89 f8                	mov    eax,edi
c00163b0:	83 f0 01             	xor    eax,0x1
c00163b3:	84 c0                	test   al,al
c00163b5:	74 18                	je     c00163cf <Thr::loadDLL(char const*, bool)+0x1ce>
c00163b7:	89 e8                	mov    eax,ebp
c00163b9:	84 c0                	test   al,al
c00163bb:	74 12                	je     c00163cf <Thr::loadDLL(char const*, bool)+0x1ce>
c00163bd:	83 ec 0c             	sub    esp,0xc
c00163c0:	68 67 4d 02 c0       	push   0xc0024d67
c00163c5:	e8 60 9a ff ff       	call   c000fe2a <KePanic(char const*)>
c00163ca:	83 c4 10             	add    esp,0x10
c00163cd:	eb 06                	jmp    c00163d5 <Thr::loadDLL(char const*, bool)+0x1d4>
c00163cf:	89 f8                	mov    eax,edi
c00163d1:	84 c0                	test   al,al
c00163d3:	75 10                	jne    c00163e5 <Thr::loadDLL(char const*, bool)+0x1e4>
c00163d5:	83 ec 0c             	sub    esp,0xc
c00163d8:	68 86 4d 02 c0       	push   0xc0024d86
c00163dd:	e8 48 9a ff ff       	call   c000fe2a <KePanic(char const*)>
c00163e2:	83 c4 10             	add    esp,0x10
c00163e5:	31 f6                	xor    esi,esi
c00163e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163ef:	05 ff 0f 00 00       	add    eax,0xfff
c00163f4:	83 d2 00             	adc    edx,0x0
c00163f7:	0f ac d0 0c          	shrd   eax,edx,0xc
c00163fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00163ff:	c1 ea 0c             	shr    edx,0xc
c0016402:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016406:	ba 00 00 00 00       	mov    edx,0x0
c001640b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001640f:	89 d0                	mov    eax,edx
c0016411:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0016415:	73 32                	jae    c0016449 <Thr::loadDLL(char const*, bool)+0x248>
c0016417:	50                   	push   eax
c0016418:	50                   	push   eax
c0016419:	89 f0                	mov    eax,esi
c001641b:	c1 e0 0c             	shl    eax,0xc
c001641e:	01 d8                	add    eax,ebx
c0016420:	50                   	push   eax
c0016421:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c0016427:	e8 98 d1 ff ff       	call   c00135c4 <VAS::getPageTableEntry(unsigned long)>
c001642c:	83 c4 10             	add    esp,0x10
c001642f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016431:	a8 60                	test   al,0x60
c0016433:	75 11                	jne    c0016446 <Thr::loadDLL(char const*, bool)+0x245>
c0016435:	83 ec 0c             	sub    esp,0xc
c0016438:	25 00 f0 ff ff       	and    eax,0xfffff000
c001643d:	50                   	push   eax
c001643e:	e8 78 9b ff ff       	call   c000ffbb <Phys::freePage(unsigned long)>
c0016443:	83 c4 10             	add    esp,0x10
c0016446:	46                   	inc    esi
c0016447:	eb 9e                	jmp    c00163e7 <Thr::loadDLL(char const*, bool)+0x1e6>
c0016449:	89 f8                	mov    eax,edi
c001644b:	84 c0                	test   al,al
c001644d:	b8 00 00 00 00       	mov    eax,0x0
c0016452:	0f 44 d8             	cmove  ebx,eax
c0016455:	81 c4 2c 01 00 00    	add    esp,0x12c
c001645b:	89 d8                	mov    eax,ebx
c001645d:	5b                   	pop    ebx
c001645e:	5e                   	pop    esi
c001645f:	5f                   	pop    edi
c0016460:	5d                   	pop    ebp
c0016461:	c3                   	ret    

c0016462 <Thr::executeDLL(unsigned long, void*)>:
c0016462:	56                   	push   esi
c0016463:	53                   	push   ebx
c0016464:	52                   	push   edx
c0016465:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016469:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001646d:	85 db                	test   ebx,ebx
c001646f:	75 10                	jne    c0016481 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0016471:	83 ec 0c             	sub    esp,0xc
c0016474:	68 a2 4d 02 c0       	push   0xc0024da2
c0016479:	e8 ac 99 ff ff       	call   c000fe2a <KePanic(char const*)>
c001647e:	83 c4 10             	add    esp,0x10
c0016481:	50                   	push   eax
c0016482:	50                   	push   eax
c0016483:	53                   	push   ebx
c0016484:	68 cc 4d 02 c0       	push   0xc0024dcc
c0016489:	e8 c0 0a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001648e:	89 d8                	mov    eax,ebx
c0016490:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016494:	83 c4 14             	add    esp,0x14
c0016497:	5b                   	pop    ebx
c0016498:	5e                   	pop    esi
c0016499:	ff e0                	jmp    eax

c001649b <KeProcessExec(Process*, char const*)>:
c001649b:	56                   	push   esi
c001649c:	53                   	push   ebx
c001649d:	83 ec 04             	sub    esp,0x4
c00164a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164a4:	8b b3 72 05 00 00    	mov    esi,DWORD PTR [ebx+0x572]
c00164aa:	85 f6                	test   esi,esi
c00164ac:	74 16                	je     c00164c4 <KeProcessExec(Process*, char const*)+0x29>
c00164ae:	83 ec 0c             	sub    esp,0xc
c00164b1:	56                   	push   esi
c00164b2:	e8 9f d3 ff ff       	call   c0013856 <VAS::~VAS()>
c00164b7:	58                   	pop    eax
c00164b8:	5a                   	pop    edx
c00164b9:	6a 14                	push   0x14
c00164bb:	56                   	push   esi
c00164bc:	e8 9a 6d ff ff       	call   c000d25b <operator delete(void*, unsigned long)>
c00164c1:	83 c4 10             	add    esp,0x10
c00164c4:	83 ec 0c             	sub    esp,0xc
c00164c7:	6a 14                	push   0x14
c00164c9:	e8 16 96 ff ff       	call   c000fae4 <malloc>
c00164ce:	89 c6                	mov    esi,eax
c00164d0:	58                   	pop    eax
c00164d1:	5a                   	pop    edx
c00164d2:	6a 00                	push   0x0
c00164d4:	56                   	push   esi
c00164d5:	e8 28 d8 ff ff       	call   c0013d02 <VAS::VAS(bool)>
c00164da:	89 b3 72 05 00 00    	mov    DWORD PTR [ebx+0x572],esi
c00164e0:	59                   	pop    ecx
c00164e1:	5e                   	pop    esi
c00164e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164e6:	50                   	push   eax
c00164e7:	53                   	push   ebx
c00164e8:	e8 11 f0 ff ff       	call   c00154fe <Thr::loadProgramIntoMemory(Process*, char const*)>
c00164ed:	83 c4 14             	add    esp,0x14
c00164f0:	31 c0                	xor    eax,eax
c00164f2:	5b                   	pop    ebx
c00164f3:	5e                   	pop    esi
c00164f4:	c3                   	ret    
c00164f5:	66 90                	xchg   ax,ax
c00164f7:	90                   	nop

c00164f8 <userModeEntryPoint(void*)>:
c00164f8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016500:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016505:	85 c0                	test   eax,eax
c0016507:	75 03                	jne    c001650c <userModeEntryPoint(void*)+0x14>
c0016509:	fb                   	sti    
c001650a:	66 90                	xchg   ax,ax
c001650c:	fb                   	sti    
c001650d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016512:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016515:	8b 80 6e 05 00 00    	mov    eax,DWORD PTR [eax+0x56e]
c001651b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001651f:	e9 1b 9d fe ff       	jmp    c000023f <goToUsermode>

c0016524 <changeTSS>:
c0016524:	83 ec 14             	sub    esp,0x14
c0016527:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001652c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001652f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016534:	c1 e2 15             	shl    edx,0x15
c0016537:	29 d0                	sub    eax,edx
c0016539:	50                   	push   eax
c001653a:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001653f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016545:	05 68 11 00 00       	add    eax,0x1168
c001654a:	50                   	push   eax
c001654b:	e8 48 c6 ff ff       	call   c0012b98 <TSS::setESP(unsigned long)>
c0016550:	83 c4 1c             	add    esp,0x1c
c0016553:	c3                   	ret    

c0016554 <switchToThread(ThreadControlBlock*)>:
c0016554:	57                   	push   edi
c0016555:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c001655b:	56                   	push   esi
c001655c:	53                   	push   ebx
c001655d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016561:	85 c9                	test   ecx,ecx
c0016563:	0f 85 c3 00 00 00    	jne    c001662c <switchToThread(ThreadControlBlock*)+0xd8>
c0016569:	0f b6 43 44          	movzx  eax,BYTE PTR [ebx+0x44]
c001656d:	3d ff 00 00 00       	cmp    eax,0xff
c0016572:	0f 85 88 00 00 00    	jne    c0016600 <switchToThread(ThreadControlBlock*)+0xac>
c0016578:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c001657f:	90                   	nop
c0016580:	e8 fa 38 00 00       	call   c0019e7f <HalQueryPerformanceCounter()>
c0016585:	a3 70 ea 02 c0       	mov    ds:0xc002ea70,eax
c001658a:	89 c6                	mov    esi,eax
c001658c:	89 d7                	mov    edi,edx
c001658e:	2b 35 60 ea 02 c0    	sub    esi,DWORD PTR ds:0xc002ea60
c0016594:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c0016599:	1b 3d 64 ea 02 c0    	sbb    edi,DWORD PTR ds:0xc002ea64
c001659f:	89 35 68 ea 02 c0    	mov    DWORD PTR ds:0xc002ea68,esi
c00165a5:	89 15 74 ea 02 c0    	mov    DWORD PTR ds:0xc002ea74,edx
c00165ab:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00165b1:	89 15 64 ea 02 c0    	mov    DWORD PTR ds:0xc002ea64,edx
c00165b7:	89 3d 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,edi
c00165bd:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00165c0:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00165c3:	01 c6                	add    esi,eax
c00165c5:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00165c8:	11 d7                	adc    edi,edx
c00165ca:	83 ec 0c             	sub    esp,0xc
c00165cd:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00165d0:	53                   	push   ebx
c00165d1:	e8 a1 9c fe ff       	call   c0000277 <switchToThreadASM>
c00165d6:	c7 04 24 f9 4d 02 c0 	mov    DWORD PTR [esp],0xc0024df9
c00165dd:	e8 6c 09 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00165e2:	0f 20 c0             	mov    eax,cr0
c00165e5:	83 c8 08             	or     eax,0x8
c00165e8:	0f 22 c0             	mov    cr0,eax
c00165eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165f0:	83 c4 10             	add    esp,0x10
c00165f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165f7:	5b                   	pop    ebx
c00165f8:	5e                   	pop    esi
c00165f9:	5f                   	pop    edi
c00165fa:	e9 c5 eb ff ff       	jmp    c00151c4 <KeCheckAlarm(ThreadControlBlock*)>
c00165ff:	90                   	nop
c0016600:	83 ec 08             	sub    esp,0x8
c0016603:	50                   	push   eax
c0016604:	68 eb 4d 02 c0       	push   0xc0024deb
c0016609:	e8 40 09 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001660e:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016612:	b8 00 04 00 00       	mov    eax,0x400
c0016617:	83 c4 10             	add    esp,0x10
c001661a:	29 d0                	sub    eax,edx
c001661c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001661f:	d1 f8                	sar    eax,1
c0016621:	01 c2                	add    edx,eax
c0016623:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016626:	e9 55 ff ff ff       	jmp    c0016580 <switchToThread(ThreadControlBlock*)+0x2c>
c001662b:	90                   	nop
c001662c:	5b                   	pop    ebx
c001662d:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c0016637:	5e                   	pop    esi
c0016638:	5f                   	pop    edi
c0016639:	c3                   	ret    
c001663a:	66 90                	xchg   ax,ax

c001663c <Process::addArgs(char**)>:
c001663c:	57                   	push   edi
c001663d:	56                   	push   esi
c001663e:	53                   	push   ebx
c001663f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016643:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0016647:	85 f6                	test   esi,esi
c0016649:	c7 87 76 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x576],0x0
c0016653:	74 4f                	je     c00166a4 <Process::addArgs(char**)+0x68>
c0016655:	8b 06                	mov    eax,DWORD PTR [esi]
c0016657:	85 c0                	test   eax,eax
c0016659:	74 49                	je     c00166a4 <Process::addArgs(char**)+0x68>
c001665b:	31 db                	xor    ebx,ebx
c001665d:	8d 76 00             	lea    esi,[esi+0x0]
c0016660:	83 ec 0c             	sub    esp,0xc
c0016663:	50                   	push   eax
c0016664:	e8 17 9f fe ff       	call   c0000580 <strlen>
c0016669:	83 c0 01             	add    eax,0x1
c001666c:	89 04 24             	mov    DWORD PTR [esp],eax
c001666f:	e8 70 94 ff ff       	call   c000fae4 <malloc>
c0016674:	89 84 9f 7a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x57a],eax
c001667b:	5a                   	pop    edx
c001667c:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001667f:	83 c3 01             	add    ebx,0x1
c0016682:	59                   	pop    ecx
c0016683:	52                   	push   edx
c0016684:	50                   	push   eax
c0016685:	e8 c6 9f fe ff       	call   c0000650 <strcpy>
c001668a:	8b 8f 76 05 00 00    	mov    ecx,DWORD PTR [edi+0x576]
c0016690:	83 c4 10             	add    esp,0x10
c0016693:	83 c1 01             	add    ecx,0x1
c0016696:	89 8f 76 05 00 00    	mov    DWORD PTR [edi+0x576],ecx
c001669c:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001669f:	85 c0                	test   eax,eax
c00166a1:	75 bd                	jne    c0016660 <Process::addArgs(char**)+0x24>
c00166a3:	90                   	nop
c00166a4:	5b                   	pop    ebx
c00166a5:	5e                   	pop    esi
c00166a6:	5f                   	pop    edi
c00166a7:	c3                   	ret    

c00166a8 <Process::Process(char const*, Process*, char**)>:
c00166a8:	56                   	push   esi
c00166a9:	53                   	push   ebx
c00166aa:	83 ec 14             	sub    esp,0x14
c00166ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166b1:	05 0c 02 00 00       	add    eax,0x20c
c00166b6:	bb 07 00 00 00       	mov    ebx,0x7
c00166bb:	89 c6                	mov    esi,eax
c00166bd:	8d 76 00             	lea    esi,[esi+0x0]
c00166c0:	85 db                	test   ebx,ebx
c00166c2:	78 14                	js     c00166d8 <Process::Process(char const*, Process*, char**)+0x30>
c00166c4:	83 ec 0c             	sub    esp,0xc
c00166c7:	56                   	push   esi
c00166c8:	e8 33 b9 00 00       	call   c0022000 <ThreadControlBlock::ThreadControlBlock()>
c00166cd:	83 c4 10             	add    esp,0x10
c00166d0:	83 c6 6b             	add    esi,0x6b
c00166d3:	83 eb 01             	sub    ebx,0x1
c00166d6:	eb e8                	jmp    c00166c0 <Process::Process(char const*, Process*, char**)+0x18>
c00166d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166dc:	c6 80 7e 07 00 00 00 	mov    BYTE PTR [eax+0x77e],0x0
c00166e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166e7:	c6 80 7f 07 00 00 00 	mov    BYTE PTR [eax+0x77f],0x0
c00166ee:	83 ec 0c             	sub    esp,0xc
c00166f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00166f5:	e8 5e 80 ff ff       	call   c000e758 <KeNewProcessEnv(Process*)>
c00166fa:	83 c4 10             	add    esp,0x10
c00166fd:	89 c2                	mov    edx,eax
c00166ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016703:	89 90 7a 07 00 00    	mov    DWORD PTR [eax+0x77a],edx
c0016709:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001670d:	66 c7 80 64 05 00 00 00 00 	mov    WORD PTR [eax+0x564],0x0
c0016716:	a1 fc 66 02 c0       	mov    eax,ds:0xc00266fc
c001671b:	8d 50 01             	lea    edx,[eax+0x1]
c001671e:	89 15 fc 66 02 c0    	mov    DWORD PTR ds:0xc00266fc,edx
c0016724:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016728:	89 02                	mov    DWORD PTR [edx],eax
c001672a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016732:	83 ec 0c             	sub    esp,0xc
c0016735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016739:	e8 a6 93 ff ff       	call   c000fae4 <malloc>
c001673e:	83 c4 10             	add    esp,0x10
c0016741:	89 c3                	mov    ebx,eax
c0016743:	83 ec 08             	sub    esp,0x8
c0016746:	6a 00                	push   0x0
c0016748:	53                   	push   ebx
c0016749:	e8 b4 d5 ff ff       	call   c0013d02 <VAS::VAS(bool)>
c001674e:	83 c4 10             	add    esp,0x10
c0016751:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016755:	89 98 72 05 00 00    	mov    DWORD PTR [eax+0x572],ebx
c001675b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001675f:	c7 80 76 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x576],0x0
c0016769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001676d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016771:	89 90 6a 05 00 00    	mov    DWORD PTR [eax+0x56a],edx
c0016777:	e8 7b a7 ff ff       	call   c0010ef7 <KeInitSignals()>
c001677c:	89 c2                	mov    edx,eax
c001677e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016782:	89 90 80 07 00 00    	mov    DWORD PTR [eax+0x780],edx
c0016788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001678c:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c0016792:	85 c0                	test   eax,eax
c0016794:	74 42                	je     c00167d8 <Process::Process(char const*, Process*, char**)+0x130>
c0016796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001679a:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c00167a0:	8b 90 66 05 00 00    	mov    edx,DWORD PTR [eax+0x566]
c00167a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167aa:	89 90 66 05 00 00    	mov    DWORD PTR [eax+0x566],edx
c00167b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b4:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c00167ba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00167c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167c4:	05 0c 01 00 00       	add    eax,0x10c
c00167c9:	83 ec 08             	sub    esp,0x8
c00167cc:	52                   	push   edx
c00167cd:	50                   	push   eax
c00167ce:	e8 7d 9e fe ff       	call   c0000650 <strcpy>
c00167d3:	83 c4 10             	add    esp,0x10
c00167d6:	eb 7c                	jmp    c0016854 <Process::Process(char const*, Process*, char**)+0x1ac>
c00167d8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00167e0:	83 ec 0c             	sub    esp,0xc
c00167e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00167e7:	e8 f8 92 ff ff       	call   c000fae4 <malloc>
c00167ec:	83 c4 10             	add    esp,0x10
c00167ef:	89 c3                	mov    ebx,eax
c00167f1:	83 ec 08             	sub    esp,0x8
c00167f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167f8:	53                   	push   ebx
c00167f9:	e8 b8 c0 ff ff       	call   c00128b6 <VgaText::VgaText(char const*)>
c00167fe:	83 c4 10             	add    esp,0x10
c0016801:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016805:	89 98 66 05 00 00    	mov    DWORD PTR [eax+0x566],ebx
c001680b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001680f:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0016815:	83 ec 0c             	sub    esp,0xc
c0016818:	50                   	push   eax
c0016819:	e8 fe b8 ff ff       	call   c001211c <addToTerminalCycle(VgaText*)>
c001681e:	83 c4 10             	add    esp,0x10
c0016821:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016825:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c001682b:	83 ec 0c             	sub    esp,0xc
c001682e:	50                   	push   eax
c001682f:	e8 59 bb ff ff       	call   c001238d <setActiveTerminal(VgaText*)>
c0016834:	83 c4 10             	add    esp,0x10
c0016837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683b:	05 0c 01 00 00       	add    eax,0x10c
c0016840:	83 ec 08             	sub    esp,0x8
c0016843:	68 02 4e 02 c0       	push   0xc0024e02
c0016848:	50                   	push   eax
c0016849:	e8 02 9e fe ff       	call   c0000650 <strcpy>
c001684e:	83 c4 10             	add    esp,0x10
c0016851:	8d 76 00             	lea    esi,[esi+0x0]
c0016854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016858:	83 c0 0c             	add    eax,0xc
c001685b:	83 ec 08             	sub    esp,0x8
c001685e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016862:	50                   	push   eax
c0016863:	e8 e8 9d fe ff       	call   c0000650 <strcpy>
c0016868:	83 c4 10             	add    esp,0x10
c001686b:	83 ec 08             	sub    esp,0x8
c001686e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016872:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016876:	e8 c1 fd ff ff       	call   c001663c <Process::addArgs(char**)>
c001687b:	83 c4 10             	add    esp,0x10
c001687e:	83 ec 08             	sub    esp,0x8
c0016881:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016885:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016889:	e8 70 ec ff ff       	call   c00154fe <Thr::loadProgramIntoMemory(Process*, char const*)>
c001688e:	83 c4 10             	add    esp,0x10
c0016891:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016895:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016899:	83 f0 01             	xor    eax,0x1
c001689c:	88 c2                	mov    dl,al
c001689e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a2:	88 90 7e 07 00 00    	mov    BYTE PTR [eax+0x77e],dl
c00168a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ac:	8b 10                	mov    edx,DWORD PTR [eax]
c00168ae:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00168b3:	52                   	push   edx
c00168b4:	50                   	push   eax
c00168b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168b9:	68 5c 4e 02 c0       	push   0xc0024e5c
c00168be:	e8 8b 06 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00168c3:	83 c4 10             	add    esp,0x10
c00168c6:	90                   	nop
c00168c7:	83 c4 14             	add    esp,0x14
c00168ca:	5b                   	pop    ebx
c00168cb:	5e                   	pop    esi
c00168cc:	c3                   	ret    
c00168cd:	90                   	nop
c00168ce:	66 90                	xchg   ax,ax

c00168d0 <Process::Process(bool, char const*, Process*, char**)>:
c00168d0:	56                   	push   esi
c00168d1:	53                   	push   ebx
c00168d2:	83 ec 24             	sub    esp,0x24
c00168d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168d9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00168dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168e1:	05 0c 02 00 00       	add    eax,0x20c
c00168e6:	bb 07 00 00 00       	mov    ebx,0x7
c00168eb:	89 c6                	mov    esi,eax
c00168ed:	8d 76 00             	lea    esi,[esi+0x0]
c00168f0:	85 db                	test   ebx,ebx
c00168f2:	78 14                	js     c0016908 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00168f4:	83 ec 0c             	sub    esp,0xc
c00168f7:	56                   	push   esi
c00168f8:	e8 03 b7 00 00       	call   c0022000 <ThreadControlBlock::ThreadControlBlock()>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	83 c6 6b             	add    esi,0x6b
c0016903:	83 eb 01             	sub    ebx,0x1
c0016906:	eb e8                	jmp    c00168f0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016908:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001690c:	c6 80 7e 07 00 00 00 	mov    BYTE PTR [eax+0x77e],0x0
c0016913:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016917:	c6 80 7f 07 00 00 00 	mov    BYTE PTR [eax+0x77f],0x0
c001691e:	83 ec 0c             	sub    esp,0xc
c0016921:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016925:	e8 2e 7e ff ff       	call   c000e758 <KeNewProcessEnv(Process*)>
c001692a:	83 c4 10             	add    esp,0x10
c001692d:	89 c2                	mov    edx,eax
c001692f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016933:	89 90 7a 07 00 00    	mov    DWORD PTR [eax+0x77a],edx
c0016939:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001693d:	66 c7 80 64 05 00 00 00 00 	mov    WORD PTR [eax+0x564],0x0
c0016946:	a1 fc 66 02 c0       	mov    eax,ds:0xc00266fc
c001694b:	8d 50 01             	lea    edx,[eax+0x1]
c001694e:	89 15 fc 66 02 c0    	mov    DWORD PTR ds:0xc00266fc,edx
c0016954:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016958:	89 02                	mov    DWORD PTR [edx],eax
c001695a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016962:	83 ec 0c             	sub    esp,0xc
c0016965:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016969:	e8 76 91 ff ff       	call   c000fae4 <malloc>
c001696e:	83 c4 10             	add    esp,0x10
c0016971:	89 c3                	mov    ebx,eax
c0016973:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016978:	83 ec 08             	sub    esp,0x8
c001697b:	50                   	push   eax
c001697c:	53                   	push   ebx
c001697d:	e8 80 d3 ff ff       	call   c0013d02 <VAS::VAS(bool)>
c0016982:	83 c4 10             	add    esp,0x10
c0016985:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016989:	89 98 72 05 00 00    	mov    DWORD PTR [eax+0x572],ebx
c001698f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016993:	c7 80 76 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x576],0x0
c001699d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169a1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00169a5:	89 90 6a 05 00 00    	mov    DWORD PTR [eax+0x56a],edx
c00169ab:	e8 47 a5 ff ff       	call   c0010ef7 <KeInitSignals()>
c00169b0:	89 c2                	mov    edx,eax
c00169b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169b6:	89 90 80 07 00 00    	mov    DWORD PTR [eax+0x780],edx
c00169bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169c0:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c00169c6:	85 c0                	test   eax,eax
c00169c8:	74 42                	je     c0016a0c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00169ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169ce:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c00169d4:	8b 90 66 05 00 00    	mov    edx,DWORD PTR [eax+0x566]
c00169da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169de:	89 90 66 05 00 00    	mov    DWORD PTR [eax+0x566],edx
c00169e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169e8:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c00169ee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00169f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169f8:	05 0c 01 00 00       	add    eax,0x10c
c00169fd:	83 ec 08             	sub    esp,0x8
c0016a00:	52                   	push   edx
c0016a01:	50                   	push   eax
c0016a02:	e8 49 9c fe ff       	call   c0000650 <strcpy>
c0016a07:	83 c4 10             	add    esp,0x10
c0016a0a:	eb 7c                	jmp    c0016a88 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016a0c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016a14:	83 ec 0c             	sub    esp,0xc
c0016a17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016a1b:	e8 c4 90 ff ff       	call   c000fae4 <malloc>
c0016a20:	83 c4 10             	add    esp,0x10
c0016a23:	89 c3                	mov    ebx,eax
c0016a25:	83 ec 08             	sub    esp,0x8
c0016a28:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a2c:	53                   	push   ebx
c0016a2d:	e8 84 be ff ff       	call   c00128b6 <VgaText::VgaText(char const*)>
c0016a32:	83 c4 10             	add    esp,0x10
c0016a35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a39:	89 98 66 05 00 00    	mov    DWORD PTR [eax+0x566],ebx
c0016a3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a43:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0016a49:	83 ec 0c             	sub    esp,0xc
c0016a4c:	50                   	push   eax
c0016a4d:	e8 ca b6 ff ff       	call   c001211c <addToTerminalCycle(VgaText*)>
c0016a52:	83 c4 10             	add    esp,0x10
c0016a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a59:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0016a5f:	83 ec 0c             	sub    esp,0xc
c0016a62:	50                   	push   eax
c0016a63:	e8 25 b9 ff ff       	call   c001238d <setActiveTerminal(VgaText*)>
c0016a68:	83 c4 10             	add    esp,0x10
c0016a6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a6f:	05 0c 01 00 00       	add    eax,0x10c
c0016a74:	83 ec 08             	sub    esp,0x8
c0016a77:	68 02 4e 02 c0       	push   0xc0024e02
c0016a7c:	50                   	push   eax
c0016a7d:	e8 ce 9b fe ff       	call   c0000650 <strcpy>
c0016a82:	83 c4 10             	add    esp,0x10
c0016a85:	8d 76 00             	lea    esi,[esi+0x0]
c0016a88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a8c:	83 c0 0c             	add    eax,0xc
c0016a8f:	83 ec 08             	sub    esp,0x8
c0016a92:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a96:	50                   	push   eax
c0016a97:	e8 b4 9b fe ff       	call   c0000650 <strcpy>
c0016a9c:	83 c4 10             	add    esp,0x10
c0016a9f:	83 ec 08             	sub    esp,0x8
c0016aa2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016aa6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016aaa:	e8 8d fb ff ff       	call   c001663c <Process::addArgs(char**)>
c0016aaf:	83 c4 10             	add    esp,0x10
c0016ab2:	90                   	nop
c0016ab3:	83 c4 24             	add    esp,0x24
c0016ab6:	5b                   	pop    ebx
c0016ab7:	5e                   	pop    esi
c0016ab8:	c3                   	ret    
c0016ab9:	8d 76 00             	lea    esi,[esi+0x0]

c0016abc <taskStartupFunction>:
c0016abc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ac1:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016ac4:	c3                   	ret    
c0016ac5:	8d 76 00             	lea    esi,[esi+0x0]

c0016ac8 <KeDisablePreemption()>:
c0016ac8:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016acd:	85 c0                	test   eax,eax
c0016acf:	75 13                	jne    c0016ae4 <KeDisablePreemption()+0x1c>
c0016ad1:	8a 15 d4 c0 02 c0    	mov    dl,BYTE PTR ds:0xc002c0d4
c0016ad7:	c6 05 d4 c0 02 c0 00 	mov    BYTE PTR ds:0xc002c0d4,0x0
c0016ade:	88 15 08 ea 02 c0    	mov    BYTE PTR ds:0xc002ea08,dl
c0016ae4:	83 c0 01             	add    eax,0x1
c0016ae7:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016aec:	c3                   	ret    
c0016aed:	8d 76 00             	lea    esi,[esi+0x0]

c0016af0 <KeRestorePreemption()>:
c0016af0:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016af5:	83 e8 01             	sub    eax,0x1
c0016af8:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016afd:	75 0d                	jne    c0016b0c <KeRestorePreemption()+0x1c>
c0016aff:	a0 08 ea 02 c0       	mov    al,ds:0xc002ea08
c0016b04:	a2 d4 c0 02 c0       	mov    ds:0xc002c0d4,al
c0016b09:	8d 76 00             	lea    esi,[esi+0x0]
c0016b0c:	c3                   	ret    
c0016b0d:	90                   	nop
c0016b0e:	66 90                	xchg   ax,ax

c0016b10 <Process::createThread(void (*)(void*), void*, int)>:
c0016b10:	55                   	push   ebp
c0016b11:	31 c9                	xor    ecx,ecx
c0016b13:	57                   	push   edi
c0016b14:	56                   	push   esi
c0016b15:	53                   	push   ebx
c0016b16:	83 ec 0c             	sub    esp,0xc
c0016b19:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016b1d:	66 8b b3 64 05 00 00 	mov    si,WORD PTR [ebx+0x564]
c0016b24:	89 f2                	mov    edx,esi
c0016b26:	66 90                	xchg   ax,ax
c0016b28:	0f b7 c2             	movzx  eax,dx
c0016b2b:	80 e2 01             	and    dl,0x1
c0016b2e:	74 18                	je     c0016b48 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016b30:	d1 f8                	sar    eax,1
c0016b32:	83 c1 01             	add    ecx,0x1
c0016b35:	83 f9 10             	cmp    ecx,0x10
c0016b38:	89 c2                	mov    edx,eax
c0016b3a:	75 ec                	jne    c0016b28 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016b3c:	83 c4 0c             	add    esp,0xc
c0016b3f:	31 db                	xor    ebx,ebx
c0016b41:	89 d8                	mov    eax,ebx
c0016b43:	5b                   	pop    ebx
c0016b44:	5e                   	pop    esi
c0016b45:	5f                   	pop    edi
c0016b46:	5d                   	pop    ebp
c0016b47:	c3                   	ret    
c0016b48:	b8 01 00 00 00       	mov    eax,0x1
c0016b4d:	d3 e0                	shl    eax,cl
c0016b4f:	09 c6                	or     esi,eax
c0016b51:	66 89 b3 64 05 00 00 	mov    WORD PTR [ebx+0x564],si
c0016b58:	6b c1 6b             	imul   eax,ecx,0x6b
c0016b5b:	01 d8                	add    eax,ebx
c0016b5d:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016b64:	75 0a                	jne    c0016b70 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0016b66:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016b70:	8b 83 72 05 00 00    	mov    eax,DWORD PTR [ebx+0x572]
c0016b76:	6b f9 6b             	imul   edi,ecx,0x6b
c0016b79:	83 ec 0c             	sub    esp,0xc
c0016b7c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016b7f:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016b82:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016b88:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016b8e:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016b94:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016b9b:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016ba5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016bab:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016baf:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016bb9:	c7 80 73 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x273],0x0
c0016bc3:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016bc9:	89 ca                	mov    edx,ecx
c0016bcb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016bcf:	f7 da                	neg    edx
c0016bd1:	c1 e2 15             	shl    edx,0x15
c0016bd4:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016bda:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016be0:	8a 54 24 38          	mov    dl,BYTE PTR [esp+0x38]
c0016be4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016bee:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016bf4:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016bfe:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016c04:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016c0e:	68 00 01 00 00       	push   0x100
c0016c13:	e8 cc 8e ff ff       	call   c000fae4 <malloc>
c0016c18:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016c1b:	58                   	pop    eax
c0016c1c:	5a                   	pop    edx
c0016c1d:	53                   	push   ebx
c0016c1e:	68 4c ea 02 c0       	push   0xc002ea4c
c0016c23:	e8 84 af 00 00       	call   c0021bac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c28:	83 c4 10             	add    esp,0x10
c0016c2b:	89 d8                	mov    eax,ebx
c0016c2d:	83 c4 0c             	add    esp,0xc
c0016c30:	5b                   	pop    ebx
c0016c31:	5e                   	pop    esi
c0016c32:	5f                   	pop    edi
c0016c33:	5d                   	pop    ebp
c0016c34:	c3                   	ret    
c0016c35:	90                   	nop
c0016c36:	66 90                	xchg   ax,ax

c0016c38 <Process::createUserThread()>:
c0016c38:	83 ec 0c             	sub    esp,0xc
c0016c3b:	68 80 00 00 00       	push   0x80
c0016c40:	6a 00                	push   0x0
c0016c42:	68 f8 64 01 c0       	push   0xc00164f8
c0016c47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c4b:	50                   	push   eax
c0016c4c:	e8 bf fe ff ff       	call   c0016b10 <Process::createThread(void (*)(void*), void*, int)>
c0016c51:	83 c4 1c             	add    esp,0x1c
c0016c54:	c3                   	ret    
c0016c55:	8d 76 00             	lea    esi,[esi+0x0]

c0016c58 <setupMultitasking(void (*)())>:
c0016c58:	56                   	push   esi
c0016c59:	53                   	push   ebx
c0016c5a:	83 ec 04             	sub    esp,0x4
c0016c5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016c61:	eb 11                	jmp    c0016c74 <setupMultitasking(void (*)())+0x1c>
c0016c63:	90                   	nop
c0016c64:	83 ec 0c             	sub    esp,0xc
c0016c67:	68 4c ea 02 c0       	push   0xc002ea4c
c0016c6c:	e8 7f ae 00 00       	call   c0021af0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016c71:	83 c4 10             	add    esp,0x10
c0016c74:	83 ec 0c             	sub    esp,0xc
c0016c77:	68 4c ea 02 c0       	push   0xc002ea4c
c0016c7c:	e8 4b ae 00 00       	call   c0021acc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c81:	83 c4 10             	add    esp,0x10
c0016c84:	84 c0                	test   al,al
c0016c86:	74 dc                	je     c0016c64 <setupMultitasking(void (*)())+0xc>
c0016c88:	83 ec 0c             	sub    esp,0xc
c0016c8b:	68 84 07 00 00       	push   0x784
c0016c90:	e8 4f 8e ff ff       	call   c000fae4 <malloc>
c0016c95:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016c9c:	6a 00                	push   0x0
c0016c9e:	68 06 4e 02 c0       	push   0xc0024e06
c0016ca3:	6a 01                	push   0x1
c0016ca5:	50                   	push   eax
c0016ca6:	89 c3                	mov    ebx,eax
c0016ca8:	e8 23 fc ff ff       	call   c00168d0 <Process::Process(bool, char const*, Process*, char**)>
c0016cad:	8b 83 66 05 00 00    	mov    eax,DWORD PTR [ebx+0x566]
c0016cb3:	83 c4 14             	add    esp,0x14
c0016cb6:	89 1d 58 ea 02 c0    	mov    DWORD PTR ds:0xc002ea58,ebx
c0016cbc:	50                   	push   eax
c0016cbd:	e8 cb b6 ff ff       	call   c001238d <setActiveTerminal(VgaText*)>
c0016cc2:	66 8b 83 64 05 00 00 	mov    ax,WORD PTR [ebx+0x564]
c0016cc9:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016cd3:	83 c8 01             	or     eax,0x1
c0016cd6:	66 89 83 64 05 00 00 	mov    WORD PTR [ebx+0x564],ax
c0016cdd:	8b 83 72 05 00 00    	mov    eax,DWORD PTR [ebx+0x572]
c0016ce3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016ce6:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016cf0:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016cf6:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0016d00:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016d06:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016d10:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016d1a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016d20:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016d26:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016d30:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016d3a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016d41:	e8 9e 8d ff ff       	call   c000fae4 <malloc>
c0016d46:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016d50:	c7 83 73 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x273],0x0
c0016d5a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016d60:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016d66:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016d6c:	5a                   	pop    edx
c0016d6d:	59                   	pop    ecx
c0016d6e:	68 02 4e 02 c0       	push   0xc0024e02
c0016d73:	50                   	push   eax
c0016d74:	e8 d7 98 fe ff       	call   c0000650 <strcpy>
c0016d79:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016d80:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016d84:	83 c4 14             	add    esp,0x14
c0016d87:	5b                   	pop    ebx
c0016d88:	5e                   	pop    esi
c0016d89:	e9 db 94 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016d8e:	66 90                	xchg   ax,ax

c0016d90 <schedule()>:
c0016d90:	8b 15 2c ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea2c
c0016d96:	85 d2                	test   edx,edx
c0016d98:	74 0e                	je     c0016da8 <schedule()+0x18>
c0016d9a:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c0016da4:	c3                   	ret    
c0016da5:	8d 76 00             	lea    esi,[esi+0x0]
c0016da8:	53                   	push   ebx
c0016da9:	83 ec 14             	sub    esp,0x14
c0016dac:	68 4c ea 02 c0       	push   0xc002ea4c
c0016db1:	e8 16 ad 00 00       	call   c0021acc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016db6:	83 c4 10             	add    esp,0x10
c0016db9:	84 c0                	test   al,al
c0016dbb:	75 3f                	jne    c0016dfc <schedule()+0x6c>
c0016dbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dc2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016dc5:	83 fa 01             	cmp    edx,0x1
c0016dc8:	74 3a                	je     c0016e04 <schedule()+0x74>
c0016dca:	66 90                	xchg   ax,ax
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	68 4c ea 02 c0       	push   0xc002ea4c
c0016dd4:	e8 0f ad 00 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dd9:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0016de0:	89 c3                	mov    ebx,eax
c0016de2:	e8 09 ad 00 00       	call   c0021af0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016de7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016dee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016df1:	e8 5e f7 ff ff       	call   c0016554 <switchToThread(ThreadControlBlock*)>
c0016df6:	83 c4 10             	add    esp,0x10
c0016df9:	8d 76 00             	lea    esi,[esi+0x0]
c0016dfc:	83 c4 08             	add    esp,0x8
c0016dff:	5b                   	pop    ebx
c0016e00:	c3                   	ret    
c0016e01:	8d 76 00             	lea    esi,[esi+0x0]
c0016e04:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016e0b:	83 ec 08             	sub    esp,0x8
c0016e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e13:	50                   	push   eax
c0016e14:	68 4c ea 02 c0       	push   0xc002ea4c
c0016e19:	e8 8e ad 00 00       	call   c0021bac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e1e:	83 c4 10             	add    esp,0x10
c0016e21:	eb a9                	jmp    c0016dcc <schedule()+0x3c>
c0016e23:	90                   	nop

c0016e24 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016e24:	83 ec 0c             	sub    esp,0xc
c0016e27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016e30:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016e33:	e8 58 ff ff ff       	call   c0016d90 <schedule()>
c0016e38:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016e40:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016e45:	85 c0                	test   eax,eax
c0016e47:	75 03                	jne    c0016e4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016e49:	fb                   	sti    
c0016e4a:	66 90                	xchg   ax,ax
c0016e4c:	83 c4 0c             	add    esp,0xc
c0016e4f:	c3                   	ret    

c0016e50 <blockTask(TaskState)>:
c0016e50:	83 ec 0c             	sub    esp,0xc
c0016e53:	fa                   	cli    
c0016e54:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016e59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016e5d:	83 c0 01             	add    eax,0x1
c0016e60:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0016e65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e6a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016e6d:	e8 1e ff ff ff       	call   c0016d90 <schedule()>
c0016e72:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016e7a:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0016e80:	85 d2                	test   edx,edx
c0016e82:	75 04                	jne    c0016e88 <blockTask(TaskState)+0x38>
c0016e84:	fb                   	sti    
c0016e85:	8d 76 00             	lea    esi,[esi+0x0]
c0016e88:	83 c4 0c             	add    esp,0xc
c0016e8b:	c3                   	ret    

c0016e8c <waitTask(int, int*, int)>:
c0016e8c:	83 ec 18             	sub    esp,0x18
c0016e8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016e98:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016e9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea4:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0016ea7:	6a 07                	push   0x7
c0016ea9:	e8 a2 ff ff ff       	call   c0016e50 <blockTask(TaskState)>
c0016eae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb3:	83 c4 10             	add    esp,0x10
c0016eb6:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0016eb9:	85 d2                	test   edx,edx
c0016ebb:	74 0b                	je     c0016ec8 <waitTask(int, int*, int)+0x3c>
c0016ebd:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0016ec0:	89 02                	mov    DWORD PTR [edx],eax
c0016ec2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ec7:	90                   	nop
c0016ec8:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0016ecb:	83 c4 0c             	add    esp,0xc
c0016ece:	c3                   	ret    
c0016ecf:	90                   	nop

c0016ed0 <milliTenthSleepUntil(unsigned long long)>:
c0016ed0:	83 ec 0c             	sub    esp,0xc
c0016ed3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016edb:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c0016ee1:	89 d1                	mov    ecx,edx
c0016ee3:	1b 0d 54 bb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002bb54
c0016ee9:	73 05                	jae    c0016ef0 <milliTenthSleepUntil(unsigned long long)+0x20>
c0016eeb:	90                   	nop
c0016eec:	83 c4 0c             	add    esp,0xc
c0016eef:	c3                   	ret    
c0016ef0:	fa                   	cli    
c0016ef1:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0016ef7:	83 ec 08             	sub    esp,0x8
c0016efa:	83 c1 01             	add    ecx,0x1
c0016efd:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c0016f03:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c0016f09:	83 c1 01             	add    ecx,0x1
c0016f0c:	89 0d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ecx
c0016f12:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f18:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0016f1b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0016f1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f23:	50                   	push   eax
c0016f24:	68 40 ea 02 c0       	push   0xc002ea40
c0016f29:	e8 7e ac 00 00       	call   c0021bac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f2e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016f35:	e8 16 ff ff ff       	call   c0016e50 <blockTask(TaskState)>
c0016f3a:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0016f3f:	83 c4 10             	add    esp,0x10
c0016f42:	83 e8 01             	sub    eax,0x1
c0016f45:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0016f4a:	85 c0                	test   eax,eax
c0016f4c:	75 0a                	jne    c0016f58 <milliTenthSleepUntil(unsigned long long)+0x88>
c0016f4e:	8b 15 28 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea28
c0016f54:	85 d2                	test   edx,edx
c0016f56:	75 18                	jne    c0016f70 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0016f58:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016f60:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016f65:	85 c0                	test   eax,eax
c0016f67:	75 83                	jne    c0016eec <milliTenthSleepUntil(unsigned long long)+0x1c>
c0016f69:	fb                   	sti    
c0016f6a:	83 c4 0c             	add    esp,0xc
c0016f6d:	c3                   	ret    
c0016f6e:	66 90                	xchg   ax,ax
c0016f70:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0016f7a:	e8 11 fe ff ff       	call   c0016d90 <schedule()>
c0016f7f:	eb d7                	jmp    c0016f58 <milliTenthSleepUntil(unsigned long long)+0x88>
c0016f81:	8d 76 00             	lea    esi,[esi+0x0]

c0016f84 <milliTenthSleep(unsigned long long)>:
c0016f84:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0016f89:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0016f8d:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0016f93:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0016f97:	e9 34 ff ff ff       	jmp    c0016ed0 <milliTenthSleepUntil(unsigned long long)>

c0016f9c <sleep(unsigned long long)>:
c0016f9c:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0016fa4:	b8 10 27 00 00       	mov    eax,0x2710
c0016fa9:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0016fad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016fb1:	01 ca                	add    edx,ecx
c0016fb3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016fb7:	eb cb                	jmp    c0016f84 <milliTenthSleep(unsigned long long)>
c0016fb9:	8d 76 00             	lea    esi,[esi+0x0]

c0016fbc <sleep(unsigned int)>:
c0016fbc:	83 ec 14             	sub    esp,0x14
c0016fbf:	b8 10 27 00 00       	mov    eax,0x2710
c0016fc4:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0016fc8:	52                   	push   edx
c0016fc9:	50                   	push   eax
c0016fca:	e8 b5 ff ff ff       	call   c0016f84 <milliTenthSleep(unsigned long long)>
c0016fcf:	83 c4 1c             	add    esp,0x1c
c0016fd2:	c3                   	ret    
c0016fd3:	90                   	nop

c0016fd4 <milliTenthSleep(unsigned int)>:
c0016fd4:	83 ec 14             	sub    esp,0x14
c0016fd7:	31 d2                	xor    edx,edx
c0016fd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016fdd:	03 05 50 bb 02 c0    	add    eax,DWORD PTR ds:0xc002bb50
c0016fe3:	13 15 54 bb 02 c0    	adc    edx,DWORD PTR ds:0xc002bb54
c0016fe9:	52                   	push   edx
c0016fea:	50                   	push   eax
c0016feb:	e8 e0 fe ff ff       	call   c0016ed0 <milliTenthSleepUntil(unsigned long long)>
c0016ff0:	83 c4 1c             	add    esp,0x1c
c0016ff3:	c3                   	ret    

c0016ff4 <taskReturned>:
c0016ff4:	83 ec 18             	sub    esp,0x18
c0016ff7:	68 90 4e 02 c0       	push   0xc0024e90
c0016ffc:	e8 29 8e ff ff       	call   c000fe2a <KePanic(char const*)>
c0017001:	83 c4 10             	add    esp,0x10
c0017004:	83 ec 0c             	sub    esp,0xc
c0017007:	6a 02                	push   0x2
c0017009:	e8 42 fe ff ff       	call   c0016e50 <blockTask(TaskState)>
c001700e:	fa                   	cli    
c001700f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017014:	83 c0 01             	add    eax,0x1
c0017017:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001701c:	e8 6f fd ff ff       	call   c0016d90 <schedule()>
c0017021:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017029:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c001702f:	83 c4 10             	add    esp,0x10
c0017032:	85 d2                	test   edx,edx
c0017034:	75 ce                	jne    c0017004 <taskReturned+0x10>
c0017036:	fb                   	sti    
c0017037:	eb cb                	jmp    c0017004 <taskReturned+0x10>
c0017039:	8d 76 00             	lea    esi,[esi+0x0]

c001703c <Thr::processFromPID(int)>:
c001703c:	57                   	push   edi
c001703d:	56                   	push   esi
c001703e:	53                   	push   ebx
c001703f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017043:	fa                   	cli    
c0017044:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c001704a:	83 ec 0c             	sub    esp,0xc
c001704d:	68 4c ea 02 c0       	push   0xc002ea4c
c0017052:	83 c1 01             	add    ecx,0x1
c0017055:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c001705b:	e8 88 aa 00 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017060:	83 c4 10             	add    esp,0x10
c0017063:	89 c7                	mov    edi,eax
c0017065:	eb 15                	jmp    c001707c <Thr::processFromPID(int)+0x40>
c0017067:	90                   	nop
c0017068:	83 ec 0c             	sub    esp,0xc
c001706b:	68 4c ea 02 c0       	push   0xc002ea4c
c0017070:	e8 73 aa 00 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017075:	83 c4 10             	add    esp,0x10
c0017078:	39 f8                	cmp    eax,edi
c001707a:	74 50                	je     c00170cc <Thr::processFromPID(int)+0x90>
c001707c:	83 ec 0c             	sub    esp,0xc
c001707f:	68 4c ea 02 c0       	push   0xc002ea4c
c0017084:	e8 5f aa 00 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017089:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0017090:	89 c3                	mov    ebx,eax
c0017092:	e8 59 aa 00 00       	call   c0021af0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017097:	58                   	pop    eax
c0017098:	5a                   	pop    edx
c0017099:	53                   	push   ebx
c001709a:	68 4c ea 02 c0       	push   0xc002ea4c
c001709f:	e8 08 ab 00 00       	call   c0021bac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00170a4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00170a7:	83 c4 10             	add    esp,0x10
c00170aa:	39 30                	cmp    DWORD PTR [eax],esi
c00170ac:	75 ba                	jne    c0017068 <Thr::processFromPID(int)+0x2c>
c00170ae:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00170b6:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00170bc:	85 c9                	test   ecx,ecx
c00170be:	74 08                	je     c00170c8 <Thr::processFromPID(int)+0x8c>
c00170c0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00170c3:	90                   	nop
c00170c4:	5b                   	pop    ebx
c00170c5:	5e                   	pop    esi
c00170c6:	5f                   	pop    edi
c00170c7:	c3                   	ret    
c00170c8:	fb                   	sti    
c00170c9:	eb f5                	jmp    c00170c0 <Thr::processFromPID(int)+0x84>
c00170cb:	90                   	nop
c00170cc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00170d4:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00170da:	31 c0                	xor    eax,eax
c00170dc:	85 d2                	test   edx,edx
c00170de:	75 e4                	jne    c00170c4 <Thr::processFromPID(int)+0x88>
c00170e0:	fb                   	sti    
c00170e1:	5b                   	pop    ebx
c00170e2:	5e                   	pop    esi
c00170e3:	5f                   	pop    edi
c00170e4:	c3                   	ret    
c00170e5:	8d 76 00             	lea    esi,[esi+0x0]

c00170e8 <unblockTask(ThreadControlBlock*)>:
c00170e8:	53                   	push   ebx
c00170e9:	83 ec 08             	sub    esp,0x8
c00170ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170f0:	fa                   	cli    
c00170f1:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00170f7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00170fa:	83 c2 01             	add    edx,0x1
c00170fd:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c0017103:	85 c0                	test   eax,eax
c0017105:	74 6d                	je     c0017174 <unblockTask(ThreadControlBlock*)+0x8c>
c0017107:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001710a:	83 f8 01             	cmp    eax,0x1
c001710d:	74 39                	je     c0017148 <unblockTask(ThreadControlBlock*)+0x60>
c001710f:	83 ec 0c             	sub    esp,0xc
c0017112:	68 4c ea 02 c0       	push   0xc002ea4c
c0017117:	e8 cc a9 00 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001711c:	83 c4 10             	add    esp,0x10
c001711f:	85 c0                	test   eax,eax
c0017121:	75 1d                	jne    c0017140 <unblockTask(ThreadControlBlock*)+0x58>
c0017123:	eb 63                	jmp    c0017188 <unblockTask(ThreadControlBlock*)+0xa0>
c0017125:	8d 76 00             	lea    esi,[esi+0x0]
c0017128:	83 ec 08             	sub    esp,0x8
c001712b:	50                   	push   eax
c001712c:	68 4c ea 02 c0       	push   0xc002ea4c
c0017131:	e8 be ae 00 00       	call   c0021ff4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0017136:	83 c4 10             	add    esp,0x10
c0017139:	85 c0                	test   eax,eax
c001713b:	74 4b                	je     c0017188 <unblockTask(ThreadControlBlock*)+0xa0>
c001713d:	8d 76 00             	lea    esi,[esi+0x0]
c0017140:	39 c3                	cmp    ebx,eax
c0017142:	75 e4                	jne    c0017128 <unblockTask(ThreadControlBlock*)+0x40>
c0017144:	eb 12                	jmp    c0017158 <unblockTask(ThreadControlBlock*)+0x70>
c0017146:	66 90                	xchg   ax,ax
c0017148:	83 ec 0c             	sub    esp,0xc
c001714b:	68 24 4e 02 c0       	push   0xc0024e24
c0017150:	e8 f9 fd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017155:	83 c4 10             	add    esp,0x10
c0017158:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017160:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017165:	85 c0                	test   eax,eax
c0017167:	75 03                	jne    c001716c <unblockTask(ThreadControlBlock*)+0x84>
c0017169:	fb                   	sti    
c001716a:	66 90                	xchg   ax,ax
c001716c:	83 c4 08             	add    esp,0x8
c001716f:	5b                   	pop    ebx
c0017170:	c3                   	ret    
c0017171:	8d 76 00             	lea    esi,[esi+0x0]
c0017174:	83 ec 0c             	sub    esp,0xc
c0017177:	68 0d 4e 02 c0       	push   0xc0024e0d
c001717c:	e8 cd fd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017181:	83 c4 10             	add    esp,0x10
c0017184:	eb d2                	jmp    c0017158 <unblockTask(ThreadControlBlock*)+0x70>
c0017186:	66 90                	xchg   ax,ax
c0017188:	83 ec 08             	sub    esp,0x8
c001718b:	53                   	push   ebx
c001718c:	68 4c ea 02 c0       	push   0xc002ea4c
c0017191:	e8 16 aa 00 00       	call   c0021bac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017196:	83 c4 10             	add    esp,0x10
c0017199:	eb bd                	jmp    c0017158 <unblockTask(ThreadControlBlock*)+0x70>
c001719b:	90                   	nop

c001719c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001719c:	55                   	push   ebp
c001719d:	57                   	push   edi
c001719e:	56                   	push   esi
c001719f:	53                   	push   ebx
c00171a0:	83 ec 1c             	sub    esp,0x1c
c00171a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00171a7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00171aa:	8b a8 76 05 00 00    	mov    ebp,DWORD PTR [eax+0x576]
c00171b0:	85 ed                	test   ebp,ebp
c00171b2:	7e 28                	jle    c00171dc <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00171b4:	31 f6                	xor    esi,esi
c00171b6:	66 90                	xchg   ax,ax
c00171b8:	8b bc b0 7a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x57a]
c00171bf:	83 ec 0c             	sub    esp,0xc
c00171c2:	83 c6 01             	add    esi,0x1
c00171c5:	57                   	push   edi
c00171c6:	e8 29 89 ff ff       	call   c000faf4 <free>
c00171cb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00171ce:	83 c4 10             	add    esp,0x10
c00171d1:	39 b0 76 05 00 00    	cmp    DWORD PTR [eax+0x576],esi
c00171d7:	7f df                	jg     c00171b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00171d9:	8d 76 00             	lea    esi,[esi+0x0]
c00171dc:	c7 80 76 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x576],0x0
c00171e6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00171eb:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c00171ee:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00171f1:	d3 c0                	rol    eax,cl
c00171f3:	66 8b 8a 64 05 00 00 	mov    cx,WORD PTR [edx+0x564]
c00171fa:	21 c8                	and    eax,ecx
c00171fc:	66 89 82 64 05 00 00 	mov    WORD PTR [edx+0x564],ax
c0017203:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017206:	66 83 be 64 05 00 00 00 	cmp    WORD PTR [esi+0x564],0x0
c001720e:	89 f7                	mov    edi,esi
c0017210:	0f 85 6e 01 00 00    	jne    c0017384 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017216:	8b ae 7a 07 00 00    	mov    ebp,DWORD PTR [esi+0x77a]
c001721c:	85 ed                	test   ebp,ebp
c001721e:	74 1c                	je     c001723c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0017220:	83 ec 0c             	sub    esp,0xc
c0017223:	55                   	push   ebp
c0017224:	e8 4b 74 ff ff       	call   c000e674 <EnvVarContainer::~EnvVarContainer()>
c0017229:	59                   	pop    ecx
c001722a:	5e                   	pop    esi
c001722b:	6a 0c                	push   0xc
c001722d:	55                   	push   ebp
c001722e:	e8 28 60 ff ff       	call   c000d25b <operator delete(void*, unsigned long)>
c0017233:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017236:	83 c4 10             	add    esp,0x10
c0017239:	89 f7                	mov    edi,esi
c001723b:	90                   	nop
c001723c:	8b 86 6a 05 00 00    	mov    eax,DWORD PTR [esi+0x56a]
c0017242:	85 c0                	test   eax,eax
c0017244:	0f 84 ae 00 00 00    	je     c00172f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c001724a:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001724d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017251:	31 c9                	xor    ecx,ecx
c0017253:	eb 17                	jmp    c001726c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0017255:	8d 76 00             	lea    esi,[esi+0x0]
c0017258:	83 c1 01             	add    ecx,0x1
c001725b:	83 f9 10             	cmp    ecx,0x10
c001725e:	0f 84 94 00 00 00    	je     c00172f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0017264:	8b 86 6a 05 00 00    	mov    eax,DWORD PTR [esi+0x56a]
c001726a:	66 90                	xchg   ax,ax
c001726c:	0f b7 90 64 05 00 00 	movzx  edx,WORD PTR [eax+0x564]
c0017273:	d3 fa                	sar    edx,cl
c0017275:	80 e2 01             	and    dl,0x1
c0017278:	74 de                	je     c0017258 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001727a:	6b d1 6b             	imul   edx,ecx,0x6b
c001727d:	01 d0                	add    eax,edx
c001727f:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017285:	83 fd 07             	cmp    ebp,0x7
c0017288:	75 ce                	jne    c0017258 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001728a:	05 40 02 00 00       	add    eax,0x240
c001728f:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017292:	83 fd ff             	cmp    ebp,0xffffffff
c0017295:	0f 8c f1 00 00 00    	jl     c001738c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c001729b:	0f 84 af 01 00 00    	je     c0017450 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c00172a1:	85 ed                	test   ebp,ebp
c00172a3:	0f 84 93 01 00 00    	je     c001743c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c00172a9:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00172ab:	75 ab                	jne    c0017258 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00172ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00172b1:	8b 86 6a 05 00 00    	mov    eax,DWORD PTR [esi+0x56a]
c00172b7:	01 d0                	add    eax,edx
c00172b9:	8d 76 00             	lea    esi,[esi+0x0]
c00172bc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00172c0:	83 ec 0c             	sub    esp,0xc
c00172c3:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c00172c9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172cc:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c00172d2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00172d9:	50                   	push   eax
c00172da:	e8 09 fe ff ff       	call   c00170e8 <unblockTask(ThreadControlBlock*)>
c00172df:	83 c4 10             	add    esp,0x10
c00172e2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00172e5:	89 f7                	mov    edi,esi
c00172e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172eb:	83 c1 01             	add    ecx,0x1
c00172ee:	83 f9 10             	cmp    ecx,0x10
c00172f1:	0f 85 6d ff ff ff    	jne    c0017264 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00172f7:	90                   	nop
c00172f8:	8b 86 66 05 00 00    	mov    eax,DWORD PTR [esi+0x566]
c00172fe:	85 c0                	test   eax,eax
c0017300:	74 62                	je     c0017364 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0017302:	8b 96 6a 05 00 00    	mov    edx,DWORD PTR [esi+0x56a]
c0017308:	3b 82 66 05 00 00    	cmp    eax,DWORD PTR [edx+0x566]
c001730e:	74 54                	je     c0017364 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0017310:	83 ec 0c             	sub    esp,0xc
c0017313:	68 4c ea 02 c0       	push   0xc002ea4c
c0017318:	e8 cb a7 00 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001731d:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0017324:	89 c7                	mov    edi,eax
c0017326:	e8 a1 a7 00 00       	call   c0021acc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001732b:	83 c4 10             	add    esp,0x10
c001732e:	84 c0                	test   al,al
c0017330:	0f 84 ce 00 00 00    	je     c0017404 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c0017336:	66 90                	xchg   ax,ax
c0017338:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001733b:	8b 90 66 05 00 00    	mov    edx,DWORD PTR [eax+0x566]
c0017341:	85 d2                	test   edx,edx
c0017343:	74 0f                	je     c0017354 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0017345:	8b 02                	mov    eax,DWORD PTR [edx]
c0017347:	83 ec 0c             	sub    esp,0xc
c001734a:	52                   	push   edx
c001734b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001734e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017351:	83 c4 10             	add    esp,0x10
c0017354:	c7 80 66 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x566],0x0
c001735e:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0017361:	8d 76 00             	lea    esi,[esi+0x0]
c0017364:	8b 9f 72 05 00 00    	mov    ebx,DWORD PTR [edi+0x572]
c001736a:	85 db                	test   ebx,ebx
c001736c:	74 16                	je     c0017384 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001736e:	83 ec 0c             	sub    esp,0xc
c0017371:	53                   	push   ebx
c0017372:	e8 df c4 ff ff       	call   c0013856 <VAS::~VAS()>
c0017377:	58                   	pop    eax
c0017378:	5a                   	pop    edx
c0017379:	6a 14                	push   0x14
c001737b:	53                   	push   ebx
c001737c:	e8 da 5e ff ff       	call   c000d25b <operator delete(void*, unsigned long)>
c0017381:	83 c4 10             	add    esp,0x10
c0017384:	83 c4 1c             	add    esp,0x1c
c0017387:	5b                   	pop    ebx
c0017388:	5e                   	pop    esi
c0017389:	5f                   	pop    edi
c001738a:	5d                   	pop    ebp
c001738b:	c3                   	ret    
c001738c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017390:	83 ec 0c             	sub    esp,0xc
c0017393:	68 c4 4e 02 c0       	push   0xc0024ec4
c0017398:	e8 8d 8a ff ff       	call   c000fe2a <KePanic(char const*)>
c001739d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00173a0:	83 c4 10             	add    esp,0x10
c00173a3:	89 f7                	mov    edi,esi
c00173a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173a9:	e9 aa fe ff ff       	jmp    c0017258 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00173ae:	66 90                	xchg   ax,ax
c00173b0:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c00173b6:	39 82 66 05 00 00    	cmp    DWORD PTR [edx+0x566],eax
c00173bc:	75 1e                	jne    c00173dc <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00173be:	83 ec 0c             	sub    esp,0xc
c00173c1:	68 2c 4f 02 c0       	push   0xc0024f2c
c00173c6:	e8 83 fb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00173cb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00173d2:	e8 79 fa ff ff       	call   c0016e50 <blockTask(TaskState)>
c00173d7:	83 c4 10             	add    esp,0x10
c00173da:	66 90                	xchg   ax,ax
c00173dc:	83 ec 08             	sub    esp,0x8
c00173df:	56                   	push   esi
c00173e0:	68 4c ea 02 c0       	push   0xc002ea4c
c00173e5:	e8 c2 a7 00 00       	call   c0021bac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00173ea:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c00173f1:	e8 f2 a6 00 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173f6:	83 c4 10             	add    esp,0x10
c00173f9:	39 f8                	cmp    eax,edi
c00173fb:	0f 84 37 ff ff ff    	je     c0017338 <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c0017401:	8d 76 00             	lea    esi,[esi+0x0]
c0017404:	83 ec 0c             	sub    esp,0xc
c0017407:	68 4c ea 02 c0       	push   0xc002ea4c
c001740c:	e8 d7 a6 00 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017411:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0017418:	89 c6                	mov    esi,eax
c001741a:	e8 d1 a6 00 00       	call   c0021af0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001741f:	83 c4 10             	add    esp,0x10
c0017422:	39 f3                	cmp    ebx,esi
c0017424:	74 b6                	je     c00173dc <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017426:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0017429:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001742c:	39 82 6a 05 00 00    	cmp    DWORD PTR [edx+0x56a],eax
c0017432:	75 a8                	jne    c00173dc <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017434:	e9 77 ff ff ff       	jmp    c00173b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c0017439:	8d 76 00             	lea    esi,[esi+0x0]
c001743c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017440:	83 ec 0c             	sub    esp,0xc
c0017443:	68 f8 4e 02 c0       	push   0xc0024ef8
c0017448:	e9 4b ff ff ff       	jmp    c0017398 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c001744d:	8d 76 00             	lea    esi,[esi+0x0]
c0017450:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017454:	8b 36                	mov    esi,DWORD PTR [esi]
c0017456:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0017459:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001745c:	8b b8 6a 05 00 00    	mov    edi,DWORD PTR [eax+0x56a]
c0017462:	01 d7                	add    edi,edx
c0017464:	89 f8                	mov    eax,edi
c0017466:	e9 51 fe ff ff       	jmp    c00172bc <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c001746b:	90                   	nop

c001746c <cleanerTaskFunction(void*)>:
c001746c:	53                   	push   ebx
c001746d:	83 ec 08             	sub    esp,0x8
c0017470:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017478:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001747d:	85 c0                	test   eax,eax
c001747f:	75 03                	jne    c0017484 <cleanerTaskFunction(void*)+0x18>
c0017481:	fb                   	sti    
c0017482:	66 90                	xchg   ax,ax
c0017484:	fa                   	cli    
c0017485:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001748a:	83 c0 01             	add    eax,0x1
c001748d:	80 3d 14 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea14,0x0
c0017494:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017499:	0f 85 c9 00 00 00    	jne    c0017568 <cleanerTaskFunction(void*)+0xfc>
c001749f:	83 ec 0c             	sub    esp,0xc
c00174a2:	6a 02                	push   0x2
c00174a4:	e8 7b f9 ff ff       	call   c0016e24 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00174a9:	83 c4 10             	add    esp,0x10
c00174ac:	c6 05 14 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea14,0x0
c00174b3:	fa                   	cli    
c00174b4:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00174ba:	8b 1d 2c ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea2c
c00174c0:	83 c1 01             	add    ecx,0x1
c00174c3:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c00174c9:	83 c3 01             	add    ebx,0x1
c00174cc:	89 1d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ebx
c00174d2:	fa                   	cli    
c00174d3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00174d8:	83 c0 01             	add    eax,0x1
c00174db:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00174e0:	eb 2a                	jmp    c001750c <cleanerTaskFunction(void*)+0xa0>
c00174e2:	66 90                	xchg   ax,ax
c00174e4:	83 ec 0c             	sub    esp,0xc
c00174e7:	68 34 ea 02 c0       	push   0xc002ea34
c00174ec:	e8 f7 a5 00 00       	call   c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00174f1:	c7 04 24 34 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea34
c00174f8:	89 c3                	mov    ebx,eax
c00174fa:	e8 f1 a5 00 00       	call   c0021af0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00174ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017502:	e8 95 fc ff ff       	call   c001719c <cleanupTerminatedTask(ThreadControlBlock*)>
c0017507:	83 c4 10             	add    esp,0x10
c001750a:	66 90                	xchg   ax,ax
c001750c:	83 ec 0c             	sub    esp,0xc
c001750f:	68 34 ea 02 c0       	push   0xc002ea34
c0017514:	e8 b3 a5 00 00       	call   c0021acc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017519:	83 c4 10             	add    esp,0x10
c001751c:	84 c0                	test   al,al
c001751e:	74 c4                	je     c00174e4 <cleanerTaskFunction(void*)+0x78>
c0017520:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017528:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c001752e:	85 d2                	test   edx,edx
c0017530:	75 02                	jne    c0017534 <cleanerTaskFunction(void*)+0xc8>
c0017532:	fb                   	sti    
c0017533:	90                   	nop
c0017534:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0017539:	83 e8 01             	sub    eax,0x1
c001753c:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0017541:	0f 85 29 ff ff ff    	jne    c0017470 <cleanerTaskFunction(void*)+0x4>
c0017547:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c001754c:	85 c0                	test   eax,eax
c001754e:	0f 84 1c ff ff ff    	je     c0017470 <cleanerTaskFunction(void*)+0x4>
c0017554:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c001755e:	e8 2d f8 ff ff       	call   c0016d90 <schedule()>
c0017563:	e9 08 ff ff ff       	jmp    c0017470 <cleanerTaskFunction(void*)+0x4>
c0017568:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017570:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017575:	85 c0                	test   eax,eax
c0017577:	0f 85 2f ff ff ff    	jne    c00174ac <cleanerTaskFunction(void*)+0x40>
c001757d:	fb                   	sti    
c001757e:	e9 29 ff ff ff       	jmp    c00174ac <cleanerTaskFunction(void*)+0x40>
c0017583:	90                   	nop

c0017584 <terminateTask(int)>:
c0017584:	83 ec 14             	sub    esp,0x14
c0017587:	fa                   	cli    
c0017588:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001758d:	83 c0 01             	add    eax,0x1
c0017590:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017595:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c001759a:	83 c0 01             	add    eax,0x1
c001759d:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00175a2:	fa                   	cli    
c00175a3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00175a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00175ac:	83 c0 01             	add    eax,0x1
c00175af:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00175b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175b9:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00175bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175c1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00175c4:	50                   	push   eax
c00175c5:	68 34 ea 02 c0       	push   0xc002ea34
c00175ca:	e8 dd a5 00 00       	call   c0021bac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00175cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175d4:	83 c4 10             	add    esp,0x10
c00175d7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00175de:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c00175e3:	85 c0                	test   eax,eax
c00175e5:	0f 84 81 00 00 00    	je     c001766c <terminateTask(int)+0xe8>
c00175eb:	c6 05 14 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea14,0x1
c00175f2:	83 ec 0c             	sub    esp,0xc
c00175f5:	50                   	push   eax
c00175f6:	e8 ed fa ff ff       	call   c00170e8 <unblockTask(ThreadControlBlock*)>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	66 90                	xchg   ax,ax
c0017600:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017608:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001760d:	85 c0                	test   eax,eax
c001760f:	75 03                	jne    c0017614 <terminateTask(int)+0x90>
c0017611:	fb                   	sti    
c0017612:	66 90                	xchg   ax,ax
c0017614:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0017619:	83 e8 01             	sub    eax,0x1
c001761c:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0017621:	75 09                	jne    c001762c <terminateTask(int)+0xa8>
c0017623:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c001762a:	75 54                	jne    c0017680 <terminateTask(int)+0xfc>
c001762c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017634:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c001763a:	85 c9                	test   ecx,ecx
c001763c:	75 06                	jne    c0017644 <terminateTask(int)+0xc0>
c001763e:	66 90                	xchg   ax,ax
c0017640:	fb                   	sti    
c0017641:	8d 76 00             	lea    esi,[esi+0x0]
c0017644:	fa                   	cli    
c0017645:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001764a:	83 c0 01             	add    eax,0x1
c001764d:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017652:	e8 39 f7 ff ff       	call   c0016d90 <schedule()>
c0017657:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001765f:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017665:	85 d2                	test   edx,edx
c0017667:	75 db                	jne    c0017644 <terminateTask(int)+0xc0>
c0017669:	eb d5                	jmp    c0017640 <terminateTask(int)+0xbc>
c001766b:	90                   	nop
c001766c:	83 ec 0c             	sub    esp,0xc
c001766f:	68 3b 4e 02 c0       	push   0xc0024e3b
c0017674:	e8 d5 f8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017679:	83 c4 10             	add    esp,0x10
c001767c:	eb 82                	jmp    c0017600 <terminateTask(int)+0x7c>
c001767e:	66 90                	xchg   ax,ax
c0017680:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c001768a:	e8 01 f7 ff ff       	call   c0016d90 <schedule()>
c001768f:	eb 9b                	jmp    c001762c <terminateTask(int)+0xa8>
c0017691:	8d 76 00             	lea    esi,[esi+0x0]

c0017694 <Thr::terminateFromIRQ(int)>:
c0017694:	83 ec 18             	sub    esp,0x18
c0017697:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001769b:	50                   	push   eax
c001769c:	e8 e3 fe ff ff       	call   c0017584 <terminateTask(int)>
c00176a1:	8d 76 00             	lea    esi,[esi+0x0]

c00176a4 <__static_initialization_and_destruction_0(int, int)>:
c00176a4:	83 ec 0c             	sub    esp,0xc
c00176a7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00176ac:	0f 85 8e 00 00 00    	jne    c0017740 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00176b2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00176ba:	0f 85 80 00 00 00    	jne    c0017740 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00176c0:	83 ec 0c             	sub    esp,0xc
c00176c3:	68 4c ea 02 c0       	push   0xc002ea4c
c00176c8:	e8 7f a9 00 00       	call   c002204c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00176cd:	83 c4 10             	add    esp,0x10
c00176d0:	83 ec 04             	sub    esp,0x4
c00176d3:	68 48 5f 02 c0       	push   0xc0025f48
c00176d8:	68 4c ea 02 c0       	push   0xc002ea4c
c00176dd:	68 fc 1f 02 c0       	push   0xc0021ffc
c00176e2:	e8 24 5b ff ff       	call   c000d20b <__cxa_atexit>
c00176e7:	83 c4 10             	add    esp,0x10
c00176ea:	83 ec 0c             	sub    esp,0xc
c00176ed:	68 40 ea 02 c0       	push   0xc002ea40
c00176f2:	e8 55 a9 00 00       	call   c002204c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00176f7:	83 c4 10             	add    esp,0x10
c00176fa:	83 ec 04             	sub    esp,0x4
c00176fd:	68 48 5f 02 c0       	push   0xc0025f48
c0017702:	68 40 ea 02 c0       	push   0xc002ea40
c0017707:	68 fc 1f 02 c0       	push   0xc0021ffc
c001770c:	e8 fa 5a ff ff       	call   c000d20b <__cxa_atexit>
c0017711:	83 c4 10             	add    esp,0x10
c0017714:	83 ec 0c             	sub    esp,0xc
c0017717:	68 34 ea 02 c0       	push   0xc002ea34
c001771c:	e8 2b a9 00 00       	call   c002204c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017721:	83 c4 10             	add    esp,0x10
c0017724:	83 ec 04             	sub    esp,0x4
c0017727:	68 48 5f 02 c0       	push   0xc0025f48
c001772c:	68 34 ea 02 c0       	push   0xc002ea34
c0017731:	68 fc 1f 02 c0       	push   0xc0021ffc
c0017736:	e8 d0 5a ff ff       	call   c000d20b <__cxa_atexit>
c001773b:	83 c4 10             	add    esp,0x10
c001773e:	66 90                	xchg   ax,ax
c0017740:	90                   	nop
c0017741:	83 c4 0c             	add    esp,0xc
c0017744:	c3                   	ret    
c0017745:	8d 76 00             	lea    esi,[esi+0x0]

c0017748 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0017748:	83 ec 0c             	sub    esp,0xc
c001774b:	83 ec 08             	sub    esp,0x8
c001774e:	68 ff ff 00 00       	push   0xffff
c0017753:	6a 01                	push   0x1
c0017755:	e8 4a ff ff ff       	call   c00176a4 <__static_initialization_and_destruction_0(int, int)>
c001775a:	83 c4 10             	add    esp,0x10
c001775d:	83 c4 0c             	add    esp,0xc
c0017760:	c3                   	ret    

c0017761 <Vm::inbv(unsigned short)>:
c0017761:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017765:	66 81 fa fe fe       	cmp    dx,0xfefe
c001776a:	75 06                	jne    c0017772 <Vm::inbv(unsigned short)+0x11>
c001776c:	a0 90 ea 02 c0       	mov    al,ds:0xc002ea90
c0017771:	c3                   	ret    
c0017772:	ec                   	in     al,dx
c0017773:	c3                   	ret    

c0017774 <Vm::outbv(unsigned short, unsigned char)>:
c0017774:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017778:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001777c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017781:	75 25                	jne    c00177a8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0017783:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c0017789:	88 81 a0 ea 02 c0    	mov    BYTE PTR [ecx-0x3ffd1560],al
c001778f:	8d 51 01             	lea    edx,[ecx+0x1]
c0017792:	89 15 90 ea 02 c0    	mov    DWORD PTR ds:0xc002ea90,edx
c0017798:	83 fa 20             	cmp    edx,0x20
c001779b:	75 0c                	jne    c00177a9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001779d:	c7 05 90 ea 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x1f
c00177a7:	c3                   	ret    
c00177a8:	ee                   	out    dx,al
c00177a9:	c3                   	ret    

c00177aa <Vm::realToLinear(unsigned short, unsigned short)>:
c00177aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00177af:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00177b4:	c1 e0 04             	shl    eax,0x4
c00177b7:	01 d0                	add    eax,edx
c00177b9:	c3                   	ret    

c00177ba <Vm::getSegment(unsigned int)>:
c00177ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00177be:	c1 e8 10             	shr    eax,0x10
c00177c1:	c3                   	ret    

c00177c2 <Vm::getOffset(unsigned int)>:
c00177c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00177c6:	c3                   	ret    

c00177c7 <Vm::mainloop2()>:
c00177c7:	83 ec 18             	sub    esp,0x18
c00177ca:	fa                   	cli    
c00177cb:	6a 02                	push   0x2
c00177cd:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00177d3:	c6 05 89 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea89,0x1
c00177da:	e8 45 f6 ff ff       	call   c0016e24 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00177df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177e4:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c00177e8:	52                   	push   edx
c00177e9:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c00177ed:	52                   	push   edx
c00177ee:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00177f2:	52                   	push   edx
c00177f3:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c00177f7:	50                   	push   eax
c00177f8:	e8 12 8a fe ff       	call   c000020f <goToVM86>
c00177fd:	83 c4 2c             	add    esp,0x2c
c0017800:	c3                   	ret    

c0017801 <Vm::mainVm8086Loop(void*)>:
c0017801:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017808:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001780f:	75 01                	jne    c0017812 <Vm::mainVm8086Loop(void*)+0x11>
c0017811:	fb                   	sti    
c0017812:	eb b3                	jmp    c00177c7 <Vm::mainloop2()>

c0017814 <Vm::mainloop3(unsigned long)>:
c0017814:	83 ec 18             	sub    esp,0x18
c0017817:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001781b:	fa                   	cli    
c001781c:	6a 02                	push   0x2
c001781e:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017824:	c6 05 88 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea88,0x1
c001782b:	a3 84 ea 02 c0       	mov    ds:0xc002ea84,eax
c0017830:	e8 ef f5 ff ff       	call   c0016e24 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017835:	83 c4 1c             	add    esp,0x1c
c0017838:	eb 8d                	jmp    c00177c7 <Vm::mainloop2()>

c001783a <Vm::initialise8086()>:
c001783a:	83 ec 0c             	sub    esp,0xc
c001783d:	68 80 00 00 00       	push   0x80
c0017842:	6a 00                	push   0x0
c0017844:	68 01 78 01 c0       	push   0xc0017801
c0017849:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001784f:	e8 bc f2 ff ff       	call   c0016b10 <Process::createThread(void (*)(void*), void*, int)>
c0017854:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001785b:	68 10 01 00 00       	push   0x110
c0017860:	6a 00                	push   0x0
c0017862:	6a 00                	push   0x0
c0017864:	a3 8c ea 02 c0       	mov    ds:0xc002ea8c,eax
c0017869:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001786e:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c0017874:	e8 3f c3 ff ff       	call   c0013bb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017879:	83 c4 2c             	add    esp,0x2c
c001787c:	c3                   	ret    

c001787d <Vm::resetConventionalMemory8086()>:
c001787d:	c3                   	ret    

c001787e <Vm::finish8086()>:
c001787e:	53                   	push   ebx
c001787f:	83 ec 08             	sub    esp,0x8
c0017882:	fa                   	cli    
c0017883:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017889:	80 3d 88 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea88,0x0
c0017890:	75 18                	jne    c00178aa <Vm::finish8086()+0x2c>
c0017892:	e8 f9 f4 ff ff       	call   c0016d90 <schedule()>
c0017897:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001789e:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00178a5:	75 db                	jne    c0017882 <Vm::finish8086()+0x4>
c00178a7:	fb                   	sti    
c00178a8:	eb d8                	jmp    c0017882 <Vm::finish8086()+0x4>
c00178aa:	c6 05 88 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea88,0x0
c00178b1:	83 ec 0c             	sub    esp,0xc
c00178b4:	8b 1d 84 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea84
c00178ba:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c00178c0:	e8 23 f8 ff ff       	call   c00170e8 <unblockTask(ThreadControlBlock*)>
c00178c5:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00178cc:	83 c4 10             	add    esp,0x10
c00178cf:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00178d6:	75 01                	jne    c00178d9 <Vm::finish8086()+0x5b>
c00178d8:	fb                   	sti    
c00178d9:	83 c4 08             	add    esp,0x8
c00178dc:	89 d8                	mov    eax,ebx
c00178de:	5b                   	pop    ebx
c00178df:	c3                   	ret    

c00178e0 <Vm::getOutput8086(unsigned char*)>:
c00178e0:	57                   	push   edi
c00178e1:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c00178e7:	56                   	push   esi
c00178e8:	be a0 ea 02 c0       	mov    esi,0xc002eaa0
c00178ed:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00178f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00178f3:	5e                   	pop    esi
c00178f4:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c00178f9:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017903:	5f                   	pop    edi
c0017904:	c3                   	ret    

c0017905 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017905:	55                   	push   ebp
c0017906:	57                   	push   edi
c0017907:	56                   	push   esi
c0017908:	53                   	push   ebx
c0017909:	83 ec 2c             	sub    esp,0x2c
c001790c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017910:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c0017917:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001791b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001791f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017923:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0017927:	75 5d                	jne    c0017986 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017929:	83 ec 0c             	sub    esp,0xc
c001792c:	68 14 01 00 00       	push   0x114
c0017931:	e8 ae 81 ff ff       	call   c000fae4 <malloc>
c0017936:	83 c4 0c             	add    esp,0xc
c0017939:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001793f:	68 54 4f 02 c0       	push   0xc0024f54
c0017944:	50                   	push   eax
c0017945:	89 c7                	mov    edi,eax
c0017947:	e8 e0 07 ff ff       	call   c000812c <File::File(char const*, Process*)>
c001794c:	58                   	pop    eax
c001794d:	5a                   	pop    edx
c001794e:	6a 12                	push   0x12
c0017950:	57                   	push   edi
c0017951:	e8 f4 07 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0017956:	8b 07                	mov    eax,DWORD PTR [edi]
c0017958:	59                   	pop    ecx
c0017959:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001795d:	51                   	push   ecx
c001795e:	6a 00                	push   0x0
c0017960:	6a 00                	push   0x0
c0017962:	68 00 00 11 00       	push   0x110000
c0017967:	57                   	push   edi
c0017968:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001796b:	83 c4 14             	add    esp,0x14
c001796e:	57                   	push   edi
c001796f:	e8 34 08 ff ff       	call   c00081a8 <File::close()>
c0017974:	8b 07                	mov    eax,DWORD PTR [edi]
c0017976:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017979:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001797c:	83 c4 10             	add    esp,0x10
c001797f:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0017986:	fa                   	cli    
c0017987:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001798d:	80 3d 89 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea89,0x0
c0017994:	75 18                	jne    c00179ae <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0017996:	e8 f5 f3 ff ff       	call   c0016d90 <schedule()>
c001799b:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00179a2:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00179a9:	75 db                	jne    c0017986 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00179ab:	fb                   	sti    
c00179ac:	eb d8                	jmp    c0017986 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00179ae:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c00179b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179bc:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c00179c1:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c00179c5:	0f b7 f6             	movzx  esi,si
c00179c8:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00179cc:	0f b7 db             	movzx  ebx,bx
c00179cf:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c00179d3:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c00179d7:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00179db:	50                   	push   eax
c00179dc:	6a 20                	push   0x20
c00179de:	6a 00                	push   0x0
c00179e0:	68 a0 ea 02 c0       	push   0xc002eaa0
c00179e5:	e8 06 8b fe ff       	call   c00004f0 <memset>
c00179ea:	5a                   	pop    edx
c00179eb:	59                   	pop    ecx
c00179ec:	56                   	push   esi
c00179ed:	53                   	push   ebx
c00179ee:	e8 b7 fd ff ff       	call   c00177aa <Vm::realToLinear(unsigned short, unsigned short)>
c00179f3:	83 c4 10             	add    esp,0x10
c00179f6:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00179fa:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00179fe:	89 c7                	mov    edi,eax
c0017a00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017a02:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c0017a09:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017a10:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017a17:	75 01                	jne    c0017a1a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0017a19:	fb                   	sti    
c0017a1a:	83 ec 0c             	sub    esp,0xc
c0017a1d:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017a23:	e8 c0 f6 ff ff       	call   c00170e8 <unblockTask(ThreadControlBlock*)>
c0017a28:	83 c4 3c             	add    esp,0x3c
c0017a2b:	b0 01                	mov    al,0x1
c0017a2d:	5b                   	pop    ebx
c0017a2e:	5e                   	pop    esi
c0017a2f:	5f                   	pop    edi
c0017a30:	5d                   	pop    ebp
c0017a31:	c3                   	ret    

c0017a32 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017a32:	55                   	push   ebp
c0017a33:	57                   	push   edi
c0017a34:	56                   	push   esi
c0017a35:	53                   	push   ebx
c0017a36:	83 ec 2c             	sub    esp,0x2c
c0017a39:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a3d:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c0017a44:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017a48:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017a4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a50:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017a54:	75 5d                	jne    c0017ab3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017a56:	83 ec 0c             	sub    esp,0xc
c0017a59:	68 14 01 00 00       	push   0x114
c0017a5e:	e8 81 80 ff ff       	call   c000fae4 <malloc>
c0017a63:	83 c4 0c             	add    esp,0xc
c0017a66:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017a6c:	68 54 4f 02 c0       	push   0xc0024f54
c0017a71:	50                   	push   eax
c0017a72:	89 c3                	mov    ebx,eax
c0017a74:	e8 b3 06 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0017a79:	58                   	pop    eax
c0017a7a:	5a                   	pop    edx
c0017a7b:	6a 12                	push   0x12
c0017a7d:	53                   	push   ebx
c0017a7e:	e8 c7 06 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0017a83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a85:	59                   	pop    ecx
c0017a86:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017a8a:	52                   	push   edx
c0017a8b:	6a 00                	push   0x0
c0017a8d:	6a 00                	push   0x0
c0017a8f:	68 00 00 11 00       	push   0x110000
c0017a94:	53                   	push   ebx
c0017a95:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017a98:	83 c4 14             	add    esp,0x14
c0017a9b:	53                   	push   ebx
c0017a9c:	e8 07 07 ff ff       	call   c00081a8 <File::close()>
c0017aa1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017aa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017aa6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017aa9:	83 c4 10             	add    esp,0x10
c0017aac:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0017ab3:	50                   	push   eax
c0017ab4:	50                   	push   eax
c0017ab5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017ab9:	68 6f 4f 02 c0       	push   0xc0024f6f
c0017abe:	e8 8b f4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017ac3:	83 c4 10             	add    esp,0x10
c0017ac6:	fa                   	cli    
c0017ac7:	8a 1d 89 ea 02 c0    	mov    bl,BYTE PTR ds:0xc002ea89
c0017acd:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017ad3:	84 db                	test   bl,bl
c0017ad5:	75 18                	jne    c0017aef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c0017ad7:	e8 b4 f2 ff ff       	call   c0016d90 <schedule()>
c0017adc:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017ae3:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017aea:	75 da                	jne    c0017ac6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0017aec:	fb                   	sti    
c0017aed:	eb d7                	jmp    c0017ac6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0017aef:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017af9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017afd:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017b02:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017b06:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017b0a:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0017b0e:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0017b12:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017b16:	50                   	push   eax
c0017b17:	6a 20                	push   0x20
c0017b19:	6a 00                	push   0x0
c0017b1b:	68 a0 ea 02 c0       	push   0xc002eaa0
c0017b20:	e8 cb 89 fe ff       	call   c00004f0 <memset>
c0017b25:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017b2c:	e8 b3 7f ff ff       	call   c000fae4 <malloc>
c0017b31:	83 c4 0c             	add    esp,0xc
c0017b34:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017b3a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017b3e:	89 c5                	mov    ebp,eax
c0017b40:	50                   	push   eax
c0017b41:	e8 e6 05 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0017b46:	83 c4 10             	add    esp,0x10
c0017b49:	85 ed                	test   ebp,ebp
c0017b4b:	75 0a                	jne    c0017b57 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0017b4d:	83 ec 0c             	sub    esp,0xc
c0017b50:	68 91 4f 02 c0       	push   0xc0024f91
c0017b55:	eb 2b                	jmp    c0017b82 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c0017b57:	50                   	push   eax
c0017b58:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017b5c:	50                   	push   eax
c0017b5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017b61:	50                   	push   eax
c0017b62:	55                   	push   ebp
c0017b63:	e8 e4 08 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0017b68:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017b6c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017b70:	83 c4 10             	add    esp,0x10
c0017b73:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017b78:	74 28                	je     c0017ba2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x170>
c0017b7a:	83 ec 0c             	sub    esp,0xc
c0017b7d:	68 a5 4f 02 c0       	push   0xc0024fa5
c0017b82:	e8 a3 82 ff ff       	call   c000fe2a <KePanic(char const*)>
c0017b87:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017b8e:	83 c4 10             	add    esp,0x10
c0017b91:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017b98:	75 01                	jne    c0017b9b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c0017b9a:	fb                   	sti    
c0017b9b:	31 db                	xor    ebx,ebx
c0017b9d:	e9 92 00 00 00       	jmp    c0017c34 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c0017ba2:	51                   	push   ecx
c0017ba3:	51                   	push   ecx
c0017ba4:	6a 01                	push   0x1
c0017ba6:	55                   	push   ebp
c0017ba7:	e8 9e 05 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0017bac:	83 c4 10             	add    esp,0x10
c0017baf:	85 c0                	test   eax,eax
c0017bb1:	74 27                	je     c0017bda <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a8>
c0017bb3:	83 ec 0c             	sub    esp,0xc
c0017bb6:	68 be 4f 02 c0       	push   0xc0024fbe
c0017bbb:	e8 6a 82 ff ff       	call   c000fe2a <KePanic(char const*)>
c0017bc0:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017bc7:	83 c4 10             	add    esp,0x10
c0017bca:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017bd1:	75 c8                	jne    c0017b9b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c0017bd3:	fb                   	sti    
c0017bd4:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0017bd8:	eb 5a                	jmp    c0017c34 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c0017bda:	50                   	push   eax
c0017bdb:	0f b7 ff             	movzx  edi,di
c0017bde:	50                   	push   eax
c0017bdf:	0f b7 f6             	movzx  esi,si
c0017be2:	57                   	push   edi
c0017be3:	56                   	push   esi
c0017be4:	e8 c1 fb ff ff       	call   c00177aa <Vm::realToLinear(unsigned short, unsigned short)>
c0017be9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017bec:	5a                   	pop    edx
c0017bed:	8d 74 24 20          	lea    esi,[esp+0x20]
c0017bf1:	56                   	push   esi
c0017bf2:	50                   	push   eax
c0017bf3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017bf7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017bfb:	55                   	push   ebp
c0017bfc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017bff:	83 c4 14             	add    esp,0x14
c0017c02:	55                   	push   ebp
c0017c03:	e8 a0 05 ff ff       	call   c00081a8 <File::close()>
c0017c08:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c0017c0f:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017c16:	83 c4 10             	add    esp,0x10
c0017c19:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017c20:	75 01                	jne    c0017c23 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f1>
c0017c22:	fb                   	sti    
c0017c23:	83 ec 0c             	sub    esp,0xc
c0017c26:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017c2c:	e8 b7 f4 ff ff       	call   c00170e8 <unblockTask(ThreadControlBlock*)>
c0017c31:	83 c4 10             	add    esp,0x10
c0017c34:	83 c4 2c             	add    esp,0x2c
c0017c37:	88 d8                	mov    al,bl
c0017c39:	5b                   	pop    ebx
c0017c3a:	5e                   	pop    esi
c0017c3b:	5f                   	pop    edi
c0017c3c:	5d                   	pop    ebp
c0017c3d:	c3                   	ret    

c0017c3e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017c3e:	57                   	push   edi
c0017c3f:	56                   	push   esi
c0017c40:	53                   	push   ebx
c0017c41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017c49:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017c4d:	83 e8 06             	sub    eax,0x6
c0017c50:	0f b7 c0             	movzx  eax,ax
c0017c53:	50                   	push   eax
c0017c54:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017c59:	50                   	push   eax
c0017c5a:	e8 4b fb ff ff       	call   c00177aa <Vm::realToLinear(unsigned short, unsigned short)>
c0017c5f:	5a                   	pop    edx
c0017c60:	59                   	pop    ecx
c0017c61:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017c64:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017c67:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0017c6a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017c70:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017c73:	8d 51 02             	lea    edx,[ecx+0x2]
c0017c76:	66 89 10             	mov    WORD PTR [eax],dx
c0017c79:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017c7d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017c81:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017c85:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017c88:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017c8c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017c92:	89 f1                	mov    ecx,esi
c0017c94:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c0017c98:	89 f2                	mov    edx,esi
c0017c9a:	0f b6 d6             	movzx  edx,dh
c0017c9d:	0f b6 f1             	movzx  esi,cl
c0017ca0:	74 0a                	je     c0017cac <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0017ca2:	c1 e2 08             	shl    edx,0x8
c0017ca5:	09 f2                	or     edx,esi
c0017ca7:	80 ce 02             	or     dh,0x2
c0017caa:	eb 08                	jmp    c0017cb4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0017cac:	c1 e2 08             	shl    edx,0x8
c0017caf:	09 f2                	or     edx,esi
c0017cb1:	80 e6 fd             	and    dh,0xfd
c0017cb4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017cb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017cbd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017cc1:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017cc9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017ccc:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017cd4:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017cd7:	5b                   	pop    ebx
c0017cd8:	5e                   	pop    esi
c0017cd9:	5f                   	pop    edi
c0017cda:	c3                   	ret    

c0017cdb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017cdb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017ce0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017ce5:	c1 e0 04             	shl    eax,0x4
c0017ce8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017ceb:	c3                   	ret    

c0017cec <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017cec:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017cf1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017cf6:	c1 e0 04             	shl    eax,0x4
c0017cf9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017cfd:	c3                   	ret    

c0017cfe <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017cfe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017d03:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017d08:	c1 e0 04             	shl    eax,0x4
c0017d0b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017d0e:	c3                   	ret    

c0017d0f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017d0f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017d14:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017d19:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017d1d:	c1 e0 04             	shl    eax,0x4
c0017d20:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017d23:	c3                   	ret    

c0017d24 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017d24:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017d29:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017d2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017d32:	c1 e0 04             	shl    eax,0x4
c0017d35:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017d39:	c3                   	ret    

c0017d3a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017d3a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017d3f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017d44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017d48:	c1 e0 04             	shl    eax,0x4
c0017d4b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017d4e:	c3                   	ret    

c0017d4f <Vm::faultHandler(regs*)>:
c0017d4f:	55                   	push   ebp
c0017d50:	57                   	push   edi
c0017d51:	56                   	push   esi
c0017d52:	53                   	push   ebx
c0017d53:	83 ec 2c             	sub    esp,0x2c
c0017d56:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017d5a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017d5d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017d61:	0f b7 f8             	movzx  edi,ax
c0017d64:	0f b7 c0             	movzx  eax,ax
c0017d67:	52                   	push   edx
c0017d68:	50                   	push   eax
c0017d69:	e8 3c fa ff ff       	call   c00177aa <Vm::realToLinear(unsigned short, unsigned short)>
c0017d6e:	5a                   	pop    edx
c0017d6f:	59                   	pop    ecx
c0017d70:	89 c1                	mov    ecx,eax
c0017d72:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017d75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d79:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017d7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d82:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017d85:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d89:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017d8e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d96:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017d9a:	e8 0b fa ff ff       	call   c00177aa <Vm::realToLinear(unsigned short, unsigned short)>
c0017d9f:	5e                   	pop    esi
c0017da0:	be 06 00 00 00       	mov    esi,0x6
c0017da5:	5d                   	pop    ebp
c0017da6:	31 ed                	xor    ebp,ebp
c0017da8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017dad:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017db0:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017db6:	0f 84 74 02 00 00    	je     c0018030 <Vm::faultHandler(regs*)+0x2e1>
c0017dbc:	0f 87 94 00 00 00    	ja     c0017e56 <Vm::faultHandler(regs*)+0x107>
c0017dc2:	83 fa 66             	cmp    edx,0x66
c0017dc5:	0f 84 e2 01 00 00    	je     c0017fad <Vm::faultHandler(regs*)+0x25e>
c0017dcb:	77 47                	ja     c0017e14 <Vm::faultHandler(regs*)+0xc5>
c0017dcd:	83 fa 36             	cmp    edx,0x36
c0017dd0:	0f 84 ca 01 00 00    	je     c0017fa0 <Vm::faultHandler(regs*)+0x251>
c0017dd6:	77 1a                	ja     c0017df2 <Vm::faultHandler(regs*)+0xa3>
c0017dd8:	83 fa 26             	cmp    edx,0x26
c0017ddb:	0f 84 98 01 00 00    	je     c0017f79 <Vm::faultHandler(regs*)+0x22a>
c0017de1:	83 fa 2e             	cmp    edx,0x2e
c0017de4:	0f 85 27 06 00 00    	jne    c0018411 <Vm::faultHandler(regs*)+0x6c2>
c0017dea:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017ded:	31 f6                	xor    esi,esi
c0017def:	41                   	inc    ecx
c0017df0:	eb bb                	jmp    c0017dad <Vm::faultHandler(regs*)+0x5e>
c0017df2:	83 fa 64             	cmp    edx,0x64
c0017df5:	0f 84 8b 01 00 00    	je     c0017f86 <Vm::faultHandler(regs*)+0x237>
c0017dfb:	0f 87 92 01 00 00    	ja     c0017f93 <Vm::faultHandler(regs*)+0x244>
c0017e01:	83 fa 3e             	cmp    edx,0x3e
c0017e04:	0f 85 07 06 00 00    	jne    c0018411 <Vm::faultHandler(regs*)+0x6c2>
c0017e0a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017e0d:	be 01 00 00 00       	mov    esi,0x1
c0017e12:	eb db                	jmp    c0017def <Vm::faultHandler(regs*)+0xa0>
c0017e14:	83 fa 6d             	cmp    edx,0x6d
c0017e17:	0f 84 34 03 00 00    	je     c0018151 <Vm::faultHandler(regs*)+0x402>
c0017e1d:	77 17                	ja     c0017e36 <Vm::faultHandler(regs*)+0xe7>
c0017e1f:	83 fa 67             	cmp    edx,0x67
c0017e22:	0f 84 92 01 00 00    	je     c0017fba <Vm::faultHandler(regs*)+0x26b>
c0017e28:	83 fa 6c             	cmp    edx,0x6c
c0017e2b:	0f 84 b1 02 00 00    	je     c00180e2 <Vm::faultHandler(regs*)+0x393>
c0017e31:	e9 db 05 00 00       	jmp    c0018411 <Vm::faultHandler(regs*)+0x6c2>
c0017e36:	83 fa 6f             	cmp    edx,0x6f
c0017e39:	0f 84 40 04 00 00    	je     c001827f <Vm::faultHandler(regs*)+0x530>
c0017e3f:	0f 82 a2 03 00 00    	jb     c00181e7 <Vm::faultHandler(regs*)+0x498>
c0017e45:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017e4b:	0f 84 76 01 00 00    	je     c0017fc7 <Vm::faultHandler(regs*)+0x278>
c0017e51:	e9 bb 05 00 00       	jmp    c0018411 <Vm::faultHandler(regs*)+0x6c2>
c0017e56:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017e5c:	0f 84 57 05 00 00    	je     c00183b9 <Vm::faultHandler(regs*)+0x66a>
c0017e62:	0f 87 a9 00 00 00    	ja     c0017f11 <Vm::faultHandler(regs*)+0x1c2>
c0017e68:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017e6e:	0f 84 d6 04 00 00    	je     c001834a <Vm::faultHandler(regs*)+0x5fb>
c0017e74:	77 78                	ja     c0017eee <Vm::faultHandler(regs*)+0x19f>
c0017e76:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017e7c:	0f 84 0e 02 00 00    	je     c0018090 <Vm::faultHandler(regs*)+0x341>
c0017e82:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017e88:	0f 85 83 05 00 00    	jne    c0018411 <Vm::faultHandler(regs*)+0x6c2>
c0017e8e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017e92:	89 d1                	mov    ecx,edx
c0017e94:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017e97:	c1 e1 08             	shl    ecx,0x8
c0017e9a:	09 ca                	or     edx,ecx
c0017e9c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017e9f:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017ea3:	89 d1                	mov    ecx,edx
c0017ea5:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017ea9:	c1 e1 08             	shl    ecx,0x8
c0017eac:	09 ca                	or     edx,ecx
c0017eae:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017eb1:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017eb5:	89 d1                	mov    ecx,edx
c0017eb7:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017ebb:	c1 e1 08             	shl    ecx,0x8
c0017ebe:	09 ca                	or     edx,ecx
c0017ec0:	81 ca 00 02 02 00    	or     edx,0x20200
c0017ec6:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017ec9:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017ecd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017ed3:	d1 e8                	shr    eax,1
c0017ed5:	83 e0 01             	and    eax,0x1
c0017ed8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0017edb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017ede:	83 c0 06             	add    eax,0x6
c0017ee1:	25 ff ff 00 00       	and    eax,0xffff
c0017ee6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017ee9:	e9 1f 05 00 00       	jmp    c001840d <Vm::faultHandler(regs*)+0x6be>
c0017eee:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017ef4:	0f 84 95 04 00 00    	je     c001838f <Vm::faultHandler(regs*)+0x640>
c0017efa:	0f 82 66 04 00 00    	jb     c0018366 <Vm::faultHandler(regs*)+0x617>
c0017f00:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017f06:	0f 84 9a 04 00 00    	je     c00183a6 <Vm::faultHandler(regs*)+0x657>
c0017f0c:	e9 00 05 00 00       	jmp    c0018411 <Vm::faultHandler(regs*)+0x6c2>
c0017f11:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017f17:	0f 84 dd 04 00 00    	je     c00183fa <Vm::faultHandler(regs*)+0x6ab>
c0017f1d:	77 2e                	ja     c0017f4d <Vm::faultHandler(regs*)+0x1fe>
c0017f1f:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017f25:	0f 84 aa 04 00 00    	je     c00183d5 <Vm::faultHandler(regs*)+0x686>
c0017f2b:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017f31:	0f 85 da 04 00 00    	jne    c0018411 <Vm::faultHandler(regs*)+0x6c2>
c0017f37:	50                   	push   eax
c0017f38:	50                   	push   eax
c0017f39:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017f3d:	50                   	push   eax
c0017f3e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017f42:	50                   	push   eax
c0017f43:	e8 2c f8 ff ff       	call   c0017774 <Vm::outbv(unsigned short, unsigned char)>
c0017f48:	e9 a5 04 00 00       	jmp    c00183f2 <Vm::faultHandler(regs*)+0x6a3>
c0017f4d:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017f53:	0f 84 6d 01 00 00    	je     c00180c6 <Vm::faultHandler(regs*)+0x377>
c0017f59:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017f5f:	0f 84 6f 01 00 00    	je     c00180d4 <Vm::faultHandler(regs*)+0x385>
c0017f65:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017f6b:	0f 85 a0 04 00 00    	jne    c0018411 <Vm::faultHandler(regs*)+0x6c2>
c0017f71:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f74:	e9 76 fe ff ff       	jmp    c0017def <Vm::faultHandler(regs*)+0xa0>
c0017f79:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f7c:	be 02 00 00 00       	mov    esi,0x2
c0017f81:	e9 69 fe ff ff       	jmp    c0017def <Vm::faultHandler(regs*)+0xa0>
c0017f86:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f89:	be 03 00 00 00       	mov    esi,0x3
c0017f8e:	e9 5c fe ff ff       	jmp    c0017def <Vm::faultHandler(regs*)+0xa0>
c0017f93:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017f96:	be 04 00 00 00       	mov    esi,0x4
c0017f9b:	e9 4f fe ff ff       	jmp    c0017def <Vm::faultHandler(regs*)+0xa0>
c0017fa0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017fa3:	be 05 00 00 00       	mov    esi,0x5
c0017fa8:	e9 42 fe ff ff       	jmp    c0017def <Vm::faultHandler(regs*)+0xa0>
c0017fad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017fb0:	bd 01 00 00 00       	mov    ebp,0x1
c0017fb5:	e9 35 fe ff ff       	jmp    c0017def <Vm::faultHandler(regs*)+0xa0>
c0017fba:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017fbd:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017fc2:	e9 28 fe ff ff       	jmp    c0017def <Vm::faultHandler(regs*)+0xa0>
c0017fc7:	83 e5 01             	and    ebp,0x1
c0017fca:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017fcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017fd1:	74 30                	je     c0018003 <Vm::faultHandler(regs*)+0x2b4>
c0017fd3:	83 e9 04             	sub    ecx,0x4
c0017fd6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017fdc:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017fe2:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017fe5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017fe8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017fee:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0017ff2:	0f 84 12 04 00 00    	je     c001840a <Vm::faultHandler(regs*)+0x6bb>
c0017ff8:	80 ce 02             	or     dh,0x2
c0017ffb:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017ffe:	e9 07 04 00 00       	jmp    c001840a <Vm::faultHandler(regs*)+0x6bb>
c0018003:	83 e9 02             	sub    ecx,0x2
c0018006:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001800c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001800f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018013:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018019:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001801d:	74 05                	je     c0018024 <Vm::faultHandler(regs*)+0x2d5>
c001801f:	80 ce 02             	or     dh,0x2
c0018022:	eb 03                	jmp    c0018027 <Vm::faultHandler(regs*)+0x2d8>
c0018024:	80 e6 fd             	and    dh,0xfd
c0018027:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001802b:	e9 da 03 00 00       	jmp    c001840a <Vm::faultHandler(regs*)+0x6bb>
c0018030:	83 e5 01             	and    ebp,0x1
c0018033:	74 2a                	je     c001805f <Vm::faultHandler(regs*)+0x310>
c0018035:	8b 10                	mov    edx,DWORD PTR [eax]
c0018037:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001803d:	81 ca 00 02 02 00    	or     edx,0x20200
c0018043:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018046:	8b 00                	mov    eax,DWORD PTR [eax]
c0018048:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001804e:	c1 e8 09             	shr    eax,0x9
c0018051:	83 e0 01             	and    eax,0x1
c0018054:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018057:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001805a:	83 c0 04             	add    eax,0x4
c001805d:	eb 24                	jmp    c0018083 <Vm::faultHandler(regs*)+0x334>
c001805f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018062:	81 ca 00 02 02 00    	or     edx,0x20200
c0018068:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001806b:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001806e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018074:	c1 e8 09             	shr    eax,0x9
c0018077:	83 e0 01             	and    eax,0x1
c001807a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001807d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018080:	83 c0 02             	add    eax,0x2
c0018083:	25 ff ff 00 00       	and    eax,0xffff
c0018088:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001808b:	e9 7a 03 00 00       	jmp    c001840a <Vm::faultHandler(regs*)+0x6bb>
c0018090:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018094:	3d ee 00 00 00       	cmp    eax,0xee
c0018099:	75 10                	jne    c00180ab <Vm::faultHandler(regs*)+0x35c>
c001809b:	83 ec 0c             	sub    esp,0xc
c001809e:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00180a1:	e8 6e f7 ff ff       	call   c0017814 <Vm::mainloop3(unsigned long)>
c00180a6:	e9 4a 03 00 00       	jmp    c00183f5 <Vm::faultHandler(regs*)+0x6a6>
c00180ab:	83 ec 0c             	sub    esp,0xc
c00180ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00180b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180b6:	51                   	push   ecx
c00180b7:	50                   	push   eax
c00180b8:	53                   	push   ebx
c00180b9:	e8 80 fb ff ff       	call   c0017c3e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00180be:	83 c4 20             	add    esp,0x20
c00180c1:	e9 47 03 00 00       	jmp    c001840d <Vm::faultHandler(regs*)+0x6be>
c00180c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180cb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00180cf:	e9 36 03 00 00       	jmp    c001840a <Vm::faultHandler(regs*)+0x6bb>
c00180d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180d9:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00180dd:	e9 28 03 00 00       	jmp    c001840a <Vm::faultHandler(regs*)+0x6bb>
c00180e2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00180e7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00180ea:	74 2b                	je     c0018117 <Vm::faultHandler(regs*)+0x3c8>
c00180ec:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00180f3:	76 22                	jbe    c0018117 <Vm::faultHandler(regs*)+0x3c8>
c00180f5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00180f9:	50                   	push   eax
c00180fa:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00180fe:	50                   	push   eax
c00180ff:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018103:	50                   	push   eax
c0018104:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018108:	50                   	push   eax
c0018109:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001810d:	50                   	push   eax
c001810e:	6a 6c                	push   0x6c
c0018110:	6a 6c                	push   0x6c
c0018112:	e9 c0 01 00 00       	jmp    c00182d7 <Vm::faultHandler(regs*)+0x588>
c0018117:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001811b:	83 ec 0c             	sub    esp,0xc
c001811e:	0f b7 f6             	movzx  esi,si
c0018121:	50                   	push   eax
c0018122:	e8 3a f6 ff ff       	call   c0017761 <Vm::inbv(unsigned short)>
c0018127:	83 c4 0c             	add    esp,0xc
c001812a:	0f b6 c0             	movzx  eax,al
c001812d:	50                   	push   eax
c001812e:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018132:	50                   	push   eax
c0018133:	56                   	push   esi
c0018134:	e8 d6 fb ff ff       	call   c0017d0f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018139:	83 c4 10             	add    esp,0x10
c001813c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001813f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018143:	74 03                	je     c0018148 <Vm::faultHandler(regs*)+0x3f9>
c0018145:	48                   	dec    eax
c0018146:	eb 01                	jmp    c0018149 <Vm::faultHandler(regs*)+0x3fa>
c0018148:	40                   	inc    eax
c0018149:	0f b7 c0             	movzx  eax,ax
c001814c:	e9 8e 00 00 00       	jmp    c00181df <Vm::faultHandler(regs*)+0x490>
c0018151:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0018156:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018159:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001815c:	74 29                	je     c0018187 <Vm::faultHandler(regs*)+0x438>
c001815e:	3d ff ff 00 00       	cmp    eax,0xffff
c0018163:	76 22                	jbe    c0018187 <Vm::faultHandler(regs*)+0x438>
c0018165:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018169:	50                   	push   eax
c001816a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001816e:	50                   	push   eax
c001816f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018173:	50                   	push   eax
c0018174:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018178:	50                   	push   eax
c0018179:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001817d:	50                   	push   eax
c001817e:	6a 6d                	push   0x6d
c0018180:	6a 6d                	push   0x6d
c0018182:	e9 50 01 00 00       	jmp    c00182d7 <Vm::faultHandler(regs*)+0x588>
c0018187:	83 e5 01             	and    ebp,0x1
c001818a:	0f b7 c8             	movzx  ecx,ax
c001818d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018190:	0f b7 f6             	movzx  esi,si
c0018193:	74 1e                	je     c00181b3 <Vm::faultHandler(regs*)+0x464>
c0018195:	ed                   	in     eax,dx
c0018196:	55                   	push   ebp
c0018197:	50                   	push   eax
c0018198:	51                   	push   ecx
c0018199:	56                   	push   esi
c001819a:	e8 9b fb ff ff       	call   c0017d3a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001819f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00181a2:	83 c4 10             	add    esp,0x10
c00181a5:	8d 50 04             	lea    edx,[eax+0x4]
c00181a8:	83 e8 04             	sub    eax,0x4
c00181ab:	81 e2 ff ff 00 00    	and    edx,0xffff
c00181b1:	eb 20                	jmp    c00181d3 <Vm::faultHandler(regs*)+0x484>
c00181b3:	66 ed                	in     ax,dx
c00181b5:	57                   	push   edi
c00181b6:	0f b7 c0             	movzx  eax,ax
c00181b9:	50                   	push   eax
c00181ba:	51                   	push   ecx
c00181bb:	56                   	push   esi
c00181bc:	e8 63 fb ff ff       	call   c0017d24 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00181c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00181c4:	83 c4 10             	add    esp,0x10
c00181c7:	8d 50 02             	lea    edx,[eax+0x2]
c00181ca:	83 e8 02             	sub    eax,0x2
c00181cd:	81 e2 ff ff 00 00    	and    edx,0xffff
c00181d3:	25 ff ff 00 00       	and    eax,0xffff
c00181d8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00181dc:	0f 44 c2             	cmove  eax,edx
c00181df:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00181e2:	e9 23 02 00 00       	jmp    c001840a <Vm::faultHandler(regs*)+0x6bb>
c00181e7:	8d 46 ff             	lea    eax,[esi-0x1]
c00181ea:	0f b6 f0             	movzx  esi,al
c00181ed:	83 fe 05             	cmp    esi,0x5
c00181f0:	77 23                	ja     c0018215 <Vm::faultHandler(regs*)+0x4c6>
c00181f2:	ff 24 b5 34 50 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdafcc]
c00181f9:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00181fe:	eb 15                	jmp    c0018215 <Vm::faultHandler(regs*)+0x4c6>
c0018200:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0018204:	eb 0f                	jmp    c0018215 <Vm::faultHandler(regs*)+0x4c6>
c0018206:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001820a:	eb 09                	jmp    c0018215 <Vm::faultHandler(regs*)+0x4c6>
c001820c:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0018210:	eb 03                	jmp    c0018215 <Vm::faultHandler(regs*)+0x4c6>
c0018212:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0018215:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001821a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001821d:	74 29                	je     c0018248 <Vm::faultHandler(regs*)+0x4f9>
c001821f:	3d ff ff 00 00       	cmp    eax,0xffff
c0018224:	76 22                	jbe    c0018248 <Vm::faultHandler(regs*)+0x4f9>
c0018226:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001822a:	50                   	push   eax
c001822b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001822f:	50                   	push   eax
c0018230:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018234:	50                   	push   eax
c0018235:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018239:	50                   	push   eax
c001823a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001823e:	50                   	push   eax
c001823f:	6a 6e                	push   0x6e
c0018241:	6a 6e                	push   0x6e
c0018243:	e9 8f 00 00 00       	jmp    c00182d7 <Vm::faultHandler(regs*)+0x588>
c0018248:	52                   	push   edx
c0018249:	0f b7 c0             	movzx  eax,ax
c001824c:	52                   	push   edx
c001824d:	50                   	push   eax
c001824e:	57                   	push   edi
c001824f:	e8 87 fa ff ff       	call   c0017cdb <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018254:	59                   	pop    ecx
c0018255:	5e                   	pop    esi
c0018256:	0f b6 c0             	movzx  eax,al
c0018259:	50                   	push   eax
c001825a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001825e:	50                   	push   eax
c001825f:	e8 10 f5 ff ff       	call   c0017774 <Vm::outbv(unsigned short, unsigned char)>
c0018264:	83 c4 10             	add    esp,0x10
c0018267:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001826a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001826e:	74 03                	je     c0018273 <Vm::faultHandler(regs*)+0x524>
c0018270:	48                   	dec    eax
c0018271:	eb 01                	jmp    c0018274 <Vm::faultHandler(regs*)+0x525>
c0018273:	40                   	inc    eax
c0018274:	0f b7 c0             	movzx  eax,ax
c0018277:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001827a:	e9 8b 01 00 00       	jmp    c001840a <Vm::faultHandler(regs*)+0x6bb>
c001827f:	8d 46 ff             	lea    eax,[esi-0x1]
c0018282:	0f b6 f0             	movzx  esi,al
c0018285:	83 fe 05             	cmp    esi,0x5
c0018288:	77 1e                	ja     c00182a8 <Vm::faultHandler(regs*)+0x559>
c001828a:	ff 24 b5 4c 50 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdafb4]
c0018291:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018295:	eb 11                	jmp    c00182a8 <Vm::faultHandler(regs*)+0x559>
c0018297:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001829a:	eb 0c                	jmp    c00182a8 <Vm::faultHandler(regs*)+0x559>
c001829c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001829f:	eb 07                	jmp    c00182a8 <Vm::faultHandler(regs*)+0x559>
c00182a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00182a4:	eb 02                	jmp    c00182a8 <Vm::faultHandler(regs*)+0x559>
c00182a6:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00182a8:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00182ad:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00182b0:	74 37                	je     c00182e9 <Vm::faultHandler(regs*)+0x59a>
c00182b2:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00182b8:	76 2f                	jbe    c00182e9 <Vm::faultHandler(regs*)+0x59a>
c00182ba:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00182be:	50                   	push   eax
c00182bf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00182c3:	50                   	push   eax
c00182c4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00182c8:	50                   	push   eax
c00182c9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00182cd:	50                   	push   eax
c00182ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00182d2:	50                   	push   eax
c00182d3:	6a 6f                	push   0x6f
c00182d5:	6a 6f                	push   0x6f
c00182d7:	68 d7 4f 02 c0       	push   0xc0024fd7
c00182dc:	e8 6d ec fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00182e1:	83 c4 20             	add    esp,0x20
c00182e4:	e9 86 01 00 00       	jmp    c001846f <Vm::faultHandler(regs*)+0x720>
c00182e9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00182ec:	0f b7 d7             	movzx  edx,di
c00182ef:	0f b7 c6             	movzx  eax,si
c00182f2:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00182f5:	81 e1 00 04 00 00    	and    ecx,0x400
c00182fb:	83 e5 01             	and    ebp,0x1
c00182fe:	74 1c                	je     c001831c <Vm::faultHandler(regs*)+0x5cd>
c0018300:	55                   	push   ebp
c0018301:	55                   	push   ebp
c0018302:	50                   	push   eax
c0018303:	52                   	push   edx
c0018304:	e8 f5 f9 ff ff       	call   c0017cfe <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018309:	83 c4 10             	add    esp,0x10
c001830c:	89 fa                	mov    edx,edi
c001830e:	ef                   	out    dx,eax
c001830f:	8d 46 04             	lea    eax,[esi+0x4]
c0018312:	83 ee 04             	sub    esi,0x4
c0018315:	25 ff ff 00 00       	and    eax,0xffff
c001831a:	eb 1b                	jmp    c0018337 <Vm::faultHandler(regs*)+0x5e8>
c001831c:	55                   	push   ebp
c001831d:	55                   	push   ebp
c001831e:	50                   	push   eax
c001831f:	52                   	push   edx
c0018320:	e8 c7 f9 ff ff       	call   c0017cec <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018325:	83 c4 10             	add    esp,0x10
c0018328:	89 fa                	mov    edx,edi
c001832a:	66 ef                	out    dx,ax
c001832c:	8d 46 02             	lea    eax,[esi+0x2]
c001832f:	83 ee 02             	sub    esi,0x2
c0018332:	25 ff ff 00 00       	and    eax,0xffff
c0018337:	81 e6 ff ff 00 00    	and    esi,0xffff
c001833d:	85 c9                	test   ecx,ecx
c001833f:	0f 44 f0             	cmove  esi,eax
c0018342:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0018345:	e9 c0 00 00 00       	jmp    c001840a <Vm::faultHandler(regs*)+0x6bb>
c001834a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018351:	83 ec 0c             	sub    esp,0xc
c0018354:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018358:	50                   	push   eax
c0018359:	e8 03 f4 ff ff       	call   c0017761 <Vm::inbv(unsigned short)>
c001835e:	0f b6 c0             	movzx  eax,al
c0018361:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018364:	eb 3a                	jmp    c00183a0 <Vm::faultHandler(regs*)+0x651>
c0018366:	83 e5 01             	and    ebp,0x1
c0018369:	74 07                	je     c0018372 <Vm::faultHandler(regs*)+0x623>
c001836b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001836f:	ed                   	in     eax,dx
c0018370:	eb 14                	jmp    c0018386 <Vm::faultHandler(regs*)+0x637>
c0018372:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018375:	66 31 f6             	xor    si,si
c0018378:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001837b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001837f:	66 ed                	in     ax,dx
c0018381:	0f b7 c0             	movzx  eax,ax
c0018384:	09 f0                	or     eax,esi
c0018386:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018389:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001838d:	eb 7e                	jmp    c001840d <Vm::faultHandler(regs*)+0x6be>
c001838f:	52                   	push   edx
c0018390:	52                   	push   edx
c0018391:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018395:	50                   	push   eax
c0018396:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001839a:	50                   	push   eax
c001839b:	e8 d4 f3 ff ff       	call   c0017774 <Vm::outbv(unsigned short, unsigned char)>
c00183a0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00183a4:	eb 4f                	jmp    c00183f5 <Vm::faultHandler(regs*)+0x6a6>
c00183a6:	83 e5 01             	and    ebp,0x1
c00183a9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00183ac:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00183b0:	74 03                	je     c00183b5 <Vm::faultHandler(regs*)+0x666>
c00183b2:	ef                   	out    dx,eax
c00183b3:	eb d4                	jmp    c0018389 <Vm::faultHandler(regs*)+0x63a>
c00183b5:	66 ef                	out    dx,ax
c00183b7:	eb d0                	jmp    c0018389 <Vm::faultHandler(regs*)+0x63a>
c00183b9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00183bd:	83 ec 0c             	sub    esp,0xc
c00183c0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00183c7:	50                   	push   eax
c00183c8:	e8 94 f3 ff ff       	call   c0017761 <Vm::inbv(unsigned short)>
c00183cd:	0f b6 c0             	movzx  eax,al
c00183d0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00183d3:	eb 1d                	jmp    c00183f2 <Vm::faultHandler(regs*)+0x6a3>
c00183d5:	83 e5 01             	and    ebp,0x1
c00183d8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00183db:	74 03                	je     c00183e0 <Vm::faultHandler(regs*)+0x691>
c00183dd:	ed                   	in     eax,dx
c00183de:	eb 0d                	jmp    c00183ed <Vm::faultHandler(regs*)+0x69e>
c00183e0:	66 ed                	in     ax,dx
c00183e2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00183e5:	0f b7 c0             	movzx  eax,ax
c00183e8:	66 31 d2             	xor    dx,dx
c00183eb:	09 d0                	or     eax,edx
c00183ed:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00183f0:	eb 18                	jmp    c001840a <Vm::faultHandler(regs*)+0x6bb>
c00183f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00183f5:	83 c4 10             	add    esp,0x10
c00183f8:	eb 13                	jmp    c001840d <Vm::faultHandler(regs*)+0x6be>
c00183fa:	83 e5 01             	and    ebp,0x1
c00183fd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018400:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018403:	74 03                	je     c0018408 <Vm::faultHandler(regs*)+0x6b9>
c0018405:	ef                   	out    dx,eax
c0018406:	eb 02                	jmp    c001840a <Vm::faultHandler(regs*)+0x6bb>
c0018408:	66 ef                	out    dx,ax
c001840a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001840d:	b0 01                	mov    al,0x1
c001840f:	eb 60                	jmp    c0018471 <Vm::faultHandler(regs*)+0x722>
c0018411:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018415:	50                   	push   eax
c0018416:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001841a:	50                   	push   eax
c001841b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001841f:	50                   	push   eax
c0018420:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018424:	50                   	push   eax
c0018425:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018429:	50                   	push   eax
c001842a:	52                   	push   edx
c001842b:	52                   	push   edx
c001842c:	68 04 50 02 c0       	push   0xc0025004
c0018431:	e8 18 eb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018436:	83 c4 20             	add    esp,0x20
c0018439:	83 ec 0c             	sub    esp,0xc
c001843c:	6a 60                	push   0x60
c001843e:	e8 1e f3 ff ff       	call   c0017761 <Vm::inbv(unsigned short)>
c0018443:	83 c4 10             	add    esp,0x10
c0018446:	0f b6 d0             	movzx  edx,al
c0018449:	83 fa 1c             	cmp    edx,0x1c
c001844c:	74 05                	je     c0018453 <Vm::faultHandler(regs*)+0x704>
c001844e:	83 fa 5a             	cmp    edx,0x5a
c0018451:	75 e6                	jne    c0018439 <Vm::faultHandler(regs*)+0x6ea>
c0018453:	0f b6 c0             	movzx  eax,al
c0018456:	83 f8 1c             	cmp    eax,0x1c
c0018459:	74 05                	je     c0018460 <Vm::faultHandler(regs*)+0x711>
c001845b:	83 f8 5a             	cmp    eax,0x5a
c001845e:	75 0f                	jne    c001846f <Vm::faultHandler(regs*)+0x720>
c0018460:	83 ec 0c             	sub    esp,0xc
c0018463:	6a 60                	push   0x60
c0018465:	e8 f7 f2 ff ff       	call   c0017761 <Vm::inbv(unsigned short)>
c001846a:	83 c4 10             	add    esp,0x10
c001846d:	eb e4                	jmp    c0018453 <Vm::faultHandler(regs*)+0x704>
c001846f:	31 c0                	xor    eax,eax
c0018471:	83 c4 2c             	add    esp,0x2c
c0018474:	5b                   	pop    ebx
c0018475:	5e                   	pop    esi
c0018476:	5f                   	pop    edi
c0018477:	5d                   	pop    ebp
c0018478:	c3                   	ret    
c0018479:	90                   	nop

c001847a <noCopro(unsigned long)>:
c001847a:	c3                   	ret    
c001847b:	90                   	nop

c001847c <CPU::close(int, int, void*)>:
c001847c:	31 c0                	xor    eax,eax
c001847e:	c3                   	ret    

c001847f <x86ReadCMOS(unsigned char)>:
c001847f:	83 ec 14             	sub    esp,0x14
c0018482:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018486:	88 04 24             	mov    BYTE PTR [esp],al
c0018489:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c001848e:	0f b6 c0             	movzx  eax,al
c0018491:	85 c0                	test   eax,eax
c0018493:	74 04                	je     c0018499 <x86ReadCMOS(unsigned char)+0x1a>
c0018495:	b2 00                	mov    dl,0x0
c0018497:	eb 02                	jmp    c001849b <x86ReadCMOS(unsigned char)+0x1c>
c0018499:	b2 80                	mov    dl,0x80
c001849b:	8a 04 24             	mov    al,BYTE PTR [esp]
c001849e:	09 d0                	or     eax,edx
c00184a0:	0f b6 c0             	movzx  eax,al
c00184a3:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c00184aa:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00184ae:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00184b2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00184b7:	ee                   	out    dx,al
c00184b8:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c00184bf:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00184c4:	89 c2                	mov    edx,eax
c00184c6:	ec                   	in     al,dx
c00184c7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00184cb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00184cf:	83 c4 14             	add    esp,0x14
c00184d2:	c3                   	ret    

c00184d3 <x86WriteCMOS(unsigned char, unsigned char)>:
c00184d3:	83 ec 18             	sub    esp,0x18
c00184d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184da:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184de:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00184e2:	88 d0                	mov    al,dl
c00184e4:	88 04 24             	mov    BYTE PTR [esp],al
c00184e7:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c00184ec:	0f b6 c0             	movzx  eax,al
c00184ef:	85 c0                	test   eax,eax
c00184f1:	74 04                	je     c00184f7 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c00184f3:	b2 00                	mov    dl,0x0
c00184f5:	eb 02                	jmp    c00184f9 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c00184f7:	b2 80                	mov    dl,0x80
c00184f9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00184fd:	09 d0                	or     eax,edx
c00184ff:	0f b6 c0             	movzx  eax,al
c0018502:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018509:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001850d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018511:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018516:	ee                   	out    dx,al
c0018517:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001851b:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018522:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018526:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001852a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001852f:	ee                   	out    dx,al
c0018530:	90                   	nop
c0018531:	83 c4 18             	add    esp,0x18
c0018534:	c3                   	ret    

c0018535 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018535:	60                   	pusha  
c0018536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001853a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001853e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018542:	9c                   	pushf  
c0018543:	fa                   	cli    
c0018544:	0f 09                	wbinvd 
c0018546:	0f 30                	wrmsr  
c0018548:	9d                   	popf   
c0018549:	89 c2                	mov    edx,eax
c001854b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001854f:	89 10                	mov    DWORD PTR [eax],edx
c0018551:	61                   	popa   
c0018552:	90                   	nop
c0018553:	c3                   	ret    

c0018554 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018554:	60                   	pusha  
c0018555:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018559:	89 c1                	mov    ecx,eax
c001855b:	9c                   	pushf  
c001855c:	fa                   	cli    
c001855d:	0f 09                	wbinvd 
c001855f:	31 c0                	xor    eax,eax
c0018561:	31 d2                	xor    edx,edx
c0018563:	0f 32                	rdmsr  
c0018565:	9d                   	popf   
c0018566:	89 c2                	mov    edx,eax
c0018568:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001856c:	89 10                	mov    DWORD PTR [eax],edx
c001856e:	61                   	popa   
c001856f:	90                   	nop
c0018570:	c3                   	ret    

c0018571 <AMD_K6_writeback(int, int, int)>:
c0018571:	83 ec 20             	sub    esp,0x20
c0018574:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0018579:	c1 e8 14             	shr    eax,0x14
c001857c:	c1 e8 02             	shr    eax,0x2
c001857f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018583:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0018588:	0f 85 9e 00 00 00    	jne    c001862c <AMD_K6_writeback(int, int, int)+0xbb>
c001858e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018592:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018596:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c001859b:	75 19                	jne    c00185b6 <AMD_K6_writeback(int, int, int)+0x45>
c001859d:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c00185a2:	7f 0a                	jg     c00185ae <AMD_K6_writeback(int, int, int)+0x3d>
c00185a4:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c00185ac:	eb 08                	jmp    c00185b6 <AMD_K6_writeback(int, int, int)+0x45>
c00185ae:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c00185b6:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c00185bb:	7c 6e                	jl     c001862b <AMD_K6_writeback(int, int, int)+0xba>
c00185bd:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c00185c2:	7e 09                	jle    c00185cd <AMD_K6_writeback(int, int, int)+0x5c>
c00185c4:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c00185c9:	74 36                	je     c0018601 <AMD_K6_writeback(int, int, int)+0x90>
c00185cb:	eb 5e                	jmp    c001862b <AMD_K6_writeback(int, int, int)+0xba>
c00185cd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00185d1:	50                   	push   eax
c00185d2:	68 82 00 00 c0       	push   0xc0000082
c00185d7:	e8 78 ff ff ff       	call   c0018554 <AMD_K6_read_msr(unsigned int, REGS*)>
c00185dc:	83 c4 08             	add    esp,0x8
c00185df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185e3:	d1 e0                	shl    eax,1
c00185e5:	83 e0 7f             	and    eax,0x7f
c00185e8:	89 c2                	mov    edx,eax
c00185ea:	8d 44 24 08          	lea    eax,[esp+0x8]
c00185ee:	50                   	push   eax
c00185ef:	6a 00                	push   0x0
c00185f1:	52                   	push   edx
c00185f2:	68 82 00 00 c0       	push   0xc0000082
c00185f7:	e8 39 ff ff ff       	call   c0018535 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00185fc:	83 c4 10             	add    esp,0x10
c00185ff:	eb 2b                	jmp    c001862c <AMD_K6_writeback(int, int, int)+0xbb>
c0018601:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018605:	50                   	push   eax
c0018606:	68 82 00 00 c0       	push   0xc0000082
c001860b:	e8 44 ff ff ff       	call   c0018554 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018610:	83 c4 08             	add    esp,0x8
c0018613:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018617:	50                   	push   eax
c0018618:	6a 00                	push   0x0
c001861a:	6a 00                	push   0x0
c001861c:	68 82 00 00 c0       	push   0xc0000082
c0018621:	e8 0f ff ff ff       	call   c0018535 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018626:	83 c4 10             	add    esp,0x10
c0018629:	eb 01                	jmp    c001862c <AMD_K6_writeback(int, int, int)+0xbb>
c001862b:	90                   	nop
c001862c:	90                   	nop
c001862d:	83 c4 20             	add    esp,0x20
c0018630:	c3                   	ret    

c0018631 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018631:	56                   	push   esi
c0018632:	53                   	push   ebx
c0018633:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0018638:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001863c:	75 32                	jne    c0018670 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001863e:	8b 15 e0 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae0
c0018644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018648:	89 10                	mov    DWORD PTR [eax],edx
c001864a:	8b 15 dc ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eadc
c0018650:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018654:	89 10                	mov    DWORD PTR [eax],edx
c0018656:	8b 15 d8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead8
c001865c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018660:	89 10                	mov    DWORD PTR [eax],edx
c0018662:	8b 15 d4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead4
c0018668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001866c:	89 10                	mov    DWORD PTR [eax],edx
c001866e:	eb 5c                	jmp    c00186cc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018674:	ba 00 00 00 00       	mov    edx,0x0
c0018679:	89 d1                	mov    ecx,edx
c001867b:	0f a2                	cpuid  
c001867d:	89 c6                	mov    esi,eax
c001867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018683:	89 30                	mov    DWORD PTR [eax],esi
c0018685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018689:	89 18                	mov    DWORD PTR [eax],ebx
c001868b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001868f:	89 08                	mov    DWORD PTR [eax],ecx
c0018691:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018695:	89 10                	mov    DWORD PTR [eax],edx
c0018697:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001869b:	a3 a0 69 02 c0       	mov    ds:0xc00269a0,eax
c00186a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00186a6:	a3 e0 ea 02 c0       	mov    ds:0xc002eae0,eax
c00186ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186af:	8b 00                	mov    eax,DWORD PTR [eax]
c00186b1:	a3 dc ea 02 c0       	mov    ds:0xc002eadc,eax
c00186b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00186ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00186bc:	a3 d8 ea 02 c0       	mov    ds:0xc002ead8,eax
c00186c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00186c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00186c7:	a3 d4 ea 02 c0       	mov    ds:0xc002ead4,eax
c00186cc:	5b                   	pop    ebx
c00186cd:	5e                   	pop    esi
c00186ce:	c3                   	ret    

c00186cf <cpuidCheckEDX(unsigned int)>:
c00186cf:	83 ec 10             	sub    esp,0x10
c00186d2:	89 e0                	mov    eax,esp
c00186d4:	50                   	push   eax
c00186d5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186d9:	50                   	push   eax
c00186da:	8d 44 24 10          	lea    eax,[esp+0x10]
c00186de:	50                   	push   eax
c00186df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00186e3:	50                   	push   eax
c00186e4:	6a 01                	push   0x1
c00186e6:	e8 46 ff ff ff       	call   c0018631 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00186eb:	83 c4 14             	add    esp,0x14
c00186ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00186f1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00186f5:	0f 95 c0             	setne  al
c00186f8:	83 c4 10             	add    esp,0x10
c00186fb:	c3                   	ret    

c00186fc <cpuidCheckECX(unsigned int)>:
c00186fc:	83 ec 10             	sub    esp,0x10
c00186ff:	89 e0                	mov    eax,esp
c0018701:	50                   	push   eax
c0018702:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018706:	50                   	push   eax
c0018707:	8d 44 24 10          	lea    eax,[esp+0x10]
c001870b:	50                   	push   eax
c001870c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018710:	50                   	push   eax
c0018711:	6a 01                	push   0x1
c0018713:	e8 19 ff ff ff       	call   c0018631 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018718:	83 c4 14             	add    esp,0x14
c001871b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001871f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018723:	0f 95 c0             	setne  al
c0018726:	83 c4 10             	add    esp,0x10
c0018729:	c3                   	ret    

c001872a <cpuidCheckExtendedEBX(unsigned int)>:
c001872a:	83 ec 10             	sub    esp,0x10
c001872d:	89 e0                	mov    eax,esp
c001872f:	50                   	push   eax
c0018730:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018734:	50                   	push   eax
c0018735:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018739:	50                   	push   eax
c001873a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001873e:	50                   	push   eax
c001873f:	6a 07                	push   0x7
c0018741:	e8 eb fe ff ff       	call   c0018631 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018746:	83 c4 14             	add    esp,0x14
c0018749:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001874d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018751:	0f 95 c0             	setne  al
c0018754:	83 c4 10             	add    esp,0x10
c0018757:	c3                   	ret    

c0018758 <cpuidCheckExtendedECX(unsigned int)>:
c0018758:	83 ec 10             	sub    esp,0x10
c001875b:	89 e0                	mov    eax,esp
c001875d:	50                   	push   eax
c001875e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018762:	50                   	push   eax
c0018763:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018767:	50                   	push   eax
c0018768:	8d 44 24 18          	lea    eax,[esp+0x18]
c001876c:	50                   	push   eax
c001876d:	6a 07                	push   0x7
c001876f:	e8 bd fe ff ff       	call   c0018631 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018774:	83 c4 14             	add    esp,0x14
c0018777:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001877b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001877f:	0f 95 c0             	setne  al
c0018782:	83 c4 10             	add    esp,0x10
c0018785:	c3                   	ret    

c0018786 <HalDetectFeatures()>:
c0018786:	57                   	push   edi
c0018787:	56                   	push   esi
c0018788:	53                   	push   ebx
c0018789:	81 ec 90 00 00 00    	sub    esp,0x90
c001878f:	83 ec 04             	sub    esp,0x4
c0018792:	6a 08                	push   0x8
c0018794:	6a 00                	push   0x0
c0018796:	68 0c eb 02 c0       	push   0xc002eb0c
c001879b:	e8 50 7d fe ff       	call   c00004f0 <memset>
c00187a0:	83 c4 10             	add    esp,0x10
c00187a3:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00187a8:	83 c8 04             	or     eax,0x4
c00187ab:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00187b0:	e8 44 7a fe ff       	call   c00001f9 <detectCPUID>
c00187b5:	85 c0                	test   eax,eax
c00187b7:	0f 95 c0             	setne  al
c00187ba:	83 e0 01             	and    eax,0x1
c00187bd:	83 e0 01             	and    eax,0x1
c00187c0:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00187c3:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00187c8:	83 e0 fd             	and    eax,0xfffffffd
c00187cb:	88 c2                	mov    dl,al
c00187cd:	88 c8                	mov    al,cl
c00187cf:	09 d0                	or     eax,edx
c00187d1:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00187d6:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00187db:	83 e0 02             	and    eax,0x2
c00187de:	0f b6 c0             	movzx  eax,al
c00187e1:	85 c0                	test   eax,eax
c00187e3:	0f 84 7f 02 00 00    	je     c0018a68 <HalDetectFeatures()+0x2e2>
c00187e9:	83 ec 0c             	sub    esp,0xc
c00187ec:	6a 20                	push   0x20
c00187ee:	e8 dc fe ff ff       	call   c00186cf <cpuidCheckEDX(unsigned int)>
c00187f3:	83 c4 10             	add    esp,0x10
c00187f6:	83 e0 01             	and    eax,0x1
c00187f9:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018800:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018805:	83 e0 f7             	and    eax,0xfffffff7
c0018808:	88 c2                	mov    dl,al
c001880a:	88 c8                	mov    al,cl
c001880c:	09 d0                	or     eax,edx
c001880e:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018813:	83 ec 0c             	sub    esp,0xc
c0018816:	68 00 00 00 04       	push   0x4000000
c001881b:	e8 af fe ff ff       	call   c00186cf <cpuidCheckEDX(unsigned int)>
c0018820:	83 c4 10             	add    esp,0x10
c0018823:	89 c1                	mov    ecx,eax
c0018825:	83 e1 01             	and    ecx,0x1
c0018828:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c001882d:	83 e0 fe             	and    eax,0xfffffffe
c0018830:	88 c2                	mov    dl,al
c0018832:	88 c8                	mov    al,cl
c0018834:	09 d0                	or     eax,edx
c0018836:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c001883b:	83 ec 0c             	sub    esp,0xc
c001883e:	68 80 00 00 00       	push   0x80
c0018843:	e8 87 fe ff ff       	call   c00186cf <cpuidCheckEDX(unsigned int)>
c0018848:	83 c4 10             	add    esp,0x10
c001884b:	89 c1                	mov    ecx,eax
c001884d:	c1 e1 07             	shl    ecx,0x7
c0018850:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018855:	83 e0 7f             	and    eax,0x7f
c0018858:	88 c2                	mov    dl,al
c001885a:	88 c8                	mov    al,cl
c001885c:	09 d0                	or     eax,edx
c001885e:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018863:	83 ec 0c             	sub    esp,0xc
c0018866:	68 00 00 80 00       	push   0x800000
c001886b:	e8 5f fe ff ff       	call   c00186cf <cpuidCheckEDX(unsigned int)>
c0018870:	83 c4 10             	add    esp,0x10
c0018873:	83 e0 01             	and    eax,0x1
c0018876:	89 c1                	mov    ecx,eax
c0018878:	c1 e1 05             	shl    ecx,0x5
c001887b:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018880:	83 e0 df             	and    eax,0xffffffdf
c0018883:	88 c2                	mov    dl,al
c0018885:	88 c8                	mov    al,cl
c0018887:	09 d0                	or     eax,edx
c0018889:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001888e:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018893:	83 e0 01             	and    eax,0x1
c0018896:	75 0c                	jne    c00188a4 <HalDetectFeatures()+0x11e>
c0018898:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c001889d:	25 00 04 00 00       	and    eax,0x400
c00188a2:	74 0f                	je     c00188b3 <HalDetectFeatures()+0x12d>
c00188a4:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00188a9:	83 e0 fe             	and    eax,0xfffffffe
c00188ac:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00188b1:	eb 28                	jmp    c00188db <HalDetectFeatures()+0x155>
c00188b3:	83 ec 0c             	sub    esp,0xc
c00188b6:	68 00 02 00 00       	push   0x200
c00188bb:	e8 0f fe ff ff       	call   c00186cf <cpuidCheckEDX(unsigned int)>
c00188c0:	83 c4 10             	add    esp,0x10
c00188c3:	89 c1                	mov    ecx,eax
c00188c5:	83 e1 01             	and    ecx,0x1
c00188c8:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00188cd:	83 e0 fe             	and    eax,0xfffffffe
c00188d0:	88 c2                	mov    dl,al
c00188d2:	88 c8                	mov    al,cl
c00188d4:	09 d0                	or     eax,edx
c00188d6:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00188db:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00188e0:	83 e0 01             	and    eax,0x1
c00188e3:	0f b6 c0             	movzx  eax,al
c00188e6:	85 c0                	test   eax,eax
c00188e8:	74 1c                	je     c0018906 <HalDetectFeatures()+0x180>
c00188ea:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00188ef:	83 e0 08             	and    eax,0x8
c00188f2:	0f b6 c0             	movzx  eax,al
c00188f5:	85 c0                	test   eax,eax
c00188f7:	75 0d                	jne    c0018906 <HalDetectFeatures()+0x180>
c00188f9:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00188fe:	83 e0 fe             	and    eax,0xfffffffe
c0018901:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018906:	83 ec 0c             	sub    esp,0xc
c0018909:	68 64 50 02 c0       	push   0xc0025064
c001890e:	e8 3b e6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018913:	83 c4 10             	add    esp,0x10
c0018916:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001891b:	83 e0 fe             	and    eax,0xfffffffe
c001891e:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018923:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c001892b:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0018933:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c001893b:	85 c0                	test   eax,eax
c001893d:	0f 84 ab 00 00 00    	je     c00189ee <HalDetectFeatures()+0x268>
c0018943:	83 ec 0c             	sub    esp,0xc
c0018946:	6a 01                	push   0x1
c0018948:	e8 af fd ff ff       	call   c00186fc <cpuidCheckECX(unsigned int)>
c001894d:	83 c4 10             	add    esp,0x10
c0018950:	83 e0 01             	and    eax,0x1
c0018953:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018956:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c001895b:	83 e0 fd             	and    eax,0xfffffffd
c001895e:	88 c2                	mov    dl,al
c0018960:	88 c8                	mov    al,cl
c0018962:	09 d0                	or     eax,edx
c0018964:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018969:	83 ec 0c             	sub    esp,0xc
c001896c:	68 00 02 00 00       	push   0x200
c0018971:	e8 86 fd ff ff       	call   c00186fc <cpuidCheckECX(unsigned int)>
c0018976:	83 c4 10             	add    esp,0x10
c0018979:	83 e0 01             	and    eax,0x1
c001897c:	89 c1                	mov    ecx,eax
c001897e:	c1 e1 04             	shl    ecx,0x4
c0018981:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018986:	83 e0 ef             	and    eax,0xffffffef
c0018989:	88 c2                	mov    dl,al
c001898b:	88 c8                	mov    al,cl
c001898d:	09 d0                	or     eax,edx
c001898f:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018994:	83 ec 0c             	sub    esp,0xc
c0018997:	68 00 00 08 00       	push   0x80000
c001899c:	e8 5b fd ff ff       	call   c00186fc <cpuidCheckECX(unsigned int)>
c00189a1:	83 c4 10             	add    esp,0x10
c00189a4:	83 e0 01             	and    eax,0x1
c00189a7:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00189ae:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00189b3:	83 e0 fb             	and    eax,0xfffffffb
c00189b6:	88 c2                	mov    dl,al
c00189b8:	88 c8                	mov    al,cl
c00189ba:	09 d0                	or     eax,edx
c00189bc:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00189c1:	83 ec 0c             	sub    esp,0xc
c00189c4:	68 00 00 10 00       	push   0x100000
c00189c9:	e8 2e fd ff ff       	call   c00186fc <cpuidCheckECX(unsigned int)>
c00189ce:	83 c4 10             	add    esp,0x10
c00189d1:	83 e0 01             	and    eax,0x1
c00189d4:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00189db:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00189e0:	83 e0 f7             	and    eax,0xfffffff7
c00189e3:	88 c2                	mov    dl,al
c00189e5:	88 c8                	mov    al,cl
c00189e7:	09 d0                	or     eax,edx
c00189e9:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00189ee:	83 ec 0c             	sub    esp,0xc
c00189f1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00189f5:	50                   	push   eax
c00189f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00189fa:	50                   	push   eax
c00189fb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00189ff:	50                   	push   eax
c0018a00:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018a04:	50                   	push   eax
c0018a05:	68 00 00 00 80       	push   0x80000000
c0018a0a:	e8 22 fc ff ff       	call   c0018631 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a0f:	83 c4 20             	add    esp,0x20
c0018a12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a16:	3d 00 00 00 80       	cmp    eax,0x80000000
c0018a1b:	76 4b                	jbe    c0018a68 <HalDetectFeatures()+0x2e2>
c0018a1d:	83 ec 0c             	sub    esp,0xc
c0018a20:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018a24:	50                   	push   eax
c0018a25:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018a29:	50                   	push   eax
c0018a2a:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018a2e:	50                   	push   eax
c0018a2f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018a33:	50                   	push   eax
c0018a34:	68 01 00 00 80       	push   0x80000001
c0018a39:	e8 f3 fb ff ff       	call   c0018631 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a3e:	83 c4 20             	add    esp,0x20
c0018a41:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a46:	83 e0 bf             	and    eax,0xffffffbf
c0018a49:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018a4e:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018a53:	83 e0 fd             	and    eax,0xfffffffd
c0018a56:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018a5b:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018a60:	83 e0 fe             	and    eax,0xfffffffe
c0018a63:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018a68:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018a6d:	25 00 04 00 00       	and    eax,0x400
c0018a72:	74 0d                	je     c0018a81 <HalDetectFeatures()+0x2fb>
c0018a74:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a79:	83 e0 fb             	and    eax,0xfffffffb
c0018a7c:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018a81:	c6 05 08 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb08,0x1
c0018a88:	83 ec 04             	sub    esp,0x4
c0018a8b:	6a 0d                	push   0xd
c0018a8d:	6a 00                	push   0x0
c0018a8f:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018a94:	e8 57 7a fe ff       	call   c00004f0 <memset>
c0018a99:	83 c4 10             	add    esp,0x10
c0018a9c:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018aa1:	83 e0 02             	and    eax,0x2
c0018aa4:	0f b6 c0             	movzx  eax,al
c0018aa7:	85 c0                	test   eax,eax
c0018aa9:	0f 84 16 08 00 00    	je     c00192c5 <HalDetectFeatures()+0xb3f>
c0018aaf:	83 ec 0c             	sub    esp,0xc
c0018ab2:	6a 10                	push   0x10
c0018ab4:	e8 16 fc ff ff       	call   c00186cf <cpuidCheckEDX(unsigned int)>
c0018ab9:	83 c4 10             	add    esp,0x10
c0018abc:	83 e0 01             	and    eax,0x1
c0018abf:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018ac6:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018acb:	83 e0 f7             	and    eax,0xfffffff7
c0018ace:	88 c2                	mov    dl,al
c0018ad0:	88 c8                	mov    al,cl
c0018ad2:	09 d0                	or     eax,edx
c0018ad4:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018ad9:	83 ec 0c             	sub    esp,0xc
c0018adc:	6a 40                	push   0x40
c0018ade:	e8 ec fb ff ff       	call   c00186cf <cpuidCheckEDX(unsigned int)>
c0018ae3:	83 c4 10             	add    esp,0x10
c0018ae6:	83 e0 01             	and    eax,0x1
c0018ae9:	89 c1                	mov    ecx,eax
c0018aeb:	c1 e1 04             	shl    ecx,0x4
c0018aee:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018af3:	83 e0 ef             	and    eax,0xffffffef
c0018af6:	88 c2                	mov    dl,al
c0018af8:	88 c8                	mov    al,cl
c0018afa:	09 d0                	or     eax,edx
c0018afc:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018b01:	83 ec 0c             	sub    esp,0xc
c0018b04:	6a 08                	push   0x8
c0018b06:	e8 c4 fb ff ff       	call   c00186cf <cpuidCheckEDX(unsigned int)>
c0018b0b:	83 c4 10             	add    esp,0x10
c0018b0e:	83 e0 01             	and    eax,0x1
c0018b11:	89 c1                	mov    ecx,eax
c0018b13:	c1 e1 05             	shl    ecx,0x5
c0018b16:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018b1b:	83 e0 df             	and    eax,0xffffffdf
c0018b1e:	88 c2                	mov    dl,al
c0018b20:	88 c8                	mov    al,cl
c0018b22:	09 d0                	or     eax,edx
c0018b24:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018b29:	83 ec 0c             	sub    esp,0xc
c0018b2c:	68 00 20 00 00       	push   0x2000
c0018b31:	e8 99 fb ff ff       	call   c00186cf <cpuidCheckEDX(unsigned int)>
c0018b36:	83 c4 10             	add    esp,0x10
c0018b39:	83 e0 01             	and    eax,0x1
c0018b3c:	89 c1                	mov    ecx,eax
c0018b3e:	c1 e1 06             	shl    ecx,0x6
c0018b41:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018b46:	83 e0 bf             	and    eax,0xffffffbf
c0018b49:	88 c2                	mov    dl,al
c0018b4b:	88 c8                	mov    al,cl
c0018b4d:	09 d0                	or     eax,edx
c0018b4f:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018b54:	83 ec 0c             	sub    esp,0xc
c0018b57:	68 00 00 01 00       	push   0x10000
c0018b5c:	e8 6e fb ff ff       	call   c00186cf <cpuidCheckEDX(unsigned int)>
c0018b61:	83 c4 10             	add    esp,0x10
c0018b64:	89 c1                	mov    ecx,eax
c0018b66:	c1 e1 07             	shl    ecx,0x7
c0018b69:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018b6e:	83 e0 7f             	and    eax,0x7f
c0018b71:	88 c2                	mov    dl,al
c0018b73:	88 c8                	mov    al,cl
c0018b75:	09 d0                	or     eax,edx
c0018b77:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018b7c:	83 ec 0c             	sub    esp,0xc
c0018b7f:	6a 01                	push   0x1
c0018b81:	e8 49 fb ff ff       	call   c00186cf <cpuidCheckEDX(unsigned int)>
c0018b86:	83 c4 10             	add    esp,0x10
c0018b89:	83 e0 01             	and    eax,0x1
c0018b8c:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018b93:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018b98:	83 e0 f7             	and    eax,0xfffffff7
c0018b9b:	88 c2                	mov    dl,al
c0018b9d:	88 c8                	mov    al,cl
c0018b9f:	09 d0                	or     eax,edx
c0018ba1:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018ba6:	83 ec 0c             	sub    esp,0xc
c0018ba9:	68 00 08 00 00       	push   0x800
c0018bae:	e8 1c fb ff ff       	call   c00186cf <cpuidCheckEDX(unsigned int)>
c0018bb3:	83 c4 10             	add    esp,0x10
c0018bb6:	89 c1                	mov    ecx,eax
c0018bb8:	83 e1 01             	and    ecx,0x1
c0018bbb:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018bc0:	83 e0 fe             	and    eax,0xfffffffe
c0018bc3:	88 c2                	mov    dl,al
c0018bc5:	88 c8                	mov    al,cl
c0018bc7:	09 d0                	or     eax,edx
c0018bc9:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018bce:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018bd3:	83 e0 40             	and    eax,0x40
c0018bd6:	0f b6 c0             	movzx  eax,al
c0018bd9:	85 c0                	test   eax,eax
c0018bdb:	74 0a                	je     c0018be7 <HalDetectFeatures()+0x461>
c0018bdd:	c7 05 e8 ea 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002eae8,0x100
c0018be7:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018bec:	83 e0 80             	and    eax,0xffffff80
c0018bef:	0f b6 c0             	movzx  eax,al
c0018bf2:	85 c0                	test   eax,eax
c0018bf4:	74 0a                	je     c0018c00 <HalDetectFeatures()+0x47a>
c0018bf6:	c7 05 e4 ea 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002eae4,0x80
c0018c00:	83 ec 0c             	sub    esp,0xc
c0018c03:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018c07:	50                   	push   eax
c0018c08:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018c0c:	50                   	push   eax
c0018c0d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018c11:	50                   	push   eax
c0018c12:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018c16:	50                   	push   eax
c0018c17:	6a 00                	push   0x0
c0018c19:	e8 13 fa ff ff       	call   c0018631 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c1e:	83 c4 20             	add    esp,0x20
c0018c21:	c7 44 24 48 f0 ea 02 c0 	mov    DWORD PTR [esp+0x48],0xc002eaf0
c0018c29:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018c2d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018c31:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0018c39:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018c3d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018c41:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0018c45:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018c49:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018c4d:	89 c6                	mov    esi,eax
c0018c4f:	89 d7                	mov    edi,edx
c0018c51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c53:	89 c8                	mov    eax,ecx
c0018c55:	89 fa                	mov    edx,edi
c0018c57:	89 f3                	mov    ebx,esi
c0018c59:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0018c5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018c61:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018c65:	b8 f4 ea 02 c0       	mov    eax,0xc002eaf4
c0018c6a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0018c6e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c72:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0018c76:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0018c7e:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0018c82:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0018c86:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0018c8a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0018c8e:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0018c92:	89 c6                	mov    esi,eax
c0018c94:	89 d7                	mov    edi,edx
c0018c96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c98:	89 c8                	mov    eax,ecx
c0018c9a:	89 fa                	mov    edx,edi
c0018c9c:	89 f3                	mov    ebx,esi
c0018c9e:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0018ca2:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0018ca6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018caa:	b8 f8 ea 02 c0       	mov    eax,0xc002eaf8
c0018caf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0018cb6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cba:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0018cbe:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0018cc6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018ccd:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0018cd1:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0018cd5:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0018cdc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0018ce0:	89 c6                	mov    esi,eax
c0018ce2:	89 d7                	mov    edi,edx
c0018ce4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ce6:	89 c8                	mov    eax,ecx
c0018ce8:	89 fa                	mov    edx,edi
c0018cea:	89 f3                	mov    ebx,esi
c0018cec:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0018cf0:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0018cf4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0018cf8:	83 ec 08             	sub    esp,0x8
c0018cfb:	68 76 50 02 c0       	push   0xc0025076
c0018d00:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018d05:	e8 76 7a fe ff       	call   c0000780 <strcmp>
c0018d0a:	83 c4 10             	add    esp,0x10
c0018d0d:	85 c0                	test   eax,eax
c0018d0f:	74 19                	je     c0018d2a <HalDetectFeatures()+0x5a4>
c0018d11:	83 ec 08             	sub    esp,0x8
c0018d14:	68 83 50 02 c0       	push   0xc0025083
c0018d19:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018d1e:	e8 5d 7a fe ff       	call   c0000780 <strcmp>
c0018d23:	83 c4 10             	add    esp,0x10
c0018d26:	85 c0                	test   eax,eax
c0018d28:	75 04                	jne    c0018d2e <HalDetectFeatures()+0x5a8>
c0018d2a:	b0 01                	mov    al,0x1
c0018d2c:	eb 02                	jmp    c0018d30 <HalDetectFeatures()+0x5aa>
c0018d2e:	b0 00                	mov    al,0x0
c0018d30:	0f b6 c0             	movzx  eax,al
c0018d33:	85 c0                	test   eax,eax
c0018d35:	74 0f                	je     c0018d46 <HalDetectFeatures()+0x5c0>
c0018d37:	c7 05 04 eb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x2
c0018d41:	e9 0d 03 00 00       	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018d46:	83 ec 08             	sub    esp,0x8
c0018d49:	68 90 50 02 c0       	push   0xc0025090
c0018d4e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018d53:	e8 28 7a fe ff       	call   c0000780 <strcmp>
c0018d58:	83 c4 10             	add    esp,0x10
c0018d5b:	85 c0                	test   eax,eax
c0018d5d:	74 19                	je     c0018d78 <HalDetectFeatures()+0x5f2>
c0018d5f:	83 ec 08             	sub    esp,0x8
c0018d62:	68 9d 50 02 c0       	push   0xc002509d
c0018d67:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018d6c:	e8 0f 7a fe ff       	call   c0000780 <strcmp>
c0018d71:	83 c4 10             	add    esp,0x10
c0018d74:	85 c0                	test   eax,eax
c0018d76:	75 04                	jne    c0018d7c <HalDetectFeatures()+0x5f6>
c0018d78:	b0 01                	mov    al,0x1
c0018d7a:	eb 02                	jmp    c0018d7e <HalDetectFeatures()+0x5f8>
c0018d7c:	b0 00                	mov    al,0x0
c0018d7e:	0f b6 c0             	movzx  eax,al
c0018d81:	85 c0                	test   eax,eax
c0018d83:	74 0f                	je     c0018d94 <HalDetectFeatures()+0x60e>
c0018d85:	c7 05 04 eb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x4
c0018d8f:	e9 bf 02 00 00       	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018d94:	83 ec 08             	sub    esp,0x8
c0018d97:	68 aa 50 02 c0       	push   0xc00250aa
c0018d9c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018da1:	e8 da 79 fe ff       	call   c0000780 <strcmp>
c0018da6:	83 c4 10             	add    esp,0x10
c0018da9:	85 c0                	test   eax,eax
c0018dab:	74 19                	je     c0018dc6 <HalDetectFeatures()+0x640>
c0018dad:	83 ec 08             	sub    esp,0x8
c0018db0:	68 b7 50 02 c0       	push   0xc00250b7
c0018db5:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018dba:	e8 c1 79 fe ff       	call   c0000780 <strcmp>
c0018dbf:	83 c4 10             	add    esp,0x10
c0018dc2:	85 c0                	test   eax,eax
c0018dc4:	75 04                	jne    c0018dca <HalDetectFeatures()+0x644>
c0018dc6:	b0 01                	mov    al,0x1
c0018dc8:	eb 02                	jmp    c0018dcc <HalDetectFeatures()+0x646>
c0018dca:	b0 00                	mov    al,0x0
c0018dcc:	0f b6 c0             	movzx  eax,al
c0018dcf:	85 c0                	test   eax,eax
c0018dd1:	74 0f                	je     c0018de2 <HalDetectFeatures()+0x65c>
c0018dd3:	c7 05 04 eb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x5
c0018ddd:	e9 71 02 00 00       	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018de2:	83 ec 08             	sub    esp,0x8
c0018de5:	68 c4 50 02 c0       	push   0xc00250c4
c0018dea:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018def:	e8 8c 79 fe ff       	call   c0000780 <strcmp>
c0018df4:	83 c4 10             	add    esp,0x10
c0018df7:	85 c0                	test   eax,eax
c0018df9:	0f 94 c0             	sete   al
c0018dfc:	0f b6 c0             	movzx  eax,al
c0018dff:	85 c0                	test   eax,eax
c0018e01:	74 0f                	je     c0018e12 <HalDetectFeatures()+0x68c>
c0018e03:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c0018e0d:	e9 41 02 00 00       	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018e12:	83 ec 08             	sub    esp,0x8
c0018e15:	68 d1 50 02 c0       	push   0xc00250d1
c0018e1a:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018e1f:	e8 5c 79 fe ff       	call   c0000780 <strcmp>
c0018e24:	83 c4 10             	add    esp,0x10
c0018e27:	85 c0                	test   eax,eax
c0018e29:	0f 94 c0             	sete   al
c0018e2c:	0f b6 c0             	movzx  eax,al
c0018e2f:	85 c0                	test   eax,eax
c0018e31:	74 0f                	je     c0018e42 <HalDetectFeatures()+0x6bc>
c0018e33:	c7 05 04 eb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x3
c0018e3d:	e9 11 02 00 00       	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018e42:	83 ec 08             	sub    esp,0x8
c0018e45:	68 90 50 02 c0       	push   0xc0025090
c0018e4a:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018e4f:	e8 2c 79 fe ff       	call   c0000780 <strcmp>
c0018e54:	83 c4 10             	add    esp,0x10
c0018e57:	85 c0                	test   eax,eax
c0018e59:	0f 94 c0             	sete   al
c0018e5c:	0f b6 c0             	movzx  eax,al
c0018e5f:	85 c0                	test   eax,eax
c0018e61:	74 0f                	je     c0018e72 <HalDetectFeatures()+0x6ec>
c0018e63:	c7 05 04 eb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x6
c0018e6d:	e9 e1 01 00 00       	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018e72:	83 ec 08             	sub    esp,0x8
c0018e75:	68 de 50 02 c0       	push   0xc00250de
c0018e7a:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018e7f:	e8 fc 78 fe ff       	call   c0000780 <strcmp>
c0018e84:	83 c4 10             	add    esp,0x10
c0018e87:	85 c0                	test   eax,eax
c0018e89:	0f 94 c0             	sete   al
c0018e8c:	0f b6 c0             	movzx  eax,al
c0018e8f:	85 c0                	test   eax,eax
c0018e91:	74 0f                	je     c0018ea2 <HalDetectFeatures()+0x71c>
c0018e93:	c7 05 04 eb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x7
c0018e9d:	e9 b1 01 00 00       	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018ea2:	83 ec 08             	sub    esp,0x8
c0018ea5:	68 eb 50 02 c0       	push   0xc00250eb
c0018eaa:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018eaf:	e8 cc 78 fe ff       	call   c0000780 <strcmp>
c0018eb4:	83 c4 10             	add    esp,0x10
c0018eb7:	85 c0                	test   eax,eax
c0018eb9:	0f 94 c0             	sete   al
c0018ebc:	0f b6 c0             	movzx  eax,al
c0018ebf:	85 c0                	test   eax,eax
c0018ec1:	74 0f                	je     c0018ed2 <HalDetectFeatures()+0x74c>
c0018ec3:	c7 05 04 eb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x8
c0018ecd:	e9 81 01 00 00       	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018ed2:	83 ec 08             	sub    esp,0x8
c0018ed5:	68 f8 50 02 c0       	push   0xc00250f8
c0018eda:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018edf:	e8 9c 78 fe ff       	call   c0000780 <strcmp>
c0018ee4:	83 c4 10             	add    esp,0x10
c0018ee7:	85 c0                	test   eax,eax
c0018ee9:	0f 94 c0             	sete   al
c0018eec:	0f b6 c0             	movzx  eax,al
c0018eef:	85 c0                	test   eax,eax
c0018ef1:	74 0f                	je     c0018f02 <HalDetectFeatures()+0x77c>
c0018ef3:	c7 05 04 eb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x9
c0018efd:	e9 51 01 00 00       	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018f02:	83 ec 08             	sub    esp,0x8
c0018f05:	68 05 51 02 c0       	push   0xc0025105
c0018f0a:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f0f:	e8 6c 78 fe ff       	call   c0000780 <strcmp>
c0018f14:	83 c4 10             	add    esp,0x10
c0018f17:	85 c0                	test   eax,eax
c0018f19:	0f 94 c0             	sete   al
c0018f1c:	0f b6 c0             	movzx  eax,al
c0018f1f:	85 c0                	test   eax,eax
c0018f21:	74 0f                	je     c0018f32 <HalDetectFeatures()+0x7ac>
c0018f23:	c7 05 04 eb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xa
c0018f2d:	e9 21 01 00 00       	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018f32:	83 ec 08             	sub    esp,0x8
c0018f35:	68 12 51 02 c0       	push   0xc0025112
c0018f3a:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f3f:	e8 3c 78 fe ff       	call   c0000780 <strcmp>
c0018f44:	83 c4 10             	add    esp,0x10
c0018f47:	85 c0                	test   eax,eax
c0018f49:	0f 94 c0             	sete   al
c0018f4c:	0f b6 c0             	movzx  eax,al
c0018f4f:	85 c0                	test   eax,eax
c0018f51:	74 0f                	je     c0018f62 <HalDetectFeatures()+0x7dc>
c0018f53:	c7 05 04 eb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xb
c0018f5d:	e9 f1 00 00 00       	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018f62:	83 ec 08             	sub    esp,0x8
c0018f65:	68 1f 51 02 c0       	push   0xc002511f
c0018f6a:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f6f:	e8 0c 78 fe ff       	call   c0000780 <strcmp>
c0018f74:	83 c4 10             	add    esp,0x10
c0018f77:	85 c0                	test   eax,eax
c0018f79:	0f 94 c0             	sete   al
c0018f7c:	0f b6 c0             	movzx  eax,al
c0018f7f:	85 c0                	test   eax,eax
c0018f81:	74 0f                	je     c0018f92 <HalDetectFeatures()+0x80c>
c0018f83:	c7 05 04 eb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xc
c0018f8d:	e9 c1 00 00 00       	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018f92:	83 ec 08             	sub    esp,0x8
c0018f95:	68 2c 51 02 c0       	push   0xc002512c
c0018f9a:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f9f:	e8 dc 77 fe ff       	call   c0000780 <strcmp>
c0018fa4:	83 c4 10             	add    esp,0x10
c0018fa7:	85 c0                	test   eax,eax
c0018fa9:	0f 94 c0             	sete   al
c0018fac:	0f b6 c0             	movzx  eax,al
c0018faf:	85 c0                	test   eax,eax
c0018fb1:	74 0f                	je     c0018fc2 <HalDetectFeatures()+0x83c>
c0018fb3:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018fbd:	e9 91 00 00 00       	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018fc2:	83 ec 08             	sub    esp,0x8
c0018fc5:	68 39 51 02 c0       	push   0xc0025139
c0018fca:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018fcf:	e8 ac 77 fe ff       	call   c0000780 <strcmp>
c0018fd4:	83 c4 10             	add    esp,0x10
c0018fd7:	85 c0                	test   eax,eax
c0018fd9:	0f 94 c0             	sete   al
c0018fdc:	0f b6 c0             	movzx  eax,al
c0018fdf:	85 c0                	test   eax,eax
c0018fe1:	74 0c                	je     c0018fef <HalDetectFeatures()+0x869>
c0018fe3:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018fed:	eb 64                	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0018fef:	83 ec 08             	sub    esp,0x8
c0018ff2:	68 46 51 02 c0       	push   0xc0025146
c0018ff7:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018ffc:	e8 7f 77 fe ff       	call   c0000780 <strcmp>
c0019001:	83 c4 10             	add    esp,0x10
c0019004:	85 c0                	test   eax,eax
c0019006:	0f 94 c0             	sete   al
c0019009:	0f b6 c0             	movzx  eax,al
c001900c:	85 c0                	test   eax,eax
c001900e:	74 0c                	je     c001901c <HalDetectFeatures()+0x896>
c0019010:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c001901a:	eb 37                	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c001901c:	83 ec 08             	sub    esp,0x8
c001901f:	68 53 51 02 c0       	push   0xc0025153
c0019024:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019029:	e8 52 77 fe ff       	call   c0000780 <strcmp>
c001902e:	83 c4 10             	add    esp,0x10
c0019031:	85 c0                	test   eax,eax
c0019033:	0f 94 c0             	sete   al
c0019036:	0f b6 c0             	movzx  eax,al
c0019039:	85 c0                	test   eax,eax
c001903b:	74 0c                	je     c0019049 <HalDetectFeatures()+0x8c3>
c001903d:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0019047:	eb 0a                	jmp    c0019053 <HalDetectFeatures()+0x8cd>
c0019049:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c0019053:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019057:	83 f8 06             	cmp    eax,0x6
c001905a:	0f 86 cc 00 00 00    	jbe    c001912c <HalDetectFeatures()+0x9a6>
c0019060:	83 ec 0c             	sub    esp,0xc
c0019063:	68 80 00 00 00       	push   0x80
c0019068:	e8 bd f6 ff ff       	call   c001872a <cpuidCheckExtendedEBX(unsigned int)>
c001906d:	83 c4 10             	add    esp,0x10
c0019070:	89 c1                	mov    ecx,eax
c0019072:	83 e1 01             	and    ecx,0x1
c0019075:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001907a:	83 e0 fe             	and    eax,0xfffffffe
c001907d:	88 c2                	mov    dl,al
c001907f:	88 c8                	mov    al,cl
c0019081:	09 d0                	or     eax,edx
c0019083:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019088:	83 ec 0c             	sub    esp,0xc
c001908b:	68 00 00 10 00       	push   0x100000
c0019090:	e8 95 f6 ff ff       	call   c001872a <cpuidCheckExtendedEBX(unsigned int)>
c0019095:	83 c4 10             	add    esp,0x10
c0019098:	83 e0 01             	and    eax,0x1
c001909b:	89 c1                	mov    ecx,eax
c001909d:	c1 e1 06             	shl    ecx,0x6
c00190a0:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00190a5:	83 e0 bf             	and    eax,0xffffffbf
c00190a8:	88 c2                	mov    dl,al
c00190aa:	88 c8                	mov    al,cl
c00190ac:	09 d0                	or     eax,edx
c00190ae:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00190b3:	83 ec 0c             	sub    esp,0xc
c00190b6:	68 00 00 04 00       	push   0x40000
c00190bb:	e8 6a f6 ff ff       	call   c001872a <cpuidCheckExtendedEBX(unsigned int)>
c00190c0:	83 c4 10             	add    esp,0x10
c00190c3:	83 e0 01             	and    eax,0x1
c00190c6:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00190c9:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00190ce:	83 e0 fd             	and    eax,0xfffffffd
c00190d1:	88 c2                	mov    dl,al
c00190d3:	88 c8                	mov    al,cl
c00190d5:	09 d0                	or     eax,edx
c00190d7:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00190dc:	83 ec 0c             	sub    esp,0xc
c00190df:	6a 04                	push   0x4
c00190e1:	e8 72 f6 ff ff       	call   c0018758 <cpuidCheckExtendedECX(unsigned int)>
c00190e6:	83 c4 10             	add    esp,0x10
c00190e9:	83 e0 01             	and    eax,0x1
c00190ec:	89 c1                	mov    ecx,eax
c00190ee:	c1 e1 05             	shl    ecx,0x5
c00190f1:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00190f6:	83 e0 df             	and    eax,0xffffffdf
c00190f9:	88 c2                	mov    dl,al
c00190fb:	88 c8                	mov    al,cl
c00190fd:	09 d0                	or     eax,edx
c00190ff:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019104:	83 ec 0c             	sub    esp,0xc
c0019107:	6a 20                	push   0x20
c0019109:	e8 4a f6 ff ff       	call   c0018758 <cpuidCheckExtendedECX(unsigned int)>
c001910e:	83 c4 10             	add    esp,0x10
c0019111:	83 e0 01             	and    eax,0x1
c0019114:	89 c1                	mov    ecx,eax
c0019116:	c1 e1 04             	shl    ecx,0x4
c0019119:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001911e:	83 e0 ef             	and    eax,0xffffffef
c0019121:	88 c2                	mov    dl,al
c0019123:	88 c8                	mov    al,cl
c0019125:	09 d0                	or     eax,edx
c0019127:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c001912c:	83 ec 0c             	sub    esp,0xc
c001912f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019133:	50                   	push   eax
c0019134:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019138:	50                   	push   eax
c0019139:	8d 44 24 24          	lea    eax,[esp+0x24]
c001913d:	50                   	push   eax
c001913e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019142:	50                   	push   eax
c0019143:	6a 01                	push   0x1
c0019145:	e8 e7 f4 ff ff       	call   c0018631 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001914a:	83 c4 20             	add    esp,0x20
c001914d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019151:	83 e0 0f             	and    eax,0xf
c0019154:	a2 00 eb 02 c0       	mov    ds:0xc002eb00,al
c0019159:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001915d:	c1 e8 04             	shr    eax,0x4
c0019160:	83 e0 0f             	and    eax,0xf
c0019163:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c0019168:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001916c:	c1 e8 08             	shr    eax,0x8
c001916f:	83 e0 0f             	and    eax,0xf
c0019172:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c0019177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001917b:	c1 e8 0c             	shr    eax,0xc
c001917e:	83 e0 03             	and    eax,0x3
c0019181:	a2 ff ea 02 c0       	mov    ds:0xc002eaff,al
c0019186:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c001918b:	0f b6 c0             	movzx  eax,al
c001918e:	83 f8 06             	cmp    eax,0x6
c0019191:	74 0d                	je     c00191a0 <HalDetectFeatures()+0xa1a>
c0019193:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0019198:	0f b6 c0             	movzx  eax,al
c001919b:	83 f8 0f             	cmp    eax,0xf
c001919e:	75 18                	jne    c00191b8 <HalDetectFeatures()+0xa32>
c00191a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191a4:	c1 e8 10             	shr    eax,0x10
c00191a7:	c1 e0 04             	shl    eax,0x4
c00191aa:	88 c2                	mov    dl,al
c00191ac:	a0 fe ea 02 c0       	mov    al,ds:0xc002eafe
c00191b1:	09 d0                	or     eax,edx
c00191b3:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c00191b8:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c00191bd:	0f b6 c0             	movzx  eax,al
c00191c0:	83 f8 0f             	cmp    eax,0xf
c00191c3:	75 15                	jne    c00191da <HalDetectFeatures()+0xa54>
c00191c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191c9:	c1 e8 14             	shr    eax,0x14
c00191cc:	88 c2                	mov    dl,al
c00191ce:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c00191d3:	01 d0                	add    eax,edx
c00191d5:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c00191da:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c00191e2:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c00191ea:	85 c0                	test   eax,eax
c00191ec:	74 2d                	je     c001921b <HalDetectFeatures()+0xa95>
c00191ee:	83 ec 0c             	sub    esp,0xc
c00191f1:	68 00 00 00 40       	push   0x40000000
c00191f6:	e8 01 f5 ff ff       	call   c00186fc <cpuidCheckECX(unsigned int)>
c00191fb:	83 c4 10             	add    esp,0x10
c00191fe:	83 e0 01             	and    eax,0x1
c0019201:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019208:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c001920d:	83 e0 fb             	and    eax,0xfffffffb
c0019210:	88 c2                	mov    dl,al
c0019212:	88 c8                	mov    al,cl
c0019214:	09 d0                	or     eax,edx
c0019216:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c001921b:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019220:	83 c8 04             	or     eax,0x4
c0019223:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019228:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001922d:	83 c8 08             	or     eax,0x8
c0019230:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019235:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001923a:	83 c8 10             	or     eax,0x10
c001923d:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019242:	83 ec 0c             	sub    esp,0xc
c0019245:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019249:	50                   	push   eax
c001924a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001924e:	50                   	push   eax
c001924f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019253:	50                   	push   eax
c0019254:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019258:	50                   	push   eax
c0019259:	68 00 00 00 80       	push   0x80000000
c001925e:	e8 ce f3 ff ff       	call   c0018631 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019263:	83 c4 20             	add    esp,0x20
c0019266:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001926a:	3d 00 00 00 80       	cmp    eax,0x80000000
c001926f:	0f 86 96 01 00 00    	jbe    c001940b <HalDetectFeatures()+0xc85>
c0019275:	83 ec 0c             	sub    esp,0xc
c0019278:	8d 44 24 14          	lea    eax,[esp+0x14]
c001927c:	50                   	push   eax
c001927d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019281:	50                   	push   eax
c0019282:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019286:	50                   	push   eax
c0019287:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001928b:	50                   	push   eax
c001928c:	68 01 00 00 80       	push   0x80000001
c0019291:	e8 9b f3 ff ff       	call   c0018631 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019296:	83 c4 20             	add    esp,0x20
c0019299:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001929e:	83 e0 7f             	and    eax,0x7f
c00192a1:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00192a6:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00192ab:	83 e0 fb             	and    eax,0xfffffffb
c00192ae:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00192b3:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00192b8:	83 e0 fd             	and    eax,0xfffffffd
c00192bb:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00192c0:	e9 46 01 00 00       	jmp    c001940b <HalDetectFeatures()+0xc85>
c00192c5:	83 ec 08             	sub    esp,0x8
c00192c8:	68 c4 50 02 c0       	push   0xc00250c4
c00192cd:	68 f0 ea 02 c0       	push   0xc002eaf0
c00192d2:	e8 79 73 fe ff       	call   c0000650 <strcpy>
c00192d7:	83 c4 10             	add    esp,0x10
c00192da:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c00192e4:	e8 da 6e fe ff       	call   c00001c3 <is486>
c00192e9:	85 c0                	test   eax,eax
c00192eb:	0f 95 c0             	setne  al
c00192ee:	0f b6 c0             	movzx  eax,al
c00192f1:	85 c0                	test   eax,eax
c00192f3:	0f 84 8d 00 00 00    	je     c0019386 <HalDetectFeatures()+0xc00>
c00192f9:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00192fe:	83 c8 04             	or     eax,0x4
c0019301:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019306:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001930b:	83 c8 08             	or     eax,0x8
c001930e:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019313:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019318:	83 c8 10             	or     eax,0x10
c001931b:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019320:	0f 20 c0             	mov    eax,cr0
c0019323:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019327:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001932b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019332:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019339:	83 e0 04             	and    eax,0x4
c001933c:	74 1e                	je     c001935c <HalDetectFeatures()+0xbd6>
c001933e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019345:	83 e0 10             	and    eax,0x10
c0019348:	75 12                	jne    c001935c <HalDetectFeatures()+0xbd6>
c001934a:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001934f:	83 e0 f7             	and    eax,0xfffffff7
c0019352:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019357:	e9 af 00 00 00       	jmp    c001940b <HalDetectFeatures()+0xc85>
c001935c:	e8 3d 6e fe ff       	call   c000019e <hasLegacyFPU>
c0019361:	83 e0 01             	and    eax,0x1
c0019364:	83 e0 01             	and    eax,0x1
c0019367:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001936e:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019373:	83 e0 f7             	and    eax,0xfffffff7
c0019376:	88 c2                	mov    dl,al
c0019378:	88 c8                	mov    al,cl
c001937a:	09 d0                	or     eax,edx
c001937c:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019381:	e9 85 00 00 00       	jmp    c001940b <HalDetectFeatures()+0xc85>
c0019386:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001938b:	83 e0 fb             	and    eax,0xfffffffb
c001938e:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019393:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019398:	83 e0 f7             	and    eax,0xfffffff7
c001939b:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00193a0:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00193a5:	83 e0 ef             	and    eax,0xffffffef
c00193a8:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00193ad:	0f 20 c0             	mov    eax,cr0
c00193b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00193b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00193b8:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00193bf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00193c6:	83 e0 04             	and    eax,0x4
c00193c9:	74 1b                	je     c00193e6 <HalDetectFeatures()+0xc60>
c00193cb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00193d2:	83 e0 10             	and    eax,0x10
c00193d5:	75 0f                	jne    c00193e6 <HalDetectFeatures()+0xc60>
c00193d7:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00193dc:	83 e0 f7             	and    eax,0xfffffff7
c00193df:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00193e4:	eb 25                	jmp    c001940b <HalDetectFeatures()+0xc85>
c00193e6:	e8 b3 6d fe ff       	call   c000019e <hasLegacyFPU>
c00193eb:	83 e0 01             	and    eax,0x1
c00193ee:	83 e0 01             	and    eax,0x1
c00193f1:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00193f8:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00193fd:	83 e0 f7             	and    eax,0xfffffff7
c0019400:	88 c2                	mov    dl,al
c0019402:	88 c8                	mov    al,cl
c0019404:	09 d0                	or     eax,edx
c0019406:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c001940b:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019410:	83 e0 08             	and    eax,0x8
c0019413:	0f b6 c0             	movzx  eax,al
c0019416:	85 c0                	test   eax,eax
c0019418:	75 25                	jne    c001943f <HalDetectFeatures()+0xcb9>
c001941a:	e8 7f 6d fe ff       	call   c000019e <hasLegacyFPU>
c001941f:	83 e0 01             	and    eax,0x1
c0019422:	83 e0 01             	and    eax,0x1
c0019425:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001942c:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019431:	83 e0 f7             	and    eax,0xfffffff7
c0019434:	88 c2                	mov    dl,al
c0019436:	88 c8                	mov    al,cl
c0019438:	09 d0                	or     eax,edx
c001943a:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c001943f:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019444:	83 e0 08             	and    eax,0x8
c0019447:	0f b6 c0             	movzx  eax,al
c001944a:	85 c0                	test   eax,eax
c001944c:	74 0d                	je     c001945b <HalDetectFeatures()+0xcd5>
c001944e:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019453:	83 c8 10             	or     eax,0x10
c0019456:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001945b:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019460:	83 e0 10             	and    eax,0x10
c0019463:	0f b6 c0             	movzx  eax,al
c0019466:	85 c0                	test   eax,eax
c0019468:	75 23                	jne    c001948d <HalDetectFeatures()+0xd07>
c001946a:	e8 87 7f 00 00       	call   c00213f6 <x87Detect>
c001946f:	83 e0 01             	and    eax,0x1
c0019472:	83 e0 01             	and    eax,0x1
c0019475:	89 c1                	mov    ecx,eax
c0019477:	c1 e1 04             	shl    ecx,0x4
c001947a:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001947f:	83 e0 ef             	and    eax,0xffffffef
c0019482:	88 c2                	mov    dl,al
c0019484:	88 c8                	mov    al,cl
c0019486:	09 d0                	or     eax,edx
c0019488:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001948d:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019492:	83 e0 01             	and    eax,0x1
c0019495:	0f b6 c0             	movzx  eax,al
c0019498:	85 c0                	test   eax,eax
c001949a:	75 2d                	jne    c00194c9 <HalDetectFeatures()+0xd43>
c001949c:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00194a1:	83 e0 02             	and    eax,0x2
c00194a4:	0f b6 c0             	movzx  eax,al
c00194a7:	85 c0                	test   eax,eax
c00194a9:	75 1e                	jne    c00194c9 <HalDetectFeatures()+0xd43>
c00194ab:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00194b0:	83 e0 04             	and    eax,0x4
c00194b3:	0f b6 c0             	movzx  eax,al
c00194b6:	85 c0                	test   eax,eax
c00194b8:	75 0f                	jne    c00194c9 <HalDetectFeatures()+0xd43>
c00194ba:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00194bf:	83 e0 08             	and    eax,0x8
c00194c2:	0f b6 c0             	movzx  eax,al
c00194c5:	85 c0                	test   eax,eax
c00194c7:	74 0d                	je     c00194d6 <HalDetectFeatures()+0xd50>
c00194c9:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00194ce:	83 c8 80             	or     eax,0xffffff80
c00194d1:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00194d6:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00194db:	83 e0 10             	and    eax,0x10
c00194de:	0f b6 c0             	movzx  eax,al
c00194e1:	85 c0                	test   eax,eax
c00194e3:	74 2f                	je     c0019514 <HalDetectFeatures()+0xd8e>
c00194e5:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00194ea:	83 e0 80             	and    eax,0xffffff80
c00194ed:	0f b6 c0             	movzx  eax,al
c00194f0:	85 c0                	test   eax,eax
c00194f2:	75 20                	jne    c0019514 <HalDetectFeatures()+0xd8e>
c00194f4:	e8 b7 7e 00 00       	call   c00213b0 <sseDetect>
c00194f9:	83 e0 01             	and    eax,0x1
c00194fc:	89 c1                	mov    ecx,eax
c00194fe:	c1 e1 07             	shl    ecx,0x7
c0019501:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019506:	83 e0 7f             	and    eax,0x7f
c0019509:	88 c2                	mov    dl,al
c001950b:	88 c8                	mov    al,cl
c001950d:	09 d0                	or     eax,edx
c001950f:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019514:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019519:	83 e0 80             	and    eax,0xffffff80
c001951c:	0f b6 c0             	movzx  eax,al
c001951f:	85 c0                	test   eax,eax
c0019521:	74 1c                	je     c001953f <HalDetectFeatures()+0xdb9>
c0019523:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019528:	83 e0 20             	and    eax,0x20
c001952b:	0f b6 c0             	movzx  eax,al
c001952e:	85 c0                	test   eax,eax
c0019530:	75 0d                	jne    c001953f <HalDetectFeatures()+0xdb9>
c0019532:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019537:	83 e0 df             	and    eax,0xffffffdf
c001953a:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c001953f:	c6 05 08 eb 02 c0 00 	mov    BYTE PTR ds:0xc002eb08,0x0
c0019546:	90                   	nop
c0019547:	81 c4 90 00 00 00    	add    esp,0x90
c001954d:	5b                   	pop    ebx
c001954e:	5e                   	pop    esi
c001954f:	5f                   	pop    edi
c0019550:	c3                   	ret    

c0019551 <HalEnableNMI()>:
c0019551:	c6 05 ec ea 02 c0 01 	mov    BYTE PTR ds:0xc002eaec,0x1
c0019558:	6a 10                	push   0x10
c001955a:	e8 20 ef ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001955f:	83 c4 04             	add    esp,0x4
c0019562:	90                   	nop
c0019563:	c3                   	ret    

c0019564 <HalDisableNMI()>:
c0019564:	c6 05 ec ea 02 c0 00 	mov    BYTE PTR ds:0xc002eaec,0x0
c001956b:	6a 10                	push   0x10
c001956d:	e8 0d ef ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c0019572:	83 c4 04             	add    esp,0x4
c0019575:	90                   	nop
c0019576:	c3                   	ret    

c0019577 <HalGetNMIState()>:
c0019577:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c001957c:	c3                   	ret    

c001957d <x86rdmsr(unsigned int)>:
c001957d:	83 ec 1c             	sub    esp,0x1c
c0019580:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019585:	83 e0 08             	and    eax,0x8
c0019588:	0f b6 c0             	movzx  eax,al
c001958b:	85 c0                	test   eax,eax
c001958d:	75 10                	jne    c001959f <x86rdmsr(unsigned int)+0x22>
c001958f:	83 ec 0c             	sub    esp,0xc
c0019592:	68 5f 51 02 c0       	push   0xc002515f
c0019597:	e8 8e 68 ff ff       	call   c000fe2a <KePanic(char const*)>
c001959c:	83 c4 10             	add    esp,0x10
c001959f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195a3:	89 c1                	mov    ecx,eax
c00195a5:	0f 32                	rdmsr  
c00195a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00195ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00195af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00195b7:	83 c4 1c             	add    esp,0x1c
c00195ba:	c3                   	ret    

c00195bb <x86wrmsr(unsigned int, unsigned long long)>:
c00195bb:	83 ec 1c             	sub    esp,0x1c
c00195be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00195c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00195c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195ce:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00195d3:	83 e0 08             	and    eax,0x8
c00195d6:	0f b6 c0             	movzx  eax,al
c00195d9:	85 c0                	test   eax,eax
c00195db:	75 10                	jne    c00195ed <x86wrmsr(unsigned int, unsigned long long)+0x32>
c00195dd:	83 ec 0c             	sub    esp,0xc
c00195e0:	68 65 51 02 c0       	push   0xc0025165
c00195e5:	e8 40 68 ff ff       	call   c000fe2a <KePanic(char const*)>
c00195ea:	83 c4 10             	add    esp,0x10
c00195ed:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00195f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00195f9:	0f 30                	wrmsr  
c00195fb:	90                   	nop
c00195fc:	83 c4 1c             	add    esp,0x1c
c00195ff:	c3                   	ret    

c0019600 <HalHandleGeneralProtectionFault(void*, void*)>:
c0019600:	83 ec 0c             	sub    esp,0xc
c0019603:	83 ec 0c             	sub    esp,0xc
c0019606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001960a:	e8 40 e7 ff ff       	call   c0017d4f <Vm::faultHandler(regs*)>
c001960f:	83 c4 10             	add    esp,0x10
c0019612:	83 c4 0c             	add    esp,0xc
c0019615:	c3                   	ret    

c0019616 <HalFindRSDP()>:
c0019616:	83 ec 1c             	sub    esp,0x1c
c0019619:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c001961e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019623:	7e 0c                	jle    c0019631 <HalFindRSDP()+0x1b>
c0019625:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c001962a:	25 00 04 00 00       	and    eax,0x400
c001962f:	74 0d                	je     c001963e <HalFindRSDP()+0x28>
c0019631:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019636:	83 e0 fb             	and    eax,0xfffffffb
c0019639:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001963e:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019643:	83 e0 04             	and    eax,0x4
c0019646:	0f b6 c0             	movzx  eax,al
c0019649:	85 c0                	test   eax,eax
c001964b:	75 07                	jne    c0019654 <HalFindRSDP()+0x3e>
c001964d:	b8 00 00 00 00       	mov    eax,0x0
c0019652:	eb 53                	jmp    c00196a7 <HalFindRSDP()+0x91>
c0019654:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001965c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019664:	77 2f                	ja     c0019695 <HalFindRSDP()+0x7f>
c0019666:	83 ec 04             	sub    esp,0x4
c0019669:	6a 08                	push   0x8
c001966b:	68 6b 51 02 c0       	push   0xc002516b
c0019670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019674:	e8 07 6d fe ff       	call   c0000380 <memcmp>
c0019679:	83 c4 10             	add    esp,0x10
c001967c:	85 c0                	test   eax,eax
c001967e:	0f 94 c0             	sete   al
c0019681:	0f b6 c0             	movzx  eax,al
c0019684:	85 c0                	test   eax,eax
c0019686:	74 06                	je     c001968e <HalFindRSDP()+0x78>
c0019688:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001968c:	eb 19                	jmp    c00196a7 <HalFindRSDP()+0x91>
c001968e:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019693:	eb c7                	jmp    c001965c <HalFindRSDP()+0x46>
c0019695:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001969a:	83 e0 fb             	and    eax,0xfffffffb
c001969d:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00196a2:	b8 00 00 00 00       	mov    eax,0x0
c00196a7:	83 c4 1c             	add    esp,0x1c
c00196aa:	c3                   	ret    

c00196ab <HalHandlePageFault(void*, void*)>:
c00196ab:	83 ec 1c             	sub    esp,0x1c
c00196ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196b2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00196b5:	83 ec 08             	sub    esp,0x8
c00196b8:	50                   	push   eax
c00196b9:	68 b0 53 02 c0       	push   0xc00253b0
c00196be:	e8 8b d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00196c3:	83 c4 10             	add    esp,0x10
c00196c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00196cd:	83 ec 08             	sub    esp,0x8
c00196d0:	50                   	push   eax
c00196d1:	68 74 51 02 c0       	push   0xc0025174
c00196d6:	e8 73 d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00196db:	83 c4 10             	add    esp,0x10
c00196de:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00196e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00196e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00196e8:	8b 80 72 05 00 00    	mov    eax,DWORD PTR [eax+0x572]
c00196ee:	0f 20 d2             	mov    edx,cr2
c00196f1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00196f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00196f9:	83 ec 08             	sub    esp,0x8
c00196fc:	52                   	push   edx
c00196fd:	50                   	push   eax
c00196fe:	e8 b1 a9 ff ff       	call   c00140b4 <VAS::tryLoadBackOffDisk(unsigned long)>
c0019703:	83 c4 10             	add    esp,0x10
c0019706:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001970a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001970e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019711:	83 ec 08             	sub    esp,0x8
c0019714:	50                   	push   eax
c0019715:	68 89 51 02 c0       	push   0xc0025189
c001971a:	e8 2f d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001971f:	83 c4 10             	add    esp,0x10
c0019722:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019726:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019729:	83 ec 08             	sub    esp,0x8
c001972c:	50                   	push   eax
c001972d:	68 a3 51 02 c0       	push   0xc00251a3
c0019732:	e8 17 d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019737:	83 c4 10             	add    esp,0x10
c001973a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001973f:	83 ec 08             	sub    esp,0x8
c0019742:	50                   	push   eax
c0019743:	68 b8 51 02 c0       	push   0xc00251b8
c0019748:	e8 01 d8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001974d:	83 c4 10             	add    esp,0x10
c0019750:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019754:	83 c4 1c             	add    esp,0x1c
c0019757:	c3                   	ret    

c0019758 <HalHandleOpcodeFault(void*, void*)>:
c0019758:	83 ec 1c             	sub    esp,0x1c
c001975b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001975f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019763:	a0 08 eb 02 c0       	mov    al,ds:0xc002eb08
c0019768:	0f b6 c0             	movzx  eax,al
c001976b:	85 c0                	test   eax,eax
c001976d:	74 25                	je     c0019794 <HalHandleOpcodeFault(void*, void*)+0x3c>
c001976f:	83 ec 0c             	sub    esp,0xc
c0019772:	68 e4 53 02 c0       	push   0xc00253e4
c0019777:	e8 d2 d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001977c:	83 c4 10             	add    esp,0x10
c001977f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019783:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019786:	8d 50 19             	lea    edx,[eax+0x19]
c0019789:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001978d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019790:	b0 01                	mov    al,0x1
c0019792:	eb 02                	jmp    c0019796 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019794:	b0 00                	mov    al,0x0
c0019796:	83 c4 1c             	add    esp,0x1c
c0019799:	c3                   	ret    

c001979a <HalDisplayDebugInfo(void*)>:
c001979a:	83 ec 2c             	sub    esp,0x2c
c001979d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00197a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00197a5:	0f 20 c0             	mov    eax,cr0
c00197a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00197ac:	0f 20 d0             	mov    eax,cr2
c00197af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00197b3:	0f 20 d8             	mov    eax,cr3
c00197b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00197ba:	0f 20 e0             	mov    eax,cr4
c00197bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00197c5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00197c8:	83 ec 08             	sub    esp,0x8
c00197cb:	50                   	push   eax
c00197cc:	68 d3 51 02 c0       	push   0xc00251d3
c00197d1:	e8 78 d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00197d6:	83 c4 10             	add    esp,0x10
c00197d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00197dd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00197e0:	83 ec 08             	sub    esp,0x8
c00197e3:	50                   	push   eax
c00197e4:	68 c4 51 02 c0       	push   0xc00251c4
c00197e9:	e8 60 d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00197ee:	83 c4 10             	add    esp,0x10
c00197f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00197f5:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00197f8:	83 ec 08             	sub    esp,0x8
c00197fb:	50                   	push   eax
c00197fc:	68 cf 51 02 c0       	push   0xc00251cf
c0019801:	e8 48 d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019806:	83 c4 10             	add    esp,0x10
c0019809:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001980d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019810:	83 ec 08             	sub    esp,0x8
c0019813:	50                   	push   eax
c0019814:	68 de 51 02 c0       	push   0xc00251de
c0019819:	e8 30 d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001981e:	83 c4 10             	add    esp,0x10
c0019821:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019825:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0019828:	83 ec 08             	sub    esp,0x8
c001982b:	50                   	push   eax
c001982c:	68 e9 51 02 c0       	push   0xc00251e9
c0019831:	e8 18 d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019836:	83 c4 10             	add    esp,0x10
c0019839:	83 ec 08             	sub    esp,0x8
c001983c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019840:	68 f4 51 02 c0       	push   0xc00251f4
c0019845:	e8 04 d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001984a:	83 c4 10             	add    esp,0x10
c001984d:	83 ec 08             	sub    esp,0x8
c0019850:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019854:	68 ff 51 02 c0       	push   0xc00251ff
c0019859:	e8 f0 d6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001985e:	83 c4 10             	add    esp,0x10
c0019861:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019865:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019868:	c1 e0 05             	shl    eax,0x5
c001986b:	8d 90 00 67 02 c0    	lea    edx,[eax-0x3ffd9900]
c0019871:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019875:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019878:	83 ec 04             	sub    esp,0x4
c001987b:	52                   	push   edx
c001987c:	50                   	push   eax
c001987d:	68 0a 52 02 c0       	push   0xc002520a
c0019882:	e8 c7 d6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019887:	83 c4 10             	add    esp,0x10
c001988a:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001988f:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019895:	83 ec 0c             	sub    esp,0xc
c0019898:	50                   	push   eax
c0019899:	e8 ef 8a ff ff       	call   c001238d <setActiveTerminal(VgaText*)>
c001989e:	83 c4 10             	add    esp,0x10
c00198a1:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00198a6:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c00198ac:	83 ec 08             	sub    esp,0x8
c00198af:	68 19 52 02 c0       	push   0xc0025219
c00198b4:	50                   	push   eax
c00198b5:	e8 10 8e ff ff       	call   c00126ca <VgaText::puts(char const*)>
c00198ba:	83 c4 10             	add    esp,0x10
c00198bd:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00198c2:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c00198c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00198cc:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00198cf:	83 ec 08             	sub    esp,0x8
c00198d2:	52                   	push   edx
c00198d3:	50                   	push   eax
c00198d4:	e8 ab 8d ff ff       	call   c0012684 <VgaText::putx(unsigned int)>
c00198d9:	83 c4 10             	add    esp,0x10
c00198dc:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00198e1:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c00198e7:	83 ec 08             	sub    esp,0x8
c00198ea:	68 27 52 02 c0       	push   0xc0025227
c00198ef:	50                   	push   eax
c00198f0:	e8 d5 8d ff ff       	call   c00126ca <VgaText::puts(char const*)>
c00198f5:	83 c4 10             	add    esp,0x10
c00198f8:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00198fd:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019903:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0019908:	8b 12                	mov    edx,DWORD PTR [edx]
c001990a:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001990d:	83 c2 0c             	add    edx,0xc
c0019910:	83 ec 08             	sub    esp,0x8
c0019913:	52                   	push   edx
c0019914:	50                   	push   eax
c0019915:	e8 b0 8d ff ff       	call   c00126ca <VgaText::puts(char const*)>
c001991a:	83 c4 10             	add    esp,0x10
c001991d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019922:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019928:	83 ec 08             	sub    esp,0x8
c001992b:	68 30 52 02 c0       	push   0xc0025230
c0019930:	50                   	push   eax
c0019931:	e8 94 8d ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019936:	83 c4 10             	add    esp,0x10
c0019939:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001993e:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019944:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019948:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001994b:	83 ec 08             	sub    esp,0x8
c001994e:	52                   	push   edx
c001994f:	50                   	push   eax
c0019950:	e8 2f 8d ff ff       	call   c0012684 <VgaText::putx(unsigned int)>
c0019955:	83 c4 10             	add    esp,0x10
c0019958:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001995d:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019963:	83 ec 08             	sub    esp,0x8
c0019966:	68 38 52 02 c0       	push   0xc0025238
c001996b:	50                   	push   eax
c001996c:	e8 59 8d ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019971:	83 c4 10             	add    esp,0x10
c0019974:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019979:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c001997f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019983:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0019986:	83 ec 08             	sub    esp,0x8
c0019989:	52                   	push   edx
c001998a:	50                   	push   eax
c001998b:	e8 f4 8c ff ff       	call   c0012684 <VgaText::putx(unsigned int)>
c0019990:	83 c4 10             	add    esp,0x10
c0019993:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019998:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c001999e:	83 ec 08             	sub    esp,0x8
c00199a1:	68 40 52 02 c0       	push   0xc0025240
c00199a6:	50                   	push   eax
c00199a7:	e8 1e 8d ff ff       	call   c00126ca <VgaText::puts(char const*)>
c00199ac:	83 c4 10             	add    esp,0x10
c00199af:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00199b4:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c00199ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00199be:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00199c1:	83 ec 08             	sub    esp,0x8
c00199c4:	52                   	push   edx
c00199c5:	50                   	push   eax
c00199c6:	e8 b9 8c ff ff       	call   c0012684 <VgaText::putx(unsigned int)>
c00199cb:	83 c4 10             	add    esp,0x10
c00199ce:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00199d3:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c00199d9:	83 ec 08             	sub    esp,0x8
c00199dc:	68 48 52 02 c0       	push   0xc0025248
c00199e1:	50                   	push   eax
c00199e2:	e8 e3 8c ff ff       	call   c00126ca <VgaText::puts(char const*)>
c00199e7:	83 c4 10             	add    esp,0x10
c00199ea:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00199ef:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c00199f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00199f9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00199fc:	83 ec 08             	sub    esp,0x8
c00199ff:	52                   	push   edx
c0019a00:	50                   	push   eax
c0019a01:	e8 7e 8c ff ff       	call   c0012684 <VgaText::putx(unsigned int)>
c0019a06:	83 c4 10             	add    esp,0x10
c0019a09:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a0e:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019a14:	83 ec 08             	sub    esp,0x8
c0019a17:	68 50 52 02 c0       	push   0xc0025250
c0019a1c:	50                   	push   eax
c0019a1d:	e8 a8 8c ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019a22:	83 c4 10             	add    esp,0x10
c0019a25:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a2a:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019a30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019a34:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0019a37:	83 ec 08             	sub    esp,0x8
c0019a3a:	52                   	push   edx
c0019a3b:	50                   	push   eax
c0019a3c:	e8 43 8c ff ff       	call   c0012684 <VgaText::putx(unsigned int)>
c0019a41:	83 c4 10             	add    esp,0x10
c0019a44:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a49:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019a4f:	83 ec 08             	sub    esp,0x8
c0019a52:	68 58 52 02 c0       	push   0xc0025258
c0019a57:	50                   	push   eax
c0019a58:	e8 6d 8c ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019a5d:	83 c4 10             	add    esp,0x10
c0019a60:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a65:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019a6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019a6f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019a72:	83 ec 08             	sub    esp,0x8
c0019a75:	52                   	push   edx
c0019a76:	50                   	push   eax
c0019a77:	e8 08 8c ff ff       	call   c0012684 <VgaText::putx(unsigned int)>
c0019a7c:	83 c4 10             	add    esp,0x10
c0019a7f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a84:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019a8a:	83 ec 08             	sub    esp,0x8
c0019a8d:	68 60 52 02 c0       	push   0xc0025260
c0019a92:	50                   	push   eax
c0019a93:	e8 32 8c ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019a98:	83 c4 10             	add    esp,0x10
c0019a9b:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019aa0:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019aa6:	83 ec 08             	sub    esp,0x8
c0019aa9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019aad:	50                   	push   eax
c0019aae:	e8 d1 8b ff ff       	call   c0012684 <VgaText::putx(unsigned int)>
c0019ab3:	83 c4 10             	add    esp,0x10
c0019ab6:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019abb:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019ac1:	83 ec 08             	sub    esp,0x8
c0019ac4:	68 69 52 02 c0       	push   0xc0025269
c0019ac9:	50                   	push   eax
c0019aca:	e8 fb 8b ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019acf:	83 c4 10             	add    esp,0x10
c0019ad2:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019ad7:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019add:	83 ec 08             	sub    esp,0x8
c0019ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ae4:	50                   	push   eax
c0019ae5:	e8 9a 8b ff ff       	call   c0012684 <VgaText::putx(unsigned int)>
c0019aea:	83 c4 10             	add    esp,0x10
c0019aed:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019af2:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019af8:	83 ec 08             	sub    esp,0x8
c0019afb:	68 71 52 02 c0       	push   0xc0025271
c0019b00:	50                   	push   eax
c0019b01:	e8 c4 8b ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019b06:	83 c4 10             	add    esp,0x10
c0019b09:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b0e:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019b14:	83 ec 08             	sub    esp,0x8
c0019b17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b1b:	50                   	push   eax
c0019b1c:	e8 63 8b ff ff       	call   c0012684 <VgaText::putx(unsigned int)>
c0019b21:	83 c4 10             	add    esp,0x10
c0019b24:	fa                   	cli    
c0019b25:	f4                   	hlt    
c0019b26:	eb fe                	jmp    c0019b26 <HalDisplayDebugInfo(void*)+0x38c>

c0019b28 <HalReceivedNMI()>:
c0019b28:	83 ec 1c             	sub    esp,0x1c
c0019b2b:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0019b32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b36:	89 c2                	mov    edx,eax
c0019b38:	ec                   	in     al,dx
c0019b39:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0019b3d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0019b41:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019b45:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0019b4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b50:	89 c2                	mov    edx,eax
c0019b52:	ec                   	in     al,dx
c0019b53:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019b57:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0019b5b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019b5f:	83 ec 0c             	sub    esp,0xc
c0019b62:	68 79 52 02 c0       	push   0xc0025279
c0019b67:	e8 e2 d3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019b6c:	83 c4 10             	add    esp,0x10
c0019b6f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019b74:	83 e0 10             	and    eax,0x10
c0019b77:	74 10                	je     c0019b89 <HalReceivedNMI()+0x61>
c0019b79:	83 ec 0c             	sub    esp,0xc
c0019b7c:	68 8a 52 02 c0       	push   0xc002528a
c0019b81:	e8 a4 62 ff ff       	call   c000fe2a <KePanic(char const*)>
c0019b86:	83 c4 10             	add    esp,0x10
c0019b89:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0019b8e:	83 e0 40             	and    eax,0x40
c0019b91:	74 10                	je     c0019ba3 <HalReceivedNMI()+0x7b>
c0019b93:	83 ec 0c             	sub    esp,0xc
c0019b96:	68 97 52 02 c0       	push   0xc0025297
c0019b9b:	e8 8a 62 ff ff       	call   c000fe2a <KePanic(char const*)>
c0019ba0:	83 c4 10             	add    esp,0x10
c0019ba3:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0019ba7:	0f be c0             	movsx  eax,al
c0019baa:	85 c0                	test   eax,eax
c0019bac:	79 10                	jns    c0019bbe <HalReceivedNMI()+0x96>
c0019bae:	83 ec 0c             	sub    esp,0xc
c0019bb1:	68 a1 52 02 c0       	push   0xc00252a1
c0019bb6:	e8 6f 62 ff ff       	call   c000fe2a <KePanic(char const*)>
c0019bbb:	83 c4 10             	add    esp,0x10
c0019bbe:	90                   	nop
c0019bbf:	83 c4 1c             	add    esp,0x1c
c0019bc2:	c3                   	ret    

c0019bc3 <HalSystemIdle()>:
c0019bc3:	56                   	push   esi
c0019bc4:	53                   	push   ebx
c0019bc5:	83 ec 14             	sub    esp,0x14
c0019bc8:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019bcd:	83 e0 10             	and    eax,0x10
c0019bd0:	0f b6 c0             	movzx  eax,al
c0019bd3:	85 c0                	test   eax,eax
c0019bd5:	74 43                	je     c0019c1a <HalSystemIdle()+0x57>
c0019bd7:	83 ec 0c             	sub    esp,0xc
c0019bda:	68 e1 00 00 00       	push   0xe1
c0019bdf:	e8 99 f9 ff ff       	call   c001957d <x86rdmsr(unsigned int)>
c0019be4:	83 c4 10             	add    esp,0x10
c0019be7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019beb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019bef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bf3:	83 e0 02             	and    eax,0x2
c0019bf6:	89 c3                	mov    ebx,eax
c0019bf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bfc:	83 e0 00             	and    eax,0x0
c0019bff:	89 c6                	mov    esi,eax
c0019c01:	83 ec 04             	sub    esp,0x4
c0019c04:	56                   	push   esi
c0019c05:	53                   	push   ebx
c0019c06:	68 e1 00 00 00       	push   0xe1
c0019c0b:	e8 ab f9 ff ff       	call   c00195bb <x86wrmsr(unsigned int, unsigned long long)>
c0019c10:	83 c4 10             	add    esp,0x10
c0019c13:	e8 7c 65 fe ff       	call   c0000194 <doTPAUSE>
c0019c18:	eb 01                	jmp    c0019c1b <HalSystemIdle()+0x58>
c0019c1a:	f4                   	hlt    
c0019c1b:	90                   	nop
c0019c1c:	83 c4 14             	add    esp,0x14
c0019c1f:	5b                   	pop    ebx
c0019c20:	5e                   	pop    esi
c0019c21:	c3                   	ret    

c0019c22 <i386SaveCoprocessor(void*)>:
c0019c22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c26:	83 c0 3f             	add    eax,0x3f
c0019c29:	83 e0 c0             	and    eax,0xffffffc0
c0019c2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c30:	ff 25 d0 ea 02 c0    	jmp    DWORD PTR ds:0xc002ead0

c0019c36 <i386LoadCoprocessor(void*)>:
c0019c36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c3a:	83 c0 3f             	add    eax,0x3f
c0019c3d:	83 e0 c0             	and    eax,0xffffffc0
c0019c40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c44:	ff 25 cc ea 02 c0    	jmp    DWORD PTR ds:0xc002eacc

c0019c4a <x87EmulHandler(regs*, void*)>:
c0019c4a:	53                   	push   ebx
c0019c4b:	83 ec 08             	sub    esp,0x8
c0019c4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c53:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0019c57:	74 10                	je     c0019c69 <x87EmulHandler(regs*, void*)+0x1f>
c0019c59:	83 ec 0c             	sub    esp,0xc
c0019c5c:	68 ae 52 02 c0       	push   0xc00252ae
c0019c61:	e8 c4 61 ff ff       	call   c000fe2a <KePanic(char const*)>
c0019c66:	83 c4 10             	add    esp,0x10
c0019c69:	0f 20 c0             	mov    eax,cr0
c0019c6c:	a8 08                	test   al,0x8
c0019c6e:	74 59                	je     c0019cc9 <x87EmulHandler(regs*, void*)+0x7f>
c0019c70:	0f 06                	clts   
c0019c72:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0019c77:	85 c0                	test   eax,eax
c0019c79:	74 0e                	je     c0019c89 <x87EmulHandler(regs*, void*)+0x3f>
c0019c7b:	83 ec 0c             	sub    esp,0xc
c0019c7e:	ff 70 59             	push   DWORD PTR [eax+0x59]
c0019c81:	e8 9c ff ff ff       	call   c0019c22 <i386SaveCoprocessor(void*)>
c0019c86:	83 c4 10             	add    esp,0x10
c0019c89:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0019c8f:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c0019c93:	75 12                	jne    c0019ca7 <x87EmulHandler(regs*, void*)+0x5d>
c0019c95:	83 ec 0c             	sub    esp,0xc
c0019c98:	68 40 02 00 00       	push   0x240
c0019c9d:	e8 42 5e ff ff       	call   c000fae4 <malloc>
c0019ca2:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c0019ca5:	eb 10                	jmp    c0019cb7 <x87EmulHandler(regs*, void*)+0x6d>
c0019ca7:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0019cac:	83 ec 0c             	sub    esp,0xc
c0019caf:	ff 70 59             	push   DWORD PTR [eax+0x59]
c0019cb2:	e8 7f ff ff ff       	call   c0019c36 <i386LoadCoprocessor(void*)>
c0019cb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019cbc:	83 c4 10             	add    esp,0x10
c0019cbf:	a3 c8 ea 02 c0       	mov    ds:0xc002eac8,eax
c0019cc4:	83 c4 08             	add    esp,0x8
c0019cc7:	5b                   	pop    ebx
c0019cc8:	c3                   	ret    
c0019cc9:	83 ec 0c             	sub    esp,0xc
c0019ccc:	68 c2 52 02 c0       	push   0xc00252c2
c0019cd1:	e8 78 d2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019cd6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0019cde:	83 c4 18             	add    esp,0x18
c0019ce1:	5b                   	pop    ebx
c0019ce2:	e9 ad d9 ff ff       	jmp    c0017694 <Thr::terminateFromIRQ(int)>

c0019ce7 <HalInitialiseCoprocessor()>:
c0019ce7:	83 ec 10             	sub    esp,0x10
c0019cea:	6a 00                	push   0x0
c0019cec:	68 4a 9c 01 c0       	push   0xc0019c4a
c0019cf1:	6a 07                	push   0x7
c0019cf3:	c7 05 c8 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eac8,0x0
c0019cfd:	e8 9d 06 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019d02:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019d07:	83 c4 10             	add    esp,0x10
c0019d0a:	a8 80                	test   al,0x80
c0019d0c:	74 1c                	je     c0019d2a <HalInitialiseCoprocessor()+0x43>
c0019d0e:	c7 05 d0 ea 02 c0 c8 13 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc00213c8
c0019d18:	c7 05 cc ea 02 c0 d0 13 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc00213d0
c0019d22:	83 c4 0c             	add    esp,0xc
c0019d25:	e9 ae 76 00 00       	jmp    c00213d8 <sseInit>
c0019d2a:	a8 10                	test   al,0x10
c0019d2c:	74 1c                	je     c0019d4a <HalInitialiseCoprocessor()+0x63>
c0019d2e:	c7 05 d0 ea 02 c0 17 14 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc0021417
c0019d38:	c7 05 cc ea 02 c0 1e 14 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc002141e
c0019d42:	83 c4 0c             	add    esp,0xc
c0019d45:	e9 db 76 00 00       	jmp    c0021425 <x87Init>
c0019d4a:	c7 05 d0 ea 02 c0 7a 84 01 c0 	mov    DWORD PTR ds:0xc002ead0,0xc001847a
c0019d54:	c7 05 cc ea 02 c0 7a 84 01 c0 	mov    DWORD PTR ds:0xc002eacc,0xc001847a
c0019d5e:	0f 20 c0             	mov    eax,cr0
c0019d61:	83 c8 04             	or     eax,0x4
c0019d64:	0f 22 c0             	mov    cr0,eax
c0019d67:	83 c4 0c             	add    esp,0xc
c0019d6a:	c3                   	ret    

c0019d6b <HalPanic(char const*)>:
c0019d6b:	53                   	push   ebx
c0019d6c:	83 ec 10             	sub    esp,0x10
c0019d6f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d73:	fa                   	cli    
c0019d74:	53                   	push   ebx
c0019d75:	68 d8 52 02 c0       	push   0xc00252d8
c0019d7a:	e8 cf d1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019d7f:	a1 c4 ea 02 c0       	mov    eax,ds:0xc002eac4
c0019d84:	83 c4 10             	add    esp,0x10
c0019d87:	85 c0                	test   eax,eax
c0019d89:	74 09                	je     c0019d94 <HalPanic(char const*)+0x29>
c0019d8b:	83 ec 0c             	sub    esp,0xc
c0019d8e:	53                   	push   ebx
c0019d8f:	ff d0                	call   eax
c0019d91:	83 c4 10             	add    esp,0x10
c0019d94:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0019d99:	85 c0                	test   eax,eax
c0019d9b:	0f 84 dc 00 00 00    	je     c0019e7d <HalPanic(char const*)+0x112>
c0019da1:	52                   	push   edx
c0019da2:	6a 01                	push   0x1
c0019da4:	6a 0f                	push   0xf
c0019da6:	50                   	push   eax
c0019da7:	e8 20 84 ff ff       	call   c00121cc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019dac:	59                   	pop    ecx
c0019dad:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019db3:	e8 20 86 ff ff       	call   c00123d8 <VgaText::clearScreen()>
c0019db8:	58                   	pop    eax
c0019db9:	5a                   	pop    edx
c0019dba:	68 01 43 02 c0       	push   0xc0024301
c0019dbf:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019dc5:	e8 3a 84 ff ff       	call   c0012204 <VgaText::setTitle(char*)>
c0019dca:	83 c4 0c             	add    esp,0xc
c0019dcd:	6a 01                	push   0x1
c0019dcf:	6a 0f                	push   0xf
c0019dd1:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019dd7:	e8 f0 83 ff ff       	call   c00121cc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019ddc:	59                   	pop    ecx
c0019ddd:	58                   	pop    eax
c0019dde:	68 f1 52 02 c0       	push   0xc00252f1
c0019de3:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019de9:	e8 dc 88 ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019dee:	83 c4 0c             	add    esp,0xc
c0019df1:	6a 0f                	push   0xf
c0019df3:	6a 01                	push   0x1
c0019df5:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019dfb:	e8 cc 83 ff ff       	call   c00121cc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019e00:	58                   	pop    eax
c0019e01:	5a                   	pop    edx
c0019e02:	68 fa 52 02 c0       	push   0xc00252fa
c0019e07:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019e0d:	e8 b8 88 ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019e12:	83 c4 0c             	add    esp,0xc
c0019e15:	6a 01                	push   0x1
c0019e17:	6a 0f                	push   0xf
c0019e19:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019e1f:	e8 a8 83 ff ff       	call   c00121cc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019e24:	59                   	pop    ecx
c0019e25:	58                   	pop    eax
c0019e26:	68 3e 53 02 c0       	push   0xc002533e
c0019e2b:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019e31:	e8 94 88 ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019e36:	58                   	pop    eax
c0019e37:	5a                   	pop    edx
c0019e38:	68 07 53 02 c0       	push   0xc0025307
c0019e3d:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019e43:	e8 82 88 ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019e48:	59                   	pop    ecx
c0019e49:	58                   	pop    eax
c0019e4a:	68 41 53 02 c0       	push   0xc0025341
c0019e4f:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019e55:	e8 70 88 ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019e5a:	58                   	pop    eax
c0019e5b:	5a                   	pop    edx
c0019e5c:	53                   	push   ebx
c0019e5d:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019e63:	e8 62 88 ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019e68:	59                   	pop    ecx
c0019e69:	5b                   	pop    ebx
c0019e6a:	68 3e 53 02 c0       	push   0xc002533e
c0019e6f:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019e75:	e8 50 88 ff ff       	call   c00126ca <VgaText::puts(char const*)>
c0019e7a:	83 c4 10             	add    esp,0x10
c0019e7d:	eb fe                	jmp    c0019e7d <HalPanic(char const*)+0x112>

c0019e7f <HalQueryPerformanceCounter()>:
c0019e7f:	31 c0                	xor    eax,eax
c0019e81:	31 d2                	xor    edx,edx
c0019e83:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c0019e8a:	75 02                	jne    c0019e8e <HalQueryPerformanceCounter()+0xf>
c0019e8c:	0f 31                	rdtsc  
c0019e8e:	c3                   	ret    

c0019e8f <HalInitialise()>:
c0019e8f:	53                   	push   ebx
c0019e90:	83 ec 08             	sub    esp,0x8
c0019e93:	c6 05 c0 ea 02 c0 00 	mov    BYTE PTR ds:0xc002eac0,0x0
c0019e9a:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019e9f:	83 e0 fe             	and    eax,0xfffffffe
c0019ea2:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019ea7:	e8 d8 07 00 00       	call   c001a684 <picOpen()>
c0019eac:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c0019eb3:	74 0a                	je     c0019ebf <HalInitialise()+0x30>
c0019eb5:	e8 1a 07 00 00       	call   c001a5d4 <picDisable()>
c0019eba:	e8 0b 6b 00 00       	call   c00209ca <apicOpen()>
c0019ebf:	50                   	push   eax
c0019ec0:	bb 0f 00 00 00       	mov    ebx,0xf
c0019ec5:	6a 00                	push   0x0
c0019ec7:	68 90 eb 00 c0       	push   0xc000eb90
c0019ecc:	6a 00                	push   0x0
c0019ece:	e8 cc 04 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019ed3:	83 c4 0c             	add    esp,0xc
c0019ed6:	6a 00                	push   0x0
c0019ed8:	68 90 eb 00 c0       	push   0xc000eb90
c0019edd:	6a 01                	push   0x1
c0019edf:	e8 bb 04 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019ee4:	83 c4 0c             	add    esp,0xc
c0019ee7:	6a 00                	push   0x0
c0019ee9:	68 80 eb 00 c0       	push   0xc000eb80
c0019eee:	6a 02                	push   0x2
c0019ef0:	e8 aa 04 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019ef5:	83 c4 0c             	add    esp,0xc
c0019ef8:	6a 00                	push   0x0
c0019efa:	68 90 eb 00 c0       	push   0xc000eb90
c0019eff:	6a 03                	push   0x3
c0019f01:	e8 99 04 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f06:	83 c4 0c             	add    esp,0xc
c0019f09:	6a 00                	push   0x0
c0019f0b:	68 90 eb 00 c0       	push   0xc000eb90
c0019f10:	6a 04                	push   0x4
c0019f12:	e8 88 04 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f17:	83 c4 0c             	add    esp,0xc
c0019f1a:	6a 00                	push   0x0
c0019f1c:	68 90 eb 00 c0       	push   0xc000eb90
c0019f21:	6a 05                	push   0x5
c0019f23:	e8 77 04 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f28:	83 c4 0c             	add    esp,0xc
c0019f2b:	6a 00                	push   0x0
c0019f2d:	68 c4 eb 00 c0       	push   0xc000ebc4
c0019f32:	6a 06                	push   0x6
c0019f34:	e8 66 04 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f39:	83 c4 0c             	add    esp,0xc
c0019f3c:	6a 00                	push   0x0
c0019f3e:	68 18 ec 00 c0       	push   0xc000ec18
c0019f43:	6a 08                	push   0x8
c0019f45:	e8 55 04 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f4a:	83 c4 0c             	add    esp,0xc
c0019f4d:	6a 00                	push   0x0
c0019f4f:	68 90 eb 00 c0       	push   0xc000eb90
c0019f54:	6a 09                	push   0x9
c0019f56:	e8 44 04 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f5b:	83 c4 0c             	add    esp,0xc
c0019f5e:	6a 00                	push   0x0
c0019f60:	68 90 eb 00 c0       	push   0xc000eb90
c0019f65:	6a 0a                	push   0xa
c0019f67:	e8 33 04 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f6c:	83 c4 0c             	add    esp,0xc
c0019f6f:	6a 00                	push   0x0
c0019f71:	68 90 eb 00 c0       	push   0xc000eb90
c0019f76:	6a 0b                	push   0xb
c0019f78:	e8 22 04 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f7d:	83 c4 0c             	add    esp,0xc
c0019f80:	6a 00                	push   0x0
c0019f82:	68 c8 ea 00 c0       	push   0xc000eac8
c0019f87:	6a 0d                	push   0xd
c0019f89:	e8 11 04 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f8e:	83 c4 0c             	add    esp,0xc
c0019f91:	6a 00                	push   0x0
c0019f93:	68 1c eb 00 c0       	push   0xc000eb1c
c0019f98:	6a 0e                	push   0xe
c0019f9a:	e8 00 04 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f9f:	83 c4 10             	add    esp,0x10
c0019fa2:	50                   	push   eax
c0019fa3:	6a 00                	push   0x0
c0019fa5:	68 90 eb 00 c0       	push   0xc000eb90
c0019faa:	53                   	push   ebx
c0019fab:	43                   	inc    ebx
c0019fac:	e8 ee 03 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019fb1:	83 c4 10             	add    esp,0x10
c0019fb4:	83 fb 1e             	cmp    ebx,0x1e
c0019fb7:	75 e9                	jne    c0019fa2 <HalInitialise()+0x113>
c0019fb9:	50                   	push   eax
c0019fba:	6a 00                	push   0x0
c0019fbc:	68 65 20 01 c0       	push   0xc0012065
c0019fc1:	6a 60                	push   0x60
c0019fc3:	e8 d7 03 00 00       	call   c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019fc8:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0019fcd:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0019fd7:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0019fde:	e8 01 5b ff ff       	call   c000fae4 <malloc>
c0019fe3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fe6:	89 c3                	mov    ebx,eax
c0019fe8:	e8 ff 0d 00 00       	call   c001adec <RTC::RTC()>
c0019fed:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0019ff7:	5a                   	pop    edx
c0019ff8:	59                   	pop    ecx
c0019ff9:	53                   	push   ebx
c0019ffa:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c001a000:	e8 95 f9 fe ff       	call   c000999a <Device::addChild(Device*)>
c001a005:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a007:	6a 00                	push   0x0
c001a009:	6a 00                	push   0x0
c001a00b:	6a 00                	push   0x0
c001a00d:	53                   	push   ebx
c001a00e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a011:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001a016:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001a01c:	83 c4 28             	add    esp,0x28
c001a01f:	5b                   	pop    ebx
c001a020:	c3                   	ret    

c001a021 <HalMakeBeep(int)>:
c001a021:	53                   	push   ebx
c001a022:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a026:	85 db                	test   ebx,ebx
c001a028:	75 07                	jne    c001a031 <HalMakeBeep(int)+0x10>
c001a02a:	e4 61                	in     al,0x61
c001a02c:	83 e0 fc             	and    eax,0xfffffffc
c001a02f:	eb 26                	jmp    c001a057 <HalMakeBeep(int)+0x36>
c001a031:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a036:	99                   	cdq    
c001a037:	f7 fb                	idiv   ebx
c001a039:	89 c1                	mov    ecx,eax
c001a03b:	b0 b6                	mov    al,0xb6
c001a03d:	e6 43                	out    0x43,al
c001a03f:	88 c8                	mov    al,cl
c001a041:	e6 42                	out    0x42,al
c001a043:	89 c8                	mov    eax,ecx
c001a045:	c1 e8 08             	shr    eax,0x8
c001a048:	e6 42                	out    0x42,al
c001a04a:	e4 61                	in     al,0x61
c001a04c:	89 c2                	mov    edx,eax
c001a04e:	83 ca 03             	or     edx,0x3
c001a051:	38 d0                	cmp    al,dl
c001a053:	74 04                	je     c001a059 <HalMakeBeep(int)+0x38>
c001a055:	88 d0                	mov    al,dl
c001a057:	e6 61                	out    0x61,al
c001a059:	5b                   	pop    ebx
c001a05a:	c3                   	ret    

c001a05b <HalGetRand()>:
c001a05b:	31 c0                	xor    eax,eax
c001a05d:	c3                   	ret    

c001a05e <HalEndOfInterrupt(int)>:
c001a05e:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c001a065:	74 1d                	je     c001a084 <HalEndOfInterrupt(int)+0x26>
c001a067:	83 ec 18             	sub    esp,0x18
c001a06a:	6a 1b                	push   0x1b
c001a06c:	e8 0c f5 ff ff       	call   c001957d <x86rdmsr(unsigned int)>
c001a071:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a076:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a080:	83 c4 1c             	add    esp,0x1c
c001a083:	c3                   	ret    
c001a084:	e9 7f 07 00 00       	jmp    c001a808 <picEOI(int)>

c001a089 <HalRestart()>:
c001a089:	c3                   	ret    

c001a08a <HalShutdown()>:
c001a08a:	c3                   	ret    

c001a08b <HalSleep()>:
c001a08b:	c3                   	ret    

c001a08c <CPU::CPU()>:
c001a08c:	83 ec 0c             	sub    esp,0xc
c001a08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a093:	83 ec 08             	sub    esp,0x8
c001a096:	68 b3 50 02 c0       	push   0xc00250b3
c001a09b:	50                   	push   eax
c001a09c:	e8 5b fa fe ff       	call   c0009afc <Device::Device(char const*)>
c001a0a1:	83 c4 10             	add    esp,0x10
c001a0a4:	ba 10 54 02 c0       	mov    edx,0xc0025410
c001a0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ad:	89 10                	mov    DWORD PTR [eax],edx
c001a0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0b3:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0c1:	05 64 01 00 00       	add    eax,0x164
c001a0c6:	83 ec 0c             	sub    esp,0xc
c001a0c9:	50                   	push   eax
c001a0ca:	e8 9d 4b ff ff       	call   c000ec6c <GDT::GDT()>
c001a0cf:	83 c4 10             	add    esp,0x10
c001a0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0d6:	05 68 09 00 00       	add    eax,0x968
c001a0db:	83 ec 0c             	sub    esp,0xc
c001a0de:	50                   	push   eax
c001a0df:	e8 dc 4d ff ff       	call   c000eec0 <IDT::IDT()>
c001a0e4:	83 c4 10             	add    esp,0x10
c001a0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0eb:	05 68 11 00 00       	add    eax,0x1168
c001a0f0:	83 ec 0c             	sub    esp,0xc
c001a0f3:	50                   	push   eax
c001a0f4:	e8 8f 8a ff ff       	call   c0012b88 <TSS::TSS()>
c001a0f9:	83 c4 10             	add    esp,0x10
c001a0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a100:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001a10a:	90                   	nop
c001a10b:	83 c4 0c             	add    esp,0xc
c001a10e:	c3                   	ret    
c001a10f:	90                   	nop

c001a110 <CPU::setupSMEP()>:
c001a110:	0f 20 e0             	mov    eax,cr4
c001a113:	0d 00 00 10 00       	or     eax,0x100000
c001a118:	0f 22 e0             	mov    cr4,eax
c001a11b:	c3                   	ret    

c001a11c <CPU::setupUMIP()>:
c001a11c:	0f 20 e0             	mov    eax,cr4
c001a11f:	80 cc 08             	or     ah,0x8
c001a122:	0f 22 e0             	mov    cr4,eax
c001a125:	c3                   	ret    

c001a126 <CPU::setupTSC()>:
c001a126:	0f 20 e0             	mov    eax,cr4
c001a129:	83 c8 04             	or     eax,0x4
c001a12c:	0f 22 e0             	mov    cr4,eax
c001a12f:	c3                   	ret    

c001a130 <CPU::setupLargePages()>:
c001a130:	0f 20 e0             	mov    eax,cr4
c001a133:	83 c8 10             	or     eax,0x10
c001a136:	0f 22 e0             	mov    cr4,eax
c001a139:	c3                   	ret    

c001a13a <CPU::setupPAT()>:
c001a13a:	f6 05 0c eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0c,0x8
c001a141:	74 28                	je     c001a16b <CPU::setupPAT()+0x31>
c001a143:	53                   	push   ebx
c001a144:	83 ec 14             	sub    esp,0x14
c001a147:	68 77 02 00 00       	push   0x277
c001a14c:	e8 2c f4 ff ff       	call   c001957d <x86rdmsr(unsigned int)>
c001a151:	83 c4 0c             	add    esp,0xc
c001a154:	83 e2 f8             	and    edx,0xfffffff8
c001a157:	83 ca 01             	or     edx,0x1
c001a15a:	52                   	push   edx
c001a15b:	50                   	push   eax
c001a15c:	68 77 02 00 00       	push   0x277
c001a161:	e8 55 f4 ff ff       	call   c00195bb <x86wrmsr(unsigned int, unsigned long long)>
c001a166:	83 c4 18             	add    esp,0x18
c001a169:	5b                   	pop    ebx
c001a16a:	c3                   	ret    
c001a16b:	c3                   	ret    

c001a16c <CPU::setupMTRR()>:
c001a16c:	c3                   	ret    
c001a16d:	90                   	nop

c001a16e <CPU::setupGlobalPages()>:
c001a16e:	0f 20 e0             	mov    eax,cr4
c001a171:	0c 80                	or     al,0x80
c001a173:	0f 22 e0             	mov    cr4,eax
c001a176:	c3                   	ret    
c001a177:	90                   	nop

c001a178 <CPU::allowUsermodeDataAccess()>:
c001a178:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c001a17f:	74 03                	je     c001a184 <CPU::allowUsermodeDataAccess()+0xc>
c001a181:	0f 01 cb             	stac   
c001a184:	c3                   	ret    
c001a185:	90                   	nop

c001a186 <CPU::prohibitUsermodeDataAccess()>:
c001a186:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c001a18d:	74 03                	je     c001a192 <CPU::prohibitUsermodeDataAccess()+0xc>
c001a18f:	0f 01 ca             	clac   
c001a192:	c3                   	ret    
c001a193:	90                   	nop

c001a194 <CPU::setupSMAP()>:
c001a194:	0f 20 e0             	mov    eax,cr4
c001a197:	0d 00 00 20 00       	or     eax,0x200000
c001a19c:	0f 22 e0             	mov    cr4,eax
c001a19f:	eb e5                	jmp    c001a186 <CPU::prohibitUsermodeDataAccess()>
c001a1a1:	90                   	nop

c001a1a2 <CPU::setupFeatures()>:
c001a1a2:	53                   	push   ebx
c001a1a3:	83 ec 08             	sub    esp,0x8
c001a1a6:	f6 05 0f eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0f,0x20
c001a1ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a1b1:	74 18                	je     c001a1cb <CPU::setupFeatures()+0x29>
c001a1b3:	83 ec 0c             	sub    esp,0xc
c001a1b6:	68 4c 53 02 c0       	push   0xc002534c
c001a1bb:	e8 8e cd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a1c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1c3:	e8 54 ff ff ff       	call   c001a11c <CPU::setupUMIP()>
c001a1c8:	83 c4 10             	add    esp,0x10
c001a1cb:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c001a1d2:	74 18                	je     c001a1ec <CPU::setupFeatures()+0x4a>
c001a1d4:	83 ec 0c             	sub    esp,0xc
c001a1d7:	68 56 53 02 c0       	push   0xc0025356
c001a1dc:	e8 6d cd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a1e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1e4:	e8 3d ff ff ff       	call   c001a126 <CPU::setupTSC()>
c001a1e9:	83 c4 10             	add    esp,0x10
c001a1ec:	f6 05 0e eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0e,0x20
c001a1f3:	74 18                	je     c001a20d <CPU::setupFeatures()+0x6b>
c001a1f5:	83 ec 0c             	sub    esp,0xc
c001a1f8:	68 5f 53 02 c0       	push   0xc002535f
c001a1fd:	e8 4c cd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a202:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a205:	e8 26 ff ff ff       	call   c001a130 <CPU::setupLargePages()>
c001a20a:	83 c4 10             	add    esp,0x10
c001a20d:	f6 05 0e eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0e,0x40
c001a214:	74 18                	je     c001a22e <CPU::setupFeatures()+0x8c>
c001a216:	83 ec 0c             	sub    esp,0xc
c001a219:	68 68 53 02 c0       	push   0xc0025368
c001a21e:	e8 2b cd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a223:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a226:	e8 43 ff ff ff       	call   c001a16e <CPU::setupGlobalPages()>
c001a22b:	83 c4 10             	add    esp,0x10
c001a22e:	f6 05 0e eb 02 c0 80 	test   BYTE PTR ds:0xc002eb0e,0x80
c001a235:	74 18                	je     c001a24f <CPU::setupFeatures()+0xad>
c001a237:	83 ec 0c             	sub    esp,0xc
c001a23a:	68 7a 53 02 c0       	push   0xc002537a
c001a23f:	e8 0a cd fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a244:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a247:	e8 ee fe ff ff       	call   c001a13a <CPU::setupPAT()>
c001a24c:	83 c4 10             	add    esp,0x10
c001a24f:	f6 05 10 eb 02 c0 04 	test   BYTE PTR ds:0xc002eb10,0x4
c001a256:	74 11                	je     c001a269 <CPU::setupFeatures()+0xc7>
c001a258:	c7 44 24 10 83 53 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025383
c001a260:	83 c4 08             	add    esp,0x8
c001a263:	5b                   	pop    ebx
c001a264:	e9 e5 cc fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c001a269:	83 c4 08             	add    esp,0x8
c001a26c:	5b                   	pop    ebx
c001a26d:	c3                   	ret    

c001a26e <CPU::open(int, int, void*)>:
c001a26e:	55                   	push   ebp
c001a26f:	57                   	push   edi
c001a270:	56                   	push   esi
c001a271:	53                   	push   ebx
c001a272:	83 ec 18             	sub    esp,0x18
c001a275:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a279:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a27d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a281:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001a287:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001a28d:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001a293:	50                   	push   eax
c001a294:	e8 35 4a ff ff       	call   c000ecce <GDT::setup()>
c001a299:	83 c4 0c             	add    esp,0xc
c001a29c:	6a 00                	push   0x0
c001a29e:	68 ef be ad de       	push   0xdeadbeef
c001a2a3:	55                   	push   ebp
c001a2a4:	e8 23 89 ff ff       	call   c0012bcc <TSS::setup(unsigned long, unsigned long)>
c001a2a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a2ac:	e8 fb 88 ff ff       	call   c0012bac <TSS::flush()>
c001a2b1:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001a2b7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2ba:	e8 77 4c ff ff       	call   c000ef36 <IDT::setup()>
c001a2bf:	b8 00 04 00 00       	mov    eax,0x400
c001a2c4:	0f 23 f8             	mov    dr7,eax
c001a2c7:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001a2d1:	e8 4e 5d ff ff       	call   c0010024 <Phys::allocatePage()>
c001a2d6:	83 c4 10             	add    esp,0x10
c001a2d9:	85 f6                	test   esi,esi
c001a2db:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001a2e1:	89 38                	mov    DWORD PTR [eax],edi
c001a2e3:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a2e9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a2ec:	74 10                	je     c001a2fe <CPU::open(int, int, void*)+0x90>
c001a2ee:	50                   	push   eax
c001a2ef:	50                   	push   eax
c001a2f0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a2f6:	56                   	push   esi
c001a2f7:	e8 80 92 ff ff       	call   c001357c <VAS::setCPUSpecific(unsigned long)>
c001a2fc:	eb 0d                	jmp    c001a30b <CPU::open(int, int, void*)+0x9d>
c001a2fe:	83 ec 0c             	sub    esp,0xc
c001a301:	68 8d 53 02 c0       	push   0xc002538d
c001a306:	e8 1f 5b ff ff       	call   c000fe2a <KePanic(char const*)>
c001a30b:	83 c4 10             	add    esp,0x10
c001a30e:	83 ec 0c             	sub    esp,0xc
c001a311:	68 9b 53 02 c0       	push   0xc002539b
c001a316:	e8 80 2e ff ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001a31b:	e8 6f fb ff ff       	call   c0019e8f <HalInitialise()>
c001a320:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c001a325:	83 e0 10             	and    eax,0x10
c001a328:	83 f8 01             	cmp    eax,0x1
c001a32b:	19 c0                	sbb    eax,eax
c001a32d:	83 e0 46             	and    eax,0x46
c001a330:	83 c0 1e             	add    eax,0x1e
c001a333:	89 04 24             	mov    DWORD PTR [esp],eax
c001a336:	e8 fa 0c ff ff       	call   c000b035 <setupTimer(int)>
c001a33b:	83 c4 10             	add    esp,0x10
c001a33e:	f6 05 24 e1 02 c0 20 	test   BYTE PTR ds:0xc002e124,0x20
c001a345:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001a34b:	74 0c                	je     c001a359 <CPU::open(int, int, void*)+0xeb>
c001a34d:	83 ec 0c             	sub    esp,0xc
c001a350:	53                   	push   ebx
c001a351:	e8 4c fe ff ff       	call   c001a1a2 <CPU::setupFeatures()>
c001a356:	83 c4 10             	add    esp,0x10
c001a359:	83 c4 0c             	add    esp,0xc
c001a35c:	31 c0                	xor    eax,eax
c001a35e:	5b                   	pop    ebx
c001a35f:	5e                   	pop    esi
c001a360:	5f                   	pop    edi
c001a361:	5d                   	pop    ebp
c001a362:	c3                   	ret    

c001a363 <convertLegacyIRQNumber(int)>:
c001a363:	83 ec 0c             	sub    esp,0xc
c001a366:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a36d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a371:	74 0c                	je     c001a37f <convertLegacyIRQNumber(int)+0x1c>
c001a373:	83 f8 0f             	cmp    eax,0xf
c001a376:	7f 0b                	jg     c001a383 <convertLegacyIRQNumber(int)+0x20>
c001a378:	0f b6 80 88 5f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda078]
c001a37f:	83 c4 0c             	add    esp,0xc
c001a382:	c3                   	ret    
c001a383:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a387:	83 ec 0c             	sub    esp,0xc
c001a38a:	68 34 54 02 c0       	push   0xc0025434
c001a38f:	e8 96 5a ff ff       	call   c000fe2a <KePanic(char const*)>
c001a394:	83 c4 10             	add    esp,0x10
c001a397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a39b:	83 c4 0c             	add    esp,0xc
c001a39e:	c3                   	ret    

c001a39f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001a39f:	56                   	push   esi
c001a3a0:	31 c0                	xor    eax,eax
c001a3a2:	53                   	push   ebx
c001a3a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a3a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a3af:	89 ca                	mov    edx,ecx
c001a3b1:	c1 e2 04             	shl    edx,0x4
c001a3b4:	83 bc 82 e0 d0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd2f20],0x0
c001a3bc:	74 17                	je     c001a3d5 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001a3be:	83 c0 01             	add    eax,0x1
c001a3c1:	83 f8 04             	cmp    eax,0x4
c001a3c4:	75 ee                	jne    c001a3b4 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001a3c6:	c7 44 24 0c 95 54 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025495
c001a3ce:	5b                   	pop    ebx
c001a3cf:	5e                   	pop    esi
c001a3d0:	e9 55 5a ff ff       	jmp    c000fe2a <KePanic(char const*)>
c001a3d5:	8d 04 88             	lea    eax,[eax+ecx*4]
c001a3d8:	89 1c 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],ebx
c001a3df:	5b                   	pop    ebx
c001a3e0:	89 34 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],esi
c001a3e7:	5e                   	pop    esi
c001a3e8:	c3                   	ret    

c001a3e9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001a3e9:	55                   	push   ebp
c001a3ea:	57                   	push   edi
c001a3eb:	56                   	push   esi
c001a3ec:	53                   	push   ebx
c001a3ed:	83 ec 0c             	sub    esp,0xc
c001a3f0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3f4:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a3fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a3ff:	8d 6e 20             	lea    ebp,[esi+0x20]
c001a402:	74 57                	je     c001a45b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001a404:	84 c0                	test   al,al
c001a406:	89 c7                	mov    edi,eax
c001a408:	74 1d                	je     c001a427 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001a40a:	83 fe 0f             	cmp    esi,0xf
c001a40d:	0f 8f d9 00 00 00    	jg     c001a4ec <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001a413:	0f b6 b6 88 5f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda078]
c001a41a:	0f b7 bc 36 20 be 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd41e0]
c001a422:	d1 ef                	shr    edi,1
c001a424:	83 e7 01             	and    edi,0x1
c001a427:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a42c:	83 ec 08             	sub    esp,0x8
c001a42f:	31 db                	xor    ebx,ebx
c001a431:	50                   	push   eax
c001a432:	68 a2 54 02 c0       	push   0xc00254a2
c001a437:	e8 12 cb fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a43c:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a441:	83 c4 10             	add    esp,0x10
c001a444:	85 c0                	test   eax,eax
c001a446:	7f 59                	jg     c001a4a1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001a448:	8d 6e 20             	lea    ebp,[esi+0x20]
c001a44b:	83 ec 0c             	sub    esp,0xc
c001a44e:	68 b9 54 02 c0       	push   0xc00254b9
c001a453:	e8 d2 59 ff ff       	call   c000fe2a <KePanic(char const*)>
c001a458:	83 c4 10             	add    esp,0x10
c001a45b:	89 e8                	mov    eax,ebp
c001a45d:	31 d2                	xor    edx,edx
c001a45f:	c1 e0 04             	shl    eax,0x4
c001a462:	8b 8c 90 e0 d0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd2f20]
c001a469:	85 c9                	test   ecx,ecx
c001a46b:	0f 84 92 00 00 00    	je     c001a503 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001a471:	83 c2 01             	add    edx,0x1
c001a474:	83 fa 04             	cmp    edx,0x4
c001a477:	75 e9                	jne    c001a462 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001a479:	83 ec 0c             	sub    esp,0xc
c001a47c:	68 70 54 02 c0       	push   0xc0025470
c001a481:	e8 a4 59 ff ff       	call   c000fe2a <KePanic(char const*)>
c001a486:	83 c4 10             	add    esp,0x10
c001a489:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a48e:	83 c4 0c             	add    esp,0xc
c001a491:	5b                   	pop    ebx
c001a492:	5e                   	pop    esi
c001a493:	5f                   	pop    edi
c001a494:	5d                   	pop    ebp
c001a495:	c3                   	ret    
c001a496:	83 c3 01             	add    ebx,0x1
c001a499:	39 1d 60 f4 02 c0    	cmp    DWORD PTR ds:0xc002f460,ebx
c001a49f:	7e a7                	jle    c001a448 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001a4a1:	8b 2c 9d 80 f4 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd0b80]
c001a4a8:	83 ec 08             	sub    esp,0x8
c001a4ab:	56                   	push   esi
c001a4ac:	55                   	push   ebp
c001a4ad:	e8 a4 66 00 00       	call   c0020b56 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001a4b2:	83 c4 10             	add    esp,0x10
c001a4b5:	84 c0                	test   al,al
c001a4b7:	74 dd                	je     c001a496 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001a4b9:	89 f8                	mov    eax,edi
c001a4bb:	83 ec 04             	sub    esp,0x4
c001a4be:	8b 1c 9d 80 f4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0b80]
c001a4c5:	8d 6e 20             	lea    ebp,[esi+0x20]
c001a4c8:	0f b6 f8             	movzx  edi,al
c001a4cb:	57                   	push   edi
c001a4cc:	89 e8                	mov    eax,ebp
c001a4ce:	6a 00                	push   0x0
c001a4d0:	0f b6 c0             	movzx  eax,al
c001a4d3:	50                   	push   eax
c001a4d4:	89 f0                	mov    eax,esi
c001a4d6:	6a 00                	push   0x0
c001a4d8:	0f b6 c0             	movzx  eax,al
c001a4db:	6a 00                	push   0x0
c001a4dd:	50                   	push   eax
c001a4de:	53                   	push   ebx
c001a4df:	e8 de 67 00 00       	call   c0020cc2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001a4e4:	83 c4 20             	add    esp,0x20
c001a4e7:	e9 6f ff ff ff       	jmp    c001a45b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001a4ec:	83 ec 0c             	sub    esp,0xc
c001a4ef:	31 ff                	xor    edi,edi
c001a4f1:	68 34 54 02 c0       	push   0xc0025434
c001a4f6:	e8 2f 59 ff ff       	call   c000fe2a <KePanic(char const*)>
c001a4fb:	83 c4 10             	add    esp,0x10
c001a4fe:	e9 24 ff ff ff       	jmp    c001a427 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001a503:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001a506:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a50a:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001a511:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a515:	89 14 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],edx
c001a51c:	83 c4 0c             	add    esp,0xc
c001a51f:	89 f0                	mov    eax,esi
c001a521:	5b                   	pop    ebx
c001a522:	5e                   	pop    esi
c001a523:	5f                   	pop    edi
c001a524:	5d                   	pop    ebp
c001a525:	c3                   	ret    

c001a526 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001a526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a52a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a52e:	c1 e0 04             	shl    eax,0x4
c001a531:	8d 50 10             	lea    edx,[eax+0x10]
c001a534:	39 88 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],ecx
c001a53a:	74 08                	je     c001a544 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001a53c:	83 c0 04             	add    eax,0x4
c001a53f:	39 d0                	cmp    eax,edx
c001a541:	75 f1                	jne    c001a534 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001a543:	c3                   	ret    
c001a544:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a54e:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a558:	eb e2                	jmp    c001a53c <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001a55a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001a55a:	56                   	push   esi
c001a55b:	53                   	push   ebx
c001a55c:	83 ec 04             	sub    esp,0x4
c001a55f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a564:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a568:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a56c:	74 09                	je     c001a577 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001a56e:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a575:	75 34                	jne    c001a5ab <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001a577:	8d 43 20             	lea    eax,[ebx+0x20]
c001a57a:	c1 e0 04             	shl    eax,0x4
c001a57d:	8d 50 10             	lea    edx,[eax+0x10]
c001a580:	39 b0 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],esi
c001a586:	74 0d                	je     c001a595 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001a588:	83 c0 04             	add    eax,0x4
c001a58b:	39 d0                	cmp    eax,edx
c001a58d:	75 f1                	jne    c001a580 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001a58f:	83 c4 04             	add    esp,0x4
c001a592:	5b                   	pop    ebx
c001a593:	5e                   	pop    esi
c001a594:	c3                   	ret    
c001a595:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a59f:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a5a9:	eb dd                	jmp    c001a588 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001a5ab:	83 fb 0f             	cmp    ebx,0xf
c001a5ae:	7f 09                	jg     c001a5b9 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001a5b0:	0f b6 9b 88 5f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda078]
c001a5b7:	eb be                	jmp    c001a577 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001a5b9:	83 ec 0c             	sub    esp,0xc
c001a5bc:	68 c6 54 02 c0       	push   0xc00254c6
c001a5c1:	e8 64 58 ff ff       	call   c000fe2a <KePanic(char const*)>
c001a5c6:	83 c4 10             	add    esp,0x10
c001a5c9:	eb ac                	jmp    c001a577 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001a5cb:	90                   	nop

c001a5cc <picIoWait()>:
c001a5cc:	eb 00                	jmp    c001a5ce <picIoWait()+0x2>
c001a5ce:	eb 00                	jmp    c001a5d0 <picIoWait()+0x4>
c001a5d0:	90                   	nop
c001a5d1:	c3                   	ret    
c001a5d2:	66 90                	xchg   ax,ax

c001a5d4 <picDisable()>:
c001a5d4:	83 ec 10             	sub    esp,0x10
c001a5d7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001a5de:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001a5e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5e7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a5ec:	ee                   	out    dx,al
c001a5ed:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001a5f4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001a5f9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a5fd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001a602:	ee                   	out    dx,al
c001a603:	90                   	nop
c001a604:	83 c4 10             	add    esp,0x10
c001a607:	c3                   	ret    

c001a608 <picGetIRQReg(int)>:
c001a608:	83 ec 10             	sub    esp,0x10
c001a60b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a60f:	0f b6 c0             	movzx  eax,al
c001a612:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a619:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001a61d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a621:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a626:	ee                   	out    dx,al
c001a627:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a62b:	0f b6 c0             	movzx  eax,al
c001a62e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a635:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001a639:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a63d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a642:	ee                   	out    dx,al
c001a643:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001a64a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001a64f:	89 c2                	mov    edx,eax
c001a651:	ec                   	in     al,dx
c001a652:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a656:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a65a:	0f b6 c0             	movzx  eax,al
c001a65d:	c1 e0 08             	shl    eax,0x8
c001a660:	89 c1                	mov    ecx,eax
c001a662:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001a669:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001a66e:	89 c2                	mov    edx,eax
c001a670:	ec                   	in     al,dx
c001a671:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a675:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a679:	0f b6 c0             	movzx  eax,al
c001a67c:	09 c8                	or     eax,ecx
c001a67e:	83 c4 10             	add    esp,0x10
c001a681:	c3                   	ret    
c001a682:	66 90                	xchg   ax,ax

c001a684 <picOpen()>:
c001a684:	83 ec 50             	sub    esp,0x50
c001a687:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001a68e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001a693:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a697:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a69b:	ee                   	out    dx,al
c001a69c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001a6a3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a6a8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a6ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6b0:	ee                   	out    dx,al
c001a6b1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001a6b9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001a6c1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001a6c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a6cc:	89 c2                	mov    edx,eax
c001a6ce:	ec                   	in     al,dx
c001a6cf:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001a6d3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a6d7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001a6db:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001a6e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a6e6:	89 c2                	mov    edx,eax
c001a6e8:	ec                   	in     al,dx
c001a6e9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a6ed:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a6f1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001a6f5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001a6fc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001a701:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001a705:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a709:	ee                   	out    dx,al
c001a70a:	e8 bd fe ff ff       	call   c001a5cc <picIoWait()>
c001a70f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001a716:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001a71b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001a71f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a723:	ee                   	out    dx,al
c001a724:	e8 a3 fe ff ff       	call   c001a5cc <picIoWait()>
c001a729:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a72d:	0f b6 c0             	movzx  eax,al
c001a730:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001a737:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001a73b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001a73f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a743:	ee                   	out    dx,al
c001a744:	e8 83 fe ff ff       	call   c001a5cc <picIoWait()>
c001a749:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a74d:	0f b6 c0             	movzx  eax,al
c001a750:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001a757:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a75b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001a75f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a763:	ee                   	out    dx,al
c001a764:	e8 63 fe ff ff       	call   c001a5cc <picIoWait()>
c001a769:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001a770:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001a775:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001a779:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a77d:	ee                   	out    dx,al
c001a77e:	e8 49 fe ff ff       	call   c001a5cc <picIoWait()>
c001a783:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001a78a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001a78f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a793:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a797:	ee                   	out    dx,al
c001a798:	e8 2f fe ff ff       	call   c001a5cc <picIoWait()>
c001a79d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001a7a4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001a7a9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001a7ad:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a7b1:	ee                   	out    dx,al
c001a7b2:	e8 15 fe ff ff       	call   c001a5cc <picIoWait()>
c001a7b7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001a7be:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001a7c3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001a7c7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a7cb:	ee                   	out    dx,al
c001a7cc:	e8 fb fd ff ff       	call   c001a5cc <picIoWait()>
c001a7d1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001a7d6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001a7dd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001a7e1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001a7e5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a7e9:	ee                   	out    dx,al
c001a7ea:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001a7ef:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001a7f6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a7fa:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001a7fe:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001a802:	ee                   	out    dx,al
c001a803:	90                   	nop
c001a804:	83 c4 50             	add    esp,0x50
c001a807:	c3                   	ret    

c001a808 <picEOI(int)>:
c001a808:	83 ec 10             	sub    esp,0x10
c001a80b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a810:	75 1e                	jne    c001a830 <picEOI(int)+0x28>
c001a812:	6a 0b                	push   0xb
c001a814:	e8 ef fd ff ff       	call   c001a608 <picGetIRQReg(int)>
c001a819:	83 c4 04             	add    esp,0x4
c001a81c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001a821:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001a826:	25 80 00 00 00       	and    eax,0x80
c001a82b:	74 73                	je     c001a8a0 <picEOI(int)+0x98>
c001a82d:	8d 76 00             	lea    esi,[esi+0x0]
c001a830:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001a835:	75 31                	jne    c001a868 <picEOI(int)+0x60>
c001a837:	6a 0b                	push   0xb
c001a839:	e8 ca fd ff ff       	call   c001a608 <picGetIRQReg(int)>
c001a83e:	83 c4 04             	add    esp,0x4
c001a841:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001a846:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a84a:	98                   	cwde   
c001a84b:	85 c0                	test   eax,eax
c001a84d:	78 19                	js     c001a868 <picEOI(int)+0x60>
c001a84f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001a856:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001a85b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a85f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a864:	ee                   	out    dx,al
c001a865:	eb 3d                	jmp    c001a8a4 <picEOI(int)+0x9c>
c001a867:	90                   	nop
c001a868:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a86d:	7e 19                	jle    c001a888 <picEOI(int)+0x80>
c001a86f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a876:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001a87b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a87f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a884:	ee                   	out    dx,al
c001a885:	8d 76 00             	lea    esi,[esi+0x0]
c001a888:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a88f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001a894:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a898:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a89d:	ee                   	out    dx,al
c001a89e:	eb 04                	jmp    c001a8a4 <picEOI(int)+0x9c>
c001a8a0:	90                   	nop
c001a8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8a4:	83 c4 10             	add    esp,0x10
c001a8a7:	c3                   	ret    

c001a8a8 <RTC::open(int, int, void*)>:
c001a8a8:	31 c0                	xor    eax,eax
c001a8aa:	c3                   	ret    
c001a8ab:	90                   	nop

c001a8ac <RTC::close(int, int, void*)>:
c001a8ac:	31 c0                	xor    eax,eax
c001a8ae:	c3                   	ret    
c001a8af:	90                   	nop

c001a8b0 <RTC::timeInSecondsUTC()>:
c001a8b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8b4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001a8ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a8c0:	c3                   	ret    
c001a8c1:	90                   	nop

c001a8c2 <RTC::timeInDatetimeUTC()>:
c001a8c2:	53                   	push   ebx
c001a8c3:	83 ec 14             	sub    esp,0x14
c001a8c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a8ce:	8b 10                	mov    edx,DWORD PTR [eax]
c001a8d0:	50                   	push   eax
c001a8d1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001a8d4:	83 c4 0c             	add    esp,0xc
c001a8d7:	52                   	push   edx
c001a8d8:	50                   	push   eax
c001a8d9:	53                   	push   ebx
c001a8da:	e8 d9 ec fe ff       	call   c00095b8 <KeSecondsToDatetime(unsigned long long)>
c001a8df:	89 d8                	mov    eax,ebx
c001a8e1:	83 c4 14             	add    esp,0x14
c001a8e4:	5b                   	pop    ebx
c001a8e5:	c2 04 00             	ret    0x4

c001a8e8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001a8e8:	56                   	push   esi
c001a8e9:	53                   	push   ebx
c001a8ea:	83 ec 14             	sub    esp,0x14
c001a8ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a8f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8f3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001a8f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a8fa:	52                   	push   edx
c001a8fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a903:	50                   	push   eax
c001a904:	e8 af ec fe ff       	call   c00095b8 <KeSecondsToDatetime(unsigned long long)>
c001a909:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001a90d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a911:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a915:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a919:	89 f0                	mov    eax,esi
c001a91b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a91f:	83 c4 20             	add    esp,0x20
c001a922:	5b                   	pop    ebx
c001a923:	5e                   	pop    esi
c001a924:	ff e0                	jmp    eax

c001a926 <RTC::~RTC()>:
c001a926:	83 ec 0c             	sub    esp,0xc
c001a929:	ba f0 54 02 c0       	mov    edx,0xc00254f0
c001a92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a932:	89 10                	mov    DWORD PTR [eax],edx
c001a934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a938:	83 ec 0c             	sub    esp,0xc
c001a93b:	50                   	push   eax
c001a93c:	e8 4f e7 fe ff       	call   c0009090 <Clock::~Clock()>
c001a941:	83 c4 10             	add    esp,0x10
c001a944:	90                   	nop
c001a945:	83 c4 0c             	add    esp,0xc
c001a948:	c3                   	ret    
c001a949:	90                   	nop

c001a94a <RTC::~RTC()>:
c001a94a:	83 ec 0c             	sub    esp,0xc
c001a94d:	83 ec 0c             	sub    esp,0xc
c001a950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a954:	e8 cd ff ff ff       	call   c001a926 <RTC::~RTC()>
c001a959:	83 c4 10             	add    esp,0x10
c001a95c:	83 ec 08             	sub    esp,0x8
c001a95f:	68 60 01 00 00       	push   0x160
c001a964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a968:	e8 ee 28 ff ff       	call   c000d25b <operator delete(void*, unsigned long)>
c001a96d:	83 c4 10             	add    esp,0x10
c001a970:	83 c4 0c             	add    esp,0xc
c001a973:	c3                   	ret    

c001a974 <RTC::get_update_in_progress_flag()>:
c001a974:	83 ec 18             	sub    esp,0x18
c001a977:	6a 0a                	push   0xa
c001a979:	e8 01 db ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001a97e:	83 c4 1c             	add    esp,0x1c
c001a981:	0f b6 c0             	movzx  eax,al
c001a984:	c1 e8 07             	shr    eax,0x7
c001a987:	c3                   	ret    

c001a988 <RTC::completeRTCRefresh()>:
c001a988:	55                   	push   ebp
c001a989:	57                   	push   edi
c001a98a:	56                   	push   esi
c001a98b:	53                   	push   ebx
c001a98c:	83 ec 3c             	sub    esp,0x3c
c001a98f:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001a995:	83 ec 0c             	sub    esp,0xc
c001a998:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a99c:	e8 d3 ff ff ff       	call   c001a974 <RTC::get_update_in_progress_flag()>
c001a9a1:	83 c4 10             	add    esp,0x10
c001a9a4:	84 c0                	test   al,al
c001a9a6:	74 0e                	je     c001a9b6 <RTC::completeRTCRefresh()+0x2e>
c001a9a8:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001a9ae:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001a9b4:	73 df                	jae    c001a995 <RTC::completeRTCRefresh()+0xd>
c001a9b6:	83 ec 0c             	sub    esp,0xc
c001a9b9:	6a 00                	push   0x0
c001a9bb:	e8 bf da ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001a9c0:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001a9c7:	89 c7                	mov    edi,eax
c001a9c9:	e8 b1 da ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001a9ce:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001a9d5:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001a9d9:	e8 a1 da ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001a9de:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001a9e5:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001a9e9:	e8 91 da ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001a9ee:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a9f5:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001a9f9:	e8 81 da ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001a9fe:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001aa05:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001aa09:	e8 71 da ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001aa0e:	0f b6 c0             	movzx  eax,al
c001aa11:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aa15:	83 c4 10             	add    esp,0x10
c001aa18:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001aa1e:	83 ec 0c             	sub    esp,0xc
c001aa21:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001aa25:	e8 4a ff ff ff       	call   c001a974 <RTC::get_update_in_progress_flag()>
c001aa2a:	83 c4 10             	add    esp,0x10
c001aa2d:	84 c0                	test   al,al
c001aa2f:	74 0e                	je     c001aa3f <RTC::completeRTCRefresh()+0xb7>
c001aa31:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001aa37:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001aa3d:	73 df                	jae    c001aa1e <RTC::completeRTCRefresh()+0x96>
c001aa3f:	83 ec 0c             	sub    esp,0xc
c001aa42:	6a 00                	push   0x0
c001aa44:	e8 36 da ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001aa49:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001aa50:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001aa54:	e8 26 da ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001aa59:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001aa60:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001aa64:	e8 16 da ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001aa69:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001aa70:	88 c3                	mov    bl,al
c001aa72:	e8 08 da ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001aa77:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001aa7e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001aa82:	e8 f8 d9 ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001aa87:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001aa8e:	89 c6                	mov    esi,eax
c001aa90:	e8 ea d9 ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001aa95:	89 f9                	mov    ecx,edi
c001aa97:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001aa9b:	83 c4 10             	add    esp,0x10
c001aa9e:	0f b6 e8             	movzx  ebp,al
c001aaa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aaa6:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001aaaa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aaae:	74 27                	je     c001aad7 <RTC::completeRTCRefresh()+0x14f>
c001aab0:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001aab4:	89 f0                	mov    eax,esi
c001aab6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001aaba:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001aabe:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001aac2:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001aac6:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001aaca:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aace:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001aad2:	e9 41 ff ff ff       	jmp    c001aa18 <RTC::completeRTCRefresh()+0x90>
c001aad7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001aadc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001aae0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aae4:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001aae8:	75 c6                	jne    c001aab0 <RTC::completeRTCRefresh()+0x128>
c001aaea:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001aaef:	89 f1                	mov    ecx,esi
c001aaf1:	0f b6 fb             	movzx  edi,bl
c001aaf4:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001aaf8:	0f b6 c9             	movzx  ecx,cl
c001aafb:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001aaff:	89 f1                	mov    ecx,esi
c001ab01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab05:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ab09:	0f 94 c2             	sete   dl
c001ab0c:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001ab10:	0f 94 c0             	sete   al
c001ab13:	21 d0                	and    eax,edx
c001ab15:	31 d2                	xor    edx,edx
c001ab17:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001ab1b:	0f 94 c2             	sete   dl
c001ab1e:	85 c2                	test   edx,eax
c001ab20:	74 8e                	je     c001aab0 <RTC::completeRTCRefresh()+0x128>
c001ab22:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001ab26:	75 88                	jne    c001aab0 <RTC::completeRTCRefresh()+0x128>
c001ab28:	83 ec 0c             	sub    esp,0xc
c001ab2b:	6a 0b                	push   0xb
c001ab2d:	e8 4d d9 ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001ab32:	83 c4 10             	add    esp,0x10
c001ab35:	a8 04                	test   al,0x4
c001ab37:	75 7a                	jne    c001abb3 <RTC::completeRTCRefresh()+0x22b>
c001ab39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ab3d:	c1 ef 04             	shr    edi,0x4
c001ab40:	83 e6 0f             	and    esi,0xf
c001ab43:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ab47:	c1 ed 04             	shr    ebp,0x4
c001ab4a:	6b ed 0a             	imul   ebp,ebp,0xa
c001ab4d:	c1 ea 04             	shr    edx,0x4
c001ab50:	6b d2 0a             	imul   edx,edx,0xa
c001ab53:	83 e1 0f             	and    ecx,0xf
c001ab56:	01 d1                	add    ecx,edx
c001ab58:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ab5c:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001ab60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ab64:	c1 ea 04             	shr    edx,0x4
c001ab67:	6b d2 0a             	imul   edx,edx,0xa
c001ab6a:	83 e1 0f             	and    ecx,0xf
c001ab6d:	01 d1                	add    ecx,edx
c001ab6f:	89 fa                	mov    edx,edi
c001ab71:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001ab75:	83 e2 07             	and    edx,0x7
c001ab78:	89 d9                	mov    ecx,ebx
c001ab7a:	6b d2 0a             	imul   edx,edx,0xa
c001ab7d:	83 e1 0f             	and    ecx,0xf
c001ab80:	83 e3 80             	and    ebx,0xffffff80
c001ab83:	01 d1                	add    ecx,edx
c001ab85:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab89:	09 cb                	or     ebx,ecx
c001ab8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab8f:	c1 ea 04             	shr    edx,0x4
c001ab92:	6b d2 0a             	imul   edx,edx,0xa
c001ab95:	83 e1 0f             	and    ecx,0xf
c001ab98:	01 d1                	add    ecx,edx
c001ab9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ab9e:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001aba2:	c1 ea 04             	shr    edx,0x4
c001aba5:	6b d2 0a             	imul   edx,edx,0xa
c001aba8:	01 d6                	add    esi,edx
c001abaa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abae:	83 e2 0f             	and    edx,0xf
c001abb1:	01 d5                	add    ebp,edx
c001abb3:	a8 02                	test   al,0x2
c001abb5:	75 15                	jne    c001abcc <RTC::completeRTCRefresh()+0x244>
c001abb7:	f6 c3 80             	test   bl,0x80
c001abba:	74 10                	je     c001abcc <RTC::completeRTCRefresh()+0x244>
c001abbc:	83 e3 7f             	and    ebx,0x7f
c001abbf:	b9 18 00 00 00       	mov    ecx,0x18
c001abc4:	8d 43 0c             	lea    eax,[ebx+0xc]
c001abc7:	99                   	cdq    
c001abc8:	f7 f9                	idiv   ecx
c001abca:	88 d3                	mov    bl,dl
c001abcc:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001abd2:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001abd8:	77 06                	ja     c001abe0 <RTC::completeRTCRefresh()+0x258>
c001abda:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001abe0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001abe5:	31 c9                	xor    ecx,ecx
c001abe7:	31 d2                	xor    edx,edx
c001abe9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001abed:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001abf1:	89 cd                	mov    ebp,ecx
c001abf3:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001abf7:	c1 e7 10             	shl    edi,0x10
c001abfa:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001ac00:	c1 e0 10             	shl    eax,0x10
c001ac03:	09 c5                	or     ebp,eax
c001ac05:	89 e9                	mov    ecx,ebp
c001ac07:	0f b7 c2             	movzx  eax,dx
c001ac0a:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001ac0e:	09 f8                	or     eax,edi
c001ac10:	89 c2                	mov    edx,eax
c001ac12:	50                   	push   eax
c001ac13:	50                   	push   eax
c001ac14:	88 d9                	mov    cl,bl
c001ac16:	51                   	push   ecx
c001ac17:	52                   	push   edx
c001ac18:	e8 ab e5 fe ff       	call   c00091c8 <KeDatetimeToSeconds(datetime_t)>
c001ac1d:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001ac21:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001ac27:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001ac2d:	83 c4 4c             	add    esp,0x4c
c001ac30:	5b                   	pop    ebx
c001ac31:	5e                   	pop    esi
c001ac32:	5f                   	pop    edi
c001ac33:	5d                   	pop    ebp
c001ac34:	c3                   	ret    
c001ac35:	90                   	nop

c001ac36 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001ac36:	55                   	push   ebp
c001ac37:	57                   	push   edi
c001ac38:	56                   	push   esi
c001ac39:	53                   	push   ebx
c001ac3a:	83 ec 34             	sub    esp,0x34
c001ac3d:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ac41:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ac45:	6a 00                	push   0x0
c001ac47:	6a 00                	push   0x0
c001ac49:	e8 85 d8 ff ff       	call   c00184d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001ac4e:	5d                   	pop    ebp
c001ac4f:	89 fb                	mov    ebx,edi
c001ac51:	58                   	pop    eax
c001ac52:	6a 00                	push   0x0
c001ac54:	6a 02                	push   0x2
c001ac56:	e8 78 d8 ff ff       	call   c00184d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001ac5b:	89 f8                	mov    eax,edi
c001ac5d:	89 f9                	mov    ecx,edi
c001ac5f:	0f b6 c4             	movzx  eax,ah
c001ac62:	31 d2                	xor    edx,edx
c001ac64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac68:	c1 e9 10             	shr    ecx,0x10
c001ac6b:	89 f0                	mov    eax,esi
c001ac6d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001ac71:	89 f0                	mov    eax,esi
c001ac73:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001ac77:	0f b6 c4             	movzx  eax,ah
c001ac7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac7e:	89 f0                	mov    eax,esi
c001ac80:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001ac84:	c1 e8 10             	shr    eax,0x10
c001ac87:	b9 64 00 00 00       	mov    ecx,0x64
c001ac8c:	f7 f1                	div    ecx
c001ac8e:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001ac95:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ac99:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ac9d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001aca1:	e8 d9 d7 ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001aca6:	83 c4 10             	add    esp,0x10
c001aca9:	a8 04                	test   al,0x4
c001acab:	89 c5                	mov    ebp,eax
c001acad:	75 6e                	jne    c001ad1d <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001acaf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001acb3:	31 d2                	xor    edx,edx
c001acb5:	0f b6 c1             	movzx  eax,cl
c001acb8:	b9 0a 00 00 00       	mov    ecx,0xa
c001acbd:	f7 f1                	div    ecx
c001acbf:	c1 e0 04             	shl    eax,0x4
c001acc2:	09 d0                	or     eax,edx
c001acc4:	31 d2                	xor    edx,edx
c001acc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acca:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001accf:	f7 f1                	div    ecx
c001acd1:	c1 e0 04             	shl    eax,0x4
c001acd4:	09 d0                	or     eax,edx
c001acd6:	31 d2                	xor    edx,edx
c001acd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acdc:	0f b6 c3             	movzx  eax,bl
c001acdf:	f7 f1                	div    ecx
c001ace1:	c1 e0 04             	shl    eax,0x4
c001ace4:	09 d0                	or     eax,edx
c001ace6:	31 d2                	xor    edx,edx
c001ace8:	89 c3                	mov    ebx,eax
c001acea:	89 f0                	mov    eax,esi
c001acec:	0f b6 c0             	movzx  eax,al
c001acef:	f7 f1                	div    ecx
c001acf1:	c1 e0 04             	shl    eax,0x4
c001acf4:	09 d0                	or     eax,edx
c001acf6:	31 d2                	xor    edx,edx
c001acf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acfc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ad01:	f7 f1                	div    ecx
c001ad03:	c1 e0 04             	shl    eax,0x4
c001ad06:	09 d0                	or     eax,edx
c001ad08:	31 d2                	xor    edx,edx
c001ad0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad12:	f7 f1                	div    ecx
c001ad14:	c1 e0 04             	shl    eax,0x4
c001ad17:	09 d0                	or     eax,edx
c001ad19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad1d:	83 e5 02             	and    ebp,0x2
c001ad20:	75 1e                	jne    c001ad40 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001ad22:	0f b6 c3             	movzx  eax,bl
c001ad25:	83 f8 0b             	cmp    eax,0xb
c001ad28:	76 10                	jbe    c001ad3a <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001ad2a:	8d 53 f4             	lea    edx,[ebx-0xc]
c001ad2d:	84 d2                	test   dl,dl
c001ad2f:	88 d3                	mov    bl,dl
c001ad31:	75 02                	jne    c001ad35 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001ad33:	b3 0c                	mov    bl,0xc
c001ad35:	83 cb 80             	or     ebx,0xffffff80
c001ad38:	eb 06                	jmp    c001ad40 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001ad3a:	85 c0                	test   eax,eax
c001ad3c:	75 02                	jne    c001ad40 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001ad3e:	b3 0c                	mov    bl,0xc
c001ad40:	50                   	push   eax
c001ad41:	0f b6 db             	movzx  ebx,bl
c001ad44:	50                   	push   eax
c001ad45:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001ad4a:	52                   	push   edx
c001ad4b:	6a 00                	push   0x0
c001ad4d:	e8 81 d7 ff ff       	call   c00184d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001ad52:	5a                   	pop    edx
c001ad53:	59                   	pop    ecx
c001ad54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ad59:	50                   	push   eax
c001ad5a:	6a 02                	push   0x2
c001ad5c:	e8 72 d7 ff ff       	call   c00184d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001ad61:	5e                   	pop    esi
c001ad62:	5f                   	pop    edi
c001ad63:	53                   	push   ebx
c001ad64:	6a 04                	push   0x4
c001ad66:	e8 68 d7 ff ff       	call   c00184d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001ad6b:	5d                   	pop    ebp
c001ad6c:	58                   	pop    eax
c001ad6d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001ad72:	52                   	push   edx
c001ad73:	6a 07                	push   0x7
c001ad75:	e8 59 d7 ff ff       	call   c00184d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001ad7a:	58                   	pop    eax
c001ad7b:	5a                   	pop    edx
c001ad7c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001ad81:	50                   	push   eax
c001ad82:	6a 08                	push   0x8
c001ad84:	e8 4a d7 ff ff       	call   c00184d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001ad89:	59                   	pop    ecx
c001ad8a:	5b                   	pop    ebx
c001ad8b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001ad90:	55                   	push   ebp
c001ad91:	6a 09                	push   0x9
c001ad93:	e8 3b d7 ff ff       	call   c00184d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001ad98:	5e                   	pop    esi
c001ad99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ad9d:	e8 e6 fb ff ff       	call   c001a988 <RTC::completeRTCRefresh()>
c001ada2:	83 c4 3c             	add    esp,0x3c
c001ada5:	b0 01                	mov    al,0x1
c001ada7:	5b                   	pop    ebx
c001ada8:	5e                   	pop    esi
c001ada9:	5f                   	pop    edi
c001adaa:	5d                   	pop    ebp
c001adab:	c3                   	ret    

c001adac <rtcIRQHandler(regs*, void*)>:
c001adac:	53                   	push   ebx
c001adad:	83 ec 14             	sub    esp,0x14
c001adb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adb4:	6a 0c                	push   0xc
c001adb6:	e8 c4 d6 ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001adbb:	83 c4 10             	add    esp,0x10
c001adbe:	a8 80                	test   al,0x80
c001adc0:	74 24                	je     c001ade6 <rtcIRQHandler(regs*, void*)+0x3a>
c001adc2:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001adc9:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001add0:	66 ff 05 14 eb 02 c0 	inc    WORD PTR ds:0xc002eb14
c001add7:	75 0d                	jne    c001ade6 <rtcIRQHandler(regs*, void*)+0x3a>
c001add9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001addd:	83 c4 08             	add    esp,0x8
c001ade0:	5b                   	pop    ebx
c001ade1:	e9 a2 fb ff ff       	jmp    c001a988 <RTC::completeRTCRefresh()>
c001ade6:	83 c4 08             	add    esp,0x8
c001ade9:	5b                   	pop    ebx
c001adea:	c3                   	ret    
c001adeb:	90                   	nop

c001adec <RTC::RTC()>:
c001adec:	83 ec 1c             	sub    esp,0x1c
c001adef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adf3:	83 ec 08             	sub    esp,0x8
c001adf6:	68 d3 54 02 c0       	push   0xc00254d3
c001adfb:	50                   	push   eax
c001adfc:	e8 59 e2 fe ff       	call   c000905a <Clock::Clock(char const*)>
c001ae01:	83 c4 10             	add    esp,0x10
c001ae04:	ba f0 54 02 c0       	mov    edx,0xc00254f0
c001ae09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae0d:	89 10                	mov    DWORD PTR [eax],edx
c001ae0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae13:	83 ec 0c             	sub    esp,0xc
c001ae16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae1a:	6a 01                	push   0x1
c001ae1c:	68 ac ad 01 c0       	push   0xc001adac
c001ae21:	6a 08                	push   0x8
c001ae23:	50                   	push   eax
c001ae24:	e8 1d eb fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ae29:	83 c4 20             	add    esp,0x20
c001ae2c:	89 c2                	mov    edx,eax
c001ae2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae32:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ae38:	fa                   	cli    
c001ae39:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001ae3e:	83 c0 01             	add    eax,0x1
c001ae41:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001ae46:	83 ec 0c             	sub    esp,0xc
c001ae49:	6a 0b                	push   0xb
c001ae4b:	e8 2f d6 ff ff       	call   c001847f <x86ReadCMOS(unsigned char)>
c001ae50:	83 c4 10             	add    esp,0x10
c001ae53:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ae57:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ae5b:	83 c8 10             	or     eax,0x10
c001ae5e:	0f b6 c0             	movzx  eax,al
c001ae61:	83 ec 08             	sub    esp,0x8
c001ae64:	50                   	push   eax
c001ae65:	6a 0b                	push   0xb
c001ae67:	e8 67 d6 ff ff       	call   c00184d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001ae6c:	83 c4 10             	add    esp,0x10
c001ae6f:	83 ec 0c             	sub    esp,0xc
c001ae72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae76:	e8 0d fb ff ff       	call   c001a988 <RTC::completeRTCRefresh()>
c001ae7b:	83 c4 10             	add    esp,0x10
c001ae7e:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001ae86:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001ae8b:	85 c0                	test   eax,eax
c001ae8d:	75 01                	jne    c001ae90 <RTC::RTC()+0xa4>
c001ae8f:	fb                   	sti    
c001ae90:	90                   	nop
c001ae91:	83 c4 1c             	add    esp,0x1c
c001ae94:	c3                   	ret    
c001ae95:	66 90                	xchg   ax,ax
c001ae97:	90                   	nop

c001ae98 <HalConsoleScroll(int, int)>:
c001ae98:	83 ec 10             	sub    esp,0x10
c001ae9b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001aea3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001aeab:	90                   	nop
c001aeac:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001aeb1:	0f 8f e1 00 00 00    	jg     c001af98 <HalConsoleScroll(int, int)+0x100>
c001aeb7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aebf:	90                   	nop
c001aec0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001aec8:	0f 8f be 00 00 00    	jg     c001af8c <HalConsoleScroll(int, int)+0xf4>
c001aece:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aed2:	89 d0                	mov    eax,edx
c001aed4:	c1 e0 02             	shl    eax,0x2
c001aed7:	01 d0                	add    eax,edx
c001aed9:	c1 e0 05             	shl    eax,0x5
c001aedc:	89 c2                	mov    edx,eax
c001aede:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aee2:	01 d0                	add    eax,edx
c001aee4:	89 c2                	mov    edx,eax
c001aee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aeea:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001aeed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aef1:	89 d0                	mov    eax,edx
c001aef3:	c1 e0 02             	shl    eax,0x2
c001aef6:	01 d0                	add    eax,edx
c001aef8:	c1 e0 05             	shl    eax,0x5
c001aefb:	89 c2                	mov    edx,eax
c001aefd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af01:	01 d0                	add    eax,edx
c001af03:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001af09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af0d:	01 d0                	add    eax,edx
c001af0f:	8a 11                	mov    dl,BYTE PTR [ecx]
c001af11:	88 10                	mov    BYTE PTR [eax],dl
c001af13:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001af18:	75 66                	jne    c001af80 <HalConsoleScroll(int, int)+0xe8>
c001af1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af1e:	83 e0 01             	and    eax,0x1
c001af21:	74 39                	je     c001af5c <HalConsoleScroll(int, int)+0xc4>
c001af23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af27:	83 e0 0f             	and    eax,0xf
c001af2a:	88 c2                	mov    dl,al
c001af2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af30:	c1 e0 04             	shl    eax,0x4
c001af33:	09 d0                	or     eax,edx
c001af35:	88 c1                	mov    cl,al
c001af37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af3b:	89 d0                	mov    eax,edx
c001af3d:	c1 e0 02             	shl    eax,0x2
c001af40:	01 d0                	add    eax,edx
c001af42:	c1 e0 05             	shl    eax,0x5
c001af45:	89 c2                	mov    edx,eax
c001af47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af4b:	01 d0                	add    eax,edx
c001af4d:	89 c2                	mov    edx,eax
c001af4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af53:	01 d0                	add    eax,edx
c001af55:	88 ca                	mov    dl,cl
c001af57:	88 10                	mov    BYTE PTR [eax],dl
c001af59:	eb 25                	jmp    c001af80 <HalConsoleScroll(int, int)+0xe8>
c001af5b:	90                   	nop
c001af5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af60:	89 d0                	mov    eax,edx
c001af62:	c1 e0 02             	shl    eax,0x2
c001af65:	01 d0                	add    eax,edx
c001af67:	c1 e0 05             	shl    eax,0x5
c001af6a:	89 c2                	mov    edx,eax
c001af6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af70:	01 d0                	add    eax,edx
c001af72:	89 c2                	mov    edx,eax
c001af74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af78:	01 d0                	add    eax,edx
c001af7a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001af7d:	8d 76 00             	lea    esi,[esi+0x0]
c001af80:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001af85:	e9 36 ff ff ff       	jmp    c001aec0 <HalConsoleScroll(int, int)+0x28>
c001af8a:	66 90                	xchg   ax,ax
c001af8c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001af91:	e9 16 ff ff ff       	jmp    c001aeac <HalConsoleScroll(int, int)+0x14>
c001af96:	66 90                	xchg   ax,ax
c001af98:	90                   	nop
c001af99:	83 c4 10             	add    esp,0x10
c001af9c:	c3                   	ret    
c001af9d:	8d 76 00             	lea    esi,[esi+0x0]

c001afa0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001afa0:	83 ec 14             	sub    esp,0x14
c001afa3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001afa7:	88 04 24             	mov    BYTE PTR [esp],al
c001afaa:	8a 04 24             	mov    al,BYTE PTR [esp]
c001afad:	0f b6 c0             	movzx  eax,al
c001afb0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001afb4:	89 d1                	mov    ecx,edx
c001afb6:	83 e1 0f             	and    ecx,0xf
c001afb9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001afbd:	c1 e2 04             	shl    edx,0x4
c001afc0:	0f b6 d2             	movzx  edx,dl
c001afc3:	09 ca                	or     edx,ecx
c001afc5:	c1 e2 08             	shl    edx,0x8
c001afc8:	09 d0                	or     eax,edx
c001afca:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001afcf:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001afd7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afdb:	89 d0                	mov    eax,edx
c001afdd:	c1 e0 02             	shl    eax,0x2
c001afe0:	01 d0                	add    eax,edx
c001afe2:	c1 e0 04             	shl    eax,0x4
c001afe5:	89 c2                	mov    edx,eax
c001afe7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001afeb:	01 d0                	add    eax,edx
c001afed:	d1 e0                	shl    eax,1
c001afef:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001aff3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aff7:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001affc:	66 89 10             	mov    WORD PTR [eax],dx
c001afff:	90                   	nop
c001b000:	83 c4 14             	add    esp,0x14
c001b003:	c3                   	ret    

c001b004 <HalConsoleCursorUpdate(int, int)>:
c001b004:	83 ec 20             	sub    esp,0x20
c001b007:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b00b:	89 c2                	mov    edx,eax
c001b00d:	c1 e2 02             	shl    edx,0x2
c001b010:	01 d0                	add    eax,edx
c001b012:	c1 e0 04             	shl    eax,0x4
c001b015:	89 c2                	mov    edx,eax
c001b017:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b01b:	01 d0                	add    eax,edx
c001b01d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b022:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b029:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001b02e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b032:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b036:	ee                   	out    dx,al
c001b037:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b03c:	0f b6 c0             	movzx  eax,al
c001b03f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001b046:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001b04a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b04e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b052:	ee                   	out    dx,al
c001b053:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001b05a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001b05f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b063:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b067:	ee                   	out    dx,al
c001b068:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b06d:	c1 e8 08             	shr    eax,0x8
c001b070:	0f b6 c0             	movzx  eax,al
c001b073:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b07a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b07e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b082:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b086:	ee                   	out    dx,al
c001b087:	90                   	nop
c001b088:	83 c4 20             	add    esp,0x20
c001b08b:	c3                   	ret    

c001b08c <FAT::getName()>:
c001b08c:	b8 24 55 02 c0       	mov    eax,0xc0025524
c001b091:	c3                   	ret    
c001b092:	66 90                	xchg   ax,ax

c001b094 <FAT::tell(void*, unsigned long long*)>:
c001b094:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b099:	75 09                	jne    c001b0a4 <FAT::tell(void*, unsigned long long*)+0x10>
c001b09b:	b8 04 00 00 00       	mov    eax,0x4
c001b0a0:	c3                   	ret    
c001b0a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b0a9:	75 09                	jne    c001b0b4 <FAT::tell(void*, unsigned long long*)+0x20>
c001b0ab:	b8 04 00 00 00       	mov    eax,0x4
c001b0b0:	c3                   	ret    
c001b0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b0bb:	ba 00 00 00 00       	mov    edx,0x0
c001b0c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b0c4:	89 01                	mov    DWORD PTR [ecx],eax
c001b0c6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b0c9:	b8 00 00 00 00       	mov    eax,0x0
c001b0ce:	c3                   	ret    
c001b0cf:	90                   	nop

c001b0d0 <FAT::stat(void*, unsigned long long*)>:
c001b0d0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b0d5:	75 09                	jne    c001b0e0 <FAT::stat(void*, unsigned long long*)+0x10>
c001b0d7:	b8 04 00 00 00       	mov    eax,0x4
c001b0dc:	c3                   	ret    
c001b0dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b0e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b0e5:	75 09                	jne    c001b0f0 <FAT::stat(void*, unsigned long long*)+0x20>
c001b0e7:	b8 04 00 00 00       	mov    eax,0x4
c001b0ec:	c3                   	ret    
c001b0ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b0f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b0f7:	ba 00 00 00 00       	mov    edx,0x0
c001b0fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b100:	89 01                	mov    DWORD PTR [ecx],eax
c001b102:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b105:	b8 00 00 00 00       	mov    eax,0x0
c001b10a:	c3                   	ret    
c001b10b:	90                   	nop

c001b10c <FAT::~FAT()>:
c001b10c:	83 ec 0c             	sub    esp,0xc
c001b10f:	ba 70 55 02 c0       	mov    edx,0xc0025570
c001b114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b118:	89 10                	mov    DWORD PTR [eax],edx
c001b11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b11e:	83 ec 0c             	sub    esp,0xc
c001b121:	50                   	push   eax
c001b122:	e8 53 cc fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001b127:	83 c4 10             	add    esp,0x10
c001b12a:	90                   	nop
c001b12b:	83 c4 0c             	add    esp,0xc
c001b12e:	c3                   	ret    
c001b12f:	90                   	nop

c001b130 <FAT::~FAT()>:
c001b130:	83 ec 0c             	sub    esp,0xc
c001b133:	83 ec 0c             	sub    esp,0xc
c001b136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b13a:	e8 cd ff ff ff       	call   c001b10c <FAT::~FAT()>
c001b13f:	83 c4 10             	add    esp,0x10
c001b142:	83 ec 08             	sub    esp,0x8
c001b145:	6a 08                	push   0x8
c001b147:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b14b:	e8 0b 21 ff ff       	call   c000d25b <operator delete(void*, unsigned long)>
c001b150:	83 c4 10             	add    esp,0x10
c001b153:	83 c4 0c             	add    esp,0xc
c001b156:	c3                   	ret    
c001b157:	90                   	nop

c001b158 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b158:	83 ec 1c             	sub    esp,0x1c
c001b15b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b162:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b167:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b16b:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b172:	83 f8 ff             	cmp    eax,0xffffffff
c001b175:	75 35                	jne    c001b1ac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b177:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b17b:	88 c2                	mov    dl,al
c001b17d:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b182:	01 d0                	add    eax,edx
c001b184:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b188:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b18e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b192:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b199:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b19e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b1a2:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b1a9:	eb 19                	jmp    c001b1c4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b1ab:	90                   	nop
c001b1ac:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b1b0:	88 c2                	mov    dl,al
c001b1b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b1b6:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b1bd:	01 d0                	add    eax,edx
c001b1bf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b1c3:	90                   	nop
c001b1c4:	83 ec 04             	sub    esp,0x4
c001b1c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b1cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b1cf:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b1d3:	50                   	push   eax
c001b1d4:	e8 fb 9f fe ff       	call   c00051d4 <f_getlabel>
c001b1d9:	83 c4 10             	add    esp,0x10
c001b1dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b1e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b1e5:	75 09                	jne    c001b1f0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b1e7:	b8 00 00 00 00       	mov    eax,0x0
c001b1ec:	eb 0a                	jmp    c001b1f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b1ee:	66 90                	xchg   ax,ax
c001b1f0:	b8 01 00 00 00       	mov    eax,0x1
c001b1f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1f8:	83 c4 1c             	add    esp,0x1c
c001b1fb:	c3                   	ret    

c001b1fc <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b1fc:	53                   	push   ebx
c001b1fd:	83 ec 58             	sub    esp,0x58
c001b200:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b208:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b20c:	b9 00 00 00 00       	mov    ecx,0x0
c001b211:	b8 3c 00 00 00       	mov    eax,0x3c
c001b216:	83 e0 f8             	and    eax,0xfffffff8
c001b219:	89 c3                	mov    ebx,eax
c001b21b:	b8 00 00 00 00       	mov    eax,0x0
c001b220:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001b224:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001b228:	83 c0 08             	add    eax,0x8
c001b22b:	39 d8                	cmp    eax,ebx
c001b22d:	72 f1                	jb     c001b220 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001b22f:	01 c2                	add    edx,eax
c001b231:	89 0a                	mov    DWORD PTR [edx],ecx
c001b233:	83 c2 04             	add    edx,0x4
c001b236:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b23a:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b241:	83 f8 ff             	cmp    eax,0xffffffff
c001b244:	75 36                	jne    c001b27c <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001b246:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b24a:	88 c2                	mov    dl,al
c001b24c:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b251:	01 d0                	add    eax,edx
c001b253:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b257:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b25d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b261:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b268:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b26d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b271:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b278:	eb 1a                	jmp    c001b294 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001b27a:	66 90                	xchg   ax,ax
c001b27c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b280:	88 c2                	mov    dl,al
c001b282:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b286:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b28d:	01 d0                	add    eax,edx
c001b28f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b293:	90                   	nop
c001b294:	83 ec 08             	sub    esp,0x8
c001b297:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b29b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b29f:	50                   	push   eax
c001b2a0:	e8 cb 55 fe ff       	call   c0000870 <strcat>
c001b2a5:	83 c4 10             	add    esp,0x10
c001b2a8:	83 ec 0c             	sub    esp,0xc
c001b2ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b2af:	50                   	push   eax
c001b2b0:	e8 73 a0 fe ff       	call   c0005328 <f_setlabel>
c001b2b5:	83 c4 10             	add    esp,0x10
c001b2b8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b2bc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b2c1:	75 09                	jne    c001b2cc <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001b2c3:	b8 00 00 00 00       	mov    eax,0x0
c001b2c8:	eb 0a                	jmp    c001b2d4 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001b2ca:	66 90                	xchg   ax,ax
c001b2cc:	b8 01 00 00 00       	mov    eax,0x1
c001b2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b2d4:	83 c4 58             	add    esp,0x58
c001b2d7:	5b                   	pop    ebx
c001b2d8:	c3                   	ret    
c001b2d9:	90                   	nop
c001b2da:	66 90                	xchg   ax,ax

c001b2dc <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b2dc:	83 ec 2c             	sub    esp,0x2c
c001b2df:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b2e7:	83 ec 08             	sub    esp,0x8
c001b2ea:	68 48 55 02 c0       	push   0xc0025548
c001b2ef:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b2f3:	e8 88 54 fe ff       	call   c0000780 <strcmp>
c001b2f8:	83 c4 10             	add    esp,0x10
c001b2fb:	85 c0                	test   eax,eax
c001b2fd:	0f 94 c0             	sete   al
c001b300:	0f b6 c0             	movzx  eax,al
c001b303:	85 c0                	test   eax,eax
c001b305:	74 0d                	je     c001b314 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b307:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b30f:	e9 c0 00 00 00       	jmp    c001b3d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b314:	83 ec 08             	sub    esp,0x8
c001b317:	68 3a 55 02 c0       	push   0xc002553a
c001b31c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b320:	e8 5b 54 fe ff       	call   c0000780 <strcmp>
c001b325:	83 c4 10             	add    esp,0x10
c001b328:	85 c0                	test   eax,eax
c001b32a:	0f 94 c0             	sete   al
c001b32d:	0f b6 c0             	movzx  eax,al
c001b330:	85 c0                	test   eax,eax
c001b332:	74 10                	je     c001b344 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001b334:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b33c:	e9 93 00 00 00       	jmp    c001b3d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b341:	8d 76 00             	lea    esi,[esi+0x0]
c001b344:	83 ec 08             	sub    esp,0x8
c001b347:	68 40 55 02 c0       	push   0xc0025540
c001b34c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b350:	e8 2b 54 fe ff       	call   c0000780 <strcmp>
c001b355:	83 c4 10             	add    esp,0x10
c001b358:	85 c0                	test   eax,eax
c001b35a:	0f 94 c0             	sete   al
c001b35d:	0f b6 c0             	movzx  eax,al
c001b360:	85 c0                	test   eax,eax
c001b362:	74 0c                	je     c001b370 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001b364:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b36c:	eb 66                	jmp    c001b3d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b36e:	66 90                	xchg   ax,ax
c001b370:	83 ec 08             	sub    esp,0x8
c001b373:	68 3c 25 02 c0       	push   0xc002253c
c001b378:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b37c:	e8 ff 53 fe ff       	call   c0000780 <strcmp>
c001b381:	83 c4 10             	add    esp,0x10
c001b384:	85 c0                	test   eax,eax
c001b386:	0f 94 c0             	sete   al
c001b389:	0f b6 c0             	movzx  eax,al
c001b38c:	85 c0                	test   eax,eax
c001b38e:	74 0c                	je     c001b39c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001b390:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b398:	eb 3a                	jmp    c001b3d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b39a:	66 90                	xchg   ax,ax
c001b39c:	83 ec 08             	sub    esp,0x8
c001b39f:	68 46 55 02 c0       	push   0xc0025546
c001b3a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b3a8:	e8 d3 53 fe ff       	call   c0000780 <strcmp>
c001b3ad:	83 c4 10             	add    esp,0x10
c001b3b0:	85 c0                	test   eax,eax
c001b3b2:	0f 94 c0             	sete   al
c001b3b5:	0f b6 c0             	movzx  eax,al
c001b3b8:	85 c0                	test   eax,eax
c001b3ba:	74 0c                	je     c001b3c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001b3bc:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b3c4:	eb 0e                	jmp    c001b3d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b3c6:	66 90                	xchg   ax,ax
c001b3c8:	b8 08 00 00 00       	mov    eax,0x8
c001b3cd:	e9 ea 00 00 00       	jmp    c001b4bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b3d2:	66 90                	xchg   ax,ax
c001b3d4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b3db:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b3e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b3e4:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b3eb:	83 f8 ff             	cmp    eax,0xffffffff
c001b3ee:	75 34                	jne    c001b424 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001b3f0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b3f4:	88 c2                	mov    dl,al
c001b3f6:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b3fb:	01 d0                	add    eax,edx
c001b3fd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b401:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b407:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b40b:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b412:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b417:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b41b:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b422:	eb 18                	jmp    c001b43c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001b424:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b428:	88 c2                	mov    dl,al
c001b42a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b42e:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b435:	01 d0                	add    eax,edx
c001b437:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b43b:	90                   	nop
c001b43c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b440:	88 04 24             	mov    BYTE PTR [esp],al
c001b443:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b447:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b44b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b453:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b458:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b460:	83 ec 0c             	sub    esp,0xc
c001b463:	68 00 20 00 00       	push   0x2000
c001b468:	e8 77 46 ff ff       	call   c000fae4 <malloc>
c001b46d:	83 c4 10             	add    esp,0x10
c001b470:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b474:	68 00 20 00 00       	push   0x2000
c001b479:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b47d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b481:	50                   	push   eax
c001b482:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b486:	50                   	push   eax
c001b487:	e8 99 a1 fe ff       	call   c0005625 <f_mkfs>
c001b48c:	83 c4 10             	add    esp,0x10
c001b48f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b493:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b498:	75 0a                	jne    c001b4a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b49a:	b8 00 00 00 00       	mov    eax,0x0
c001b49f:	eb 1b                	jmp    c001b4bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b4a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4a4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b4a9:	75 09                	jne    c001b4b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001b4ab:	b8 09 00 00 00       	mov    eax,0x9
c001b4b0:	eb 0a                	jmp    c001b4bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b4b2:	66 90                	xchg   ax,ax
c001b4b4:	b8 01 00 00 00       	mov    eax,0x1
c001b4b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4bc:	83 c4 2c             	add    esp,0x2c
c001b4bf:	c3                   	ret    

c001b4c0 <FAT::tryMount(LogicalDisk*, int)>:
c001b4c0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001b4c6:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b4cb:	83 f8 14             	cmp    eax,0x14
c001b4ce:	75 18                	jne    c001b4e8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b4d0:	83 ec 0c             	sub    esp,0xc
c001b4d3:	68 4c 55 02 c0       	push   0xc002554c
c001b4d8:	e8 4d 49 ff ff       	call   c000fe2a <KePanic(char const*)>
c001b4dd:	83 c4 10             	add    esp,0x10
c001b4e0:	b0 00                	mov    al,0x0
c001b4e2:	e9 ed 01 00 00       	jmp    c001b6d4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b4e7:	90                   	nop
c001b4e8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b4ef:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b4f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b4fb:	3d 00 02 00 00       	cmp    eax,0x200
c001b500:	74 0a                	je     c001b50c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b502:	b0 00                	mov    al,0x0
c001b504:	e9 cb 01 00 00       	jmp    c001b6d4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b509:	8d 76 00             	lea    esi,[esi+0x0]
c001b50c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001b514:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b51b:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b522:	83 f8 ff             	cmp    eax,0xffffffff
c001b525:	74 09                	je     c001b530 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b527:	b0 01                	mov    al,0x1
c001b529:	e9 a6 01 00 00       	jmp    c001b6d4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b52e:	66 90                	xchg   ax,ax
c001b530:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001b53a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001b542:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001b549:	88 c2                	mov    dl,al
c001b54b:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b550:	01 d0                	add    eax,edx
c001b552:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001b559:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b55f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b566:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b56d:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b572:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001b579:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b580:	83 ec 0c             	sub    esp,0xc
c001b583:	68 34 02 00 00       	push   0x234
c001b588:	e8 57 45 ff ff       	call   c000fae4 <malloc>
c001b58d:	83 c4 10             	add    esp,0x10
c001b590:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001b597:	83 ec 04             	sub    esp,0x4
c001b59a:	6a 00                	push   0x0
c001b59c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b5a3:	50                   	push   eax
c001b5a4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b5ab:	e8 6f 88 fe ff       	call   c0003e1f <f_mount>
c001b5b0:	83 c4 10             	add    esp,0x10
c001b5b3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b5ba:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001b5c2:	74 1c                	je     c001b5e0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b5ce:	e8 31 45 ff ff       	call   c000fb04 <rfree>
c001b5d3:	83 c4 10             	add    esp,0x10
c001b5d6:	b0 00                	mov    al,0x0
c001b5d8:	e9 f7 00 00 00       	jmp    c001b6d4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b5dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b5e0:	83 ec 04             	sub    esp,0x4
c001b5e3:	68 00 01 00 00       	push   0x100
c001b5e8:	6a 00                	push   0x0
c001b5ea:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b5f1:	50                   	push   eax
c001b5f2:	e8 f9 4e fe ff       	call   c00004f0 <memset>
c001b5f7:	83 c4 10             	add    esp,0x10
c001b5fa:	83 ec 08             	sub    esp,0x8
c001b5fd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b604:	50                   	push   eax
c001b605:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b60c:	50                   	push   eax
c001b60d:	e8 5e 52 fe ff       	call   c0000870 <strcat>
c001b612:	83 c4 10             	add    esp,0x10
c001b615:	83 ec 08             	sub    esp,0x8
c001b618:	68 5a 55 02 c0       	push   0xc002555a
c001b61d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b624:	50                   	push   eax
c001b625:	e8 46 52 fe ff       	call   c0000870 <strcat>
c001b62a:	83 c4 10             	add    esp,0x10
c001b62d:	83 ec 04             	sub    esp,0x4
c001b630:	6a 01                	push   0x1
c001b632:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001b639:	50                   	push   eax
c001b63a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b63e:	50                   	push   eax
c001b63f:	e8 3d 88 fe ff       	call   c0003e81 <f_open>
c001b644:	83 c4 10             	add    esp,0x10
c001b647:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b64e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001b655:	85 c0                	test   eax,eax
c001b657:	74 0b                	je     c001b664 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b659:	78 31                	js     c001b68c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b65b:	83 e8 04             	sub    eax,0x4
c001b65e:	83 f8 01             	cmp    eax,0x1
c001b661:	77 29                	ja     c001b68c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b663:	90                   	nop
c001b664:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001b66c:	83 ec 0c             	sub    esp,0xc
c001b66f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b673:	50                   	push   eax
c001b674:	e8 b8 8f fe ff       	call   c0004631 <f_close>
c001b679:	83 c4 10             	add    esp,0x10
c001b67c:	90                   	nop
c001b67d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001b685:	85 c0                	test   eax,eax
c001b687:	74 43                	je     c001b6cc <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001b689:	eb 31                	jmp    c001b6bc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b68b:	90                   	nop
c001b68c:	83 ec 0c             	sub    esp,0xc
c001b68f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b696:	e8 69 44 ff ff       	call   c000fb04 <rfree>
c001b69b:	83 c4 10             	add    esp,0x10
c001b69e:	83 ec 04             	sub    esp,0x4
c001b6a1:	6a 00                	push   0x0
c001b6a3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b6aa:	50                   	push   eax
c001b6ab:	6a 00                	push   0x0
c001b6ad:	e8 6d 87 fe ff       	call   c0003e1f <f_mount>
c001b6b2:	83 c4 10             	add    esp,0x10
c001b6b5:	b0 00                	mov    al,0x0
c001b6b7:	eb 1b                	jmp    c001b6d4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b6b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6bc:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b6c1:	83 c0 01             	add    eax,0x1
c001b6c4:	a3 20 eb 02 c0       	mov    ds:0xc002eb20,eax
c001b6c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6cc:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001b6d3:	90                   	nop
c001b6d4:	81 c4 4c 03 00 00    	add    esp,0x34c
c001b6da:	c3                   	ret    
c001b6db:	90                   	nop

c001b6dc <FAT::allocateSwapfile(char const*, int)>:
c001b6dc:	55                   	push   ebp
c001b6dd:	57                   	push   edi
c001b6de:	56                   	push   esi
c001b6df:	53                   	push   ebx
c001b6e0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b6e6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b6f1:	83 ec 0c             	sub    esp,0xc
c001b6f4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b6fb:	e8 e4 43 ff ff       	call   c000fae4 <malloc>
c001b700:	83 c4 10             	add    esp,0x10
c001b703:	89 c7                	mov    edi,eax
c001b705:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001b70a:	83 ec 04             	sub    esp,0x4
c001b70d:	50                   	push   eax
c001b70e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b715:	57                   	push   edi
c001b716:	e8 11 ca fe ff       	call   c000812c <File::File(char const*, Process*)>
c001b71b:	83 c4 10             	add    esp,0x10
c001b71e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b725:	83 ec 04             	sub    esp,0x4
c001b728:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b72c:	50                   	push   eax
c001b72d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b731:	50                   	push   eax
c001b732:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b739:	e8 0e cd fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001b73e:	83 c4 10             	add    esp,0x10
c001b741:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b748:	c1 e0 14             	shl    eax,0x14
c001b74b:	89 c7                	mov    edi,eax
c001b74d:	89 c5                	mov    ebp,eax
c001b74f:	c1 fd 1f             	sar    ebp,0x1f
c001b752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b756:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b75a:	89 f9                	mov    ecx,edi
c001b75c:	31 c1                	xor    ecx,eax
c001b75e:	89 cb                	mov    ebx,ecx
c001b760:	89 e9                	mov    ecx,ebp
c001b762:	31 d1                	xor    ecx,edx
c001b764:	89 ce                	mov    esi,ecx
c001b766:	89 f0                	mov    eax,esi
c001b768:	09 d8                	or     eax,ebx
c001b76a:	0f 84 9c 00 00 00    	je     c001b80c <FAT::allocateSwapfile(char const*, int)+0x130>
c001b770:	83 ec 0c             	sub    esp,0xc
c001b773:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b77a:	e8 99 cb fe ff       	call   c0008318 <File::unlink()>
c001b77f:	83 c4 10             	add    esp,0x10
c001b782:	83 ec 08             	sub    esp,0x8
c001b785:	6a 12                	push   0x12
c001b787:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b78e:	e8 b7 c9 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001b793:	83 c4 10             	add    esp,0x10
c001b796:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b79d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b7a3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b7aa:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b7b1:	c1 e0 14             	shl    eax,0x14
c001b7b4:	83 ec 04             	sub    esp,0x4
c001b7b7:	6a 01                	push   0x1
c001b7b9:	50                   	push   eax
c001b7ba:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b7c1:	e8 f2 9c fe ff       	call   c00054b8 <f_expand>
c001b7c6:	83 c4 10             	add    esp,0x10
c001b7c9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b7d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7d2:	83 c0 10             	add    eax,0x10
c001b7d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7d7:	83 ec 0c             	sub    esp,0xc
c001b7da:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b7de:	52                   	push   edx
c001b7df:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b7e3:	52                   	push   edx
c001b7e4:	6a 00                	push   0x0
c001b7e6:	68 00 04 00 00       	push   0x400
c001b7eb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b7f2:	ff d0                	call   eax
c001b7f4:	83 c4 20             	add    esp,0x20
c001b7f7:	83 ec 0c             	sub    esp,0xc
c001b7fa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b801:	e8 a2 c9 fe ff       	call   c00081a8 <File::close()>
c001b806:	83 c4 10             	add    esp,0x10
c001b809:	8d 76 00             	lea    esi,[esi+0x0]
c001b80c:	83 ec 08             	sub    esp,0x8
c001b80f:	6a 01                	push   0x1
c001b811:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b818:	e8 2d c9 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001b81d:	83 c4 10             	add    esp,0x10
c001b820:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b827:	8b 00                	mov    eax,DWORD PTR [eax]
c001b829:	83 c0 0c             	add    eax,0xc
c001b82c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b82e:	83 ec 0c             	sub    esp,0xc
c001b831:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b835:	52                   	push   edx
c001b836:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b83a:	52                   	push   edx
c001b83b:	6a 00                	push   0x0
c001b83d:	6a 04                	push   0x4
c001b83f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b846:	ff d0                	call   eax
c001b848:	83 c4 20             	add    esp,0x20
c001b84b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b852:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b858:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b85f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b866:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b869:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b870:	83 ec 0c             	sub    esp,0xc
c001b873:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b87a:	e8 29 c9 fe ff       	call   c00081a8 <File::close()>
c001b87f:	83 c4 10             	add    esp,0x10
c001b882:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b889:	ba 00 00 00 00       	mov    edx,0x0
c001b88e:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b894:	5b                   	pop    ebx
c001b895:	5e                   	pop    esi
c001b896:	5f                   	pop    edi
c001b897:	5d                   	pop    ebp
c001b898:	c3                   	ret    
c001b899:	90                   	nop
c001b89a:	66 90                	xchg   ax,ax

c001b89c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b89c:	57                   	push   edi
c001b89d:	56                   	push   esi
c001b89e:	53                   	push   ebx
c001b89f:	81 ec 50 02 00 00    	sub    esp,0x250
c001b8a5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b8ad:	74 0d                	je     c001b8bc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b8af:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b8b7:	75 0f                	jne    c001b8c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b8b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b8bc:	b8 04 00 00 00       	mov    eax,0x4
c001b8c1:	e9 3a 01 00 00       	jmp    c001ba00 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b8c6:	66 90                	xchg   ax,ax
c001b8c8:	83 ec 08             	sub    esp,0x8
c001b8cb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b8d2:	50                   	push   eax
c001b8d3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b8da:	e8 1e 90 fe ff       	call   c00048fd <f_readdir>
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b8e9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001b8f0:	83 ec 0c             	sub    esp,0xc
c001b8f3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b8fa:	83 c0 16             	add    eax,0x16
c001b8fd:	50                   	push   eax
c001b8fe:	e8 7d 4c fe ff       	call   c0000580 <strlen>
c001b903:	83 c4 10             	add    esp,0x10
c001b906:	ba 00 00 00 00       	mov    edx,0x0
c001b90b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b90f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b913:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b91a:	0f b6 c0             	movzx  eax,al
c001b91d:	83 e0 10             	and    eax,0x10
c001b920:	74 0a                	je     c001b92c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b922:	b8 02 00 00 00       	mov    eax,0x2
c001b927:	eb 0b                	jmp    c001b934 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b929:	8d 76 00             	lea    esi,[esi+0x0]
c001b92c:	b8 01 00 00 00       	mov    eax,0x1
c001b931:	8d 76 00             	lea    esi,[esi+0x0]
c001b934:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b938:	83 ec 08             	sub    esp,0x8
c001b93b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b942:	83 c0 16             	add    eax,0x16
c001b945:	50                   	push   eax
c001b946:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b94a:	83 c0 10             	add    eax,0x10
c001b94d:	50                   	push   eax
c001b94e:	e8 fd 4c fe ff       	call   c0000650 <strcpy>
c001b953:	83 c4 10             	add    esp,0x10
c001b956:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b95d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b964:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b968:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b96f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b976:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b97d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b984:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b98b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b992:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b999:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b9a0:	89 c6                	mov    esi,eax
c001b9a2:	89 d7                	mov    edi,edx
c001b9a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b9a6:	89 c8                	mov    eax,ecx
c001b9a8:	89 fa                	mov    edx,edi
c001b9aa:	89 f3                	mov    ebx,esi
c001b9ac:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b9b3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b9ba:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b9c1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b9c8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b9ce:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b9d5:	0f be c0             	movsx  eax,al
c001b9d8:	85 c0                	test   eax,eax
c001b9da:	75 08                	jne    c001b9e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001b9dc:	b8 07 00 00 00       	mov    eax,0x7
c001b9e1:	eb 1d                	jmp    c001ba00 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b9e3:	90                   	nop
c001b9e4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b9eb:	85 c0                	test   eax,eax
c001b9ed:	75 09                	jne    c001b9f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001b9ef:	b8 00 00 00 00       	mov    eax,0x0
c001b9f4:	eb 0a                	jmp    c001ba00 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b9f6:	66 90                	xchg   ax,ax
c001b9f8:	b8 01 00 00 00       	mov    eax,0x1
c001b9fd:	8d 76 00             	lea    esi,[esi+0x0]
c001ba00:	81 c4 50 02 00 00    	add    esp,0x250
c001ba06:	5b                   	pop    ebx
c001ba07:	5e                   	pop    esi
c001ba08:	5f                   	pop    edi
c001ba09:	c3                   	ret    
c001ba0a:	66 90                	xchg   ax,ax

c001ba0c <FAT::read(void*, unsigned long, void*, int*)>:
c001ba0c:	83 ec 1c             	sub    esp,0x1c
c001ba0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ba14:	74 0a                	je     c001ba20 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ba16:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ba1b:	75 0b                	jne    c001ba28 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ba1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba20:	b8 04 00 00 00       	mov    eax,0x4
c001ba25:	eb 41                	jmp    c001ba68 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ba27:	90                   	nop
c001ba28:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba2c:	50                   	push   eax
c001ba2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ba31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ba35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ba39:	e8 06 87 fe ff       	call   c0004144 <f_read>
c001ba3e:	83 c4 10             	add    esp,0x10
c001ba41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba49:	89 c2                	mov    edx,eax
c001ba4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ba4f:	89 10                	mov    DWORD PTR [eax],edx
c001ba51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba55:	85 c0                	test   eax,eax
c001ba57:	75 07                	jne    c001ba60 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ba59:	b8 00 00 00 00       	mov    eax,0x0
c001ba5e:	eb 08                	jmp    c001ba68 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ba60:	b8 01 00 00 00       	mov    eax,0x1
c001ba65:	8d 76 00             	lea    esi,[esi+0x0]
c001ba68:	83 c4 1c             	add    esp,0x1c
c001ba6b:	c3                   	ret    

c001ba6c <FAT::write(void*, unsigned long, void*, int*)>:
c001ba6c:	83 ec 1c             	sub    esp,0x1c
c001ba6f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ba74:	74 0a                	je     c001ba80 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ba76:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ba7b:	75 0b                	jne    c001ba88 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ba7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba80:	b8 04 00 00 00       	mov    eax,0x4
c001ba85:	eb 41                	jmp    c001bac8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ba87:	90                   	nop
c001ba88:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba8c:	50                   	push   eax
c001ba8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ba91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ba95:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ba99:	e8 87 88 fe ff       	call   c0004325 <f_write>
c001ba9e:	83 c4 10             	add    esp,0x10
c001baa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baa5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001baa9:	89 c2                	mov    edx,eax
c001baab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001baaf:	89 10                	mov    DWORD PTR [eax],edx
c001bab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bab5:	85 c0                	test   eax,eax
c001bab7:	75 07                	jne    c001bac0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bab9:	b8 00 00 00 00       	mov    eax,0x0
c001babe:	eb 08                	jmp    c001bac8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bac0:	b8 01 00 00 00       	mov    eax,0x1
c001bac5:	8d 76 00             	lea    esi,[esi+0x0]
c001bac8:	83 c4 1c             	add    esp,0x1c
c001bacb:	c3                   	ret    

c001bacc <FAT::close(void*)>:
c001bacc:	83 ec 1c             	sub    esp,0x1c
c001bacf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bad4:	75 0a                	jne    c001bae0 <FAT::close(void*)+0x14>
c001bad6:	b8 04 00 00 00       	mov    eax,0x4
c001badb:	eb 3f                	jmp    c001bb1c <FAT::close(void*)+0x50>
c001badd:	8d 76 00             	lea    esi,[esi+0x0]
c001bae0:	83 ec 0c             	sub    esp,0xc
c001bae3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bae7:	e8 45 8b fe ff       	call   c0004631 <f_close>
c001baec:	83 c4 10             	add    esp,0x10
c001baef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baf3:	83 ec 0c             	sub    esp,0xc
c001baf6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bafa:	e8 f5 3f ff ff       	call   c000faf4 <free>
c001baff:	83 c4 10             	add    esp,0x10
c001bb02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb06:	85 c0                	test   eax,eax
c001bb08:	75 0a                	jne    c001bb14 <FAT::close(void*)+0x48>
c001bb0a:	b8 00 00 00 00       	mov    eax,0x0
c001bb0f:	eb 0b                	jmp    c001bb1c <FAT::close(void*)+0x50>
c001bb11:	8d 76 00             	lea    esi,[esi+0x0]
c001bb14:	b8 01 00 00 00       	mov    eax,0x1
c001bb19:	8d 76 00             	lea    esi,[esi+0x0]
c001bb1c:	83 c4 1c             	add    esp,0x1c
c001bb1f:	c3                   	ret    

c001bb20 <FAT::closeDir(void*)>:
c001bb20:	83 ec 1c             	sub    esp,0x1c
c001bb23:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bb28:	75 0a                	jne    c001bb34 <FAT::closeDir(void*)+0x14>
c001bb2a:	b8 04 00 00 00       	mov    eax,0x4
c001bb2f:	eb 3f                	jmp    c001bb70 <FAT::closeDir(void*)+0x50>
c001bb31:	8d 76 00             	lea    esi,[esi+0x0]
c001bb34:	83 ec 0c             	sub    esp,0xc
c001bb37:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bb3b:	e8 9b 8d fe ff       	call   c00048db <f_closedir>
c001bb40:	83 c4 10             	add    esp,0x10
c001bb43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb47:	83 ec 0c             	sub    esp,0xc
c001bb4a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bb4e:	e8 a1 3f ff ff       	call   c000faf4 <free>
c001bb53:	83 c4 10             	add    esp,0x10
c001bb56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb5a:	85 c0                	test   eax,eax
c001bb5c:	75 0a                	jne    c001bb68 <FAT::closeDir(void*)+0x48>
c001bb5e:	b8 00 00 00 00       	mov    eax,0x0
c001bb63:	eb 0b                	jmp    c001bb70 <FAT::closeDir(void*)+0x50>
c001bb65:	8d 76 00             	lea    esi,[esi+0x0]
c001bb68:	b8 01 00 00 00       	mov    eax,0x1
c001bb6d:	8d 76 00             	lea    esi,[esi+0x0]
c001bb70:	83 c4 1c             	add    esp,0x1c
c001bb73:	c3                   	ret    

c001bb74 <FAT::truncate(void*, unsigned long long)>:
c001bb74:	83 ec 2c             	sub    esp,0x2c
c001bb77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bb83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb87:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001bb8c:	75 0a                	jne    c001bb98 <FAT::truncate(void*, unsigned long long)+0x24>
c001bb8e:	b8 04 00 00 00       	mov    eax,0x4
c001bb93:	eb 47                	jmp    c001bbdc <FAT::truncate(void*, unsigned long long)+0x68>
c001bb95:	8d 76 00             	lea    esi,[esi+0x0]
c001bb98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bb9c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bb9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bba3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001bbab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbaf:	83 ec 08             	sub    esp,0x8
c001bbb2:	50                   	push   eax
c001bbb3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bbb7:	e8 a4 8a fe ff       	call   c0004660 <f_lseek>
c001bbbc:	83 c4 10             	add    esp,0x10
c001bbbf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bbc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bbc7:	85 c0                	test   eax,eax
c001bbc9:	75 09                	jne    c001bbd4 <FAT::truncate(void*, unsigned long long)+0x60>
c001bbcb:	b8 00 00 00 00       	mov    eax,0x0
c001bbd0:	eb 0a                	jmp    c001bbdc <FAT::truncate(void*, unsigned long long)+0x68>
c001bbd2:	66 90                	xchg   ax,ax
c001bbd4:	b8 01 00 00 00       	mov    eax,0x1
c001bbd9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbdc:	83 c4 2c             	add    esp,0x2c
c001bbdf:	c3                   	ret    

c001bbe0 <FAT::seek(void*, unsigned long long)>:
c001bbe0:	83 ec 2c             	sub    esp,0x2c
c001bbe3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bbe7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbeb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bbef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbf3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001bbf8:	75 0a                	jne    c001bc04 <FAT::seek(void*, unsigned long long)+0x24>
c001bbfa:	b8 04 00 00 00       	mov    eax,0x4
c001bbff:	eb 33                	jmp    c001bc34 <FAT::seek(void*, unsigned long long)+0x54>
c001bc01:	8d 76 00             	lea    esi,[esi+0x0]
c001bc04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc08:	83 ec 08             	sub    esp,0x8
c001bc0b:	50                   	push   eax
c001bc0c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bc10:	e8 4b 8a fe ff       	call   c0004660 <f_lseek>
c001bc15:	83 c4 10             	add    esp,0x10
c001bc18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bc1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc20:	85 c0                	test   eax,eax
c001bc22:	75 08                	jne    c001bc2c <FAT::seek(void*, unsigned long long)+0x4c>
c001bc24:	b8 00 00 00 00       	mov    eax,0x0
c001bc29:	eb 09                	jmp    c001bc34 <FAT::seek(void*, unsigned long long)+0x54>
c001bc2b:	90                   	nop
c001bc2c:	b8 01 00 00 00       	mov    eax,0x1
c001bc31:	8d 76 00             	lea    esi,[esi+0x0]
c001bc34:	83 c4 2c             	add    esp,0x2c
c001bc37:	c3                   	ret    

c001bc38 <fatWrapperReadDisk>:
c001bc38:	53                   	push   ebx
c001bc39:	83 ec 18             	sub    esp,0x18
c001bc3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc40:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bc44:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bc49:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001bc50:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bc54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bc58:	ba 00 00 00 00       	mov    edx,0x0
c001bc5d:	83 ec 0c             	sub    esp,0xc
c001bc60:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bc64:	53                   	push   ebx
c001bc65:	52                   	push   edx
c001bc66:	50                   	push   eax
c001bc67:	51                   	push   ecx
c001bc68:	e8 83 ed fe ff       	call   c000a9f0 <LogicalDisk::read(unsigned long long, int, void*)>
c001bc6d:	83 c4 20             	add    esp,0x20
c001bc70:	83 c4 18             	add    esp,0x18
c001bc73:	5b                   	pop    ebx
c001bc74:	c3                   	ret    
c001bc75:	8d 76 00             	lea    esi,[esi+0x0]

c001bc78 <fatWrapperWriteDisk>:
c001bc78:	53                   	push   ebx
c001bc79:	83 ec 18             	sub    esp,0x18
c001bc7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc80:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bc84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bc89:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001bc90:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bc94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bc98:	ba 00 00 00 00       	mov    edx,0x0
c001bc9d:	83 ec 0c             	sub    esp,0xc
c001bca0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bca4:	53                   	push   ebx
c001bca5:	52                   	push   edx
c001bca6:	50                   	push   eax
c001bca7:	51                   	push   ecx
c001bca8:	e8 af ed fe ff       	call   c000aa5c <LogicalDisk::write(unsigned long long, int, void*)>
c001bcad:	83 c4 20             	add    esp,0x20
c001bcb0:	83 c4 18             	add    esp,0x18
c001bcb3:	5b                   	pop    ebx
c001bcb4:	c3                   	ret    
c001bcb5:	8d 76 00             	lea    esi,[esi+0x0]

c001bcb8 <fatWrapperIoctl>:
c001bcb8:	53                   	push   ebx
c001bcb9:	83 ec 28             	sub    esp,0x28
c001bcbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bcc0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bcc4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bcc8:	88 d0                	mov    al,dl
c001bcca:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bcce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bcd3:	83 f8 02             	cmp    eax,0x2
c001bcd6:	75 34                	jne    c001bd0c <fatWrapperIoctl+0x54>
c001bcd8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bcdc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bce0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bce5:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001bcec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bcf2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bcf8:	89 c2                	mov    edx,eax
c001bcfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bcfe:	66 89 10             	mov    WORD PTR [eax],dx
c001bd01:	b8 00 00 00 00       	mov    eax,0x0
c001bd06:	e9 c5 00 00 00       	jmp    c001bdd0 <fatWrapperIoctl+0x118>
c001bd0b:	90                   	nop
c001bd0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd11:	83 f8 01             	cmp    eax,0x1
c001bd14:	75 6a                	jne    c001bd80 <fatWrapperIoctl+0xc8>
c001bd16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd1e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bd23:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001bd2a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bd30:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001bd36:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001bd3c:	89 c8                	mov    eax,ecx
c001bd3e:	89 da                	mov    edx,ebx
c001bd40:	0f a4 c2 0a          	shld   edx,eax,0xa
c001bd44:	c1 e0 0a             	shl    eax,0xa
c001bd47:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bd4c:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001bd53:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001bd59:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001bd5f:	89 cb                	mov    ebx,ecx
c001bd61:	c1 fb 1f             	sar    ebx,0x1f
c001bd64:	53                   	push   ebx
c001bd65:	51                   	push   ecx
c001bd66:	52                   	push   edx
c001bd67:	50                   	push   eax
c001bd68:	e8 c7 59 00 00       	call   c0021734 <__udivdi3>
c001bd6d:	83 c4 10             	add    esp,0x10
c001bd70:	89 c2                	mov    edx,eax
c001bd72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd76:	89 10                	mov    DWORD PTR [eax],edx
c001bd78:	b8 00 00 00 00       	mov    eax,0x0
c001bd7d:	eb 51                	jmp    c001bdd0 <fatWrapperIoctl+0x118>
c001bd7f:	90                   	nop
c001bd80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd85:	85 c0                	test   eax,eax
c001bd87:	75 07                	jne    c001bd90 <fatWrapperIoctl+0xd8>
c001bd89:	b8 00 00 00 00       	mov    eax,0x0
c001bd8e:	eb 40                	jmp    c001bdd0 <fatWrapperIoctl+0x118>
c001bd90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd95:	83 f8 03             	cmp    eax,0x3
c001bd98:	75 1a                	jne    c001bdb4 <fatWrapperIoctl+0xfc>
c001bd9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bda2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bda6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001bdac:	b8 00 00 00 00       	mov    eax,0x0
c001bdb1:	eb 1d                	jmp    c001bdd0 <fatWrapperIoctl+0x118>
c001bdb3:	90                   	nop
c001bdb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bdb9:	83 f8 04             	cmp    eax,0x4
c001bdbc:	75 0a                	jne    c001bdc8 <fatWrapperIoctl+0x110>
c001bdbe:	b8 00 00 00 00       	mov    eax,0x0
c001bdc3:	eb 0b                	jmp    c001bdd0 <fatWrapperIoctl+0x118>
c001bdc5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdc8:	b8 04 00 00 00       	mov    eax,0x4
c001bdcd:	8d 76 00             	lea    esi,[esi+0x0]
c001bdd0:	83 c4 28             	add    esp,0x28
c001bdd3:	5b                   	pop    ebx
c001bdd4:	c3                   	ret    
c001bdd5:	90                   	nop
c001bdd6:	66 90                	xchg   ax,ax

c001bdd8 <FAT::FAT()>:
c001bdd8:	83 ec 1c             	sub    esp,0x1c
c001bddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bddf:	83 ec 0c             	sub    esp,0xc
c001bde2:	50                   	push   eax
c001bde3:	e8 6e bf fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001bde8:	83 c4 10             	add    esp,0x10
c001bdeb:	ba 70 55 02 c0       	mov    edx,0xc0025570
c001bdf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdf4:	89 10                	mov    DWORD PTR [eax],edx
c001bdf6:	c7 05 20 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb20,0x0
c001be00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001be08:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001be0d:	7f 19                	jg     c001be28 <FAT::FAT()+0x50>
c001be0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be13:	c7 04 85 40 eb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd14c0],0xffffffff
c001be1e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001be23:	eb e3                	jmp    c001be08 <FAT::FAT()+0x30>
c001be25:	8d 76 00             	lea    esi,[esi+0x0]
c001be28:	90                   	nop
c001be29:	83 c4 1c             	add    esp,0x1c
c001be2c:	c3                   	ret    
c001be2d:	90                   	nop
c001be2e:	66 90                	xchg   ax,ax

c001be30 <FAT::fixFilepath(char*)>:
c001be30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be34:	8a 00                	mov    al,BYTE PTR [eax]
c001be36:	0f be c0             	movsx  eax,al
c001be39:	83 f8 40             	cmp    eax,0x40
c001be3c:	7e 2e                	jle    c001be6c <FAT::fixFilepath(char*)+0x3c>
c001be3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be42:	8a 00                	mov    al,BYTE PTR [eax]
c001be44:	83 e8 41             	sub    eax,0x41
c001be47:	88 c2                	mov    dl,al
c001be49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be4d:	88 10                	mov    BYTE PTR [eax],dl
c001be4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be53:	8a 00                	mov    al,BYTE PTR [eax]
c001be55:	0f be c0             	movsx  eax,al
c001be58:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001be5f:	83 c0 30             	add    eax,0x30
c001be62:	88 c2                	mov    dl,al
c001be64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be68:	88 10                	mov    BYTE PTR [eax],dl
c001be6a:	66 90                	xchg   ax,ax
c001be6c:	90                   	nop
c001be6d:	c3                   	ret    
c001be6e:	66 90                	xchg   ax,ax

c001be70 <FAT::open(char const*, void**, FileOpenMode)>:
c001be70:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001be76:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001be7e:	74 0c                	je     c001be8c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001be80:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001be88:	75 0e                	jne    c001be98 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001be8a:	66 90                	xchg   ax,ax
c001be8c:	b8 04 00 00 00       	mov    eax,0x4
c001be91:	e9 46 01 00 00       	jmp    c001bfdc <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001be96:	66 90                	xchg   ax,ax
c001be98:	83 ec 08             	sub    esp,0x8
c001be9b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bea2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bea6:	50                   	push   eax
c001bea7:	e8 a4 47 fe ff       	call   c0000650 <strcpy>
c001beac:	83 c4 10             	add    esp,0x10
c001beaf:	83 ec 08             	sub    esp,0x8
c001beb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001beb6:	50                   	push   eax
c001beb7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bebe:	e8 6d ff ff ff       	call   c001be30 <FAT::fixFilepath(char*)>
c001bec3:	83 c4 10             	add    esp,0x10
c001bec6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001bece:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bed5:	83 e0 01             	and    eax,0x1
c001bed8:	74 12                	je     c001beec <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001beda:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bee1:	83 c8 01             	or     eax,0x1
c001bee4:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001beeb:	90                   	nop
c001beec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bef3:	83 e0 04             	and    eax,0x4
c001bef6:	74 24                	je     c001bf1c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001bef8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001beff:	83 c8 30             	or     eax,0x30
c001bf02:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bf09:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bf10:	83 c8 02             	or     eax,0x2
c001bf13:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bf1a:	66 90                	xchg   ax,ax
c001bf1c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bf23:	83 e0 02             	and    eax,0x2
c001bf26:	74 14                	je     c001bf3c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001bf28:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bf2f:	83 c8 02             	or     eax,0x2
c001bf32:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bf39:	8d 76 00             	lea    esi,[esi+0x0]
c001bf3c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bf43:	83 e0 08             	and    eax,0x8
c001bf46:	74 14                	je     c001bf5c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001bf48:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bf4f:	83 c8 04             	or     eax,0x4
c001bf52:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bf59:	8d 76 00             	lea    esi,[esi+0x0]
c001bf5c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bf63:	83 e0 10             	and    eax,0x10
c001bf66:	74 14                	je     c001bf7c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001bf68:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bf6f:	83 c8 08             	or     eax,0x8
c001bf72:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bf79:	8d 76 00             	lea    esi,[esi+0x0]
c001bf7c:	83 ec 0c             	sub    esp,0xc
c001bf7f:	68 28 02 00 00       	push   0x228
c001bf84:	e8 5b 3b ff ff       	call   c000fae4 <malloc>
c001bf89:	83 c4 10             	add    esp,0x10
c001bf8c:	89 c2                	mov    edx,eax
c001bf8e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bf95:	89 10                	mov    DWORD PTR [eax],edx
c001bf97:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001bf9f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bfa6:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfa8:	83 ec 04             	sub    esp,0x4
c001bfab:	52                   	push   edx
c001bfac:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bfb0:	52                   	push   edx
c001bfb1:	50                   	push   eax
c001bfb2:	e8 ca 7e fe ff       	call   c0003e81 <f_open>
c001bfb7:	83 c4 10             	add    esp,0x10
c001bfba:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001bfc1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001bfc9:	74 09                	je     c001bfd4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001bfcb:	b8 01 00 00 00       	mov    eax,0x1
c001bfd0:	eb 0a                	jmp    c001bfdc <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001bfd2:	66 90                	xchg   ax,ax
c001bfd4:	b8 00 00 00 00       	mov    eax,0x0
c001bfd9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfdc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bfe2:	c3                   	ret    
c001bfe3:	90                   	nop

c001bfe4 <FAT::openDir(char const*, void**)>:
c001bfe4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bfea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bff2:	74 0c                	je     c001c000 <FAT::openDir(char const*, void**)+0x1c>
c001bff4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bffc:	75 0e                	jne    c001c00c <FAT::openDir(char const*, void**)+0x28>
c001bffe:	66 90                	xchg   ax,ax
c001c000:	b8 04 00 00 00       	mov    eax,0x4
c001c005:	e9 82 00 00 00       	jmp    c001c08c <FAT::openDir(char const*, void**)+0xa8>
c001c00a:	66 90                	xchg   ax,ax
c001c00c:	83 ec 08             	sub    esp,0x8
c001c00f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c016:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c01a:	50                   	push   eax
c001c01b:	e8 30 46 fe ff       	call   c0000650 <strcpy>
c001c020:	83 c4 10             	add    esp,0x10
c001c023:	83 ec 08             	sub    esp,0x8
c001c026:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c02a:	50                   	push   eax
c001c02b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c032:	e8 f9 fd ff ff       	call   c001be30 <FAT::fixFilepath(char*)>
c001c037:	83 c4 10             	add    esp,0x10
c001c03a:	83 ec 0c             	sub    esp,0xc
c001c03d:	6a 30                	push   0x30
c001c03f:	e8 a0 3a ff ff       	call   c000fae4 <malloc>
c001c044:	83 c4 10             	add    esp,0x10
c001c047:	89 c2                	mov    edx,eax
c001c049:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c050:	89 10                	mov    DWORD PTR [eax],edx
c001c052:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c059:	8b 00                	mov    eax,DWORD PTR [eax]
c001c05b:	83 ec 08             	sub    esp,0x8
c001c05e:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c062:	52                   	push   edx
c001c063:	50                   	push   eax
c001c064:	e8 a7 87 fe ff       	call   c0004810 <f_opendir>
c001c069:	83 c4 10             	add    esp,0x10
c001c06c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c073:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c07b:	74 07                	je     c001c084 <FAT::openDir(char const*, void**)+0xa0>
c001c07d:	b8 01 00 00 00       	mov    eax,0x1
c001c082:	eb 08                	jmp    c001c08c <FAT::openDir(char const*, void**)+0xa8>
c001c084:	b8 00 00 00 00       	mov    eax,0x0
c001c089:	8d 76 00             	lea    esi,[esi+0x0]
c001c08c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c092:	c3                   	ret    
c001c093:	90                   	nop

c001c094 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c094:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c09a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c0a2:	75 0c                	jne    c001c0b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c0a4:	b8 04 00 00 00       	mov    eax,0x4
c001c0a9:	e9 d6 00 00 00       	jmp    c001c184 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c0ae:	66 90                	xchg   ax,ax
c001c0b0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c0b8:	75 0a                	jne    c001c0c4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c0ba:	b8 04 00 00 00       	mov    eax,0x4
c001c0bf:	e9 c0 00 00 00       	jmp    c001c184 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c0c4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c0cc:	75 0a                	jne    c001c0d8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c0ce:	b8 04 00 00 00       	mov    eax,0x4
c001c0d3:	e9 ac 00 00 00       	jmp    c001c184 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c0d8:	83 ec 08             	sub    esp,0x8
c001c0db:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c0e2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c0e9:	50                   	push   eax
c001c0ea:	e8 61 45 fe ff       	call   c0000650 <strcpy>
c001c0ef:	83 c4 10             	add    esp,0x10
c001c0f2:	83 ec 08             	sub    esp,0x8
c001c0f5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c0fc:	50                   	push   eax
c001c0fd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c104:	e8 27 fd ff ff       	call   c001be30 <FAT::fixFilepath(char*)>
c001c109:	83 c4 10             	add    esp,0x10
c001c10c:	83 ec 08             	sub    esp,0x8
c001c10f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c113:	50                   	push   eax
c001c114:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c11b:	50                   	push   eax
c001c11c:	e8 6e 88 fe ff       	call   c000498f <f_stat>
c001c121:	83 c4 10             	add    esp,0x10
c001c124:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c12b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c132:	85 c0                	test   eax,eax
c001c134:	74 0a                	je     c001c140 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c136:	83 f8 04             	cmp    eax,0x4
c001c139:	74 39                	je     c001c174 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c13b:	eb 3f                	jmp    c001c17c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001c13d:	8d 76 00             	lea    esi,[esi+0x0]
c001c140:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c144:	0f b6 c0             	movzx  eax,al
c001c147:	83 e0 10             	and    eax,0x10
c001c14a:	0f 95 c2             	setne  dl
c001c14d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c154:	88 10                	mov    BYTE PTR [eax],dl
c001c156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c15a:	ba 00 00 00 00       	mov    edx,0x0
c001c15f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c166:	89 01                	mov    DWORD PTR [ecx],eax
c001c168:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c16b:	b8 00 00 00 00       	mov    eax,0x0
c001c170:	eb 12                	jmp    c001c184 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c172:	66 90                	xchg   ax,ax
c001c174:	b8 02 00 00 00       	mov    eax,0x2
c001c179:	eb 09                	jmp    c001c184 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c17b:	90                   	nop
c001c17c:	b8 01 00 00 00       	mov    eax,0x1
c001c181:	8d 76 00             	lea    esi,[esi+0x0]
c001c184:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c18a:	c3                   	ret    
c001c18b:	90                   	nop

c001c18c <FAT::unlink(char const*)>:
c001c18c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c192:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c19a:	75 08                	jne    c001c1a4 <FAT::unlink(char const*)+0x18>
c001c19c:	b8 04 00 00 00       	mov    eax,0x4
c001c1a1:	eb 61                	jmp    c001c204 <FAT::unlink(char const*)+0x78>
c001c1a3:	90                   	nop
c001c1a4:	83 ec 08             	sub    esp,0x8
c001c1a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c1ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1b2:	50                   	push   eax
c001c1b3:	e8 98 44 fe ff       	call   c0000650 <strcpy>
c001c1b8:	83 c4 10             	add    esp,0x10
c001c1bb:	83 ec 08             	sub    esp,0x8
c001c1be:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1c2:	50                   	push   eax
c001c1c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c1ca:	e8 61 fc ff ff       	call   c001be30 <FAT::fixFilepath(char*)>
c001c1cf:	83 c4 10             	add    esp,0x10
c001c1d2:	83 ec 0c             	sub    esp,0xc
c001c1d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1d9:	50                   	push   eax
c001c1da:	e8 22 8a fe ff       	call   c0004c01 <f_unlink>
c001c1df:	83 c4 10             	add    esp,0x10
c001c1e2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c1e9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c1f0:	85 c0                	test   eax,eax
c001c1f2:	75 08                	jne    c001c1fc <FAT::unlink(char const*)+0x70>
c001c1f4:	b8 00 00 00 00       	mov    eax,0x0
c001c1f9:	eb 09                	jmp    c001c204 <FAT::unlink(char const*)+0x78>
c001c1fb:	90                   	nop
c001c1fc:	b8 01 00 00 00       	mov    eax,0x1
c001c201:	8d 76 00             	lea    esi,[esi+0x0]
c001c204:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c20a:	c3                   	ret    
c001c20b:	90                   	nop

c001c20c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c20c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c212:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001c219:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001c220:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c224:	88 d0                	mov    al,dl
c001c226:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c22a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c232:	75 0c                	jne    c001c240 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001c234:	b8 04 00 00 00       	mov    eax,0x4
c001c239:	e9 7e 01 00 00       	jmp    c001c3bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001c23e:	66 90                	xchg   ax,ax
c001c240:	83 ec 08             	sub    esp,0x8
c001c243:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c24a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c24e:	50                   	push   eax
c001c24f:	e8 fc 43 fe ff       	call   c0000650 <strcpy>
c001c254:	83 c4 10             	add    esp,0x10
c001c257:	83 ec 08             	sub    esp,0x8
c001c25a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c25e:	50                   	push   eax
c001c25f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c266:	e8 c5 fb ff ff       	call   c001be30 <FAT::fixFilepath(char*)>
c001c26b:	83 c4 10             	add    esp,0x10
c001c26e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c276:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c27e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c283:	83 e0 01             	and    eax,0x1
c001c286:	74 14                	je     c001c29c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001c288:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c28f:	83 c8 01             	or     eax,0x1
c001c292:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c299:	8d 76 00             	lea    esi,[esi+0x0]
c001c29c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c2a1:	83 e0 02             	and    eax,0x2
c001c2a4:	74 12                	je     c001c2b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001c2a6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c2ad:	83 c8 20             	or     eax,0x20
c001c2b0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c2b7:	90                   	nop
c001c2b8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c2bd:	83 e0 04             	and    eax,0x4
c001c2c0:	74 12                	je     c001c2d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001c2c2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c2c9:	83 c8 04             	or     eax,0x4
c001c2cc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c2d3:	90                   	nop
c001c2d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c2d9:	83 e0 08             	and    eax,0x8
c001c2dc:	74 12                	je     c001c2f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c2de:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c2e5:	83 c8 02             	or     eax,0x2
c001c2e8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c2ef:	90                   	nop
c001c2f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c2f5:	83 e0 01             	and    eax,0x1
c001c2f8:	74 12                	je     c001c30c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001c2fa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c301:	83 c8 01             	or     eax,0x1
c001c304:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c30b:	90                   	nop
c001c30c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c311:	83 e0 02             	and    eax,0x2
c001c314:	74 12                	je     c001c328 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001c316:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c31d:	83 c8 20             	or     eax,0x20
c001c320:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c327:	90                   	nop
c001c328:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c32d:	83 e0 04             	and    eax,0x4
c001c330:	74 12                	je     c001c344 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001c332:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c339:	83 c8 04             	or     eax,0x4
c001c33c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c343:	90                   	nop
c001c344:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c349:	83 e0 08             	and    eax,0x8
c001c34c:	74 12                	je     c001c360 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001c34e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c355:	83 c8 02             	or     eax,0x2
c001c358:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c35f:	90                   	nop
c001c360:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001c367:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c36e:	09 d0                	or     eax,edx
c001c370:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c377:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c37f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c387:	83 ec 04             	sub    esp,0x4
c001c38a:	52                   	push   edx
c001c38b:	50                   	push   eax
c001c38c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c390:	50                   	push   eax
c001c391:	e8 de 8c fe ff       	call   c0005074 <f_chmod>
c001c396:	83 c4 10             	add    esp,0x10
c001c399:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c3a0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c3a7:	85 c0                	test   eax,eax
c001c3a9:	75 09                	jne    c001c3b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001c3ab:	b8 00 00 00 00       	mov    eax,0x0
c001c3b0:	eb 0a                	jmp    c001c3bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001c3b2:	66 90                	xchg   ax,ax
c001c3b4:	b8 01 00 00 00       	mov    eax,0x1
c001c3b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c3bc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c3c2:	c3                   	ret    
c001c3c3:	90                   	nop

c001c3c4 <FAT::rename(char const*, char const*)>:
c001c3c4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c3ca:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c3d2:	74 0c                	je     c001c3e0 <FAT::rename(char const*, char const*)+0x1c>
c001c3d4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c3dc:	75 0e                	jne    c001c3ec <FAT::rename(char const*, char const*)+0x28>
c001c3de:	66 90                	xchg   ax,ax
c001c3e0:	b8 04 00 00 00       	mov    eax,0x4
c001c3e5:	e9 9e 00 00 00       	jmp    c001c488 <FAT::rename(char const*, char const*)+0xc4>
c001c3ea:	66 90                	xchg   ax,ax
c001c3ec:	83 ec 08             	sub    esp,0x8
c001c3ef:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c3f6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c3fd:	50                   	push   eax
c001c3fe:	e8 4d 42 fe ff       	call   c0000650 <strcpy>
c001c403:	83 c4 10             	add    esp,0x10
c001c406:	83 ec 08             	sub    esp,0x8
c001c409:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c410:	50                   	push   eax
c001c411:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c418:	e8 13 fa ff ff       	call   c001be30 <FAT::fixFilepath(char*)>
c001c41d:	83 c4 10             	add    esp,0x10
c001c420:	83 ec 08             	sub    esp,0x8
c001c423:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c42a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c42e:	50                   	push   eax
c001c42f:	e8 1c 42 fe ff       	call   c0000650 <strcpy>
c001c434:	83 c4 10             	add    esp,0x10
c001c437:	83 ec 08             	sub    esp,0x8
c001c43a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c43e:	50                   	push   eax
c001c43f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c446:	e8 e5 f9 ff ff       	call   c001be30 <FAT::fixFilepath(char*)>
c001c44b:	83 c4 10             	add    esp,0x10
c001c44e:	83 ec 08             	sub    esp,0x8
c001c451:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c455:	50                   	push   eax
c001c456:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c45d:	50                   	push   eax
c001c45e:	e8 59 8a fe ff       	call   c0004ebc <f_rename>
c001c463:	83 c4 10             	add    esp,0x10
c001c466:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c46d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c474:	85 c0                	test   eax,eax
c001c476:	75 08                	jne    c001c480 <FAT::rename(char const*, char const*)+0xbc>
c001c478:	b8 00 00 00 00       	mov    eax,0x0
c001c47d:	eb 09                	jmp    c001c488 <FAT::rename(char const*, char const*)+0xc4>
c001c47f:	90                   	nop
c001c480:	b8 01 00 00 00       	mov    eax,0x1
c001c485:	8d 76 00             	lea    esi,[esi+0x0]
c001c488:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c48e:	c3                   	ret    
c001c48f:	90                   	nop

c001c490 <FAT::mkdir(char const*)>:
c001c490:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c496:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c49e:	75 08                	jne    c001c4a8 <FAT::mkdir(char const*)+0x18>
c001c4a0:	b8 04 00 00 00       	mov    eax,0x4
c001c4a5:	eb 61                	jmp    c001c508 <FAT::mkdir(char const*)+0x78>
c001c4a7:	90                   	nop
c001c4a8:	83 ec 08             	sub    esp,0x8
c001c4ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c4b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c4b6:	50                   	push   eax
c001c4b7:	e8 94 41 fe ff       	call   c0000650 <strcpy>
c001c4bc:	83 c4 10             	add    esp,0x10
c001c4bf:	83 ec 08             	sub    esp,0x8
c001c4c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c4c6:	50                   	push   eax
c001c4c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c4ce:	e8 5d f9 ff ff       	call   c001be30 <FAT::fixFilepath(char*)>
c001c4d3:	83 c4 10             	add    esp,0x10
c001c4d6:	83 ec 0c             	sub    esp,0xc
c001c4d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c4dd:	50                   	push   eax
c001c4de:	e8 3e 88 fe ff       	call   c0004d21 <f_mkdir>
c001c4e3:	83 c4 10             	add    esp,0x10
c001c4e6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c4ed:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c4f4:	85 c0                	test   eax,eax
c001c4f6:	75 08                	jne    c001c500 <FAT::mkdir(char const*)+0x70>
c001c4f8:	b8 00 00 00 00       	mov    eax,0x0
c001c4fd:	eb 09                	jmp    c001c508 <FAT::mkdir(char const*)+0x78>
c001c4ff:	90                   	nop
c001c500:	b8 01 00 00 00       	mov    eax,0x1
c001c505:	8d 76 00             	lea    esi,[esi+0x0]
c001c508:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c50e:	c3                   	ret    
c001c50f:	90                   	nop

c001c510 <FAT::exists(char const*)>:
c001c510:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c516:	83 ec 08             	sub    esp,0x8
c001c519:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c520:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c524:	50                   	push   eax
c001c525:	e8 26 41 fe ff       	call   c0000650 <strcpy>
c001c52a:	83 c4 10             	add    esp,0x10
c001c52d:	83 ec 08             	sub    esp,0x8
c001c530:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c534:	50                   	push   eax
c001c535:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c53c:	e8 ef f8 ff ff       	call   c001be30 <FAT::fixFilepath(char*)>
c001c541:	83 c4 10             	add    esp,0x10
c001c544:	83 ec 08             	sub    esp,0x8
c001c547:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001c54e:	50                   	push   eax
c001c54f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c553:	50                   	push   eax
c001c554:	e8 36 84 fe ff       	call   c000498f <f_stat>
c001c559:	83 c4 10             	add    esp,0x10
c001c55c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c563:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c56a:	85 c0                	test   eax,eax
c001c56c:	75 06                	jne    c001c574 <FAT::exists(char const*)+0x64>
c001c56e:	b0 01                	mov    al,0x1
c001c570:	eb 06                	jmp    c001c578 <FAT::exists(char const*)+0x68>
c001c572:	66 90                	xchg   ax,ax
c001c574:	b0 00                	mov    al,0x0
c001c576:	66 90                	xchg   ax,ax
c001c578:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c57e:	c3                   	ret    
c001c57f:	90                   	nop

c001c580 <isoReadDiscSectorHelper>:
c001c580:	83 ec 2c             	sub    esp,0x2c
c001c583:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c587:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c58b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c590:	83 e8 41             	sub    eax,0x41
c001c593:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c59a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c59e:	ba 00 00 00 00       	mov    edx,0x0
c001c5a3:	83 ec 0c             	sub    esp,0xc
c001c5a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c5aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c5ae:	52                   	push   edx
c001c5af:	50                   	push   eax
c001c5b0:	51                   	push   ecx
c001c5b1:	e8 3a e4 fe ff       	call   c000a9f0 <LogicalDisk::read(unsigned long long, int, void*)>
c001c5b6:	83 c4 20             	add    esp,0x20
c001c5b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5bd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c5c2:	74 0c                	je     c001c5d0 <isoReadDiscSectorHelper+0x50>
c001c5c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c5c8:	c1 e0 0b             	shl    eax,0xb
c001c5cb:	eb 0b                	jmp    c001c5d8 <isoReadDiscSectorHelper+0x58>
c001c5cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c5d0:	b8 00 00 00 00       	mov    eax,0x0
c001c5d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5d8:	83 c4 2c             	add    esp,0x2c
c001c5db:	c3                   	ret    

c001c5dc <iso_kprintf>:
c001c5dc:	83 ec 0c             	sub    esp,0xc
c001c5df:	83 ec 08             	sub    esp,0x8
c001c5e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5e6:	68 15 52 02 c0       	push   0xc0025215
c001c5eb:	e8 5e a9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c5f0:	83 c4 10             	add    esp,0x10
c001c5f3:	90                   	nop
c001c5f4:	83 c4 0c             	add    esp,0xc
c001c5f7:	c3                   	ret    

c001c5f8 <iso_kprintfd>:
c001c5f8:	83 ec 0c             	sub    esp,0xc
c001c5fb:	83 ec 08             	sub    esp,0x8
c001c5fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c602:	68 4b 42 02 c0       	push   0xc002424b
c001c607:	e8 42 a9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c60c:	83 c4 10             	add    esp,0x10
c001c60f:	90                   	nop
c001c610:	83 c4 0c             	add    esp,0xc
c001c613:	c3                   	ret    

c001c614 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c614:	b8 08 00 00 00       	mov    eax,0x8
c001c619:	c3                   	ret    

c001c61a <ISO9660::truncate(void*, unsigned long long)>:
c001c61a:	b8 01 00 00 00       	mov    eax,0x1
c001c61f:	c3                   	ret    

c001c620 <ISO9660::getName()>:
c001c620:	b8 d4 55 02 c0       	mov    eax,0xc00255d4
c001c625:	c3                   	ret    

c001c626 <ISO9660::closeDir(void*)>:
c001c626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c62a:	8b 00                	mov    eax,DWORD PTR [eax]
c001c62c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001c62f:	90                   	nop

c001c630 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c630:	b8 01 00 00 00       	mov    eax,0x1
c001c635:	c3                   	ret    

c001c636 <ISO9660::unlink(char const*)>:
c001c636:	b8 01 00 00 00       	mov    eax,0x1
c001c63b:	c3                   	ret    

c001c63c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c63c:	b8 03 00 00 00       	mov    eax,0x3
c001c641:	c3                   	ret    

c001c642 <ISO9660::rename(char const*, char const*)>:
c001c642:	b8 01 00 00 00       	mov    eax,0x1
c001c647:	c3                   	ret    

c001c648 <ISO9660::mkdir(char const*)>:
c001c648:	b8 01 00 00 00       	mov    eax,0x1
c001c64d:	c3                   	ret    

c001c64e <ISO9660::~ISO9660()>:
c001c64e:	83 ec 0c             	sub    esp,0xc
c001c651:	ba 14 57 02 c0       	mov    edx,0xc0025714
c001c656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65a:	89 10                	mov    DWORD PTR [eax],edx
c001c65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c660:	83 ec 0c             	sub    esp,0xc
c001c663:	50                   	push   eax
c001c664:	e8 11 b7 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001c669:	83 c4 10             	add    esp,0x10
c001c66c:	90                   	nop
c001c66d:	83 c4 0c             	add    esp,0xc
c001c670:	c3                   	ret    
c001c671:	90                   	nop

c001c672 <ISO9660::~ISO9660()>:
c001c672:	83 ec 0c             	sub    esp,0xc
c001c675:	83 ec 0c             	sub    esp,0xc
c001c678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c67c:	e8 cd ff ff ff       	call   c001c64e <ISO9660::~ISO9660()>
c001c681:	83 c4 10             	add    esp,0x10
c001c684:	83 ec 08             	sub    esp,0x8
c001c687:	6a 08                	push   0x8
c001c689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c68d:	e8 c9 0b ff ff       	call   c000d25b <operator delete(void*, unsigned long)>
c001c692:	83 c4 10             	add    esp,0x10
c001c695:	83 c4 0c             	add    esp,0xc
c001c698:	c3                   	ret    
c001c699:	90                   	nop

c001c69a <ISO9660::exists(char const*)>:
c001c69a:	83 ec 18             	sub    esp,0x18
c001c69d:	68 ef 55 02 c0       	push   0xc00255ef
c001c6a2:	e8 83 37 ff ff       	call   c000fe2a <KePanic(char const*)>
c001c6a7:	31 c0                	xor    eax,eax
c001c6a9:	83 c4 1c             	add    esp,0x1c
c001c6ac:	c3                   	ret    
c001c6ad:	90                   	nop

c001c6ae <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c6ae:	56                   	push   esi
c001c6af:	53                   	push   ebx
c001c6b0:	53                   	push   ebx
c001c6b1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c6b5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c6b9:	85 db                	test   ebx,ebx
c001c6bb:	0f 84 ca 00 00 00    	je     c001c78b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c6c1:	85 f6                	test   esi,esi
c001c6c3:	0f 84 c2 00 00 00    	je     c001c78b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c6c9:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001c6ce:	b8 03 00 00 00       	mov    eax,0x3
c001c6d3:	0f 85 b7 00 00 00    	jne    c001c790 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c6d9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001c6db:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001c6e1:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c6e8:	74 1b                	je     c001c705 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001c6ea:	85 c0                	test   eax,eax
c001c6ec:	74 10                	je     c001c6fe <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001c6ee:	83 ec 0c             	sub    esp,0xc
c001c6f1:	68 0d 56 02 c0       	push   0xc002560d
c001c6f6:	e8 2f 37 ff ff       	call   c000fe2a <KePanic(char const*)>
c001c6fb:	83 c4 10             	add    esp,0x10
c001c6fe:	8a 03                	mov    al,BYTE PTR [ebx]
c001c700:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c705:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c708:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c70f:	85 c0                	test   eax,eax
c001c711:	74 09                	je     c001c71c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001c713:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c71a:	74 48                	je     c001c764 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001c71c:	83 ec 0c             	sub    esp,0xc
c001c71f:	68 1d 56 02 c0       	push   0xc002561d
c001c724:	e8 25 a8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c729:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c72c:	83 c4 10             	add    esp,0x10
c001c72f:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c736:	85 c0                	test   eax,eax
c001c738:	74 17                	je     c001c751 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001c73a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c741:	83 ec 0c             	sub    esp,0xc
c001c744:	68 3d 56 02 c0       	push   0xc002563d
c001c749:	e8 00 a8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c74e:	83 c4 10             	add    esp,0x10
c001c751:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c758:	83 ec 0c             	sub    esp,0xc
c001c75b:	50                   	push   eax
c001c75c:	e8 e6 a4 fe ff       	call   c0006c47 <init_percd>
c001c761:	83 c4 10             	add    esp,0x10
c001c764:	51                   	push   ecx
c001c765:	83 c3 03             	add    ebx,0x3
c001c768:	51                   	push   ecx
c001c769:	6a 00                	push   0x0
c001c76b:	53                   	push   ebx
c001c76c:	e8 99 9f fe ff       	call   c000670a <iso_open>
c001c771:	83 c4 10             	add    esp,0x10
c001c774:	89 c2                	mov    edx,eax
c001c776:	b8 01 00 00 00       	mov    eax,0x1
c001c77b:	83 fa ff             	cmp    edx,0xffffffff
c001c77e:	74 10                	je     c001c790 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c780:	83 c2 32             	add    edx,0x32
c001c783:	31 c0                	xor    eax,eax
c001c785:	01 d2                	add    edx,edx
c001c787:	89 16                	mov    DWORD PTR [esi],edx
c001c789:	eb 05                	jmp    c001c790 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c78b:	b8 04 00 00 00       	mov    eax,0x4
c001c790:	5a                   	pop    edx
c001c791:	5b                   	pop    ebx
c001c792:	5e                   	pop    esi
c001c793:	c3                   	ret    

c001c794 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c794:	53                   	push   ebx
c001c795:	83 ec 08             	sub    esp,0x8
c001c798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c79c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c7a0:	85 c0                	test   eax,eax
c001c7a2:	74 2d                	je     c001c7d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c7a4:	85 db                	test   ebx,ebx
c001c7a6:	74 29                	je     c001c7d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c7a8:	52                   	push   edx
c001c7a9:	b9 02 00 00 00       	mov    ecx,0x2
c001c7ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7b2:	99                   	cdq    
c001c7b3:	f7 f9                	idiv   ecx
c001c7b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c7b9:	83 e8 32             	sub    eax,0x32
c001c7bc:	50                   	push   eax
c001c7bd:	e8 f0 9f fe ff       	call   c00067b2 <iso_read>
c001c7c2:	83 c4 10             	add    esp,0x10
c001c7c5:	89 03                	mov    DWORD PTR [ebx],eax
c001c7c7:	09 d0                	or     eax,edx
c001c7c9:	0f 94 c0             	sete   al
c001c7cc:	0f b6 c0             	movzx  eax,al
c001c7cf:	eb 05                	jmp    c001c7d6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001c7d1:	b8 04 00 00 00       	mov    eax,0x4
c001c7d6:	83 c4 08             	add    esp,0x8
c001c7d9:	5b                   	pop    ebx
c001c7da:	c3                   	ret    
c001c7db:	90                   	nop

c001c7dc <ISO9660::seek(void*, unsigned long long)>:
c001c7dc:	57                   	push   edi
c001c7dd:	b8 04 00 00 00       	mov    eax,0x4
c001c7e2:	56                   	push   esi
c001c7e3:	51                   	push   ecx
c001c7e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7e8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c7ec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c7f0:	85 d2                	test   edx,edx
c001c7f2:	74 26                	je     c001c81a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001c7f4:	89 d0                	mov    eax,edx
c001c7f6:	b9 02 00 00 00       	mov    ecx,0x2
c001c7fb:	6a 00                	push   0x0
c001c7fd:	99                   	cdq    
c001c7fe:	f7 f9                	idiv   ecx
c001c800:	57                   	push   edi
c001c801:	56                   	push   esi
c001c802:	83 e8 32             	sub    eax,0x32
c001c805:	50                   	push   eax
c001c806:	e8 bd a0 fe ff       	call   c00068c8 <iso_seek>
c001c80b:	83 c4 10             	add    esp,0x10
c001c80e:	31 f0                	xor    eax,esi
c001c810:	31 fa                	xor    edx,edi
c001c812:	09 d0                	or     eax,edx
c001c814:	0f 95 c0             	setne  al
c001c817:	0f b6 c0             	movzx  eax,al
c001c81a:	5a                   	pop    edx
c001c81b:	5e                   	pop    esi
c001c81c:	5f                   	pop    edi
c001c81d:	c3                   	ret    

c001c81e <ISO9660::tell(void*, unsigned long long*)>:
c001c81e:	53                   	push   ebx
c001c81f:	83 ec 08             	sub    esp,0x8
c001c822:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c826:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c82a:	85 c0                	test   eax,eax
c001c82c:	74 24                	je     c001c852 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001c82e:	85 db                	test   ebx,ebx
c001c830:	74 20                	je     c001c852 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001c832:	b9 02 00 00 00       	mov    ecx,0x2
c001c837:	99                   	cdq    
c001c838:	f7 f9                	idiv   ecx
c001c83a:	83 ec 0c             	sub    esp,0xc
c001c83d:	83 e8 32             	sub    eax,0x32
c001c840:	50                   	push   eax
c001c841:	e8 06 a1 fe ff       	call   c000694c <iso_tell>
c001c846:	83 c4 10             	add    esp,0x10
c001c849:	89 03                	mov    DWORD PTR [ebx],eax
c001c84b:	31 c0                	xor    eax,eax
c001c84d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001c850:	eb 05                	jmp    c001c857 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001c852:	b8 04 00 00 00       	mov    eax,0x4
c001c857:	83 c4 08             	add    esp,0x8
c001c85a:	5b                   	pop    ebx
c001c85b:	c3                   	ret    

c001c85c <ISO9660::stat(void*, unsigned long long*)>:
c001c85c:	56                   	push   esi
c001c85d:	53                   	push   ebx
c001c85e:	83 ec 10             	sub    esp,0x10
c001c861:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c865:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c869:	68 61 56 02 c0       	push   0xc0025661
c001c86e:	e8 db a6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c873:	83 c4 10             	add    esp,0x10
c001c876:	85 db                	test   ebx,ebx
c001c878:	74 2a                	je     c001c8a4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001c87a:	85 f6                	test   esi,esi
c001c87c:	74 26                	je     c001c8a4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001c87e:	89 d8                	mov    eax,ebx
c001c880:	b9 02 00 00 00       	mov    ecx,0x2
c001c885:	99                   	cdq    
c001c886:	83 ec 0c             	sub    esp,0xc
c001c889:	f7 f9                	idiv   ecx
c001c88b:	83 e8 32             	sub    eax,0x32
c001c88e:	50                   	push   eax
c001c88f:	e8 e9 a0 fe ff       	call   c000697d <iso_total>
c001c894:	83 c4 10             	add    esp,0x10
c001c897:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001c89e:	89 06                	mov    DWORD PTR [esi],eax
c001c8a0:	31 c0                	xor    eax,eax
c001c8a2:	eb 05                	jmp    c001c8a9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001c8a4:	b8 04 00 00 00       	mov    eax,0x4
c001c8a9:	5a                   	pop    edx
c001c8aa:	5b                   	pop    ebx
c001c8ab:	5e                   	pop    esi
c001c8ac:	c3                   	ret    
c001c8ad:	90                   	nop

c001c8ae <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c8ae:	55                   	push   ebp
c001c8af:	57                   	push   edi
c001c8b0:	56                   	push   esi
c001c8b1:	53                   	push   ebx
c001c8b2:	83 ec 18             	sub    esp,0x18
c001c8b5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c8b9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c8bd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c8c1:	68 69 56 02 c0       	push   0xc0025669
c001c8c6:	e8 83 a6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c8cb:	83 c4 10             	add    esp,0x10
c001c8ce:	85 ff                	test   edi,edi
c001c8d0:	0f 94 c0             	sete   al
c001c8d3:	85 f6                	test   esi,esi
c001c8d5:	0f 94 c2             	sete   dl
c001c8d8:	09 d0                	or     eax,edx
c001c8da:	a8 01                	test   al,0x1
c001c8dc:	0f 85 dd 00 00 00    	jne    c001c9bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001c8e2:	85 db                	test   ebx,ebx
c001c8e4:	0f 84 d5 00 00 00    	je     c001c9bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001c8ea:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c8ed:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001c8f3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001c8fa:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c901:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001c903:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001c909:	74 1b                	je     c001c926 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001c90b:	85 c0                	test   eax,eax
c001c90d:	74 10                	je     c001c91f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001c90f:	83 ec 0c             	sub    esp,0xc
c001c912:	68 0d 56 02 c0       	push   0xc002560d
c001c917:	e8 0e 35 ff ff       	call   c000fe2a <KePanic(char const*)>
c001c91c:	83 c4 10             	add    esp,0x10
c001c91f:	8a 03                	mov    al,BYTE PTR [ebx]
c001c921:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c926:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c929:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c930:	85 c0                	test   eax,eax
c001c932:	74 09                	je     c001c93d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001c934:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c93b:	74 51                	je     c001c98e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c93d:	83 ec 0c             	sub    esp,0xc
c001c940:	68 71 56 02 c0       	push   0xc0025671
c001c945:	e8 04 a6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c94a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c94d:	83 c4 10             	add    esp,0x10
c001c950:	83 3c 85 dc b9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4624],0x0
c001c958:	74 21                	je     c001c97b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001c95a:	83 ec 0c             	sub    esp,0xc
c001c95d:	68 91 56 02 c0       	push   0xc0025691
c001c962:	e8 e7 a5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c967:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c96a:	83 c4 10             	add    esp,0x10
c001c96d:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c974:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c97b:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c982:	83 ec 0c             	sub    esp,0xc
c001c985:	50                   	push   eax
c001c986:	e8 bc a2 fe ff       	call   c0006c47 <init_percd>
c001c98b:	83 c4 10             	add    esp,0x10
c001c98e:	52                   	push   edx
c001c98f:	83 c3 03             	add    ebx,0x3
c001c992:	52                   	push   edx
c001c993:	6a 00                	push   0x0
c001c995:	53                   	push   ebx
c001c996:	e8 6f 9d fe ff       	call   c000670a <iso_open>
c001c99b:	83 c4 10             	add    esp,0x10
c001c99e:	83 f8 ff             	cmp    eax,0xffffffff
c001c9a1:	89 c5                	mov    ebp,eax
c001c9a3:	75 21                	jne    c001c9c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001c9a5:	50                   	push   eax
c001c9a6:	50                   	push   eax
c001c9a7:	6a 01                	push   0x1
c001c9a9:	53                   	push   ebx
c001c9aa:	e8 5b 9d fe ff       	call   c000670a <iso_open>
c001c9af:	83 c4 10             	add    esp,0x10
c001c9b2:	ba 02 00 00 00       	mov    edx,0x2
c001c9b7:	40                   	inc    eax
c001c9b8:	74 2b                	je     c001c9e5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001c9ba:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001c9bd:	eb 24                	jmp    c001c9e3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001c9bf:	ba 04 00 00 00       	mov    edx,0x4
c001c9c4:	eb 1f                	jmp    c001c9e5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001c9c6:	83 ec 0c             	sub    esp,0xc
c001c9c9:	50                   	push   eax
c001c9ca:	e8 ae 9f fe ff       	call   c000697d <iso_total>
c001c9cf:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001c9d6:	89 07                	mov    DWORD PTR [edi],eax
c001c9d8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c9db:	e8 b4 9d fe ff       	call   c0006794 <iso_close>
c001c9e0:	83 c4 10             	add    esp,0x10
c001c9e3:	31 d2                	xor    edx,edx
c001c9e5:	83 c4 0c             	add    esp,0xc
c001c9e8:	89 d0                	mov    eax,edx
c001c9ea:	5b                   	pop    ebx
c001c9eb:	5e                   	pop    esi
c001c9ec:	5f                   	pop    edi
c001c9ed:	5d                   	pop    ebp
c001c9ee:	c3                   	ret    
c001c9ef:	90                   	nop

c001c9f0 <ISO9660::close(void*)>:
c001c9f0:	83 ec 0c             	sub    esp,0xc
c001c9f3:	b8 04 00 00 00       	mov    eax,0x4
c001c9f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c9fc:	85 d2                	test   edx,edx
c001c9fe:	74 1b                	je     c001ca1b <ISO9660::close(void*)+0x2b>
c001ca00:	89 d0                	mov    eax,edx
c001ca02:	b9 02 00 00 00       	mov    ecx,0x2
c001ca07:	99                   	cdq    
c001ca08:	83 ec 0c             	sub    esp,0xc
c001ca0b:	f7 f9                	idiv   ecx
c001ca0d:	83 e8 32             	sub    eax,0x32
c001ca10:	50                   	push   eax
c001ca11:	e8 7e 9d fe ff       	call   c0006794 <iso_close>
c001ca16:	83 c4 10             	add    esp,0x10
c001ca19:	31 c0                	xor    eax,eax
c001ca1b:	83 c4 0c             	add    esp,0xc
c001ca1e:	c3                   	ret    
c001ca1f:	90                   	nop

c001ca20 <ISO9660::openDir(char const*, void**)>:
c001ca20:	56                   	push   esi
c001ca21:	53                   	push   ebx
c001ca22:	50                   	push   eax
c001ca23:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ca27:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ca2b:	85 db                	test   ebx,ebx
c001ca2d:	0f 84 bd 00 00 00    	je     c001caf0 <ISO9660::openDir(char const*, void**)+0xd0>
c001ca33:	85 f6                	test   esi,esi
c001ca35:	0f 84 b5 00 00 00    	je     c001caf0 <ISO9660::openDir(char const*, void**)+0xd0>
c001ca3b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001ca3d:	38 15 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,dl
c001ca43:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001ca4a:	74 1b                	je     c001ca67 <ISO9660::openDir(char const*, void**)+0x47>
c001ca4c:	85 c0                	test   eax,eax
c001ca4e:	74 10                	je     c001ca60 <ISO9660::openDir(char const*, void**)+0x40>
c001ca50:	83 ec 0c             	sub    esp,0xc
c001ca53:	68 0d 56 02 c0       	push   0xc002560d
c001ca58:	e8 cd 33 ff ff       	call   c000fe2a <KePanic(char const*)>
c001ca5d:	83 c4 10             	add    esp,0x10
c001ca60:	8a 03                	mov    al,BYTE PTR [ebx]
c001ca62:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001ca67:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ca6a:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001ca71:	85 c0                	test   eax,eax
c001ca73:	74 10                	je     c001ca85 <ISO9660::openDir(char const*, void**)+0x65>
c001ca75:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ca7c:	74 1a                	je     c001ca98 <ISO9660::openDir(char const*, void**)+0x78>
c001ca7e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001ca85:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001ca8c:	83 ec 0c             	sub    esp,0xc
c001ca8f:	50                   	push   eax
c001ca90:	e8 b2 a1 fe ff       	call   c0006c47 <init_percd>
c001ca95:	83 c4 10             	add    esp,0x10
c001ca98:	50                   	push   eax
c001ca99:	83 c3 03             	add    ebx,0x3
c001ca9c:	50                   	push   eax
c001ca9d:	6a 01                	push   0x1
c001ca9f:	53                   	push   ebx
c001caa0:	e8 65 9c fe ff       	call   c000670a <iso_open>
c001caa5:	83 c4 10             	add    esp,0x10
c001caa8:	83 f8 ff             	cmp    eax,0xffffffff
c001caab:	89 c3                	mov    ebx,eax
c001caad:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001cab2:	75 1c                	jne    c001cad0 <ISO9660::openDir(char const*, void**)+0xb0>
c001cab4:	53                   	push   ebx
c001cab5:	53                   	push   ebx
c001cab6:	68 b5 56 02 c0       	push   0xc00256b5
c001cabb:	ff b0 66 05 00 00    	push   DWORD PTR [eax+0x566]
c001cac1:	e8 04 5c ff ff       	call   c00126ca <VgaText::puts(char const*)>
c001cac6:	83 c4 10             	add    esp,0x10
c001cac9:	b8 01 00 00 00       	mov    eax,0x1
c001cace:	eb 25                	jmp    c001caf5 <ISO9660::openDir(char const*, void**)+0xd5>
c001cad0:	51                   	push   ecx
c001cad1:	01 db                	add    ebx,ebx
c001cad3:	51                   	push   ecx
c001cad4:	83 c3 65             	add    ebx,0x65
c001cad7:	68 c8 56 02 c0       	push   0xc00256c8
c001cadc:	ff b0 66 05 00 00    	push   DWORD PTR [eax+0x566]
c001cae2:	e8 e3 5b ff ff       	call   c00126ca <VgaText::puts(char const*)>
c001cae7:	83 c4 10             	add    esp,0x10
c001caea:	31 c0                	xor    eax,eax
c001caec:	89 1e                	mov    DWORD PTR [esi],ebx
c001caee:	eb 05                	jmp    c001caf5 <ISO9660::openDir(char const*, void**)+0xd5>
c001caf0:	b8 04 00 00 00       	mov    eax,0x4
c001caf5:	5a                   	pop    edx
c001caf6:	5b                   	pop    ebx
c001caf7:	5e                   	pop    esi
c001caf8:	c3                   	ret    
c001caf9:	90                   	nop

c001cafa <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001cafa:	55                   	push   ebp
c001cafb:	57                   	push   edi
c001cafc:	56                   	push   esi
c001cafd:	53                   	push   ebx
c001cafe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cb04:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001cb0b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001cb12:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001cb19:	85 db                	test   ebx,ebx
c001cb1b:	0f 84 e4 00 00 00    	je     c001cc05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001cb21:	85 ed                	test   ebp,ebp
c001cb23:	0f 84 dc 00 00 00    	je     c001cc05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001cb29:	83 ec 0c             	sub    esp,0xc
c001cb2c:	68 db 56 02 c0       	push   0xc00256db
c001cb31:	e8 18 a4 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001cb36:	89 d8                	mov    eax,ebx
c001cb38:	b9 02 00 00 00       	mov    ecx,0x2
c001cb3d:	99                   	cdq    
c001cb3e:	f7 f9                	idiv   ecx
c001cb40:	83 e8 32             	sub    eax,0x32
c001cb43:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb46:	e8 84 9e fe ff       	call   c00069cf <iso_readdir>
c001cb4b:	83 c4 10             	add    esp,0x10
c001cb4e:	85 c0                	test   eax,eax
c001cb50:	89 c3                	mov    ebx,eax
c001cb52:	75 38                	jne    c001cb8c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001cb54:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001cb59:	53                   	push   ebx
c001cb5a:	53                   	push   ebx
c001cb5b:	68 e6 56 02 c0       	push   0xc00256e6
c001cb60:	ff b0 66 05 00 00    	push   DWORD PTR [eax+0x566]
c001cb66:	e8 5f 5b ff ff       	call   c00126ca <VgaText::puts(char const*)>
c001cb6b:	83 c4 0c             	add    esp,0xc
c001cb6e:	68 10 01 00 00       	push   0x110
c001cb73:	6a 00                	push   0x0
c001cb75:	57                   	push   edi
c001cb76:	e8 75 39 fe ff       	call   c00004f0 <memset>
c001cb7b:	83 c4 10             	add    esp,0x10
c001cb7e:	b8 01 00 00 00       	mov    eax,0x1
c001cb83:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001cb8a:	eb 7e                	jmp    c001cc0a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001cb8c:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001cb92:	8d 70 08             	lea    esi,[eax+0x8]
c001cb95:	83 ec 0c             	sub    esp,0xc
c001cb98:	56                   	push   esi
c001cb99:	e8 e2 39 fe ff       	call   c0000580 <strlen>
c001cb9e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cba6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbaa:	83 c4 10             	add    esp,0x10
c001cbad:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001cbb1:	75 0a                	jne    c001cbbd <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001cbb3:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001cbb6:	b8 02 00 00 00       	mov    eax,0x2
c001cbbb:	74 05                	je     c001cbc2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001cbbd:	b8 01 00 00 00       	mov    eax,0x1
c001cbc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbc6:	50                   	push   eax
c001cbc7:	50                   	push   eax
c001cbc8:	56                   	push   esi
c001cbc9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cbcd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001cbd1:	50                   	push   eax
c001cbd2:	e8 79 3a fe ff       	call   c0000650 <strcpy>
c001cbd7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001cbde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cbe0:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001cbe7:	5a                   	pop    edx
c001cbe8:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001cbed:	59                   	pop    ecx
c001cbee:	68 f9 56 02 c0       	push   0xc00256f9
c001cbf3:	ff b0 66 05 00 00    	push   DWORD PTR [eax+0x566]
c001cbf9:	e8 cc 5a ff ff       	call   c00126ca <VgaText::puts(char const*)>
c001cbfe:	83 c4 10             	add    esp,0x10
c001cc01:	31 c0                	xor    eax,eax
c001cc03:	eb 05                	jmp    c001cc0a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001cc05:	b8 04 00 00 00       	mov    eax,0x4
c001cc0a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cc10:	5b                   	pop    ebx
c001cc11:	5e                   	pop    esi
c001cc12:	5f                   	pop    edi
c001cc13:	5d                   	pop    ebp
c001cc14:	c3                   	ret    

c001cc15 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001cc15:	57                   	push   edi
c001cc16:	56                   	push   esi
c001cc17:	53                   	push   ebx
c001cc18:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc1c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cc20:	39 35 24 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec24,esi
c001cc26:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cc2a:	0f be cb             	movsx  ecx,bl
c001cc2d:	75 0b                	jne    c001cc3a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001cc2f:	0f be 05 a4 69 02 c0 	movsx  eax,BYTE PTR ds:0xc00269a4
c001cc36:	39 c8                	cmp    eax,ecx
c001cc38:	74 47                	je     c001cc81 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001cc3a:	83 ec 0c             	sub    esp,0xc
c001cc3d:	31 d2                	xor    edx,edx
c001cc3f:	68 40 ec 02 c0       	push   0xc002ec40
c001cc44:	6a 01                	push   0x1
c001cc46:	52                   	push   edx
c001cc47:	56                   	push   esi
c001cc48:	ff 34 8d dc b9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4624]
c001cc4f:	e8 9c dd fe ff       	call   c000a9f0 <LogicalDisk::read(unsigned long long, int, void*)>
c001cc54:	83 c4 20             	add    esp,0x20
c001cc57:	85 c0                	test   eax,eax
c001cc59:	75 0e                	jne    c001cc69 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001cc5b:	89 35 24 ec 02 c0    	mov    DWORD PTR ds:0xc002ec24,esi
c001cc61:	88 1d a4 69 02 c0    	mov    BYTE PTR ds:0xc00269a4,bl
c001cc67:	eb 18                	jmp    c001cc81 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001cc69:	50                   	push   eax
c001cc6a:	68 00 08 00 00       	push   0x800
c001cc6f:	6a 00                	push   0x0
c001cc71:	57                   	push   edi
c001cc72:	e8 79 38 fe ff       	call   c00004f0 <memset>
c001cc77:	83 c4 10             	add    esp,0x10
c001cc7a:	b8 01 00 00 00       	mov    eax,0x1
c001cc7f:	eb 0e                	jmp    c001cc8f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001cc81:	be 40 ec 02 c0       	mov    esi,0xc002ec40
c001cc86:	b9 00 08 00 00       	mov    ecx,0x800
c001cc8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cc8d:	31 c0                	xor    eax,eax
c001cc8f:	5b                   	pop    ebx
c001cc90:	5e                   	pop    esi
c001cc91:	5f                   	pop    edi
c001cc92:	c3                   	ret    
c001cc93:	90                   	nop

c001cc94 <ISO9660::tryMount(LogicalDisk*, int)>:
c001cc94:	53                   	push   ebx
c001cc95:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001cc9b:	c7 05 24 ec 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002ec24,0xdeadbeef
c001cca5:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ccac:	8d 58 41             	lea    ebx,[eax+0x41]
c001ccaf:	0f be db             	movsx  ebx,bl
c001ccb2:	53                   	push   ebx
c001ccb3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ccb7:	50                   	push   eax
c001ccb8:	6a 10                	push   0x10
c001ccba:	e8 56 ff ff ff       	call   c001cc15 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ccbf:	83 c4 10             	add    esp,0x10
c001ccc2:	31 d2                	xor    edx,edx
c001ccc4:	85 c0                	test   eax,eax
c001ccc6:	75 33                	jne    c001ccfb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ccc8:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001cccd:	75 2c                	jne    c001ccfb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001cccf:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ccd4:	75 25                	jne    c001ccfb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ccd6:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ccdb:	75 1e                	jne    c001ccfb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ccdd:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001cce2:	75 17                	jne    c001ccfb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001cce4:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001cce9:	75 10                	jne    c001ccfb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001cceb:	83 ec 0c             	sub    esp,0xc
c001ccee:	53                   	push   ebx
c001ccef:	e8 53 9f fe ff       	call   c0006c47 <init_percd>
c001ccf4:	83 c4 10             	add    esp,0x10
c001ccf7:	40                   	inc    eax
c001ccf8:	0f 95 c2             	setne  dl
c001ccfb:	81 c4 08 08 00 00    	add    esp,0x808
c001cd01:	88 d0                	mov    al,dl
c001cd03:	5b                   	pop    ebx
c001cd04:	c3                   	ret    
c001cd05:	90                   	nop

c001cd06 <ISO9660::ISO9660()>:
c001cd06:	83 ec 0c             	sub    esp,0xc
c001cd09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd0d:	83 ec 0c             	sub    esp,0xc
c001cd10:	50                   	push   eax
c001cd11:	e8 40 b0 fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001cd16:	83 c4 10             	add    esp,0x10
c001cd19:	ba 14 57 02 c0       	mov    edx,0xc0025714
c001cd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd22:	89 10                	mov    DWORD PTR [eax],edx
c001cd24:	e8 30 a0 fe ff       	call   c0006d59 <fs_iso9660_init>
c001cd29:	90                   	nop
c001cd2a:	83 c4 0c             	add    esp,0xc
c001cd2d:	c3                   	ret    

c001cd2e <SoundCard::beginPlayback()>:
c001cd2e:	c7 44 24 04 78 57 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025778
c001cd36:	e9 ef 30 ff ff       	jmp    c000fe2a <KePanic(char const*)>
c001cd3b:	90                   	nop

c001cd3c <SoundCard::stopPlayback()>:
c001cd3c:	c7 44 24 04 78 57 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025778
c001cd44:	e9 e1 30 ff ff       	jmp    c000fe2a <KePanic(char const*)>
c001cd49:	90                   	nop

c001cd4a <SoundCard::SoundCard(char const*)>:
c001cd4a:	83 ec 1c             	sub    esp,0x1c
c001cd4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd51:	83 ec 08             	sub    esp,0x8
c001cd54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd58:	50                   	push   eax
c001cd59:	e8 9e cd fe ff       	call   c0009afc <Device::Device(char const*)>
c001cd5e:	83 c4 10             	add    esp,0x10
c001cd61:	ba c4 57 02 c0       	mov    edx,0xc00257c4
c001cd66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd6a:	89 10                	mov    DWORD PTR [eax],edx
c001cd6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd70:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cd77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd7b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cd85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd89:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cd93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd97:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cda1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cda5:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cdaf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cdb7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cdbc:	7f 1a                	jg     c001cdd8 <SoundCard::SoundCard(char const*)+0x8e>
c001cdbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cdc6:	83 c2 54             	add    edx,0x54
c001cdc9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cdd1:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001cdd6:	eb df                	jmp    c001cdb7 <SoundCard::SoundCard(char const*)+0x6d>
c001cdd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cddc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cde3:	90                   	nop
c001cde4:	83 c4 1c             	add    esp,0x1c
c001cde7:	c3                   	ret    

c001cde8 <SoundCard::~SoundCard()>:
c001cde8:	83 ec 0c             	sub    esp,0xc
c001cdeb:	ba c4 57 02 c0       	mov    edx,0xc00257c4
c001cdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf4:	89 10                	mov    DWORD PTR [eax],edx
c001cdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdfa:	83 ec 0c             	sub    esp,0xc
c001cdfd:	50                   	push   eax
c001cdfe:	e8 99 ca fe ff       	call   c000989c <Device::~Device()>
c001ce03:	83 c4 10             	add    esp,0x10
c001ce06:	90                   	nop
c001ce07:	83 c4 0c             	add    esp,0xc
c001ce0a:	c3                   	ret    
c001ce0b:	90                   	nop

c001ce0c <SoundCard::~SoundCard()>:
c001ce0c:	83 ec 0c             	sub    esp,0xc
c001ce0f:	83 ec 0c             	sub    esp,0xc
c001ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce16:	e8 cd ff ff ff       	call   c001cde8 <SoundCard::~SoundCard()>
c001ce1b:	83 c4 10             	add    esp,0x10
c001ce1e:	83 ec 08             	sub    esp,0x8
c001ce21:	68 e8 01 00 00       	push   0x1e8
c001ce26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce2a:	e8 2c 04 ff ff       	call   c000d25b <operator delete(void*, unsigned long)>
c001ce2f:	83 c4 10             	add    esp,0x10
c001ce32:	83 c4 0c             	add    esp,0xc
c001ce35:	c3                   	ret    

c001ce36 <SoundCard::configureRates(int, int, int)>:
c001ce36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ce3a:	31 c0                	xor    eax,eax
c001ce3c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ce43:	75 20                	jne    c001ce65 <SoundCard::configureRates(int, int, int)+0x2f>
c001ce45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce49:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ce4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce53:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ce59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce5d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ce63:	b0 01                	mov    al,0x1
c001ce65:	c3                   	ret    

c001ce66 <SoundCard::getSamples16(int, short*)>:
c001ce66:	55                   	push   ebp
c001ce67:	57                   	push   edi
c001ce68:	31 ff                	xor    edi,edi
c001ce6a:	56                   	push   esi
c001ce6b:	53                   	push   ebx
c001ce6c:	31 db                	xor    ebx,ebx
c001ce6e:	83 ec 10             	sub    esp,0x10
c001ce71:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ce75:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ce79:	8d 04 36             	lea    eax,[esi+esi*1]
c001ce7c:	50                   	push   eax
c001ce7d:	6a 00                	push   0x0
c001ce7f:	55                   	push   ebp
c001ce80:	e8 6b 36 fe ff       	call   c00004f0 <memset>
c001ce85:	83 c4 10             	add    esp,0x10
c001ce88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce8c:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001ce93:	85 c0                	test   eax,eax
c001ce95:	74 1a                	je     c001ceb1 <SoundCard::getSamples16(int, short*)+0x4b>
c001ce97:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ce9b:	75 14                	jne    c001ceb1 <SoundCard::getSamples16(int, short*)+0x4b>
c001ce9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cea1:	55                   	push   ebp
c001cea2:	56                   	push   esi
c001cea3:	50                   	push   eax
c001cea4:	e8 8f 03 00 00       	call   c001d238 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001cea9:	83 c4 10             	add    esp,0x10
c001ceac:	39 c3                	cmp    ebx,eax
c001ceae:	0f 4c d8             	cmovl  ebx,eax
c001ceb1:	47                   	inc    edi
c001ceb2:	83 ff 20             	cmp    edi,0x20
c001ceb5:	75 d1                	jne    c001ce88 <SoundCard::getSamples16(int, short*)+0x22>
c001ceb7:	83 c4 0c             	add    esp,0xc
c001ceba:	89 d8                	mov    eax,ebx
c001cebc:	5b                   	pop    ebx
c001cebd:	5e                   	pop    esi
c001cebe:	5f                   	pop    edi
c001cebf:	5d                   	pop    ebp
c001cec0:	c3                   	ret    
c001cec1:	90                   	nop

c001cec2 <SoundCard::getSamples32(int, int*)>:
c001cec2:	55                   	push   ebp
c001cec3:	57                   	push   edi
c001cec4:	31 ff                	xor    edi,edi
c001cec6:	56                   	push   esi
c001cec7:	31 f6                	xor    esi,esi
c001cec9:	53                   	push   ebx
c001ceca:	83 ec 10             	sub    esp,0x10
c001cecd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ced1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ced5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ced9:	c1 e0 02             	shl    eax,0x2
c001cedc:	50                   	push   eax
c001cedd:	6a 00                	push   0x0
c001cedf:	55                   	push   ebp
c001cee0:	e8 0b 36 fe ff       	call   c00004f0 <memset>
c001cee5:	83 c4 10             	add    esp,0x10
c001cee8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ceef:	85 c0                	test   eax,eax
c001cef1:	74 1a                	je     c001cf0d <SoundCard::getSamples32(int, int*)+0x4b>
c001cef3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cef7:	75 14                	jne    c001cf0d <SoundCard::getSamples32(int, int*)+0x4b>
c001cef9:	53                   	push   ebx
c001cefa:	55                   	push   ebp
c001cefb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ceff:	50                   	push   eax
c001cf00:	e8 03 04 00 00       	call   c001d308 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001cf05:	83 c4 10             	add    esp,0x10
c001cf08:	39 c6                	cmp    esi,eax
c001cf0a:	0f 4c f0             	cmovl  esi,eax
c001cf0d:	47                   	inc    edi
c001cf0e:	83 ff 20             	cmp    edi,0x20
c001cf11:	75 d5                	jne    c001cee8 <SoundCard::getSamples32(int, int*)+0x26>
c001cf13:	85 f6                	test   esi,esi
c001cf15:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001cf1c:	75 0f                	jne    c001cf2d <SoundCard::getSamples32(int, int*)+0x6b>
c001cf1e:	85 c0                	test   eax,eax
c001cf20:	74 1b                	je     c001cf3d <SoundCard::getSamples32(int, int*)+0x7b>
c001cf22:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf24:	83 ec 0c             	sub    esp,0xc
c001cf27:	53                   	push   ebx
c001cf28:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cf2b:	eb 0d                	jmp    c001cf3a <SoundCard::getSamples32(int, int*)+0x78>
c001cf2d:	85 c0                	test   eax,eax
c001cf2f:	75 0c                	jne    c001cf3d <SoundCard::getSamples32(int, int*)+0x7b>
c001cf31:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf33:	83 ec 0c             	sub    esp,0xc
c001cf36:	53                   	push   ebx
c001cf37:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001cf3a:	83 c4 10             	add    esp,0x10
c001cf3d:	83 c4 0c             	add    esp,0xc
c001cf40:	89 f0                	mov    eax,esi
c001cf42:	5b                   	pop    ebx
c001cf43:	5e                   	pop    esi
c001cf44:	5f                   	pop    edi
c001cf45:	5d                   	pop    ebp
c001cf46:	c3                   	ret    
c001cf47:	90                   	nop

c001cf48 <SoundCard::addChannel(SoundPort*)>:
c001cf48:	83 ec 0c             	sub    esp,0xc
c001cf4b:	31 c0                	xor    eax,eax
c001cf4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cf51:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001cf59:	74 1b                	je     c001cf76 <SoundCard::addChannel(SoundPort*)+0x2e>
c001cf5b:	40                   	inc    eax
c001cf5c:	83 f8 20             	cmp    eax,0x20
c001cf5f:	75 f0                	jne    c001cf51 <SoundCard::addChannel(SoundPort*)+0x9>
c001cf61:	83 ec 0c             	sub    esp,0xc
c001cf64:	68 9d 57 02 c0       	push   0xc002579d
c001cf69:	e8 bc 2e ff ff       	call   c000fe2a <KePanic(char const*)>
c001cf6e:	83 c4 10             	add    esp,0x10
c001cf71:	83 c8 ff             	or     eax,0xffffffff
c001cf74:	eb 0b                	jmp    c001cf81 <SoundCard::addChannel(SoundPort*)+0x39>
c001cf76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cf7a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001cf81:	83 c4 0c             	add    esp,0xc
c001cf84:	c3                   	ret    
c001cf85:	90                   	nop

c001cf86 <SoundCard::removeChannel(int)>:
c001cf86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cf8e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cf99:	c3                   	ret    
c001cf9a:	66 90                	xchg   ax,ax

c001cf9c <SoundPort::SoundPort(int, int, int, int)>:
c001cf9c:	83 ec 0c             	sub    esp,0xc
c001cf9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cfaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfae:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cfb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfba:	89 10                	mov    DWORD PTR [eax],edx
c001cfbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cfc4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cfc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfcb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cfcf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cfd2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cfd7:	75 13                	jne    c001cfec <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cfd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfdd:	8b 00                	mov    eax,DWORD PTR [eax]
c001cfdf:	05 a0 0f 00 00       	add    eax,0xfa0
c001cfe4:	d1 e0                	shl    eax,1
c001cfe6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cfea:	66 90                	xchg   ax,ax
c001cfec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cff4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cffb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d006:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d009:	c1 e0 02             	shl    eax,0x2
c001d00c:	83 ec 0c             	sub    esp,0xc
c001d00f:	50                   	push   eax
c001d010:	e8 cf 2a ff ff       	call   c000fae4 <malloc>
c001d015:	83 c4 10             	add    esp,0x10
c001d018:	89 c2                	mov    edx,eax
c001d01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d01e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d021:	90                   	nop
c001d022:	83 c4 0c             	add    esp,0xc
c001d025:	c3                   	ret    
c001d026:	66 90                	xchg   ax,ax

c001d028 <SoundPort::~SoundPort()>:
c001d028:	83 ec 0c             	sub    esp,0xc
c001d02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d02f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d032:	85 c0                	test   eax,eax
c001d034:	74 1e                	je     c001d054 <SoundPort::~SoundPort()+0x2c>
c001d036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d03a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d03d:	83 ec 0c             	sub    esp,0xc
c001d040:	50                   	push   eax
c001d041:	e8 ae 2a ff ff       	call   c000faf4 <free>
c001d046:	83 c4 10             	add    esp,0x10
c001d049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d04d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d054:	90                   	nop
c001d055:	83 c4 0c             	add    esp,0xc
c001d058:	c3                   	ret    
c001d059:	90                   	nop
c001d05a:	66 90                	xchg   ax,ax

c001d05c <SoundPort::unpause()>:
c001d05c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d060:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d064:	c3                   	ret    
c001d065:	90                   	nop
c001d066:	66 90                	xchg   ax,ax

c001d068 <SoundPort::pause()>:
c001d068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d06c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d070:	c3                   	ret    
c001d071:	90                   	nop
c001d072:	66 90                	xchg   ax,ax

c001d074 <SoundPort::getBufferUsed()>:
c001d074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d078:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d07b:	c3                   	ret    

c001d07c <SoundPort::getBufferSize()>:
c001d07c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d080:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d083:	c3                   	ret    

c001d084 <SoundPort::buffer8(signed char*, int)>:
c001d084:	55                   	push   ebp
c001d085:	57                   	push   edi
c001d086:	56                   	push   esi
c001d087:	53                   	push   ebx
c001d088:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d08c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d090:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d093:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d096:	74 70                	je     c001d108 <SoundPort::buffer8(signed char*, int)+0x84>
c001d098:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d09c:	85 c9                	test   ecx,ecx
c001d09e:	7e 68                	jle    c001d108 <SoundPort::buffer8(signed char*, int)+0x84>
c001d0a0:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d0a4:	8d 48 01             	lea    ecx,[eax+0x1]
c001d0a7:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d0aa:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d0ad:	89 f1                	mov    ecx,esi
c001d0af:	c1 e1 18             	shl    ecx,0x18
c001d0b2:	29 f1                	sub    ecx,esi
c001d0b4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d0b7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d0ba:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d0bd:	74 51                	je     c001d110 <SoundPort::buffer8(signed char*, int)+0x8c>
c001d0bf:	31 ff                	xor    edi,edi
c001d0c1:	eb 25                	jmp    c001d0e8 <SoundPort::buffer8(signed char*, int)+0x64>
c001d0c3:	90                   	nop
c001d0c4:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001d0c9:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d0cc:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d0cf:	89 f3                	mov    ebx,esi
c001d0d1:	c1 e3 18             	shl    ebx,0x18
c001d0d4:	29 f3                	sub    ebx,esi
c001d0d6:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d0d9:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d0dc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d0df:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d0e2:	74 1c                	je     c001d100 <SoundPort::buffer8(signed char*, int)+0x7c>
c001d0e4:	89 c7                	mov    edi,eax
c001d0e6:	66 90                	xchg   ax,ax
c001d0e8:	8d 47 01             	lea    eax,[edi+0x1]
c001d0eb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d0ef:	75 d3                	jne    c001d0c4 <SoundPort::buffer8(signed char*, int)+0x40>
c001d0f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d0f5:	8d 76 00             	lea    esi,[esi+0x0]
c001d0f8:	5b                   	pop    ebx
c001d0f9:	5e                   	pop    esi
c001d0fa:	5f                   	pop    edi
c001d0fb:	5d                   	pop    ebp
c001d0fc:	c3                   	ret    
c001d0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001d100:	5b                   	pop    ebx
c001d101:	8d 47 02             	lea    eax,[edi+0x2]
c001d104:	5e                   	pop    esi
c001d105:	5f                   	pop    edi
c001d106:	5d                   	pop    ebp
c001d107:	c3                   	ret    
c001d108:	5b                   	pop    ebx
c001d109:	31 c0                	xor    eax,eax
c001d10b:	5e                   	pop    esi
c001d10c:	5f                   	pop    edi
c001d10d:	5d                   	pop    ebp
c001d10e:	c3                   	ret    
c001d10f:	90                   	nop
c001d110:	b8 01 00 00 00       	mov    eax,0x1
c001d115:	eb e1                	jmp    c001d0f8 <SoundPort::buffer8(signed char*, int)+0x74>
c001d117:	90                   	nop

c001d118 <SoundPort::buffer16(short*, int)>:
c001d118:	55                   	push   ebp
c001d119:	57                   	push   edi
c001d11a:	56                   	push   esi
c001d11b:	53                   	push   ebx
c001d11c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d120:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d124:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d127:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d12a:	74 70                	je     c001d19c <SoundPort::buffer16(short*, int)+0x84>
c001d12c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d130:	85 c9                	test   ecx,ecx
c001d132:	7e 68                	jle    c001d19c <SoundPort::buffer16(short*, int)+0x84>
c001d134:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001d138:	8d 48 01             	lea    ecx,[eax+0x1]
c001d13b:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d13e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d141:	89 f1                	mov    ecx,esi
c001d143:	c1 e1 10             	shl    ecx,0x10
c001d146:	29 f1                	sub    ecx,esi
c001d148:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d14b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d14e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d151:	74 51                	je     c001d1a4 <SoundPort::buffer16(short*, int)+0x8c>
c001d153:	31 ff                	xor    edi,edi
c001d155:	eb 25                	jmp    c001d17c <SoundPort::buffer16(short*, int)+0x64>
c001d157:	90                   	nop
c001d158:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001d15d:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d160:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d163:	89 f3                	mov    ebx,esi
c001d165:	c1 e3 10             	shl    ebx,0x10
c001d168:	29 f3                	sub    ebx,esi
c001d16a:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d16d:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d170:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d173:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d176:	74 1c                	je     c001d194 <SoundPort::buffer16(short*, int)+0x7c>
c001d178:	89 c7                	mov    edi,eax
c001d17a:	66 90                	xchg   ax,ax
c001d17c:	8d 47 01             	lea    eax,[edi+0x1]
c001d17f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d183:	75 d3                	jne    c001d158 <SoundPort::buffer16(short*, int)+0x40>
c001d185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d189:	8d 76 00             	lea    esi,[esi+0x0]
c001d18c:	5b                   	pop    ebx
c001d18d:	5e                   	pop    esi
c001d18e:	5f                   	pop    edi
c001d18f:	5d                   	pop    ebp
c001d190:	c3                   	ret    
c001d191:	8d 76 00             	lea    esi,[esi+0x0]
c001d194:	5b                   	pop    ebx
c001d195:	8d 47 02             	lea    eax,[edi+0x2]
c001d198:	5e                   	pop    esi
c001d199:	5f                   	pop    edi
c001d19a:	5d                   	pop    ebp
c001d19b:	c3                   	ret    
c001d19c:	5b                   	pop    ebx
c001d19d:	31 c0                	xor    eax,eax
c001d19f:	5e                   	pop    esi
c001d1a0:	5f                   	pop    edi
c001d1a1:	5d                   	pop    ebp
c001d1a2:	c3                   	ret    
c001d1a3:	90                   	nop
c001d1a4:	b8 01 00 00 00       	mov    eax,0x1
c001d1a9:	eb e1                	jmp    c001d18c <SoundPort::buffer16(short*, int)+0x74>
c001d1ab:	90                   	nop

c001d1ac <SoundPort::buffer32(int*, int)>:
c001d1ac:	55                   	push   ebp
c001d1ad:	57                   	push   edi
c001d1ae:	56                   	push   esi
c001d1af:	53                   	push   ebx
c001d1b0:	83 ec 04             	sub    esp,0x4
c001d1b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d1b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1bb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d1bf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d1c2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d1c5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1c8:	74 5a                	je     c001d224 <SoundPort::buffer32(int*, int)+0x78>
c001d1ca:	85 c0                	test   eax,eax
c001d1cc:	7e 56                	jle    c001d224 <SoundPort::buffer32(int*, int)+0x78>
c001d1ce:	8d 71 01             	lea    esi,[ecx+0x1]
c001d1d1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d1d4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d1d7:	8b 37                	mov    esi,DWORD PTR [edi]
c001d1d9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d1dc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d1df:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d1e2:	74 4c                	je     c001d230 <SoundPort::buffer32(int*, int)+0x84>
c001d1e4:	31 f6                	xor    esi,esi
c001d1e6:	eb 1c                	jmp    c001d204 <SoundPort::buffer32(int*, int)+0x58>
c001d1e8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d1eb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d1ee:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d1f1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d1f4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d1f8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d1fb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d1fe:	74 18                	je     c001d218 <SoundPort::buffer32(int*, int)+0x6c>
c001d200:	89 de                	mov    esi,ebx
c001d202:	66 90                	xchg   ax,ax
c001d204:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d207:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001d20a:	75 dc                	jne    c001d1e8 <SoundPort::buffer32(int*, int)+0x3c>
c001d20c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d20f:	90                   	nop
c001d210:	83 c4 04             	add    esp,0x4
c001d213:	5b                   	pop    ebx
c001d214:	5e                   	pop    esi
c001d215:	5f                   	pop    edi
c001d216:	5d                   	pop    ebp
c001d217:	c3                   	ret    
c001d218:	8d 46 02             	lea    eax,[esi+0x2]
c001d21b:	83 c4 04             	add    esp,0x4
c001d21e:	5b                   	pop    ebx
c001d21f:	5e                   	pop    esi
c001d220:	5f                   	pop    edi
c001d221:	5d                   	pop    ebp
c001d222:	c3                   	ret    
c001d223:	90                   	nop
c001d224:	83 c4 04             	add    esp,0x4
c001d227:	31 c0                	xor    eax,eax
c001d229:	5b                   	pop    ebx
c001d22a:	5e                   	pop    esi
c001d22b:	5f                   	pop    edi
c001d22c:	5d                   	pop    ebp
c001d22d:	c3                   	ret    
c001d22e:	66 90                	xchg   ax,ax
c001d230:	b8 01 00 00 00       	mov    eax,0x1
c001d235:	eb d9                	jmp    c001d210 <SoundPort::buffer32(int*, int)+0x64>
c001d237:	90                   	nop

c001d238 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d238:	55                   	push   ebp
c001d239:	57                   	push   edi
c001d23a:	56                   	push   esi
c001d23b:	53                   	push   ebx
c001d23c:	83 ec 0c             	sub    esp,0xc
c001d23f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d243:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d24b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d24f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001d255:	39 03                	cmp    DWORD PTR [ebx],eax
c001d257:	74 13                	je     c001d26c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001d259:	83 ec 0c             	sub    esp,0xc
c001d25c:	68 f0 57 02 c0       	push   0xc00257f0
c001d261:	e8 c4 2b ff ff       	call   c000fe2a <KePanic(char const*)>
c001d266:	83 c4 10             	add    esp,0x10
c001d269:	8d 76 00             	lea    esi,[esi+0x0]
c001d26c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001d272:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d275:	74 11                	je     c001d288 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001d277:	83 ec 0c             	sub    esp,0xc
c001d27a:	68 2f 58 02 c0       	push   0xc002582f
c001d27f:	e8 a6 2b ff ff       	call   c000fe2a <KePanic(char const*)>
c001d284:	83 c4 10             	add    esp,0x10
c001d287:	90                   	nop
c001d288:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001d28e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d291:	74 11                	je     c001d2a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001d293:	83 ec 0c             	sub    esp,0xc
c001d296:	68 2f 58 02 c0       	push   0xc002582f
c001d29b:	e8 8a 2b ff ff       	call   c000fe2a <KePanic(char const*)>
c001d2a0:	83 c4 10             	add    esp,0x10
c001d2a3:	90                   	nop
c001d2a4:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001d2a7:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001d2ab:	85 f6                	test   esi,esi
c001d2ad:	7e 2d                	jle    c001d2dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d2af:	31 c0                	xor    eax,eax
c001d2b1:	8d 76 00             	lea    esi,[esi+0x0]
c001d2b4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d2b7:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001d2ba:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001d2c0:	85 c9                	test   ecx,ecx
c001d2c2:	0f 49 d1             	cmovns edx,ecx
c001d2c5:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001d2c9:	c1 fa 0f             	sar    edx,0xf
c001d2cc:	01 d1                	add    ecx,edx
c001d2ce:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001d2d2:	83 c0 01             	add    eax,0x1
c001d2d5:	39 f0                	cmp    eax,esi
c001d2d7:	75 db                	jne    c001d2b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001d2d9:	8d 76 00             	lea    esi,[esi+0x0]
c001d2dc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d2df:	83 ec 04             	sub    esp,0x4
c001d2e2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d2e5:	29 f0                	sub    eax,esi
c001d2e7:	c1 e0 02             	shl    eax,0x2
c001d2ea:	50                   	push   eax
c001d2eb:	8d 04 b2             	lea    eax,[edx+esi*4]
c001d2ee:	50                   	push   eax
c001d2ef:	52                   	push   edx
c001d2f0:	e8 db 30 fe ff       	call   c00003d0 <memmove>
c001d2f5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d2f8:	29 f0                	sub    eax,esi
c001d2fa:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d2fd:	83 c4 1c             	add    esp,0x1c
c001d300:	89 f0                	mov    eax,esi
c001d302:	5b                   	pop    ebx
c001d303:	5e                   	pop    esi
c001d304:	5f                   	pop    edi
c001d305:	5d                   	pop    ebp
c001d306:	c3                   	ret    
c001d307:	90                   	nop

c001d308 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d308:	55                   	push   ebp
c001d309:	57                   	push   edi
c001d30a:	56                   	push   esi
c001d30b:	53                   	push   ebx
c001d30c:	83 ec 0c             	sub    esp,0xc
c001d30f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d313:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d317:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001d31b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d31f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001d325:	39 03                	cmp    DWORD PTR [ebx],eax
c001d327:	74 13                	je     c001d33c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001d329:	83 ec 0c             	sub    esp,0xc
c001d32c:	68 10 58 02 c0       	push   0xc0025810
c001d331:	e8 f4 2a ff ff       	call   c000fe2a <KePanic(char const*)>
c001d336:	83 c4 10             	add    esp,0x10
c001d339:	8d 76 00             	lea    esi,[esi+0x0]
c001d33c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001d342:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d345:	74 11                	je     c001d358 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001d347:	83 ec 0c             	sub    esp,0xc
c001d34a:	68 4b 58 02 c0       	push   0xc002584b
c001d34f:	e8 d6 2a ff ff       	call   c000fe2a <KePanic(char const*)>
c001d354:	83 c4 10             	add    esp,0x10
c001d357:	90                   	nop
c001d358:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001d35e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d361:	74 11                	je     c001d374 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001d363:	83 ec 0c             	sub    esp,0xc
c001d366:	68 4b 58 02 c0       	push   0xc002584b
c001d36b:	e8 ba 2a ff ff       	call   c000fe2a <KePanic(char const*)>
c001d370:	83 c4 10             	add    esp,0x10
c001d373:	90                   	nop
c001d374:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001d377:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001d37b:	85 ff                	test   edi,edi
c001d37d:	7e 21                	jle    c001d3a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001d37f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d386:	31 c0                	xor    eax,eax
c001d388:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d38b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001d38e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d391:	01 d5                	add    ebp,edx
c001d393:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001d396:	83 c0 04             	add    eax,0x4
c001d399:	39 c1                	cmp    ecx,eax
c001d39b:	75 eb                	jne    c001d388 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001d39d:	8d 76 00             	lea    esi,[esi+0x0]
c001d3a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d3a3:	83 ec 04             	sub    esp,0x4
c001d3a6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d3a9:	29 f8                	sub    eax,edi
c001d3ab:	c1 e0 02             	shl    eax,0x2
c001d3ae:	50                   	push   eax
c001d3af:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d3b2:	50                   	push   eax
c001d3b3:	52                   	push   edx
c001d3b4:	e8 17 30 fe ff       	call   c00003d0 <memmove>
c001d3b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d3bc:	29 f8                	sub    eax,edi
c001d3be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d3c1:	83 c4 1c             	add    esp,0x1c
c001d3c4:	89 f8                	mov    eax,edi
c001d3c6:	5b                   	pop    ebx
c001d3c7:	5e                   	pop    esi
c001d3c8:	5f                   	pop    edi
c001d3c9:	5d                   	pop    ebp
c001d3ca:	c3                   	ret    
c001d3cb:	90                   	nop

c001d3cc <PCI::open(int, int, void*)>:
c001d3cc:	83 ec 18             	sub    esp,0x18
c001d3cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d3d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d3dd:	8b 10                	mov    edx,DWORD PTR [eax]
c001d3df:	50                   	push   eax
c001d3e0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d3e3:	31 c0                	xor    eax,eax
c001d3e5:	83 c4 1c             	add    esp,0x1c
c001d3e8:	c3                   	ret    
c001d3e9:	90                   	nop

c001d3ea <PCI::close(int, int, void*)>:
c001d3ea:	31 c0                	xor    eax,eax
c001d3ec:	c3                   	ret    
c001d3ed:	90                   	nop

c001d3ee <PCI::PCI()>:
c001d3ee:	83 ec 0c             	sub    esp,0xc
c001d3f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3f5:	83 ec 08             	sub    esp,0x8
c001d3f8:	68 67 58 02 c0       	push   0xc0025867
c001d3fd:	50                   	push   eax
c001d3fe:	e8 05 b5 fe ff       	call   c0008908 <Bus::Bus(char const*)>
c001d403:	83 c4 10             	add    esp,0x10
c001d406:	ba 74 59 02 c0       	mov    edx,0xc0025974
c001d40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d40f:	89 10                	mov    DWORD PTR [eax],edx
c001d411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d415:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d423:	a3 40 f4 02 c0       	mov    ds:0xc002f440,eax
c001d428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d42c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d432:	0f b6 d0             	movzx  edx,al
c001d435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d439:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d444:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d44a:	0f b6 d0             	movzx  edx,al
c001d44d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d451:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d45a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d460:	8d 50 01             	lea    edx,[eax+0x1]
c001d463:	88 d1                	mov    cl,dl
c001d465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d469:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001d46f:	0f b6 d0             	movzx  edx,al
c001d472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d476:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d47a:	83 c9 c0             	or     ecx,0xffffffc0
c001d47d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d481:	90                   	nop
c001d482:	83 c4 0c             	add    esp,0xc
c001d485:	c3                   	ret    

c001d486 <PCI::readBAR8(unsigned int, int)>:
c001d486:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d48a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d48e:	f6 c2 01             	test   dl,0x1
c001d491:	74 07                	je     c001d49a <PCI::readBAR8(unsigned int, int)+0x14>
c001d493:	83 e2 fc             	and    edx,0xfffffffc
c001d496:	01 c2                	add    edx,eax
c001d498:	ec                   	in     al,dx
c001d499:	c3                   	ret    
c001d49a:	83 e2 f0             	and    edx,0xfffffff0
c001d49d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d4a0:	c3                   	ret    
c001d4a1:	90                   	nop

c001d4a2 <PCI::readBAR16(unsigned int, int)>:
c001d4a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d4a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4aa:	f6 c2 01             	test   dl,0x1
c001d4ad:	74 08                	je     c001d4b7 <PCI::readBAR16(unsigned int, int)+0x15>
c001d4af:	83 e2 fc             	and    edx,0xfffffffc
c001d4b2:	01 c2                	add    edx,eax
c001d4b4:	66 ed                	in     ax,dx
c001d4b6:	c3                   	ret    
c001d4b7:	83 e2 f0             	and    edx,0xfffffff0
c001d4ba:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d4be:	c3                   	ret    
c001d4bf:	90                   	nop

c001d4c0 <PCI::readBAR32(unsigned int, int)>:
c001d4c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d4c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4c8:	f6 c2 01             	test   dl,0x1
c001d4cb:	74 07                	je     c001d4d4 <PCI::readBAR32(unsigned int, int)+0x14>
c001d4cd:	83 e2 fc             	and    edx,0xfffffffc
c001d4d0:	01 c2                	add    edx,eax
c001d4d2:	ed                   	in     eax,dx
c001d4d3:	c3                   	ret    
c001d4d4:	83 e2 f0             	and    edx,0xfffffff0
c001d4d7:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d4da:	c3                   	ret    
c001d4db:	90                   	nop

c001d4dc <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d4dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d4e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d4e8:	f6 c2 01             	test   dl,0x1
c001d4eb:	74 07                	je     c001d4f4 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d4ed:	83 e2 fc             	and    edx,0xfffffffc
c001d4f0:	01 ca                	add    edx,ecx
c001d4f2:	ee                   	out    dx,al
c001d4f3:	c3                   	ret    
c001d4f4:	83 e2 f0             	and    edx,0xfffffff0
c001d4f7:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d4fa:	c3                   	ret    
c001d4fb:	90                   	nop

c001d4fc <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d4fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d500:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d504:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d508:	f6 c2 01             	test   dl,0x1
c001d50b:	74 08                	je     c001d515 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d50d:	83 e2 fc             	and    edx,0xfffffffc
c001d510:	01 ca                	add    edx,ecx
c001d512:	66 ef                	out    dx,ax
c001d514:	c3                   	ret    
c001d515:	83 e2 f0             	and    edx,0xfffffff0
c001d518:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d51c:	c3                   	ret    
c001d51d:	90                   	nop

c001d51e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d51e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d522:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d526:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d52a:	f6 c2 01             	test   dl,0x1
c001d52d:	74 07                	je     c001d536 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d52f:	83 e2 fc             	and    edx,0xfffffffc
c001d532:	01 ca                	add    edx,ecx
c001d534:	ef                   	out    dx,eax
c001d535:	c3                   	ret    
c001d536:	83 e2 f0             	and    edx,0xfffffff0
c001d539:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d53c:	c3                   	ret    
c001d53d:	90                   	nop

c001d53e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d53e:	55                   	push   ebp
c001d53f:	57                   	push   edi
c001d540:	56                   	push   esi
c001d541:	53                   	push   ebx
c001d542:	83 ec 0c             	sub    esp,0xc
c001d545:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001d54a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d54e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d552:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d556:	83 fe 07             	cmp    esi,0x7
c001d559:	76 10                	jbe    c001d56b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d55b:	83 ec 0c             	sub    esp,0xc
c001d55e:	68 6f 58 02 c0       	push   0xc002586f
c001d563:	e8 c2 28 ff ff       	call   c000fe2a <KePanic(char const*)>
c001d568:	83 c4 10             	add    esp,0x10
c001d56b:	0f b6 db             	movzx  ebx,bl
c001d56e:	83 fb 0f             	cmp    ebx,0xf
c001d571:	76 10                	jbe    c001d583 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001d573:	83 ec 0c             	sub    esp,0xc
c001d576:	68 9f 58 02 c0       	push   0xc002589f
c001d57b:	e8 aa 28 ff ff       	call   c000fe2a <KePanic(char const*)>
c001d580:	83 c4 10             	add    esp,0x10
c001d583:	8d 04 36             	lea    eax,[esi+esi*1]
c001d586:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d58b:	83 c8 f0             	or     eax,0xfffffff0
c001d58e:	ee                   	out    dx,al
c001d58f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d594:	89 e8                	mov    eax,ebp
c001d596:	ee                   	out    dx,al
c001d597:	89 f9                	mov    ecx,edi
c001d599:	89 d8                	mov    eax,ebx
c001d59b:	0f b6 d9             	movzx  ebx,cl
c001d59e:	83 c4 0c             	add    esp,0xc
c001d5a1:	c1 e0 08             	shl    eax,0x8
c001d5a4:	83 e3 fc             	and    ebx,0xfffffffc
c001d5a7:	09 d8                	or     eax,ebx
c001d5a9:	5b                   	pop    ebx
c001d5aa:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001d5af:	5e                   	pop    esi
c001d5b0:	5f                   	pop    edi
c001d5b1:	5d                   	pop    ebp
c001d5b2:	c3                   	ret    
c001d5b3:	90                   	nop

c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d5b4:	57                   	push   edi
c001d5b5:	56                   	push   esi
c001d5b6:	53                   	push   ebx
c001d5b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d5bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d5c3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d5c7:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d5cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d5d1:	83 ff 01             	cmp    edi,0x1
c001d5d4:	75 3f                	jne    c001d615 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001d5d6:	89 de                	mov    esi,ebx
c001d5d8:	0f b6 c0             	movzx  eax,al
c001d5db:	c1 e0 10             	shl    eax,0x10
c001d5de:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d5e4:	0f b6 c9             	movzx  ecx,cl
c001d5e7:	09 f0                	or     eax,esi
c001d5e9:	c1 e1 08             	shl    ecx,0x8
c001d5ec:	0f b6 d2             	movzx  edx,dl
c001d5ef:	c1 e2 0b             	shl    edx,0xb
c001d5f2:	09 c8                	or     eax,ecx
c001d5f4:	09 d0                	or     eax,edx
c001d5f6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d5fb:	0d 00 00 00 80       	or     eax,0x80000000
c001d600:	ef                   	out    dx,eax
c001d601:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d606:	ed                   	in     eax,dx
c001d607:	83 e3 02             	and    ebx,0x2
c001d60a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d611:	d3 e8                	shr    eax,cl
c001d613:	eb 44                	jmp    c001d659 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d615:	83 ff 02             	cmp    edi,0x2
c001d618:	75 2d                	jne    c001d647 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001d61a:	83 ec 0c             	sub    esp,0xc
c001d61d:	0f b6 fb             	movzx  edi,bl
c001d620:	57                   	push   edi
c001d621:	0f b6 c9             	movzx  ecx,cl
c001d624:	51                   	push   ecx
c001d625:	0f b6 d2             	movzx  edx,dl
c001d628:	52                   	push   edx
c001d629:	0f b6 c0             	movzx  eax,al
c001d62c:	50                   	push   eax
c001d62d:	56                   	push   esi
c001d62e:	e8 0b ff ff ff       	call   c001d53e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d633:	89 c2                	mov    edx,eax
c001d635:	ed                   	in     eax,dx
c001d636:	83 e3 02             	and    ebx,0x2
c001d639:	83 c4 20             	add    esp,0x20
c001d63c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d643:	d3 e8                	shr    eax,cl
c001d645:	eb 12                	jmp    c001d659 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d647:	83 ec 0c             	sub    esp,0xc
c001d64a:	68 cf 58 02 c0       	push   0xc00258cf
c001d64f:	e8 d6 27 ff ff       	call   c000fe2a <KePanic(char const*)>
c001d654:	83 c4 10             	add    esp,0x10
c001d657:	31 c0                	xor    eax,eax
c001d659:	5b                   	pop    ebx
c001d65a:	5e                   	pop    esi
c001d65b:	5f                   	pop    edi
c001d65c:	c3                   	ret    
c001d65d:	90                   	nop

c001d65e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d65e:	83 ec 18             	sub    esp,0x18
c001d661:	6a 00                	push   0x0
c001d663:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d668:	50                   	push   eax
c001d669:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d66e:	50                   	push   eax
c001d66f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d674:	50                   	push   eax
c001d675:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d679:	e8 36 ff ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d67e:	83 c4 2c             	add    esp,0x2c
c001d681:	c3                   	ret    

c001d682 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d682:	83 ec 18             	sub    esp,0x18
c001d685:	6a 0e                	push   0xe
c001d687:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d68c:	50                   	push   eax
c001d68d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d692:	50                   	push   eax
c001d693:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d698:	50                   	push   eax
c001d699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d69d:	e8 12 ff ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6a2:	83 c4 2c             	add    esp,0x2c
c001d6a5:	0f b6 c0             	movzx  eax,al
c001d6a8:	c3                   	ret    
c001d6a9:	90                   	nop

c001d6aa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d6aa:	55                   	push   ebp
c001d6ab:	57                   	push   edi
c001d6ac:	56                   	push   esi
c001d6ad:	53                   	push   ebx
c001d6ae:	83 ec 18             	sub    esp,0x18
c001d6b1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d6b6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d6bb:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d6c0:	6a 0a                	push   0xa
c001d6c2:	56                   	push   esi
c001d6c3:	55                   	push   ebp
c001d6c4:	57                   	push   edi
c001d6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6c9:	e8 e6 fe ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6ce:	83 c4 14             	add    esp,0x14
c001d6d1:	6a 0a                	push   0xa
c001d6d3:	56                   	push   esi
c001d6d4:	55                   	push   ebp
c001d6d5:	57                   	push   edi
c001d6d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6da:	89 c3                	mov    ebx,eax
c001d6dc:	0f b6 db             	movzx  ebx,bl
c001d6df:	e8 d0 fe ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6e4:	83 c4 2c             	add    esp,0x2c
c001d6e7:	25 00 ff 00 00       	and    eax,0xff00
c001d6ec:	09 d8                	or     eax,ebx
c001d6ee:	5b                   	pop    ebx
c001d6ef:	5e                   	pop    esi
c001d6f0:	5f                   	pop    edi
c001d6f1:	5d                   	pop    ebp
c001d6f2:	c3                   	ret    
c001d6f3:	90                   	nop

c001d6f4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d6f4:	83 ec 18             	sub    esp,0x18
c001d6f7:	6a 08                	push   0x8
c001d6f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6fe:	50                   	push   eax
c001d6ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d704:	50                   	push   eax
c001d705:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d70a:	50                   	push   eax
c001d70b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d70f:	e8 a0 fe ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d714:	83 c4 2c             	add    esp,0x2c
c001d717:	0f b6 c4             	movzx  eax,ah
c001d71a:	c3                   	ret    
c001d71b:	90                   	nop

c001d71c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d71c:	83 ec 18             	sub    esp,0x18
c001d71f:	6a 08                	push   0x8
c001d721:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d726:	50                   	push   eax
c001d727:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d72c:	50                   	push   eax
c001d72d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d732:	50                   	push   eax
c001d733:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d737:	e8 78 fe ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d73c:	83 c4 2c             	add    esp,0x2c
c001d73f:	c3                   	ret    

c001d740 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d740:	83 ec 18             	sub    esp,0x18
c001d743:	6a 3c                	push   0x3c
c001d745:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d74a:	50                   	push   eax
c001d74b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d750:	50                   	push   eax
c001d751:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d756:	50                   	push   eax
c001d757:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d75b:	e8 54 fe ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d760:	83 c4 2c             	add    esp,0x2c
c001d763:	c3                   	ret    

c001d764 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d764:	83 ec 18             	sub    esp,0x18
c001d767:	6a 18                	push   0x18
c001d769:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d76e:	50                   	push   eax
c001d76f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d774:	50                   	push   eax
c001d775:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d77a:	50                   	push   eax
c001d77b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d77f:	e8 30 fe ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d784:	83 c4 2c             	add    esp,0x2c
c001d787:	0f b6 c4             	movzx  eax,ah
c001d78a:	c3                   	ret    
c001d78b:	90                   	nop

c001d78c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d78c:	55                   	push   ebp
c001d78d:	57                   	push   edi
c001d78e:	56                   	push   esi
c001d78f:	53                   	push   ebx
c001d790:	83 ec 28             	sub    esp,0x28
c001d793:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d797:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d79c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d7a1:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d7a6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d7ad:	8d 43 12             	lea    eax,[ebx+0x12]
c001d7b0:	83 c3 10             	add    ebx,0x10
c001d7b3:	0f b6 c0             	movzx  eax,al
c001d7b6:	0f b6 db             	movzx  ebx,bl
c001d7b9:	50                   	push   eax
c001d7ba:	51                   	push   ecx
c001d7bb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d7bf:	57                   	push   edi
c001d7c0:	55                   	push   ebp
c001d7c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d7c5:	e8 ea fd ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7ca:	83 c4 14             	add    esp,0x14
c001d7cd:	53                   	push   ebx
c001d7ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7d2:	51                   	push   ecx
c001d7d3:	89 c6                	mov    esi,eax
c001d7d5:	57                   	push   edi
c001d7d6:	55                   	push   ebp
c001d7d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d7db:	c1 e6 10             	shl    esi,0x10
c001d7de:	e8 d1 fd ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7e3:	83 c4 3c             	add    esp,0x3c
c001d7e6:	5b                   	pop    ebx
c001d7e7:	0f b7 c0             	movzx  eax,ax
c001d7ea:	09 f0                	or     eax,esi
c001d7ec:	5e                   	pop    esi
c001d7ed:	5f                   	pop    edi
c001d7ee:	5d                   	pop    ebp
c001d7ef:	c3                   	ret    

c001d7f0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d7f0:	55                   	push   ebp
c001d7f1:	57                   	push   edi
c001d7f2:	56                   	push   esi
c001d7f3:	53                   	push   ebx
c001d7f4:	83 ec 0c             	sub    esp,0xc
c001d7f7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d7fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d803:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001d807:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001d80d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d811:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d815:	83 f9 01             	cmp    ecx,0x1
c001d818:	75 5d                	jne    c001d877 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001d81a:	0f b6 c8             	movzx  ecx,al
c001d81d:	89 f0                	mov    eax,esi
c001d81f:	25 fc 00 00 00       	and    eax,0xfc
c001d824:	0f b6 d2             	movzx  edx,dl
c001d827:	c1 e1 10             	shl    ecx,0x10
c001d82a:	c1 e2 0b             	shl    edx,0xb
c001d82d:	09 c1                	or     ecx,eax
c001d82f:	89 f8                	mov    eax,edi
c001d831:	0f b6 f8             	movzx  edi,al
c001d834:	c1 e7 08             	shl    edi,0x8
c001d837:	09 f9                	or     ecx,edi
c001d839:	09 d1                	or     ecx,edx
c001d83b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d840:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d846:	89 c8                	mov    eax,ecx
c001d848:	ef                   	out    dx,eax
c001d849:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d84e:	ed                   	in     eax,dx
c001d84f:	83 e6 02             	and    esi,0x2
c001d852:	0f b7 db             	movzx  ebx,bx
c001d855:	74 0a                	je     c001d861 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001d857:	c1 e3 10             	shl    ebx,0x10
c001d85a:	0f b7 d0             	movzx  edx,ax
c001d85d:	09 d3                	or     ebx,edx
c001d85f:	eb 05                	jmp    c001d866 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001d861:	66 31 c0             	xor    ax,ax
c001d864:	09 c3                	or     ebx,eax
c001d866:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d86b:	89 c8                	mov    eax,ecx
c001d86d:	ef                   	out    dx,eax
c001d86e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d873:	89 d8                	mov    eax,ebx
c001d875:	eb 41                	jmp    c001d8b8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001d877:	83 f9 02             	cmp    ecx,0x2
c001d87a:	75 45                	jne    c001d8c1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001d87c:	89 f1                	mov    ecx,esi
c001d87e:	83 ec 0c             	sub    esp,0xc
c001d881:	0f b6 f1             	movzx  esi,cl
c001d884:	89 f9                	mov    ecx,edi
c001d886:	56                   	push   esi
c001d887:	0f b6 f9             	movzx  edi,cl
c001d88a:	57                   	push   edi
c001d88b:	0f b6 d2             	movzx  edx,dl
c001d88e:	52                   	push   edx
c001d88f:	0f b6 c0             	movzx  eax,al
c001d892:	50                   	push   eax
c001d893:	55                   	push   ebp
c001d894:	e8 a5 fc ff ff       	call   c001d53e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d899:	89 c2                	mov    edx,eax
c001d89b:	ed                   	in     eax,dx
c001d89c:	83 c4 20             	add    esp,0x20
c001d89f:	f6 c2 02             	test   dl,0x2
c001d8a2:	0f b7 db             	movzx  ebx,bx
c001d8a5:	74 0c                	je     c001d8b3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001d8a7:	0f b7 c8             	movzx  ecx,ax
c001d8aa:	89 d8                	mov    eax,ebx
c001d8ac:	c1 e0 10             	shl    eax,0x10
c001d8af:	09 c8                	or     eax,ecx
c001d8b1:	eb 05                	jmp    c001d8b8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001d8b3:	66 31 c0             	xor    ax,ax
c001d8b6:	09 d8                	or     eax,ebx
c001d8b8:	ef                   	out    dx,eax
c001d8b9:	83 c4 0c             	add    esp,0xc
c001d8bc:	5b                   	pop    ebx
c001d8bd:	5e                   	pop    esi
c001d8be:	5f                   	pop    edi
c001d8bf:	5d                   	pop    ebp
c001d8c0:	c3                   	ret    
c001d8c1:	c7 44 24 20 cf 58 02 c0 	mov    DWORD PTR [esp+0x20],0xc00258cf
c001d8c9:	83 c4 0c             	add    esp,0xc
c001d8cc:	5b                   	pop    ebx
c001d8cd:	5e                   	pop    esi
c001d8ce:	5f                   	pop    edi
c001d8cf:	5d                   	pop    ebp
c001d8d0:	e9 55 25 ff ff       	jmp    c000fe2a <KePanic(char const*)>
c001d8d5:	90                   	nop

c001d8d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d8d6:	55                   	push   ebp
c001d8d7:	57                   	push   edi
c001d8d8:	56                   	push   esi
c001d8d9:	53                   	push   ebx
c001d8da:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001d8e0:	80 3d 4c f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f44c,0x0
c001d8e7:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001d8ee:	0f 85 bd 00 00 00    	jne    c001d9b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001d8f4:	83 ec 0c             	sub    esp,0xc
c001d8f7:	68 14 01 00 00       	push   0x114
c001d8fc:	e8 e3 21 ff ff       	call   c000fae4 <malloc>
c001d901:	83 c4 0c             	add    esp,0xc
c001d904:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001d90a:	68 d5 58 02 c0       	push   0xc00258d5
c001d90f:	50                   	push   eax
c001d910:	89 c3                	mov    ebx,eax
c001d912:	e8 15 a8 fe ff       	call   c000812c <File::File(char const*, Process*)>
c001d917:	83 c4 10             	add    esp,0x10
c001d91a:	85 db                	test   ebx,ebx
c001d91c:	0f 84 6b 02 00 00    	je     c001db8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d922:	57                   	push   edi
c001d923:	57                   	push   edi
c001d924:	6a 01                	push   0x1
c001d926:	53                   	push   ebx
c001d927:	e8 1e a8 fe ff       	call   c000814a <File::open(FileOpenMode)>
c001d92c:	83 c4 10             	add    esp,0x10
c001d92f:	85 c0                	test   eax,eax
c001d931:	0f 85 56 02 00 00    	jne    c001db8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d937:	52                   	push   edx
c001d938:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001d93c:	50                   	push   eax
c001d93d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001d941:	50                   	push   eax
c001d942:	53                   	push   ebx
c001d943:	e8 04 ab fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001d948:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d94c:	40                   	inc    eax
c001d94d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d950:	e8 8f 21 ff ff       	call   c000fae4 <malloc>
c001d955:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001d959:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d95d:	59                   	pop    ecx
c001d95e:	a3 48 f4 02 c0       	mov    ds:0xc002f448,eax
c001d963:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d965:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001d969:	51                   	push   ecx
c001d96a:	50                   	push   eax
c001d96b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d96f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d973:	53                   	push   ebx
c001d974:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d977:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001d97b:	83 c4 20             	add    esp,0x20
c001d97e:	89 c8                	mov    eax,ecx
c001d980:	99                   	cdq    
c001d981:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001d985:	0f 85 02 02 00 00    	jne    c001db8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d98b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001d98f:	0f 85 f8 01 00 00    	jne    c001db8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d995:	83 ec 0c             	sub    esp,0xc
c001d998:	53                   	push   ebx
c001d999:	e8 0a a8 fe ff       	call   c00081a8 <File::close()>
c001d99e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d9a2:	83 c4 10             	add    esp,0x10
c001d9a5:	c6 05 4c f4 02 c0 01 	mov    BYTE PTR ds:0xc002f44c,0x1
c001d9ac:	a3 44 f4 02 c0       	mov    ds:0xc002f444,eax
c001d9b1:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d9b9:	31 c9                	xor    ecx,ecx
c001d9bb:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001d9c2:	8b 2d 44 f4 02 c0    	mov    ebp,DWORD PTR ds:0xc002f444
c001d9c8:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001d9cf:	8b 15 48 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f448
c001d9d5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001d9da:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001d9e2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001d9e7:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001d9ef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d9f3:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001d9fb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d9ff:	39 cd                	cmp    ebp,ecx
c001da01:	0f 8e 86 01 00 00    	jle    c001db8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001da07:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001da0a:	d4 40                	aam    0x40
c001da0c:	d5 39                	aad    0x39
c001da0e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001da12:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001da16:	d4 40                	aam    0x40
c001da18:	d5 39                	aad    0x39
c001da1a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001da1e:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001da22:	d4 40                	aam    0x40
c001da24:	d5 39                	aad    0x39
c001da26:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001da2a:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001da2e:	d4 40                	aam    0x40
c001da30:	d5 39                	aad    0x39
c001da32:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001da36:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001da3a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001da3e:	3c 56                	cmp    al,0x56
c001da40:	74 47                	je     c001da89 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001da42:	d4 40                	aam    0x40
c001da44:	d5 39                	aad    0x39
c001da46:	8d 58 d0             	lea    ebx,[eax-0x30]
c001da49:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001da4d:	0f b6 db             	movzx  ebx,bl
c001da50:	c1 e3 04             	shl    ebx,0x4
c001da53:	d4 40                	aam    0x40
c001da55:	d5 39                	aad    0x39
c001da57:	83 e8 30             	sub    eax,0x30
c001da5a:	0f b6 c0             	movzx  eax,al
c001da5d:	09 c3                	or     ebx,eax
c001da5f:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001da63:	c1 e3 04             	shl    ebx,0x4
c001da66:	d4 40                	aam    0x40
c001da68:	d5 39                	aad    0x39
c001da6a:	83 e8 30             	sub    eax,0x30
c001da6d:	0f b6 c0             	movzx  eax,al
c001da70:	09 c3                	or     ebx,eax
c001da72:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001da76:	c1 e3 04             	shl    ebx,0x4
c001da79:	d4 40                	aam    0x40
c001da7b:	d5 39                	aad    0x39
c001da7d:	83 e8 30             	sub    eax,0x30
c001da80:	0f b6 c0             	movzx  eax,al
c001da83:	09 c3                	or     ebx,eax
c001da85:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001da89:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001da8d:	80 fb 58             	cmp    bl,0x58
c001da90:	74 49                	je     c001dadb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001da92:	88 d8                	mov    al,bl
c001da94:	d4 40                	aam    0x40
c001da96:	d5 39                	aad    0x39
c001da98:	83 e8 30             	sub    eax,0x30
c001da9b:	0f b6 f8             	movzx  edi,al
c001da9e:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001daa2:	c1 e7 04             	shl    edi,0x4
c001daa5:	d4 40                	aam    0x40
c001daa7:	d5 39                	aad    0x39
c001daa9:	83 e8 30             	sub    eax,0x30
c001daac:	0f b6 c0             	movzx  eax,al
c001daaf:	09 c7                	or     edi,eax
c001dab1:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001dab5:	c1 e7 04             	shl    edi,0x4
c001dab8:	d4 40                	aam    0x40
c001daba:	d5 39                	aad    0x39
c001dabc:	83 e8 30             	sub    eax,0x30
c001dabf:	0f b6 c0             	movzx  eax,al
c001dac2:	09 c7                	or     edi,eax
c001dac4:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001dac8:	c1 e7 04             	shl    edi,0x4
c001dacb:	d4 40                	aam    0x40
c001dacd:	d5 39                	aad    0x39
c001dacf:	83 e8 30             	sub    eax,0x30
c001dad2:	0f b6 c0             	movzx  eax,al
c001dad5:	09 c7                	or     edi,eax
c001dad7:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001dadb:	8d 41 10             	lea    eax,[ecx+0x10]
c001dade:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001dae2:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001dae6:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001daea:	83 f9 0a             	cmp    ecx,0xa
c001daed:	74 07                	je     c001daf6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001daef:	47                   	inc    edi
c001daf0:	39 c5                	cmp    ebp,eax
c001daf2:	75 16                	jne    c001db0a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001daf4:	89 e8                	mov    eax,ebp
c001daf6:	83 f9 0a             	cmp    ecx,0xa
c001daf9:	0f 94 c1             	sete   cl
c001dafc:	0f b6 c9             	movzx  ecx,cl
c001daff:	01 c1                	add    ecx,eax
c001db01:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001db06:	75 0f                	jne    c001db17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001db08:	eb 1c                	jmp    c001db26 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001db0a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001db0d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001db11:	40                   	inc    eax
c001db12:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001db15:	eb cb                	jmp    c001dae2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001db17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001db1b:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001db20:	0f 85 d9 fe ff ff    	jne    c001d9ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001db26:	80 fb 58             	cmp    bl,0x58
c001db29:	74 10                	je     c001db3b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001db2b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001db30:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001db35:	0f 85 c4 fe ff ff    	jne    c001d9ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001db3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001db3f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001db43:	83 e8 30             	sub    eax,0x30
c001db46:	c1 e0 04             	shl    eax,0x4
c001db49:	83 eb 30             	sub    ebx,0x30
c001db4c:	09 d8                	or     eax,ebx
c001db4e:	0f b6 c0             	movzx  eax,al
c001db51:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001db55:	0f 85 a4 fe ff ff    	jne    c001d9ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001db5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001db63:	83 e8 30             	sub    eax,0x30
c001db66:	c1 e0 04             	shl    eax,0x4
c001db69:	83 eb 30             	sub    ebx,0x30
c001db6c:	09 d8                	or     eax,ebx
c001db6e:	0f b6 c0             	movzx  eax,al
c001db71:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001db75:	0f 85 84 fe ff ff    	jne    c001d9ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001db7b:	50                   	push   eax
c001db7c:	50                   	push   eax
c001db7d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001db81:	50                   	push   eax
c001db82:	56                   	push   esi
c001db83:	e8 c8 2a fe ff       	call   c0000650 <strcpy>
c001db88:	83 c4 10             	add    esp,0x10
c001db8b:	eb 05                	jmp    c001db92 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001db8d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001db90:	31 f6                	xor    esi,esi
c001db92:	81 c4 4c 01 00 00    	add    esp,0x14c
c001db98:	89 f0                	mov    eax,esi
c001db9a:	5b                   	pop    ebx
c001db9b:	5e                   	pop    esi
c001db9c:	5f                   	pop    edi
c001db9d:	5d                   	pop    ebp
c001db9e:	c3                   	ret    
c001db9f:	90                   	nop

c001dba0 <PCI::checkBus(unsigned char)>:
c001dba0:	56                   	push   esi
c001dba1:	53                   	push   ebx
c001dba2:	31 db                	xor    ebx,ebx
c001dba4:	51                   	push   ecx
c001dba5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001dbaa:	52                   	push   edx
c001dbab:	53                   	push   ebx
c001dbac:	43                   	inc    ebx
c001dbad:	56                   	push   esi
c001dbae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbb2:	e8 6f 03 00 00       	call   c001df26 <PCI::checkDevice(unsigned char, unsigned char)>
c001dbb7:	83 c4 10             	add    esp,0x10
c001dbba:	83 fb 20             	cmp    ebx,0x20
c001dbbd:	75 eb                	jne    c001dbaa <PCI::checkBus(unsigned char)+0xa>
c001dbbf:	58                   	pop    eax
c001dbc0:	5b                   	pop    ebx
c001dbc1:	5e                   	pop    esi
c001dbc2:	c3                   	ret    
c001dbc3:	90                   	nop

c001dbc4 <PCI::foundDevice(PCIDeviceInfo)>:
c001dbc4:	55                   	push   ebp
c001dbc5:	57                   	push   edi
c001dbc6:	56                   	push   esi
c001dbc7:	53                   	push   ebx
c001dbc8:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001dbce:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001dbd6:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001dbdd:	3d ff ff 00 00       	cmp    eax,0xffff
c001dbe2:	0f 84 b6 01 00 00    	je     c001dd9e <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001dbe8:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001dbf0:	66 81 fd 06 04       	cmp    bp,0x406
c001dbf5:	75 32                	jne    c001dc29 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001dbf7:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001dbff:	50                   	push   eax
c001dc00:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001dc08:	50                   	push   eax
c001dc09:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001dc11:	50                   	push   eax
c001dc12:	53                   	push   ebx
c001dc13:	e8 4c fb ff ff       	call   c001d764 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001dc18:	59                   	pop    ecx
c001dc19:	5e                   	pop    esi
c001dc1a:	0f b6 c0             	movzx  eax,al
c001dc1d:	50                   	push   eax
c001dc1e:	53                   	push   ebx
c001dc1f:	e8 7c ff ff ff       	call   c001dba0 <PCI::checkBus(unsigned char)>
c001dc24:	e9 15 01 00 00       	jmp    c001dd3e <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001dc29:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001dc31:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001dc37:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001dc3e:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001dc45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dc49:	85 c0                	test   eax,eax
c001dc4b:	74 34                	je     c001dc81 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001dc4d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dc50:	85 d2                	test   edx,edx
c001dc52:	74 29                	je     c001dc7d <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001dc54:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001dc5a:	31 cf                	xor    edi,ecx
c001dc5c:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001dc62:	75 19                	jne    c001dc7d <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001dc64:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001dc6a:	75 11                	jne    c001dc7d <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001dc6c:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001dc73:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001dc77:	0f 84 21 01 00 00    	je     c001dd9e <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001dc7d:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc7f:	eb c8                	jmp    c001dc49 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001dc81:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001dc85:	be 08 59 02 c0       	mov    esi,0xc0025908
c001dc8a:	b9 07 00 00 00       	mov    ecx,0x7
c001dc8f:	fc                   	cld    
c001dc90:	31 d2                	xor    edx,edx
c001dc92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dc94:	b9 12 00 00 00       	mov    ecx,0x12
c001dc99:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001dca0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001dca4:	83 ec 0c             	sub    esp,0xc
c001dca7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dca9:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001dcb1:	b9 0a 00 00 00       	mov    ecx,0xa
c001dcb6:	f7 f1                	div    ecx
c001dcb8:	83 c0 30             	add    eax,0x30
c001dcbb:	83 c2 30             	add    edx,0x30
c001dcbe:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001dcc2:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001dcca:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001dcce:	31 d2                	xor    edx,edx
c001dcd0:	f7 f1                	div    ecx
c001dcd2:	83 c0 30             	add    eax,0x30
c001dcd5:	83 c2 30             	add    edx,0x30
c001dcd8:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001dcdc:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001dce0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001dce4:	50                   	push   eax
c001dce5:	e8 b1 f4 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001dcea:	83 c4 10             	add    esp,0x10
c001dced:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001dcf3:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001dcfa:	75 47                	jne    c001dd43 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001dcfc:	83 ec 0c             	sub    esp,0xc
c001dcff:	68 64 01 00 00       	push   0x164
c001dd04:	e8 db 1d ff ff       	call   c000fae4 <malloc>
c001dd09:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd0c:	89 c5                	mov    ebp,eax
c001dd0e:	e8 37 11 00 00       	call   c001ee4a <SATABus::SATABus()>
c001dd13:	58                   	pop    eax
c001dd14:	5a                   	pop    edx
c001dd15:	55                   	push   ebp
c001dd16:	53                   	push   ebx
c001dd17:	e8 7e bc fe ff       	call   c000999a <Device::addChild(Device*)>
c001dd1c:	83 ec 1c             	sub    esp,0x1c
c001dd1f:	b9 09 00 00 00       	mov    ecx,0x9
c001dd24:	89 e7                	mov    edi,esp
c001dd26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dd28:	55                   	push   ebp
c001dd29:	e8 b2 bb fe ff       	call   c00098e0 <Device::preOpenPCI(PCIDeviceInfo)>
c001dd2e:	83 c4 30             	add    esp,0x30
c001dd31:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dd34:	6a 00                	push   0x0
c001dd36:	6a 00                	push   0x0
c001dd38:	6a 00                	push   0x0
c001dd3a:	55                   	push   ebp
c001dd3b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dd3e:	83 c4 10             	add    esp,0x10
c001dd41:	eb 5b                	jmp    c001dd9e <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001dd43:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001dd49:	75 19                	jne    c001dd64 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001dd4b:	83 ec 0c             	sub    esp,0xc
c001dd4e:	68 70 02 00 00       	push   0x270
c001dd53:	e8 8c 1d ff ff       	call   c000fae4 <malloc>
c001dd58:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd5b:	89 c5                	mov    ebp,eax
c001dd5d:	e8 94 02 00 00       	call   c001dff6 <IDE::IDE()>
c001dd62:	eb af                	jmp    c001dd13 <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001dd64:	83 ec 0c             	sub    esp,0xc
c001dd67:	68 58 01 00 00       	push   0x158
c001dd6c:	e8 73 1d ff ff       	call   c000fae4 <malloc>
c001dd71:	89 c5                	mov    ebp,eax
c001dd73:	58                   	pop    eax
c001dd74:	5a                   	pop    edx
c001dd75:	68 ee 58 02 c0       	push   0xc00258ee
c001dd7a:	55                   	push   ebp
c001dd7b:	e8 ce be fe ff       	call   c0009c4e <DriverlessDevice::DriverlessDevice(char const*)>
c001dd80:	59                   	pop    ecx
c001dd81:	5f                   	pop    edi
c001dd82:	55                   	push   ebp
c001dd83:	53                   	push   ebx
c001dd84:	e8 11 bc fe ff       	call   c000999a <Device::addChild(Device*)>
c001dd89:	83 ec 1c             	sub    esp,0x1c
c001dd8c:	b9 09 00 00 00       	mov    ecx,0x9
c001dd91:	89 e7                	mov    edi,esp
c001dd93:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dd95:	55                   	push   ebp
c001dd96:	e8 45 bb fe ff       	call   c00098e0 <Device::preOpenPCI(PCIDeviceInfo)>
c001dd9b:	83 c4 30             	add    esp,0x30
c001dd9e:	81 c4 8c 00 00 00    	add    esp,0x8c
c001dda4:	5b                   	pop    ebx
c001dda5:	5e                   	pop    esi
c001dda6:	5f                   	pop    edi
c001dda7:	5d                   	pop    ebp
c001dda8:	c3                   	ret    
c001dda9:	90                   	nop

c001ddaa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ddaa:	55                   	push   ebp
c001ddab:	57                   	push   edi
c001ddac:	56                   	push   esi
c001ddad:	53                   	push   ebx
c001ddae:	83 ec 68             	sub    esp,0x68
c001ddb1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ddb8:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ddbc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddc0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ddc7:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ddcc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ddd0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ddd7:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001dddc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dde0:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001dde5:	6a 0c                	push   0xc
c001dde7:	57                   	push   edi
c001dde8:	53                   	push   ebx
c001dde9:	56                   	push   esi
c001ddea:	55                   	push   ebp
c001ddeb:	e8 c4 f7 ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddf0:	83 c4 20             	add    esp,0x20
c001ddf3:	57                   	push   edi
c001ddf4:	53                   	push   ebx
c001ddf5:	56                   	push   esi
c001ddf6:	55                   	push   ebp
c001ddf7:	e8 ae f8 ff ff       	call   c001d6aa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ddfc:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001de01:	57                   	push   edi
c001de02:	53                   	push   ebx
c001de03:	56                   	push   esi
c001de04:	55                   	push   ebp
c001de05:	e8 36 f9 ff ff       	call   c001d740 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001de0a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001de0e:	83 c4 14             	add    esp,0x14
c001de11:	6a 3c                	push   0x3c
c001de13:	57                   	push   edi
c001de14:	53                   	push   ebx
c001de15:	56                   	push   esi
c001de16:	55                   	push   ebp
c001de17:	e8 98 f7 ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de1c:	0f b6 c4             	movzx  eax,ah
c001de1f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001de23:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001de27:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001de2b:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001de30:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001de36:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001de3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001de40:	83 c4 20             	add    esp,0x20
c001de43:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001de48:	74 30                	je     c001de7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001de4a:	31 c0                	xor    eax,eax
c001de4c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001de50:	7e 28                	jle    c001de7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001de52:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001de5a:	39 cb                	cmp    ebx,ecx
c001de5c:	75 19                	jne    c001de77 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001de5e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001de66:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001de6a:	75 0b                	jne    c001de77 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001de6c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001de73:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001de77:	40                   	inc    eax
c001de78:	eb d2                	jmp    c001de4c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001de7a:	31 d2                	xor    edx,edx
c001de7c:	83 ec 0c             	sub    esp,0xc
c001de7f:	57                   	push   edi
c001de80:	53                   	push   ebx
c001de81:	56                   	push   esi
c001de82:	52                   	push   edx
c001de83:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001de87:	55                   	push   ebp
c001de88:	e8 ff f8 ff ff       	call   c001d78c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de8d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001de91:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001de95:	42                   	inc    edx
c001de96:	83 c4 20             	add    esp,0x20
c001de99:	83 fa 06             	cmp    edx,0x6
c001de9c:	75 de                	jne    c001de7c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001de9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dea2:	83 ec 0c             	sub    esp,0xc
c001dea5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dea9:	c1 e2 08             	shl    edx,0x8
c001deac:	0f b6 c4             	movzx  eax,ah
c001deaf:	09 d0                	or     eax,edx
c001deb1:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001deb6:	6a 02                	push   0x2
c001deb8:	57                   	push   edi
c001deb9:	53                   	push   ebx
c001deba:	56                   	push   esi
c001debb:	55                   	push   ebp
c001debc:	e8 f3 f6 ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dec1:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001dec6:	83 c4 20             	add    esp,0x20
c001dec9:	57                   	push   edi
c001deca:	53                   	push   ebx
c001decb:	56                   	push   esi
c001decc:	55                   	push   ebp
c001decd:	e8 22 f8 ff ff       	call   c001d6f4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ded2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ded6:	57                   	push   edi
c001ded7:	53                   	push   ebx
c001ded8:	56                   	push   esi
c001ded9:	55                   	push   ebp
c001deda:	e8 7f f7 ff ff       	call   c001d65e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001dedf:	b9 09 00 00 00       	mov    ecx,0x9
c001dee4:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001dee9:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001deed:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001def1:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001def5:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001def9:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001defd:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001df01:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001df05:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001df09:	83 ec 0c             	sub    esp,0xc
c001df0c:	fc                   	cld    
c001df0d:	8d 74 24 58          	lea    esi,[esp+0x58]
c001df11:	89 e7                	mov    edi,esp
c001df13:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001df15:	55                   	push   ebp
c001df16:	e8 a9 fc ff ff       	call   c001dbc4 <PCI::foundDevice(PCIDeviceInfo)>
c001df1b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001df21:	5b                   	pop    ebx
c001df22:	5e                   	pop    esi
c001df23:	5f                   	pop    edi
c001df24:	5d                   	pop    ebp
c001df25:	c3                   	ret    

c001df26 <PCI::checkDevice(unsigned char, unsigned char)>:
c001df26:	55                   	push   ebp
c001df27:	57                   	push   edi
c001df28:	56                   	push   esi
c001df29:	53                   	push   ebx
c001df2a:	83 ec 0c             	sub    esp,0xc
c001df2d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001df32:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001df37:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001df3b:	6a 00                	push   0x0
c001df3d:	56                   	push   esi
c001df3e:	57                   	push   edi
c001df3f:	55                   	push   ebp
c001df40:	e8 19 f7 ff ff       	call   c001d65e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001df45:	6a 00                	push   0x0
c001df47:	56                   	push   esi
c001df48:	57                   	push   edi
c001df49:	55                   	push   ebp
c001df4a:	e8 5b fe ff ff       	call   c001ddaa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001df4f:	83 c4 20             	add    esp,0x20
c001df52:	6a 00                	push   0x0
c001df54:	56                   	push   esi
c001df55:	57                   	push   edi
c001df56:	55                   	push   ebp
c001df57:	e8 26 f7 ff ff       	call   c001d682 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001df5c:	83 c4 10             	add    esp,0x10
c001df5f:	a8 80                	test   al,0x80
c001df61:	74 2d                	je     c001df90 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001df63:	bb 01 00 00 00       	mov    ebx,0x1
c001df68:	53                   	push   ebx
c001df69:	56                   	push   esi
c001df6a:	57                   	push   edi
c001df6b:	55                   	push   ebp
c001df6c:	e8 ed f6 ff ff       	call   c001d65e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001df71:	83 c4 10             	add    esp,0x10
c001df74:	0f b7 c0             	movzx  eax,ax
c001df77:	3d ff ff 00 00       	cmp    eax,0xffff
c001df7c:	74 0c                	je     c001df8a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001df7e:	53                   	push   ebx
c001df7f:	56                   	push   esi
c001df80:	57                   	push   edi
c001df81:	55                   	push   ebp
c001df82:	e8 23 fe ff ff       	call   c001ddaa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001df87:	83 c4 10             	add    esp,0x10
c001df8a:	43                   	inc    ebx
c001df8b:	83 fb 08             	cmp    ebx,0x8
c001df8e:	75 d8                	jne    c001df68 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001df90:	83 c4 0c             	add    esp,0xc
c001df93:	5b                   	pop    ebx
c001df94:	5e                   	pop    esi
c001df95:	5f                   	pop    edi
c001df96:	5d                   	pop    ebp
c001df97:	c3                   	ret    

c001df98 <PCI::detect()>:
c001df98:	56                   	push   esi
c001df99:	53                   	push   ebx
c001df9a:	53                   	push   ebx
c001df9b:	31 db                	xor    ebx,ebx
c001df9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dfa1:	6a 00                	push   0x0
c001dfa3:	6a 00                	push   0x0
c001dfa5:	6a 00                	push   0x0
c001dfa7:	56                   	push   esi
c001dfa8:	e8 d5 f6 ff ff       	call   c001d682 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001dfad:	83 c4 10             	add    esp,0x10
c001dfb0:	a8 80                	test   al,0x80
c001dfb2:	75 21                	jne    c001dfd5 <PCI::detect()+0x3d>
c001dfb4:	51                   	push   ecx
c001dfb5:	51                   	push   ecx
c001dfb6:	6a 00                	push   0x0
c001dfb8:	56                   	push   esi
c001dfb9:	e8 e2 fb ff ff       	call   c001dba0 <PCI::checkBus(unsigned char)>
c001dfbe:	83 c4 10             	add    esp,0x10
c001dfc1:	eb 2a                	jmp    c001dfed <PCI::detect()+0x55>
c001dfc3:	52                   	push   edx
c001dfc4:	52                   	push   edx
c001dfc5:	53                   	push   ebx
c001dfc6:	43                   	inc    ebx
c001dfc7:	56                   	push   esi
c001dfc8:	e8 d3 fb ff ff       	call   c001dba0 <PCI::checkBus(unsigned char)>
c001dfcd:	83 c4 10             	add    esp,0x10
c001dfd0:	83 fb 08             	cmp    ebx,0x8
c001dfd3:	74 18                	je     c001dfed <PCI::detect()+0x55>
c001dfd5:	53                   	push   ebx
c001dfd6:	6a 00                	push   0x0
c001dfd8:	6a 00                	push   0x0
c001dfda:	56                   	push   esi
c001dfdb:	e8 7e f6 ff ff       	call   c001d65e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001dfe0:	83 c4 10             	add    esp,0x10
c001dfe3:	0f b7 c0             	movzx  eax,ax
c001dfe6:	3d ff ff 00 00       	cmp    eax,0xffff
c001dfeb:	74 d6                	je     c001dfc3 <PCI::detect()+0x2b>
c001dfed:	58                   	pop    eax
c001dfee:	5b                   	pop    ebx
c001dfef:	5e                   	pop    esi
c001dff0:	c3                   	ret    
c001dff1:	90                   	nop

c001dff2 <IDE::close(int, int, void*)>:
c001dff2:	83 c8 ff             	or     eax,0xffffffff
c001dff5:	c3                   	ret    

c001dff6 <IDE::IDE()>:
c001dff6:	83 ec 0c             	sub    esp,0xc
c001dff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dffd:	83 ec 08             	sub    esp,0x8
c001e000:	68 98 59 02 c0       	push   0xc0025998
c001e005:	50                   	push   eax
c001e006:	e8 e9 bc fe ff       	call   c0009cf4 <HardDiskController::HardDiskController(char const*)>
c001e00b:	83 c4 10             	add    esp,0x10
c001e00e:	ba c4 5a 02 c0       	mov    edx,0xc0025ac4
c001e013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e017:	89 10                	mov    DWORD PTR [eax],edx
c001e019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e01d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e024:	90                   	nop
c001e025:	83 c4 0c             	add    esp,0xc
c001e028:	c3                   	ret    
c001e029:	90                   	nop

c001e02a <IDE::prepareInterrupt(unsigned char)>:
c001e02a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e02f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e033:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e03b:	c3                   	ret    

c001e03c <selectDrive(unsigned char, unsigned char)>:
c001e03c:	c3                   	ret    
c001e03d:	90                   	nop

c001e03e <IDE::getBase(unsigned char)>:
c001e03e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e047:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e04f:	c3                   	ret    

c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e050:	55                   	push   ebp
c001e051:	57                   	push   edi
c001e052:	56                   	push   esi
c001e053:	53                   	push   ebx
c001e054:	83 ec 1c             	sub    esp,0x1c
c001e057:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e05b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e05f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e063:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e067:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e06a:	80 f9 03             	cmp    cl,0x3
c001e06d:	77 4f                	ja     c001e0be <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e06f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e073:	0f b6 f2             	movzx  esi,dl
c001e076:	0f b6 db             	movzx  ebx,bl
c001e079:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e07c:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e081:	80 ca 80             	or     dl,0x80
c001e084:	52                   	push   edx
c001e085:	6a 0c                	push   0xc
c001e087:	56                   	push   esi
c001e088:	57                   	push   edi
c001e089:	e8 c2 ff ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e08e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e093:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e097:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e09b:	ee                   	out    dx,al
c001e09c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e0a1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e0a5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e0a9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e0b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e0b5:	83 c4 2c             	add    esp,0x2c
c001e0b8:	5b                   	pop    ebx
c001e0b9:	5e                   	pop    esi
c001e0ba:	5f                   	pop    edi
c001e0bb:	5d                   	pop    ebp
c001e0bc:	eb 92                	jmp    c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0be:	0f b6 cb             	movzx  ecx,bl
c001e0c1:	83 f9 07             	cmp    ecx,0x7
c001e0c4:	77 12                	ja     c001e0d8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001e0c6:	0f b6 d2             	movzx  edx,dl
c001e0c9:	0f b6 db             	movzx  ebx,bl
c001e0cc:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001e0d4:	01 da                	add    edx,ebx
c001e0d6:	eb 2f                	jmp    c001e107 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e0d8:	83 f9 0d             	cmp    ecx,0xd
c001e0db:	77 13                	ja     c001e0f0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001e0dd:	0f b6 d2             	movzx  edx,dl
c001e0e0:	0f b6 db             	movzx  ebx,bl
c001e0e3:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e0ea:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e0ee:	eb 17                	jmp    c001e107 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e0f0:	83 f9 15             	cmp    ecx,0x15
c001e0f3:	77 13                	ja     c001e108 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001e0f5:	0f b6 d2             	movzx  edx,dl
c001e0f8:	0f b6 db             	movzx  ebx,bl
c001e0fb:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e103:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e107:	ee                   	out    dx,al
c001e108:	83 c4 1c             	add    esp,0x1c
c001e10b:	5b                   	pop    ebx
c001e10c:	5e                   	pop    esi
c001e10d:	5f                   	pop    edi
c001e10e:	5d                   	pop    ebp
c001e10f:	c3                   	ret    

c001e110 <IDE::read(unsigned char, unsigned char)>:
c001e110:	57                   	push   edi
c001e111:	56                   	push   esi
c001e112:	53                   	push   ebx
c001e113:	83 ec 10             	sub    esp,0x10
c001e116:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e11a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e11e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e122:	8d 42 f8             	lea    eax,[edx-0x8]
c001e125:	3c 03                	cmp    al,0x3
c001e127:	77 48                	ja     c001e171 <IDE::read(unsigned char, unsigned char)+0x61>
c001e129:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e12d:	0f b6 f1             	movzx  esi,cl
c001e130:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001e133:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001e138:	0c 80                	or     al,0x80
c001e13a:	50                   	push   eax
c001e13b:	6a 0c                	push   0xc
c001e13d:	56                   	push   esi
c001e13e:	53                   	push   ebx
c001e13f:	e8 0c ff ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e144:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e148:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001e14d:	0f b6 d2             	movzx  edx,dl
c001e150:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e154:	ec                   	in     al,dx
c001e155:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e159:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001e15e:	52                   	push   edx
c001e15f:	6a 0c                	push   0xc
c001e161:	56                   	push   esi
c001e162:	53                   	push   ebx
c001e163:	e8 e8 fe ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e168:	83 c4 20             	add    esp,0x20
c001e16b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e16f:	eb 4c                	jmp    c001e1bd <IDE::read(unsigned char, unsigned char)+0xad>
c001e171:	0f b6 f2             	movzx  esi,dl
c001e174:	83 fe 07             	cmp    esi,0x7
c001e177:	77 12                	ja     c001e18b <IDE::read(unsigned char, unsigned char)+0x7b>
c001e179:	0f b6 c9             	movzx  ecx,cl
c001e17c:	0f b6 d2             	movzx  edx,dl
c001e17f:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001e187:	01 c2                	add    edx,eax
c001e189:	eb 31                	jmp    c001e1bc <IDE::read(unsigned char, unsigned char)+0xac>
c001e18b:	83 fe 0d             	cmp    esi,0xd
c001e18e:	77 13                	ja     c001e1a3 <IDE::read(unsigned char, unsigned char)+0x93>
c001e190:	0f b6 c9             	movzx  ecx,cl
c001e193:	0f b6 d2             	movzx  edx,dl
c001e196:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001e19d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e1a1:	eb 19                	jmp    c001e1bc <IDE::read(unsigned char, unsigned char)+0xac>
c001e1a3:	31 c0                	xor    eax,eax
c001e1a5:	83 fe 15             	cmp    esi,0x15
c001e1a8:	77 13                	ja     c001e1bd <IDE::read(unsigned char, unsigned char)+0xad>
c001e1aa:	0f b6 c9             	movzx  ecx,cl
c001e1ad:	0f b6 d2             	movzx  edx,dl
c001e1b0:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001e1b8:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e1bc:	ec                   	in     al,dx
c001e1bd:	83 c4 10             	add    esp,0x10
c001e1c0:	5b                   	pop    ebx
c001e1c1:	5e                   	pop    esi
c001e1c2:	5f                   	pop    edi
c001e1c3:	c3                   	ret    

c001e1c4 <IDE::waitInterrupt(unsigned char)>:
c001e1c4:	55                   	push   ebp
c001e1c5:	57                   	push   edi
c001e1c6:	56                   	push   esi
c001e1c7:	53                   	push   ebx
c001e1c8:	31 db                	xor    ebx,ebx
c001e1ca:	83 ec 0c             	sub    esp,0xc
c001e1cd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e1d1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e1d6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e1de:	89 e8                	mov    eax,ebp
c001e1e0:	84 c0                	test   al,al
c001e1e2:	75 31                	jne    c001e215 <IDE::waitInterrupt(unsigned char)+0x51>
c001e1e4:	52                   	push   edx
c001e1e5:	6a 0c                	push   0xc
c001e1e7:	56                   	push   esi
c001e1e8:	57                   	push   edi
c001e1e9:	e8 22 ff ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e1ee:	83 c4 10             	add    esp,0x10
c001e1f1:	a8 01                	test   al,0x1
c001e1f3:	75 28                	jne    c001e21d <IDE::waitInterrupt(unsigned char)+0x59>
c001e1f5:	f6 c3 04             	test   bl,0x4
c001e1f8:	75 13                	jne    c001e20d <IDE::waitInterrupt(unsigned char)+0x49>
c001e1fa:	83 fb 32             	cmp    ebx,0x32
c001e1fd:	7e 0e                	jle    c001e20d <IDE::waitInterrupt(unsigned char)+0x49>
c001e1ff:	50                   	push   eax
c001e200:	50                   	push   eax
c001e201:	6a 00                	push   0x0
c001e203:	6a 64                	push   0x64
c001e205:	e8 7a 8d ff ff       	call   c0016f84 <milliTenthSleep(unsigned long long)>
c001e20a:	83 c4 10             	add    esp,0x10
c001e20d:	83 fb 3c             	cmp    ebx,0x3c
c001e210:	74 0b                	je     c001e21d <IDE::waitInterrupt(unsigned char)+0x59>
c001e212:	43                   	inc    ebx
c001e213:	eb c1                	jmp    c001e1d6 <IDE::waitInterrupt(unsigned char)+0x12>
c001e215:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e21d:	83 c4 0c             	add    esp,0xc
c001e220:	89 e8                	mov    eax,ebp
c001e222:	5b                   	pop    ebx
c001e223:	5e                   	pop    esi
c001e224:	5f                   	pop    edi
c001e225:	5d                   	pop    ebp
c001e226:	c3                   	ret    

c001e227 <ideChannel0IRQHandler(regs*, void*)>:
c001e227:	83 ec 10             	sub    esp,0x10
c001e22a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e22e:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e235:	6a 07                	push   0x7
c001e237:	6a 00                	push   0x0
c001e239:	50                   	push   eax
c001e23a:	e8 d1 fe ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e23f:	83 c4 1c             	add    esp,0x1c
c001e242:	c3                   	ret    

c001e243 <ideChannel1IRQHandler(regs*, void*)>:
c001e243:	83 ec 10             	sub    esp,0x10
c001e246:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e24a:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e251:	6a 07                	push   0x7
c001e253:	6a 01                	push   0x1
c001e255:	50                   	push   eax
c001e256:	e8 b5 fe ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e25b:	83 c4 1c             	add    esp,0x1c
c001e25e:	c3                   	ret    
c001e25f:	90                   	nop

c001e260 <IDE::enableIRQs(unsigned char, bool)>:
c001e260:	57                   	push   edi
c001e261:	b8 02 00 00 00       	mov    eax,0x2
c001e266:	56                   	push   esi
c001e267:	53                   	push   ebx
c001e268:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e26d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e271:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e275:	74 02                	je     c001e279 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001e277:	31 c0                	xor    eax,eax
c001e279:	0f b6 db             	movzx  ebx,bl
c001e27c:	bf 04 00 00 00       	mov    edi,0x4
c001e281:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001e288:	50                   	push   eax
c001e289:	6a 0c                	push   0xc
c001e28b:	53                   	push   ebx
c001e28c:	56                   	push   esi
c001e28d:	e8 be fd ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e292:	83 c4 10             	add    esp,0x10
c001e295:	50                   	push   eax
c001e296:	6a 0c                	push   0xc
c001e298:	53                   	push   ebx
c001e299:	56                   	push   esi
c001e29a:	e8 71 fe ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e29f:	83 c4 10             	add    esp,0x10
c001e2a2:	4f                   	dec    edi
c001e2a3:	75 f0                	jne    c001e295 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001e2a5:	5b                   	pop    ebx
c001e2a6:	5e                   	pop    esi
c001e2a7:	5f                   	pop    edi
c001e2a8:	c3                   	ret    
c001e2a9:	90                   	nop

c001e2aa <IDE::open(int, int, void*)>:
c001e2aa:	55                   	push   ebp
c001e2ab:	57                   	push   edi
c001e2ac:	56                   	push   esi
c001e2ad:	53                   	push   ebx
c001e2ae:	83 ec 1c             	sub    esp,0x1c
c001e2b1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e2b5:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e2bc:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e2c5:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e2ce:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e2d5:	0f 85 80 02 00 00    	jne    c001e55b <IDE::open(int, int, void*)+0x2b1>
c001e2db:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e2e1:	a8 70                	test   al,0x70
c001e2e3:	75 44                	jne    c001e329 <IDE::open(int, int, void*)+0x7f>
c001e2e5:	ba 20 84 00 00       	mov    edx,0x8420
c001e2ea:	0f a3 c2             	bt     edx,eax
c001e2ed:	73 3a                	jae    c001e329 <IDE::open(int, int, void*)+0x7f>
c001e2ef:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e2f5:	83 ec 0c             	sub    esp,0xc
c001e2f8:	83 e0 fc             	and    eax,0xfffffffc
c001e2fb:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e302:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e308:	83 e0 fc             	and    eax,0xfffffffc
c001e30b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e312:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e318:	83 e0 fc             	and    eax,0xfffffffc
c001e31b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e322:	68 e5 2f 02 c0       	push   0xc0022fe5
c001e327:	eb 60                	jmp    c001e389 <IDE::open(int, int, void*)+0xdf>
c001e329:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e333:	be 64 00 00 00       	mov    esi,0x64
c001e338:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e342:	57                   	push   edi
c001e343:	57                   	push   edi
c001e344:	68 b0 59 02 c0       	push   0xc00259b0
c001e349:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001e34d:	57                   	push   edi
c001e34e:	e8 fd 22 fe ff       	call   c0000650 <strcpy>
c001e353:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001e35a:	31 d2                	xor    edx,edx
c001e35c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e35f:	89 c8                	mov    eax,ecx
c001e361:	f7 f6                	div    esi
c001e363:	be 0a 00 00 00       	mov    esi,0xa
c001e368:	31 d2                	xor    edx,edx
c001e36a:	83 c0 30             	add    eax,0x30
c001e36d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e371:	89 c8                	mov    eax,ecx
c001e373:	f7 f6                	div    esi
c001e375:	89 d1                	mov    ecx,edx
c001e377:	31 d2                	xor    edx,edx
c001e379:	f7 f6                	div    esi
c001e37b:	83 c1 30             	add    ecx,0x30
c001e37e:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001e382:	83 c2 30             	add    edx,0x30
c001e385:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001e389:	e8 0d ee fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e38e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e395:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e39a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e3a1:	83 c4 10             	add    esp,0x10
c001e3a4:	89 fa                	mov    edx,edi
c001e3a6:	c1 e1 10             	shl    ecx,0x10
c001e3a9:	c1 e0 0b             	shl    eax,0xb
c001e3ac:	09 c1                	or     ecx,eax
c001e3ae:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e3b5:	c1 e0 08             	shl    eax,0x8
c001e3b8:	09 c1                	or     ecx,eax
c001e3ba:	89 c8                	mov    eax,ecx
c001e3bc:	0d 08 00 00 80       	or     eax,0x80000008
c001e3c1:	ef                   	out    dx,eax
c001e3c2:	be fc 0c 00 00       	mov    esi,0xcfc
c001e3c7:	89 f2                	mov    edx,esi
c001e3c9:	ed                   	in     eax,dx
c001e3ca:	c1 e8 10             	shr    eax,0x10
c001e3cd:	3d ff ff 00 00       	cmp    eax,0xffff
c001e3d2:	0f 84 e1 00 00 00    	je     c001e4b9 <IDE::open(int, int, void*)+0x20f>
c001e3d8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e3de:	89 fa                	mov    edx,edi
c001e3e0:	89 c8                	mov    eax,ecx
c001e3e2:	ef                   	out    dx,eax
c001e3e3:	b0 fe                	mov    al,0xfe
c001e3e5:	89 f2                	mov    edx,esi
c001e3e7:	ee                   	out    dx,al
c001e3e8:	89 c8                	mov    eax,ecx
c001e3ea:	89 fa                	mov    edx,edi
c001e3ec:	ef                   	out    dx,eax
c001e3ed:	89 f2                	mov    edx,esi
c001e3ef:	ed                   	in     eax,dx
c001e3f0:	3c fe                	cmp    al,0xfe
c001e3f2:	0f 85 83 00 00 00    	jne    c001e47b <IDE::open(int, int, void*)+0x1d1>
c001e3f8:	83 ec 0c             	sub    esp,0xc
c001e3fb:	68 1b 30 02 c0       	push   0xc002301b
c001e400:	e8 96 ed fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e405:	c7 04 24 b6 59 02 c0 	mov    DWORD PTR [esp],0xc00259b6
c001e40c:	e8 3d 8b fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e411:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e41b:	c7 04 24 08 33 02 c0 	mov    DWORD PTR [esp],0xc0023308
c001e422:	e8 74 ed fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e427:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e42e:	89 fa                	mov    edx,edi
c001e430:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e437:	c1 e1 10             	shl    ecx,0x10
c001e43a:	c1 e0 08             	shl    eax,0x8
c001e43d:	09 c1                	or     ecx,eax
c001e43f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e446:	c1 e0 0b             	shl    eax,0xb
c001e449:	09 c1                	or     ecx,eax
c001e44b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e451:	89 c8                	mov    eax,ecx
c001e453:	ef                   	out    dx,eax
c001e454:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001e45a:	89 f2                	mov    edx,esi
c001e45c:	89 e8                	mov    eax,ebp
c001e45e:	ee                   	out    dx,al
c001e45f:	89 c8                	mov    eax,ecx
c001e461:	89 fa                	mov    edx,edi
c001e463:	ef                   	out    dx,eax
c001e464:	89 f2                	mov    edx,esi
c001e466:	ed                   	in     eax,dx
c001e467:	0f b6 c0             	movzx  eax,al
c001e46a:	83 c4 10             	add    esp,0x10
c001e46d:	39 e8                	cmp    eax,ebp
c001e46f:	74 58                	je     c001e4c9 <IDE::open(int, int, void*)+0x21f>
c001e471:	83 ec 0c             	sub    esp,0xc
c001e474:	68 cb 59 02 c0       	push   0xc00259cb
c001e479:	eb 46                	jmp    c001e4c1 <IDE::open(int, int, void*)+0x217>
c001e47b:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e484:	75 29                	jne    c001e4af <IDE::open(int, int, void*)+0x205>
c001e486:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001e48d:	3d 8a 00 00 00       	cmp    eax,0x8a
c001e492:	74 05                	je     c001e499 <IDE::open(int, int, void*)+0x1ef>
c001e494:	83 c0 80             	add    eax,0xffffff80
c001e497:	75 16                	jne    c001e4af <IDE::open(int, int, void*)+0x205>
c001e499:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e4a0:	83 ec 0c             	sub    esp,0xc
c001e4a3:	68 d7 42 02 c0       	push   0xc00242d7
c001e4a8:	e8 ee ec fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e4ad:	eb 17                	jmp    c001e4c6 <IDE::open(int, int, void*)+0x21c>
c001e4af:	83 ec 0c             	sub    esp,0xc
c001e4b2:	68 d3 59 02 c0       	push   0xc00259d3
c001e4b7:	eb 08                	jmp    c001e4c1 <IDE::open(int, int, void*)+0x217>
c001e4b9:	83 ec 0c             	sub    esp,0xc
c001e4bc:	68 04 5a 02 c0       	push   0xc0025a04
c001e4c1:	e8 64 19 ff ff       	call   c000fe2a <KePanic(char const*)>
c001e4c6:	83 c4 10             	add    esp,0x10
c001e4c9:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001e4d0:	0f 84 bf 00 00 00    	je     c001e595 <IDE::open(int, int, void*)+0x2eb>
c001e4d6:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e4dc:	83 ec 0c             	sub    esp,0xc
c001e4df:	83 e0 fc             	and    eax,0xfffffffc
c001e4e2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e4e9:	83 c0 08             	add    eax,0x8
c001e4ec:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e4f3:	68 2e 5a 02 c0       	push   0xc0025a2e
c001e4f8:	e8 51 8a fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e4fd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e504:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e50b:	50                   	push   eax
c001e50c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e513:	50                   	push   eax
c001e514:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e51b:	50                   	push   eax
c001e51c:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e522:	e8 8d f0 ff ff       	call   c001d5b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e527:	83 c4 18             	add    esp,0x18
c001e52a:	83 c8 07             	or     eax,0x7
c001e52d:	0f b7 c0             	movzx  eax,ax
c001e530:	50                   	push   eax
c001e531:	6a 04                	push   0x4
c001e533:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e53a:	50                   	push   eax
c001e53b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e542:	50                   	push   eax
c001e543:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e54a:	50                   	push   eax
c001e54b:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e551:	e8 9a f2 ff ff       	call   c001d7f0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001e556:	83 c4 20             	add    esp,0x20
c001e559:	eb 3a                	jmp    c001e595 <IDE::open(int, int, void*)+0x2eb>
c001e55b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e562:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e568:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e56f:	05 06 02 00 00       	add    eax,0x206
c001e574:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e57b:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e582:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e589:	05 06 02 00 00       	add    eax,0x206
c001e58e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e595:	83 ec 0c             	sub    esp,0xc
c001e598:	68 ab 38 02 c0       	push   0xc00238ab
c001e59d:	e8 f9 eb fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e5a2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e5a8:	83 c4 10             	add    esp,0x10
c001e5ab:	89 c2                	mov    edx,eax
c001e5ad:	83 e2 0f             	and    edx,0xf
c001e5b0:	83 fa 08             	cmp    edx,0x8
c001e5b3:	75 0a                	jne    c001e5bf <IDE::open(int, int, void*)+0x315>
c001e5b5:	83 e8 02             	sub    eax,0x2
c001e5b8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e5bf:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e5c5:	89 c2                	mov    edx,eax
c001e5c7:	83 e2 0f             	and    edx,0xf
c001e5ca:	83 fa 08             	cmp    edx,0x8
c001e5cd:	75 0a                	jne    c001e5d9 <IDE::open(int, int, void*)+0x32f>
c001e5cf:	83 e8 02             	sub    eax,0x2
c001e5d2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e5d9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e5e0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e5e7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e5ea:	89 d0                	mov    eax,edx
c001e5ec:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e5f0:	8d 7a 01             	lea    edi,[edx+0x1]
c001e5f3:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e5f7:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e5fb:	83 e1 3f             	and    ecx,0x3f
c001e5fe:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e602:	89 f9                	mov    ecx,edi
c001e604:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e60b:	8d 78 02             	lea    edi,[eax+0x2]
c001e60e:	0f b6 c9             	movzx  ecx,cl
c001e611:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e614:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e618:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e61c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e620:	83 e2 3f             	and    edx,0x3f
c001e623:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e627:	89 f9                	mov    ecx,edi
c001e629:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e62f:	8d 78 03             	lea    edi,[eax+0x3]
c001e632:	0f b6 d1             	movzx  edx,cl
c001e635:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e638:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e63c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e640:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e644:	83 e1 3f             	and    ecx,0x3f
c001e647:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e64b:	89 fa                	mov    edx,edi
c001e64d:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e653:	8d 78 04             	lea    edi,[eax+0x4]
c001e656:	0f b6 ca             	movzx  ecx,dl
c001e659:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e65c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e660:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e664:	89 fa                	mov    edx,edi
c001e666:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e66c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e670:	83 e2 3f             	and    edx,0x3f
c001e673:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e677:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e67e:	66 85 f6             	test   si,si
c001e681:	74 24                	je     c001e6a7 <IDE::open(int, int, void*)+0x3fd>
c001e683:	89 f9                	mov    ecx,edi
c001e685:	83 c0 05             	add    eax,0x5
c001e688:	0f b6 d1             	movzx  edx,cl
c001e68b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e68e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e692:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e696:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e69c:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001e6a0:	83 e0 3f             	and    eax,0x3f
c001e6a3:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001e6a7:	83 ec 0c             	sub    esp,0xc
c001e6aa:	68 46 5a 02 c0       	push   0xc0025a46
c001e6af:	e8 e7 ea fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e6b4:	58                   	pop    eax
c001e6b5:	5a                   	pop    edx
c001e6b6:	6a 00                	push   0x0
c001e6b8:	53                   	push   ebx
c001e6b9:	e8 6c f9 ff ff       	call   c001e02a <IDE::prepareInterrupt(unsigned char)>
c001e6be:	59                   	pop    ecx
c001e6bf:	5e                   	pop    esi
c001e6c0:	6a 01                	push   0x1
c001e6c2:	53                   	push   ebx
c001e6c3:	e8 62 f9 ff ff       	call   c001e02a <IDE::prepareInterrupt(unsigned char)>
c001e6c8:	c7 04 24 95 52 02 c0 	mov    DWORD PTR [esp],0xc0025295
c001e6cf:	e8 c7 ea fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e6d4:	83 c4 0c             	add    esp,0xc
c001e6d7:	6a 00                	push   0x0
c001e6d9:	6a 00                	push   0x0
c001e6db:	53                   	push   ebx
c001e6dc:	e8 7f fb ff ff       	call   c001e260 <IDE::enableIRQs(unsigned char, bool)>
c001e6e1:	83 c4 0c             	add    esp,0xc
c001e6e4:	6a 00                	push   0x0
c001e6e6:	6a 01                	push   0x1
c001e6e8:	53                   	push   ebx
c001e6e9:	e8 72 fb ff ff       	call   c001e260 <IDE::enableIRQs(unsigned char, bool)>
c001e6ee:	c7 04 24 48 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a48
c001e6f5:	e8 a1 ea fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e6fa:	83 c4 10             	add    esp,0x10
c001e6fd:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e704:	74 3c                	je     c001e742 <IDE::open(int, int, void*)+0x498>
c001e706:	83 ec 0c             	sub    esp,0xc
c001e709:	53                   	push   ebx
c001e70a:	6a 01                	push   0x1
c001e70c:	68 27 e2 01 c0       	push   0xc001e227
c001e711:	6a 0e                	push   0xe
c001e713:	53                   	push   ebx
c001e714:	e8 2d b2 fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e719:	83 c4 14             	add    esp,0x14
c001e71c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e722:	53                   	push   ebx
c001e723:	6a 01                	push   0x1
c001e725:	68 43 e2 01 c0       	push   0xc001e243
c001e72a:	6a 0f                	push   0xf
c001e72c:	53                   	push   ebx
c001e72d:	e8 14 b2 fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e732:	83 c4 14             	add    esp,0x14
c001e735:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e73b:	68 0e 35 02 c0       	push   0xc002350e
c001e740:	eb 40                	jmp    c001e782 <IDE::open(int, int, void*)+0x4d8>
c001e742:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e74c:	83 ec 0c             	sub    esp,0xc
c001e74f:	53                   	push   ebx
c001e750:	6a 00                	push   0x0
c001e752:	68 27 e2 01 c0       	push   0xc001e227
c001e757:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e75d:	53                   	push   ebx
c001e75e:	e8 e3 b1 fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e763:	83 c4 14             	add    esp,0x14
c001e766:	53                   	push   ebx
c001e767:	6a 00                	push   0x0
c001e769:	68 43 e2 01 c0       	push   0xc001e243
c001e76e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e774:	53                   	push   ebx
c001e775:	e8 cc b1 fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e77a:	83 c4 14             	add    esp,0x14
c001e77d:	68 c6 42 02 c0       	push   0xc00242c6
c001e782:	e8 14 ea fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e787:	83 c4 10             	add    esp,0x10
c001e78a:	83 ec 0c             	sub    esp,0xc
c001e78d:	68 4a 5a 02 c0       	push   0xc0025a4a
c001e792:	e8 04 ea fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e797:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e799:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e79c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e79f:	c7 04 24 dd 49 02 c0 	mov    DWORD PTR [esp],0xc00249dd
c001e7a6:	e8 f0 e9 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e7ab:	83 c4 0c             	add    esp,0xc
c001e7ae:	6a 07                	push   0x7
c001e7b0:	6a 00                	push   0x0
c001e7b2:	53                   	push   ebx
c001e7b3:	e8 58 f9 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e7b8:	83 c4 0c             	add    esp,0xc
c001e7bb:	6a 07                	push   0x7
c001e7bd:	6a 01                	push   0x1
c001e7bf:	53                   	push   ebx
c001e7c0:	e8 4b f9 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e7c5:	c7 04 24 f4 3f 02 c0 	mov    DWORD PTR [esp],0xc0023ff4
c001e7cc:	e8 ca e9 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e7d1:	83 c4 0c             	add    esp,0xc
c001e7d4:	6a 01                	push   0x1
c001e7d6:	6a 00                	push   0x0
c001e7d8:	53                   	push   ebx
c001e7d9:	e8 82 fa ff ff       	call   c001e260 <IDE::enableIRQs(unsigned char, bool)>
c001e7de:	83 c4 0c             	add    esp,0xc
c001e7e1:	6a 01                	push   0x1
c001e7e3:	6a 01                	push   0x1
c001e7e5:	53                   	push   ebx
c001e7e6:	e8 75 fa ff ff       	call   c001e260 <IDE::enableIRQs(unsigned char, bool)>
c001e7eb:	c7 04 24 4d 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a4d
c001e7f2:	e8 a4 e9 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e7f7:	83 c4 2c             	add    esp,0x2c
c001e7fa:	31 c0                	xor    eax,eax
c001e7fc:	5b                   	pop    ebx
c001e7fd:	5e                   	pop    esi
c001e7fe:	5f                   	pop    edi
c001e7ff:	5d                   	pop    ebp
c001e800:	c3                   	ret    
c001e801:	90                   	nop

c001e802 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e802:	55                   	push   ebp
c001e803:	57                   	push   edi
c001e804:	56                   	push   esi
c001e805:	53                   	push   ebx
c001e806:	83 ec 1c             	sub    esp,0x1c
c001e809:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e80d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e811:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e815:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e819:	8d 42 f8             	lea    eax,[edx-0x8]
c001e81c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e820:	3c 03                	cmp    al,0x3
c001e822:	77 5a                	ja     c001e87e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001e824:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e828:	0f b6 db             	movzx  ebx,bl
c001e82b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e82f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e832:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e837:	0c 80                	or     al,0x80
c001e839:	50                   	push   eax
c001e83a:	6a 0c                	push   0xc
c001e83c:	53                   	push   ebx
c001e83d:	56                   	push   esi
c001e83e:	e8 0d f8 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e843:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e847:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001e84c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e850:	0f b6 d2             	movzx  edx,dl
c001e853:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e857:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e859:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e85e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001e862:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e866:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e86e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e872:	83 c4 2c             	add    esp,0x2c
c001e875:	5b                   	pop    ebx
c001e876:	5e                   	pop    esi
c001e877:	5f                   	pop    edi
c001e878:	5d                   	pop    ebp
c001e879:	e9 d2 f7 ff ff       	jmp    c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e87e:	0f b6 c2             	movzx  eax,dl
c001e881:	83 f8 07             	cmp    eax,0x7
c001e884:	77 12                	ja     c001e898 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001e886:	0f b6 db             	movzx  ebx,bl
c001e889:	0f b6 c2             	movzx  eax,dl
c001e88c:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001e894:	01 c2                	add    edx,eax
c001e896:	eb 2f                	jmp    c001e8c7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001e898:	83 f8 0d             	cmp    eax,0xd
c001e89b:	77 13                	ja     c001e8b0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001e89d:	0f b6 db             	movzx  ebx,bl
c001e8a0:	0f b6 d2             	movzx  edx,dl
c001e8a3:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001e8aa:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e8ae:	eb 17                	jmp    c001e8c7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001e8b0:	83 f8 15             	cmp    eax,0x15
c001e8b3:	77 14                	ja     c001e8c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001e8b5:	0f b6 db             	movzx  ebx,bl
c001e8b8:	0f b6 d2             	movzx  edx,dl
c001e8bb:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001e8c3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e8c7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e8c9:	83 c4 1c             	add    esp,0x1c
c001e8cc:	5b                   	pop    ebx
c001e8cd:	5e                   	pop    esi
c001e8ce:	5f                   	pop    edi
c001e8cf:	5d                   	pop    ebp
c001e8d0:	c3                   	ret    
c001e8d1:	90                   	nop

c001e8d2 <IDE::detect()>:
c001e8d2:	55                   	push   ebp
c001e8d3:	57                   	push   edi
c001e8d4:	56                   	push   esi
c001e8d5:	53                   	push   ebx
c001e8d6:	81 ec 28 02 00 00    	sub    esp,0x228
c001e8dc:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001e8e3:	68 4f 5a 02 c0       	push   0xc0025a4f
c001e8e8:	e8 ae e8 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e8ed:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001e8f3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001e8f7:	83 c4 10             	add    esp,0x10
c001e8fa:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001e8ff:	0f 85 26 04 00 00    	jne    c001ed2b <IDE::detect()+0x459>
c001e905:	83 ec 0c             	sub    esp,0xc
c001e908:	31 f6                	xor    esi,esi
c001e90a:	68 52 5a 02 c0       	push   0xc0025a52
c001e90f:	31 ff                	xor    edi,edi
c001e911:	e8 85 e8 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e916:	83 c4 10             	add    esp,0x10
c001e919:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001e920:	83 ec 0c             	sub    esp,0xc
c001e923:	68 55 5a 02 c0       	push   0xc0025a55
c001e928:	e8 6e e8 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e92d:	83 c4 10             	add    esp,0x10
c001e930:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e937:	83 ec 0c             	sub    esp,0xc
c001e93a:	31 ed                	xor    ebp,ebp
c001e93c:	68 58 5a 02 c0       	push   0xc0025a58
c001e941:	e8 55 e8 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e946:	89 f8                	mov    eax,edi
c001e948:	c1 e0 06             	shl    eax,0x6
c001e94b:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001e953:	c7 04 24 5b 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a5b
c001e95a:	e8 3c e8 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e95f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e963:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96b:	c1 e0 04             	shl    eax,0x4
c001e96e:	83 c8 a0             	or     eax,0xffffffa0
c001e971:	0f b6 c0             	movzx  eax,al
c001e974:	50                   	push   eax
c001e975:	6a 06                	push   0x6
c001e977:	56                   	push   esi
c001e978:	53                   	push   ebx
c001e979:	e8 d2 f6 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e97e:	83 c4 1c             	add    esp,0x1c
c001e981:	6a 0c                	push   0xc
c001e983:	56                   	push   esi
c001e984:	53                   	push   ebx
c001e985:	e8 86 f7 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e98a:	83 c4 0c             	add    esp,0xc
c001e98d:	6a 0c                	push   0xc
c001e98f:	56                   	push   esi
c001e990:	53                   	push   ebx
c001e991:	e8 7a f7 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e996:	83 c4 0c             	add    esp,0xc
c001e999:	6a 0c                	push   0xc
c001e99b:	56                   	push   esi
c001e99c:	53                   	push   ebx
c001e99d:	e8 6e f7 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e9a2:	83 c4 0c             	add    esp,0xc
c001e9a5:	6a 0c                	push   0xc
c001e9a7:	56                   	push   esi
c001e9a8:	53                   	push   ebx
c001e9a9:	e8 62 f7 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e9ae:	c7 04 24 5e 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a5e
c001e9b5:	e8 e1 e7 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001e9ba:	68 ec 00 00 00       	push   0xec
c001e9bf:	6a 07                	push   0x7
c001e9c1:	56                   	push   esi
c001e9c2:	53                   	push   ebx
c001e9c3:	e8 88 f6 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9c8:	83 c4 1c             	add    esp,0x1c
c001e9cb:	6a 0c                	push   0xc
c001e9cd:	56                   	push   esi
c001e9ce:	53                   	push   ebx
c001e9cf:	e8 3c f7 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e9d4:	83 c4 0c             	add    esp,0xc
c001e9d7:	6a 0c                	push   0xc
c001e9d9:	56                   	push   esi
c001e9da:	53                   	push   ebx
c001e9db:	e8 30 f7 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e9e0:	83 c4 0c             	add    esp,0xc
c001e9e3:	6a 0c                	push   0xc
c001e9e5:	56                   	push   esi
c001e9e6:	53                   	push   ebx
c001e9e7:	e8 24 f7 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e9ec:	83 c4 0c             	add    esp,0xc
c001e9ef:	6a 0c                	push   0xc
c001e9f1:	56                   	push   esi
c001e9f2:	53                   	push   ebx
c001e9f3:	e8 18 f7 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001e9f8:	c7 04 24 61 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a61
c001e9ff:	e8 97 e7 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001ea04:	83 c4 0c             	add    esp,0xc
c001ea07:	6a 0c                	push   0xc
c001ea09:	56                   	push   esi
c001ea0a:	53                   	push   ebx
c001ea0b:	e8 00 f7 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001ea10:	83 c4 10             	add    esp,0x10
c001ea13:	84 c0                	test   al,al
c001ea15:	75 1f                	jne    c001ea36 <IDE::detect()+0x164>
c001ea17:	83 ec 0c             	sub    esp,0xc
c001ea1a:	68 64 5a 02 c0       	push   0xc0025a64
c001ea1f:	e8 77 e7 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001ea24:	e9 e0 02 00 00       	jmp    c001ed09 <IDE::detect()+0x437>
c001ea29:	a8 80                	test   al,0x80
c001ea2b:	74 21                	je     c001ea4e <IDE::detect()+0x17c>
c001ea2d:	45                   	inc    ebp
c001ea2e:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001ea34:	7f 1e                	jg     c001ea54 <IDE::detect()+0x182>
c001ea36:	50                   	push   eax
c001ea37:	6a 0c                	push   0xc
c001ea39:	56                   	push   esi
c001ea3a:	53                   	push   ebx
c001ea3b:	e8 d0 f6 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001ea40:	83 c4 10             	add    esp,0x10
c001ea43:	a8 01                	test   al,0x1
c001ea45:	74 e2                	je     c001ea29 <IDE::detect()+0x157>
c001ea47:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001ea4c:	eb 23                	jmp    c001ea71 <IDE::detect()+0x19f>
c001ea4e:	a8 08                	test   al,0x8
c001ea50:	74 db                	je     c001ea2d <IDE::detect()+0x15b>
c001ea52:	eb 18                	jmp    c001ea6c <IDE::detect()+0x19a>
c001ea54:	50                   	push   eax
c001ea55:	50                   	push   eax
c001ea56:	6a 00                	push   0x0
c001ea58:	6a 32                	push   0x32
c001ea5a:	e8 25 85 ff ff       	call   c0016f84 <milliTenthSleep(unsigned long long)>
c001ea5f:	83 c4 10             	add    esp,0x10
c001ea62:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001ea68:	75 cc                	jne    c001ea36 <IDE::detect()+0x164>
c001ea6a:	eb db                	jmp    c001ea47 <IDE::detect()+0x175>
c001ea6c:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001ea71:	83 ec 0c             	sub    esp,0xc
c001ea74:	68 67 5a 02 c0       	push   0xc0025a67
c001ea79:	e8 1d e7 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001ea7e:	83 c4 10             	add    esp,0x10
c001ea81:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001ea86:	74 56                	je     c001eade <IDE::detect()+0x20c>
c001ea88:	51                   	push   ecx
c001ea89:	6a 04                	push   0x4
c001ea8b:	56                   	push   esi
c001ea8c:	53                   	push   ebx
c001ea8d:	e8 7e f6 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001ea92:	83 c4 0c             	add    esp,0xc
c001ea95:	6a 05                	push   0x5
c001ea97:	56                   	push   esi
c001ea98:	53                   	push   ebx
c001ea99:	89 c5                	mov    ebp,eax
c001ea9b:	e8 70 f6 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001eaa0:	89 e9                	mov    ecx,ebp
c001eaa2:	83 c4 10             	add    esp,0x10
c001eaa5:	0f b6 e9             	movzx  ebp,cl
c001eaa8:	83 fd 14             	cmp    ebp,0x14
c001eaab:	75 04                	jne    c001eab1 <IDE::detect()+0x1df>
c001eaad:	3c eb                	cmp    al,0xeb
c001eaaf:	74 11                	je     c001eac2 <IDE::detect()+0x1f0>
c001eab1:	83 fd 69             	cmp    ebp,0x69
c001eab4:	0f 85 52 02 00 00    	jne    c001ed0c <IDE::detect()+0x43a>
c001eaba:	3c 96                	cmp    al,0x96
c001eabc:	0f 85 4a 02 00 00    	jne    c001ed0c <IDE::detect()+0x43a>
c001eac2:	68 a1 00 00 00       	push   0xa1
c001eac7:	6a 07                	push   0x7
c001eac9:	56                   	push   esi
c001eaca:	53                   	push   ebx
c001eacb:	e8 80 f5 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ead0:	58                   	pop    eax
c001ead1:	5a                   	pop    edx
c001ead2:	6a 00                	push   0x0
c001ead4:	6a 0a                	push   0xa
c001ead6:	e8 a9 84 ff ff       	call   c0016f84 <milliTenthSleep(unsigned long long)>
c001eadb:	83 c4 10             	add    esp,0x10
c001eade:	83 ec 0c             	sub    esp,0xc
c001eae1:	89 fd                	mov    ebp,edi
c001eae3:	68 6a 5a 02 c0       	push   0xc0025a6a
c001eae8:	e8 ae e6 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001eaed:	8d 54 24 20          	lea    edx,[esp+0x20]
c001eaf1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001eaf8:	c1 e5 06             	shl    ebp,0x6
c001eafb:	52                   	push   edx
c001eafc:	01 dd                	add    ebp,ebx
c001eafe:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001eb02:	6a 00                	push   0x0
c001eb04:	56                   	push   esi
c001eb05:	53                   	push   ebx
c001eb06:	e8 f7 fc ff ff       	call   c001e802 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001eb0b:	83 c4 14             	add    esp,0x14
c001eb0e:	68 6e 5a 02 c0       	push   0xc0025a6e
c001eb13:	e8 83 e6 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001eb18:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001eb1d:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001eb24:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001eb2b:	89 f0                	mov    eax,esi
c001eb2d:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001eb33:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001eb37:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001eb3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb41:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001eb48:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001eb50:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001eb57:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001eb5f:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001eb65:	c7 04 24 72 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a72
c001eb6c:	e8 2a e6 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001eb71:	83 c4 10             	add    esp,0x10
c001eb74:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001eb7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eb7f:	74 09                	je     c001eb8a <IDE::detect()+0x2b8>
c001eb81:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001eb88:	eb 07                	jmp    c001eb91 <IDE::detect()+0x2bf>
c001eb8a:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001eb91:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001eb95:	89 f8                	mov    eax,edi
c001eb97:	83 ec 0c             	sub    esp,0xc
c001eb9a:	c1 e0 06             	shl    eax,0x6
c001eb9d:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001eba0:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001eba6:	68 76 5a 02 c0       	push   0xc0025a76
c001ebab:	e8 eb e5 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001ebb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ebb4:	89 e8                	mov    eax,ebp
c001ebb6:	83 c4 10             	add    esp,0x10
c001ebb9:	8d 6a 28             	lea    ebp,[edx+0x28]
c001ebbc:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001ebbf:	83 c2 02             	add    edx,0x2
c001ebc2:	83 c0 02             	add    eax,0x2
c001ebc5:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001ebcb:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001ebce:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001ebd4:	39 d5                	cmp    ebp,edx
c001ebd6:	75 e4                	jne    c001ebbc <IDE::detect()+0x2ea>
c001ebd8:	89 f8                	mov    eax,edi
c001ebda:	c1 e0 06             	shl    eax,0x6
c001ebdd:	01 d8                	add    eax,ebx
c001ebdf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ebe6:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001ebed:	c1 ea 09             	shr    edx,0x9
c001ebf0:	83 e2 01             	and    edx,0x1
c001ebf3:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001ebfa:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ec00:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001ec04:	74 0c                	je     c001ec12 <IDE::detect()+0x340>
c001ec06:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001ec0f:	0f 95 c2             	setne  dl
c001ec12:	89 fd                	mov    ebp,edi
c001ec14:	83 ec 0c             	sub    esp,0xc
c001ec17:	c1 e5 06             	shl    ebp,0x6
c001ec1a:	01 dd                	add    ebp,ebx
c001ec1c:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001ec22:	68 7a 5a 02 c0       	push   0xc0025a7a
c001ec27:	e8 6f e5 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001ec2c:	83 c4 10             	add    esp,0x10
c001ec2f:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001ec34:	75 66                	jne    c001ec9c <IDE::detect()+0x3ca>
c001ec36:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001ec3d:	0f 84 b8 00 00 00    	je     c001ecfb <IDE::detect()+0x429>
c001ec43:	83 ec 0c             	sub    esp,0xc
c001ec46:	68 7e 5a 02 c0       	push   0xc0025a7e
c001ec4b:	e8 4b e5 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001ec50:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001ec57:	e8 88 0e ff ff       	call   c000fae4 <malloc>
c001ec5c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec5f:	89 c5                	mov    ebp,eax
c001ec61:	e8 44 05 00 00       	call   c001f1aa <ATA::ATA()>
c001ec66:	c7 04 24 82 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a82
c001ec6d:	e8 29 e5 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001ec72:	59                   	pop    ecx
c001ec73:	58                   	pop    eax
c001ec74:	55                   	push   ebp
c001ec75:	53                   	push   ebx
c001ec76:	e8 1f ad fe ff       	call   c000999a <Device::addChild(Device*)>
c001ec7b:	c7 04 24 87 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a87
c001ec82:	e8 14 e5 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001ec87:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ec8a:	53                   	push   ebx
c001ec8b:	57                   	push   edi
c001ec8c:	6a 00                	push   0x0
c001ec8e:	55                   	push   ebp
c001ec8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ec92:	83 c4 14             	add    esp,0x14
c001ec95:	68 8c 5a 02 c0       	push   0xc0025a8c
c001ec9a:	eb 57                	jmp    c001ecf3 <IDE::detect()+0x421>
c001ec9c:	83 ec 0c             	sub    esp,0xc
c001ec9f:	68 91 5a 02 c0       	push   0xc0025a91
c001eca4:	e8 f2 e4 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001eca9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ecb0:	e8 2f 0e ff ff       	call   c000fae4 <malloc>
c001ecb5:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecb8:	89 c5                	mov    ebp,eax
c001ecba:	e8 b1 0c 00 00       	call   c001f970 <ATAPI::ATAPI()>
c001ecbf:	c7 04 24 97 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a97
c001ecc6:	e8 d0 e4 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001eccb:	58                   	pop    eax
c001eccc:	5a                   	pop    edx
c001eccd:	55                   	push   ebp
c001ecce:	53                   	push   ebx
c001eccf:	e8 c6 ac fe ff       	call   c000999a <Device::addChild(Device*)>
c001ecd4:	c7 04 24 9e 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a9e
c001ecdb:	e8 bb e4 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001ece0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ece3:	53                   	push   ebx
c001ece4:	57                   	push   edi
c001ece5:	6a 00                	push   0x0
c001ece7:	55                   	push   ebp
c001ece8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eceb:	83 c4 14             	add    esp,0x14
c001ecee:	68 a5 5a 02 c0       	push   0xc0025aa5
c001ecf3:	e8 a3 e4 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001ecf8:	83 c4 10             	add    esp,0x10
c001ecfb:	83 ec 0c             	sub    esp,0xc
c001ecfe:	47                   	inc    edi
c001ecff:	68 ac 5a 02 c0       	push   0xc0025aac
c001ed04:	e8 92 e4 fe ff       	call   c000d19b <KeSetBootMessage(char const*)>
c001ed09:	83 c4 10             	add    esp,0x10
c001ed0c:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001ed10:	74 0c                	je     c001ed1e <IDE::detect()+0x44c>
c001ed12:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001ed19:	e9 19 fc ff ff       	jmp    c001e937 <IDE::detect()+0x65>
c001ed1e:	4e                   	dec    esi
c001ed1f:	74 0a                	je     c001ed2b <IDE::detect()+0x459>
c001ed21:	be 01 00 00 00       	mov    esi,0x1
c001ed26:	e9 f5 fb ff ff       	jmp    c001e920 <IDE::detect()+0x4e>
c001ed2b:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ed31:	5b                   	pop    ebx
c001ed32:	5e                   	pop    esi
c001ed33:	5f                   	pop    edi
c001ed34:	5d                   	pop    ebp
c001ed35:	c3                   	ret    

c001ed36 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ed36:	55                   	push   ebp
c001ed37:	57                   	push   edi
c001ed38:	56                   	push   esi
c001ed39:	53                   	push   ebx
c001ed3a:	83 ec 1c             	sub    esp,0x1c
c001ed3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ed41:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ed45:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ed49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed4d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ed51:	88 c3                	mov    bl,al
c001ed53:	25 ff 00 00 00       	and    eax,0xff
c001ed58:	0f 84 88 00 00 00    	je     c001ede6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ed5e:	83 ec 0c             	sub    esp,0xc
c001ed61:	89 c7                	mov    edi,eax
c001ed63:	68 b0 5a 02 c0       	push   0xc0025ab0
c001ed68:	e8 e1 81 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ed6d:	83 c4 10             	add    esp,0x10
c001ed70:	83 ff 01             	cmp    edi,0x1
c001ed73:	74 6b                	je     c001ede0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001ed75:	83 ff 02             	cmp    edi,0x2
c001ed78:	75 58                	jne    c001edd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001ed7a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001ed7f:	50                   	push   eax
c001ed80:	6a 01                	push   0x1
c001ed82:	01 ff                	add    edi,edi
c001ed84:	09 fe                	or     esi,edi
c001ed86:	89 f0                	mov    eax,esi
c001ed88:	0f b6 f0             	movzx  esi,al
c001ed8b:	c1 e6 06             	shl    esi,0x6
c001ed8e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001ed96:	50                   	push   eax
c001ed97:	55                   	push   ebp
c001ed98:	e8 73 f3 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001ed9d:	83 c4 10             	add    esp,0x10
c001eda0:	a8 01                	test   al,0x1
c001eda2:	74 02                	je     c001eda6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001eda4:	b3 07                	mov    bl,0x7
c001eda6:	a8 02                	test   al,0x2
c001eda8:	74 02                	je     c001edac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001edaa:	b3 03                	mov    bl,0x3
c001edac:	a8 04                	test   al,0x4
c001edae:	74 02                	je     c001edb2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001edb0:	b3 14                	mov    bl,0x14
c001edb2:	a8 08                	test   al,0x8
c001edb4:	74 02                	je     c001edb8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001edb6:	b3 03                	mov    bl,0x3
c001edb8:	a8 10                	test   al,0x10
c001edba:	74 02                	je     c001edbe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001edbc:	b3 15                	mov    bl,0x15
c001edbe:	a8 20                	test   al,0x20
c001edc0:	74 02                	je     c001edc4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001edc2:	b3 03                	mov    bl,0x3
c001edc4:	a8 40                	test   al,0x40
c001edc6:	74 02                	je     c001edca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001edc8:	b3 16                	mov    bl,0x16
c001edca:	a8 80                	test   al,0x80
c001edcc:	74 18                	je     c001ede6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001edce:	b3 0d                	mov    bl,0xd
c001edd0:	eb 14                	jmp    c001ede6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001edd2:	83 ff 03             	cmp    edi,0x3
c001edd5:	74 0d                	je     c001ede4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001edd7:	83 ff 04             	cmp    edi,0x4
c001edda:	75 0a                	jne    c001ede6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001eddc:	b3 08                	mov    bl,0x8
c001edde:	eb 06                	jmp    c001ede6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ede0:	b3 13                	mov    bl,0x13
c001ede2:	eb 02                	jmp    c001ede6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ede4:	b3 17                	mov    bl,0x17
c001ede6:	83 c4 1c             	add    esp,0x1c
c001ede9:	88 d8                	mov    al,bl
c001edeb:	5b                   	pop    ebx
c001edec:	5e                   	pop    esi
c001eded:	5f                   	pop    edi
c001edee:	5d                   	pop    ebp
c001edef:	c3                   	ret    

c001edf0 <IDE::polling(unsigned char, unsigned int)>:
c001edf0:	57                   	push   edi
c001edf1:	56                   	push   esi
c001edf2:	53                   	push   ebx
c001edf3:	bb 04 00 00 00       	mov    ebx,0x4
c001edf8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001edfc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ee01:	52                   	push   edx
c001ee02:	6a 0c                	push   0xc
c001ee04:	56                   	push   esi
c001ee05:	57                   	push   edi
c001ee06:	e8 05 f3 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001ee0b:	83 c4 10             	add    esp,0x10
c001ee0e:	4b                   	dec    ebx
c001ee0f:	75 f0                	jne    c001ee01 <IDE::polling(unsigned char, unsigned int)+0x11>
c001ee11:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ee16:	50                   	push   eax
c001ee17:	6a 0c                	push   0xc
c001ee19:	56                   	push   esi
c001ee1a:	57                   	push   edi
c001ee1b:	e8 f0 f2 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001ee20:	83 c4 10             	add    esp,0x10
c001ee23:	a8 01                	test   al,0x1
c001ee25:	75 17                	jne    c001ee3e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ee27:	a8 20                	test   al,0x20
c001ee29:	75 0f                	jne    c001ee3a <IDE::polling(unsigned char, unsigned int)+0x4a>
c001ee2b:	4b                   	dec    ebx
c001ee2c:	74 10                	je     c001ee3e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ee2e:	a8 80                	test   al,0x80
c001ee30:	75 e4                	jne    c001ee16 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ee32:	a8 08                	test   al,0x8
c001ee34:	74 e0                	je     c001ee16 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ee36:	31 c0                	xor    eax,eax
c001ee38:	eb 06                	jmp    c001ee40 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ee3a:	b0 01                	mov    al,0x1
c001ee3c:	eb 02                	jmp    c001ee40 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ee3e:	b0 02                	mov    al,0x2
c001ee40:	5b                   	pop    ebx
c001ee41:	5e                   	pop    esi
c001ee42:	5f                   	pop    edi
c001ee43:	c3                   	ret    

c001ee44 <SATABus::close(int, int, void*)>:
c001ee44:	31 c0                	xor    eax,eax
c001ee46:	c3                   	ret    
c001ee47:	90                   	nop

c001ee48 <SATABus::detect()>:
c001ee48:	c3                   	ret    
c001ee49:	90                   	nop

c001ee4a <SATABus::SATABus()>:
c001ee4a:	83 ec 0c             	sub    esp,0xc
c001ee4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee51:	83 ec 08             	sub    esp,0x8
c001ee54:	68 e8 5a 02 c0       	push   0xc0025ae8
c001ee59:	50                   	push   eax
c001ee5a:	e8 95 ae fe ff       	call   c0009cf4 <HardDiskController::HardDiskController(char const*)>
c001ee5f:	83 c4 10             	add    esp,0x10
c001ee62:	ba 14 5b 02 c0       	mov    edx,0xc0025b14
c001ee67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee6b:	89 10                	mov    DWORD PTR [eax],edx
c001ee6d:	83 ec 0c             	sub    esp,0xc
c001ee70:	6a 50                	push   0x50
c001ee72:	e8 8b 12 ff ff       	call   c0010102 <Phys::allocateContiguousPages(int)>
c001ee77:	83 c4 10             	add    esp,0x10
c001ee7a:	89 c2                	mov    edx,eax
c001ee7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee80:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee86:	83 ec 0c             	sub    esp,0xc
c001ee89:	6a 50                	push   0x50
c001ee8b:	e8 55 44 ff ff       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c001ee90:	83 c4 10             	add    esp,0x10
c001ee93:	89 c2                	mov    edx,eax
c001ee95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee99:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee9f:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001eea4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eea8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001eeae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eeb2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001eeb8:	83 ec 0c             	sub    esp,0xc
c001eebb:	6a 03                	push   0x3
c001eebd:	6a 50                	push   0x50
c001eebf:	51                   	push   ecx
c001eec0:	52                   	push   edx
c001eec1:	50                   	push   eax
c001eec2:	e8 f1 4c ff ff       	call   c0013bb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eec7:	83 c4 20             	add    esp,0x20
c001eeca:	90                   	nop
c001eecb:	83 c4 0c             	add    esp,0xc
c001eece:	c3                   	ret    
c001eecf:	90                   	nop

c001eed0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001eed0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eed4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001eed7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001eeda:	09 c2                	or     edx,eax
c001eedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eee0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eee6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001eee8:	31 c0                	xor    eax,eax
c001eeea:	c1 e9 08             	shr    ecx,0x8
c001eeed:	83 e1 0f             	and    ecx,0xf
c001eef0:	39 c8                	cmp    eax,ecx
c001eef2:	74 0a                	je     c001eefe <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001eef4:	f6 c2 01             	test   dl,0x1
c001eef7:	74 08                	je     c001ef01 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001eef9:	d1 ea                	shr    edx,1
c001eefb:	40                   	inc    eax
c001eefc:	eb f2                	jmp    c001eef0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001eefe:	83 c8 ff             	or     eax,0xffffffff
c001ef01:	c3                   	ret    

c001ef02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ef02:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ef06:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ef09:	89 c2                	mov    edx,eax
c001ef0b:	c1 ea 08             	shr    edx,0x8
c001ef0e:	83 e2 0f             	and    edx,0xf
c001ef11:	4a                   	dec    edx
c001ef12:	75 32                	jne    c001ef46 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ef14:	83 e0 0f             	and    eax,0xf
c001ef17:	83 f8 03             	cmp    eax,0x3
c001ef1a:	75 2a                	jne    c001ef46 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ef1c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ef1f:	b8 02 00 00 00       	mov    eax,0x2
c001ef24:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ef2a:	74 1c                	je     c001ef48 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ef2c:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ef32:	b8 04 00 00 00       	mov    eax,0x4
c001ef37:	74 0f                	je     c001ef48 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ef39:	31 c0                	xor    eax,eax
c001ef3b:	83 fa 03             	cmp    edx,0x3
c001ef3e:	0f 94 c0             	sete   al
c001ef41:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ef45:	c3                   	ret    
c001ef46:	31 c0                	xor    eax,eax
c001ef48:	c3                   	ret    
c001ef49:	90                   	nop

c001ef4a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ef4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef4e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef51:	0f ba e2 0f          	bt     edx,0xf
c001ef55:	72 f7                	jb     c001ef4e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ef57:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef5a:	83 ca 10             	or     edx,0x10
c001ef5d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef63:	83 ca 01             	or     edx,0x1
c001ef66:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef69:	c3                   	ret    

c001ef6a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001ef6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef6e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef71:	83 e2 fe             	and    edx,0xfffffffe
c001ef74:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef77:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef7a:	83 e2 ef             	and    edx,0xffffffef
c001ef7d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ef80:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef83:	0f ba e2 0e          	bt     edx,0xe
c001ef87:	72 f7                	jb     c001ef80 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ef89:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ef8c:	0f ba e2 0f          	bt     edx,0xf
c001ef90:	72 ee                	jb     c001ef80 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ef92:	c3                   	ret    
c001ef93:	90                   	nop

c001ef94 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ef94:	55                   	push   ebp
c001ef95:	57                   	push   edi
c001ef96:	56                   	push   esi
c001ef97:	53                   	push   ebx
c001ef98:	83 ec 1c             	sub    esp,0x1c
c001ef9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef9f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001efa3:	53                   	push   ebx
c001efa4:	57                   	push   edi
c001efa5:	e8 c0 ff ff ff       	call   c001ef6a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001efaa:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001efae:	83 ec 0c             	sub    esp,0xc
c001efb1:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001efb7:	c1 e5 0a             	shl    ebp,0xa
c001efba:	01 e8                	add    eax,ebp
c001efbc:	89 03                	mov    DWORD PTR [ebx],eax
c001efbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001efc0:	68 00 04 00 00       	push   0x400
c001efc5:	6a 00                	push   0x0
c001efc7:	50                   	push   eax
c001efc8:	e8 23 15 fe ff       	call   c00004f0 <memset>
c001efcd:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001efd3:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001efd7:	83 c4 1c             	add    esp,0x1c
c001efda:	01 e8                	add    eax,ebp
c001efdc:	89 03                	mov    DWORD PTR [ebx],eax
c001efde:	c1 e6 08             	shl    esi,0x8
c001efe1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001efe8:	81 c6 00 80 00 00    	add    esi,0x8000
c001efee:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001eff4:	01 f0                	add    eax,esi
c001eff6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001eff9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001effc:	68 00 01 00 00       	push   0x100
c001f001:	6a 00                	push   0x0
c001f003:	50                   	push   eax
c001f004:	e8 e7 14 fe ff       	call   c00004f0 <memset>
c001f009:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f00f:	31 d2                	xor    edx,edx
c001f011:	01 f0                	add    eax,esi
c001f013:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f016:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f01d:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001f023:	01 ee                	add    esi,ebp
c001f025:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f029:	83 c4 10             	add    esp,0x10
c001f02c:	c1 e5 0d             	shl    ebp,0xd
c001f02f:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001f035:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001f03b:	83 c6 20             	add    esi,0x20
c001f03e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f042:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f048:	01 e8                	add    eax,ebp
c001f04a:	01 d0                	add    eax,edx
c001f04c:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001f04f:	52                   	push   edx
c001f050:	68 00 01 00 00       	push   0x100
c001f055:	6a 00                	push   0x0
c001f057:	50                   	push   eax
c001f058:	e8 93 14 fe ff       	call   c00004f0 <memset>
c001f05d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f063:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001f06a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f06e:	83 c4 10             	add    esp,0x10
c001f071:	01 e8                	add    eax,ebp
c001f073:	01 d0                	add    eax,edx
c001f075:	81 c2 00 01 00 00    	add    edx,0x100
c001f07b:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001f07e:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001f084:	75 af                	jne    c001f035 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001f086:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f08d:	50                   	push   eax
c001f08e:	50                   	push   eax
c001f08f:	53                   	push   ebx
c001f090:	57                   	push   edi
c001f091:	e8 b4 fe ff ff       	call   c001ef4a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f096:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f09d:	83 c4 2c             	add    esp,0x2c
c001f0a0:	5b                   	pop    ebx
c001f0a1:	5e                   	pop    esi
c001f0a2:	5f                   	pop    edi
c001f0a3:	5d                   	pop    ebp
c001f0a4:	c3                   	ret    
c001f0a5:	90                   	nop

c001f0a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f0a6:	55                   	push   ebp
c001f0a7:	57                   	push   edi
c001f0a8:	56                   	push   esi
c001f0a9:	53                   	push   ebx
c001f0aa:	31 db                	xor    ebx,ebx
c001f0ac:	83 ec 0c             	sub    esp,0xc
c001f0af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f0b3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f0b7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f0ba:	f7 c7 01 00 00 00    	test   edi,0x1
c001f0c0:	74 7a                	je     c001f13c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f0c2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f0c6:	89 d8                	mov    eax,ebx
c001f0c8:	c1 e0 07             	shl    eax,0x7
c001f0cb:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f0d2:	55                   	push   ebp
c001f0d3:	56                   	push   esi
c001f0d4:	e8 29 fe ff ff       	call   c001ef02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f0d9:	5a                   	pop    edx
c001f0da:	59                   	pop    ecx
c001f0db:	83 f8 01             	cmp    eax,0x1
c001f0de:	75 21                	jne    c001f101 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f0e0:	50                   	push   eax
c001f0e1:	53                   	push   ebx
c001f0e2:	55                   	push   ebp
c001f0e3:	56                   	push   esi
c001f0e4:	e8 ab fe ff ff       	call   c001ef94 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f0e9:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001f0f0:	e8 ef 09 ff ff       	call   c000fae4 <malloc>
c001f0f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f0f8:	89 c5                	mov    ebp,eax
c001f0fa:	e8 37 0f 00 00       	call   c0020036 <SATA::SATA()>
c001f0ff:	eb 24                	jmp    c001f125 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001f101:	83 f8 04             	cmp    eax,0x4
c001f104:	75 36                	jne    c001f13c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f106:	51                   	push   ecx
c001f107:	53                   	push   ebx
c001f108:	55                   	push   ebp
c001f109:	56                   	push   esi
c001f10a:	e8 85 fe ff ff       	call   c001ef94 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f10f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f116:	e8 c9 09 ff ff       	call   c000fae4 <malloc>
c001f11b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f11e:	89 c5                	mov    ebp,eax
c001f120:	e8 a7 12 00 00       	call   c00203cc <SATAPI::SATAPI()>
c001f125:	58                   	pop    eax
c001f126:	5a                   	pop    edx
c001f127:	55                   	push   ebp
c001f128:	56                   	push   esi
c001f129:	e8 6c a8 fe ff       	call   c000999a <Device::addChild(Device*)>
c001f12e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001f131:	56                   	push   esi
c001f132:	6a 00                	push   0x0
c001f134:	53                   	push   ebx
c001f135:	55                   	push   ebp
c001f136:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001f139:	83 c4 20             	add    esp,0x20
c001f13c:	d1 ef                	shr    edi,1
c001f13e:	43                   	inc    ebx
c001f13f:	83 fb 20             	cmp    ebx,0x20
c001f142:	0f 85 72 ff ff ff    	jne    c001f0ba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001f148:	83 c4 0c             	add    esp,0xc
c001f14b:	5b                   	pop    ebx
c001f14c:	5e                   	pop    esi
c001f14d:	5f                   	pop    edi
c001f14e:	5d                   	pop    ebp
c001f14f:	c3                   	ret    

c001f150 <SATABus::open(int, int, void*)>:
c001f150:	53                   	push   ebx
c001f151:	83 ec 08             	sub    esp,0x8
c001f154:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f158:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f15e:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f164:	e8 5f 79 ff ff       	call   c0016ac8 <KeDisablePreemption()>
c001f169:	52                   	push   edx
c001f16a:	52                   	push   edx
c001f16b:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f171:	53                   	push   ebx
c001f172:	e8 2f ff ff ff       	call   c001f0a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f177:	e8 74 79 ff ff       	call   c0016af0 <KeRestorePreemption()>
c001f17c:	83 c4 18             	add    esp,0x18
c001f17f:	31 c0                	xor    eax,eax
c001f181:	5b                   	pop    ebx
c001f182:	c3                   	ret    
c001f183:	90                   	nop

c001f184 <ATA::close(int, int, void*)>:
c001f184:	83 ec 0c             	sub    esp,0xc
c001f187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f18b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f191:	85 c0                	test   eax,eax
c001f193:	74 0c                	je     c001f1a1 <ATA::close(int, int, void*)+0x1d>
c001f195:	8b 10                	mov    edx,DWORD PTR [eax]
c001f197:	83 ec 0c             	sub    esp,0xc
c001f19a:	50                   	push   eax
c001f19b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f19e:	83 c4 10             	add    esp,0x10
c001f1a1:	31 c0                	xor    eax,eax
c001f1a3:	83 c4 0c             	add    esp,0xc
c001f1a6:	c3                   	ret    
c001f1a7:	90                   	nop

c001f1a8 <ATA::powerSaving(PowerSavingLevel)>:
c001f1a8:	c3                   	ret    
c001f1a9:	90                   	nop

c001f1aa <ATA::ATA()>:
c001f1aa:	83 ec 0c             	sub    esp,0xc
c001f1ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1b1:	83 ec 04             	sub    esp,0x4
c001f1b4:	68 00 02 00 00       	push   0x200
c001f1b9:	68 95 5c 02 c0       	push   0xc0025c95
c001f1be:	50                   	push   eax
c001f1bf:	e8 ba ab fe ff       	call   c0009d7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f1c4:	83 c4 10             	add    esp,0x10
c001f1c7:	ba fc 5b 02 c0       	mov    edx,0xc0025bfc
c001f1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d0:	89 10                	mov    DWORD PTR [eax],edx
c001f1d2:	90                   	nop
c001f1d3:	83 c4 0c             	add    esp,0xc
c001f1d6:	c3                   	ret    
c001f1d7:	90                   	nop

c001f1d8 <ATA::flush(bool)>:
c001f1d8:	53                   	push   ebx
c001f1d9:	83 ec 08             	sub    esp,0x8
c001f1dc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f1e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f1e5:	83 f8 01             	cmp    eax,0x1
c001f1e8:	19 c0                	sbb    eax,eax
c001f1ea:	83 e0 fd             	and    eax,0xfffffffd
c001f1ed:	05 ea 00 00 00       	add    eax,0xea
c001f1f2:	50                   	push   eax
c001f1f3:	6a 07                	push   0x7
c001f1f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f1fc:	50                   	push   eax
c001f1fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f203:	e8 48 ee ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f208:	83 c4 0c             	add    esp,0xc
c001f20b:	6a 00                	push   0x0
c001f20d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f214:	50                   	push   eax
c001f215:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f21b:	e8 d0 fb ff ff       	call   c001edf0 <IDE::polling(unsigned char, unsigned int)>
c001f220:	83 c4 18             	add    esp,0x18
c001f223:	5b                   	pop    ebx
c001f224:	c3                   	ret    
c001f225:	90                   	nop

c001f226 <ATA::readyForCommand()>:
c001f226:	56                   	push   esi
c001f227:	53                   	push   ebx
c001f228:	31 db                	xor    ebx,ebx
c001f22a:	50                   	push   eax
c001f22b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f22f:	50                   	push   eax
c001f230:	6a 0c                	push   0xc
c001f232:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f239:	50                   	push   eax
c001f23a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f240:	e8 cb ee ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001f245:	83 c4 10             	add    esp,0x10
c001f248:	a8 88                	test   al,0x88
c001f24a:	74 20                	je     c001f26c <ATA::readyForCommand()+0x46>
c001f24c:	43                   	inc    ebx
c001f24d:	83 fb 63             	cmp    ebx,0x63
c001f250:	7e dd                	jle    c001f22f <ATA::readyForCommand()+0x9>
c001f252:	51                   	push   ecx
c001f253:	51                   	push   ecx
c001f254:	6a 00                	push   0x0
c001f256:	6a 0a                	push   0xa
c001f258:	e8 27 7d ff ff       	call   c0016f84 <milliTenthSleep(unsigned long long)>
c001f25d:	83 c4 10             	add    esp,0x10
c001f260:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f266:	75 c7                	jne    c001f22f <ATA::readyForCommand()+0x9>
c001f268:	31 c0                	xor    eax,eax
c001f26a:	eb 02                	jmp    c001f26e <ATA::readyForCommand()+0x48>
c001f26c:	b0 01                	mov    al,0x1
c001f26e:	5a                   	pop    edx
c001f26f:	5b                   	pop    ebx
c001f270:	5e                   	pop    esi
c001f271:	c3                   	ret    

c001f272 <ATA::access(unsigned long long, int, void*, bool)>:
c001f272:	55                   	push   ebp
c001f273:	57                   	push   edi
c001f274:	56                   	push   esi
c001f275:	53                   	push   ebx
c001f276:	83 ec 2c             	sub    esp,0x2c
c001f279:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f27d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f281:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f285:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f289:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f28d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f291:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001f295:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f29b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f29f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f2a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2a9:	c1 e0 06             	shl    eax,0x6
c001f2ac:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f2b4:	74 5b                	je     c001f311 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001f2b6:	89 fa                	mov    edx,edi
c001f2b8:	89 f0                	mov    eax,esi
c001f2ba:	c1 ea 1c             	shr    edx,0x1c
c001f2bd:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001f2c1:	89 d1                	mov    ecx,edx
c001f2c3:	09 c1                	or     ecx,eax
c001f2c5:	74 25                	je     c001f2ec <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001f2c7:	31 ed                	xor    ebp,ebp
c001f2c9:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f2d0:	89 fa                	mov    edx,edi
c001f2d2:	89 f0                	mov    eax,esi
c001f2d4:	0f ad d0             	shrd   eax,edx,cl
c001f2d7:	d3 ea                	shr    edx,cl
c001f2d9:	f6 c1 20             	test   cl,0x20
c001f2dc:	74 02                	je     c001f2e0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001f2de:	89 d0                	mov    eax,edx
c001f2e0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f2e4:	45                   	inc    ebp
c001f2e5:	83 fd 06             	cmp    ebp,0x6
c001f2e8:	75 df                	jne    c001f2c9 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001f2ea:	eb 71                	jmp    c001f35d <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001f2ec:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f2f1:	89 f0                	mov    eax,esi
c001f2f3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f2fa:	0f ac f8 10          	shrd   eax,edi,0x10
c001f2fe:	bf 01 00 00 00       	mov    edi,0x1
c001f303:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f307:	c1 ee 18             	shr    esi,0x18
c001f30a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f30f:	eb 53                	jmp    c001f364 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001f311:	6a 00                	push   0x0
c001f313:	6a 3f                	push   0x3f
c001f315:	57                   	push   edi
c001f316:	56                   	push   esi
c001f317:	e8 18 25 00 00       	call   c0021834 <__umoddi3>
c001f31c:	83 c4 10             	add    esp,0x10
c001f31f:	40                   	inc    eax
c001f320:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f324:	6a 00                	push   0x0
c001f326:	68 f0 03 00 00       	push   0x3f0
c001f32b:	57                   	push   edi
c001f32c:	56                   	push   esi
c001f32d:	e8 02 24 00 00       	call   c0021734 <__udivdi3>
c001f332:	83 c4 10             	add    esp,0x10
c001f335:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f33a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f341:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f346:	6a 00                	push   0x0
c001f348:	6a 3f                	push   0x3f
c001f34a:	57                   	push   edi
c001f34b:	31 ff                	xor    edi,edi
c001f34d:	56                   	push   esi
c001f34e:	e8 e1 23 00 00       	call   c0021734 <__udivdi3>
c001f353:	83 c4 10             	add    esp,0x10
c001f356:	83 e0 0f             	and    eax,0xf
c001f359:	89 c6                	mov    esi,eax
c001f35b:	eb 07                	jmp    c001f364 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001f35d:	31 f6                	xor    esi,esi
c001f35f:	bf 02 00 00 00       	mov    edi,0x2
c001f364:	55                   	push   ebp
c001f365:	6a 00                	push   0x0
c001f367:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f36e:	50                   	push   eax
c001f36f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f373:	e8 e8 ee ff ff       	call   c001e260 <IDE::enableIRQs(unsigned char, bool)>
c001f378:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f37b:	e8 a6 fe ff ff       	call   c001f226 <ATA::readyForCommand()>
c001f380:	83 c4 10             	add    esp,0x10
c001f383:	84 c0                	test   al,al
c001f385:	75 0a                	jne    c001f391 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001f387:	be 01 00 00 00       	mov    esi,0x1
c001f38c:	e9 df 02 00 00       	jmp    c001f670 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001f391:	fa                   	cli    
c001f392:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f398:	f7 c7 03 00 00 00    	test   edi,0x3
c001f39e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f3a4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f3aa:	75 0a                	jne    c001f3b6 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001f3ac:	c1 e0 04             	shl    eax,0x4
c001f3af:	09 c6                	or     esi,eax
c001f3b1:	83 ce a0             	or     esi,0xffffffa0
c001f3b4:	eb 08                	jmp    c001f3be <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001f3b6:	c1 e0 04             	shl    eax,0x4
c001f3b9:	09 c6                	or     esi,eax
c001f3bb:	83 ce e0             	or     esi,0xffffffe0
c001f3be:	89 f0                	mov    eax,esi
c001f3c0:	0f b6 d2             	movzx  edx,dl
c001f3c3:	0f b6 f0             	movzx  esi,al
c001f3c6:	56                   	push   esi
c001f3c7:	6a 06                	push   0x6
c001f3c9:	52                   	push   edx
c001f3ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f3d0:	e8 7b ec ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3d5:	83 c4 10             	add    esp,0x10
c001f3d8:	6a 00                	push   0x0
c001f3da:	6a 01                	push   0x1
c001f3dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f3e3:	50                   	push   eax
c001f3e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f3ea:	e8 61 ec ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3ef:	89 f8                	mov    eax,edi
c001f3f1:	83 c4 10             	add    esp,0x10
c001f3f4:	0f b6 f0             	movzx  esi,al
c001f3f7:	83 fe 02             	cmp    esi,0x2
c001f3fa:	75 6e                	jne    c001f46a <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f3fc:	6a 00                	push   0x0
c001f3fe:	6a 08                	push   0x8
c001f400:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f407:	50                   	push   eax
c001f408:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f40e:	e8 3d ec ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f413:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f418:	50                   	push   eax
c001f419:	6a 09                	push   0x9
c001f41b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f422:	50                   	push   eax
c001f423:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f429:	e8 22 ec ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f42e:	83 c4 20             	add    esp,0x20
c001f431:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f436:	50                   	push   eax
c001f437:	6a 0a                	push   0xa
c001f439:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f440:	50                   	push   eax
c001f441:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f447:	e8 04 ec ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f44c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f451:	50                   	push   eax
c001f452:	6a 0b                	push   0xb
c001f454:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f45b:	50                   	push   eax
c001f45c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f462:	e8 e9 eb ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f467:	83 c4 20             	add    esp,0x20
c001f46a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f46f:	50                   	push   eax
c001f470:	6a 02                	push   0x2
c001f472:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f479:	50                   	push   eax
c001f47a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f480:	e8 cb eb ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f485:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f48a:	50                   	push   eax
c001f48b:	6a 03                	push   0x3
c001f48d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f494:	50                   	push   eax
c001f495:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f49b:	e8 b0 eb ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4a0:	83 c4 20             	add    esp,0x20
c001f4a3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f4a8:	50                   	push   eax
c001f4a9:	6a 04                	push   0x4
c001f4ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4b2:	50                   	push   eax
c001f4b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4b9:	e8 92 eb ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4be:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f4c3:	50                   	push   eax
c001f4c4:	6a 05                	push   0x5
c001f4c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4cd:	50                   	push   eax
c001f4ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4d4:	e8 77 eb ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4d9:	83 c4 20             	add    esp,0x20
c001f4dc:	83 fe 02             	cmp    esi,0x2
c001f4df:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001f4e4:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001f4e9:	85 c9                	test   ecx,ecx
c001f4eb:	74 07                	je     c001f4f4 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f4ed:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f4f2:	75 45                	jne    c001f539 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001f4f4:	89 f8                	mov    eax,edi
c001f4f6:	0f b6 f8             	movzx  edi,al
c001f4f9:	31 c0                	xor    eax,eax
c001f4fb:	4f                   	dec    edi
c001f4fc:	0f 94 c0             	sete   al
c001f4ff:	89 c6                	mov    esi,eax
c001f501:	75 0c                	jne    c001f50f <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001f503:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f508:	b8 30 00 00 00       	mov    eax,0x30
c001f50d:	75 2f                	jne    c001f53e <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001f50f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f513:	83 f2 01             	xor    edx,0x1
c001f516:	85 c9                	test   ecx,ecx
c001f518:	74 09                	je     c001f523 <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001f51a:	84 d2                	test   dl,dl
c001f51c:	b8 24 00 00 00       	mov    eax,0x24
c001f521:	75 1b                	jne    c001f53e <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001f523:	85 f6                	test   esi,esi
c001f525:	0f 84 5c fe ff ff    	je     c001f387 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001f52b:	84 d2                	test   dl,dl
c001f52d:	b8 20 00 00 00       	mov    eax,0x20
c001f532:	75 0a                	jne    c001f53e <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001f534:	e9 4e fe ff ff       	jmp    c001f387 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001f539:	b8 34 00 00 00       	mov    eax,0x34
c001f53e:	50                   	push   eax
c001f53f:	6a 07                	push   0x7
c001f541:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f548:	50                   	push   eax
c001f549:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f54f:	e8 fc ea ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f554:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f55b:	83 c4 10             	add    esp,0x10
c001f55e:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f565:	75 01                	jne    c001f568 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001f567:	fb                   	sti    
c001f568:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001f56c:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001f571:	85 f6                	test   esi,esi
c001f573:	0f 84 dd 00 00 00    	je     c001f656 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f579:	57                   	push   edi
c001f57a:	6a 01                	push   0x1
c001f57c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f583:	50                   	push   eax
c001f584:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f58a:	e8 61 f8 ff ff       	call   c001edf0 <IDE::polling(unsigned char, unsigned int)>
c001f58f:	83 c4 10             	add    esp,0x10
c001f592:	0f b6 c0             	movzx  eax,al
c001f595:	85 c0                	test   eax,eax
c001f597:	74 23                	je     c001f5bc <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001f599:	50                   	push   eax
c001f59a:	89 c6                	mov    esi,eax
c001f59c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f5a3:	50                   	push   eax
c001f5a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5ab:	50                   	push   eax
c001f5ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5b2:	e8 7f f7 ff ff       	call   c001ed36 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f5b7:	e9 b1 00 00 00       	jmp    c001f66d <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001f5bc:	85 ed                	test   ebp,ebp
c001f5be:	74 49                	je     c001f609 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001f5c0:	fa                   	cli    
c001f5c1:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f5c7:	31 ff                	xor    edi,edi
c001f5c9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f5cd:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001f5d1:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001f5d6:	51                   	push   ecx
c001f5d7:	51                   	push   ecx
c001f5d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5df:	50                   	push   eax
c001f5e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5e6:	e8 53 ea ff ff       	call   c001e03e <IDE::getBase(unsigned char)>
c001f5eb:	89 c2                	mov    edx,eax
c001f5ed:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001f5f2:	66 ef                	out    dx,ax
c001f5f4:	47                   	inc    edi
c001f5f5:	83 c4 10             	add    esp,0x10
c001f5f8:	81 ff 00 01 00 00    	cmp    edi,0x100
c001f5fe:	75 c9                	jne    c001f5c9 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001f600:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f607:	eb 35                	jmp    c001f63e <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001f609:	fa                   	cli    
c001f60a:	52                   	push   edx
c001f60b:	52                   	push   edx
c001f60c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f613:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f619:	50                   	push   eax
c001f61a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f620:	e8 19 ea ff ff       	call   c001e03e <IDE::getBase(unsigned char)>
c001f625:	b9 00 01 00 00       	mov    ecx,0x100
c001f62a:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f62e:	89 c2                	mov    edx,eax
c001f630:	fc                   	cld    
c001f631:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f634:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f63b:	83 c4 10             	add    esp,0x10
c001f63e:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f645:	75 01                	jne    c001f648 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001f647:	fb                   	sti    
c001f648:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f650:	4e                   	dec    esi
c001f651:	e9 1b ff ff ff       	jmp    c001f571 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001f656:	31 f6                	xor    esi,esi
c001f658:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f65d:	74 11                	je     c001f670 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001f65f:	50                   	push   eax
c001f660:	50                   	push   eax
c001f661:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001f666:	50                   	push   eax
c001f667:	53                   	push   ebx
c001f668:	e8 6b fb ff ff       	call   c001f1d8 <ATA::flush(bool)>
c001f66d:	83 c4 10             	add    esp,0x10
c001f670:	83 c4 2c             	add    esp,0x2c
c001f673:	89 f0                	mov    eax,esi
c001f675:	5b                   	pop    ebx
c001f676:	5e                   	pop    esi
c001f677:	5f                   	pop    edi
c001f678:	5d                   	pop    ebp
c001f679:	c3                   	ret    

c001f67a <ATA::read(unsigned long long, int, void*)>:
c001f67a:	57                   	push   edi
c001f67b:	b8 04 00 00 00       	mov    eax,0x4
c001f680:	56                   	push   esi
c001f681:	53                   	push   ebx
c001f682:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f686:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f68a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f68e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f692:	8d 7a ff             	lea    edi,[edx-0x1]
c001f695:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f69b:	77 25                	ja     c001f6c2 <ATA::read(unsigned long long, int, void*)+0x48>
c001f69d:	85 f6                	test   esi,esi
c001f69f:	b8 06 00 00 00       	mov    eax,0x6
c001f6a4:	74 1c                	je     c001f6c2 <ATA::read(unsigned long long, int, void*)+0x48>
c001f6a6:	50                   	push   eax
c001f6a7:	50                   	push   eax
c001f6a8:	6a 00                	push   0x0
c001f6aa:	56                   	push   esi
c001f6ab:	52                   	push   edx
c001f6ac:	53                   	push   ebx
c001f6ad:	51                   	push   ecx
c001f6ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f6b2:	e8 bb fb ff ff       	call   c001f272 <ATA::access(unsigned long long, int, void*, bool)>
c001f6b7:	83 c4 20             	add    esp,0x20
c001f6ba:	85 c0                	test   eax,eax
c001f6bc:	0f 95 c0             	setne  al
c001f6bf:	0f b6 c0             	movzx  eax,al
c001f6c2:	5b                   	pop    ebx
c001f6c3:	5e                   	pop    esi
c001f6c4:	5f                   	pop    edi
c001f6c5:	c3                   	ret    

c001f6c6 <ATA::write(unsigned long long, int, void*)>:
c001f6c6:	57                   	push   edi
c001f6c7:	b8 04 00 00 00       	mov    eax,0x4
c001f6cc:	56                   	push   esi
c001f6cd:	53                   	push   ebx
c001f6ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f6d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f6d6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f6da:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f6de:	8d 7a ff             	lea    edi,[edx-0x1]
c001f6e1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f6e7:	77 25                	ja     c001f70e <ATA::write(unsigned long long, int, void*)+0x48>
c001f6e9:	85 f6                	test   esi,esi
c001f6eb:	b8 06 00 00 00       	mov    eax,0x6
c001f6f0:	74 1c                	je     c001f70e <ATA::write(unsigned long long, int, void*)+0x48>
c001f6f2:	50                   	push   eax
c001f6f3:	50                   	push   eax
c001f6f4:	6a 01                	push   0x1
c001f6f6:	56                   	push   esi
c001f6f7:	52                   	push   edx
c001f6f8:	53                   	push   ebx
c001f6f9:	51                   	push   ecx
c001f6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f6fe:	e8 6f fb ff ff       	call   c001f272 <ATA::access(unsigned long long, int, void*, bool)>
c001f703:	83 c4 20             	add    esp,0x20
c001f706:	85 c0                	test   eax,eax
c001f708:	0f 95 c0             	setne  al
c001f70b:	0f b6 c0             	movzx  eax,al
c001f70e:	5b                   	pop    ebx
c001f70f:	5e                   	pop    esi
c001f710:	5f                   	pop    edi
c001f711:	c3                   	ret    

c001f712 <ATA::detectCHS()>:
c001f712:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f716:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f71c:	c1 e0 06             	shl    eax,0x6
c001f71f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f725:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f72f:	c7 44 24 04 38 5b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025b38
c001f737:	e9 ee 06 ff ff       	jmp    c000fe2a <KePanic(char const*)>

c001f73c <ATA::open(int, int, void*)>:
c001f73c:	53                   	push   ebx
c001f73d:	83 ec 08             	sub    esp,0x8
c001f740:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f744:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f748:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f74c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f752:	c1 e0 06             	shl    eax,0x6
c001f755:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f75b:	01 d0                	add    eax,edx
c001f75d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f764:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f76a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f771:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f77b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f782:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f788:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f78f:	75 0c                	jne    c001f79d <ATA::open(int, int, void*)+0x61>
c001f791:	83 ec 0c             	sub    esp,0xc
c001f794:	53                   	push   ebx
c001f795:	e8 78 ff ff ff       	call   c001f712 <ATA::detectCHS()>
c001f79a:	83 c4 10             	add    esp,0x10
c001f79d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f7a3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f7a9:	c1 e0 06             	shl    eax,0x6
c001f7ac:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f7b3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f7bd:	d1 e8                	shr    eax,1
c001f7bf:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f7c5:	6a 04                	push   0x4
c001f7c7:	6a 0c                	push   0xc
c001f7c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7d0:	50                   	push   eax
c001f7d1:	52                   	push   edx
c001f7d2:	e8 79 e8 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7d7:	90                   	nop
c001f7d8:	90                   	nop
c001f7d9:	6a 00                	push   0x0
c001f7db:	6a 0c                	push   0xc
c001f7dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7e4:	50                   	push   eax
c001f7e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7eb:	e8 60 e8 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7f0:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f7f6:	83 c4 20             	add    esp,0x20
c001f7f9:	c1 e0 06             	shl    eax,0x6
c001f7fc:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001f802:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001f809:	0f 84 00 01 00 00    	je     c001f90f <ATA::open(int, int, void*)+0x1d3>
c001f80f:	83 ec 0c             	sub    esp,0xc
c001f812:	6a 08                	push   0x8
c001f814:	e8 e9 08 ff ff       	call   c0010102 <Phys::allocateContiguousPages(int)>
c001f819:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f81f:	c7 04 24 4a 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b4a
c001f826:	e8 23 77 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f82b:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001f832:	e8 ae 3a ff ff       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c001f837:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001f83d:	6a 03                	push   0x3
c001f83f:	50                   	push   eax
c001f840:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001f846:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001f84c:	e8 6d 41 ff ff       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c001f851:	83 c4 20             	add    esp,0x20
c001f854:	e8 cb 07 ff ff       	call   c0010024 <Phys::allocatePage()>
c001f859:	83 ec 0c             	sub    esp,0xc
c001f85c:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001f862:	6a 01                	push   0x1
c001f864:	e8 7c 3a ff ff       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c001f869:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001f86f:	6a 03                	push   0x3
c001f871:	50                   	push   eax
c001f872:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001f878:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001f87e:	e8 3b 41 ff ff       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c001f883:	83 c4 14             	add    esp,0x14
c001f886:	68 83 5b 02 c0       	push   0xc0025b83
c001f88b:	e8 be 76 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f890:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001f897:	50                   	push   eax
c001f898:	6a 12                	push   0x12
c001f89a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8a1:	50                   	push   eax
c001f8a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8a8:	e8 a3 e7 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8ad:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001f8b3:	83 c4 20             	add    esp,0x20
c001f8b6:	0f b6 c4             	movzx  eax,ah
c001f8b9:	50                   	push   eax
c001f8ba:	6a 13                	push   0x13
c001f8bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8c3:	50                   	push   eax
c001f8c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8ca:	e8 81 e7 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8cf:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001f8d6:	50                   	push   eax
c001f8d7:	6a 14                	push   0x14
c001f8d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8e0:	50                   	push   eax
c001f8e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8e7:	e8 64 e7 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8ec:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001f8f3:	83 c4 20             	add    esp,0x20
c001f8f6:	50                   	push   eax
c001f8f7:	6a 15                	push   0x15
c001f8f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f900:	50                   	push   eax
c001f901:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f907:	e8 44 e7 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f90c:	83 c4 10             	add    esp,0x10
c001f90f:	83 ec 0c             	sub    esp,0xc
c001f912:	53                   	push   ebx
c001f913:	e8 ce a4 fe ff       	call   c0009de6 <PhysicalDisk::startCache()>
c001f918:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f91b:	e8 66 b3 fe ff       	call   c000ac86 <createPartitionsForDisk(PhysicalDisk*)>
c001f920:	83 c4 18             	add    esp,0x18
c001f923:	31 c0                	xor    eax,eax
c001f925:	5b                   	pop    ebx
c001f926:	c3                   	ret    

c001f927 <combineCharAndColour(char, unsigned char)>:
c001f927:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f92c:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001f932:	c1 e0 08             	shl    eax,0x8
c001f935:	09 d0                	or     eax,edx
c001f937:	c3                   	ret    

c001f938 <combineColours(unsigned char, unsigned char)>:
c001f938:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f93d:	c1 e0 04             	shl    eax,0x4
c001f940:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001f944:	c3                   	ret    
c001f945:	90                   	nop

c001f946 <ATAPI::write(unsigned long long, int, void*)>:
c001f946:	b8 03 00 00 00       	mov    eax,0x3
c001f94b:	c3                   	ret    

c001f94c <ATAPI::close(int, int, void*)>:
c001f94c:	83 ec 0c             	sub    esp,0xc
c001f94f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f953:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f959:	85 c0                	test   eax,eax
c001f95b:	74 0c                	je     c001f969 <ATAPI::close(int, int, void*)+0x1d>
c001f95d:	8b 10                	mov    edx,DWORD PTR [eax]
c001f95f:	83 ec 0c             	sub    esp,0xc
c001f962:	50                   	push   eax
c001f963:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f966:	83 c4 10             	add    esp,0x10
c001f969:	31 c0                	xor    eax,eax
c001f96b:	83 c4 0c             	add    esp,0xc
c001f96e:	c3                   	ret    
c001f96f:	90                   	nop

c001f970 <ATAPI::ATAPI()>:
c001f970:	83 ec 0c             	sub    esp,0xc
c001f973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f977:	83 ec 04             	sub    esp,0x4
c001f97a:	68 00 08 00 00       	push   0x800
c001f97f:	68 35 5d 02 c0       	push   0xc0025d35
c001f984:	50                   	push   eax
c001f985:	e8 f4 a3 fe ff       	call   c0009d7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f98a:	83 c4 10             	add    esp,0x10
c001f98d:	ba 44 5c 02 c0       	mov    edx,0xc0025c44
c001f992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f996:	89 10                	mov    DWORD PTR [eax],edx
c001f998:	90                   	nop
c001f999:	83 c4 0c             	add    esp,0xc
c001f99c:	c3                   	ret    
c001f99d:	90                   	nop

c001f99e <ATAPI::readyForCommand()>:
c001f99e:	56                   	push   esi
c001f99f:	53                   	push   ebx
c001f9a0:	31 db                	xor    ebx,ebx
c001f9a2:	50                   	push   eax
c001f9a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f9a7:	50                   	push   eax
c001f9a8:	6a 0c                	push   0xc
c001f9aa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f9b1:	50                   	push   eax
c001f9b2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f9b8:	e8 53 e7 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001f9bd:	83 c4 10             	add    esp,0x10
c001f9c0:	a8 88                	test   al,0x88
c001f9c2:	74 26                	je     c001f9ea <ATAPI::readyForCommand()+0x4c>
c001f9c4:	43                   	inc    ebx
c001f9c5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001f9cb:	7e da                	jle    c001f9a7 <ATAPI::readyForCommand()+0x9>
c001f9cd:	51                   	push   ecx
c001f9ce:	51                   	push   ecx
c001f9cf:	6a 00                	push   0x0
c001f9d1:	68 5e 01 00 00       	push   0x15e
c001f9d6:	e8 a9 75 ff ff       	call   c0016f84 <milliTenthSleep(unsigned long long)>
c001f9db:	83 c4 10             	add    esp,0x10
c001f9de:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001f9e4:	75 c1                	jne    c001f9a7 <ATAPI::readyForCommand()+0x9>
c001f9e6:	31 c0                	xor    eax,eax
c001f9e8:	eb 02                	jmp    c001f9ec <ATAPI::readyForCommand()+0x4e>
c001f9ea:	b0 01                	mov    al,0x1
c001f9ec:	5a                   	pop    edx
c001f9ed:	5b                   	pop    ebx
c001f9ee:	5e                   	pop    esi
c001f9ef:	c3                   	ret    

c001f9f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001f9f0:	55                   	push   ebp
c001f9f1:	57                   	push   edi
c001f9f2:	56                   	push   esi
c001f9f3:	53                   	push   ebx
c001f9f4:	83 ec 20             	sub    esp,0x20
c001f9f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f9fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001f9ff:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001fa03:	6a 01                	push   0x1
c001fa05:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa0c:	50                   	push   eax
c001fa0d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa13:	e8 48 e8 ff ff       	call   c001e260 <IDE::enableIRQs(unsigned char, bool)>
c001fa18:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa1f:	59                   	pop    ecx
c001fa20:	5e                   	pop    esi
c001fa21:	50                   	push   eax
c001fa22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa28:	e8 fd e5 ff ff       	call   c001e02a <IDE::prepareInterrupt(unsigned char)>
c001fa2d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fa30:	e8 69 ff ff ff       	call   c001f99e <ATAPI::readyForCommand()>
c001fa35:	83 c4 10             	add    esp,0x10
c001fa38:	84 c0                	test   al,al
c001fa3a:	75 0a                	jne    c001fa46 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001fa3c:	bb 01 00 00 00       	mov    ebx,0x1
c001fa41:	e9 5f 02 00 00       	jmp    c001fca5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fa46:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001fa4c:	c1 e0 04             	shl    eax,0x4
c001fa4f:	0f b6 c0             	movzx  eax,al
c001fa52:	50                   	push   eax
c001fa53:	6a 06                	push   0x6
c001fa55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa5c:	50                   	push   eax
c001fa5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa63:	e8 e8 e5 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa68:	6a 00                	push   0x0
c001fa6a:	6a 01                	push   0x1
c001fa6c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa73:	50                   	push   eax
c001fa74:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa7a:	e8 d1 e5 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa7f:	83 c4 20             	add    esp,0x20
c001fa82:	0f b6 c3             	movzx  eax,bl
c001fa85:	50                   	push   eax
c001fa86:	0f b6 df             	movzx  ebx,bh
c001fa89:	6a 04                	push   0x4
c001fa8b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa92:	50                   	push   eax
c001fa93:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa99:	e8 b2 e5 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa9e:	53                   	push   ebx
c001fa9f:	6a 05                	push   0x5
c001faa1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001faa8:	50                   	push   eax
c001faa9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001faaf:	e8 9c e5 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fab4:	83 c4 20             	add    esp,0x20
c001fab7:	68 a0 00 00 00       	push   0xa0
c001fabc:	6a 07                	push   0x7
c001fabe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fac5:	50                   	push   eax
c001fac6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001facc:	e8 7f e5 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fad1:	83 c4 0c             	add    esp,0xc
c001fad4:	6a 01                	push   0x1
c001fad6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fadd:	50                   	push   eax
c001fade:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fae4:	e8 07 f3 ff ff       	call   c001edf0 <IDE::polling(unsigned char, unsigned int)>
c001fae9:	83 c4 10             	add    esp,0x10
c001faec:	0f b6 d8             	movzx  ebx,al
c001faef:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001faf5:	85 db                	test   ebx,ebx
c001faf7:	74 20                	je     c001fb19 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001faf9:	53                   	push   ebx
c001fafa:	0f b6 c0             	movzx  eax,al
c001fafd:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001fb04:	52                   	push   edx
c001fb05:	50                   	push   eax
c001fb06:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb0c:	e8 25 f2 ff ff       	call   c001ed36 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fb11:	83 c4 10             	add    esp,0x10
c001fb14:	e9 8c 01 00 00       	jmp    c001fca5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fb19:	52                   	push   edx
c001fb1a:	0f b6 c0             	movzx  eax,al
c001fb1d:	52                   	push   edx
c001fb1e:	50                   	push   eax
c001fb1f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb25:	e8 14 e5 ff ff       	call   c001e03e <IDE::getBase(unsigned char)>
c001fb2a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fb2e:	b9 06 00 00 00       	mov    ecx,0x6
c001fb33:	89 c2                	mov    edx,eax
c001fb35:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fb38:	89 e8                	mov    eax,ebp
c001fb3a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fb3e:	83 c4 10             	add    esp,0x10
c001fb41:	0f b6 c0             	movzx  eax,al
c001fb44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb48:	85 db                	test   ebx,ebx
c001fb4a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fb50:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fb57:	0f 84 eb 00 00 00    	je     c001fc48 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001fb5d:	55                   	push   ebp
c001fb5e:	55                   	push   ebp
c001fb5f:	52                   	push   edx
c001fb60:	50                   	push   eax
c001fb61:	e8 5e e6 ff ff       	call   c001e1c4 <IDE::waitInterrupt(unsigned char)>
c001fb66:	83 c4 10             	add    esp,0x10
c001fb69:	84 c0                	test   al,al
c001fb6b:	0f 84 cb fe ff ff    	je     c001fa3c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001fb71:	56                   	push   esi
c001fb72:	56                   	push   esi
c001fb73:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb7a:	50                   	push   eax
c001fb7b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb81:	e8 a4 e4 ff ff       	call   c001e02a <IDE::prepareInterrupt(unsigned char)>
c001fb86:	83 c4 0c             	add    esp,0xc
c001fb89:	6a 04                	push   0x4
c001fb8b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb92:	50                   	push   eax
c001fb93:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb99:	e8 72 e5 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001fb9e:	83 c4 0c             	add    esp,0xc
c001fba1:	6a 05                	push   0x5
c001fba3:	89 c6                	mov    esi,eax
c001fba5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbac:	50                   	push   eax
c001fbad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbb3:	e8 58 e5 ff ff       	call   c001e110 <IDE::read(unsigned char, unsigned char)>
c001fbb8:	83 c4 10             	add    esp,0x10
c001fbbb:	0f b6 e8             	movzx  ebp,al
c001fbbe:	89 f0                	mov    eax,esi
c001fbc0:	c1 e5 08             	shl    ebp,0x8
c001fbc3:	0f b6 f0             	movzx  esi,al
c001fbc6:	09 f5                	or     ebp,esi
c001fbc8:	31 f6                	xor    esi,esi
c001fbca:	d1 fd                	sar    ebp,1
c001fbcc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fbd1:	74 5c                	je     c001fc2f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001fbd3:	39 ee                	cmp    esi,ebp
c001fbd5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fbdb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fbe2:	75 0d                	jne    c001fbf1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001fbe4:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001fbe7:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001fbeb:	4b                   	dec    ebx
c001fbec:	e9 57 ff ff ff       	jmp    c001fb48 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001fbf1:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001fbf5:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001fbf9:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001fbfe:	51                   	push   ecx
c001fbff:	51                   	push   ecx
c001fc00:	52                   	push   edx
c001fc01:	50                   	push   eax
c001fc02:	e8 37 e4 ff ff       	call   c001e03e <IDE::getBase(unsigned char)>
c001fc07:	89 c2                	mov    edx,eax
c001fc09:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001fc0e:	66 ef                	out    dx,ax
c001fc10:	46                   	inc    esi
c001fc11:	83 c4 10             	add    esp,0x10
c001fc14:	eb bd                	jmp    c001fbd3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001fc16:	51                   	push   ecx
c001fc17:	51                   	push   ecx
c001fc18:	52                   	push   edx
c001fc19:	50                   	push   eax
c001fc1a:	e8 1f e4 ff ff       	call   c001e03e <IDE::getBase(unsigned char)>
c001fc1f:	89 c2                	mov    edx,eax
c001fc21:	66 ed                	in     ax,dx
c001fc23:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001fc27:	83 c4 10             	add    esp,0x10
c001fc2a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001fc2e:	46                   	inc    esi
c001fc2f:	39 ee                	cmp    esi,ebp
c001fc31:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fc37:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fc3e:	75 d6                	jne    c001fc16 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001fc40:	01 f6                	add    esi,esi
c001fc42:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001fc46:	eb a3                	jmp    c001fbeb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001fc48:	51                   	push   ecx
c001fc49:	51                   	push   ecx
c001fc4a:	52                   	push   edx
c001fc4b:	50                   	push   eax
c001fc4c:	e8 73 e5 ff ff       	call   c001e1c4 <IDE::waitInterrupt(unsigned char)>
c001fc51:	83 c4 10             	add    esp,0x10
c001fc54:	84 c0                	test   al,al
c001fc56:	0f 84 e0 fd ff ff    	je     c001fa3c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001fc5c:	52                   	push   edx
c001fc5d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fc62:	52                   	push   edx
c001fc63:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc6a:	50                   	push   eax
c001fc6b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc71:	e8 b4 e3 ff ff       	call   c001e02a <IDE::prepareInterrupt(unsigned char)>
c001fc76:	83 c4 10             	add    esp,0x10
c001fc79:	50                   	push   eax
c001fc7a:	50                   	push   eax
c001fc7b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc82:	50                   	push   eax
c001fc83:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc89:	e8 b0 e3 ff ff       	call   c001e03e <IDE::getBase(unsigned char)>
c001fc8e:	8d 50 07             	lea    edx,[eax+0x7]
c001fc91:	ec                   	in     al,dx
c001fc92:	83 c4 10             	add    esp,0x10
c001fc95:	a8 88                	test   al,0x88
c001fc97:	74 0a                	je     c001fca3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001fc99:	4b                   	dec    ebx
c001fc9a:	75 dd                	jne    c001fc79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001fc9c:	bb 02 00 00 00       	mov    ebx,0x2
c001fca1:	eb 02                	jmp    c001fca5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fca3:	31 db                	xor    ebx,ebx
c001fca5:	83 c4 1c             	add    esp,0x1c
c001fca8:	89 d8                	mov    eax,ebx
c001fcaa:	5b                   	pop    ebx
c001fcab:	5e                   	pop    esi
c001fcac:	5f                   	pop    edi
c001fcad:	5d                   	pop    ebp
c001fcae:	c3                   	ret    
c001fcaf:	90                   	nop

c001fcb0 <ATAPI::diskRemoved()>:
c001fcb0:	53                   	push   ebx
c001fcb1:	83 ec 14             	sub    esp,0x14
c001fcb4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fcb8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fcbf:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001fcc5:	e8 ac ac fe ff       	call   c000a976 <LogicalDisk::unmount()>
c001fcca:	58                   	pop    eax
c001fccb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fcd1:	e8 b2 b6 fe ff       	call   c000b388 <VCache::writeWriteBuffer()>
c001fcd6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001fcdc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fce0:	83 c4 18             	add    esp,0x18
c001fce3:	5b                   	pop    ebx
c001fce4:	e9 8f b6 fe ff       	jmp    c000b378 <VCache::invalidateReadBuffer()>
c001fce9:	90                   	nop

c001fcea <ATAPI::eject()>:
c001fcea:	57                   	push   edi
c001fceb:	b9 03 00 00 00       	mov    ecx,0x3
c001fcf0:	53                   	push   ebx
c001fcf1:	83 ec 14             	sub    esp,0x14
c001fcf4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fcf8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fcfc:	fc                   	cld    
c001fcfd:	31 c0                	xor    eax,eax
c001fcff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fd01:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fd06:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fd0b:	50                   	push   eax
c001fd0c:	50                   	push   eax
c001fd0d:	6a 00                	push   0x0
c001fd0f:	6a 00                	push   0x0
c001fd11:	6a 00                	push   0x0
c001fd13:	6a 02                	push   0x2
c001fd15:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fd19:	50                   	push   eax
c001fd1a:	53                   	push   ebx
c001fd1b:	e8 d0 fc ff ff       	call   c001f9f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fd20:	83 c4 14             	add    esp,0x14
c001fd23:	53                   	push   ebx
c001fd24:	e8 87 ff ff ff       	call   c001fcb0 <ATAPI::diskRemoved()>
c001fd29:	83 c4 24             	add    esp,0x24
c001fd2c:	31 c0                	xor    eax,eax
c001fd2e:	5b                   	pop    ebx
c001fd2f:	5f                   	pop    edi
c001fd30:	c3                   	ret    
c001fd31:	90                   	nop

c001fd32 <ATAPI::diskInserted()>:
c001fd32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd36:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001fd3d:	c3                   	ret    

c001fd3e <ATAPI::detectMedia()>:
c001fd3e:	56                   	push   esi
c001fd3f:	53                   	push   ebx
c001fd40:	83 ec 28             	sub    esp,0x28
c001fd43:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fd47:	6a 0c                	push   0xc
c001fd49:	6a 00                	push   0x0
c001fd4b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fd4f:	56                   	push   esi
c001fd50:	e8 9b 07 fe ff       	call   c00004f0 <memset>
c001fd55:	58                   	pop    eax
c001fd56:	5a                   	pop    edx
c001fd57:	6a 00                	push   0x0
c001fd59:	6a 00                	push   0x0
c001fd5b:	6a 00                	push   0x0
c001fd5d:	6a 00                	push   0x0
c001fd5f:	56                   	push   esi
c001fd60:	53                   	push   ebx
c001fd61:	e8 8a fc ff ff       	call   c001f9f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fd66:	83 c4 1c             	add    esp,0x1c
c001fd69:	6a 0c                	push   0xc
c001fd6b:	6a 00                	push   0x0
c001fd6d:	56                   	push   esi
c001fd6e:	e8 7d 07 fe ff       	call   c00004f0 <memset>
c001fd73:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001fd78:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001fd7d:	59                   	pop    ecx
c001fd7e:	58                   	pop    eax
c001fd7f:	6a 01                	push   0x1
c001fd81:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001fd85:	50                   	push   eax
c001fd86:	6a 00                	push   0x0
c001fd88:	6a 12                	push   0x12
c001fd8a:	56                   	push   esi
c001fd8b:	53                   	push   ebx
c001fd8c:	e8 5f fc ff ff       	call   c001f9f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fd91:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001fd95:	83 c4 20             	add    esp,0x20
c001fd98:	83 e0 7f             	and    eax,0x7f
c001fd9b:	83 f8 70             	cmp    eax,0x70
c001fd9e:	74 15                	je     c001fdb5 <ATAPI::detectMedia()+0x77>
c001fda0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fda7:	75 0c                	jne    c001fdb5 <ATAPI::detectMedia()+0x77>
c001fda9:	83 ec 0c             	sub    esp,0xc
c001fdac:	53                   	push   ebx
c001fdad:	e8 80 ff ff ff       	call   c001fd32 <ATAPI::diskInserted()>
c001fdb2:	83 c4 10             	add    esp,0x10
c001fdb5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fdb9:	83 e0 0f             	and    eax,0xf
c001fdbc:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001fdc1:	0f b6 c0             	movzx  eax,al
c001fdc4:	75 19                	jne    c001fddf <ATAPI::detectMedia()+0xa1>
c001fdc6:	83 f8 02             	cmp    eax,0x2
c001fdc9:	75 14                	jne    c001fddf <ATAPI::detectMedia()+0xa1>
c001fdcb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fdd2:	74 24                	je     c001fdf8 <ATAPI::detectMedia()+0xba>
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	53                   	push   ebx
c001fdd8:	e8 d3 fe ff ff       	call   c001fcb0 <ATAPI::diskRemoved()>
c001fddd:	eb 16                	jmp    c001fdf5 <ATAPI::detectMedia()+0xb7>
c001fddf:	85 c0                	test   eax,eax
c001fde1:	75 15                	jne    c001fdf8 <ATAPI::detectMedia()+0xba>
c001fde3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fdea:	75 0c                	jne    c001fdf8 <ATAPI::detectMedia()+0xba>
c001fdec:	83 ec 0c             	sub    esp,0xc
c001fdef:	53                   	push   ebx
c001fdf0:	e8 3d ff ff ff       	call   c001fd32 <ATAPI::diskInserted()>
c001fdf5:	83 c4 10             	add    esp,0x10
c001fdf8:	83 c4 24             	add    esp,0x24
c001fdfb:	5b                   	pop    ebx
c001fdfc:	5e                   	pop    esi
c001fdfd:	c3                   	ret    

c001fdfe <ATAPI::open(int, int, void*)>:
c001fdfe:	56                   	push   esi
c001fdff:	53                   	push   ebx
c001fe00:	50                   	push   eax
c001fe01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fe05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fe09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fe0d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fe13:	c1 e0 06             	shl    eax,0x6
c001fe16:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fe1c:	01 d0                	add    eax,edx
c001fe1e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001fe25:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001fe2b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001fe32:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fe3c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001fe43:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001fe49:	6a 04                	push   0x4
c001fe4b:	6a 0c                	push   0xc
c001fe4d:	51                   	push   ecx
c001fe4e:	52                   	push   edx
c001fe4f:	e8 fc e1 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe54:	90                   	nop
c001fe55:	90                   	nop
c001fe56:	6a 00                	push   0x0
c001fe58:	6a 0c                	push   0xc
c001fe5a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe61:	50                   	push   eax
c001fe62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe68:	e8 e3 e1 ff ff       	call   c001e050 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe6d:	83 c4 14             	add    esp,0x14
c001fe70:	68 78 01 00 00       	push   0x178
c001fe75:	e8 6a fc fe ff       	call   c000fae4 <malloc>
c001fe7a:	83 c4 0c             	add    esp,0xc
c001fe7d:	6a 00                	push   0x0
c001fe7f:	68 ff ff ff 7f       	push   0x7fffffff
c001fe84:	6a 00                	push   0x0
c001fe86:	6a 00                	push   0x0
c001fe88:	53                   	push   ebx
c001fe89:	68 e7 5d 02 c0       	push   0xc0025de7
c001fe8e:	89 c6                	mov    esi,eax
c001fe90:	50                   	push   eax
c001fe91:	e8 1e a9 fe ff       	call   c000a7b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001fe96:	83 c4 14             	add    esp,0x14
c001fe99:	56                   	push   esi
c001fe9a:	e8 d5 a9 fe ff       	call   c000a874 <LogicalDisk::assignDriveLetter()>
c001fe9f:	5a                   	pop    edx
c001fea0:	59                   	pop    ecx
c001fea1:	0f be c0             	movsx  eax,al
c001fea4:	50                   	push   eax
c001fea5:	68 2c 5c 02 c0       	push   0xc0025c2c
c001feaa:	e8 9f 70 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001feaf:	58                   	pop    eax
c001feb0:	5a                   	pop    edx
c001feb1:	56                   	push   esi
c001feb2:	53                   	push   ebx
c001feb3:	e8 e2 9a fe ff       	call   c000999a <Device::addChild(Device*)>
c001feb8:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001febe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fec1:	e8 20 9f fe ff       	call   c0009de6 <PhysicalDisk::startCache()>
c001fec6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fecd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fed0:	e8 69 fe ff ff       	call   c001fd3e <ATAPI::detectMedia()>
c001fed5:	83 c4 14             	add    esp,0x14
c001fed8:	31 c0                	xor    eax,eax
c001feda:	5b                   	pop    ebx
c001fedb:	5e                   	pop    esi
c001fedc:	c3                   	ret    
c001fedd:	90                   	nop

c001fede <ATAPI::read(unsigned long long, int, void*)>:
c001fede:	55                   	push   ebp
c001fedf:	57                   	push   edi
c001fee0:	56                   	push   esi
c001fee1:	53                   	push   ebx
c001fee2:	83 ec 1c             	sub    esp,0x1c
c001fee5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fee9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001feed:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fef1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fef8:	74 3c                	je     c001ff36 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001fefa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fefe:	b9 03 00 00 00       	mov    ecx,0x3
c001ff03:	fc                   	cld    
c001ff04:	31 c0                	xor    eax,eax
c001ff06:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff08:	89 e8                	mov    eax,ebp
c001ff0a:	0f ce                	bswap  esi
c001ff0c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ff10:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ff15:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ff19:	50                   	push   eax
c001ff1a:	50                   	push   eax
c001ff1b:	55                   	push   ebp
c001ff1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ff20:	c1 e5 0b             	shl    ebp,0xb
c001ff23:	6a 00                	push   0x0
c001ff25:	55                   	push   ebp
c001ff26:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ff2a:	50                   	push   eax
c001ff2b:	53                   	push   ebx
c001ff2c:	e8 bf fa ff ff       	call   c001f9f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ff31:	83 c4 20             	add    esp,0x20
c001ff34:	eb 1a                	jmp    c001ff50 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ff36:	83 ec 0c             	sub    esp,0xc
c001ff39:	53                   	push   ebx
c001ff3a:	e8 ff fd ff ff       	call   c001fd3e <ATAPI::detectMedia()>
c001ff3f:	83 c4 10             	add    esp,0x10
c001ff42:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff49:	75 af                	jne    c001fefa <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ff4b:	b8 02 00 00 00       	mov    eax,0x2
c001ff50:	83 c4 1c             	add    esp,0x1c
c001ff53:	5b                   	pop    ebx
c001ff54:	5e                   	pop    esi
c001ff55:	5f                   	pop    edi
c001ff56:	5d                   	pop    ebp
c001ff57:	c3                   	ret    

c001ff58 <SATA::close(int, int, void*)>:
c001ff58:	83 ec 0c             	sub    esp,0xc
c001ff5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ff65:	85 c0                	test   eax,eax
c001ff67:	74 0c                	je     c001ff75 <SATA::close(int, int, void*)+0x1d>
c001ff69:	8b 10                	mov    edx,DWORD PTR [eax]
c001ff6b:	83 ec 0c             	sub    esp,0xc
c001ff6e:	50                   	push   eax
c001ff6f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ff72:	83 c4 10             	add    esp,0x10
c001ff75:	31 c0                	xor    eax,eax
c001ff77:	83 c4 0c             	add    esp,0xc
c001ff7a:	c3                   	ret    
c001ff7b:	90                   	nop

c001ff7c <SATA::powerSaving(PowerSavingLevel)>:
c001ff7c:	c3                   	ret    
c001ff7d:	90                   	nop

c001ff7e <SATA::open(int, int, void*)>:
c001ff7e:	56                   	push   esi
c001ff7f:	53                   	push   ebx
c001ff80:	83 ec 10             	sub    esp,0x10
c001ff83:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ff87:	68 74 5c 02 c0       	push   0xc0025c74
c001ff8c:	e8 bd 6f fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ff91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ff95:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ff9f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ffa9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ffaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ffb3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ffbd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ffc4:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ffca:	e8 55 00 ff ff       	call   c0010024 <Phys::allocatePage()>
c001ffcf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ffd5:	89 c6                	mov    esi,eax
c001ffd7:	e8 48 00 ff ff       	call   c0010024 <Phys::allocatePage()>
c001ffdc:	81 c6 00 10 00 00    	add    esi,0x1000
c001ffe2:	83 c4 10             	add    esp,0x10
c001ffe5:	39 c6                	cmp    esi,eax
c001ffe7:	74 10                	je     c001fff9 <SATA::open(int, int, void*)+0x7b>
c001ffe9:	83 ec 0c             	sub    esp,0xc
c001ffec:	68 80 5c 02 c0       	push   0xc0025c80
c001fff1:	e8 34 fe fe ff       	call   c000fe2a <KePanic(char const*)>
c001fff6:	83 c4 10             	add    esp,0x10
c001fff9:	83 ec 0c             	sub    esp,0xc
c001fffc:	6a 02                	push   0x2
c001fffe:	e8 e2 32 ff ff       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c0020003:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020009:	6a 03                	push   0x3
c002000b:	50                   	push   eax
c002000c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020012:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c0020018:	e8 a1 39 ff ff       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c002001d:	83 c4 14             	add    esp,0x14
c0020020:	53                   	push   ebx
c0020021:	e8 c0 9d fe ff       	call   c0009de6 <PhysicalDisk::startCache()>
c0020026:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020029:	e8 58 ac fe ff       	call   c000ac86 <createPartitionsForDisk(PhysicalDisk*)>
c002002e:	83 c4 14             	add    esp,0x14
c0020031:	31 c0                	xor    eax,eax
c0020033:	5b                   	pop    ebx
c0020034:	5e                   	pop    esi
c0020035:	c3                   	ret    

c0020036 <SATA::SATA()>:
c0020036:	83 ec 0c             	sub    esp,0xc
c0020039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002003d:	83 ec 04             	sub    esp,0x4
c0020040:	68 00 02 00 00       	push   0x200
c0020045:	68 94 5c 02 c0       	push   0xc0025c94
c002004a:	50                   	push   eax
c002004b:	e8 2e 9d fe ff       	call   c0009d7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020050:	83 c4 10             	add    esp,0x10
c0020053:	ba 04 5d 02 c0       	mov    edx,0xc0025d04
c0020058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002005c:	89 10                	mov    DWORD PTR [eax],edx
c002005e:	90                   	nop
c002005f:	83 c4 0c             	add    esp,0xc
c0020062:	c3                   	ret    
c0020063:	90                   	nop

c0020064 <SATA::access(unsigned long long, int, void*, bool)>:
c0020064:	55                   	push   ebp
c0020065:	57                   	push   edi
c0020066:	56                   	push   esi
c0020067:	53                   	push   ebx
c0020068:	83 ec 2c             	sub    esp,0x2c
c002006b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002006f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020073:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020077:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002007b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002007f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020083:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020087:	fa                   	cli    
c0020088:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c002008e:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020093:	7e 10                	jle    c00200a5 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c0020095:	83 ec 0c             	sub    esp,0xc
c0020098:	68 a4 5c 02 c0       	push   0xc0025ca4
c002009d:	e8 88 fd fe ff       	call   c000fe2a <KePanic(char const*)>
c00200a2:	83 c4 10             	add    esp,0x10
c00200a5:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00200ab:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c00200b1:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00200b7:	89 e8                	mov    eax,ebp
c00200b9:	c1 e0 07             	shl    eax,0x7
c00200bc:	01 d0                	add    eax,edx
c00200be:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00200c8:	8d 45 02             	lea    eax,[ebp+0x2]
c00200cb:	51                   	push   ecx
c00200cc:	c1 e0 07             	shl    eax,0x7
c00200cf:	51                   	push   ecx
c00200d0:	01 d0                	add    eax,edx
c00200d2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00200d6:	50                   	push   eax
c00200d7:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00200dd:	e8 ee ed ff ff       	call   c001eed0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00200e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00200e6:	83 c4 10             	add    esp,0x10
c00200e9:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c00200ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00200f2:	0f 84 a6 01 00 00    	je     c002029e <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c00200f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00200fc:	c1 e0 09             	shl    eax,0x9
c00200ff:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020104:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020108:	74 0e                	je     c0020118 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c002010a:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020110:	89 c1                	mov    ecx,eax
c0020112:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020116:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020118:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002011c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020122:	8d 45 02             	lea    eax,[ebp+0x2]
c0020125:	c1 e0 07             	shl    eax,0x7
c0020128:	01 d0                	add    eax,edx
c002012a:	8b 00                	mov    eax,DWORD PTR [eax]
c002012c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020132:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020138:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002013c:	c1 e1 05             	shl    ecx,0x5
c002013f:	01 c8                	add    eax,ecx
c0020141:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020145:	83 e1 01             	and    ecx,0x1
c0020148:	89 ce                	mov    esi,ecx
c002014a:	8a 08                	mov    cl,BYTE PTR [eax]
c002014c:	c1 e6 06             	shl    esi,0x6
c002014f:	83 e1 bf             	and    ecx,0xffffffbf
c0020152:	09 f1                	or     ecx,esi
c0020154:	88 08                	mov    BYTE PTR [eax],cl
c0020156:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020158:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002015e:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020164:	89 08                	mov    DWORD PTR [eax],ecx
c0020166:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002016c:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0020172:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020178:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002017b:	50                   	push   eax
c002017c:	68 90 00 00 00       	push   0x90
c0020181:	6a 00                	push   0x0
c0020183:	56                   	push   esi
c0020184:	e8 67 03 fe ff       	call   c00004f0 <memset>
c0020189:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002018f:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020199:	83 c4 10             	add    esp,0x10
c002019c:	48                   	dec    eax
c002019d:	25 ff ff 3f 00       	and    eax,0x3fffff
c00201a2:	89 c1                	mov    ecx,eax
c00201a4:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00201aa:	25 00 00 c0 ff       	and    eax,0xffc00000
c00201af:	09 c8                	or     eax,ecx
c00201b1:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00201b7:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c00201bd:	83 c8 80             	or     eax,0xffffff80
c00201c0:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c00201c6:	66 8b 06             	mov    ax,WORD PTR [esi]
c00201c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00201cd:	25 00 7f 00 00       	and    eax,0x7f00
c00201d2:	0d 27 80 ff ff       	or     eax,0xffff8027
c00201d7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00201dc:	66 89 06             	mov    WORD PTR [esi],ax
c00201df:	b0 35                	mov    al,0x35
c00201e1:	75 02                	jne    c00201e5 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c00201e3:	b0 25                	mov    al,0x25
c00201e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00201e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00201ec:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00201f0:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00201f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00201f8:	c1 e8 10             	shr    eax,0x10
c00201fb:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00201fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020202:	c1 e8 18             	shr    eax,0x18
c0020205:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020208:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002020c:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002020f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020213:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020216:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002021a:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002021e:	89 ee                	mov    esi,ebp
c0020220:	31 c0                	xor    eax,eax
c0020222:	c1 e6 07             	shl    esi,0x7
c0020225:	01 d6                	add    esi,edx
c0020227:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002022d:	80 e1 88             	and    cl,0x88
c0020230:	74 0a                	je     c002023c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0020232:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020237:	74 0a                	je     c0020243 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0020239:	40                   	inc    eax
c002023a:	eb eb                	jmp    c0020227 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002023c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020241:	75 0a                	jne    c002024d <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020243:	83 ec 0c             	sub    esp,0xc
c0020246:	68 dd 5c 02 c0       	push   0xc0025cdd
c002024b:	eb 34                	jmp    c0020281 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002024d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0020251:	c1 e5 07             	shl    ebp,0x7
c0020254:	b8 01 00 00 00       	mov    eax,0x1
c0020259:	01 ea                	add    edx,ebp
c002025b:	d3 e0                	shl    eax,cl
c002025d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0020263:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020269:	85 c8                	test   eax,ecx
c002026b:	74 25                	je     c0020292 <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c002026d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020273:	0f ba e1 1e          	bt     ecx,0x1e
c0020277:	73 ea                	jae    c0020263 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c0020279:	83 ec 0c             	sub    esp,0xc
c002027c:	68 eb 5c 02 c0       	push   0xc0025ceb
c0020281:	e8 c8 6c fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020286:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c002028d:	83 c4 10             	add    esp,0x10
c0020290:	eb 13                	jmp    c00202a5 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c0020292:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020298:	0f ba e0 1e          	bt     eax,0x1e
c002029c:	73 18                	jae    c00202b6 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c002029e:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00202a5:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00202ac:	75 01                	jne    c00202af <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c00202ae:	fb                   	sti    
c00202af:	b8 01 00 00 00       	mov    eax,0x1
c00202b4:	eb 2c                	jmp    c00202e2 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c00202b6:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00202bb:	75 10                	jne    c00202cd <SATA::access(unsigned long long, int, void*, bool)+0x269>
c00202bd:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00202c3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00202c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00202cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00202cd:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00202d4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00202d9:	85 c0                	test   eax,eax
c00202db:	75 03                	jne    c00202e0 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c00202dd:	fb                   	sti    
c00202de:	eb 02                	jmp    c00202e2 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c00202e0:	31 c0                	xor    eax,eax
c00202e2:	83 c4 2c             	add    esp,0x2c
c00202e5:	5b                   	pop    ebx
c00202e6:	5e                   	pop    esi
c00202e7:	5f                   	pop    edi
c00202e8:	5d                   	pop    ebp
c00202e9:	c3                   	ret    

c00202ea <SATA::read(unsigned long long, int, void*)>:
c00202ea:	57                   	push   edi
c00202eb:	b8 04 00 00 00       	mov    eax,0x4
c00202f0:	56                   	push   esi
c00202f1:	53                   	push   ebx
c00202f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00202f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00202fa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00202fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020302:	8d 7a ff             	lea    edi,[edx-0x1]
c0020305:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002030b:	77 25                	ja     c0020332 <SATA::read(unsigned long long, int, void*)+0x48>
c002030d:	85 f6                	test   esi,esi
c002030f:	b8 06 00 00 00       	mov    eax,0x6
c0020314:	74 1c                	je     c0020332 <SATA::read(unsigned long long, int, void*)+0x48>
c0020316:	50                   	push   eax
c0020317:	50                   	push   eax
c0020318:	6a 00                	push   0x0
c002031a:	56                   	push   esi
c002031b:	52                   	push   edx
c002031c:	53                   	push   ebx
c002031d:	51                   	push   ecx
c002031e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020322:	e8 3d fd ff ff       	call   c0020064 <SATA::access(unsigned long long, int, void*, bool)>
c0020327:	83 c4 20             	add    esp,0x20
c002032a:	85 c0                	test   eax,eax
c002032c:	0f 95 c0             	setne  al
c002032f:	0f b6 c0             	movzx  eax,al
c0020332:	5b                   	pop    ebx
c0020333:	5e                   	pop    esi
c0020334:	5f                   	pop    edi
c0020335:	c3                   	ret    

c0020336 <SATA::write(unsigned long long, int, void*)>:
c0020336:	55                   	push   ebp
c0020337:	b8 04 00 00 00       	mov    eax,0x4
c002033c:	57                   	push   edi
c002033d:	56                   	push   esi
c002033e:	53                   	push   ebx
c002033f:	83 ec 0c             	sub    esp,0xc
c0020342:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020346:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002034a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002034e:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020352:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020355:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002035b:	77 3d                	ja     c002039a <SATA::write(unsigned long long, int, void*)+0x64>
c002035d:	85 ed                	test   ebp,ebp
c002035f:	b8 06 00 00 00       	mov    eax,0x6
c0020364:	74 34                	je     c002039a <SATA::write(unsigned long long, int, void*)+0x64>
c0020366:	c1 e3 09             	shl    ebx,0x9
c0020369:	01 eb                	add    ebx,ebp
c002036b:	50                   	push   eax
c002036c:	89 d6                	mov    esi,edx
c002036e:	50                   	push   eax
c002036f:	83 c6 01             	add    esi,0x1
c0020372:	6a 01                	push   0x1
c0020374:	89 cf                	mov    edi,ecx
c0020376:	55                   	push   ebp
c0020377:	83 d7 00             	adc    edi,0x0
c002037a:	6a 01                	push   0x1
c002037c:	81 c5 00 02 00 00    	add    ebp,0x200
c0020382:	51                   	push   ecx
c0020383:	52                   	push   edx
c0020384:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020388:	e8 d7 fc ff ff       	call   c0020064 <SATA::access(unsigned long long, int, void*, bool)>
c002038d:	83 c4 20             	add    esp,0x20
c0020390:	39 dd                	cmp    ebp,ebx
c0020392:	89 f2                	mov    edx,esi
c0020394:	89 f9                	mov    ecx,edi
c0020396:	75 d3                	jne    c002036b <SATA::write(unsigned long long, int, void*)+0x35>
c0020398:	31 c0                	xor    eax,eax
c002039a:	83 c4 0c             	add    esp,0xc
c002039d:	5b                   	pop    ebx
c002039e:	5e                   	pop    esi
c002039f:	5f                   	pop    edi
c00203a0:	5d                   	pop    ebp
c00203a1:	c3                   	ret    

c00203a2 <SATAPI::write(unsigned long long, int, void*)>:
c00203a2:	b8 03 00 00 00       	mov    eax,0x3
c00203a7:	c3                   	ret    

c00203a8 <SATAPI::close(int, int, void*)>:
c00203a8:	83 ec 0c             	sub    esp,0xc
c00203ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203af:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00203b5:	85 c0                	test   eax,eax
c00203b7:	74 0c                	je     c00203c5 <SATAPI::close(int, int, void*)+0x1d>
c00203b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00203bb:	83 ec 0c             	sub    esp,0xc
c00203be:	50                   	push   eax
c00203bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00203c2:	83 c4 10             	add    esp,0x10
c00203c5:	31 c0                	xor    eax,eax
c00203c7:	83 c4 0c             	add    esp,0xc
c00203ca:	c3                   	ret    
c00203cb:	90                   	nop

c00203cc <SATAPI::SATAPI()>:
c00203cc:	83 ec 0c             	sub    esp,0xc
c00203cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203d3:	83 ec 04             	sub    esp,0x4
c00203d6:	68 00 08 00 00       	push   0x800
c00203db:	68 34 5d 02 c0       	push   0xc0025d34
c00203e0:	50                   	push   eax
c00203e1:	e8 98 99 fe ff       	call   c0009d7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c00203e6:	83 c4 10             	add    esp,0x10
c00203e9:	ba 28 5e 02 c0       	mov    edx,0xc0025e28
c00203ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f2:	89 10                	mov    DWORD PTR [eax],edx
c00203f4:	90                   	nop
c00203f5:	83 c4 0c             	add    esp,0xc
c00203f8:	c3                   	ret    
c00203f9:	90                   	nop

c00203fa <SATAPI::diskRemoved()>:
c00203fa:	c3                   	ret    
c00203fb:	90                   	nop

c00203fc <SATAPI::diskInserted()>:
c00203fc:	83 ec 18             	sub    esp,0x18
c00203ff:	68 40 5d 02 c0       	push   0xc0025d40
c0020404:	e8 45 6b fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002040d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020414:	83 c4 1c             	add    esp,0x1c
c0020417:	c3                   	ret    

c0020418 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020418:	55                   	push   ebp
c0020419:	57                   	push   edi
c002041a:	56                   	push   esi
c002041b:	53                   	push   ebx
c002041c:	83 ec 34             	sub    esp,0x34
c002041f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020423:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020427:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002042b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002042f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020433:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020439:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002043f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020443:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020449:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002044d:	83 c0 02             	add    eax,0x2
c0020450:	c1 e0 07             	shl    eax,0x7
c0020453:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002045b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002045f:	c1 e0 07             	shl    eax,0x7
c0020462:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020466:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002046a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020474:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020478:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002047e:	e8 4d ea ff ff       	call   c001eed0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020483:	83 c4 10             	add    esp,0x10
c0020486:	89 c2                	mov    edx,eax
c0020488:	b8 01 00 00 00       	mov    eax,0x1
c002048d:	83 fa ff             	cmp    edx,0xffffffff
c0020490:	0f 84 63 02 00 00    	je     c00206f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0020496:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002049a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002049e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00204a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00204a6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00204ac:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00204b2:	89 d1                	mov    ecx,edx
c00204b4:	c1 e1 05             	shl    ecx,0x5
c00204b7:	01 c8                	add    eax,ecx
c00204b9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00204bb:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00204c1:	81 c9 25 00 01 00    	or     ecx,0x10025
c00204c7:	89 08                	mov    DWORD PTR [eax],ecx
c00204c9:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00204cf:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00204d5:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00204db:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00204de:	50                   	push   eax
c00204df:	68 90 00 00 00       	push   0x90
c00204e4:	6a 00                	push   0x0
c00204e6:	53                   	push   ebx
c00204e7:	e8 04 00 fe ff       	call   c00004f0 <memset>
c00204ec:	8d 7b 40             	lea    edi,[ebx+0x40]
c00204ef:	b9 0c 00 00 00       	mov    ecx,0xc
c00204f4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00204f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00204fa:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020500:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020504:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020508:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002050e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020512:	48                   	dec    eax
c0020513:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020518:	89 c1                	mov    ecx,eax
c002051a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020520:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020525:	09 c8                	or     eax,ecx
c0020527:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002052d:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020533:	83 c8 80             	or     eax,0xffffff80
c0020536:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002053c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002053f:	25 00 7f 00 00       	and    eax,0x7f00
c0020544:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020549:	66 89 03             	mov    WORD PTR [ebx],ax
c002054c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020550:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0020554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020558:	c1 e8 10             	shr    eax,0x10
c002055b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002055e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020562:	c1 e8 18             	shr    eax,0x18
c0020565:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0020568:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002056c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002056f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020573:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020576:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002057a:	83 c4 10             	add    esp,0x10
c002057d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020581:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020585:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020589:	31 c0                	xor    eax,eax
c002058b:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0020591:	80 e1 88             	and    cl,0x88
c0020594:	74 0a                	je     c00205a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020596:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002059b:	74 0a                	je     c00205a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c002059d:	40                   	inc    eax
c002059e:	eb eb                	jmp    c002058b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c00205a0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00205a5:	75 43                	jne    c00205ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c00205a7:	83 ec 0c             	sub    esp,0xc
c00205aa:	68 58 5d 02 c0       	push   0xc0025d58
c00205af:	e8 9a 69 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00205b4:	58                   	pop    eax
c00205b5:	5a                   	pop    edx
c00205b6:	68 6d 5d 02 c0       	push   0xc0025d6d
c00205bb:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c00205c1:	e8 04 21 ff ff       	call   c00126ca <VgaText::puts(char const*)>
c00205c6:	59                   	pop    ecx
c00205c7:	5b                   	pop    ebx
c00205c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00205cc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00205d2:	e8 93 e9 ff ff       	call   c001ef6a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00205d7:	5e                   	pop    esi
c00205d8:	5f                   	pop    edi
c00205d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00205dd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00205e3:	e8 62 e9 ff ff       	call   c001ef4a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c00205e8:	eb 48                	jmp    c0020632 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c00205ea:	b8 01 00 00 00       	mov    eax,0x1
c00205ef:	88 d1                	mov    cl,dl
c00205f1:	d3 e0                	shl    eax,cl
c00205f3:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c00205f8:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c00205fe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020602:	89 c7                	mov    edi,eax
c0020604:	c1 e3 07             	shl    ebx,0x7
c0020607:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002060b:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0020611:	85 c7                	test   edi,eax
c0020613:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0020619:	0f 84 a7 00 00 00    	je     c00206c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ae>
c002061f:	0f ba e0 1e          	bt     eax,0x1e
c0020623:	73 1a                	jae    c002063f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c0020625:	83 ec 0c             	sub    esp,0xc
c0020628:	68 7f 5d 02 c0       	push   0xc0025d7f
c002062d:	e8 1c 69 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020632:	83 c4 10             	add    esp,0x10
c0020635:	b8 01 00 00 00       	mov    eax,0x1
c002063a:	e9 ba 00 00 00       	jmp    c00206f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c002063f:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c0020645:	83 f8 0d             	cmp    eax,0xd
c0020648:	77 0b                	ja     c0020655 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23d>
c002064a:	50                   	push   eax
c002064b:	50                   	push   eax
c002064c:	6a 00                	push   0x0
c002064e:	68 c8 00 00 00       	push   0xc8
c0020653:	eb 2a                	jmp    c002067f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020655:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c002065b:	83 f8 0d             	cmp    eax,0xd
c002065e:	77 0b                	ja     c002066b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0020660:	51                   	push   ecx
c0020661:	51                   	push   ecx
c0020662:	6a 00                	push   0x0
c0020664:	68 58 02 00 00       	push   0x258
c0020669:	eb 14                	jmp    c002067f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c002066b:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c0020671:	83 f8 06             	cmp    eax,0x6
c0020674:	77 11                	ja     c0020687 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26f>
c0020676:	52                   	push   edx
c0020677:	52                   	push   edx
c0020678:	6a 00                	push   0x0
c002067a:	68 dc 05 00 00       	push   0x5dc
c002067f:	e8 00 69 ff ff       	call   c0016f84 <milliTenthSleep(unsigned long long)>
c0020684:	83 c4 10             	add    esp,0x10
c0020687:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002068b:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002068e:	75 06                	jne    c0020696 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c0020690:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0020694:	74 16                	je     c00206ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0020696:	83 fe 06             	cmp    esi,0x6
c0020699:	77 11                	ja     c00206ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c002069b:	50                   	push   eax
c002069c:	50                   	push   eax
c002069d:	6a 00                	push   0x0
c002069f:	68 c4 09 00 00       	push   0x9c4
c00206a4:	e8 db 68 ff ff       	call   c0016f84 <milliTenthSleep(unsigned long long)>
c00206a9:	83 c4 10             	add    esp,0x10
c00206ac:	46                   	inc    esi
c00206ad:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c00206b3:	0f 85 52 ff ff ff    	jne    c002060b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c00206b9:	83 ec 0c             	sub    esp,0xc
c00206bc:	68 92 5d 02 c0       	push   0xc0025d92
c00206c1:	e9 67 ff ff ff       	jmp    c002062d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c00206c6:	0f ba e0 1e          	bt     eax,0x1e
c00206ca:	73 0d                	jae    c00206d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c1>
c00206cc:	83 ec 0c             	sub    esp,0xc
c00206cf:	68 a6 5d 02 c0       	push   0xc0025da6
c00206d4:	e9 54 ff ff ff       	jmp    c002062d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c00206d9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00206de:	74 17                	je     c00206f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c00206e0:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00206e5:	74 10                	je     c00206f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c00206e7:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00206ed:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00206f1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00206f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00206f7:	31 c0                	xor    eax,eax
c00206f9:	83 c4 2c             	add    esp,0x2c
c00206fc:	5b                   	pop    ebx
c00206fd:	5e                   	pop    esi
c00206fe:	5f                   	pop    edi
c00206ff:	5d                   	pop    ebp
c0020700:	c3                   	ret    
c0020701:	90                   	nop

c0020702 <SATAPI::eject()>:
c0020702:	57                   	push   edi
c0020703:	b9 03 00 00 00       	mov    ecx,0x3
c0020708:	83 ec 18             	sub    esp,0x18
c002070b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002070f:	fc                   	cld    
c0020710:	31 c0                	xor    eax,eax
c0020712:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020714:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020719:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002071e:	50                   	push   eax
c002071f:	6a 00                	push   0x0
c0020721:	6a 00                	push   0x0
c0020723:	6a 00                	push   0x0
c0020725:	6a 00                	push   0x0
c0020727:	6a 02                	push   0x2
c0020729:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002072d:	50                   	push   eax
c002072e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020732:	e8 e1 fc ff ff       	call   c0020418 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020737:	83 c4 38             	add    esp,0x38
c002073a:	31 c0                	xor    eax,eax
c002073c:	5f                   	pop    edi
c002073d:	c3                   	ret    

c002073e <SATAPI::detectMedia()>:
c002073e:	53                   	push   ebx
c002073f:	83 ec 14             	sub    esp,0x14
c0020742:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020746:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002074c:	e8 37 ac fe ff       	call   c000b388 <VCache::writeWriteBuffer()>
c0020751:	59                   	pop    ecx
c0020752:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020758:	e8 1b ac fe ff       	call   c000b378 <VCache::invalidateReadBuffer()>
c002075d:	c7 04 24 bb 5d 02 c0 	mov    DWORD PTR [esp],0xc0025dbb
c0020764:	e8 e5 67 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020769:	83 c4 10             	add    esp,0x10
c002076c:	31 c0                	xor    eax,eax
c002076e:	8b 14 85 e0 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4520]
c0020775:	85 d2                	test   edx,edx
c0020777:	74 0f                	je     c0020788 <SATAPI::detectMedia()+0x4a>
c0020779:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002077f:	75 07                	jne    c0020788 <SATAPI::detectMedia()+0x4a>
c0020781:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0020788:	40                   	inc    eax
c0020789:	83 f8 1a             	cmp    eax,0x1a
c002078c:	75 e0                	jne    c002076e <SATAPI::detectMedia()+0x30>
c002078e:	83 c4 08             	add    esp,0x8
c0020791:	5b                   	pop    ebx
c0020792:	c3                   	ret    
c0020793:	90                   	nop

c0020794 <SATAPI::open(int, int, void*)>:
c0020794:	56                   	push   esi
c0020795:	53                   	push   ebx
c0020796:	51                   	push   ecx
c0020797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002079b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002079f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00207a9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00207af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207b3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00207bd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00207c7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00207ce:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00207d4:	e8 4b f8 fe ff       	call   c0010024 <Phys::allocatePage()>
c00207d9:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00207df:	89 c6                	mov    esi,eax
c00207e1:	e8 3e f8 fe ff       	call   c0010024 <Phys::allocatePage()>
c00207e6:	81 c6 00 10 00 00    	add    esi,0x1000
c00207ec:	39 c6                	cmp    esi,eax
c00207ee:	74 10                	je     c0020800 <SATAPI::open(int, int, void*)+0x6c>
c00207f0:	83 ec 0c             	sub    esp,0xc
c00207f3:	68 d0 5d 02 c0       	push   0xc0025dd0
c00207f8:	e8 2d f6 fe ff       	call   c000fe2a <KePanic(char const*)>
c00207fd:	83 c4 10             	add    esp,0x10
c0020800:	83 ec 0c             	sub    esp,0xc
c0020803:	6a 02                	push   0x2
c0020805:	e8 db 2a ff ff       	call   c00132e5 <Virt::allocateKernelVirtualPages(int)>
c002080a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020810:	6a 03                	push   0x3
c0020812:	50                   	push   eax
c0020813:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020819:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c002081f:	e8 9a 31 ff ff       	call   c00139be <VAS::mapPage(unsigned long, unsigned long, int)>
c0020824:	83 c4 14             	add    esp,0x14
c0020827:	68 78 01 00 00       	push   0x178
c002082c:	e8 b3 f2 fe ff       	call   c000fae4 <malloc>
c0020831:	83 c4 0c             	add    esp,0xc
c0020834:	6a 00                	push   0x0
c0020836:	68 ff ff ff 7f       	push   0x7fffffff
c002083b:	6a 00                	push   0x0
c002083d:	6a 00                	push   0x0
c002083f:	53                   	push   ebx
c0020840:	68 e6 5d 02 c0       	push   0xc0025de6
c0020845:	89 c6                	mov    esi,eax
c0020847:	50                   	push   eax
c0020848:	e8 67 9f fe ff       	call   c000a7b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002084d:	83 c4 14             	add    esp,0x14
c0020850:	56                   	push   esi
c0020851:	e8 1e a0 fe ff       	call   c000a874 <LogicalDisk::assignDriveLetter()>
c0020856:	5a                   	pop    edx
c0020857:	59                   	pop    ecx
c0020858:	0f be c0             	movsx  eax,al
c002085b:	50                   	push   eax
c002085c:	68 2c 5c 02 c0       	push   0xc0025c2c
c0020861:	e8 e8 66 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020866:	58                   	pop    eax
c0020867:	5a                   	pop    edx
c0020868:	56                   	push   esi
c0020869:	53                   	push   ebx
c002086a:	e8 2b 91 fe ff       	call   c000999a <Device::addChild(Device*)>
c002086f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020875:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020878:	e8 69 95 fe ff       	call   c0009de6 <PhysicalDisk::startCache()>
c002087d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020884:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020887:	e8 b2 fe ff ff       	call   c002073e <SATAPI::detectMedia()>
c002088c:	83 c4 14             	add    esp,0x14
c002088f:	31 c0                	xor    eax,eax
c0020891:	5b                   	pop    ebx
c0020892:	5e                   	pop    esi
c0020893:	c3                   	ret    

c0020894 <SATAPI::read(unsigned long long, int, void*)>:
c0020894:	55                   	push   ebp
c0020895:	57                   	push   edi
c0020896:	56                   	push   esi
c0020897:	53                   	push   ebx
c0020898:	83 ec 3c             	sub    esp,0x3c
c002089b:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c002089f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00208a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00208a7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00208ab:	83 fd 04             	cmp    ebp,0x4
c00208ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00208b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00208b6:	7e 10                	jle    c00208c8 <SATAPI::read(unsigned long long, int, void*)+0x34>
c00208b8:	83 ec 0c             	sub    esp,0xc
c00208bb:	68 f4 5d 02 c0       	push   0xc0025df4
c00208c0:	e8 65 f5 fe ff       	call   c000fe2a <KePanic(char const*)>
c00208c5:	83 c4 10             	add    esp,0x10
c00208c8:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00208ce:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00208d4:	51                   	push   ecx
c00208d5:	50                   	push   eax
c00208d6:	83 c0 02             	add    eax,0x2
c00208d9:	c1 e0 07             	shl    eax,0x7
c00208dc:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c00208e2:	50                   	push   eax
c00208e3:	52                   	push   edx
c00208e4:	e8 ab e6 ff ff       	call   c001ef94 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00208e9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00208ed:	b9 03 00 00 00       	mov    ecx,0x3
c00208f2:	fc                   	cld    
c00208f3:	31 c0                	xor    eax,eax
c00208f5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00208f7:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c00208fc:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0020901:	83 c4 0c             	add    esp,0xc
c0020904:	6a 00                	push   0x0
c0020906:	6a 00                	push   0x0
c0020908:	6a 00                	push   0x0
c002090a:	6a 00                	push   0x0
c002090c:	6a 02                	push   0x2
c002090e:	8d 44 24 30          	lea    eax,[esp+0x30]
c0020912:	50                   	push   eax
c0020913:	53                   	push   ebx
c0020914:	e8 ff fa ff ff       	call   c0020418 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020919:	83 c4 20             	add    esp,0x20
c002091c:	85 c0                	test   eax,eax
c002091e:	89 c6                	mov    esi,eax
c0020920:	75 46                	jne    c0020968 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c0020922:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020926:	b9 03 00 00 00       	mov    ecx,0x3
c002092b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002092d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020931:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0020936:	0f c8                	bswap  eax
c0020938:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002093c:	89 e8                	mov    eax,ebp
c002093e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020942:	50                   	push   eax
c0020943:	55                   	push   ebp
c0020944:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0020948:	c1 e5 0b             	shl    ebp,0xb
c002094b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002094f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020953:	55                   	push   ebp
c0020954:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0020958:	50                   	push   eax
c0020959:	53                   	push   ebx
c002095a:	e8 b9 fa ff ff       	call   c0020418 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002095f:	83 c4 20             	add    esp,0x20
c0020962:	85 c0                	test   eax,eax
c0020964:	89 c6                	mov    esi,eax
c0020966:	74 0c                	je     c0020974 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c0020968:	83 ec 0c             	sub    esp,0xc
c002096b:	53                   	push   ebx
c002096c:	e8 cd fd ff ff       	call   c002073e <SATAPI::detectMedia()>
c0020971:	83 c4 10             	add    esp,0x10
c0020974:	83 c4 3c             	add    esp,0x3c
c0020977:	89 f0                	mov    eax,esi
c0020979:	5b                   	pop    ebx
c002097a:	5e                   	pop    esi
c002097b:	5f                   	pop    edi
c002097c:	5d                   	pop    ebp
c002097d:	c3                   	ret    

c002097e <IOAPIC::close(int, int, void*)>:
c002097e:	b8 00 00 00 00       	mov    eax,0x0
c0020983:	c3                   	ret    

c0020984 <apicGetBase()>:
c0020984:	55                   	push   ebp
c0020985:	89 e5                	mov    ebp,esp
c0020987:	83 ec 08             	sub    esp,0x8
c002098a:	83 ec 0c             	sub    esp,0xc
c002098d:	68 58 5e 02 c0       	push   0xc0025e58
c0020992:	e8 93 f4 fe ff       	call   c000fe2a <KePanic(char const*)>
c0020997:	83 c4 10             	add    esp,0x10
c002099a:	b8 00 00 00 00       	mov    eax,0x0
c002099f:	c9                   	leave  
c00209a0:	c3                   	ret    
c00209a1:	90                   	nop

c00209a2 <IOAPIC::IOAPIC()>:
c00209a2:	83 ec 0c             	sub    esp,0xc
c00209a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209a9:	83 ec 08             	sub    esp,0x8
c00209ac:	68 67 5e 02 c0       	push   0xc0025e67
c00209b1:	50                   	push   eax
c00209b2:	e8 45 91 fe ff       	call   c0009afc <Device::Device(char const*)>
c00209b7:	83 c4 10             	add    esp,0x10
c00209ba:	ba 88 5e 02 c0       	mov    edx,0xc0025e88
c00209bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209c3:	89 10                	mov    DWORD PTR [eax],edx
c00209c5:	90                   	nop
c00209c6:	83 c4 0c             	add    esp,0xc
c00209c9:	c3                   	ret    

c00209ca <apicOpen()>:
c00209ca:	55                   	push   ebp
c00209cb:	89 e5                	mov    ebp,esp
c00209cd:	53                   	push   ebx
c00209ce:	83 ec 34             	sub    esp,0x34
c00209d1:	83 ec 0c             	sub    esp,0xc
c00209d4:	68 6f 5e 02 c0       	push   0xc0025e6f
c00209d9:	e8 70 65 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00209de:	83 c4 10             	add    esp,0x10
c00209e1:	a0 a0 f4 02 c0       	mov    al,ds:0xc002f4a0
c00209e6:	83 f0 01             	xor    eax,0x1
c00209e9:	0f b6 c0             	movzx  eax,al
c00209ec:	85 c0                	test   eax,eax
c00209ee:	0f 84 a3 00 00 00    	je     c0020a97 <apicOpen()+0xcd>
c00209f4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00209f8:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c00209fd:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020a01:	0f b6 c0             	movzx  eax,al
c0020a04:	39 c2                	cmp    edx,eax
c0020a06:	0f 83 84 00 00 00    	jae    c0020a90 <apicOpen()+0xc6>
c0020a0c:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0020a13:	83 ec 0c             	sub    esp,0xc
c0020a16:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020a19:	e8 c6 f0 fe ff       	call   c000fae4 <malloc>
c0020a1e:	83 c4 10             	add    esp,0x10
c0020a21:	89 c3                	mov    ebx,eax
c0020a23:	83 ec 0c             	sub    esp,0xc
c0020a26:	53                   	push   ebx
c0020a27:	e8 76 ff ff ff       	call   c00209a2 <IOAPIC::IOAPIC()>
c0020a2c:	83 c4 10             	add    esp,0x10
c0020a2f:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0020a32:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0020a36:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020a39:	89 14 85 80 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b80],edx
c0020a40:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c0020a45:	83 c0 01             	add    eax,0x1
c0020a48:	a3 60 f4 02 c0       	mov    ds:0xc002f460,eax
c0020a4d:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0020a52:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0020a58:	83 ec 08             	sub    esp,0x8
c0020a5b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020a5e:	50                   	push   eax
c0020a5f:	e8 36 8f fe ff       	call   c000999a <Device::addChild(Device*)>
c0020a64:	83 c4 10             	add    esp,0x10
c0020a67:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020a6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a6c:	83 c0 08             	add    eax,0x8
c0020a6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a71:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020a75:	6a 00                	push   0x0
c0020a77:	6a 00                	push   0x0
c0020a79:	52                   	push   edx
c0020a7a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020a7d:	ff d0                	call   eax
c0020a7f:	83 c4 10             	add    esp,0x10
c0020a82:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0020a85:	83 c0 01             	add    eax,0x1
c0020a88:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0020a8b:	e9 68 ff ff ff       	jmp    c00209f8 <apicOpen()+0x2e>
c0020a90:	c6 05 a0 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4a0,0x1
c0020a97:	e8 e8 fe ff ff       	call   c0020984 <apicGetBase()>
c0020a9c:	05 f0 00 00 00       	add    eax,0xf0
c0020aa1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020aa4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0020aa9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0020aac:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0020ab3:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0020aba:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020abd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0020ac0:	89 10                	mov    DWORD PTR [eax],edx
c0020ac2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0020ac9:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0020ace:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0020ad1:	7d 7c                	jge    c0020b4f <apicOpen()+0x185>
c0020ad3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020ad6:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020add:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0020ae0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020ae3:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020aea:	c1 e8 08             	shr    eax,0x8
c0020aed:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0020af1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020af4:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020afb:	c1 e8 18             	shr    eax,0x18
c0020afe:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0020b01:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0020b05:	3d ff 00 00 00       	cmp    eax,0xff
c0020b0a:	75 3a                	jne    c0020b46 <apicOpen()+0x17c>
c0020b0c:	e8 73 fe ff ff       	call   c0020984 <apicGetBase()>
c0020b11:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0020b15:	83 fa 01             	cmp    edx,0x1
c0020b18:	75 07                	jne    c0020b21 <apicOpen()+0x157>
c0020b1a:	ba 60 03 00 00       	mov    edx,0x360
c0020b1f:	eb 05                	jmp    c0020b26 <apicOpen()+0x15c>
c0020b21:	ba 50 03 00 00       	mov    edx,0x350
c0020b26:	01 d0                	add    eax,edx
c0020b28:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020b2b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020b2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b30:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0020b33:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0020b3a:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0020b3e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020b41:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0020b44:	89 10                	mov    DWORD PTR [eax],edx
c0020b46:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0020b4a:	e9 7a ff ff ff       	jmp    c0020ac9 <apicOpen()+0xff>
c0020b4f:	90                   	nop
c0020b50:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020b53:	c9                   	leave  
c0020b54:	c3                   	ret    
c0020b55:	90                   	nop

c0020b56 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0020b56:	55                   	push   ebp
c0020b57:	89 e5                	mov    ebp,esp
c0020b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020b62:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020b65:	72 1d                	jb     c0020b84 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b6a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020b70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b73:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020b79:	01 d0                	add    eax,edx
c0020b7b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020b7e:	73 04                	jae    c0020b84 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020b80:	b0 01                	mov    al,0x1
c0020b82:	eb 02                	jmp    c0020b86 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020b84:	b0 00                	mov    al,0x0
c0020b86:	5d                   	pop    ebp
c0020b87:	c3                   	ret    

c0020b88 <IOAPIC::read(int)>:
c0020b88:	55                   	push   ebp
c0020b89:	89 e5                	mov    ebp,esp
c0020b8b:	83 ec 10             	sub    esp,0x10
c0020b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b91:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020b97:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020b9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020b9d:	0f b6 d0             	movzx  edx,al
c0020ba0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020ba3:	89 10                	mov    DWORD PTR [eax],edx
c0020ba5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020ba8:	83 c0 10             	add    eax,0x10
c0020bab:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bad:	c9                   	leave  
c0020bae:	c3                   	ret    
c0020baf:	90                   	nop

c0020bb0 <IOAPIC::open(int, int, void*)>:
c0020bb0:	55                   	push   ebp
c0020bb1:	89 e5                	mov    ebp,esp
c0020bb3:	57                   	push   edi
c0020bb4:	56                   	push   esi
c0020bb5:	53                   	push   ebx
c0020bb6:	83 ec 04             	sub    esp,0x4
c0020bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020bbc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020bbf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020bc8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020bce:	8b 14 85 80 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4180]
c0020bd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020bd8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020bde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020be1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020be7:	8b 14 85 00 bf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4100]
c0020bee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020bf1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020bfa:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020c03:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020c09:	0f b6 f0             	movzx  esi,al
c0020c0c:	89 d0                	mov    eax,edx
c0020c0e:	ba 00 00 00 00       	mov    edx,0x0
c0020c13:	89 c7                	mov    edi,eax
c0020c15:	83 e7 ff             	and    edi,0xffffffff
c0020c18:	89 f9                	mov    ecx,edi
c0020c1a:	0f b6 da             	movzx  ebx,dl
c0020c1d:	89 c8                	mov    eax,ecx
c0020c1f:	89 da                	mov    edx,ebx
c0020c21:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020c24:	8d 5e 08             	lea    ebx,[esi+0x8]
c0020c27:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020c2b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020c2f:	83 e0 00             	and    eax,0x0
c0020c32:	09 d0                	or     eax,edx
c0020c34:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020c38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020c3b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020c41:	8d 50 01             	lea    edx,[eax+0x1]
c0020c44:	88 d1                	mov    cl,dl
c0020c46:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0020c49:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0020c4f:	0f b6 d0             	movzx  edx,al
c0020c52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020c55:	83 c2 08             	add    edx,0x8
c0020c58:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020c5c:	0f b6 c9             	movzx  ecx,cl
c0020c5f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020c65:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020c69:	6a 01                	push   0x1
c0020c6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020c6e:	e8 15 ff ff ff       	call   c0020b88 <IOAPIC::read(int)>
c0020c73:	83 c4 08             	add    esp,0x8
c0020c76:	c1 f8 10             	sar    eax,0x10
c0020c79:	0f b6 c0             	movzx  eax,al
c0020c7c:	8d 50 01             	lea    edx,[eax+0x1]
c0020c7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020c82:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020c88:	b8 00 00 00 00       	mov    eax,0x0
c0020c8d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020c90:	5b                   	pop    ebx
c0020c91:	5e                   	pop    esi
c0020c92:	5f                   	pop    edi
c0020c93:	5d                   	pop    ebp
c0020c94:	c3                   	ret    
c0020c95:	90                   	nop

c0020c96 <IOAPIC::write(int, int)>:
c0020c96:	55                   	push   ebp
c0020c97:	89 e5                	mov    ebp,esp
c0020c99:	83 ec 10             	sub    esp,0x10
c0020c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020c9f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020ca5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020ca8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020cab:	0f b6 d0             	movzx  edx,al
c0020cae:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020cb1:	89 10                	mov    DWORD PTR [eax],edx
c0020cb3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020cb6:	8d 50 10             	lea    edx,[eax+0x10]
c0020cb9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020cbc:	89 02                	mov    DWORD PTR [edx],eax
c0020cbe:	90                   	nop
c0020cbf:	c9                   	leave  
c0020cc0:	c3                   	ret    
c0020cc1:	90                   	nop

c0020cc2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020cc2:	55                   	push   ebp
c0020cc3:	89 e5                	mov    ebp,esp
c0020cc5:	53                   	push   ebx
c0020cc6:	83 ec 2c             	sub    esp,0x2c
c0020cc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020ccc:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020ccf:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020cd2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020cd5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020cd8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020cdb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020cde:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020ce1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020ce4:	88 d8                	mov    al,bl
c0020ce6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020ce9:	88 c8                	mov    al,cl
c0020ceb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020cee:	88 d0                	mov    al,dl
c0020cf0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020cf3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020cf7:	83 c0 08             	add    eax,0x8
c0020cfa:	d1 e0                	shl    eax,1
c0020cfc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020cff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020d03:	83 c0 08             	add    eax,0x8
c0020d06:	d1 e0                	shl    eax,1
c0020d08:	83 c0 01             	add    eax,0x1
c0020d0b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020d0e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020d11:	50                   	push   eax
c0020d12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020d15:	e8 6e fe ff ff       	call   c0020b88 <IOAPIC::read(int)>
c0020d1a:	83 c4 08             	add    esp,0x8
c0020d1d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020d20:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020d27:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020d2a:	c1 e0 18             	shl    eax,0x18
c0020d2d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020d30:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020d33:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020d36:	52                   	push   edx
c0020d37:	50                   	push   eax
c0020d38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020d3b:	e8 56 ff ff ff       	call   c0020c96 <IOAPIC::write(int, int)>
c0020d40:	83 c4 0c             	add    esp,0xc
c0020d43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020d46:	50                   	push   eax
c0020d47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020d4a:	e8 39 fe ff ff       	call   c0020b88 <IOAPIC::read(int)>
c0020d4f:	83 c4 08             	add    esp,0x8
c0020d52:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020d55:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020d5c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020d63:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020d6a:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0020d6e:	85 c0                	test   eax,eax
c0020d70:	74 09                	je     c0020d7b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0020d72:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020d79:	eb 07                	jmp    c0020d82 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0020d7b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020d82:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0020d86:	85 c0                	test   eax,eax
c0020d88:	74 09                	je     c0020d93 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0020d8a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020d91:	eb 07                	jmp    c0020d9a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0020d93:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020d9a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020da1:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0020da5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020da8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020dab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020dae:	52                   	push   edx
c0020daf:	50                   	push   eax
c0020db0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020db3:	e8 de fe ff ff       	call   c0020c96 <IOAPIC::write(int, int)>
c0020db8:	83 c4 0c             	add    esp,0xc
c0020dbb:	90                   	nop
c0020dbc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020dbf:	c9                   	leave  
c0020dc0:	c3                   	ret    
c0020dc1:	66 90                	xchg   ax,ax
c0020dc3:	90                   	nop

c0020dc4 <APICTimer::close(int, int, void*)>:
c0020dc4:	b8 00 00 00 00       	mov    eax,0x0
c0020dc9:	c3                   	ret    
c0020dca:	66 90                	xchg   ax,ax

c0020dcc <apicTimerHandler(regs*, void*)>:
c0020dcc:	83 ec 0c             	sub    esp,0xc
c0020dcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020dd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020dd5:	b8 10 27 00 00       	mov    eax,0x2710
c0020dda:	ba 00 00 00 00       	mov    edx,0x0
c0020ddf:	f7 f1                	div    ecx
c0020de1:	83 ec 0c             	sub    esp,0xc
c0020de4:	50                   	push   eax
c0020de5:	e8 86 a2 fe ff       	call   c000b070 <timerHandler(unsigned int)>
c0020dea:	83 c4 10             	add    esp,0x10
c0020ded:	90                   	nop
c0020dee:	83 c4 0c             	add    esp,0xc
c0020df1:	c3                   	ret    
c0020df2:	66 90                	xchg   ax,ax

c0020df4 <APICTimer::open(int, int, void*)>:
c0020df4:	83 ec 0c             	sub    esp,0xc
c0020df7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0020dfd:	83 c0 24             	add    eax,0x24
c0020e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e02:	83 ec 08             	sub    esp,0x8
c0020e05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e0d:	ff d0                	call   eax
c0020e0f:	83 c4 10             	add    esp,0x10
c0020e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020e1a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020e28:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020e2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020e32:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020e38:	83 ec 0c             	sub    esp,0xc
c0020e3b:	51                   	push   ecx
c0020e3c:	6a 01                	push   0x1
c0020e3e:	68 cc 0d 02 c0       	push   0xc0020dcc
c0020e43:	52                   	push   edx
c0020e44:	50                   	push   eax
c0020e45:	e8 fc 8a fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020e4a:	83 c4 20             	add    esp,0x20
c0020e4d:	89 c2                	mov    edx,eax
c0020e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e53:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020e59:	b8 00 00 00 00       	mov    eax,0x0
c0020e5e:	83 c4 0c             	add    esp,0xc
c0020e61:	c3                   	ret    
c0020e62:	66 90                	xchg   ax,ax

c0020e64 <APICTimer::write(int)>:
c0020e64:	83 ec 0c             	sub    esp,0xc
c0020e67:	83 ec 0c             	sub    esp,0xc
c0020e6a:	68 ac 5e 02 c0       	push   0xc0025eac
c0020e6f:	e8 b6 ef fe ff       	call   c000fe2a <KePanic(char const*)>
c0020e74:	83 c4 10             	add    esp,0x10
c0020e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020e7f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020e85:	90                   	nop
c0020e86:	83 c4 0c             	add    esp,0xc
c0020e89:	c3                   	ret    
c0020e8a:	66 90                	xchg   ax,ax

c0020e8c <APICTimer::APICTimer()>:
c0020e8c:	83 ec 0c             	sub    esp,0xc
c0020e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e93:	83 ec 08             	sub    esp,0x8
c0020e96:	68 bc 5e 02 c0       	push   0xc0025ebc
c0020e9b:	50                   	push   eax
c0020e9c:	e8 03 a1 fe ff       	call   c000afa4 <Timer::Timer(char const*)>
c0020ea1:	83 c4 10             	add    esp,0x10
c0020ea4:	ba d0 5e 02 c0       	mov    edx,0xc0025ed0
c0020ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ead:	89 10                	mov    DWORD PTR [eax],edx
c0020eaf:	90                   	nop
c0020eb0:	83 c4 0c             	add    esp,0xc
c0020eb3:	c3                   	ret    

c0020eb4 <PIT::write(int)>:
c0020eb4:	83 ec 10             	sub    esp,0x10
c0020eb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ebb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020ebf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020ec5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ec9:	a3 a4 f4 02 c0       	mov    ds:0xc002f4a4,eax
c0020ece:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020ed3:	89 c2                	mov    edx,eax
c0020ed5:	c1 fa 1f             	sar    edx,0x1f
c0020ed8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020edc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ee0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020ee7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020eec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020ef0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020ef5:	ee                   	out    dx,al
c0020ef6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020efa:	0f b6 c0             	movzx  eax,al
c0020efd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020f04:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020f08:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020f0c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020f11:	ee                   	out    dx,al
c0020f12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f16:	c1 f8 08             	sar    eax,0x8
c0020f19:	0f b6 c0             	movzx  eax,al
c0020f1c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020f23:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020f27:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020f2b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020f30:	ee                   	out    dx,al
c0020f31:	90                   	nop
c0020f32:	83 c4 10             	add    esp,0x10
c0020f35:	c3                   	ret    
c0020f36:	66 90                	xchg   ax,ax

c0020f38 <pitHandler(regs*, void*)>:
c0020f38:	83 ec 0c             	sub    esp,0xc
c0020f3b:	8b 0d a4 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f4a4
c0020f41:	b8 10 27 00 00       	mov    eax,0x2710
c0020f46:	89 c2                	mov    edx,eax
c0020f48:	c1 fa 1f             	sar    edx,0x1f
c0020f4b:	f7 f9                	idiv   ecx
c0020f4d:	83 ec 0c             	sub    esp,0xc
c0020f50:	50                   	push   eax
c0020f51:	e8 1a a1 fe ff       	call   c000b070 <timerHandler(unsigned int)>
c0020f56:	83 c4 10             	add    esp,0x10
c0020f59:	90                   	nop
c0020f5a:	83 c4 0c             	add    esp,0xc
c0020f5d:	c3                   	ret    
c0020f5e:	66 90                	xchg   ax,ax

c0020f60 <PIT::open(int, int, void*)>:
c0020f60:	83 ec 0c             	sub    esp,0xc
c0020f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f67:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f69:	83 c0 24             	add    eax,0x24
c0020f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f6e:	83 ec 08             	sub    esp,0x8
c0020f71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f79:	ff d0                	call   eax
c0020f7b:	83 c4 10             	add    esp,0x10
c0020f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f82:	83 ec 0c             	sub    esp,0xc
c0020f85:	6a 00                	push   0x0
c0020f87:	6a 01                	push   0x1
c0020f89:	68 38 0f 02 c0       	push   0xc0020f38
c0020f8e:	6a 00                	push   0x0
c0020f90:	50                   	push   eax
c0020f91:	e8 b0 89 fe ff       	call   c0009946 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020f96:	83 c4 20             	add    esp,0x20
c0020f99:	89 c2                	mov    edx,eax
c0020f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f9f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020fa5:	b8 00 00 00 00       	mov    eax,0x0
c0020faa:	83 c4 0c             	add    esp,0xc
c0020fad:	c3                   	ret    
c0020fae:	66 90                	xchg   ax,ax

c0020fb0 <PIT::close(int, int, void*)>:
c0020fb0:	83 ec 0c             	sub    esp,0xc
c0020fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fb7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fc5:	6a 01                	push   0x1
c0020fc7:	68 38 0f 02 c0       	push   0xc0020f38
c0020fcc:	6a 00                	push   0x0
c0020fce:	50                   	push   eax
c0020fcf:	e8 a8 89 fe ff       	call   c000997c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020fd4:	83 c4 10             	add    esp,0x10
c0020fd7:	b8 00 00 00 00       	mov    eax,0x0
c0020fdc:	83 c4 0c             	add    esp,0xc
c0020fdf:	c3                   	ret    

c0020fe0 <PIT::PIT()>:
c0020fe0:	83 ec 0c             	sub    esp,0xc
c0020fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fe7:	83 ec 08             	sub    esp,0x8
c0020fea:	68 f8 5e 02 c0       	push   0xc0025ef8
c0020fef:	50                   	push   eax
c0020ff0:	e8 af 9f fe ff       	call   c000afa4 <Timer::Timer(char const*)>
c0020ff5:	83 c4 10             	add    esp,0x10
c0020ff8:	ba 20 5f 02 c0       	mov    edx,0xc0025f20
c0020ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021001:	89 10                	mov    DWORD PTR [eax],edx
c0021003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021007:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002100d:	0f b6 d0             	movzx  edx,al
c0021010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021014:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002101b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002101f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021025:	0f b6 d0             	movzx  edx,al
c0021028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002102c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0021031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021035:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002103b:	8d 50 01             	lea    edx,[eax+0x1]
c002103e:	88 d1                	mov    cl,dl
c0021040:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021044:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002104a:	0f b6 d0             	movzx  edx,al
c002104d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021051:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021055:	83 e1 3f             	and    ecx,0x3f
c0021058:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002105c:	90                   	nop
c002105d:	83 c4 0c             	add    esp,0xc
c0021060:	c3                   	ret    
c0021061:	66 90                	xchg   ax,ax
c0021063:	66 90                	xchg   ax,ax
c0021065:	66 90                	xchg   ax,ax
c0021067:	66 90                	xchg   ax,ax
c0021069:	66 90                	xchg   ax,ax
c002106b:	66 90                	xchg   ax,ax
c002106d:	66 90                	xchg   ax,ax
c002106f:	90                   	nop

c0021070 <avxDetect>:
c0021070:	b8 01 00 00 00       	mov    eax,0x1
c0021075:	0f a2                	cpuid  
c0021077:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002107d:	74 15                	je     c0021094 <avxDetect.noAVX>
c002107f:	b8 01 00 00 00       	mov    eax,0x1
c0021084:	0f a2                	cpuid  
c0021086:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002108c:	74 06                	je     c0021094 <avxDetect.noAVX>
c002108e:	b8 01 00 00 00       	mov    eax,0x1
c0021093:	c3                   	ret    

c0021094 <avxDetect.noAVX>:
c0021094:	b8 00 00 00 00       	mov    eax,0x0
c0021099:	c3                   	ret    

c002109a <avxSave>:
c002109a:	53                   	push   ebx
c002109b:	52                   	push   edx
c002109c:	31 c0                	xor    eax,eax
c002109e:	48                   	dec    eax
c002109f:	89 c2                	mov    edx,eax
c00210a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00210a5:	0f ae 23             	xsave  [ebx]
c00210a8:	5a                   	pop    edx
c00210a9:	5b                   	pop    ebx
c00210aa:	c3                   	ret    

c00210ab <avxLoad>:
c00210ab:	53                   	push   ebx
c00210ac:	52                   	push   edx
c00210ad:	31 c0                	xor    eax,eax
c00210af:	48                   	dec    eax
c00210b0:	89 c2                	mov    edx,eax
c00210b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00210b6:	0f ae 2b             	xrstor [ebx]
c00210b9:	5a                   	pop    edx
c00210ba:	5b                   	pop    ebx
c00210bb:	c3                   	ret    

c00210bc <avxInit>:
c00210bc:	e8 17 03 00 00       	call   c00213d8 <sseInit>
c00210c1:	50                   	push   eax
c00210c2:	51                   	push   ecx
c00210c3:	0f 20 e0             	mov    eax,cr4
c00210c6:	0d 00 00 04 00       	or     eax,0x40000
c00210cb:	0f 22 e0             	mov    cr4,eax
c00210ce:	31 c9                	xor    ecx,ecx
c00210d0:	0f 01 d0             	xgetbv 
c00210d3:	0d 07 00 00 00       	or     eax,0x7
c00210d8:	0f 01 d1             	xsetbv 
c00210db:	59                   	pop    ecx
c00210dc:	58                   	pop    eax
c00210dd:	c3                   	ret    

c00210de <avxClose>:
c00210de:	c3                   	ret    
c00210df:	90                   	nop

c00210e0 <isr0>:
c00210e0:	fa                   	cli    
c00210e1:	68 00 00 00 00       	push   0x0
c00210e6:	68 00 00 00 00       	push   0x0
c00210eb:	e9 56 01 00 00       	jmp    c0021246 <int_common_stub>

c00210f0 <isr1>:
c00210f0:	fa                   	cli    
c00210f1:	6a 00                	push   0x0
c00210f3:	6a 01                	push   0x1
c00210f5:	e9 4c 01 00 00       	jmp    c0021246 <int_common_stub>

c00210fa <isr2>:
c00210fa:	fa                   	cli    
c00210fb:	6a 00                	push   0x0
c00210fd:	6a 02                	push   0x2
c00210ff:	e9 42 01 00 00       	jmp    c0021246 <int_common_stub>

c0021104 <isr3>:
c0021104:	fa                   	cli    
c0021105:	6a 00                	push   0x0
c0021107:	6a 03                	push   0x3
c0021109:	e9 38 01 00 00       	jmp    c0021246 <int_common_stub>

c002110e <isr4>:
c002110e:	fa                   	cli    
c002110f:	6a 00                	push   0x0
c0021111:	6a 04                	push   0x4
c0021113:	e9 2e 01 00 00       	jmp    c0021246 <int_common_stub>

c0021118 <isr5>:
c0021118:	fa                   	cli    
c0021119:	6a 00                	push   0x0
c002111b:	6a 05                	push   0x5
c002111d:	e9 24 01 00 00       	jmp    c0021246 <int_common_stub>

c0021122 <isr6>:
c0021122:	fa                   	cli    
c0021123:	6a 00                	push   0x0
c0021125:	6a 06                	push   0x6
c0021127:	e9 1a 01 00 00       	jmp    c0021246 <int_common_stub>

c002112c <isr7>:
c002112c:	fa                   	cli    
c002112d:	6a 00                	push   0x0
c002112f:	6a 07                	push   0x7
c0021131:	e9 10 01 00 00       	jmp    c0021246 <int_common_stub>

c0021136 <isr8>:
c0021136:	fa                   	cli    
c0021137:	6a 08                	push   0x8
c0021139:	e9 08 01 00 00       	jmp    c0021246 <int_common_stub>

c002113e <isr9>:
c002113e:	fa                   	cli    
c002113f:	6a 00                	push   0x0
c0021141:	6a 09                	push   0x9
c0021143:	e9 fe 00 00 00       	jmp    c0021246 <int_common_stub>

c0021148 <isr10>:
c0021148:	fa                   	cli    
c0021149:	6a 0a                	push   0xa
c002114b:	e9 f6 00 00 00       	jmp    c0021246 <int_common_stub>

c0021150 <isr11>:
c0021150:	fa                   	cli    
c0021151:	6a 0b                	push   0xb
c0021153:	e9 ee 00 00 00       	jmp    c0021246 <int_common_stub>

c0021158 <isr12>:
c0021158:	fa                   	cli    
c0021159:	6a 0c                	push   0xc
c002115b:	e9 e6 00 00 00       	jmp    c0021246 <int_common_stub>

c0021160 <isr13>:
c0021160:	fa                   	cli    
c0021161:	6a 0d                	push   0xd
c0021163:	53                   	push   ebx
c0021164:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021168:	81 fb 05 13 02 c0    	cmp    ebx,0xc0021305
c002116e:	5b                   	pop    ebx
c002116f:	0f 84 92 01 00 00    	je     c0021307 <finishSignal2>
c0021175:	e9 cc 00 00 00       	jmp    c0021246 <int_common_stub>

c002117a <isr14>:
c002117a:	fa                   	cli    
c002117b:	6a 0e                	push   0xe
c002117d:	e9 c4 00 00 00       	jmp    c0021246 <int_common_stub>

c0021182 <isr15>:
c0021182:	fa                   	cli    
c0021183:	6a 00                	push   0x0
c0021185:	6a 0f                	push   0xf
c0021187:	e9 ba 00 00 00       	jmp    c0021246 <int_common_stub>

c002118c <isr16>:
c002118c:	fa                   	cli    
c002118d:	6a 00                	push   0x0
c002118f:	6a 10                	push   0x10
c0021191:	e9 b0 00 00 00       	jmp    c0021246 <int_common_stub>

c0021196 <isr17>:
c0021196:	fa                   	cli    
c0021197:	6a 00                	push   0x0
c0021199:	6a 11                	push   0x11
c002119b:	e9 a6 00 00 00       	jmp    c0021246 <int_common_stub>

c00211a0 <isr18>:
c00211a0:	fa                   	cli    
c00211a1:	6a 00                	push   0x0
c00211a3:	6a 12                	push   0x12
c00211a5:	e9 9c 00 00 00       	jmp    c0021246 <int_common_stub>

c00211aa <irq3>:
c00211aa:	fa                   	cli    
c00211ab:	6a 00                	push   0x0
c00211ad:	6a 23                	push   0x23
c00211af:	e9 92 00 00 00       	jmp    c0021246 <int_common_stub>

c00211b4 <irq4>:
c00211b4:	fa                   	cli    
c00211b5:	6a 00                	push   0x0
c00211b7:	6a 24                	push   0x24
c00211b9:	e9 88 00 00 00       	jmp    c0021246 <int_common_stub>

c00211be <irq5>:
c00211be:	fa                   	cli    
c00211bf:	6a 00                	push   0x0
c00211c1:	6a 25                	push   0x25
c00211c3:	e9 7e 00 00 00       	jmp    c0021246 <int_common_stub>

c00211c8 <irq6>:
c00211c8:	fa                   	cli    
c00211c9:	6a 00                	push   0x0
c00211cb:	6a 26                	push   0x26
c00211cd:	e9 74 00 00 00       	jmp    c0021246 <int_common_stub>

c00211d2 <irq7>:
c00211d2:	fa                   	cli    
c00211d3:	6a 00                	push   0x0
c00211d5:	6a 27                	push   0x27
c00211d7:	e9 6a 00 00 00       	jmp    c0021246 <int_common_stub>

c00211dc <irq8>:
c00211dc:	fa                   	cli    
c00211dd:	6a 00                	push   0x0
c00211df:	6a 28                	push   0x28
c00211e1:	e9 60 00 00 00       	jmp    c0021246 <int_common_stub>

c00211e6 <irq9>:
c00211e6:	fa                   	cli    
c00211e7:	6a 00                	push   0x0
c00211e9:	6a 29                	push   0x29
c00211eb:	e9 56 00 00 00       	jmp    c0021246 <int_common_stub>

c00211f0 <irq10>:
c00211f0:	fa                   	cli    
c00211f1:	6a 00                	push   0x0
c00211f3:	6a 2a                	push   0x2a
c00211f5:	e9 4c 00 00 00       	jmp    c0021246 <int_common_stub>

c00211fa <irq11>:
c00211fa:	fa                   	cli    
c00211fb:	6a 00                	push   0x0
c00211fd:	6a 2b                	push   0x2b
c00211ff:	e9 42 00 00 00       	jmp    c0021246 <int_common_stub>

c0021204 <irq12>:
c0021204:	fa                   	cli    
c0021205:	6a 00                	push   0x0
c0021207:	6a 2c                	push   0x2c
c0021209:	e9 38 00 00 00       	jmp    c0021246 <int_common_stub>

c002120e <irq13>:
c002120e:	fa                   	cli    
c002120f:	6a 00                	push   0x0
c0021211:	6a 2d                	push   0x2d
c0021213:	e9 2e 00 00 00       	jmp    c0021246 <int_common_stub>

c0021218 <irq14>:
c0021218:	fa                   	cli    
c0021219:	6a 00                	push   0x0
c002121b:	6a 2e                	push   0x2e
c002121d:	e9 24 00 00 00       	jmp    c0021246 <int_common_stub>

c0021222 <irq15>:
c0021222:	fa                   	cli    
c0021223:	6a 00                	push   0x0
c0021225:	6a 2f                	push   0x2f
c0021227:	e9 1a 00 00 00       	jmp    c0021246 <int_common_stub>

c002122c <irq1>:
c002122c:	fa                   	cli    
c002122d:	6a 00                	push   0x0
c002122f:	6a 21                	push   0x21
c0021231:	eb 13                	jmp    c0021246 <int_common_stub>

c0021233 <irq2>:
c0021233:	fa                   	cli    
c0021234:	6a 00                	push   0x0
c0021236:	6a 22                	push   0x22
c0021238:	eb 0c                	jmp    c0021246 <int_common_stub>

c002123a <isr96>:
c002123a:	6a 00                	push   0x0
c002123c:	6a 60                	push   0x60
c002123e:	fb                   	sti    
c002123f:	eb 05                	jmp    c0021246 <int_common_stub>

c0021241 <irq0>:
c0021241:	fa                   	cli    
c0021242:	6a 00                	push   0x0
c0021244:	6a 20                	push   0x20

c0021246 <int_common_stub>:
c0021246:	60                   	pusha  
c0021247:	1e                   	push   ds
c0021248:	06                   	push   es
c0021249:	0f a0                	push   fs
c002124b:	0f a8                	push   gs
c002124d:	66 b8 10 00          	mov    ax,0x10
c0021251:	66 8e d8             	mov    ds,ax
c0021254:	66 8e c0             	mov    es,ax
c0021257:	66 8e e0             	mov    fs,ax
c002125a:	66 8e e8             	mov    gs,ax
c002125d:	54                   	push   esp
c002125e:	fc                   	cld    
c002125f:	e8 e4 d6 fe ff       	call   c000e948 <int_handler>
c0021264:	81 c4 04 00 00 00    	add    esp,0x4
c002126a:	0f a9                	pop    gs
c002126c:	0f a1                	pop    fs
c002126e:	07                   	pop    es
c002126f:	1f                   	pop    ds
c0021270:	e8 31 ff fe ff       	call   c00111a6 <KiCheckSignalZ>
c0021275:	85 c0                	test   eax,eax
c0021277:	75 08                	jne    c0021281 <doSignals>
c0021279:	61                   	popa   
c002127a:	81 c4 08 00 00 00    	add    esp,0x8
c0021280:	cf                   	iret   

c0021281 <doSignals>:
c0021281:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021286:	61                   	popa   
c0021287:	53                   	push   ebx
c0021288:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002128e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021291:	5b                   	pop    ebx
c0021292:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021297:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002129a:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002129d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00212a0:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c00212a3:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c00212a6:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c00212a9:	81 c4 08 00 00 00    	add    esp,0x8
c00212af:	5e                   	pop    esi
c00212b0:	5b                   	pop    ebx
c00212b1:	59                   	pop    ecx
c00212b2:	5a                   	pop    edx
c00212b3:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c00212b6:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c00212b9:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00212bc:	52                   	push   edx
c00212bd:	51                   	push   ecx
c00212be:	53                   	push   ebx
c00212bf:	56                   	push   esi
c00212c0:	81 ec 08 00 00 00    	sub    esp,0x8
c00212c6:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00212c9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00212cc:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c00212cf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00212d2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00212d5:	60                   	pusha  
c00212d6:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c00212dc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c00212df:	89 e3                	mov    ebx,esp
c00212e1:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c00212e4:	52                   	push   edx
c00212e5:	68 05 13 02 c0       	push   0xc0021305
c00212ea:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c00212ed:	89 dc                	mov    esp,ebx
c00212ef:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00212f2:	68 23 00 00 00       	push   0x23
c00212f7:	51                   	push   ecx
c00212f8:	68 02 02 00 00       	push   0x202
c00212fd:	68 1b 00 00 00       	push   0x1b
c0021302:	ff 36                	push   DWORD PTR [esi]
c0021304:	cf                   	iret   

c0021305 <finishSignal>:
c0021305:	cd 0f                	int    0xf

c0021307 <finishSignal2>:
c0021307:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002130d:	e8 25 ff fe ff       	call   c0011237 <KiFinishSignalZ>
c0021312:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021318:	68 23 00 00 00       	push   0x23
c002131d:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021320:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021323:	68 1b 00 00 00       	push   0x1b
c0021328:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002132b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002132e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021331:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021334:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021337:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002133a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002133d:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021340:	cf                   	iret   
c0021341:	90                   	nop
c0021342:	90                   	nop
c0021343:	90                   	nop

c0021344 <irq16>:
c0021344:	fa                   	cli    
c0021345:	6a 00                	push   0x0
c0021347:	6a 30                	push   0x30
c0021349:	e9 f8 fe ff ff       	jmp    c0021246 <int_common_stub>

c002134e <irq17>:
c002134e:	fa                   	cli    
c002134f:	6a 00                	push   0x0
c0021351:	6a 31                	push   0x31
c0021353:	e9 ee fe ff ff       	jmp    c0021246 <int_common_stub>

c0021358 <irq18>:
c0021358:	fa                   	cli    
c0021359:	6a 00                	push   0x0
c002135b:	6a 32                	push   0x32
c002135d:	e9 e4 fe ff ff       	jmp    c0021246 <int_common_stub>

c0021362 <irq19>:
c0021362:	fa                   	cli    
c0021363:	6a 00                	push   0x0
c0021365:	6a 33                	push   0x33
c0021367:	e9 da fe ff ff       	jmp    c0021246 <int_common_stub>

c002136c <irq20>:
c002136c:	fa                   	cli    
c002136d:	6a 00                	push   0x0
c002136f:	6a 34                	push   0x34
c0021371:	e9 d0 fe ff ff       	jmp    c0021246 <int_common_stub>

c0021376 <irq21>:
c0021376:	fa                   	cli    
c0021377:	6a 00                	push   0x0
c0021379:	6a 35                	push   0x35
c002137b:	e9 c6 fe ff ff       	jmp    c0021246 <int_common_stub>

c0021380 <irq22>:
c0021380:	fa                   	cli    
c0021381:	6a 00                	push   0x0
c0021383:	6a 36                	push   0x36
c0021385:	e9 bc fe ff ff       	jmp    c0021246 <int_common_stub>

c002138a <irq23>:
c002138a:	fa                   	cli    
c002138b:	6a 00                	push   0x0
c002138d:	6a 37                	push   0x37
c002138f:	e9 b2 fe ff ff       	jmp    c0021246 <int_common_stub>
c0021394:	66 90                	xchg   ax,ax
c0021396:	66 90                	xchg   ax,ax
c0021398:	66 90                	xchg   ax,ax
c002139a:	66 90                	xchg   ax,ax
c002139c:	66 90                	xchg   ax,ax
c002139e:	66 90                	xchg   ax,ax

c00213a0 <i386GetRDRAND>:
c00213a0:	b9 64 00 00 00       	mov    ecx,0x64

c00213a5 <retry>:
c00213a5:	0f c7 f0             	rdrand eax
c00213a8:	72 05                	jb     c00213af <retry.done>
c00213aa:	e2 f9                	loop   c00213a5 <retry>

c00213ac <retry.fail>:
c00213ac:	31 c0                	xor    eax,eax
c00213ae:	c3                   	ret    

c00213af <retry.done>:
c00213af:	c3                   	ret    

c00213b0 <sseDetect>:
c00213b0:	b8 01 00 00 00       	mov    eax,0x1
c00213b5:	0f a2                	cpuid  
c00213b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00213bd:	74 06                	je     c00213c5 <sseDetect.noSSE>
c00213bf:	b8 01 00 00 00       	mov    eax,0x1
c00213c4:	c3                   	ret    

c00213c5 <sseDetect.noSSE>:
c00213c5:	31 c0                	xor    eax,eax
c00213c7:	c3                   	ret    

c00213c8 <sseSave>:
c00213c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213cc:	0f ae 00             	fxsave [eax]
c00213cf:	c3                   	ret    

c00213d0 <sseLoad>:
c00213d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213d4:	0f ae 08             	fxrstor [eax]
c00213d7:	c3                   	ret    

c00213d8 <sseInit>:
c00213d8:	e8 48 00 00 00       	call   c0021425 <x87Init>
c00213dd:	0f 20 e0             	mov    eax,cr4
c00213e0:	66 0d 00 06          	or     ax,0x600
c00213e4:	0f 22 e0             	mov    cr4,eax
c00213e7:	c3                   	ret    

c00213e8 <sseClose>:
c00213e8:	c3                   	ret    
c00213e9:	66 90                	xchg   ax,ax
c00213eb:	66 90                	xchg   ax,ax
c00213ed:	66 90                	xchg   ax,ax
c00213ef:	90                   	nop

c00213f0 <value_37F>:
c00213f0:	7f 03                	jg     c00213f5 <value_37A+0x1>

c00213f2 <value_37E>:
c00213f2:	7e 03                	jle    c00213f7 <x87Detect+0x1>

c00213f4 <value_37A>:
c00213f4:	7a 03                	jp     c00213f9 <x87Detect+0x3>

c00213f6 <x87Detect>:
c00213f6:	53                   	push   ebx
c00213f7:	51                   	push   ecx
c00213f8:	52                   	push   edx
c00213f9:	b8 01 00 00 00       	mov    eax,0x1
c00213fe:	0f a2                	cpuid  
c0021400:	f7 c2 01 00 00 00    	test   edx,0x1
c0021406:	74 06                	je     c002140e <x87Detect.nox87>
c0021408:	b8 01 00 00 00       	mov    eax,0x1
c002140d:	c3                   	ret    

c002140e <x87Detect.nox87>:
c002140e:	b8 00 00 00 00       	mov    eax,0x0
c0021413:	5a                   	pop    edx
c0021414:	59                   	pop    ecx
c0021415:	5b                   	pop    ebx
c0021416:	c3                   	ret    

c0021417 <x87Save>:
c0021417:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002141b:	dd 30                	fnsave [eax]
c002141d:	c3                   	ret    

c002141e <x87Load>:
c002141e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021422:	dd 20                	frstor [eax]
c0021424:	c3                   	ret    

c0021425 <x87Init>:
c0021425:	0f 20 c0             	mov    eax,cr0
c0021428:	66 25 fb ff          	and    ax,0xfffb
c002142c:	66 0d 22 00          	or     ax,0x22
c0021430:	0f 22 c0             	mov    cr0,eax
c0021433:	db e3                	fninit 
c0021435:	0f 06                	clts   
c0021437:	d9 2d f4 13 02 c0    	fldcw  WORD PTR ds:0xc00213f4
c002143d:	c3                   	ret    

c002143e <x87Close>:
c002143e:	c3                   	ret    
c002143f:	90                   	nop

c0021440 <__do_global_ctors_aux>:
c0021440:	a1 f4 23 02 c0       	mov    eax,ds:0xc00223f4
c0021445:	83 f8 ff             	cmp    eax,0xffffffff
c0021448:	74 1a                	je     c0021464 <__do_global_ctors_aux+0x24>
c002144a:	55                   	push   ebp
c002144b:	89 e5                	mov    ebp,esp
c002144d:	53                   	push   ebx
c002144e:	52                   	push   edx
c002144f:	bb f4 23 02 c0       	mov    ebx,0xc00223f4
c0021454:	ff d0                	call   eax
c0021456:	83 eb 04             	sub    ebx,0x4
c0021459:	8b 03                	mov    eax,DWORD PTR [ebx]
c002145b:	83 f8 ff             	cmp    eax,0xffffffff
c002145e:	75 f4                	jne    c0021454 <__do_global_ctors_aux+0x14>
c0021460:	58                   	pop    eax
c0021461:	5b                   	pop    ebx
c0021462:	5d                   	pop    ebp
c0021463:	c3                   	ret    
c0021464:	c3                   	ret    
c0021465:	66 90                	xchg   ax,ax
c0021467:	90                   	nop

c0021468 <__divdi3>:
c0021468:	55                   	push   ebp
c0021469:	57                   	push   edi
c002146a:	56                   	push   esi
c002146b:	53                   	push   ebx
c002146c:	83 ec 1c             	sub    esp,0x1c
c002146f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021473:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021477:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002147a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002147e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021482:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021486:	85 db                	test   ebx,ebx
c0021488:	0f 88 8e 00 00 00    	js     c002151c <__divdi3+0xb4>
c002148e:	89 dd                	mov    ebp,ebx
c0021490:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021498:	89 d3                	mov    ebx,edx
c002149a:	85 d2                	test   edx,edx
c002149c:	79 0d                	jns    c00214ab <__divdi3+0x43>
c002149e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00214a2:	f7 d8                	neg    eax
c00214a4:	83 d2 00             	adc    edx,0x0
c00214a7:	f7 da                	neg    edx
c00214a9:	89 d3                	mov    ebx,edx
c00214ab:	89 c7                	mov    edi,eax
c00214ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00214b0:	85 db                	test   ebx,ebx
c00214b2:	75 48                	jne    c00214fc <__divdi3+0x94>
c00214b4:	39 ef                	cmp    edi,ebp
c00214b6:	76 24                	jbe    c00214dc <__divdi3+0x74>
c00214b8:	89 ea                	mov    edx,ebp
c00214ba:	f7 f7                	div    edi
c00214bc:	89 c1                	mov    ecx,eax
c00214be:	31 f6                	xor    esi,esi
c00214c0:	89 c8                	mov    eax,ecx
c00214c2:	89 f2                	mov    edx,esi
c00214c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00214c8:	85 c9                	test   ecx,ecx
c00214ca:	74 07                	je     c00214d3 <__divdi3+0x6b>
c00214cc:	f7 d8                	neg    eax
c00214ce:	83 d2 00             	adc    edx,0x0
c00214d1:	f7 da                	neg    edx
c00214d3:	83 c4 1c             	add    esp,0x1c
c00214d6:	5b                   	pop    ebx
c00214d7:	5e                   	pop    esi
c00214d8:	5f                   	pop    edi
c00214d9:	5d                   	pop    ebp
c00214da:	c3                   	ret    
c00214db:	90                   	nop
c00214dc:	85 ff                	test   edi,edi
c00214de:	75 0b                	jne    c00214eb <__divdi3+0x83>
c00214e0:	b8 01 00 00 00       	mov    eax,0x1
c00214e5:	31 d2                	xor    edx,edx
c00214e7:	f7 f3                	div    ebx
c00214e9:	89 c7                	mov    edi,eax
c00214eb:	31 d2                	xor    edx,edx
c00214ed:	89 e8                	mov    eax,ebp
c00214ef:	f7 f7                	div    edi
c00214f1:	89 c6                	mov    esi,eax
c00214f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00214f6:	f7 f7                	div    edi
c00214f8:	89 c1                	mov    ecx,eax
c00214fa:	eb c4                	jmp    c00214c0 <__divdi3+0x58>
c00214fc:	39 eb                	cmp    ebx,ebp
c00214fe:	77 3c                	ja     c002153c <__divdi3+0xd4>
c0021500:	0f bd f3             	bsr    esi,ebx
c0021503:	83 f6 1f             	xor    esi,0x1f
c0021506:	75 40                	jne    c0021548 <__divdi3+0xe0>
c0021508:	39 eb                	cmp    ebx,ebp
c002150a:	72 09                	jb     c0021515 <__divdi3+0xad>
c002150c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002150f:	0f 87 97 00 00 00    	ja     c00215ac <__divdi3+0x144>
c0021515:	b9 01 00 00 00       	mov    ecx,0x1
c002151a:	eb a4                	jmp    c00214c0 <__divdi3+0x58>
c002151c:	f7 d9                	neg    ecx
c002151e:	83 d3 00             	adc    ebx,0x0
c0021521:	f7 db                	neg    ebx
c0021523:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021526:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002152a:	89 dd                	mov    ebp,ebx
c002152c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021534:	e9 5f ff ff ff       	jmp    c0021498 <__divdi3+0x30>
c0021539:	8d 76 00             	lea    esi,[esi+0x0]
c002153c:	31 f6                	xor    esi,esi
c002153e:	31 c9                	xor    ecx,ecx
c0021540:	e9 7b ff ff ff       	jmp    c00214c0 <__divdi3+0x58>
c0021545:	8d 76 00             	lea    esi,[esi+0x0]
c0021548:	b8 20 00 00 00       	mov    eax,0x20
c002154d:	29 f0                	sub    eax,esi
c002154f:	89 f1                	mov    ecx,esi
c0021551:	d3 e3                	shl    ebx,cl
c0021553:	89 fa                	mov    edx,edi
c0021555:	88 c1                	mov    cl,al
c0021557:	d3 ea                	shr    edx,cl
c0021559:	09 da                	or     edx,ebx
c002155b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002155f:	89 f1                	mov    ecx,esi
c0021561:	d3 e7                	shl    edi,cl
c0021563:	89 eb                	mov    ebx,ebp
c0021565:	88 c1                	mov    cl,al
c0021567:	d3 eb                	shr    ebx,cl
c0021569:	89 f1                	mov    ecx,esi
c002156b:	d3 e5                	shl    ebp,cl
c002156d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021570:	88 c1                	mov    cl,al
c0021572:	d3 ea                	shr    edx,cl
c0021574:	09 d5                	or     ebp,edx
c0021576:	89 e8                	mov    eax,ebp
c0021578:	89 da                	mov    edx,ebx
c002157a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002157e:	89 d3                	mov    ebx,edx
c0021580:	89 c5                	mov    ebp,eax
c0021582:	f7 e7                	mul    edi
c0021584:	39 d3                	cmp    ebx,edx
c0021586:	72 18                	jb     c00215a0 <__divdi3+0x138>
c0021588:	74 0a                	je     c0021594 <__divdi3+0x12c>
c002158a:	89 e9                	mov    ecx,ebp
c002158c:	31 f6                	xor    esi,esi
c002158e:	e9 2d ff ff ff       	jmp    c00214c0 <__divdi3+0x58>
c0021593:	90                   	nop
c0021594:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021597:	89 f1                	mov    ecx,esi
c0021599:	d3 e7                	shl    edi,cl
c002159b:	39 c7                	cmp    edi,eax
c002159d:	73 eb                	jae    c002158a <__divdi3+0x122>
c002159f:	90                   	nop
c00215a0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00215a3:	31 f6                	xor    esi,esi
c00215a5:	e9 16 ff ff ff       	jmp    c00214c0 <__divdi3+0x58>
c00215aa:	66 90                	xchg   ax,ax
c00215ac:	31 c9                	xor    ecx,ecx
c00215ae:	e9 0d ff ff ff       	jmp    c00214c0 <__divdi3+0x58>
c00215b3:	90                   	nop

c00215b4 <__moddi3>:
c00215b4:	55                   	push   ebp
c00215b5:	57                   	push   edi
c00215b6:	56                   	push   esi
c00215b7:	53                   	push   ebx
c00215b8:	83 ec 2c             	sub    esp,0x2c
c00215bb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00215bf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00215c3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00215c7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00215cb:	85 db                	test   ebx,ebx
c00215cd:	0f 88 85 00 00 00    	js     c0021658 <__moddi3+0xa4>
c00215d3:	89 de                	mov    esi,ebx
c00215d5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00215dd:	89 d7                	mov    edi,edx
c00215df:	85 d2                	test   edx,edx
c00215e1:	79 09                	jns    c00215ec <__moddi3+0x38>
c00215e3:	f7 d8                	neg    eax
c00215e5:	83 d2 00             	adc    edx,0x0
c00215e8:	f7 da                	neg    edx
c00215ea:	89 d7                	mov    edi,edx
c00215ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215f0:	89 cd                	mov    ebp,ecx
c00215f2:	85 ff                	test   edi,edi
c00215f4:	75 52                	jne    c0021648 <__moddi3+0x94>
c00215f6:	89 c3                	mov    ebx,eax
c00215f8:	39 f0                	cmp    eax,esi
c00215fa:	76 24                	jbe    c0021620 <__moddi3+0x6c>
c00215fc:	89 c8                	mov    eax,ecx
c00215fe:	89 f2                	mov    edx,esi
c0021600:	f7 f3                	div    ebx
c0021602:	89 d6                	mov    esi,edx
c0021604:	89 f0                	mov    eax,esi
c0021606:	31 d2                	xor    edx,edx
c0021608:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002160c:	85 c9                	test   ecx,ecx
c002160e:	74 07                	je     c0021617 <__moddi3+0x63>
c0021610:	f7 d8                	neg    eax
c0021612:	83 d2 00             	adc    edx,0x0
c0021615:	f7 da                	neg    edx
c0021617:	83 c4 2c             	add    esp,0x2c
c002161a:	5b                   	pop    ebx
c002161b:	5e                   	pop    esi
c002161c:	5f                   	pop    edi
c002161d:	5d                   	pop    ebp
c002161e:	c3                   	ret    
c002161f:	90                   	nop
c0021620:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021624:	85 db                	test   ebx,ebx
c0021626:	75 0d                	jne    c0021635 <__moddi3+0x81>
c0021628:	b8 01 00 00 00       	mov    eax,0x1
c002162d:	31 d2                	xor    edx,edx
c002162f:	f7 f7                	div    edi
c0021631:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021635:	89 f0                	mov    eax,esi
c0021637:	31 d2                	xor    edx,edx
c0021639:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002163d:	f7 f7                	div    edi
c002163f:	89 e8                	mov    eax,ebp
c0021641:	f7 f7                	div    edi
c0021643:	89 d6                	mov    esi,edx
c0021645:	eb bd                	jmp    c0021604 <__moddi3+0x50>
c0021647:	90                   	nop
c0021648:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002164c:	39 f7                	cmp    edi,esi
c002164e:	76 20                	jbe    c0021670 <__moddi3+0xbc>
c0021650:	89 c8                	mov    eax,ecx
c0021652:	89 f2                	mov    edx,esi
c0021654:	eb b2                	jmp    c0021608 <__moddi3+0x54>
c0021656:	66 90                	xchg   ax,ax
c0021658:	f7 d9                	neg    ecx
c002165a:	83 d3 00             	adc    ebx,0x0
c002165d:	f7 db                	neg    ebx
c002165f:	89 de                	mov    esi,ebx
c0021661:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021669:	e9 6f ff ff ff       	jmp    c00215dd <__moddi3+0x29>
c002166e:	66 90                	xchg   ax,ax
c0021670:	0f bd c7             	bsr    eax,edi
c0021673:	83 f0 1f             	xor    eax,0x1f
c0021676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002167a:	75 24                	jne    c00216a0 <__moddi3+0xec>
c002167c:	39 f7                	cmp    edi,esi
c002167e:	72 06                	jb     c0021686 <__moddi3+0xd2>
c0021680:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021684:	77 0c                	ja     c0021692 <__moddi3+0xde>
c0021686:	89 e9                	mov    ecx,ebp
c0021688:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002168c:	19 fe                	sbb    esi,edi
c002168e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021692:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021696:	89 f2                	mov    edx,esi
c0021698:	e9 6b ff ff ff       	jmp    c0021608 <__moddi3+0x54>
c002169d:	8d 76 00             	lea    esi,[esi+0x0]
c00216a0:	b8 20 00 00 00       	mov    eax,0x20
c00216a5:	89 c2                	mov    edx,eax
c00216a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00216ab:	29 da                	sub    edx,ebx
c00216ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00216b1:	88 d9                	mov    cl,bl
c00216b3:	d3 e7                	shl    edi,cl
c00216b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216b9:	88 d1                	mov    cl,dl
c00216bb:	d3 e8                	shr    eax,cl
c00216bd:	09 c7                	or     edi,eax
c00216bf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00216c3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00216c7:	89 d8                	mov    eax,ebx
c00216c9:	88 d9                	mov    cl,bl
c00216cb:	d3 e7                	shl    edi,cl
c00216cd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00216d1:	89 f3                	mov    ebx,esi
c00216d3:	88 d1                	mov    cl,dl
c00216d5:	d3 eb                	shr    ebx,cl
c00216d7:	89 c7                	mov    edi,eax
c00216d9:	88 c1                	mov    cl,al
c00216db:	d3 e6                	shl    esi,cl
c00216dd:	89 e8                	mov    eax,ebp
c00216df:	88 d1                	mov    cl,dl
c00216e1:	d3 e8                	shr    eax,cl
c00216e3:	09 f0                	or     eax,esi
c00216e5:	89 f9                	mov    ecx,edi
c00216e7:	d3 e5                	shl    ebp,cl
c00216e9:	89 da                	mov    edx,ebx
c00216eb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00216ef:	89 d3                	mov    ebx,edx
c00216f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00216f5:	89 c6                	mov    esi,eax
c00216f7:	89 d1                	mov    ecx,edx
c00216f9:	39 d3                	cmp    ebx,edx
c00216fb:	72 27                	jb     c0021724 <__moddi3+0x170>
c00216fd:	74 21                	je     c0021720 <__moddi3+0x16c>
c00216ff:	29 f5                	sub    ebp,esi
c0021701:	19 cb                	sbb    ebx,ecx
c0021703:	89 de                	mov    esi,ebx
c0021705:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021709:	d3 e6                	shl    esi,cl
c002170b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002170f:	89 f9                	mov    ecx,edi
c0021711:	d3 ed                	shr    ebp,cl
c0021713:	09 ee                	or     esi,ebp
c0021715:	89 f0                	mov    eax,esi
c0021717:	d3 eb                	shr    ebx,cl
c0021719:	89 da                	mov    edx,ebx
c002171b:	e9 e8 fe ff ff       	jmp    c0021608 <__moddi3+0x54>
c0021720:	39 c5                	cmp    ebp,eax
c0021722:	73 db                	jae    c00216ff <__moddi3+0x14b>
c0021724:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021728:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002172c:	89 d1                	mov    ecx,edx
c002172e:	89 c6                	mov    esi,eax
c0021730:	eb cd                	jmp    c00216ff <__moddi3+0x14b>
c0021732:	66 90                	xchg   ax,ax

c0021734 <__udivdi3>:
c0021734:	55                   	push   ebp
c0021735:	57                   	push   edi
c0021736:	56                   	push   esi
c0021737:	53                   	push   ebx
c0021738:	83 ec 1c             	sub    esp,0x1c
c002173b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002173f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021743:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021747:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002174b:	85 d2                	test   edx,edx
c002174d:	75 41                	jne    c0021790 <__udivdi3+0x5c>
c002174f:	39 f7                	cmp    edi,esi
c0021751:	76 15                	jbe    c0021768 <__udivdi3+0x34>
c0021753:	89 e8                	mov    eax,ebp
c0021755:	89 f2                	mov    edx,esi
c0021757:	f7 f7                	div    edi
c0021759:	31 db                	xor    ebx,ebx
c002175b:	89 da                	mov    edx,ebx
c002175d:	83 c4 1c             	add    esp,0x1c
c0021760:	5b                   	pop    ebx
c0021761:	5e                   	pop    esi
c0021762:	5f                   	pop    edi
c0021763:	5d                   	pop    ebp
c0021764:	c3                   	ret    
c0021765:	8d 76 00             	lea    esi,[esi+0x0]
c0021768:	89 f9                	mov    ecx,edi
c002176a:	85 ff                	test   edi,edi
c002176c:	75 0b                	jne    c0021779 <__udivdi3+0x45>
c002176e:	b8 01 00 00 00       	mov    eax,0x1
c0021773:	31 d2                	xor    edx,edx
c0021775:	f7 f7                	div    edi
c0021777:	89 c1                	mov    ecx,eax
c0021779:	31 d2                	xor    edx,edx
c002177b:	89 f0                	mov    eax,esi
c002177d:	f7 f1                	div    ecx
c002177f:	89 c3                	mov    ebx,eax
c0021781:	89 e8                	mov    eax,ebp
c0021783:	f7 f1                	div    ecx
c0021785:	89 da                	mov    edx,ebx
c0021787:	83 c4 1c             	add    esp,0x1c
c002178a:	5b                   	pop    ebx
c002178b:	5e                   	pop    esi
c002178c:	5f                   	pop    edi
c002178d:	5d                   	pop    ebp
c002178e:	c3                   	ret    
c002178f:	90                   	nop
c0021790:	39 f2                	cmp    edx,esi
c0021792:	77 1c                	ja     c00217b0 <__udivdi3+0x7c>
c0021794:	0f bd da             	bsr    ebx,edx
c0021797:	83 f3 1f             	xor    ebx,0x1f
c002179a:	75 24                	jne    c00217c0 <__udivdi3+0x8c>
c002179c:	39 f2                	cmp    edx,esi
c002179e:	72 08                	jb     c00217a8 <__udivdi3+0x74>
c00217a0:	39 ef                	cmp    edi,ebp
c00217a2:	0f 87 84 00 00 00    	ja     c002182c <__udivdi3+0xf8>
c00217a8:	b8 01 00 00 00       	mov    eax,0x1
c00217ad:	eb ac                	jmp    c002175b <__udivdi3+0x27>
c00217af:	90                   	nop
c00217b0:	31 db                	xor    ebx,ebx
c00217b2:	31 c0                	xor    eax,eax
c00217b4:	89 da                	mov    edx,ebx
c00217b6:	83 c4 1c             	add    esp,0x1c
c00217b9:	5b                   	pop    ebx
c00217ba:	5e                   	pop    esi
c00217bb:	5f                   	pop    edi
c00217bc:	5d                   	pop    ebp
c00217bd:	c3                   	ret    
c00217be:	66 90                	xchg   ax,ax
c00217c0:	b8 20 00 00 00       	mov    eax,0x20
c00217c5:	29 d8                	sub    eax,ebx
c00217c7:	88 d9                	mov    cl,bl
c00217c9:	d3 e2                	shl    edx,cl
c00217cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00217cf:	89 fa                	mov    edx,edi
c00217d1:	88 c1                	mov    cl,al
c00217d3:	d3 ea                	shr    edx,cl
c00217d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00217d9:	09 d1                	or     ecx,edx
c00217db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00217df:	88 d9                	mov    cl,bl
c00217e1:	d3 e7                	shl    edi,cl
c00217e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00217e7:	89 f7                	mov    edi,esi
c00217e9:	88 c1                	mov    cl,al
c00217eb:	d3 ef                	shr    edi,cl
c00217ed:	88 d9                	mov    cl,bl
c00217ef:	d3 e6                	shl    esi,cl
c00217f1:	89 ea                	mov    edx,ebp
c00217f3:	88 c1                	mov    cl,al
c00217f5:	d3 ea                	shr    edx,cl
c00217f7:	09 d6                	or     esi,edx
c00217f9:	89 f0                	mov    eax,esi
c00217fb:	89 fa                	mov    edx,edi
c00217fd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021801:	89 d7                	mov    edi,edx
c0021803:	89 c6                	mov    esi,eax
c0021805:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021809:	39 d7                	cmp    edi,edx
c002180b:	72 13                	jb     c0021820 <__udivdi3+0xec>
c002180d:	74 09                	je     c0021818 <__udivdi3+0xe4>
c002180f:	89 f0                	mov    eax,esi
c0021811:	31 db                	xor    ebx,ebx
c0021813:	e9 43 ff ff ff       	jmp    c002175b <__udivdi3+0x27>
c0021818:	88 d9                	mov    cl,bl
c002181a:	d3 e5                	shl    ebp,cl
c002181c:	39 c5                	cmp    ebp,eax
c002181e:	73 ef                	jae    c002180f <__udivdi3+0xdb>
c0021820:	8d 46 ff             	lea    eax,[esi-0x1]
c0021823:	31 db                	xor    ebx,ebx
c0021825:	e9 31 ff ff ff       	jmp    c002175b <__udivdi3+0x27>
c002182a:	66 90                	xchg   ax,ax
c002182c:	31 c0                	xor    eax,eax
c002182e:	e9 28 ff ff ff       	jmp    c002175b <__udivdi3+0x27>
c0021833:	90                   	nop

c0021834 <__umoddi3>:
c0021834:	55                   	push   ebp
c0021835:	57                   	push   edi
c0021836:	56                   	push   esi
c0021837:	53                   	push   ebx
c0021838:	83 ec 1c             	sub    esp,0x1c
c002183b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002183f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021843:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021847:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002184b:	89 da                	mov    edx,ebx
c002184d:	85 c0                	test   eax,eax
c002184f:	75 37                	jne    c0021888 <__umoddi3+0x54>
c0021851:	39 df                	cmp    edi,ebx
c0021853:	76 13                	jbe    c0021868 <__umoddi3+0x34>
c0021855:	89 f0                	mov    eax,esi
c0021857:	f7 f7                	div    edi
c0021859:	89 d0                	mov    eax,edx
c002185b:	31 d2                	xor    edx,edx
c002185d:	83 c4 1c             	add    esp,0x1c
c0021860:	5b                   	pop    ebx
c0021861:	5e                   	pop    esi
c0021862:	5f                   	pop    edi
c0021863:	5d                   	pop    ebp
c0021864:	c3                   	ret    
c0021865:	8d 76 00             	lea    esi,[esi+0x0]
c0021868:	89 fd                	mov    ebp,edi
c002186a:	85 ff                	test   edi,edi
c002186c:	75 0b                	jne    c0021879 <__umoddi3+0x45>
c002186e:	b8 01 00 00 00       	mov    eax,0x1
c0021873:	31 d2                	xor    edx,edx
c0021875:	f7 f7                	div    edi
c0021877:	89 c5                	mov    ebp,eax
c0021879:	89 d8                	mov    eax,ebx
c002187b:	31 d2                	xor    edx,edx
c002187d:	f7 f5                	div    ebp
c002187f:	89 f0                	mov    eax,esi
c0021881:	f7 f5                	div    ebp
c0021883:	89 d0                	mov    eax,edx
c0021885:	eb d4                	jmp    c002185b <__umoddi3+0x27>
c0021887:	90                   	nop
c0021888:	89 f1                	mov    ecx,esi
c002188a:	39 d8                	cmp    eax,ebx
c002188c:	76 0a                	jbe    c0021898 <__umoddi3+0x64>
c002188e:	89 f0                	mov    eax,esi
c0021890:	83 c4 1c             	add    esp,0x1c
c0021893:	5b                   	pop    ebx
c0021894:	5e                   	pop    esi
c0021895:	5f                   	pop    edi
c0021896:	5d                   	pop    ebp
c0021897:	c3                   	ret    
c0021898:	0f bd e8             	bsr    ebp,eax
c002189b:	83 f5 1f             	xor    ebp,0x1f
c002189e:	75 1c                	jne    c00218bc <__umoddi3+0x88>
c00218a0:	39 d8                	cmp    eax,ebx
c00218a2:	72 04                	jb     c00218a8 <__umoddi3+0x74>
c00218a4:	39 f7                	cmp    edi,esi
c00218a6:	77 08                	ja     c00218b0 <__umoddi3+0x7c>
c00218a8:	89 da                	mov    edx,ebx
c00218aa:	29 fe                	sub    esi,edi
c00218ac:	19 c2                	sbb    edx,eax
c00218ae:	89 f1                	mov    ecx,esi
c00218b0:	89 c8                	mov    eax,ecx
c00218b2:	83 c4 1c             	add    esp,0x1c
c00218b5:	5b                   	pop    ebx
c00218b6:	5e                   	pop    esi
c00218b7:	5f                   	pop    edi
c00218b8:	5d                   	pop    ebp
c00218b9:	c3                   	ret    
c00218ba:	66 90                	xchg   ax,ax
c00218bc:	ba 20 00 00 00       	mov    edx,0x20
c00218c1:	29 ea                	sub    edx,ebp
c00218c3:	89 e9                	mov    ecx,ebp
c00218c5:	d3 e0                	shl    eax,cl
c00218c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218cb:	89 f8                	mov    eax,edi
c00218cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218d1:	88 d1                	mov    cl,dl
c00218d3:	d3 e8                	shr    eax,cl
c00218d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00218d9:	09 c1                	or     ecx,eax
c00218db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00218df:	89 e9                	mov    ecx,ebp
c00218e1:	d3 e7                	shl    edi,cl
c00218e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00218e7:	89 d8                	mov    eax,ebx
c00218e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00218ed:	88 d1                	mov    cl,dl
c00218ef:	d3 e8                	shr    eax,cl
c00218f1:	89 c7                	mov    edi,eax
c00218f3:	89 e9                	mov    ecx,ebp
c00218f5:	d3 e3                	shl    ebx,cl
c00218f7:	89 f0                	mov    eax,esi
c00218f9:	88 d1                	mov    cl,dl
c00218fb:	d3 e8                	shr    eax,cl
c00218fd:	09 d8                	or     eax,ebx
c00218ff:	89 e9                	mov    ecx,ebp
c0021901:	d3 e6                	shl    esi,cl
c0021903:	89 f3                	mov    ebx,esi
c0021905:	89 fa                	mov    edx,edi
c0021907:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002190b:	89 d1                	mov    ecx,edx
c002190d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021911:	89 c6                	mov    esi,eax
c0021913:	89 d7                	mov    edi,edx
c0021915:	39 d1                	cmp    ecx,edx
c0021917:	72 27                	jb     c0021940 <__umoddi3+0x10c>
c0021919:	74 21                	je     c002193c <__umoddi3+0x108>
c002191b:	89 ca                	mov    edx,ecx
c002191d:	29 f3                	sub    ebx,esi
c002191f:	19 fa                	sbb    edx,edi
c0021921:	89 d0                	mov    eax,edx
c0021923:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021927:	d3 e0                	shl    eax,cl
c0021929:	89 e9                	mov    ecx,ebp
c002192b:	d3 eb                	shr    ebx,cl
c002192d:	09 d8                	or     eax,ebx
c002192f:	d3 ea                	shr    edx,cl
c0021931:	83 c4 1c             	add    esp,0x1c
c0021934:	5b                   	pop    ebx
c0021935:	5e                   	pop    esi
c0021936:	5f                   	pop    edi
c0021937:	5d                   	pop    ebp
c0021938:	c3                   	ret    
c0021939:	8d 76 00             	lea    esi,[esi+0x0]
c002193c:	39 c3                	cmp    ebx,eax
c002193e:	73 db                	jae    c002191b <__umoddi3+0xe7>
c0021940:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021944:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021948:	89 d7                	mov    edi,edx
c002194a:	89 c6                	mov    esi,eax
c002194c:	eb cd                	jmp    c002191b <__umoddi3+0xe7>

Disassembly of section .init:

c002194e <_init>:
c002194e:	55                   	push   ebp
c002194f:	89 e5                	mov    ebp,esp
c0021951:	e8 9e e7 fd ff       	call   c00000f4 <frame_dummy>
c0021956:	e8 e5 fa ff ff       	call   c0021440 <__do_global_ctors_aux>
c002195b:	5d                   	pop    ebp
c002195c:	c3                   	ret    

Disassembly of section .fini:

c002195d <_fini>:
c002195d:	55                   	push   ebp
c002195e:	89 e5                	mov    ebp,esp
c0021960:	e8 1f e7 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021965:	5d                   	pop    ebp
c0021966:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021968 <DriverlessDevice::~DriverlessDevice()>:
c0021968:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c002196d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021971:	89 10                	mov    DWORD PTR [eax],edx
c0021973:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021977:	50                   	push   eax
c0021978:	e8 1f 7f fe ff       	call   c000989c <Device::~Device()>
c002197d:	83 c4 04             	add    esp,0x4
c0021980:	90                   	nop
c0021981:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021982 <DriverlessDevice::~DriverlessDevice()>:
c0021982:	83 ec 0c             	sub    esp,0xc
c0021985:	83 ec 0c             	sub    esp,0xc
c0021988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002198c:	e8 d7 ff ff ff       	call   c0021968 <DriverlessDevice::~DriverlessDevice()>
c0021991:	83 c4 10             	add    esp,0x10
c0021994:	83 ec 08             	sub    esp,0x8
c0021997:	68 58 01 00 00       	push   0x158
c002199c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219a0:	e8 b6 b8 fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c00219a5:	83 c4 10             	add    esp,0x10
c00219a8:	83 c4 0c             	add    esp,0xc
c00219ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00219ac <LinkedList<Device>::addElement(Device*)>:
c00219ac:	83 ec 0c             	sub    esp,0xc
c00219af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00219b4:	75 10                	jne    c00219c6 <LinkedList<Device>::addElement(Device*)+0x1a>
c00219b6:	83 ec 0c             	sub    esp,0xc
c00219b9:	68 50 33 02 c0       	push   0xc0023350
c00219be:	e8 67 e4 fe ff       	call   c000fe2a <KePanic(char const*)>
c00219c3:	83 c4 10             	add    esp,0x10
c00219c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00219cc:	85 c0                	test   eax,eax
c00219ce:	74 3a                	je     c0021a0a <LinkedList<Device>::addElement(Device*)+0x5e>
c00219d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219d7:	85 c0                	test   eax,eax
c00219d9:	74 2f                	je     c0021a0a <LinkedList<Device>::addElement(Device*)+0x5e>
c00219db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00219e6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00219ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00219f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00219f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219fe:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021a08:	eb 68                	jmp    c0021a72 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a10:	85 c0                	test   eax,eax
c0021a12:	75 4e                	jne    c0021a62 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a1b:	85 c0                	test   eax,eax
c0021a1d:	75 43                	jne    c0021a62 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021a27:	89 10                	mov    DWORD PTR [eax],edx
c0021a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021a31:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a3b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a49:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021a4c:	85 c0                	test   eax,eax
c0021a4e:	74 22                	je     c0021a72 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021a50:	83 ec 0c             	sub    esp,0xc
c0021a53:	68 72 33 02 c0       	push   0xc0023372
c0021a58:	e8 cd e3 fe ff       	call   c000fe2a <KePanic(char const*)>
c0021a5d:	83 c4 10             	add    esp,0x10
c0021a60:	eb 10                	jmp    c0021a72 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021a62:	83 ec 0c             	sub    esp,0xc
c0021a65:	68 7c 33 02 c0       	push   0xc002337c
c0021a6a:	e8 bb e3 fe ff       	call   c000fe2a <KePanic(char const*)>
c0021a6f:	83 c4 10             	add    esp,0x10
c0021a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a76:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021a79:	8d 50 01             	lea    edx,[eax+0x1]
c0021a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a80:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021a83:	90                   	nop
c0021a84:	83 c4 0c             	add    esp,0xc
c0021a87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021a88 <LinkedList<Device>::LinkedList()>:
c0021a88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021a9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aa1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021ab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ab6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021abd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ac1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021ac8:	90                   	nop
c0021ac9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021acc <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ad2:	85 c0                	test   eax,eax
c0021ad4:	75 0e                	jne    c0021ae4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021ad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ada:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021add:	85 c0                	test   eax,eax
c0021adf:	75 03                	jne    c0021ae4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021ae1:	b0 01                	mov    al,0x1
c0021ae3:	c3                   	ret    
c0021ae4:	b0 00                	mov    al,0x0
c0021ae6:	90                   	nop
c0021ae7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021ae8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aec:	8b 00                	mov    eax,DWORD PTR [eax]
c0021aee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021af0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021af0:	83 ec 0c             	sub    esp,0xc
c0021af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021af7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021af9:	85 c0                	test   eax,eax
c0021afb:	75 17                	jne    c0021b14 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021afd:	83 ec 0c             	sub    esp,0xc
c0021b00:	68 ec 35 02 c0       	push   0xc00235ec
c0021b05:	e8 20 e3 fe ff       	call   c000fe2a <KePanic(char const*)>
c0021b0a:	83 c4 10             	add    esp,0x10
c0021b0d:	e9 96 00 00 00       	jmp    c0021ba8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021b12:	66 90                	xchg   ax,ax
c0021b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021b1e:	85 c0                	test   eax,eax
c0021b20:	0f 95 c0             	setne  al
c0021b23:	0f b6 c0             	movzx  eax,al
c0021b26:	85 c0                	test   eax,eax
c0021b28:	74 12                	je     c0021b3c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0021b2a:	83 ec 0c             	sub    esp,0xc
c0021b2d:	68 37 36 02 c0       	push   0xc0023637
c0021b32:	e8 f3 e2 fe ff       	call   c000fe2a <KePanic(char const*)>
c0021b37:	83 c4 10             	add    esp,0x10
c0021b3a:	66 90                	xchg   ax,ax
c0021b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b40:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b42:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021b45:	85 c0                	test   eax,eax
c0021b47:	0f 94 c0             	sete   al
c0021b4a:	0f b6 c0             	movzx  eax,al
c0021b4d:	85 c0                	test   eax,eax
c0021b4f:	74 33                	je     c0021b84 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b55:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b6d:	83 f8 01             	cmp    eax,0x1
c0021b70:	74 22                	je     c0021b94 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021b72:	83 ec 0c             	sub    esp,0xc
c0021b75:	68 10 36 02 c0       	push   0xc0023610
c0021b7a:	e8 ab e2 fe ff       	call   c000fe2a <KePanic(char const*)>
c0021b7f:	83 c4 10             	add    esp,0x10
c0021b82:	eb 10                	jmp    c0021b94 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b88:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b8a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b91:	89 10                	mov    DWORD PTR [eax],edx
c0021b93:	90                   	nop
c0021b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b9b:	8d 50 ff             	lea    edx,[eax-0x1]
c0021b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0021ba8:	83 c4 0c             	add    esp,0xc
c0021bab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021bac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021bac:	83 ec 0c             	sub    esp,0xc
c0021baf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021bb4:	75 12                	jne    c0021bc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021bb6:	83 ec 0c             	sub    esp,0xc
c0021bb9:	68 50 33 02 c0       	push   0xc0023350
c0021bbe:	e8 67 e2 fe ff       	call   c000fe2a <KePanic(char const*)>
c0021bc3:	83 c4 10             	add    esp,0x10
c0021bc6:	66 90                	xchg   ax,ax
c0021bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bce:	85 c0                	test   eax,eax
c0021bd0:	74 36                	je     c0021c08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bd9:	85 c0                	test   eax,eax
c0021bdb:	74 2b                	je     c0021c08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021be4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021be8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021bf3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bfd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021c04:	eb 6a                	jmp    c0021c70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021c06:	66 90                	xchg   ax,ax
c0021c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c0e:	85 c0                	test   eax,eax
c0021c10:	75 4e                	jne    c0021c60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c19:	85 c0                	test   eax,eax
c0021c1b:	75 43                	jne    c0021c60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c25:	89 10                	mov    DWORD PTR [eax],edx
c0021c27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c39:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c47:	85 c0                	test   eax,eax
c0021c49:	74 25                	je     c0021c70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021c4b:	83 ec 0c             	sub    esp,0xc
c0021c4e:	68 72 33 02 c0       	push   0xc0023372
c0021c53:	e8 d2 e1 fe ff       	call   c000fe2a <KePanic(char const*)>
c0021c58:	83 c4 10             	add    esp,0x10
c0021c5b:	eb 13                	jmp    c0021c70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0021c60:	83 ec 0c             	sub    esp,0xc
c0021c63:	68 7c 33 02 c0       	push   0xc002337c
c0021c68:	e8 bd e1 fe ff       	call   c000fe2a <KePanic(char const*)>
c0021c6d:	83 c4 10             	add    esp,0x10
c0021c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c77:	8d 50 01             	lea    edx,[eax+0x1]
c0021c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021c81:	90                   	nop
c0021c82:	83 c4 0c             	add    esp,0xc
c0021c85:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021c88 <ACPI::~ACPI()>:
c0021c88:	83 ec 0c             	sub    esp,0xc
c0021c8b:	ba 34 3a 02 c0       	mov    edx,0xc0023a34
c0021c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c94:	89 10                	mov    DWORD PTR [eax],edx
c0021c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9a:	83 ec 0c             	sub    esp,0xc
c0021c9d:	50                   	push   eax
c0021c9e:	e8 f9 7b fe ff       	call   c000989c <Device::~Device()>
c0021ca3:	83 c4 10             	add    esp,0x10
c0021ca6:	90                   	nop
c0021ca7:	83 c4 0c             	add    esp,0xc
c0021caa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021cac <ACPI::~ACPI()>:
c0021cac:	83 ec 0c             	sub    esp,0xc
c0021caf:	83 ec 0c             	sub    esp,0xc
c0021cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cb6:	e8 cd ff ff ff       	call   c0021c88 <ACPI::~ACPI()>
c0021cbb:	83 c4 10             	add    esp,0x10
c0021cbe:	83 ec 08             	sub    esp,0x8
c0021cc1:	68 64 12 00 00       	push   0x1264
c0021cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cca:	e8 8c b5 fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c0021ccf:	83 c4 10             	add    esp,0x10
c0021cd2:	83 c4 0c             	add    esp,0xc
c0021cd5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021cd8 <LinkedList<Device>::~LinkedList()>:
c0021cd8:	90                   	nop
c0021cd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021cdc <LinkedList<Device>::isEmpty()>:
c0021cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ce0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ce2:	85 c0                	test   eax,eax
c0021ce4:	75 0e                	jne    c0021cf4 <LinkedList<Device>::isEmpty()+0x18>
c0021ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ced:	85 c0                	test   eax,eax
c0021cef:	75 03                	jne    c0021cf4 <LinkedList<Device>::isEmpty()+0x18>
c0021cf1:	b0 01                	mov    al,0x1
c0021cf3:	c3                   	ret    
c0021cf4:	b0 00                	mov    al,0x0
c0021cf6:	90                   	nop
c0021cf7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021cf8 <LinkedList<Device>::getFirstElement()>:
c0021cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cfe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021d00 <LinkedList<Device>::removeFirst()>:
c0021d00:	83 ec 0c             	sub    esp,0xc
c0021d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d07:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d09:	85 c0                	test   eax,eax
c0021d0b:	75 17                	jne    c0021d24 <LinkedList<Device>::removeFirst()+0x24>
c0021d0d:	83 ec 0c             	sub    esp,0xc
c0021d10:	68 ec 35 02 c0       	push   0xc00235ec
c0021d15:	e8 10 e1 fe ff       	call   c000fe2a <KePanic(char const*)>
c0021d1a:	83 c4 10             	add    esp,0x10
c0021d1d:	e9 92 00 00 00       	jmp    c0021db4 <LinkedList<Device>::removeFirst()+0xb4>
c0021d22:	66 90                	xchg   ax,ax
c0021d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d2b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021d31:	85 c0                	test   eax,eax
c0021d33:	74 13                	je     c0021d48 <LinkedList<Device>::removeFirst()+0x48>
c0021d35:	83 ec 0c             	sub    esp,0xc
c0021d38:	68 37 36 02 c0       	push   0xc0023637
c0021d3d:	e8 e8 e0 fe ff       	call   c000fe2a <KePanic(char const*)>
c0021d42:	83 c4 10             	add    esp,0x10
c0021d45:	8d 76 00             	lea    esi,[esi+0x0]
c0021d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d4e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021d54:	85 c0                	test   eax,eax
c0021d56:	75 34                	jne    c0021d8c <LinkedList<Device>::removeFirst()+0x8c>
c0021d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d74:	83 f8 01             	cmp    eax,0x1
c0021d77:	74 27                	je     c0021da0 <LinkedList<Device>::removeFirst()+0xa0>
c0021d79:	83 ec 0c             	sub    esp,0xc
c0021d7c:	68 10 36 02 c0       	push   0xc0023610
c0021d81:	e8 a4 e0 fe ff       	call   c000fe2a <KePanic(char const*)>
c0021d86:	83 c4 10             	add    esp,0x10
c0021d89:	eb 15                	jmp    c0021da0 <LinkedList<Device>::removeFirst()+0xa0>
c0021d8b:	90                   	nop
c0021d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d92:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d9c:	89 10                	mov    DWORD PTR [eax],edx
c0021d9e:	66 90                	xchg   ax,ax
c0021da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021da7:	8d 50 ff             	lea    edx,[eax-0x1]
c0021daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021db1:	8d 76 00             	lea    esi,[esi+0x0]
c0021db4:	83 c4 0c             	add    esp,0xc
c0021db7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021db8 <Computer::~Computer()>:
c0021db8:	83 ec 0c             	sub    esp,0xc
c0021dbb:	ba e4 3c 02 c0       	mov    edx,0xc0023ce4
c0021dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dc4:	89 10                	mov    DWORD PTR [eax],edx
c0021dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dca:	83 ec 0c             	sub    esp,0xc
c0021dcd:	50                   	push   eax
c0021dce:	e8 c9 7a fe ff       	call   c000989c <Device::~Device()>
c0021dd3:	83 c4 10             	add    esp,0x10
c0021dd6:	90                   	nop
c0021dd7:	83 c4 0c             	add    esp,0xc
c0021dda:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0021ddc <Computer::~Computer()>:
c0021ddc:	83 ec 0c             	sub    esp,0xc
c0021ddf:	83 ec 0c             	sub    esp,0xc
c0021de2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021de6:	e8 cd ff ff ff       	call   c0021db8 <Computer::~Computer()>
c0021deb:	83 c4 10             	add    esp,0x10
c0021dee:	83 ec 08             	sub    esp,0x8
c0021df1:	68 6c 01 00 00       	push   0x16c
c0021df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dfa:	e8 5c b4 fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c0021dff:	83 c4 10             	add    esp,0x10
c0021e02:	83 c4 0c             	add    esp,0xc
c0021e05:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021e06 <idleCommon()>:
c0021e06:	83 ec 0c             	sub    esp,0xc
c0021e09:	fa                   	cli    
c0021e0a:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0021e10:	e8 7b 4f ff ff       	call   c0016d90 <schedule()>
c0021e15:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0021e1c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0021e23:	75 01                	jne    c0021e26 <idleCommon()+0x20>
c0021e25:	fb                   	sti    
c0021e26:	83 c4 0c             	add    esp,0xc
c0021e29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021e2a <LinkedList<UnixFile>::~LinkedList()>:
c0021e2a:	90                   	nop
c0021e2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0021e2c <LinkedList<UnixFile>::LinkedList()>:
c0021e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e45:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e65:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021e6c:	90                   	nop
c0021e6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0021e6e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0021e6e:	83 ec 0c             	sub    esp,0xc
c0021e71:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021e76:	75 10                	jne    c0021e88 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021e78:	83 ec 0c             	sub    esp,0xc
c0021e7b:	68 50 33 02 c0       	push   0xc0023350
c0021e80:	e8 a5 df fe ff       	call   c000fe2a <KePanic(char const*)>
c0021e85:	83 c4 10             	add    esp,0x10
c0021e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e8e:	85 c0                	test   eax,eax
c0021e90:	74 34                	je     c0021ec6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e99:	85 c0                	test   eax,eax
c0021e9b:	74 29                	je     c0021ec6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ea1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ea4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ea8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021eb3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ebd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021ec4:	eb 65                	jmp    c0021f2b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eca:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ecc:	85 c0                	test   eax,eax
c0021ece:	75 4b                	jne    c0021f1b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ed7:	85 c0                	test   eax,eax
c0021ed9:	75 40                	jne    c0021f1b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021edf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ee3:	89 10                	mov    DWORD PTR [eax],edx
c0021ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ee9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021eed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ef7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f05:	85 c0                	test   eax,eax
c0021f07:	74 22                	je     c0021f2b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021f09:	83 ec 0c             	sub    esp,0xc
c0021f0c:	68 72 33 02 c0       	push   0xc0023372
c0021f11:	e8 14 df fe ff       	call   c000fe2a <KePanic(char const*)>
c0021f16:	83 c4 10             	add    esp,0x10
c0021f19:	eb 10                	jmp    c0021f2b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021f1b:	83 ec 0c             	sub    esp,0xc
c0021f1e:	68 7c 33 02 c0       	push   0xc002337c
c0021f23:	e8 02 df fe ff       	call   c000fe2a <KePanic(char const*)>
c0021f28:	83 c4 10             	add    esp,0x10
c0021f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f32:	8d 50 01             	lea    edx,[eax+0x1]
c0021f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f39:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021f3c:	90                   	nop
c0021f3d:	83 c4 0c             	add    esp,0xc
c0021f40:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021f42 <LinkedList<UnixFile>::getFirstElement()>:
c0021f42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f46:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f48:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021f4a <LinkedList<UnixFile>::removeFirst()>:
c0021f4a:	83 ec 0c             	sub    esp,0xc
c0021f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f51:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f53:	85 c0                	test   eax,eax
c0021f55:	75 12                	jne    c0021f69 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021f57:	83 ec 0c             	sub    esp,0xc
c0021f5a:	68 ec 35 02 c0       	push   0xc00235ec
c0021f5f:	e8 c6 de fe ff       	call   c000fe2a <KePanic(char const*)>
c0021f64:	83 c4 10             	add    esp,0x10
c0021f67:	eb 7e                	jmp    c0021fe7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f70:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f73:	85 c0                	test   eax,eax
c0021f75:	74 10                	je     c0021f87 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021f77:	83 ec 0c             	sub    esp,0xc
c0021f7a:	68 37 36 02 c0       	push   0xc0023637
c0021f7f:	e8 a6 de fe ff       	call   c000fe2a <KePanic(char const*)>
c0021f84:	83 c4 10             	add    esp,0x10
c0021f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f8d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f90:	85 c0                	test   eax,eax
c0021f92:	75 33                	jne    c0021fc7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fa2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021fb0:	83 f8 01             	cmp    eax,0x1
c0021fb3:	74 21                	je     c0021fd6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021fb5:	83 ec 0c             	sub    esp,0xc
c0021fb8:	68 10 36 02 c0       	push   0xc0023610
c0021fbd:	e8 68 de fe ff       	call   c000fe2a <KePanic(char const*)>
c0021fc2:	83 c4 10             	add    esp,0x10
c0021fc5:	eb 0f                	jmp    c0021fd6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fcd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0021fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fd4:	89 10                	mov    DWORD PTR [eax],edx
c0021fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fda:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021fdd:	8d 50 ff             	lea    edx,[eax-0x1]
c0021fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021fe7:	83 c4 0c             	add    esp,0xc
c0021fea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0021fec <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0021fec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ff0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ff3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021ff4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ff8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021ffb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0021ffc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0021ffc:	90                   	nop
c0021ffd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022000 <ThreadControlBlock::ThreadControlBlock()>:
c0022000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022004:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002200b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002200f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002201a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022021:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022025:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002202c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022030:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0022037:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002203b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002203f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022043:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0022047:	90                   	nop
c0022048:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002204c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002204c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022050:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002205a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022061:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022065:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002206c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022070:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002207a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022081:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022085:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002208c:	90                   	nop
c002208d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002208e <CPU::~CPU()>:
c002208e:	83 ec 0c             	sub    esp,0xc
c0022091:	ba 10 54 02 c0       	mov    edx,0xc0025410
c0022096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002209a:	89 10                	mov    DWORD PTR [eax],edx
c002209c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220a0:	83 ec 0c             	sub    esp,0xc
c00220a3:	50                   	push   eax
c00220a4:	e8 f3 77 fe ff       	call   c000989c <Device::~Device()>
c00220a9:	83 c4 10             	add    esp,0x10
c00220ac:	90                   	nop
c00220ad:	83 c4 0c             	add    esp,0xc
c00220b0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00220b2 <CPU::~CPU()>:
c00220b2:	83 ec 0c             	sub    esp,0xc
c00220b5:	83 ec 0c             	sub    esp,0xc
c00220b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220bc:	e8 cd ff ff ff       	call   c002208e <CPU::~CPU()>
c00220c1:	83 c4 10             	add    esp,0x10
c00220c4:	83 ec 08             	sub    esp,0x8
c00220c7:	68 78 11 00 00       	push   0x1178
c00220cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220d0:	e8 86 b1 fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c00220d5:	83 c4 10             	add    esp,0x10
c00220d8:	83 c4 0c             	add    esp,0xc
c00220db:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00220dc <PCI::~PCI()>:
c00220dc:	83 ec 0c             	sub    esp,0xc
c00220df:	ba 74 59 02 c0       	mov    edx,0xc0025974
c00220e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220e8:	89 10                	mov    DWORD PTR [eax],edx
c00220ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220ee:	83 ec 0c             	sub    esp,0xc
c00220f1:	50                   	push   eax
c00220f2:	e8 49 68 fe ff       	call   c0008940 <Bus::~Bus()>
c00220f7:	83 c4 10             	add    esp,0x10
c00220fa:	90                   	nop
c00220fb:	83 c4 0c             	add    esp,0xc
c00220fe:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0022100 <PCI::~PCI()>:
c0022100:	83 ec 0c             	sub    esp,0xc
c0022103:	83 ec 0c             	sub    esp,0xc
c0022106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002210a:	e8 cd ff ff ff       	call   c00220dc <PCI::~PCI()>
c002210f:	83 c4 10             	add    esp,0x10
c0022112:	83 ec 08             	sub    esp,0x8
c0022115:	68 5c 01 00 00       	push   0x15c
c002211a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002211e:	e8 38 b1 fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c0022123:	83 c4 10             	add    esp,0x10
c0022126:	83 c4 0c             	add    esp,0xc
c0022129:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002212a <IDE::~IDE()>:
c002212a:	83 ec 0c             	sub    esp,0xc
c002212d:	ba c4 5a 02 c0       	mov    edx,0xc0025ac4
c0022132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022136:	89 10                	mov    DWORD PTR [eax],edx
c0022138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002213c:	83 ec 0c             	sub    esp,0xc
c002213f:	50                   	push   eax
c0022140:	e8 e7 7b fe ff       	call   c0009d2c <HardDiskController::~HardDiskController()>
c0022145:	83 c4 10             	add    esp,0x10
c0022148:	90                   	nop
c0022149:	83 c4 0c             	add    esp,0xc
c002214c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002214e <IDE::~IDE()>:
c002214e:	83 ec 0c             	sub    esp,0xc
c0022151:	83 ec 0c             	sub    esp,0xc
c0022154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022158:	e8 cd ff ff ff       	call   c002212a <IDE::~IDE()>
c002215d:	83 c4 10             	add    esp,0x10
c0022160:	83 ec 08             	sub    esp,0x8
c0022163:	68 70 02 00 00       	push   0x270
c0022168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002216c:	e8 ea b0 fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c0022171:	83 c4 10             	add    esp,0x10
c0022174:	83 c4 0c             	add    esp,0xc
c0022177:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022178 <SATABus::~SATABus()>:
c0022178:	83 ec 0c             	sub    esp,0xc
c002217b:	ba 14 5b 02 c0       	mov    edx,0xc0025b14
c0022180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022184:	89 10                	mov    DWORD PTR [eax],edx
c0022186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002218a:	83 ec 0c             	sub    esp,0xc
c002218d:	50                   	push   eax
c002218e:	e8 99 7b fe ff       	call   c0009d2c <HardDiskController::~HardDiskController()>
c0022193:	83 c4 10             	add    esp,0x10
c0022196:	90                   	nop
c0022197:	83 c4 0c             	add    esp,0xc
c002219a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002219c <SATABus::~SATABus()>:
c002219c:	83 ec 0c             	sub    esp,0xc
c002219f:	83 ec 0c             	sub    esp,0xc
c00221a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221a6:	e8 cd ff ff ff       	call   c0022178 <SATABus::~SATABus()>
c00221ab:	83 c4 10             	add    esp,0x10
c00221ae:	83 ec 08             	sub    esp,0x8
c00221b1:	68 64 01 00 00       	push   0x164
c00221b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221ba:	e8 9c b0 fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c00221bf:	83 c4 10             	add    esp,0x10
c00221c2:	83 c4 0c             	add    esp,0xc
c00221c5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00221c6 <ATA::~ATA()>:
c00221c6:	83 ec 0c             	sub    esp,0xc
c00221c9:	ba fc 5b 02 c0       	mov    edx,0xc0025bfc
c00221ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d2:	89 10                	mov    DWORD PTR [eax],edx
c00221d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d8:	83 ec 0c             	sub    esp,0xc
c00221db:	50                   	push   eax
c00221dc:	e8 2d 7c fe ff       	call   c0009e0e <PhysicalDisk::~PhysicalDisk()>
c00221e1:	83 c4 10             	add    esp,0x10
c00221e4:	90                   	nop
c00221e5:	83 c4 0c             	add    esp,0xc
c00221e8:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00221ea <ATA::~ATA()>:
c00221ea:	83 ec 0c             	sub    esp,0xc
c00221ed:	83 ec 0c             	sub    esp,0xc
c00221f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221f4:	e8 cd ff ff ff       	call   c00221c6 <ATA::~ATA()>
c00221f9:	83 c4 10             	add    esp,0x10
c00221fc:	83 ec 08             	sub    esp,0x8
c00221ff:	68 8c 01 00 00       	push   0x18c
c0022204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022208:	e8 4e b0 fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c002220d:	83 c4 10             	add    esp,0x10
c0022210:	83 c4 0c             	add    esp,0xc
c0022213:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022214 <ATAPI::~ATAPI()>:
c0022214:	83 ec 0c             	sub    esp,0xc
c0022217:	ba 44 5c 02 c0       	mov    edx,0xc0025c44
c002221c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022220:	89 10                	mov    DWORD PTR [eax],edx
c0022222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022226:	83 ec 0c             	sub    esp,0xc
c0022229:	50                   	push   eax
c002222a:	e8 df 7b fe ff       	call   c0009e0e <PhysicalDisk::~PhysicalDisk()>
c002222f:	83 c4 10             	add    esp,0x10
c0022232:	90                   	nop
c0022233:	83 c4 0c             	add    esp,0xc
c0022236:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022238 <ATAPI::~ATAPI()>:
c0022238:	83 ec 0c             	sub    esp,0xc
c002223b:	83 ec 0c             	sub    esp,0xc
c002223e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022242:	e8 cd ff ff ff       	call   c0022214 <ATAPI::~ATAPI()>
c0022247:	83 c4 10             	add    esp,0x10
c002224a:	83 ec 08             	sub    esp,0x8
c002224d:	68 84 01 00 00       	push   0x184
c0022252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022256:	e8 00 b0 fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c002225b:	83 c4 10             	add    esp,0x10
c002225e:	83 c4 0c             	add    esp,0xc
c0022261:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022262 <SATA::~SATA()>:
c0022262:	83 ec 0c             	sub    esp,0xc
c0022265:	ba 04 5d 02 c0       	mov    edx,0xc0025d04
c002226a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226e:	89 10                	mov    DWORD PTR [eax],edx
c0022270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022274:	83 ec 0c             	sub    esp,0xc
c0022277:	50                   	push   eax
c0022278:	e8 91 7b fe ff       	call   c0009e0e <PhysicalDisk::~PhysicalDisk()>
c002227d:	83 c4 10             	add    esp,0x10
c0022280:	90                   	nop
c0022281:	83 c4 0c             	add    esp,0xc
c0022284:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022286 <SATA::~SATA()>:
c0022286:	83 ec 0c             	sub    esp,0xc
c0022289:	83 ec 0c             	sub    esp,0xc
c002228c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022290:	e8 cd ff ff ff       	call   c0022262 <SATA::~SATA()>
c0022295:	83 c4 10             	add    esp,0x10
c0022298:	83 ec 08             	sub    esp,0x8
c002229b:	68 7c 01 00 00       	push   0x17c
c00222a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222a4:	e8 b2 af fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c00222a9:	83 c4 10             	add    esp,0x10
c00222ac:	83 c4 0c             	add    esp,0xc
c00222af:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00222b0 <SATAPI::~SATAPI()>:
c00222b0:	83 ec 0c             	sub    esp,0xc
c00222b3:	ba 28 5e 02 c0       	mov    edx,0xc0025e28
c00222b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222bc:	89 10                	mov    DWORD PTR [eax],edx
c00222be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c2:	83 ec 0c             	sub    esp,0xc
c00222c5:	50                   	push   eax
c00222c6:	e8 43 7b fe ff       	call   c0009e0e <PhysicalDisk::~PhysicalDisk()>
c00222cb:	83 c4 10             	add    esp,0x10
c00222ce:	90                   	nop
c00222cf:	83 c4 0c             	add    esp,0xc
c00222d2:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00222d4 <SATAPI::~SATAPI()>:
c00222d4:	83 ec 0c             	sub    esp,0xc
c00222d7:	83 ec 0c             	sub    esp,0xc
c00222da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222de:	e8 cd ff ff ff       	call   c00222b0 <SATAPI::~SATAPI()>
c00222e3:	83 c4 10             	add    esp,0x10
c00222e6:	83 ec 08             	sub    esp,0x8
c00222e9:	68 84 01 00 00       	push   0x184
c00222ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222f2:	e8 64 af fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c00222f7:	83 c4 10             	add    esp,0x10
c00222fa:	83 c4 0c             	add    esp,0xc
c00222fd:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00222fe <IOAPIC::~IOAPIC()>:
c00222fe:	83 ec 0c             	sub    esp,0xc
c0022301:	ba 88 5e 02 c0       	mov    edx,0xc0025e88
c0022306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002230a:	89 10                	mov    DWORD PTR [eax],edx
c002230c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022310:	83 ec 0c             	sub    esp,0xc
c0022313:	50                   	push   eax
c0022314:	e8 83 75 fe ff       	call   c000989c <Device::~Device()>
c0022319:	83 c4 10             	add    esp,0x10
c002231c:	90                   	nop
c002231d:	83 c4 0c             	add    esp,0xc
c0022320:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022322 <IOAPIC::~IOAPIC()>:
c0022322:	83 ec 0c             	sub    esp,0xc
c0022325:	83 ec 0c             	sub    esp,0xc
c0022328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002232c:	e8 cd ff ff ff       	call   c00222fe <IOAPIC::~IOAPIC()>
c0022331:	83 c4 10             	add    esp,0x10
c0022334:	83 ec 08             	sub    esp,0x8
c0022337:	68 68 01 00 00       	push   0x168
c002233c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022340:	e8 16 af fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c0022345:	83 c4 10             	add    esp,0x10
c0022348:	83 c4 0c             	add    esp,0xc
c002234b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002234c <APICTimer::~APICTimer()>:
c002234c:	83 ec 0c             	sub    esp,0xc
c002234f:	ba d0 5e 02 c0       	mov    edx,0xc0025ed0
c0022354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022358:	89 10                	mov    DWORD PTR [eax],edx
c002235a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002235e:	83 ec 0c             	sub    esp,0xc
c0022361:	50                   	push   eax
c0022362:	e8 75 8c fe ff       	call   c000afdc <Timer::~Timer()>
c0022367:	83 c4 10             	add    esp,0x10
c002236a:	90                   	nop
c002236b:	83 c4 0c             	add    esp,0xc
c002236e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022370 <APICTimer::~APICTimer()>:
c0022370:	83 ec 0c             	sub    esp,0xc
c0022373:	83 ec 0c             	sub    esp,0xc
c0022376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002237a:	e8 cd ff ff ff       	call   c002234c <APICTimer::~APICTimer()>
c002237f:	83 c4 10             	add    esp,0x10
c0022382:	83 ec 08             	sub    esp,0x8
c0022385:	68 60 01 00 00       	push   0x160
c002238a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002238e:	e8 c8 ae fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c0022393:	83 c4 10             	add    esp,0x10
c0022396:	83 c4 0c             	add    esp,0xc
c0022399:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002239c <PIT::~PIT()>:
c002239c:	83 ec 0c             	sub    esp,0xc
c002239f:	ba 20 5f 02 c0       	mov    edx,0xc0025f20
c00223a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a8:	89 10                	mov    DWORD PTR [eax],edx
c00223aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ae:	83 ec 0c             	sub    esp,0xc
c00223b1:	50                   	push   eax
c00223b2:	e8 25 8c fe ff       	call   c000afdc <Timer::~Timer()>
c00223b7:	83 c4 10             	add    esp,0x10
c00223ba:	90                   	nop
c00223bb:	83 c4 0c             	add    esp,0xc
c00223be:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00223c0 <PIT::~PIT()>:
c00223c0:	83 ec 0c             	sub    esp,0xc
c00223c3:	83 ec 0c             	sub    esp,0xc
c00223c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223ca:	e8 cd ff ff ff       	call   c002239c <PIT::~PIT()>
c00223cf:	83 c4 10             	add    esp,0x10
c00223d2:	83 ec 08             	sub    esp,0x8
c00223d5:	68 5c 01 00 00       	push   0x15c
c00223da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223de:	e8 78 ae fe ff       	call   c000d25b <operator delete(void*, unsigned long)>
c00223e3:	83 c4 10             	add    esp,0x10
c00223e6:	83 c4 0c             	add    esp,0xc
c00223e9:	c3                   	ret    

Disassembly of section userkernel:

c0027000 <KiDefaultSignalHandlerAbort(int)>:
c0027000:	57                   	push   edi
c0027001:	b9 07 00 00 00       	mov    ecx,0x7
c0027006:	56                   	push   esi
c0027007:	be c7 40 02 c0       	mov    esi,0xc00240c7
c002700c:	83 ec 24             	sub    esp,0x24
c002700f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0027013:	fc                   	cld    
c0027014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002701a:	50                   	push   eax
c002701b:	6a 00                	push   0x0
c002701d:	6a 38                	push   0x38
c002701f:	6a 01                	push   0x1
c0027021:	e8 2c 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0027026:	83 c4 34             	add    esp,0x34
c0027029:	5e                   	pop    esi
c002702a:	5f                   	pop    edi
c002702b:	c3                   	ret    

c002702c <KiDefaultSignalHandlerTerminate(int)>:
c002702c:	57                   	push   edi
c002702d:	b9 08 00 00 00       	mov    ecx,0x8
c0027032:	56                   	push   esi
c0027033:	be e3 40 02 c0       	mov    esi,0xc00240e3
c0027038:	83 ec 24             	sub    esp,0x24
c002703b:	89 e7                	mov    edi,esp
c002703d:	fc                   	cld    
c002703e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027040:	54                   	push   esp
c0027041:	6a 00                	push   0x0
c0027043:	6a 37                	push   0x37
c0027045:	6a 01                	push   0x1
c0027047:	e8 06 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002704c:	83 c4 34             	add    esp,0x34
c002704f:	5e                   	pop    esi
c0027050:	5f                   	pop    edi
c0027051:	c3                   	ret    

c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0027052:	53                   	push   ebx
c0027053:	83 ec 10             	sub    esp,0x10
c0027056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002705a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002705e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027066:	cd 60                	int    0x60
c0027068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002706c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027078:	83 c4 10             	add    esp,0x10
c002707b:	5b                   	pop    ebx
c002707c:	c3                   	ret    

Disassembly of section align_previous:

c0028000 <DO_NOT_DELETE()>:
c0028000:	c3                   	ret    
