
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 7b f9 00 00       	call   c000f99b <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 68 70 02 c0       	mov    eax,0xc0027068
c0000025:	3d 68 70 02 c0       	cmp    eax,0xc0027068
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 68 70 02 c0       	push   0xc0027068
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 68 70 02 c0       	mov    eax,0xc0027068
c0000051:	2d 68 70 02 c0       	sub    eax,0xc0027068
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 68 70 02 c0       	push   0xc0027068
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 90 02 c0 00 	cmp    BYTE PTR ds:0xc00290c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 00 2b 02 c0       	mov    ebx,0xc0022b00
c0000097:	81 eb fc 2a 02 c0    	sub    ebx,0xc0022afc
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be fc 2a 02 c0       	mov    esi,0xc0022afc
c00000a6:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 90 02 c0       	mov    ds:0xc00290c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 68 70 02 c0       	push   0xc0027068
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 90 02 c0 01 	mov    BYTE PTR ds:0xc00290c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 90 02 c0       	push   0xc00290c8
c0000108:	68 68 70 02 c0       	push   0xc0027068
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 ff 5a 01 00       	call   c0015dac <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 4d 3f 01 00       	call   c0014212 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 dd 5a 01 00       	call   c0015dac <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 3e 60 01 00       	call   c001632c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 a1 65 01 00       	call   c0016898 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 d1 02 c0 	lgdtd  ds:0xc002d118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 26 eb 00 00       	jmp    c000eea5 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 90 02 c0       	mov    ds:0xc00290e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 90 02 c0    	mov    DWORD PTR ds:0xc00290e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 90 02 c0    	mov    ebx,DWORD PTR ds:0xc00290e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 20 2b 02 c0 02 	test   BYTE PTR [edx-0x3ffdd4e0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 20 2b 02 c0 01 	test   BYTE PTR [edx-0x3ffdd4e0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 20 2b 02 c0 08 	test   BYTE PTR [edx-0x3ffdd4e0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 20 2b 02 c0 08 	test   BYTE PTR [edx-0x3ffdd4e0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 20 2b 02 c0 04 	test   BYTE PTR [ecx-0x3ffdd4e0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 20 2b 02 c0 01 	test   BYTE PTR [edx-0x3ffdd4e0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 91 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 91 02 c0    	mov    ecx,DWORD PTR ds:0xc002913c
c0000e2a:	c7 42 0c 34 91 02 c0 	mov    DWORD PTR [edx+0xc],0xc0029134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 91 02 c0 02 	test   BYTE PTR ds:0xc0029100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 94 02 c0    	dec    DWORD PTR ds:0xc0029450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 94 02 c0    	sub    DWORD PTR ds:0xc0029464,eax
c0000e8e:	e8 53 e7 00 00       	call   c000f5e6 <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 60 e6 00 00       	call   c000f588 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 3b e5 00 00       	call   c000f552 <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 36 e5 00 00       	call   c000f588 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 2c e4 00 00       	call   c000f552 <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 47 e3 00 00       	call   c000f552 <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 31 e3 00 00       	call   c000f552 <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 91 02 c0    	mov    edi,DWORD PTR ds:0xc0029100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 91 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 91 02 c0 	lea    edx,[eax*8-0x3ffd6ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029140
c0001313:	81 fb 34 91 02 c0    	cmp    ebx,0xc0029134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 91 02 c0       	cmp    eax,0xc0029134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 91 02 c0    	cmp    DWORD PTR ds:0xc0029130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 91 02 c0       	mov    ds:0xc002913c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 91 02 c0       	mov    ds:0xc0029130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c000136a:	c7 40 0c 34 91 02 c0 	mov    DWORD PTR [eax+0xc],0xc0029134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 90 02 c0 	lea    ebp,[edx*4-0x3ffd6f08]
c00013b3:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 91 02 c0 	lea    ecx,[edx*4-0x3ffd6f00]
c00013ce:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 94 02 c0 	or     DWORD PTR [edi*4-0x3ffd6bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 91 02 c0 	lea    eax,[eax*8-0x3ffd6ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,ecx
c0001488:	89 0d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,ecx
c000148e:	c7 41 08 34 91 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0029134
c0001495:	c7 41 0c 34 91 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0029134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 91 02 c0 	lea    edx,[ecx*8-0x3ffd6ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 91 02 c0 	lea    edx,[eax*4-0x3ffd6ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 94 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edi
c000155b:	89 3d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,edi
c0001561:	c7 47 08 34 91 02 c0 	mov    DWORD PTR [edi+0x8],0xc0029134
c0001568:	c7 47 0c 34 91 02 c0 	mov    DWORD PTR [edi+0xc],0xc0029134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 91 02 c0    	mov    DWORD PTR ds:0xc0029130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 91 02 c0       	mov    edx,0xc0029100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029454
c00016b6:	c7 05 54 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 94 02 c0    	push   DWORD PTR ds:0xc002945c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 94 02 c0       	mov    eax,ds:0xc002945c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 91 02 c0 00 	cmp    DWORD PTR ds:0xc002912c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 91 02 c0       	mov    eax,0xc0029134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 94 02 c0       	cmp    eax,0xc002942c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 24 2c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd3dc]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 91 02 c0       	mov    ds:0xc0029100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 94 02 c0    	mov    DWORD PTR ds:0xc0029444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 94 02 c0    	mov    DWORD PTR ds:0xc0029448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 94 02 c0    	mov    DWORD PTR ds:0xc002944c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 20 f5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0ae0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 cd a7 01 00       	jmp    c001c788 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 20 f5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0ae0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 f7 a7 01 00       	jmp    c001c7c8 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 20 f5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0ae0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 18 a8 01 00       	jmp    c001c808 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 80 2d 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd280]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 80 2d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd280]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 4c 5c 02 c0       	mov    edx,0xc0025c4c
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 3c 2c 02 c0       	mov    edx,0xc0022c3c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 94 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 94 02 c0    	mov    ax,ds:0xc0029480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 94 02 c0    	mov    ds:0xc0029480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 42 2c 02 c0       	mov    eax,0xc0022c42
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 00 2d 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd300]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 4b 2c 02 c0       	mov    eax,0xc0022c4b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 80 2d 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdd280]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 94 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 d0 2c 02 c0       	mov    eax,0xc0022cd0
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb c0 2c 02 c0       	mov    ebx,0xc0022cc0
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 a0 2c 02 c0       	mov    eax,0xc0022ca0
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 b0 2c 02 c0       	mov    eax,0xc0022cb0
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 52 2c 02 c0       	mov    edx,0xc0022c52
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 5e 2c 02 c0       	mov    edx,0xc0022c5e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba 72 2c 02 c0       	mov    edx,0xc0022c72
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 25 98 00 00       	call   c000f668 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 1d 98 00 00       	call   c000f678 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c a0 30 02 c0 	mov    DWORD PTR [esp+0xc],0xc00230a0
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 a0 30 02 c0 	mov    DWORD PTR [esp+0x10],0xc00230a0
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 e0 2d 02 c0       	mov    eax,0xc0022de0
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 a0 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd260]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 a0 31 02 c0       	push   0xc00231a0
c0006327:	e8 00 6e 01 00       	call   c001d12c <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 ae 31 02 c0       	push   0xc00231ae
c000635f:	e8 c8 6d 01 00       	call   c001d12c <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 95 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd6a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 90 02 c0 	movsx  eax,BYTE PTR ds:0xc0029060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 31 6d 01 00       	call   c001d0d0 <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 90 02 c0       	mov    eax,0xc0029080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 90 02 c0       	mov    eax,0xc0029020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 9e 02 c0    	mov    ecx,DWORD PTR ds:0xc0029eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 bd 31 02 c0       	push   0xc00231bd
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 9e 02 c0       	mov    ecx,0xc0029e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 95 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd6ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd6ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6abc],esi
c000675b:	c7 87 48 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6ab8],0x0
c0006765:	89 87 40 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6a30],0x0
c000677d:	89 87 4c 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 95 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 95 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd6a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c00067f6:	8b 9d 4c 95 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd6ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 95 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd6ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 90 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6fe0]
c000688d:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 95 02 c0    	add    DWORD PTR [ebp-0x3ffd6ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00068ef:	8d 8d 40 95 02 c0    	lea    ecx,[ebp-0x3ffd6ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 95 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd6ab4]
c000692c:	05 40 95 02 c0       	add    eax,0xc0029540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 95 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd6ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 95 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd6ac0],0x0
c00069ec:	8d b8 40 95 02 c0    	lea    edi,[eax-0x3ffd6ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 c0 31 02 c0       	push   0xc00231c0
c0006a0f:	e8 18 67 01 00       	call   c001d12c <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 26 67 01 00       	call   c001d148 <iso_kprintfd>
c0006a22:	c7 04 24 c5 31 02 c0 	mov    DWORD PTR [esp],0xc00231c5
c0006a29:	e8 fe 66 01 00       	call   c001d12c <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6ac0]
c0006a35:	e8 0e 67 01 00       	call   c001d148 <iso_kprintfd>
c0006a3a:	c7 04 24 cb 31 02 c0 	mov    DWORD PTR [esp],0xc00231cb
c0006a41:	e8 e6 66 01 00       	call   c001d12c <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6abc]
c0006a4d:	e8 f6 66 01 00       	call   c001d148 <iso_kprintfd>
c0006a52:	c7 04 24 d1 31 02 c0 	mov    DWORD PTR [esp],0xc00231d1
c0006a59:	e8 ce 66 01 00       	call   c001d12c <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6a30]
c0006a65:	e8 de 66 01 00       	call   c001d148 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 95 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd6ab8]
c0006acb:	81 c2 40 95 02 c0    	add    edx,0xc0029540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 95 02 c0    	lea    ebp,[edi-0x3ffd6aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 95 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd6aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 bd 31 02 c0       	push   0xc00231bd
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 95 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd6aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6ab0],eax
c0006c0a:	89 93 54 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6aac],edx
c0006c10:	81 c3 40 95 02 c0    	add    ebx,0xc0029540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 95 02 c0    	lea    eax,[edi-0x3ffd6ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 da 31 02 c0       	push   0xc00231da
c0006c32:	e8 f5 64 01 00       	call   c001d12c <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 90 02 c0       	mov    ds:0xc0029060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb4,0x0
c0006c67:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 e5 31 02 c0       	push   0xc00231e5
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 9e 02 c0       	mov    ds:0xc0029eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 ec 31 02 c0       	push   0xc00231ec
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 90 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd6f80]
c0006d05:	bf 80 9e 02 c0       	mov    edi,0xc0029e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 9e 02 c0       	mov    eax,0xc0029e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 9e 02 c0       	mov    ds:0xc0029ea8,eax
c0006d28:	b8 8a 9e 02 c0       	mov    eax,0xc0029e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 9e 02 c0       	mov    ds:0xc0029ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 f3 31 02 c0       	push   0xc00231f3
c0006d49:	e8 de 63 01 00       	call   c001d12c <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 fe 31 02 c0       	push   0xc00231fe
c0006d64:	e8 c3 63 01 00       	call   c001d12c <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 95 02 c0       	push   0xc0029540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0029540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 d5 88 00 00       	call   c000f668 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 9e 02 c0       	mov    ds:0xc0029eb0,eax
c0006d9f:	e8 c4 88 00 00       	call   c000f668 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 af 88 00 00       	call   c000f668 <malloc>
c0006db9:	89 04 9d 80 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 96 88 00 00       	call   c000f668 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6f80]
c0006dff:	e8 74 88 00 00       	call   c000f678 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 66 88 00 00       	call   c000f678 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 9e 02 c0       	mov    eax,ds:0xc0029eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 4c 88 00 00       	call   c000f678 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 37 88 00 00       	call   c000f678 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	53                   	push   ebx
c0006ed1:	83 ec 14             	sub    esp,0x14
c0006ed4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ed8:	6a 10                	push   0x10
c0006eda:	e8 99 62 00 00       	call   c000d178 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006edf:	83 c4 10             	add    esp,0x10
c0006ee2:	84 c0                	test   al,al
c0006ee4:	75 12                	jne    c0006ef8 <Dbg::logc(char)+0x28>
c0006ee6:	ba fd 03 00 00       	mov    edx,0x3fd
c0006eeb:	ec                   	in     al,dx
c0006eec:	a8 20                	test   al,0x20
c0006eee:	74 fb                	je     c0006eeb <Dbg::logc(char)+0x1b>
c0006ef0:	ba f8 03 00 00       	mov    edx,0x3f8
c0006ef5:	88 d8                	mov    al,bl
c0006ef7:	ee                   	out    dx,al
c0006ef8:	83 c4 08             	add    esp,0x8
c0006efb:	5b                   	pop    ebx
c0006efc:	c3                   	ret    

c0006efd <Dbg::logs(char*)>:
c0006efd:	53                   	push   ebx
c0006efe:	83 ec 08             	sub    esp,0x8
c0006f01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	74 16                	je     c0006f22 <Dbg::logs(char*)+0x25>
c0006f0c:	83 ec 0c             	sub    esp,0xc
c0006f0f:	83 c3 01             	add    ebx,0x1
c0006f12:	50                   	push   eax
c0006f13:	e8 b8 ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f18:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1b:	83 c4 10             	add    esp,0x10
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	75 ea                	jne    c0006f0c <Dbg::logs(char*)+0xf>
c0006f22:	83 c4 08             	add    esp,0x8
c0006f25:	5b                   	pop    ebx
c0006f26:	c3                   	ret    

c0006f27 <Dbg::logWriteInt(unsigned int)>:
c0006f27:	83 ec 1c             	sub    esp,0x1c
c0006f2a:	6a 0a                	push   0xa
c0006f2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f30:	50                   	push   eax
c0006f31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f35:	50                   	push   eax
c0006f36:	e8 24 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f3b:	50                   	push   eax
c0006f3c:	e8 bc ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f41:	83 c4 2c             	add    esp,0x2c
c0006f44:	c3                   	ret    

c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f45:	83 ec 1c             	sub    esp,0x1c
c0006f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f4c:	50                   	push   eax
c0006f4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f51:	50                   	push   eax
c0006f52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f56:	52                   	push   edx
c0006f57:	e8 03 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5c:	50                   	push   eax
c0006f5d:	e8 9b ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f62:	83 c4 2c             	add    esp,0x2c
c0006f65:	c3                   	ret    

c0006f66 <Dbg::kprintf(char const*, ...)>:
c0006f66:	55                   	push   ebp
c0006f67:	57                   	push   edi
c0006f68:	56                   	push   esi
c0006f69:	53                   	push   ebx
c0006f6a:	83 ec 1c             	sub    esp,0x1c
c0006f6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f71:	85 db                	test   ebx,ebx
c0006f73:	0f 84 4c 01 00 00    	je     c00070c5 <Dbg::kprintf(char const*, ...)+0x15f>
c0006f79:	83 ec 0c             	sub    esp,0xc
c0006f7c:	6a 10                	push   0x10
c0006f7e:	e8 f5 61 00 00       	call   c000d178 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f83:	83 c4 10             	add    esp,0x10
c0006f86:	84 c0                	test   al,al
c0006f88:	74 08                	je     c0006f92 <Dbg::kprintf(char const*, ...)+0x2c>
c0006f8a:	83 c4 1c             	add    esp,0x1c
c0006f8d:	5b                   	pop    ebx
c0006f8e:	5e                   	pop    esi
c0006f8f:	5f                   	pop    edi
c0006f90:	5d                   	pop    ebp
c0006f91:	c3                   	ret    
c0006f92:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006f96:	31 ff                	xor    edi,edi
c0006f98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f9c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f9f:	85 c0                	test   eax,eax
c0006fa1:	74 e7                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fa3:	8d 77 01             	lea    esi,[edi+0x1]
c0006fa6:	83 f8 25             	cmp    eax,0x25
c0006fa9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fac:	75 4c                	jne    c0006ffa <Dbg::kprintf(char const*, ...)+0x94>
c0006fae:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fb1:	83 c7 02             	add    edi,0x2
c0006fb4:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fb7:	83 e8 25             	sub    eax,0x25
c0006fba:	0f b6 c0             	movzx  eax,al
c0006fbd:	83 f8 53             	cmp    eax,0x53
c0006fc0:	0f 87 e1 00 00 00    	ja     c00070a7 <Dbg::kprintf(char const*, ...)+0x141>
c0006fc6:	ff 24 85 48 32 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcdb8]
c0006fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fd1:	83 ec 0c             	sub    esp,0xc
c0006fd4:	89 c8                	mov    eax,ecx
c0006fd6:	83 c1 04             	add    ecx,0x4
c0006fd9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fdf:	50                   	push   eax
c0006fe0:	e8 42 ff ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0006fe5:	83 c4 10             	add    esp,0x10
c0006fe8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006feb:	85 c0                	test   eax,eax
c0006fed:	74 9b                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fef:	8d 77 01             	lea    esi,[edi+0x1]
c0006ff2:	83 f8 25             	cmp    eax,0x25
c0006ff5:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006ff8:	74 b4                	je     c0006fae <Dbg::kprintf(char const*, ...)+0x48>
c0006ffa:	83 ec 0c             	sub    esp,0xc
c0006ffd:	89 f7                	mov    edi,esi
c0006fff:	50                   	push   eax
c0007000:	89 ee                	mov    esi,ebp
c0007002:	e8 c9 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007007:	83 c4 10             	add    esp,0x10
c000700a:	eb dc                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c000700c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 c8                	mov    eax,ecx
c0007015:	83 c1 04             	add    ecx,0x4
c0007018:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000701c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000701e:	55                   	push   ebp
c000701f:	e8 d9 fe ff ff       	call   c0006efd <Dbg::logs(char*)>
c0007024:	83 c4 10             	add    esp,0x10
c0007027:	eb bf                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007029:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000702d:	83 ec 0c             	sub    esp,0xc
c0007030:	89 d0                	mov    eax,edx
c0007032:	83 c2 04             	add    edx,0x4
c0007035:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007039:	8b 08                	mov    ecx,DWORD PTR [eax]
c000703b:	51                   	push   ecx
c000703c:	e8 e6 fe ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0007041:	83 c4 10             	add    esp,0x10
c0007044:	eb a2                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007046:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000704a:	83 ec 0c             	sub    esp,0xc
c000704d:	89 d0                	mov    eax,edx
c000704f:	83 c2 04             	add    edx,0x4
c0007052:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007056:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0007059:	50                   	push   eax
c000705a:	e8 71 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000705f:	83 c4 10             	add    esp,0x10
c0007062:	eb 84                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007064:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007068:	89 c8                	mov    eax,ecx
c000706a:	83 c1 04             	add    ecx,0x4
c000706d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007071:	83 ec 08             	sub    esp,0x8
c0007074:	6a 10                	push   0x10
c0007076:	8b 10                	mov    edx,DWORD PTR [eax]
c0007078:	52                   	push   edx
c0007079:	e8 c7 fe ff ff       	call   c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>
c000707e:	83 c4 10             	add    esp,0x10
c0007081:	e9 62 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000708a:	89 d0                	mov    eax,edx
c000708c:	83 c2 08             	add    edx,0x8
c000708f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007093:	eb dc                	jmp    c0007071 <Dbg::kprintf(char const*, ...)+0x10b>
c0007095:	83 ec 0c             	sub    esp,0xc
c0007098:	6a 25                	push   0x25
c000709a:	e8 31 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000709f:	83 c4 10             	add    esp,0x10
c00070a2:	e9 41 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070a7:	83 ec 0c             	sub    esp,0xc
c00070aa:	6a 25                	push   0x25
c00070ac:	e8 1f fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070b1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00070b8:	e8 13 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	e9 23 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 10 32 02 c0       	push   0xc0023210
c00070cd:	e8 94 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	83 c4 1c             	add    esp,0x1c
c00070d8:	5b                   	pop    ebx
c00070d9:	5e                   	pop    esi
c00070da:	5f                   	pop    edi
c00070db:	5d                   	pop    ebp
c00070dc:	c3                   	ret    
c00070dd:	66 90                	xchg   ax,ax
c00070df:	90                   	nop

c00070e0 <KiUbsanPrintDetails(char const*, void*)>:
c00070e0:	83 ec 1c             	sub    esp,0x1c
c00070e3:	83 ec 08             	sub    esp,0x8
c00070e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070ea:	68 98 33 02 c0       	push   0xc0023398
c00070ef:	e8 72 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070f4:	83 c4 10             	add    esp,0x10
c00070f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007103:	8b 00                	mov    eax,DWORD PTR [eax]
c0007105:	83 ec 08             	sub    esp,0x8
c0007108:	50                   	push   eax
c0007109:	68 ac 33 02 c0       	push   0xc00233ac
c000710e:	e8 53 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007113:	83 c4 10             	add    esp,0x10
c0007116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000711a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000711d:	83 ec 08             	sub    esp,0x8
c0007120:	50                   	push   eax
c0007121:	68 b6 33 02 c0       	push   0xc00233b6
c0007126:	e8 3b fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007132:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007135:	83 ec 08             	sub    esp,0x8
c0007138:	50                   	push   eax
c0007139:	68 c0 33 02 c0       	push   0xc00233c0
c000713e:	e8 23 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007143:	83 c4 10             	add    esp,0x10
c0007146:	90                   	nop
c0007147:	83 c4 1c             	add    esp,0x1c
c000714a:	c3                   	ret    
c000714b:	90                   	nop

c000714c <__ubsan_handle_type_mismatch_v1>:
c000714c:	83 ec 0c             	sub    esp,0xc
c000714f:	83 ec 08             	sub    esp,0x8
c0007152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007156:	68 04 35 02 c0       	push   0xc0023504
c000715b:	e8 80 ff ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007160:	83 c4 10             	add    esp,0x10
c0007163:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007168:	75 16                	jne    c0007180 <__ubsan_handle_type_mismatch_v1+0x34>
c000716a:	83 ec 0c             	sub    esp,0xc
c000716d:	68 ca 33 02 c0       	push   0xc00233ca
c0007172:	e8 ef fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007177:	83 c4 10             	add    esp,0x10
c000717a:	e9 91 00 00 00       	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c000717f:	90                   	nop
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007187:	85 c0                	test   eax,eax
c0007189:	74 29                	je     c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000718b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000718f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007192:	83 e8 01             	sub    eax,0x1
c0007195:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007199:	75 19                	jne    c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000719b:	83 ec 08             	sub    esp,0x8
c000719e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071a2:	68 24 35 02 c0       	push   0xc0023524
c00071a7:	e8 ba fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071ac:	83 c4 10             	add    esp,0x10
c00071af:	eb 5f                	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071b1:	8d 76 00             	lea    esi,[esi+0x0]
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 df 33 02 c0       	push   0xc00233df
c00071bc:	e8 a5 fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071c8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071cb:	0f b6 c0             	movzx  eax,al
c00071ce:	83 ec 08             	sub    esp,0x8
c00071d1:	50                   	push   eax
c00071d2:	68 f9 33 02 c0       	push   0xc00233f9
c00071d7:	e8 8a fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071dc:	83 c4 10             	add    esp,0x10
c00071df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071e6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f1:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071f4:	0f b6 c0             	movzx  eax,al
c00071f7:	8b 04 85 00 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9a00]
c00071fe:	51                   	push   ecx
c00071ff:	52                   	push   edx
c0007200:	50                   	push   eax
c0007201:	68 4c 35 02 c0       	push   0xc002354c
c0007206:	e8 5b fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000720b:	83 c4 10             	add    esp,0x10
c000720e:	66 90                	xchg   ax,ax
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	68 04 35 02 c0       	push   0xc0023504
c0007218:	e8 9f 88 00 00       	call   c000fabc <KePanic(char const*)>
c000721d:	83 c4 10             	add    esp,0x10
c0007220:	90                   	nop
c0007221:	83 c4 0c             	add    esp,0xc
c0007224:	c3                   	ret    
c0007225:	8d 76 00             	lea    esi,[esi+0x0]

c0007228 <__ubsan_handle_pointer_overflow>:
c0007228:	83 ec 0c             	sub    esp,0xc
c000722b:	83 ec 08             	sub    esp,0x8
c000722e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007232:	68 94 35 02 c0       	push   0xc0023594
c0007237:	e8 a4 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000723c:	83 c4 10             	add    esp,0x10
c000723f:	83 ec 0c             	sub    esp,0xc
c0007242:	68 94 35 02 c0       	push   0xc0023594
c0007247:	e8 70 88 00 00       	call   c000fabc <KePanic(char const*)>
c000724c:	83 c4 10             	add    esp,0x10
c000724f:	90                   	nop
c0007250:	83 c4 0c             	add    esp,0xc
c0007253:	c3                   	ret    

c0007254 <__ubsan_handle_out_of_bounds>:
c0007254:	83 ec 0c             	sub    esp,0xc
c0007257:	83 ec 08             	sub    esp,0x8
c000725a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725e:	68 04 34 02 c0       	push   0xc0023404
c0007263:	e8 78 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	83 ec 0c             	sub    esp,0xc
c000726e:	68 04 34 02 c0       	push   0xc0023404
c0007273:	e8 44 88 00 00       	call   c000fabc <KePanic(char const*)>
c0007278:	83 c4 10             	add    esp,0x10
c000727b:	90                   	nop
c000727c:	83 c4 0c             	add    esp,0xc
c000727f:	c3                   	ret    

c0007280 <__ubsan_handle_add_overflow>:
c0007280:	83 ec 0c             	sub    esp,0xc
c0007283:	83 ec 08             	sub    esp,0x8
c0007286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000728a:	68 21 34 02 c0       	push   0xc0023421
c000728f:	e8 4c fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007294:	83 c4 10             	add    esp,0x10
c0007297:	83 ec 0c             	sub    esp,0xc
c000729a:	68 21 34 02 c0       	push   0xc0023421
c000729f:	e8 18 88 00 00       	call   c000fabc <KePanic(char const*)>
c00072a4:	83 c4 10             	add    esp,0x10
c00072a7:	90                   	nop
c00072a8:	83 c4 0c             	add    esp,0xc
c00072ab:	c3                   	ret    

c00072ac <__ubsan_handle_load_invalid_value>:
c00072ac:	83 ec 0c             	sub    esp,0xc
c00072af:	83 ec 08             	sub    esp,0x8
c00072b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b6:	68 b4 35 02 c0       	push   0xc00235b4
c00072bb:	e8 20 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072c0:	83 c4 10             	add    esp,0x10
c00072c3:	83 ec 0c             	sub    esp,0xc
c00072c6:	68 b4 35 02 c0       	push   0xc00235b4
c00072cb:	e8 ec 87 00 00       	call   c000fabc <KePanic(char const*)>
c00072d0:	83 c4 10             	add    esp,0x10
c00072d3:	90                   	nop
c00072d4:	83 c4 0c             	add    esp,0xc
c00072d7:	c3                   	ret    

c00072d8 <__ubsan_handle_divrem_overflow>:
c00072d8:	83 ec 0c             	sub    esp,0xc
c00072db:	83 ec 08             	sub    esp,0x8
c00072de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072e2:	68 d8 35 02 c0       	push   0xc00235d8
c00072e7:	e8 f4 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072ec:	83 c4 10             	add    esp,0x10
c00072ef:	83 ec 0c             	sub    esp,0xc
c00072f2:	68 d8 35 02 c0       	push   0xc00235d8
c00072f7:	e8 c0 87 00 00       	call   c000fabc <KePanic(char const*)>
c00072fc:	83 c4 10             	add    esp,0x10
c00072ff:	90                   	nop
c0007300:	83 c4 0c             	add    esp,0xc
c0007303:	c3                   	ret    

c0007304 <__ubsan_handle_mul_overflow>:
c0007304:	83 ec 0c             	sub    esp,0xc
c0007307:	83 ec 08             	sub    esp,0x8
c000730a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730e:	68 3d 34 02 c0       	push   0xc002343d
c0007313:	e8 c8 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007318:	83 c4 10             	add    esp,0x10
c000731b:	83 ec 0c             	sub    esp,0xc
c000731e:	68 3d 34 02 c0       	push   0xc002343d
c0007323:	e8 94 87 00 00       	call   c000fabc <KePanic(char const*)>
c0007328:	83 c4 10             	add    esp,0x10
c000732b:	90                   	nop
c000732c:	83 c4 0c             	add    esp,0xc
c000732f:	c3                   	ret    

c0007330 <__ubsan_handle_sub_overflow>:
c0007330:	83 ec 0c             	sub    esp,0xc
c0007333:	83 ec 08             	sub    esp,0x8
c0007336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000733a:	68 59 34 02 c0       	push   0xc0023459
c000733f:	e8 9c fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007344:	83 c4 10             	add    esp,0x10
c0007347:	83 ec 0c             	sub    esp,0xc
c000734a:	68 59 34 02 c0       	push   0xc0023459
c000734f:	e8 68 87 00 00       	call   c000fabc <KePanic(char const*)>
c0007354:	83 c4 10             	add    esp,0x10
c0007357:	90                   	nop
c0007358:	83 c4 0c             	add    esp,0xc
c000735b:	c3                   	ret    

c000735c <__ubsan_handle_shift_out_of_bounds>:
c000735c:	83 ec 0c             	sub    esp,0xc
c000735f:	83 ec 08             	sub    esp,0x8
c0007362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007366:	68 f8 35 02 c0       	push   0xc00235f8
c000736b:	e8 70 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007370:	83 c4 10             	add    esp,0x10
c0007373:	83 ec 0c             	sub    esp,0xc
c0007376:	68 f8 35 02 c0       	push   0xc00235f8
c000737b:	e8 3c 87 00 00       	call   c000fabc <KePanic(char const*)>
c0007380:	83 c4 10             	add    esp,0x10
c0007383:	90                   	nop
c0007384:	83 c4 0c             	add    esp,0xc
c0007387:	c3                   	ret    

c0007388 <__ubsan_handle_negate_overflow>:
c0007388:	83 ec 0c             	sub    esp,0xc
c000738b:	83 ec 08             	sub    esp,0x8
c000738e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007392:	68 1c 36 02 c0       	push   0xc002361c
c0007397:	e8 44 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000739c:	83 c4 10             	add    esp,0x10
c000739f:	83 ec 0c             	sub    esp,0xc
c00073a2:	68 1c 36 02 c0       	push   0xc002361c
c00073a7:	e8 10 87 00 00       	call   c000fabc <KePanic(char const*)>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	90                   	nop
c00073b0:	83 c4 0c             	add    esp,0xc
c00073b3:	c3                   	ret    

c00073b4 <KiIsHashInTable(unsigned short)>:
c00073b4:	0f b7 d0             	movzx  edx,ax
c00073b7:	83 e0 07             	and    eax,0x7
c00073ba:	c1 fa 03             	sar    edx,0x3
c00073bd:	88 c1                	mov    cl,al
c00073bf:	0f b6 92 00 a3 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd5d00]
c00073c6:	d3 fa                	sar    edx,cl
c00073c8:	89 d0                	mov    eax,edx
c00073ca:	83 e0 01             	and    eax,0x1
c00073cd:	c3                   	ret    

c00073ce <KiSetHashInTable(unsigned short, bool)>:
c00073ce:	56                   	push   esi
c00073cf:	53                   	push   ebx
c00073d0:	0f b7 d8             	movzx  ebx,ax
c00073d3:	c1 fb 03             	sar    ebx,0x3
c00073d6:	83 e0 07             	and    eax,0x7
c00073d9:	89 c1                	mov    ecx,eax
c00073db:	b8 01 00 00 00       	mov    eax,0x1
c00073e0:	0f b6 b3 00 a3 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd5d00]
c00073e7:	d3 e0                	shl    eax,cl
c00073e9:	84 d2                	test   dl,dl
c00073eb:	74 04                	je     c00073f1 <KiSetHashInTable(unsigned short, bool)+0x23>
c00073ed:	09 f0                	or     eax,esi
c00073ef:	eb 04                	jmp    c00073f5 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073f1:	f7 d0                	not    eax
c00073f3:	21 f0                	and    eax,esi
c00073f5:	88 83 00 a3 02 c0    	mov    BYTE PTR [ebx-0x3ffd5d00],al
c00073fb:	5b                   	pop    ebx
c00073fc:	5e                   	pop    esi
c00073fd:	c3                   	ret    

c00073fe <KiFlushSymlinkChanges()>:
c00073fe:	57                   	push   edi
c00073ff:	56                   	push   esi
c0007400:	53                   	push   ebx
c0007401:	83 ec 1c             	sub    esp,0x1c
c0007404:	68 14 01 00 00       	push   0x114
c0007409:	e8 5a 82 00 00       	call   c000f668 <malloc>
c000740e:	83 c4 0c             	add    esp,0xc
c0007411:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0007417:	68 3b 36 02 c0       	push   0xc002363b
c000741c:	50                   	push   eax
c000741d:	89 c3                	mov    ebx,eax
c000741f:	e8 64 0d 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007424:	83 c4 10             	add    esp,0x10
c0007427:	85 db                	test   ebx,ebx
c0007429:	75 10                	jne    c000743b <KiFlushSymlinkChanges()+0x3d>
c000742b:	83 ec 0c             	sub    esp,0xc
c000742e:	68 59 36 02 c0       	push   0xc0023659
c0007433:	e8 84 86 00 00       	call   c000fabc <KePanic(char const*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	50                   	push   eax
c000743c:	50                   	push   eax
c000743d:	6a 06                	push   0x6
c000743f:	53                   	push   ebx
c0007440:	e8 61 0d 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007445:	83 c4 10             	add    esp,0x10
c0007448:	85 c0                	test   eax,eax
c000744a:	74 10                	je     c000745c <KiFlushSymlinkChanges()+0x5e>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	68 73 36 02 c0       	push   0xc0023673
c0007454:	e8 63 86 00 00       	call   c000fabc <KePanic(char const*)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	31 f6                	xor    esi,esi
c000745e:	39 35 c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,esi
c0007464:	7e 70                	jle    c00074d6 <KiFlushSymlinkChanges()+0xd8>
c0007466:	83 ec 0c             	sub    esp,0xc
c0007469:	89 f0                	mov    eax,esi
c000746b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000746d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007471:	c1 e0 08             	shl    eax,0x8
c0007474:	57                   	push   edi
c0007475:	05 00 9f 02 c0       	add    eax,0xc0029f00
c000747a:	50                   	push   eax
c000747b:	6a 00                	push   0x0
c000747d:	68 00 01 00 00       	push   0x100
c0007482:	53                   	push   ebx
c0007483:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007486:	83 c4 20             	add    esp,0x20
c0007489:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007491:	74 10                	je     c00074a3 <KiFlushSymlinkChanges()+0xa5>
c0007493:	83 ec 0c             	sub    esp,0xc
c0007496:	68 8d 36 02 c0       	push   0xc002368d
c000749b:	e8 1c 86 00 00       	call   c000fabc <KePanic(char const*)>
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a5:	8d 14 f5 e0 9e 02 c0 	lea    edx,[esi*8-0x3ffd6120]
c00074ac:	83 ec 0c             	sub    esp,0xc
c00074af:	57                   	push   edi
c00074b0:	52                   	push   edx
c00074b1:	6a 00                	push   0x0
c00074b3:	6a 08                	push   0x8
c00074b5:	53                   	push   ebx
c00074b6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074b9:	83 c4 20             	add    esp,0x20
c00074bc:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074c1:	74 10                	je     c00074d3 <KiFlushSymlinkChanges()+0xd5>
c00074c3:	83 ec 0c             	sub    esp,0xc
c00074c6:	68 a7 36 02 c0       	push   0xc00236a7
c00074cb:	e8 ec 85 00 00       	call   c000fabc <KePanic(char const*)>
c00074d0:	83 c4 10             	add    esp,0x10
c00074d3:	46                   	inc    esi
c00074d4:	eb 88                	jmp    c000745e <KiFlushSymlinkChanges()+0x60>
c00074d6:	83 ec 0c             	sub    esp,0xc
c00074d9:	53                   	push   ebx
c00074da:	e8 25 0d 00 00       	call   c0008204 <File::close()>
c00074df:	83 c4 10             	add    esp,0x10
c00074e2:	85 db                	test   ebx,ebx
c00074e4:	74 0c                	je     c00074f2 <KiFlushSymlinkChanges()+0xf4>
c00074e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074e8:	83 ec 0c             	sub    esp,0xc
c00074eb:	53                   	push   ebx
c00074ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ef:	83 c4 10             	add    esp,0x10
c00074f2:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c00074fc:	83 c4 10             	add    esp,0x10
c00074ff:	5b                   	pop    ebx
c0007500:	5e                   	pop    esi
c0007501:	5f                   	pop    edi
c0007502:	c3                   	ret    

c0007503 <KiDeinitialiseSymlinks(void*)>:
c0007503:	e9 f6 fe ff ff       	jmp    c00073fe <KiFlushSymlinkChanges()>

c0007508 <KiGetSymlinkHash(char const*)>:
c0007508:	53                   	push   ebx
c0007509:	89 c3                	mov    ebx,eax
c000750b:	83 ec 14             	sub    esp,0x14
c000750e:	50                   	push   eax
c000750f:	e8 6c 90 ff ff       	call   c0000580 <strlen>
c0007514:	5a                   	pop    edx
c0007515:	59                   	pop    ecx
c0007516:	50                   	push   eax
c0007517:	53                   	push   ebx
c0007518:	e8 06 6b 00 00       	call   c000e023 <KeCalculateCRC32(unsigned char*, int)>
c000751d:	83 c4 18             	add    esp,0x18
c0007520:	5b                   	pop    ebx
c0007521:	89 c2                	mov    edx,eax
c0007523:	c1 ea 10             	shr    edx,0x10
c0007526:	31 d0                	xor    eax,edx
c0007528:	c3                   	ret    

c0007529 <KiCreateSymlinkID()>:
c0007529:	55                   	push   ebp
c000752a:	57                   	push   edi
c000752b:	56                   	push   esi
c000752c:	53                   	push   ebx
c000752d:	31 db                	xor    ebx,ebx
c000752f:	83 ec 1c             	sub    esp,0x1c
c0007532:	e8 5d 8f 00 00       	call   c0010494 <KeRand()>
c0007537:	8b 2d 00 c3 02 c0    	mov    ebp,DWORD PTR ds:0xc002c300
c000753d:	31 d2                	xor    edx,edx
c000753f:	43                   	inc    ebx
c0007540:	31 ff                	xor    edi,edi
c0007542:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007545:	89 ee                	mov    esi,ebp
c0007547:	89 0d 00 c3 02 c0    	mov    DWORD PTR ds:0xc002c300,ecx
c000754d:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007551:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007555:	c1 e0 1f             	shl    eax,0x1f
c0007558:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000755e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007562:	75 10                	jne    c0007574 <KiCreateSymlinkID()+0x4b>
c0007564:	83 ec 0c             	sub    esp,0xc
c0007567:	68 c1 36 02 c0       	push   0xc00236c1
c000756c:	e8 4b 85 00 00       	call   c000fabc <KePanic(char const*)>
c0007571:	83 c4 10             	add    esp,0x10
c0007574:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0007578:	75 06                	jne    c0007580 <KiCreateSymlinkID()+0x57>
c000757a:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000757e:	74 b2                	je     c0007532 <KiCreateSymlinkID()+0x9>
c0007580:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007584:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007588:	83 c4 1c             	add    esp,0x1c
c000758b:	5b                   	pop    ebx
c000758c:	31 f0                	xor    eax,esi
c000758e:	5e                   	pop    esi
c000758f:	31 fa                	xor    edx,edi
c0007591:	5f                   	pop    edi
c0007592:	5d                   	pop    ebp
c0007593:	c3                   	ret    

c0007594 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007594:	53                   	push   ebx
c0007595:	83 ec 0c             	sub    esp,0xc
c0007598:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000759c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075a0:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075a9:	68 00 01 00 00       	push   0x100
c00075ae:	6a 00                	push   0x0
c00075b0:	89 0c c5 e4 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd611c],ecx
c00075b7:	89 14 c5 e0 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6120],edx
c00075be:	c1 e0 08             	shl    eax,0x8
c00075c1:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075c6:	50                   	push   eax
c00075c7:	e8 24 8f ff ff       	call   c00004f0 <memset>
c00075cc:	58                   	pop    eax
c00075cd:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075d2:	5a                   	pop    edx
c00075d3:	c1 e0 08             	shl    eax,0x8
c00075d6:	53                   	push   ebx
c00075d7:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075dc:	50                   	push   eax
c00075dd:	e8 6e 90 ff ff       	call   c0000650 <strcpy>
c00075e2:	89 d8                	mov    eax,ebx
c00075e4:	e8 1f ff ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c00075e9:	ba 01 00 00 00       	mov    edx,0x1
c00075ee:	0f b7 c0             	movzx  eax,ax
c00075f1:	e8 d8 fd ff ff       	call   c00073ce <KiSetHashInTable(unsigned short, bool)>
c00075f6:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075fb:	83 c4 10             	add    esp,0x10
c00075fe:	40                   	inc    eax
c00075ff:	a3 c0 9e 02 c0       	mov    ds:0xc0029ec0,eax
c0007604:	83 f8 03             	cmp    eax,0x3
c0007607:	7e 09                	jle    c0007612 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c0007609:	83 c4 08             	add    esp,0x8
c000760c:	5b                   	pop    ebx
c000760d:	e9 ec fd ff ff       	jmp    c00073fe <KiFlushSymlinkChanges()>
c0007612:	83 c4 08             	add    esp,0x8
c0007615:	5b                   	pop    ebx
c0007616:	c3                   	ret    

c0007617 <KeInitialiseSymlinks()>:
c0007617:	57                   	push   edi
c0007618:	56                   	push   esi
c0007619:	53                   	push   ebx
c000761a:	81 ec 14 01 00 00    	sub    esp,0x114
c0007620:	68 00 20 00 00       	push   0x2000
c0007625:	6a 00                	push   0x0
c0007627:	68 00 a3 02 c0       	push   0xc002a300
c000762c:	c7 05 00 c3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c300,0x0
c0007636:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c0007640:	e8 ab 8e ff ff       	call   c00004f0 <memset>
c0007645:	59                   	pop    ecx
c0007646:	5b                   	pop    ebx
c0007647:	6a 00                	push   0x0
c0007649:	68 03 75 00 c0       	push   0xc0007503
c000764e:	e8 b5 5a 00 00       	call   c000d108 <KeRegisterAtexit(void (*)(void*), void*)>
c0007653:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000765a:	e8 09 80 00 00       	call   c000f668 <malloc>
c000765f:	83 c4 0c             	add    esp,0xc
c0007662:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0007668:	68 3b 36 02 c0       	push   0xc002363b
c000766d:	50                   	push   eax
c000766e:	89 c3                	mov    ebx,eax
c0007670:	e8 13 0b 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007675:	83 c4 10             	add    esp,0x10
c0007678:	85 db                	test   ebx,ebx
c000767a:	75 10                	jne    c000768c <KeInitialiseSymlinks()+0x75>
c000767c:	83 ec 0c             	sub    esp,0xc
c000767f:	68 ca 36 02 c0       	push   0xc00236ca
c0007684:	e8 33 84 00 00       	call   c000fabc <KePanic(char const*)>
c0007689:	83 c4 10             	add    esp,0x10
c000768c:	83 ec 0c             	sub    esp,0xc
c000768f:	53                   	push   ebx
c0007690:	e8 d5 0d 00 00       	call   c000846a <File::exists()>
c0007695:	83 c4 10             	add    esp,0x10
c0007698:	84 c0                	test   al,al
c000769a:	75 3a                	jne    c00076d6 <KeInitialiseSymlinks()+0xbf>
c000769c:	52                   	push   edx
c000769d:	52                   	push   edx
c000769e:	6a 12                	push   0x12
c00076a0:	53                   	push   ebx
c00076a1:	e8 00 0b 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c00076a6:	83 c4 10             	add    esp,0x10
c00076a9:	85 c0                	test   eax,eax
c00076ab:	74 10                	je     c00076bd <KeInitialiseSymlinks()+0xa6>
c00076ad:	83 ec 0c             	sub    esp,0xc
c00076b0:	68 e7 36 02 c0       	push   0xc00236e7
c00076b5:	e8 02 84 00 00       	call   c000fabc <KePanic(char const*)>
c00076ba:	83 c4 10             	add    esp,0x10
c00076bd:	83 ec 0c             	sub    esp,0xc
c00076c0:	53                   	push   ebx
c00076c1:	e8 3e 0b 00 00       	call   c0008204 <File::close()>
c00076c6:	83 c4 10             	add    esp,0x10
c00076c9:	85 db                	test   ebx,ebx
c00076cb:	0f 84 9e 00 00 00    	je     c000776f <KeInitialiseSymlinks()+0x158>
c00076d1:	e9 8d 00 00 00       	jmp    c0007763 <KeInitialiseSymlinks()+0x14c>
c00076d6:	50                   	push   eax
c00076d7:	50                   	push   eax
c00076d8:	6a 01                	push   0x1
c00076da:	53                   	push   ebx
c00076db:	e8 c6 0a 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c00076e0:	83 c4 10             	add    esp,0x10
c00076e3:	85 c0                	test   eax,eax
c00076e5:	74 10                	je     c00076f7 <KeInitialiseSymlinks()+0xe0>
c00076e7:	83 ec 0c             	sub    esp,0xc
c00076ea:	68 04 37 02 c0       	push   0xc0023704
c00076ef:	e8 c8 83 00 00       	call   c000fabc <KePanic(char const*)>
c00076f4:	83 c4 10             	add    esp,0x10
c00076f7:	ff 05 00 c3 02 c0    	inc    DWORD PTR ds:0xc002c300
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0007704:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007706:	57                   	push   edi
c0007707:	8d 74 24 20          	lea    esi,[esp+0x20]
c000770b:	56                   	push   esi
c000770c:	6a 00                	push   0x0
c000770e:	68 00 01 00 00       	push   0x100
c0007713:	53                   	push   ebx
c0007714:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007717:	83 c4 20             	add    esp,0x20
c000771a:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007722:	75 33                	jne    c0007757 <KeInitialiseSymlinks()+0x140>
c0007724:	83 ec 0c             	sub    esp,0xc
c0007727:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007729:	57                   	push   edi
c000772a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000772e:	52                   	push   edx
c000772f:	6a 00                	push   0x0
c0007731:	6a 08                	push   0x8
c0007733:	53                   	push   ebx
c0007734:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007737:	83 c4 20             	add    esp,0x20
c000773a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000773f:	75 16                	jne    c0007757 <KeInitialiseSymlinks()+0x140>
c0007741:	89 f0                	mov    eax,esi
c0007743:	e8 c0 fd ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c0007748:	ba 01 00 00 00       	mov    edx,0x1
c000774d:	0f b7 c0             	movzx  eax,ax
c0007750:	e8 79 fc ff ff       	call   c00073ce <KiSetHashInTable(unsigned short, bool)>
c0007755:	eb a0                	jmp    c00076f7 <KeInitialiseSymlinks()+0xe0>
c0007757:	83 ec 0c             	sub    esp,0xc
c000775a:	53                   	push   ebx
c000775b:	e8 a4 0a 00 00       	call   c0008204 <File::close()>
c0007760:	83 c4 10             	add    esp,0x10
c0007763:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007765:	83 ec 0c             	sub    esp,0xc
c0007768:	53                   	push   ebx
c0007769:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000776c:	83 c4 10             	add    esp,0x10
c000776f:	81 c4 10 01 00 00    	add    esp,0x110
c0007775:	5b                   	pop    ebx
c0007776:	5e                   	pop    esi
c0007777:	5f                   	pop    edi
c0007778:	c3                   	ret    

c0007779 <KiIsSymlinkRegistered(char const*)>:
c0007779:	55                   	push   ebp
c000777a:	57                   	push   edi
c000777b:	56                   	push   esi
c000777c:	53                   	push   ebx
c000777d:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007783:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000778a:	89 f0                	mov    eax,esi
c000778c:	e8 77 fd ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c0007791:	0f b7 c0             	movzx  eax,ax
c0007794:	e8 1b fc ff ff       	call   c00073b4 <KiIsHashInTable(unsigned short)>
c0007799:	31 d2                	xor    edx,edx
c000779b:	88 c1                	mov    cl,al
c000779d:	31 c0                	xor    eax,eax
c000779f:	84 c9                	test   cl,cl
c00077a1:	0f 84 31 01 00 00    	je     c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00077a7:	31 db                	xor    ebx,ebx
c00077a9:	39 1d c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,ebx
c00077af:	7e 30                	jle    c00077e1 <KiIsSymlinkRegistered(char const*)+0x68>
c00077b1:	89 d8                	mov    eax,ebx
c00077b3:	c1 e0 08             	shl    eax,0x8
c00077b6:	51                   	push   ecx
c00077b7:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00077bc:	51                   	push   ecx
c00077bd:	50                   	push   eax
c00077be:	56                   	push   esi
c00077bf:	e8 bc 8f ff ff       	call   c0000780 <strcmp>
c00077c4:	83 c4 10             	add    esp,0x10
c00077c7:	85 c0                	test   eax,eax
c00077c9:	75 13                	jne    c00077de <KiIsSymlinkRegistered(char const*)+0x65>
c00077cb:	8b 04 dd e0 9e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd6120]
c00077d2:	8b 14 dd e4 9e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd611c]
c00077d9:	e9 fa 00 00 00       	jmp    c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00077de:	43                   	inc    ebx
c00077df:	eb c8                	jmp    c00077a9 <KiIsSymlinkRegistered(char const*)+0x30>
c00077e1:	83 ec 0c             	sub    esp,0xc
c00077e4:	68 14 01 00 00       	push   0x114
c00077e9:	e8 7a 7e 00 00       	call   c000f668 <malloc>
c00077ee:	83 c4 0c             	add    esp,0xc
c00077f1:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c00077f7:	68 3b 36 02 c0       	push   0xc002363b
c00077fc:	50                   	push   eax
c00077fd:	89 c3                	mov    ebx,eax
c00077ff:	e8 84 09 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007804:	83 c4 10             	add    esp,0x10
c0007807:	85 db                	test   ebx,ebx
c0007809:	75 12                	jne    c000781d <KiIsSymlinkRegistered(char const*)+0xa4>
c000780b:	83 ec 0c             	sub    esp,0xc
c000780e:	68 1f 37 02 c0       	push   0xc002371f
c0007813:	e8 a4 82 00 00       	call   c000fabc <KePanic(char const*)>
c0007818:	83 c4 10             	add    esp,0x10
c000781b:	eb 10                	jmp    c000782d <KiIsSymlinkRegistered(char const*)+0xb4>
c000781d:	83 ec 0c             	sub    esp,0xc
c0007820:	53                   	push   ebx
c0007821:	e8 44 0c 00 00       	call   c000846a <File::exists()>
c0007826:	83 c4 10             	add    esp,0x10
c0007829:	84 c0                	test   al,al
c000782b:	74 de                	je     c000780b <KiIsSymlinkRegistered(char const*)+0x92>
c000782d:	52                   	push   edx
c000782e:	52                   	push   edx
c000782f:	6a 01                	push   0x1
c0007831:	53                   	push   ebx
c0007832:	e8 6f 09 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007837:	83 c4 10             	add    esp,0x10
c000783a:	85 c0                	test   eax,eax
c000783c:	74 10                	je     c000784e <KiIsSymlinkRegistered(char const*)+0xd5>
c000783e:	83 ec 0c             	sub    esp,0xc
c0007841:	68 3a 37 02 c0       	push   0xc002373a
c0007846:	e8 71 82 00 00       	call   c000fabc <KePanic(char const*)>
c000784b:	83 c4 10             	add    esp,0x10
c000784e:	83 ec 0c             	sub    esp,0xc
c0007851:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007853:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007857:	55                   	push   ebp
c0007858:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000785c:	57                   	push   edi
c000785d:	6a 00                	push   0x0
c000785f:	68 00 01 00 00       	push   0x100
c0007864:	53                   	push   ebx
c0007865:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007868:	83 c4 20             	add    esp,0x20
c000786b:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007873:	75 4b                	jne    c00078c0 <KiIsSymlinkRegistered(char const*)+0x147>
c0007875:	83 ec 0c             	sub    esp,0xc
c0007878:	8b 03                	mov    eax,DWORD PTR [ebx]
c000787a:	55                   	push   ebp
c000787b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000787f:	52                   	push   edx
c0007880:	6a 00                	push   0x0
c0007882:	6a 08                	push   0x8
c0007884:	53                   	push   ebx
c0007885:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007888:	83 c4 20             	add    esp,0x20
c000788b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007890:	75 2e                	jne    c00078c0 <KiIsSymlinkRegistered(char const*)+0x147>
c0007892:	50                   	push   eax
c0007893:	50                   	push   eax
c0007894:	57                   	push   edi
c0007895:	56                   	push   esi
c0007896:	e8 e5 8e ff ff       	call   c0000780 <strcmp>
c000789b:	83 c4 10             	add    esp,0x10
c000789e:	85 c0                	test   eax,eax
c00078a0:	75 ac                	jne    c000784e <KiIsSymlinkRegistered(char const*)+0xd5>
c00078a2:	83 ec 0c             	sub    esp,0xc
c00078a5:	53                   	push   ebx
c00078a6:	e8 59 09 00 00       	call   c0008204 <File::close()>
c00078ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078bb:	83 c4 10             	add    esp,0x10
c00078be:	eb 18                	jmp    c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00078c0:	83 ec 0c             	sub    esp,0xc
c00078c3:	53                   	push   ebx
c00078c4:	e8 3b 09 00 00       	call   c0008204 <File::close()>
c00078c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	31 d2                	xor    edx,edx
c00078d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078de:	5b                   	pop    ebx
c00078df:	5e                   	pop    esi
c00078e0:	5f                   	pop    edi
c00078e1:	5d                   	pop    ebp
c00078e2:	c3                   	ret    

c00078e3 <KeDereferenceSymlink(char const*, char*)>:
c00078e3:	55                   	push   ebp
c00078e4:	57                   	push   edi
c00078e5:	56                   	push   esi
c00078e6:	53                   	push   ebx
c00078e7:	83 ec 48             	sub    esp,0x48
c00078ea:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ee:	56                   	push   esi
c00078ef:	e8 85 fe ff ff       	call   c0007779 <KiIsSymlinkRegistered(char const*)>
c00078f4:	83 c4 10             	add    esp,0x10
c00078f7:	89 c7                	mov    edi,eax
c00078f9:	89 d0                	mov    eax,edx
c00078fb:	09 f8                	or     eax,edi
c00078fd:	75 07                	jne    c0007906 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078ff:	31 c0                	xor    eax,eax
c0007901:	e9 7c 01 00 00       	jmp    c0007a82 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007906:	83 ec 0c             	sub    esp,0xc
c0007909:	89 d5                	mov    ebp,edx
c000790b:	68 14 01 00 00       	push   0x114
c0007910:	e8 53 7d 00 00       	call   c000f668 <malloc>
c0007915:	83 c4 0c             	add    esp,0xc
c0007918:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c000791e:	56                   	push   esi
c000791f:	50                   	push   eax
c0007920:	89 c3                	mov    ebx,eax
c0007922:	e8 61 08 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007927:	83 c4 10             	add    esp,0x10
c000792a:	85 db                	test   ebx,ebx
c000792c:	0f 84 32 01 00 00    	je     c0007a64 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007932:	56                   	push   esi
c0007933:	56                   	push   esi
c0007934:	6a 01                	push   0x1
c0007936:	53                   	push   ebx
c0007937:	e8 6a 08 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c000793c:	83 c4 10             	add    esp,0x10
c000793f:	85 c0                	test   eax,eax
c0007941:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007943:	74 09                	je     c000794e <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007945:	83 ec 0c             	sub    esp,0xc
c0007948:	53                   	push   ebx
c0007949:	e9 10 01 00 00       	jmp    c0007a5e <KeDereferenceSymlink(char const*, char*)+0x17b>
c000794e:	83 ec 0c             	sub    esp,0xc
c0007951:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007955:	56                   	push   esi
c0007956:	8d 54 24 37          	lea    edx,[esp+0x37]
c000795a:	52                   	push   edx
c000795b:	6a 00                	push   0x0
c000795d:	6a 08                	push   0x8
c000795f:	53                   	push   ebx
c0007960:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007963:	83 c4 20             	add    esp,0x20
c0007966:	85 c0                	test   eax,eax
c0007968:	0f 85 e2 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000796e:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007973:	0f 85 d7 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007979:	83 ec 0c             	sub    esp,0xc
c000797c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000797e:	56                   	push   esi
c000797f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007983:	52                   	push   edx
c0007984:	6a 00                	push   0x0
c0007986:	6a 08                	push   0x8
c0007988:	53                   	push   ebx
c0007989:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000798c:	83 c4 20             	add    esp,0x20
c000798f:	85 c0                	test   eax,eax
c0007991:	0f 85 b9 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007997:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000799c:	0f 85 ae 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079a2:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079a6:	0f 85 53 ff ff ff    	jne    c00078ff <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079ac:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079b0:	0f 85 49 ff ff ff    	jne    c00078ff <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079be:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079c6:	51                   	push   ecx
c00079c7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079cb:	50                   	push   eax
c00079cc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079d0:	50                   	push   eax
c00079d1:	53                   	push   ebx
c00079d2:	e8 d1 0a 00 00       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079df:	75 6f                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079e5:	31 c9                	xor    ecx,ecx
c00079e7:	bf 0f 00 00 00       	mov    edi,0xf
c00079ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079f0:	39 c7                	cmp    edi,eax
c00079f2:	89 cf                	mov    edi,ecx
c00079f4:	19 d7                	sbb    edi,edx
c00079f6:	73 58                	jae    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f8:	83 c0 f0             	add    eax,0xfffffff0
c00079fb:	bf ff 00 00 00       	mov    edi,0xff
c0007a00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a04:	83 d2 ff             	adc    edx,0xffffffff
c0007a07:	39 c7                	cmp    edi,eax
c0007a09:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a0d:	19 d1                	sbb    ecx,edx
c0007a0f:	72 53                	jb     c0007a64 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a11:	40                   	inc    eax
c0007a12:	52                   	push   edx
c0007a13:	50                   	push   eax
c0007a14:	6a 00                	push   0x0
c0007a16:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a1a:	e8 d1 8a ff ff       	call   c00004f0 <memset>
c0007a1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a21:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a30:	53                   	push   ebx
c0007a31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a34:	83 c4 20             	add    esp,0x20
c0007a37:	85 c0                	test   eax,eax
c0007a39:	75 15                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a3f:	89 c7                	mov    edi,eax
c0007a41:	c1 ff 1f             	sar    edi,0x1f
c0007a44:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a48:	75 06                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a4a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a4e:	74 19                	je     c0007a69 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a50:	83 ec 0c             	sub    esp,0xc
c0007a53:	53                   	push   ebx
c0007a54:	e8 ab 07 00 00       	call   c0008204 <File::close()>
c0007a59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a61:	83 c4 10             	add    esp,0x10
c0007a64:	83 c8 ff             	or     eax,0xffffffff
c0007a67:	eb 19                	jmp    c0007a82 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a69:	83 ec 0c             	sub    esp,0xc
c0007a6c:	53                   	push   ebx
c0007a6d:	e8 92 07 00 00       	call   c0008204 <File::close()>
c0007a72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a7a:	83 c4 10             	add    esp,0x10
c0007a7d:	b8 01 00 00 00       	mov    eax,0x1
c0007a82:	83 c4 3c             	add    esp,0x3c
c0007a85:	5b                   	pop    ebx
c0007a86:	5e                   	pop    esi
c0007a87:	5f                   	pop    edi
c0007a88:	5d                   	pop    ebp
c0007a89:	c3                   	ret    

c0007a8a <KeCreateSymlink(char const*, char const*)>:
c0007a8a:	55                   	push   ebp
c0007a8b:	57                   	push   edi
c0007a8c:	56                   	push   esi
c0007a8d:	53                   	push   ebx
c0007a8e:	83 ec 38             	sub    esp,0x38
c0007a91:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a95:	68 14 01 00 00       	push   0x114
c0007a9a:	e8 c9 7b 00 00       	call   c000f668 <malloc>
c0007a9f:	6a 00                	push   0x0
c0007aa1:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0007aa7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007aab:	89 c3                	mov    ebx,eax
c0007aad:	50                   	push   eax
c0007aae:	e8 d7 05 00 00       	call   c000808a <File::File(char const*, Process*, bool)>
c0007ab3:	83 c4 20             	add    esp,0x20
c0007ab6:	85 db                	test   ebx,ebx
c0007ab8:	b8 01 00 00 00       	mov    eax,0x1
c0007abd:	0f 84 fb 00 00 00    	je     c0007bbe <KeCreateSymlink(char const*, char const*)+0x134>
c0007ac3:	52                   	push   edx
c0007ac4:	52                   	push   edx
c0007ac5:	6a 12                	push   0x12
c0007ac7:	53                   	push   ebx
c0007ac8:	e8 d9 06 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007acd:	83 c4 10             	add    esp,0x10
c0007ad0:	85 c0                	test   eax,eax
c0007ad2:	74 0b                	je     c0007adf <KeCreateSymlink(char const*, char const*)+0x55>
c0007ad4:	83 ec 0c             	sub    esp,0xc
c0007ad7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad9:	53                   	push   ebx
c0007ada:	e9 d4 00 00 00       	jmp    c0007bb3 <KeCreateSymlink(char const*, char const*)+0x129>
c0007adf:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007ae3:	be 55 37 02 c0       	mov    esi,0xc0023755
c0007ae8:	b9 09 00 00 00       	mov    ecx,0x9
c0007aed:	fc                   	cld    
c0007aee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007af0:	83 ec 0c             	sub    esp,0xc
c0007af3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007af7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af9:	56                   	push   esi
c0007afa:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007afe:	52                   	push   edx
c0007aff:	6a 00                	push   0x0
c0007b01:	6a 08                	push   0x8
c0007b03:	53                   	push   ebx
c0007b04:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b07:	83 c4 20             	add    esp,0x20
c0007b0a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b0f:	0f 85 90 00 00 00    	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b15:	85 c0                	test   eax,eax
c0007b17:	0f 85 88 00 00 00    	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1d:	e8 07 fa ff ff       	call   c0007529 <KiCreateSymlinkID()>
c0007b22:	83 ec 0c             	sub    esp,0xc
c0007b25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b29:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b2f:	56                   	push   esi
c0007b30:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b34:	52                   	push   edx
c0007b35:	6a 00                	push   0x0
c0007b37:	6a 08                	push   0x8
c0007b39:	53                   	push   ebx
c0007b3a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b3d:	83 c4 20             	add    esp,0x20
c0007b40:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b45:	75 5e                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b47:	85 c0                	test   eax,eax
c0007b49:	75 5a                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b4d:	83 ec 0c             	sub    esp,0xc
c0007b50:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b53:	55                   	push   ebp
c0007b54:	e8 27 8a ff ff       	call   c0000580 <strlen>
c0007b59:	31 d2                	xor    edx,edx
c0007b5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b5e:	55                   	push   ebp
c0007b5f:	52                   	push   edx
c0007b60:	50                   	push   eax
c0007b61:	53                   	push   ebx
c0007b62:	ff d7                	call   edi
c0007b64:	83 c4 14             	add    esp,0x14
c0007b67:	55                   	push   ebp
c0007b68:	89 c6                	mov    esi,eax
c0007b6a:	e8 11 8a ff ff       	call   c0000580 <strlen>
c0007b6f:	83 c4 10             	add    esp,0x10
c0007b72:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b76:	75 2d                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b78:	85 f6                	test   esi,esi
c0007b7a:	75 29                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b7c:	50                   	push   eax
c0007b7d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b85:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b89:	e8 06 fa ff ff       	call   c0007594 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b91:	e8 6e 06 00 00       	call   c0008204 <File::close()>
c0007b96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b9e:	83 c4 10             	add    esp,0x10
c0007ba1:	31 c0                	xor    eax,eax
c0007ba3:	eb 19                	jmp    c0007bbe <KeCreateSymlink(char const*, char const*)+0x134>
c0007ba5:	83 ec 0c             	sub    esp,0xc
c0007ba8:	53                   	push   ebx
c0007ba9:	e8 56 06 00 00       	call   c0008204 <File::close()>
c0007bae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb6:	83 c4 10             	add    esp,0x10
c0007bb9:	b8 01 00 00 00       	mov    eax,0x1
c0007bbe:	83 c4 2c             	add    esp,0x2c
c0007bc1:	5b                   	pop    ebx
c0007bc2:	5e                   	pop    esi
c0007bc3:	5f                   	pop    edi
c0007bc4:	5d                   	pop    ebp
c0007bc5:	c3                   	ret    

c0007bc6 <File::read(unsigned long long, void*, int*)>:
c0007bc6:	53                   	push   ebx
c0007bc7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bcb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd6:	83 f8 19             	cmp    eax,0x19
c0007bd9:	77 35                	ja     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bdb:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007be2:	85 c0                	test   eax,eax
c0007be4:	74 2a                	je     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007be6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007bec:	85 c0                	test   eax,eax
c0007bee:	74 20                	je     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf4:	74 21                	je     c0007c17 <File::read(unsigned long long, void*, int*)+0x51>
c0007bf6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bfc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c0a:	5b                   	pop    ebx
c0007c0b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c0e:	ff e0                	jmp    eax
c0007c10:	b8 0b 00 00 00       	mov    eax,0xb
c0007c15:	eb 05                	jmp    c0007c1c <File::read(unsigned long long, void*, int*)+0x56>
c0007c17:	b8 05 00 00 00       	mov    eax,0x5
c0007c1c:	5b                   	pop    ebx
c0007c1d:	c3                   	ret    

c0007c1e <File::write(unsigned long long, void*, int*)>:
c0007c1e:	53                   	push   ebx
c0007c1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c27:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2e:	83 f8 19             	cmp    eax,0x19
c0007c31:	77 35                	ja     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c33:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007c3a:	85 c0                	test   eax,eax
c0007c3c:	74 2a                	je     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c3e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c44:	85 c0                	test   eax,eax
c0007c46:	74 20                	je     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c48:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c4c:	74 21                	je     c0007c6f <File::write(unsigned long long, void*, int*)+0x51>
c0007c4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c50:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c54:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c62:	5b                   	pop    ebx
c0007c63:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c66:	ff e0                	jmp    eax
c0007c68:	b8 0b 00 00 00       	mov    eax,0xb
c0007c6d:	eb 05                	jmp    c0007c74 <File::write(unsigned long long, void*, int*)+0x56>
c0007c6f:	b8 05 00 00 00       	mov    eax,0x5
c0007c74:	5b                   	pop    ebx
c0007c75:	c3                   	ret    

c0007c76 <Directory::read(unsigned long long, void*, int*)>:
c0007c76:	53                   	push   ebx
c0007c77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c7f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c86:	83 f8 19             	cmp    eax,0x19
c0007c89:	77 35                	ja     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c8b:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007c92:	85 c0                	test   eax,eax
c0007c94:	74 2a                	je     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c96:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c9c:	85 c0                	test   eax,eax
c0007c9e:	74 20                	je     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007ca4:	74 21                	je     c0007cc7 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007ca6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007ca8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cac:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007cb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cba:	5b                   	pop    ebx
c0007cbb:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cbe:	ff e0                	jmp    eax
c0007cc0:	b8 0b 00 00 00       	mov    eax,0xb
c0007cc5:	eb 05                	jmp    c0007ccc <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cc7:	b8 05 00 00 00       	mov    eax,0x5
c0007ccc:	5b                   	pop    ebx
c0007ccd:	c3                   	ret    

c0007cce <Directory::write(unsigned long long, void*, int*)>:
c0007cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cd9:	b8 0b 00 00 00       	mov    eax,0xb
c0007cde:	83 fa 19             	cmp    edx,0x19
c0007ce1:	77 18                	ja     c0007cfb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ce3:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0007cea:	85 d2                	test   edx,edx
c0007cec:	74 0d                	je     c0007cfb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cee:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cf5:	19 c0                	sbb    eax,eax
c0007cf7:	83 e0 0a             	and    eax,0xa
c0007cfa:	40                   	inc    eax
c0007cfb:	c3                   	ret    

c0007cfc <File::isAtty()>:
c0007cfc:	31 c0                	xor    eax,eax
c0007cfe:	c3                   	ret    
c0007cff:	90                   	nop

c0007d00 <Directory::isAtty()>:
c0007d00:	31 c0                	xor    eax,eax
c0007d02:	c3                   	ret    
c0007d03:	90                   	nop

c0007d04 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d04:	b8 0a 00 00 00       	mov    eax,0xa
c0007d09:	c3                   	ret    

c0007d0a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d0a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d0f:	c3                   	ret    

c0007d10 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d10:	31 c0                	xor    eax,eax
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <File::~File()>:
c0007d16:	83 ec 0c             	sub    esp,0xc
c0007d19:	ba 2c 38 02 c0       	mov    edx,0xc002382c
c0007d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d22:	89 10                	mov    DWORD PTR [eax],edx
c0007d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d28:	83 ec 0c             	sub    esp,0xc
c0007d2b:	50                   	push   eax
c0007d2c:	e8 65 b0 00 00       	call   c0012d96 <UnixFile::~UnixFile()>
c0007d31:	83 c4 10             	add    esp,0x10
c0007d34:	90                   	nop
c0007d35:	83 c4 0c             	add    esp,0xc
c0007d38:	c3                   	ret    
c0007d39:	90                   	nop

c0007d3a <File::~File()>:
c0007d3a:	83 ec 0c             	sub    esp,0xc
c0007d3d:	83 ec 0c             	sub    esp,0xc
c0007d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d44:	e8 cd ff ff ff       	call   c0007d16 <File::~File()>
c0007d49:	83 c4 10             	add    esp,0x10
c0007d4c:	83 ec 08             	sub    esp,0x8
c0007d4f:	68 14 01 00 00       	push   0x114
c0007d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d58:	e8 13 55 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c0007d5d:	83 c4 10             	add    esp,0x10
c0007d60:	83 c4 0c             	add    esp,0xc
c0007d63:	c3                   	ret    

c0007d64 <Directory::~Directory()>:
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	ba 48 38 02 c0       	mov    edx,0xc0023848
c0007d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d70:	89 10                	mov    DWORD PTR [eax],edx
c0007d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d76:	83 ec 0c             	sub    esp,0xc
c0007d79:	50                   	push   eax
c0007d7a:	e8 17 b0 00 00       	call   c0012d96 <UnixFile::~UnixFile()>
c0007d7f:	83 c4 10             	add    esp,0x10
c0007d82:	90                   	nop
c0007d83:	83 c4 0c             	add    esp,0xc
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Directory::~Directory()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	83 ec 0c             	sub    esp,0xc
c0007d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d92:	e8 cd ff ff ff       	call   c0007d64 <Directory::~Directory()>
c0007d97:	83 c4 10             	add    esp,0x10
c0007d9a:	83 ec 08             	sub    esp,0x8
c0007d9d:	68 14 01 00 00       	push   0x114
c0007da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da6:	e8 c5 54 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	83 c4 0c             	add    esp,0xc
c0007db1:	c3                   	ret    

c0007db2 <Filesystem::Filesystem()>:
c0007db2:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c0007db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dbb:	89 10                	mov    DWORD PTR [eax],edx
c0007dbd:	8b 15 04 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c304
c0007dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dce:	a3 04 c3 02 c0       	mov    ds:0xc002c304,eax
c0007dd3:	90                   	nop
c0007dd4:	c3                   	ret    
c0007dd5:	90                   	nop

c0007dd6 <Filesystem::~Filesystem()>:
c0007dd6:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c0007ddb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddf:	89 10                	mov    DWORD PTR [eax],edx
c0007de1:	90                   	nop
c0007de2:	c3                   	ret    
c0007de3:	90                   	nop

c0007de4 <Filesystem::~Filesystem()>:
c0007de4:	83 ec 0c             	sub    esp,0xc
c0007de7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007deb:	e8 e6 ff ff ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c0007df0:	83 c4 04             	add    esp,0x4
c0007df3:	83 ec 08             	sub    esp,0x8
c0007df6:	6a 08                	push   0x8
c0007df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dfc:	e8 6f 54 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c0007e01:	83 c4 10             	add    esp,0x10
c0007e04:	83 c4 0c             	add    esp,0xc
c0007e07:	c3                   	ret    

c0007e08 <Fs::getcwd(Process*, char*, int)>:
c0007e08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e0c:	31 c0                	xor    eax,eax
c0007e0e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e12:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e15:	7d 15                	jge    c0007e2c <Fs::getcwd(Process*, char*, int)+0x24>
c0007e17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e1b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e22:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e25:	84 c9                	test   cl,cl
c0007e27:	74 06                	je     c0007e2f <Fs::getcwd(Process*, char*, int)+0x27>
c0007e29:	40                   	inc    eax
c0007e2a:	eb e2                	jmp    c0007e0e <Fs::getcwd(Process*, char*, int)+0x6>
c0007e2c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e2f:	31 c0                	xor    eax,eax
c0007e31:	c3                   	ret    

c0007e32 <Fs::initVFS()>:
c0007e32:	83 ec 18             	sub    esp,0x18
c0007e35:	6a 08                	push   0x8
c0007e37:	e8 2c 78 00 00       	call   c000f668 <malloc>
c0007e3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e3f:	e8 e4 4a 01 00       	call   c001c928 <FAT::FAT()>
c0007e44:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e4b:	e8 18 78 00 00       	call   c000f668 <malloc>
c0007e50:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e53:	e8 fe 59 01 00       	call   c001d856 <ISO9660::ISO9660()>
c0007e58:	83 c4 1c             	add    esp,0x1c
c0007e5b:	c3                   	ret    

c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e5c:	55                   	push   ebp
c0007e5d:	57                   	push   edi
c0007e5e:	56                   	push   esi
c0007e5f:	53                   	push   ebx
c0007e60:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e66:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e6d:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e74:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e7b:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e82:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e86:	68 00 04 00 00       	push   0x400
c0007e8b:	6a 00                	push   0x0
c0007e8d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e91:	57                   	push   edi
c0007e92:	e8 59 86 ff ff       	call   c00004f0 <memset>
c0007e97:	83 c4 10             	add    esp,0x10
c0007e9a:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e9e:	75 0b                	jne    c0007eab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007ea0:	50                   	push   eax
c0007ea1:	50                   	push   eax
c0007ea2:	56                   	push   esi
c0007ea3:	57                   	push   edi
c0007ea4:	e8 a7 87 ff ff       	call   c0000650 <strcpy>
c0007ea9:	eb 45                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007eab:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007eae:	83 f8 2f             	cmp    eax,0x2f
c0007eb1:	74 05                	je     c0007eb8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007eb3:	83 f8 5c             	cmp    eax,0x5c
c0007eb6:	75 19                	jne    c0007ed1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007eb8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007ebb:	3c 60                	cmp    al,0x60
c0007ebd:	7e 03                	jle    c0007ec2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007ebf:	83 e8 20             	sub    eax,0x20
c0007ec2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ec6:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007ecd:	50                   	push   eax
c0007ece:	50                   	push   eax
c0007ecf:	eb 18                	jmp    c0007ee9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007ed1:	50                   	push   eax
c0007ed2:	50                   	push   eax
c0007ed3:	55                   	push   ebp
c0007ed4:	57                   	push   edi
c0007ed5:	e8 76 87 ff ff       	call   c0000650 <strcpy>
c0007eda:	58                   	pop    eax
c0007edb:	5a                   	pop    edx
c0007edc:	68 6e 51 02 c0       	push   0xc002516e
c0007ee1:	57                   	push   edi
c0007ee2:	e8 89 89 ff ff       	call   c0000870 <strcat>
c0007ee7:	59                   	pop    ecx
c0007ee8:	5d                   	pop    ebp
c0007ee9:	56                   	push   esi
c0007eea:	57                   	push   edi
c0007eeb:	e8 80 89 ff ff       	call   c0000870 <strcat>
c0007ef0:	83 c4 10             	add    esp,0x10
c0007ef3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007ef7:	3c 60                	cmp    al,0x60
c0007ef9:	7e 03                	jle    c0007efe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007efb:	83 e8 20             	sub    eax,0x20
c0007efe:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007f02:	be 03 00 00 00       	mov    esi,0x3
c0007f07:	88 03                	mov    BYTE PTR [ebx],al
c0007f09:	b8 03 00 00 00       	mov    eax,0x3
c0007f0e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007f15:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007f1b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007f1f:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007f24:	89 fa                	mov    edx,edi
c0007f26:	0f be ea             	movsx  ebp,dl
c0007f29:	85 ed                	test   ebp,ebp
c0007f2b:	0f 84 a1 00 00 00    	je     c0007fd2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007f31:	8d 56 01             	lea    edx,[esi+0x1]
c0007f34:	83 fd 2f             	cmp    ebp,0x2f
c0007f37:	74 05                	je     c0007f3e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007f39:	83 fd 5c             	cmp    ebp,0x5c
c0007f3c:	75 12                	jne    c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f3e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f43:	89 c5                	mov    ebp,eax
c0007f45:	74 09                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f47:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007f4b:	40                   	inc    eax
c0007f4c:	89 d6                	mov    esi,edx
c0007f4e:	eb cf                	jmp    c0007f1f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f50:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007f55:	89 f9                	mov    ecx,edi
c0007f57:	0f be e9             	movsx  ebp,cl
c0007f5a:	75 61                	jne    c0007fbd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f5c:	83 fd 2e             	cmp    ebp,0x2e
c0007f5f:	75 5c                	jne    c0007fbd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f61:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f66:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f6b:	74 19                	je     c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f6d:	83 fd 2e             	cmp    ebp,0x2e
c0007f70:	74 55                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f72:	89 f2                	mov    edx,esi
c0007f74:	42                   	inc    edx
c0007f75:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f7a:	83 f9 2f             	cmp    ecx,0x2f
c0007f7d:	74 f5                	je     c0007f74 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f7f:	83 f9 5c             	cmp    ecx,0x5c
c0007f82:	74 f0                	je     c0007f74 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f84:	eb c6                	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f86:	83 fd 2e             	cmp    ebp,0x2e
c0007f89:	74 3c                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f8b:	83 f8 03             	cmp    eax,0x3
c0007f8e:	74 bc                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f90:	42                   	inc    edx
c0007f91:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f96:	83 f9 2f             	cmp    ecx,0x2f
c0007f99:	74 f5                	je     c0007f90 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f9b:	83 f9 5c             	cmp    ecx,0x5c
c0007f9e:	74 f0                	je     c0007f90 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007fa0:	48                   	dec    eax
c0007fa1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007fa5:	75 06                	jne    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007fa7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fab:	eb f3                	jmp    c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007fad:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007fb1:	74 07                	je     c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007fb3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fb7:	48                   	dec    eax
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007fba:	40                   	inc    eax
c0007fbb:	eb 8f                	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fbd:	83 fd 2f             	cmp    ebp,0x2f
c0007fc0:	74 8a                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fc2:	83 fd 5c             	cmp    ebp,0x5c
c0007fc5:	74 85                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fc7:	89 f9                	mov    ecx,edi
c0007fc9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007fcc:	40                   	inc    eax
c0007fcd:	e9 7a ff ff ff       	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fd6:	83 ec 0c             	sub    esp,0xc
c0007fd9:	53                   	push   ebx
c0007fda:	e8 a1 85 ff ff       	call   c0000580 <strlen>
c0007fdf:	83 c4 10             	add    esp,0x10
c0007fe2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007fe7:	74 1c                	je     c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fe9:	83 ec 0c             	sub    esp,0xc
c0007fec:	53                   	push   ebx
c0007fed:	e8 8e 85 ff ff       	call   c0000580 <strlen>
c0007ff2:	83 c4 10             	add    esp,0x10
c0007ff5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ffa:	74 09                	je     c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007ffc:	31 ff                	xor    edi,edi
c0007ffe:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0008003:	eb 5c                	jmp    c0008061 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008005:	83 ec 0c             	sub    esp,0xc
c0008008:	53                   	push   ebx
c0008009:	e8 72 85 ff ff       	call   c0000580 <strlen>
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0008016:	74 e4                	je     c0007ffc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0008018:	83 ec 0c             	sub    esp,0xc
c000801b:	53                   	push   ebx
c000801c:	e8 5f 85 ff ff       	call   c0000580 <strlen>
c0008021:	83 c4 10             	add    esp,0x10
c0008024:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0008029:	eb ab                	jmp    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000802b:	52                   	push   edx
c000802c:	52                   	push   edx
c000802d:	53                   	push   ebx
c000802e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0008032:	55                   	push   ebp
c0008033:	e8 18 86 ff ff       	call   c0000650 <strcpy>
c0008038:	59                   	pop    ecx
c0008039:	58                   	pop    eax
c000803a:	53                   	push   ebx
c000803b:	55                   	push   ebp
c000803c:	e8 a2 f8 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c0008041:	83 c4 10             	add    esp,0x10
c0008044:	48                   	dec    eax
c0008045:	75 37                	jne    c000807e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008047:	50                   	push   eax
c0008048:	53                   	push   ebx
c0008049:	55                   	push   ebp
c000804a:	68 5e 37 02 c0       	push   0xc002375e
c000804f:	e8 12 ef ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008054:	8d 47 01             	lea    eax,[edi+0x1]
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	83 ff 14             	cmp    edi,0x14
c000805d:	74 08                	je     c0008067 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000805f:	89 c7                	mov    edi,eax
c0008061:	85 f6                	test   esi,esi
c0008063:	75 c6                	jne    c000802b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008065:	eb 17                	jmp    c000807e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008067:	83 ec 0c             	sub    esp,0xc
c000806a:	bf 15 00 00 00       	mov    edi,0x15
c000806f:	68 79 37 02 c0       	push   0xc0023779
c0008074:	e8 43 7a 00 00       	call   c000fabc <KePanic(char const*)>
c0008079:	83 c4 10             	add    esp,0x10
c000807c:	eb e3                	jmp    c0008061 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000807e:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008084:	5b                   	pop    ebx
c0008085:	5e                   	pop    esi
c0008086:	5f                   	pop    edi
c0008087:	5d                   	pop    ebp
c0008088:	c3                   	ret    
c0008089:	90                   	nop

c000808a <File::File(char const*, Process*, bool)>:
c000808a:	83 ec 1c             	sub    esp,0x1c
c000808d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008091:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008099:	83 ec 08             	sub    esp,0x8
c000809c:	6a 00                	push   0x0
c000809e:	50                   	push   eax
c000809f:	e8 0c ab 00 00       	call   c0012bb0 <UnixFile::UnixFile(int)>
c00080a4:	83 c4 10             	add    esp,0x10
c00080a7:	ba 2c 38 02 c0       	mov    edx,0xc002382c
c00080ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b0:	89 10                	mov    DWORD PTR [eax],edx
c00080b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b7:	85 c0                	test   eax,eax
c00080b9:	74 0f                	je     c00080ca <File::File(char const*, Process*, bool)+0x40>
c00080bb:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c00080c0:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c4:	74 04                	je     c00080ca <File::File(char const*, Process*, bool)+0x40>
c00080c6:	b0 01                	mov    al,0x1
c00080c8:	eb 02                	jmp    c00080cc <File::File(char const*, Process*, bool)+0x42>
c00080ca:	b0 00                	mov    al,0x0
c00080cc:	0f b6 c0             	movzx  eax,al
c00080cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080dd:	83 c2 0d             	add    edx,0xd
c00080e0:	50                   	push   eax
c00080e1:	51                   	push   ecx
c00080e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e6:	52                   	push   edx
c00080e7:	e8 70 fd ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ec:	83 c4 10             	add    esp,0x10
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fa:	83 c2 0d             	add    edx,0xd
c00080fd:	83 ec 04             	sub    esp,0x4
c0008100:	50                   	push   eax
c0008101:	52                   	push   edx
c0008102:	68 9f 37 02 c0       	push   0xc002379f
c0008107:	e8 5a ee ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008113:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008116:	83 e8 41             	sub    eax,0x41
c0008119:	88 c2                	mov    dl,al
c000811b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000811f:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008129:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008131:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008137:	0f b6 c0             	movzx  eax,al
c000813a:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008141:	85 c0                	test   eax,eax
c0008143:	74 3e                	je     c0008183 <File::File(char const*, Process*, bool)+0xf9>
c0008145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008149:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000814f:	0f b6 c0             	movzx  eax,al
c0008152:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008159:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000815f:	85 c0                	test   eax,eax
c0008161:	75 20                	jne    c0008183 <File::File(char const*, Process*, bool)+0xf9>
c0008163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008167:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816d:	0f b6 c0             	movzx  eax,al
c0008170:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008177:	83 ec 0c             	sub    esp,0xc
c000817a:	50                   	push   eax
c000817b:	e8 d4 27 00 00       	call   c000a954 <LogicalDisk::mount()>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	90                   	nop
c0008184:	83 c4 1c             	add    esp,0x1c
c0008187:	c3                   	ret    

c0008188 <File::File(char const*, Process*)>:
c0008188:	83 ec 0c             	sub    esp,0xc
c000818b:	6a 01                	push   0x1
c000818d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008199:	e8 ec fe ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	90                   	nop
c00081a2:	83 c4 0c             	add    esp,0xc
c00081a5:	c3                   	ret    

c00081a6 <File::open(FileOpenMode)>:
c00081a6:	53                   	push   ebx
c00081a7:	b8 0b 00 00 00       	mov    eax,0xb
c00081ac:	83 ec 08             	sub    esp,0x8
c00081af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081ba:	83 fa 19             	cmp    edx,0x19
c00081bd:	77 40                	ja     c00081ff <File::open(FileOpenMode)+0x59>
c00081bf:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00081c6:	85 d2                	test   edx,edx
c00081c8:	74 35                	je     c00081ff <File::open(FileOpenMode)+0x59>
c00081ca:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d0:	85 d2                	test   edx,edx
c00081d2:	74 2b                	je     c00081ff <File::open(FileOpenMode)+0x59>
c00081d4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081d8:	b8 06 00 00 00       	mov    eax,0x6
c00081dd:	75 20                	jne    c00081ff <File::open(FileOpenMode)+0x59>
c00081df:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081eb:	51                   	push   ecx
c00081ec:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081ef:	51                   	push   ecx
c00081f0:	52                   	push   edx
c00081f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f4:	83 c4 10             	add    esp,0x10
c00081f7:	85 c0                	test   eax,eax
c00081f9:	75 04                	jne    c00081ff <File::open(FileOpenMode)+0x59>
c00081fb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081ff:	83 c4 08             	add    esp,0x8
c0008202:	5b                   	pop    ebx
c0008203:	c3                   	ret    

c0008204 <File::close()>:
c0008204:	53                   	push   ebx
c0008205:	b8 0b 00 00 00       	mov    eax,0xb
c000820a:	83 ec 08             	sub    esp,0x8
c000820d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008211:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008218:	83 f9 19             	cmp    ecx,0x19
c000821b:	77 41                	ja     c000825e <File::close()+0x5a>
c000821d:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c0008224:	85 db                	test   ebx,ebx
c0008226:	74 36                	je     c000825e <File::close()+0x5a>
c0008228:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000822f:	74 2d                	je     c000825e <File::close()+0x5a>
c0008231:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008235:	b8 05 00 00 00       	mov    eax,0x5
c000823a:	74 22                	je     c000825e <File::close()+0x5a>
c000823c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008240:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c0008247:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824d:	53                   	push   ebx
c000824e:	53                   	push   ebx
c000824f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008251:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008257:	50                   	push   eax
c0008258:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	83 c4 08             	add    esp,0x8
c0008261:	5b                   	pop    ebx
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::seek(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	b8 0b 00 00 00       	mov    eax,0xb
c000826a:	53                   	push   ebx
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008278:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::seek(unsigned long long)+0x51>
c0008284:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c0008299:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000829d:	b8 05 00 00 00       	mov    eax,0x5
c00082a2:	74 11                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::truncate(unsigned long long)>:
c00082ba:	56                   	push   esi
c00082bb:	b8 0b 00 00 00       	mov    eax,0xb
c00082c0:	53                   	push   ebx
c00082c1:	51                   	push   ecx
c00082c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082ce:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d5:	83 fa 19             	cmp    edx,0x19
c00082d8:	77 31                	ja     c000830b <File::truncate(unsigned long long)+0x51>
c00082da:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00082e1:	85 d2                	test   edx,edx
c00082e3:	74 26                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082e5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082eb:	85 d2                	test   edx,edx
c00082ed:	74 1c                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082ef:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082f3:	b8 05 00 00 00       	mov    eax,0x5
c00082f8:	74 11                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fc:	53                   	push   ebx
c00082fd:	51                   	push   ecx
c00082fe:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008304:	52                   	push   edx
c0008305:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008308:	83 c4 10             	add    esp,0x10
c000830b:	5a                   	pop    edx
c000830c:	5b                   	pop    ebx
c000830d:	5e                   	pop    esi
c000830e:	c3                   	ret    
c000830f:	90                   	nop

c0008310 <File::tell(unsigned long long*)>:
c0008310:	83 ec 0c             	sub    esp,0xc
c0008313:	b8 0b 00 00 00       	mov    eax,0xb
c0008318:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008323:	83 fa 19             	cmp    edx,0x19
c0008326:	77 34                	ja     c000835c <File::tell(unsigned long long*)+0x4c>
c0008328:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c000832f:	85 d2                	test   edx,edx
c0008331:	74 29                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c0008333:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008339:	85 d2                	test   edx,edx
c000833b:	74 1f                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c000833d:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008341:	b8 05 00 00 00       	mov    eax,0x5
c0008346:	74 14                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c0008348:	50                   	push   eax
c0008349:	8b 02                	mov    eax,DWORD PTR [edx]
c000834b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000834f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008355:	52                   	push   edx
c0008356:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008359:	83 c4 10             	add    esp,0x10
c000835c:	83 c4 0c             	add    esp,0xc
c000835f:	c3                   	ret    

c0008360 <File::rewind()>:
c0008360:	83 ec 10             	sub    esp,0x10
c0008363:	6a 00                	push   0x0
c0008365:	6a 00                	push   0x0
c0008367:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836b:	e8 f4 fe ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0008370:	83 c4 1c             	add    esp,0x1c
c0008373:	c3                   	ret    

c0008374 <File::unlink()>:
c0008374:	83 ec 0c             	sub    esp,0xc
c0008377:	b8 0b 00 00 00       	mov    eax,0xb
c000837c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008380:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008387:	83 f9 19             	cmp    ecx,0x19
c000838a:	77 2f                	ja     c00083bb <File::unlink()+0x47>
c000838c:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 24                	je     c00083bb <File::unlink()+0x47>
c0008397:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839d:	85 c9                	test   ecx,ecx
c000839f:	74 1a                	je     c00083bb <File::unlink()+0x47>
c00083a1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a5:	b8 06 00 00 00       	mov    eax,0x6
c00083aa:	75 0f                	jne    c00083bb <File::unlink()+0x47>
c00083ac:	50                   	push   eax
c00083ad:	83 c2 0d             	add    edx,0xd
c00083b0:	50                   	push   eax
c00083b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b3:	52                   	push   edx
c00083b4:	51                   	push   ecx
c00083b5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083b8:	83 c4 10             	add    esp,0x10
c00083bb:	83 c4 0c             	add    esp,0xc
c00083be:	c3                   	ret    
c00083bf:	90                   	nop

c00083c0 <File::rename(char const*)>:
c00083c0:	83 ec 0c             	sub    esp,0xc
c00083c3:	b8 0b 00 00 00       	mov    eax,0xb
c00083c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 32                	ja     c000840a <File::rename(char const*)+0x4a>
c00083d8:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 27                	je     c000840a <File::rename(char const*)+0x4a>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 1d                	je     c000840a <File::rename(char const*)+0x4a>
c00083ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f1:	b8 06 00 00 00       	mov    eax,0x6
c00083f6:	75 12                	jne    c000840a <File::rename(char const*)+0x4a>
c00083f8:	50                   	push   eax
c00083f9:	83 c2 0d             	add    edx,0xd
c00083fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008402:	52                   	push   edx
c0008403:	51                   	push   ecx
c0008404:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008407:	83 c4 10             	add    esp,0x10
c000840a:	83 c4 0c             	add    esp,0xc
c000840d:	c3                   	ret    

c000840e <File::chfatattr(unsigned char, unsigned char)>:
c000840e:	57                   	push   edi
c000840f:	b8 0b 00 00 00       	mov    eax,0xb
c0008414:	56                   	push   esi
c0008415:	53                   	push   ebx
c0008416:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000841e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008422:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008429:	83 f9 19             	cmp    ecx,0x19
c000842c:	77 37                	ja     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000842e:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008435:	85 c9                	test   ecx,ecx
c0008437:	74 2c                	je     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008439:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843f:	85 c9                	test   ecx,ecx
c0008441:	74 22                	je     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008443:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008447:	b8 06 00 00 00       	mov    eax,0x6
c000844c:	75 17                	jne    c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000844e:	89 f0                	mov    eax,esi
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	0f b6 db             	movzx  ebx,bl
c0008455:	0f b6 f0             	movzx  esi,al
c0008458:	83 c2 0d             	add    edx,0xd
c000845b:	56                   	push   esi
c000845c:	53                   	push   ebx
c000845d:	52                   	push   edx
c000845e:	51                   	push   ecx
c000845f:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008462:	83 c4 10             	add    esp,0x10
c0008465:	5b                   	pop    ebx
c0008466:	5e                   	pop    esi
c0008467:	5f                   	pop    edi
c0008468:	c3                   	ret    
c0008469:	90                   	nop

c000846a <File::exists()>:
c000846a:	83 ec 0c             	sub    esp,0xc
c000846d:	31 c0                	xor    eax,eax
c000846f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008473:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847a:	83 f9 19             	cmp    ecx,0x19
c000847d:	77 24                	ja     c00084a3 <File::exists()+0x39>
c000847f:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008486:	85 c9                	test   ecx,ecx
c0008488:	74 19                	je     c00084a3 <File::exists()+0x39>
c000848a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008490:	85 c9                	test   ecx,ecx
c0008492:	74 0f                	je     c00084a3 <File::exists()+0x39>
c0008494:	50                   	push   eax
c0008495:	83 c2 0d             	add    edx,0xd
c0008498:	50                   	push   eax
c0008499:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849b:	52                   	push   edx
c000849c:	51                   	push   ecx
c000849d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a0:	83 c4 10             	add    esp,0x10
c00084a3:	83 c4 0c             	add    esp,0xc
c00084a6:	c3                   	ret    
c00084a7:	90                   	nop

c00084a8 <File::stat(unsigned long long*, bool*)>:
c00084a8:	56                   	push   esi
c00084a9:	53                   	push   ebx
c00084aa:	50                   	push   eax
c00084ab:	b8 0b 00 00 00       	mov    eax,0xb
c00084b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084bc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c3:	83 f9 19             	cmp    ecx,0x19
c00084c6:	77 3d                	ja     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084c8:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00084cf:	85 c9                	test   ecx,ecx
c00084d1:	74 32                	je     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084d9:	85 c9                	test   ecx,ecx
c00084db:	74 28                	je     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084dd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e3:	74 13                	je     c00084f8 <File::stat(unsigned long long*, bool*)+0x50>
c00084e5:	83 ec 04             	sub    esp,0x4
c00084e8:	56                   	push   esi
c00084e9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084ef:	51                   	push   ecx
c00084f0:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f6:	eb 0a                	jmp    c0008502 <File::stat(unsigned long long*, bool*)+0x5a>
c00084f8:	53                   	push   ebx
c00084f9:	83 c2 0d             	add    edx,0xd
c00084fc:	56                   	push   esi
c00084fd:	52                   	push   edx
c00084fe:	51                   	push   ecx
c00084ff:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008502:	83 c4 10             	add    esp,0x10
c0008505:	5a                   	pop    edx
c0008506:	5b                   	pop    ebx
c0008507:	5e                   	pop    esi
c0008508:	c3                   	ret    

c0008509 <Fs::setcwd(Process*, char*)>:
c0008509:	55                   	push   ebp
c000850a:	57                   	push   edi
c000850b:	56                   	push   esi
c000850c:	53                   	push   ebx
c000850d:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008513:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851a:	6a 00                	push   0x0
c000851c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008522:	57                   	push   edi
c0008523:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000852e:	56                   	push   esi
c000852f:	e8 28 f9 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008534:	89 34 24             	mov    DWORD PTR [esp],esi
c0008537:	e8 44 80 ff ff       	call   c0000580 <strlen>
c000853c:	83 c4 10             	add    esp,0x10
c000853f:	83 f8 02             	cmp    eax,0x2
c0008542:	77 15                	ja     c0008559 <Fs::setcwd(Process*, char*)+0x50>
c0008544:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008549:	83 eb 41             	sub    ebx,0x41
c000854c:	8b 04 9d e0 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3520]
c0008553:	85 c0                	test   eax,eax
c0008555:	75 1c                	jne    c0008573 <Fs::setcwd(Process*, char*)+0x6a>
c0008557:	eb 2f                	jmp    c0008588 <Fs::setcwd(Process*, char*)+0x7f>
c0008559:	83 ec 0c             	sub    esp,0xc
c000855c:	56                   	push   esi
c000855d:	e8 1e 80 ff ff       	call   c0000580 <strlen>
c0008562:	83 c4 10             	add    esp,0x10
c0008565:	83 f8 03             	cmp    eax,0x3
c0008568:	75 57                	jne    c00085c1 <Fs::setcwd(Process*, char*)+0xb8>
c000856a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000856f:	75 50                	jne    c00085c1 <Fs::setcwd(Process*, char*)+0xb8>
c0008571:	eb d1                	jmp    c0008544 <Fs::setcwd(Process*, char*)+0x3b>
c0008573:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857a:	75 0c                	jne    c0008588 <Fs::setcwd(Process*, char*)+0x7f>
c000857c:	83 ec 0c             	sub    esp,0xc
c000857f:	50                   	push   eax
c0008580:	e8 cf 23 00 00       	call   c000a954 <LogicalDisk::mount()>
c0008585:	83 c4 10             	add    esp,0x10
c0008588:	83 fb 19             	cmp    ebx,0x19
c000858b:	b8 03 00 00 00       	mov    eax,0x3
c0008590:	0f 87 c6 00 00 00    	ja     c000865c <Fs::setcwd(Process*, char*)+0x153>
c0008596:	8b 14 9d e0 ca 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd3520]
c000859d:	b8 05 00 00 00       	mov    eax,0x5
c00085a2:	85 d2                	test   edx,edx
c00085a4:	0f 84 b2 00 00 00    	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c00085aa:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b1:	b8 06 00 00 00       	mov    eax,0x6
c00085b6:	0f 85 92 00 00 00    	jne    c000864e <Fs::setcwd(Process*, char*)+0x145>
c00085bc:	e9 9b 00 00 00       	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c00085c1:	83 ec 0c             	sub    esp,0xc
c00085c4:	68 14 01 00 00       	push   0x114
c00085c9:	e8 9a 70 00 00       	call   c000f668 <malloc>
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	55                   	push   ebp
c00085d2:	56                   	push   esi
c00085d3:	50                   	push   eax
c00085d4:	89 c3                	mov    ebx,eax
c00085d6:	e8 ad fb ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00085db:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e0:	83 c4 0c             	add    esp,0xc
c00085e3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e7:	50                   	push   eax
c00085e8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ec:	50                   	push   eax
c00085ed:	53                   	push   ebx
c00085ee:	e8 b5 fe ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00085f3:	83 c4 10             	add    esp,0x10
c00085f6:	83 f8 02             	cmp    eax,0x2
c00085f9:	74 27                	je     c0008622 <Fs::setcwd(Process*, char*)+0x119>
c00085fb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008600:	75 1c                	jne    c000861e <Fs::setcwd(Process*, char*)+0x115>
c0008602:	85 db                	test   ebx,ebx
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	74 51                	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c000860b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	53                   	push   ebx
c0008611:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008614:	83 c4 10             	add    esp,0x10
c0008617:	b8 02 00 00 00       	mov    eax,0x2
c000861c:	eb 3e                	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c000861e:	85 c0                	test   eax,eax
c0008620:	74 1c                	je     c000863e <Fs::setcwd(Process*, char*)+0x135>
c0008622:	85 db                	test   ebx,ebx
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	74 31                	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c000862b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	53                   	push   ebx
c0008631:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008634:	83 c4 10             	add    esp,0x10
c0008637:	b8 01 00 00 00       	mov    eax,0x1
c000863c:	eb 1e                	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c000863e:	85 db                	test   ebx,ebx
c0008640:	74 0c                	je     c000864e <Fs::setcwd(Process*, char*)+0x145>
c0008642:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	53                   	push   ebx
c0008648:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864b:	83 c4 10             	add    esp,0x10
c000864e:	50                   	push   eax
c000864f:	50                   	push   eax
c0008650:	56                   	push   esi
c0008651:	57                   	push   edi
c0008652:	e8 f9 7f ff ff       	call   c0000650 <strcpy>
c0008657:	83 c4 10             	add    esp,0x10
c000865a:	31 c0                	xor    eax,eax
c000865c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008662:	5b                   	pop    ebx
c0008663:	5e                   	pop    esi
c0008664:	5f                   	pop    edi
c0008665:	5d                   	pop    ebp
c0008666:	c3                   	ret    
c0008667:	90                   	nop

c0008668 <Directory::Directory(char const*, Process*)>:
c0008668:	83 ec 0c             	sub    esp,0xc
c000866b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866f:	83 ec 08             	sub    esp,0x8
c0008672:	6a 00                	push   0x0
c0008674:	50                   	push   eax
c0008675:	e8 36 a5 00 00       	call   c0012bb0 <UnixFile::UnixFile(int)>
c000867a:	83 c4 10             	add    esp,0x10
c000867d:	ba 48 38 02 c0       	mov    edx,0xc0023848
c0008682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008686:	89 10                	mov    DWORD PTR [eax],edx
c0008688:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000868d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008691:	0f 95 c0             	setne  al
c0008694:	0f b6 c0             	movzx  eax,al
c0008697:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a5:	83 c2 0d             	add    edx,0xd
c00086a8:	50                   	push   eax
c00086a9:	51                   	push   ecx
c00086aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086ae:	52                   	push   edx
c00086af:	e8 a8 f7 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b4:	83 c4 10             	add    esp,0x10
c00086b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bb:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086be:	83 e8 41             	sub    eax,0x41
c00086c1:	88 c2                	mov    dl,al
c00086c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c7:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d1:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086df:	0f b6 c0             	movzx  eax,al
c00086e2:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00086e9:	85 c0                	test   eax,eax
c00086eb:	74 3e                	je     c000872b <Directory::Directory(char const*, Process*)+0xc3>
c00086ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f7:	0f b6 c0             	movzx  eax,al
c00086fa:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008701:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008707:	85 c0                	test   eax,eax
c0008709:	75 20                	jne    c000872b <Directory::Directory(char const*, Process*)+0xc3>
c000870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000870f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008715:	0f b6 c0             	movzx  eax,al
c0008718:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c000871f:	83 ec 0c             	sub    esp,0xc
c0008722:	50                   	push   eax
c0008723:	e8 2c 22 00 00       	call   c000a954 <LogicalDisk::mount()>
c0008728:	83 c4 10             	add    esp,0x10
c000872b:	90                   	nop
c000872c:	83 c4 0c             	add    esp,0xc
c000872f:	c3                   	ret    

c0008730 <Directory::open()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008744:	83 fa 19             	cmp    edx,0x19
c0008747:	77 3d                	ja     c0008786 <Directory::open()+0x56>
c0008749:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008750:	85 d2                	test   edx,edx
c0008752:	74 32                	je     c0008786 <Directory::open()+0x56>
c0008754:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875a:	85 d2                	test   edx,edx
c000875c:	74 28                	je     c0008786 <Directory::open()+0x56>
c000875e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008762:	b8 06 00 00 00       	mov    eax,0x6
c0008767:	75 1d                	jne    c0008786 <Directory::open()+0x56>
c0008769:	50                   	push   eax
c000876a:	8b 02                	mov    eax,DWORD PTR [edx]
c000876c:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008772:	51                   	push   ecx
c0008773:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008776:	51                   	push   ecx
c0008777:	52                   	push   edx
c0008778:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877b:	83 c4 10             	add    esp,0x10
c000877e:	85 c0                	test   eax,eax
c0008780:	75 04                	jne    c0008786 <Directory::open()+0x56>
c0008782:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008786:	83 c4 08             	add    esp,0x8
c0008789:	5b                   	pop    ebx
c000878a:	c3                   	ret    
c000878b:	90                   	nop

c000878c <Directory::close()>:
c000878c:	53                   	push   ebx
c000878d:	b8 0b 00 00 00       	mov    eax,0xb
c0008792:	83 ec 08             	sub    esp,0x8
c0008795:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008799:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a0:	83 f9 19             	cmp    ecx,0x19
c00087a3:	77 41                	ja     c00087e6 <Directory::close()+0x5a>
c00087a5:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c00087ac:	85 db                	test   ebx,ebx
c00087ae:	74 36                	je     c00087e6 <Directory::close()+0x5a>
c00087b0:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b7:	74 2d                	je     c00087e6 <Directory::close()+0x5a>
c00087b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087bd:	b8 05 00 00 00       	mov    eax,0x5
c00087c2:	74 22                	je     c00087e6 <Directory::close()+0x5a>
c00087c4:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087c8:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c00087cf:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d5:	53                   	push   ebx
c00087d6:	53                   	push   ebx
c00087d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087d9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087df:	50                   	push   eax
c00087e0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e3:	83 c4 10             	add    esp,0x10
c00087e6:	83 c4 08             	add    esp,0x8
c00087e9:	5b                   	pop    ebx
c00087ea:	c3                   	ret    
c00087eb:	90                   	nop

c00087ec <Directory::unlink()>:
c00087ec:	83 ec 0c             	sub    esp,0xc
c00087ef:	b8 0b 00 00 00       	mov    eax,0xb
c00087f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ff:	83 f9 19             	cmp    ecx,0x19
c0008802:	77 2f                	ja     c0008833 <Directory::unlink()+0x47>
c0008804:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 24                	je     c0008833 <Directory::unlink()+0x47>
c000880f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008815:	85 c9                	test   ecx,ecx
c0008817:	74 1a                	je     c0008833 <Directory::unlink()+0x47>
c0008819:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000881d:	b8 06 00 00 00       	mov    eax,0x6
c0008822:	75 0f                	jne    c0008833 <Directory::unlink()+0x47>
c0008824:	50                   	push   eax
c0008825:	83 c2 0d             	add    edx,0xd
c0008828:	50                   	push   eax
c0008829:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882b:	52                   	push   edx
c000882c:	51                   	push   ecx
c000882d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008830:	83 c4 10             	add    esp,0x10
c0008833:	83 c4 0c             	add    esp,0xc
c0008836:	c3                   	ret    
c0008837:	90                   	nop

c0008838 <Directory::rename(char const*)>:
c0008838:	83 ec 0c             	sub    esp,0xc
c000883b:	b8 0b 00 00 00       	mov    eax,0xb
c0008840:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008844:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884b:	83 f9 19             	cmp    ecx,0x19
c000884e:	77 32                	ja     c0008882 <Directory::rename(char const*)+0x4a>
c0008850:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008857:	85 c9                	test   ecx,ecx
c0008859:	74 27                	je     c0008882 <Directory::rename(char const*)+0x4a>
c000885b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008861:	85 c9                	test   ecx,ecx
c0008863:	74 1d                	je     c0008882 <Directory::rename(char const*)+0x4a>
c0008865:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008869:	b8 06 00 00 00       	mov    eax,0x6
c000886e:	75 12                	jne    c0008882 <Directory::rename(char const*)+0x4a>
c0008870:	50                   	push   eax
c0008871:	83 c2 0d             	add    edx,0xd
c0008874:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008876:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887a:	52                   	push   edx
c000887b:	51                   	push   ecx
c000887c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000887f:	83 c4 10             	add    esp,0x10
c0008882:	83 c4 0c             	add    esp,0xc
c0008885:	c3                   	ret    

c0008886 <Directory::exists()>:
c0008886:	83 ec 0c             	sub    esp,0xc
c0008889:	31 c0                	xor    eax,eax
c000888b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000888f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008896:	83 f9 19             	cmp    ecx,0x19
c0008899:	77 24                	ja     c00088bf <Directory::exists()+0x39>
c000889b:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088a2:	85 c9                	test   ecx,ecx
c00088a4:	74 19                	je     c00088bf <Directory::exists()+0x39>
c00088a6:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ac:	85 c9                	test   ecx,ecx
c00088ae:	74 0f                	je     c00088bf <Directory::exists()+0x39>
c00088b0:	50                   	push   eax
c00088b1:	83 c2 0d             	add    edx,0xd
c00088b4:	50                   	push   eax
c00088b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b7:	52                   	push   edx
c00088b8:	51                   	push   ecx
c00088b9:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 c4 0c             	add    esp,0xc
c00088c2:	c3                   	ret    
c00088c3:	90                   	nop

c00088c4 <Directory::read(dirent*)>:
c00088c4:	83 ec 1c             	sub    esp,0x1c
c00088c7:	b8 0b 00 00 00       	mov    eax,0xb
c00088cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d7:	83 f9 19             	cmp    ecx,0x19
c00088da:	77 30                	ja     c000890c <Directory::read(dirent*)+0x48>
c00088dc:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 25                	je     c000890c <Directory::read(dirent*)+0x48>
c00088e7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088ee:	74 1c                	je     c000890c <Directory::read(dirent*)+0x48>
c00088f0:	83 ec 0c             	sub    esp,0xc
c00088f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088f9:	51                   	push   ecx
c00088fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088fe:	6a 00                	push   0x0
c0008900:	68 10 01 00 00       	push   0x110
c0008905:	52                   	push   edx
c0008906:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008909:	83 c4 20             	add    esp,0x20
c000890c:	83 c4 1c             	add    esp,0x1c
c000890f:	c3                   	ret    

c0008910 <Directory::create()>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	b8 0b 00 00 00       	mov    eax,0xb
c0008918:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008923:	83 f9 19             	cmp    ecx,0x19
c0008926:	77 2f                	ja     c0008957 <Directory::create()+0x47>
c0008928:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c000892f:	85 c9                	test   ecx,ecx
c0008931:	74 24                	je     c0008957 <Directory::create()+0x47>
c0008933:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008939:	85 c9                	test   ecx,ecx
c000893b:	74 1a                	je     c0008957 <Directory::create()+0x47>
c000893d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008941:	b8 06 00 00 00       	mov    eax,0x6
c0008946:	75 0f                	jne    c0008957 <Directory::create()+0x47>
c0008948:	50                   	push   eax
c0008949:	83 c2 0d             	add    edx,0xd
c000894c:	50                   	push   eax
c000894d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000894f:	52                   	push   edx
c0008950:	51                   	push   ecx
c0008951:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008954:	83 c4 10             	add    esp,0x10
c0008957:	83 c4 0c             	add    esp,0xc
c000895a:	c3                   	ret    
c000895b:	90                   	nop

c000895c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895c:	b8 0a 00 00 00       	mov    eax,0xa
c0008961:	c3                   	ret    
c0008962:	66 90                	xchg   ax,ax

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 e0 11 00 00       	call   c0009b58 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba 64 38 02 c0       	mov    edx,0xc0023864
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba 64 38 02 c0       	mov    edx,0xc0023864
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 41 0f 00 00       	call   c00098f8 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 8d 48 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c00089f8:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 19 de 00 00       	call   c0016828 <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 69 20 01 00       	call   c001aa84 <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 c9 dc 00 00       	jmp    c00166f4 <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 43 20 01 00       	call   c001aa84 <HalMakeBeep(int)>
c0008a41:	89 f0                	mov    eax,esi
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 d1 dd 00 00       	call   c0016828 <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 1b 20 01 00       	jmp    c001aa84 <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0008a7a:	e8 01 d9 00 00       	call   c0016380 <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 c2 6b 00 00       	call   c000f668 <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 a0 38 02 c0       	push   0xc00238a0
c0008ab9:	53                   	push   ebx
c0008aba:	e8 c9 f6 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 bf 38 02 c0       	push   0xc00238bf
c0008ad3:	e8 e4 6f 00 00       	call   c000fabc <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 be f6 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 aa f9 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 d5 38 02 c0       	push   0xc00238d5
c0008b10:	e8 51 e4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 3e 6b 00 00       	call   c000f668 <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 e5 38 02 c0       	push   0xc00238e5
c0008b77:	e8 ea e3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7a f6 ff ff       	call   c0008204 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 9f 6a 00 00       	call   c000f668 <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3cc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 ee 38 02 c0       	push   0xc00238ee
c0008bea:	50                   	push   eax
c0008beb:	e8 60 7a ff ff       	call   c0000650 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 3a 79 ff ff       	call   c0000580 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 ee 38 02 c0       	push   0xc00238ee
c0008c6c:	50                   	push   eax
c0008c6d:	e8 fe 7b ff ff       	call   c0000870 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 e7 78 ff ff       	call   c0000580 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 ee 38 02 c0       	push   0xc00238ee
c0008cbb:	50                   	push   eax
c0008cbc:	e8 af 7b ff ff       	call   c0000870 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 c3 02 c0       	mov    ds:0xc002c324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 f0 38 02 c0       	push   0xc00238f0
c0008cf7:	e8 6a e2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 05 39 02 c0       	push   0xc0023905
c0008d0d:	e8 54 e2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 4c 78 ff ff       	call   c0000580 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 15 7b ff ff       	call   c0000870 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 0a 78 ff ff       	call   c0000580 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 09 39 02 c0       	push   0xc0023909
c0008d9c:	50                   	push   eax
c0008d9d:	e8 ce 7a ff ff       	call   c0000870 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 0e 39 02 c0       	push   0xc002390e
c0008de3:	e8 7e e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 1c 39 02 c0       	push   0xc002391c
c0008e01:	e8 60 e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 25 39 02 c0       	push   0xc0023925
c0008e26:	e8 3b e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 c3 02 c0       	mov    al,ds:0xc002c320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 43 39 02 c0       	push   0xc0023943
c0008e4a:	e8 17 e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 54 39 02 c0       	push   0xc0023954
c0008e63:	e8 fe e0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 67 39 02 c0       	push   0xc0023967
c0008e9b:	e8 c6 e0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 c6 02 c0       	mov    ds:0xc002c661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	d1 e0                	shl    eax,1
c0008f57:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008f98:	c6 05 61 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c661,0x0
c0008f9f:	c7 05 64 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 74 39 02 c0       	push   0xc0023974
c0008fba:	e8 05 43 00 00       	call   c000d2c4 <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 99 39 02 c0       	push   0xc0023999
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 ea 4e 00 00       	call   c000debf <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 af 47 00 00       	call   c000d796 <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 ed 43 00 00       	call   c000d3e2 <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 74 39 02 c0       	push   0xc0023974
c0009054:	e8 6b 42 00 00       	call   c000d2c4 <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 99 39 02 c0       	push   0xc0023999
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 50 4e 00 00       	call   c000debf <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 a4 43 00 00       	call   c000d434 <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 44 43 00 00       	call   c000d3e2 <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 8e 0a 00 00       	call   c0009b58 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba f8 39 02 c0       	mov    edx,0xc00239f8
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba f8 39 02 c0       	mov    edx,0xc00239f8
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 f1 07 00 00       	call   c00098f8 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 3d 41 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0009167:	01 d0                	add    eax,edx
c0009169:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000916f:	89 c2                	mov    edx,eax
c0009171:	c1 fa 1f             	sar    edx,0x1f
c0009174:	01 c1                	add    ecx,eax
c0009176:	11 d3                	adc    ebx,edx
c0009178:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c000917d:	0f b6 c0             	movzx  eax,al
c0009180:	85 c0                	test   eax,eax
c0009182:	74 0c                	je     c0009190 <Clock::timeInSecondsLocal()+0x56>
c0009184:	b8 08 07 00 00       	mov    eax,0x708
c0009189:	ba 00 00 00 00       	mov    edx,0x0
c000918e:	eb 0a                	jmp    c000919a <Clock::timeInSecondsLocal()+0x60>
c0009190:	b8 00 00 00 00       	mov    eax,0x0
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	01 c8                	add    eax,ecx
c000919c:	11 da                	adc    edx,ebx
c000919e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091a1:	c9                   	leave  
c00091a2:	c3                   	ret    
c00091a3:	90                   	nop

c00091a4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091a4:	55                   	push   ebp
c00091a5:	89 e5                	mov    ebp,esp
c00091a7:	56                   	push   esi
c00091a8:	53                   	push   ebx
c00091a9:	83 ec 10             	sub    esp,0x10
c00091ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091af:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00091bd:	83 c0 2c             	add    eax,0x2c
c00091c0:	8b 30                	mov    esi,DWORD PTR [eax]
c00091c2:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00091c7:	0f b6 d0             	movzx  edx,al
c00091ca:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00091cf:	01 d0                	add    eax,edx
c00091d1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00091d7:	89 c2                	mov    edx,eax
c00091d9:	c1 fa 1f             	sar    edx,0x1f
c00091dc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091df:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091e2:	29 c1                	sub    ecx,eax
c00091e4:	19 d3                	sbb    ebx,edx
c00091e6:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c00091eb:	0f b6 c0             	movzx  eax,al
c00091ee:	85 c0                	test   eax,eax
c00091f0:	74 0c                	je     c00091fe <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c00091f2:	b8 08 07 00 00       	mov    eax,0x708
c00091f7:	ba 00 00 00 00       	mov    edx,0x0
c00091fc:	eb 0a                	jmp    c0009208 <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c00091fe:	b8 00 00 00 00       	mov    eax,0x0
c0009203:	ba 00 00 00 00       	mov    edx,0x0
c0009208:	29 c1                	sub    ecx,eax
c000920a:	19 d3                	sbb    ebx,edx
c000920c:	89 c8                	mov    eax,ecx
c000920e:	89 da                	mov    edx,ebx
c0009210:	83 ec 04             	sub    esp,0x4
c0009213:	52                   	push   edx
c0009214:	50                   	push   eax
c0009215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009218:	ff d6                	call   esi
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009220:	5b                   	pop    ebx
c0009221:	5e                   	pop    esi
c0009222:	5d                   	pop    ebp
c0009223:	c3                   	ret    

c0009224 <KeDatetimeToSeconds(datetime_t)>:
c0009224:	55                   	push   ebp
c0009225:	89 e5                	mov    ebp,esp
c0009227:	53                   	push   ebx
c0009228:	83 ec 24             	sub    esp,0x24
c000922b:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000922f:	2d 6c 07 00 00       	sub    eax,0x76c
c0009234:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009238:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000923b:	83 e8 01             	sub    eax,0x1
c000923e:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009241:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009248:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000924f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009256:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000925d:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009260:	0f b6 c8             	movzx  ecx,al
c0009263:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009266:	0f b6 d0             	movzx  edx,al
c0009269:	89 d0                	mov    eax,edx
c000926b:	c1 e0 04             	shl    eax,0x4
c000926e:	29 d0                	sub    eax,edx
c0009270:	c1 e0 02             	shl    eax,0x2
c0009273:	8d 14 01             	lea    edx,[ecx+eax*1]
c0009276:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009279:	0f b6 c0             	movzx  eax,al
c000927c:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009282:	01 d0                	add    eax,edx
c0009284:	89 c2                	mov    edx,eax
c0009286:	c1 fa 1f             	sar    edx,0x1f
c0009289:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000928c:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c000928f:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009292:	0f b6 c0             	movzx  eax,al
c0009295:	83 e8 01             	sub    eax,0x1
c0009298:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000929b:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000929e:	0f b6 c0             	movzx  eax,al
c00092a1:	8b 04 85 c0 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc640]
c00092a8:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092ab:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092ae:	0f b6 c0             	movzx  eax,al
c00092b1:	83 f8 01             	cmp    eax,0x1
c00092b4:	76 7c                	jbe    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092b6:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092ba:	0f b7 c0             	movzx  eax,ax
c00092bd:	83 e0 03             	and    eax,0x3
c00092c0:	85 c0                	test   eax,eax
c00092c2:	75 6e                	jne    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092c4:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092c8:	0f b7 c8             	movzx  ecx,ax
c00092cb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092d0:	89 c8                	mov    eax,ecx
c00092d2:	f7 e2                	mul    edx
c00092d4:	c1 ea 05             	shr    edx,0x5
c00092d7:	89 d0                	mov    eax,edx
c00092d9:	c1 e0 02             	shl    eax,0x2
c00092dc:	01 d0                	add    eax,edx
c00092de:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092e5:	01 d0                	add    eax,edx
c00092e7:	c1 e0 02             	shl    eax,0x2
c00092ea:	29 c1                	sub    ecx,eax
c00092ec:	89 c8                	mov    eax,ecx
c00092ee:	0f b7 c0             	movzx  eax,ax
c00092f1:	85 c0                	test   eax,eax
c00092f3:	75 39                	jne    c000932e <KeDatetimeToSeconds(datetime_t)+0x10a>
c00092f5:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f9:	0f b7 c0             	movzx  eax,ax
c00092fc:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009302:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009307:	f7 e9                	imul   ecx
c0009309:	c1 fa 07             	sar    edx,0x7
c000930c:	89 c8                	mov    eax,ecx
c000930e:	c1 f8 1f             	sar    eax,0x1f
c0009311:	29 c2                	sub    edx,eax
c0009313:	89 d0                	mov    eax,edx
c0009315:	c1 e0 02             	shl    eax,0x2
c0009318:	01 d0                	add    eax,edx
c000931a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009321:	01 d0                	add    eax,edx
c0009323:	c1 e0 04             	shl    eax,0x4
c0009326:	29 c1                	sub    ecx,eax
c0009328:	89 ca                	mov    edx,ecx
c000932a:	85 d2                	test   edx,edx
c000932c:	75 04                	jne    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c000932e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009332:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009336:	0f b7 c0             	movzx  eax,ax
c0009339:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000933c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000933f:	83 f8 46             	cmp    eax,0x46
c0009342:	0f 9f c0             	setg   al
c0009345:	0f b6 c0             	movzx  eax,al
c0009348:	85 c0                	test   eax,eax
c000934a:	0f 84 a4 00 00 00    	je     c00093f4 <KeDatetimeToSeconds(datetime_t)+0x1d0>
c0009350:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009357:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000935b:	0f b7 d0             	movzx  edx,ax
c000935e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009361:	39 c2                	cmp    edx,eax
c0009363:	0f 8e b8 01 00 00    	jle    c0009521 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009369:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936c:	83 e0 03             	and    eax,0x3
c000936f:	85 c0                	test   eax,eax
c0009371:	75 6b                	jne    c00093de <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009373:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009376:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000937b:	f7 e9                	imul   ecx
c000937d:	c1 fa 05             	sar    edx,0x5
c0009380:	89 c8                	mov    eax,ecx
c0009382:	c1 f8 1f             	sar    eax,0x1f
c0009385:	29 c2                	sub    edx,eax
c0009387:	89 d0                	mov    eax,edx
c0009389:	c1 e0 02             	shl    eax,0x2
c000938c:	01 d0                	add    eax,edx
c000938e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009395:	01 d0                	add    eax,edx
c0009397:	c1 e0 02             	shl    eax,0x2
c000939a:	29 c1                	sub    ecx,eax
c000939c:	89 ca                	mov    edx,ecx
c000939e:	85 d2                	test   edx,edx
c00093a0:	75 35                	jne    c00093d7 <KeDatetimeToSeconds(datetime_t)+0x1b3>
c00093a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093a5:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093ab:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093b0:	f7 e9                	imul   ecx
c00093b2:	c1 fa 07             	sar    edx,0x7
c00093b5:	89 c8                	mov    eax,ecx
c00093b7:	c1 f8 1f             	sar    eax,0x1f
c00093ba:	29 c2                	sub    edx,eax
c00093bc:	89 d0                	mov    eax,edx
c00093be:	c1 e0 02             	shl    eax,0x2
c00093c1:	01 d0                	add    eax,edx
c00093c3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093ca:	01 d0                	add    eax,edx
c00093cc:	c1 e0 04             	shl    eax,0x4
c00093cf:	29 c1                	sub    ecx,eax
c00093d1:	89 ca                	mov    edx,ecx
c00093d3:	85 d2                	test   edx,edx
c00093d5:	75 07                	jne    c00093de <KeDatetimeToSeconds(datetime_t)+0x1ba>
c00093d7:	b8 6e 01 00 00       	mov    eax,0x16e
c00093dc:	eb 05                	jmp    c00093e3 <KeDatetimeToSeconds(datetime_t)+0x1bf>
c00093de:	b8 6d 01 00 00       	mov    eax,0x16d
c00093e3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00093e6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093e9:	83 c0 01             	add    eax,0x1
c00093ec:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00093ef:	e9 63 ff ff ff       	jmp    c0009357 <KeDatetimeToSeconds(datetime_t)+0x133>
c00093f4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093f7:	83 f8 45             	cmp    eax,0x45
c00093fa:	0f 8f 21 01 00 00    	jg     c0009521 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009400:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009407:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000940b:	0f b7 d0             	movzx  edx,ax
c000940e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009411:	39 c2                	cmp    edx,eax
c0009413:	0f 8d 8b 00 00 00    	jge    c00094a4 <KeDatetimeToSeconds(datetime_t)+0x280>
c0009419:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000941c:	83 e0 03             	and    eax,0x3
c000941f:	85 c0                	test   eax,eax
c0009421:	75 6b                	jne    c000948e <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009423:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009426:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000942b:	f7 e9                	imul   ecx
c000942d:	c1 fa 05             	sar    edx,0x5
c0009430:	89 c8                	mov    eax,ecx
c0009432:	c1 f8 1f             	sar    eax,0x1f
c0009435:	29 c2                	sub    edx,eax
c0009437:	89 d0                	mov    eax,edx
c0009439:	c1 e0 02             	shl    eax,0x2
c000943c:	01 d0                	add    eax,edx
c000943e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009445:	01 d0                	add    eax,edx
c0009447:	c1 e0 02             	shl    eax,0x2
c000944a:	29 c1                	sub    ecx,eax
c000944c:	89 ca                	mov    edx,ecx
c000944e:	85 d2                	test   edx,edx
c0009450:	75 35                	jne    c0009487 <KeDatetimeToSeconds(datetime_t)+0x263>
c0009452:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009455:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000945b:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009460:	f7 e9                	imul   ecx
c0009462:	c1 fa 07             	sar    edx,0x7
c0009465:	89 c8                	mov    eax,ecx
c0009467:	c1 f8 1f             	sar    eax,0x1f
c000946a:	29 c2                	sub    edx,eax
c000946c:	89 d0                	mov    eax,edx
c000946e:	c1 e0 02             	shl    eax,0x2
c0009471:	01 d0                	add    eax,edx
c0009473:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000947a:	01 d0                	add    eax,edx
c000947c:	c1 e0 04             	shl    eax,0x4
c000947f:	29 c1                	sub    ecx,eax
c0009481:	89 ca                	mov    edx,ecx
c0009483:	85 d2                	test   edx,edx
c0009485:	75 07                	jne    c000948e <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009487:	b8 6e 01 00 00       	mov    eax,0x16e
c000948c:	eb 05                	jmp    c0009493 <KeDatetimeToSeconds(datetime_t)+0x26f>
c000948e:	b8 6d 01 00 00       	mov    eax,0x16d
c0009493:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009496:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009499:	83 e8 01             	sub    eax,0x1
c000949c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000949f:	e9 63 ff ff ff       	jmp    c0009407 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c00094a4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094a7:	83 e0 03             	and    eax,0x3
c00094aa:	85 c0                	test   eax,eax
c00094ac:	75 6b                	jne    c0009519 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c00094ae:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094b1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094b6:	f7 e9                	imul   ecx
c00094b8:	c1 fa 05             	sar    edx,0x5
c00094bb:	89 c8                	mov    eax,ecx
c00094bd:	c1 f8 1f             	sar    eax,0x1f
c00094c0:	29 c2                	sub    edx,eax
c00094c2:	89 d0                	mov    eax,edx
c00094c4:	c1 e0 02             	shl    eax,0x2
c00094c7:	01 d0                	add    eax,edx
c00094c9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094d0:	01 d0                	add    eax,edx
c00094d2:	c1 e0 02             	shl    eax,0x2
c00094d5:	29 c1                	sub    ecx,eax
c00094d7:	89 ca                	mov    edx,ecx
c00094d9:	85 d2                	test   edx,edx
c00094db:	75 35                	jne    c0009512 <KeDatetimeToSeconds(datetime_t)+0x2ee>
c00094dd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094e0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00094e6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094eb:	f7 e9                	imul   ecx
c00094ed:	c1 fa 07             	sar    edx,0x7
c00094f0:	89 c8                	mov    eax,ecx
c00094f2:	c1 f8 1f             	sar    eax,0x1f
c00094f5:	29 c2                	sub    edx,eax
c00094f7:	89 d0                	mov    eax,edx
c00094f9:	c1 e0 02             	shl    eax,0x2
c00094fc:	01 d0                	add    eax,edx
c00094fe:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009505:	01 d0                	add    eax,edx
c0009507:	c1 e0 04             	shl    eax,0x4
c000950a:	29 c1                	sub    ecx,eax
c000950c:	89 ca                	mov    edx,ecx
c000950e:	85 d2                	test   edx,edx
c0009510:	75 07                	jne    c0009519 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009512:	b8 6e 01 00 00       	mov    eax,0x16e
c0009517:	eb 05                	jmp    c000951e <KeDatetimeToSeconds(datetime_t)+0x2fa>
c0009519:	b8 6d 01 00 00       	mov    eax,0x16d
c000951e:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009521:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009524:	89 c2                	mov    edx,eax
c0009526:	c1 fa 1f             	sar    edx,0x1f
c0009529:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000952f:	6b c8 00             	imul   ecx,eax,0x0
c0009532:	01 d9                	add    ecx,ebx
c0009534:	bb 80 51 01 00       	mov    ebx,0x15180
c0009539:	f7 e3                	mul    ebx
c000953b:	01 d1                	add    ecx,edx
c000953d:	89 ca                	mov    edx,ecx
c000953f:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009542:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009545:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009548:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000954b:	83 c4 24             	add    esp,0x24
c000954e:	5b                   	pop    ebx
c000954f:	5d                   	pop    ebp
c0009550:	c3                   	ret    
c0009551:	90                   	nop

c0009552 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009552:	55                   	push   ebp
c0009553:	89 e5                	mov    ebp,esp
c0009555:	56                   	push   esi
c0009556:	53                   	push   ebx
c0009557:	83 ec 20             	sub    esp,0x20
c000955a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c000955d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009560:	e8 bf fc ff ff       	call   c0009224 <KeDatetimeToSeconds(datetime_t)>
c0009565:	83 c4 08             	add    esp,0x8
c0009568:	89 c3                	mov    ebx,eax
c000956a:	89 d6                	mov    esi,edx
c000956c:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c0009571:	0f b6 d0             	movzx  edx,al
c0009574:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0009579:	01 d0                	add    eax,edx
c000957b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009581:	89 c2                	mov    edx,eax
c0009583:	c1 fa 1f             	sar    edx,0x1f
c0009586:	29 c3                	sub    ebx,eax
c0009588:	19 d6                	sbb    esi,edx
c000958a:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c000958f:	0f b6 c0             	movzx  eax,al
c0009592:	85 c0                	test   eax,eax
c0009594:	74 0c                	je     c00095a2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c0009596:	b8 08 07 00 00       	mov    eax,0x708
c000959b:	ba 00 00 00 00       	mov    edx,0x0
c00095a0:	eb 0a                	jmp    c00095ac <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c00095a2:	b8 00 00 00 00       	mov    eax,0x0
c00095a7:	ba 00 00 00 00       	mov    edx,0x0
c00095ac:	29 c3                	sub    ebx,eax
c00095ae:	19 d6                	sbb    esi,edx
c00095b0:	89 d8                	mov    eax,ebx
c00095b2:	89 f2                	mov    edx,esi
c00095b4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095b7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095bd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095c0:	89 d0                	mov    eax,edx
c00095c2:	31 d2                	xor    edx,edx
c00095c4:	89 c3                	mov    ebx,eax
c00095c6:	89 d6                	mov    esi,edx
c00095c8:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00095cb:	80 e5 ff             	and    ch,0xff
c00095ce:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00095d1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00095d4:	83 e1 00             	and    ecx,0x0
c00095d7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00095da:	83 ec 0c             	sub    esp,0xc
c00095dd:	56                   	push   esi
c00095de:	53                   	push   ebx
c00095df:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095e2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00095e5:	68 ae 39 02 c0       	push   0xc00239ae
c00095ea:	e8 77 d9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00095ef:	83 c4 20             	add    esp,0x20
c00095f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00095f7:	83 c0 2c             	add    eax,0x2c
c00095fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00095fc:	83 ec 04             	sub    esp,0x4
c00095ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009602:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009605:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009608:	ff d0                	call   eax
c000960a:	83 c4 10             	add    esp,0x10
c000960d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009610:	5b                   	pop    ebx
c0009611:	5e                   	pop    esi
c0009612:	5d                   	pop    ebp
c0009613:	c3                   	ret    

c0009614 <KeSecondsToDatetime(unsigned long long)>:
c0009614:	55                   	push   ebp
c0009615:	89 e5                	mov    ebp,esp
c0009617:	83 ec 48             	sub    esp,0x48
c000961a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000961d:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009620:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009623:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009626:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009629:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000962c:	6a 00                	push   0x0
c000962e:	68 80 51 01 00       	push   0x15180
c0009633:	52                   	push   edx
c0009634:	50                   	push   eax
c0009635:	e8 fa 87 01 00       	call   c0021e34 <__udivdi3>
c000963a:	83 c4 10             	add    esp,0x10
c000963d:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009642:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009645:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009648:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000964b:	6a 00                	push   0x0
c000964d:	68 80 51 01 00       	push   0x15180
c0009652:	52                   	push   edx
c0009653:	50                   	push   eax
c0009654:	e8 db 88 01 00       	call   c0021f34 <__umoddi3>
c0009659:	83 c4 10             	add    esp,0x10
c000965c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000965f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009663:	79 0b                	jns    c0009670 <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009665:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000966c:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009670:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009673:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009678:	89 c8                	mov    eax,ecx
c000967a:	f7 ea                	imul   edx
c000967c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000967f:	c1 f8 0b             	sar    eax,0xb
c0009682:	89 c2                	mov    edx,eax
c0009684:	89 c8                	mov    eax,ecx
c0009686:	c1 f8 1f             	sar    eax,0x1f
c0009689:	29 c2                	sub    edx,eax
c000968b:	89 d0                	mov    eax,edx
c000968d:	88 c2                	mov    dl,al
c000968f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009692:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009695:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009698:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000969d:	89 c8                	mov    eax,ecx
c000969f:	f7 ea                	imul   edx
c00096a1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096a4:	c1 f8 0b             	sar    eax,0xb
c00096a7:	89 c2                	mov    edx,eax
c00096a9:	89 c8                	mov    eax,ecx
c00096ab:	c1 f8 1f             	sar    eax,0x1f
c00096ae:	29 c2                	sub    edx,eax
c00096b0:	89 d0                	mov    eax,edx
c00096b2:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00096b8:	29 c1                	sub    ecx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096bf:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096c2:	ba 89 88 88 88       	mov    edx,0x88888889
c00096c7:	89 c8                	mov    eax,ecx
c00096c9:	f7 ea                	imul   edx
c00096cb:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096ce:	c1 f8 05             	sar    eax,0x5
c00096d1:	89 c2                	mov    edx,eax
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	c1 f8 1f             	sar    eax,0x1f
c00096d8:	29 c2                	sub    edx,eax
c00096da:	89 d0                	mov    eax,edx
c00096dc:	88 c2                	mov    dl,al
c00096de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096e1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00096e4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096e7:	ba 89 88 88 88       	mov    edx,0x88888889
c00096ec:	89 c8                	mov    eax,ecx
c00096ee:	f7 ea                	imul   edx
c00096f0:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096f3:	c1 f8 05             	sar    eax,0x5
c00096f6:	89 c2                	mov    edx,eax
c00096f8:	89 c8                	mov    eax,ecx
c00096fa:	c1 f8 1f             	sar    eax,0x1f
c00096fd:	29 c2                	sub    edx,eax
c00096ff:	89 d0                	mov    eax,edx
c0009701:	c1 e0 04             	shl    eax,0x4
c0009704:	29 d0                	sub    eax,edx
c0009706:	c1 e0 02             	shl    eax,0x2
c0009709:	29 c1                	sub    ecx,eax
c000970b:	89 ca                	mov    edx,ecx
c000970d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009710:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009713:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009717:	79 20                	jns    c0009739 <KeSecondsToDatetime(unsigned long long)+0x125>
c0009719:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000971c:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009722:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009727:	89 c8                	mov    eax,ecx
c0009729:	f7 ea                	imul   edx
c000972b:	c1 fa 0f             	sar    edx,0xf
c000972e:	89 c8                	mov    eax,ecx
c0009730:	c1 f8 1f             	sar    eax,0x1f
c0009733:	29 c2                	sub    edx,eax
c0009735:	89 d0                	mov    eax,edx
c0009737:	eb 18                	jmp    c0009751 <KeSecondsToDatetime(unsigned long long)+0x13d>
c0009739:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000973c:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009741:	89 c8                	mov    eax,ecx
c0009743:	f7 ea                	imul   edx
c0009745:	c1 fa 0f             	sar    edx,0xf
c0009748:	89 c8                	mov    eax,ecx
c000974a:	c1 f8 1f             	sar    eax,0x1f
c000974d:	29 c2                	sub    edx,eax
c000974f:	89 d0                	mov    eax,edx
c0009751:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009754:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009757:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c000975d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009760:	01 d0                	add    eax,edx
c0009762:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009765:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009768:	c1 e8 02             	shr    eax,0x2
c000976b:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009770:	f7 e2                	mul    edx
c0009772:	c1 ea 07             	shr    edx,0x7
c0009775:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009778:	29 d0                	sub    eax,edx
c000977a:	89 c1                	mov    ecx,eax
c000977c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000977f:	c1 e8 02             	shr    eax,0x2
c0009782:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c0009787:	f7 e2                	mul    edx
c0009789:	89 d0                	mov    eax,edx
c000978b:	c1 e8 0b             	shr    eax,0xb
c000978e:	01 c1                	add    ecx,eax
c0009790:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009793:	c1 e8 04             	shr    eax,0x4
c0009796:	ba 41 d6 72 00       	mov    edx,0x72d641
c000979b:	f7 e2                	mul    edx
c000979d:	89 d0                	mov    eax,edx
c000979f:	c1 e8 04             	shr    eax,0x4
c00097a2:	29 c1                	sub    ecx,eax
c00097a4:	ba 61 f3 19 67       	mov    edx,0x6719f361
c00097a9:	89 c8                	mov    eax,ecx
c00097ab:	f7 e2                	mul    edx
c00097ad:	89 c8                	mov    eax,ecx
c00097af:	29 d0                	sub    eax,edx
c00097b1:	d1 e8                	shr    eax,1
c00097b3:	01 d0                	add    eax,edx
c00097b5:	c1 e8 08             	shr    eax,0x8
c00097b8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00097bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097be:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00097c3:	f7 e2                	mul    edx
c00097c5:	89 d1                	mov    ecx,edx
c00097c7:	c1 e9 05             	shr    ecx,0x5
c00097ca:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00097cd:	89 d0                	mov    eax,edx
c00097cf:	c1 e0 03             	shl    eax,0x3
c00097d2:	01 d0                	add    eax,edx
c00097d4:	c1 e0 03             	shl    eax,0x3
c00097d7:	01 d0                	add    eax,edx
c00097d9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097e0:	01 c2                	add    edx,eax
c00097e2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097e5:	c1 e8 02             	shr    eax,0x2
c00097e8:	01 d0                	add    eax,edx
c00097ea:	29 c1                	sub    ecx,eax
c00097ec:	89 ca                	mov    edx,ecx
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	01 d0                	add    eax,edx
c00097f3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00097f6:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00097f9:	89 d0                	mov    eax,edx
c00097fb:	c1 e0 02             	shl    eax,0x2
c00097fe:	01 d0                	add    eax,edx
c0009800:	83 c0 02             	add    eax,0x2
c0009803:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009808:	f7 e2                	mul    edx
c000980a:	89 d0                	mov    eax,edx
c000980c:	c1 e8 07             	shr    eax,0x7
c000980f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009812:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009815:	89 d0                	mov    eax,edx
c0009817:	c1 e0 03             	shl    eax,0x3
c000981a:	01 d0                	add    eax,edx
c000981c:	89 c2                	mov    edx,eax
c000981e:	c1 e2 04             	shl    edx,0x4
c0009821:	01 d0                	add    eax,edx
c0009823:	83 c0 02             	add    eax,0x2
c0009826:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000982b:	f7 e2                	mul    edx
c000982d:	c1 ea 02             	shr    edx,0x2
c0009830:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009833:	29 d0                	sub    eax,edx
c0009835:	83 c0 01             	add    eax,0x1
c0009838:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000983b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000983f:	77 07                	ja     c0009848 <KeSecondsToDatetime(unsigned long long)+0x234>
c0009841:	b8 02 00 00 00       	mov    eax,0x2
c0009846:	eb 05                	jmp    c000984d <KeSecondsToDatetime(unsigned long long)+0x239>
c0009848:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c000984d:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c0009850:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009853:	89 d0                	mov    eax,edx
c0009855:	c1 e0 02             	shl    eax,0x2
c0009858:	01 d0                	add    eax,edx
c000985a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009861:	01 d0                	add    eax,edx
c0009863:	c1 e0 04             	shl    eax,0x4
c0009866:	89 c2                	mov    edx,eax
c0009868:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000986b:	01 c2                	add    edx,eax
c000986d:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009871:	0f 96 c0             	setbe  al
c0009874:	0f b6 c0             	movzx  eax,al
c0009877:	01 d0                	add    eax,edx
c0009879:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c000987c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000987f:	89 c2                	mov    edx,eax
c0009881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009884:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0009888:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000988b:	83 c0 01             	add    eax,0x1
c000988e:	88 c2                	mov    dl,al
c0009890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009893:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009896:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0009899:	88 c2                	mov    dl,al
c000989b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000989e:	88 10                	mov    BYTE PTR [eax],dl
c00098a0:	90                   	nop
c00098a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a4:	c9                   	leave  
c00098a5:	c2 04 00             	ret    0x4

c00098a8 <Clock::timeInDatetimeLocal()>:
c00098a8:	55                   	push   ebp
c00098a9:	89 e5                	mov    ebp,esp
c00098ab:	83 ec 08             	sub    esp,0x8
c00098ae:	83 ec 0c             	sub    esp,0xc
c00098b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00098b4:	e8 81 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c00098b9:	83 c4 10             	add    esp,0x10
c00098bc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00098bf:	83 ec 04             	sub    esp,0x4
c00098c2:	52                   	push   edx
c00098c3:	50                   	push   eax
c00098c4:	51                   	push   ecx
c00098c5:	e8 4a fd ff ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c00098ca:	83 c4 0c             	add    esp,0xc
c00098cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d0:	c9                   	leave  
c00098d1:	c2 04 00             	ret    0x4

c00098d4 <Device::hibernate()>:
c00098d4:	c3                   	ret    
c00098d5:	90                   	nop

c00098d6 <Device::wake()>:
c00098d6:	c3                   	ret    
c00098d7:	90                   	nop

c00098d8 <Device::detect()>:
c00098d8:	c3                   	ret    
c00098d9:	90                   	nop

c00098da <Device::disableLegacy()>:
c00098da:	c3                   	ret    
c00098db:	90                   	nop

c00098dc <Device::powerSaving(PowerSavingLevel)>:
c00098dc:	c3                   	ret    
c00098dd:	90                   	nop

c00098de <DriverlessDevice::close(int, int, void*)>:
c00098de:	31 c0                	xor    eax,eax
c00098e0:	c3                   	ret    
c00098e1:	90                   	nop

c00098e2 <DriverlessDevice::detect()>:
c00098e2:	c3                   	ret    
c00098e3:	90                   	nop

c00098e4 <DriverlessDevice::open(int, int, void*)>:
c00098e4:	83 ec 18             	sub    esp,0x18
c00098e7:	68 2c 3a 02 c0       	push   0xc0023a2c
c00098ec:	e8 cb 61 00 00       	call   c000fabc <KePanic(char const*)>
c00098f1:	83 c8 ff             	or     eax,0xffffffff
c00098f4:	83 c4 1c             	add    esp,0x1c
c00098f7:	c3                   	ret    

c00098f8 <Device::~Device()>:
c00098f8:	ba d0 3a 02 c0       	mov    edx,0xc0023ad0
c00098fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009901:	89 10                	mov    DWORD PTR [eax],edx
c0009903:	90                   	nop
c0009904:	c3                   	ret    
c0009905:	90                   	nop

c0009906 <Device::~Device()>:
c0009906:	83 ec 0c             	sub    esp,0xc
c0009909:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000990d:	e8 e6 ff ff ff       	call   c00098f8 <Device::~Device()>
c0009912:	83 c4 04             	add    esp,0x4
c0009915:	83 ec 08             	sub    esp,0x8
c0009918:	68 58 01 00 00       	push   0x158
c000991d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009921:	e8 4a 39 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c0009926:	83 c4 10             	add    esp,0x10
c0009929:	83 c4 0c             	add    esp,0xc
c000992c:	c3                   	ret    
c000992d:	90                   	nop

c000992e <Device::findAndLoadDriver()>:
c000992e:	c7 44 24 04 4a 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023a4a
c0009936:	e9 2b d6 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000993b:	90                   	nop

c000993c <Device::preOpenPCI(PCIDeviceInfo)>:
c000993c:	57                   	push   edi
c000993d:	b9 09 00 00 00       	mov    ecx,0x9
c0009942:	56                   	push   esi
c0009943:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009947:	8d 74 24 10          	lea    esi,[esp+0x10]
c000994b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0009955:	81 c7 18 01 00 00    	add    edi,0x118
c000995b:	fc                   	cld    
c000995c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000995e:	5e                   	pop    esi
c000995f:	5f                   	pop    edi
c0009960:	c3                   	ret    
c0009961:	90                   	nop

c0009962 <Device::preOpenACPI(void*, char*, char*)>:
c0009962:	57                   	push   edi
c0009963:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009968:	56                   	push   esi
c0009969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000996d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009971:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009975:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000997f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009985:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000998b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000998d:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009993:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009997:	b9 0e 00 00 00       	mov    ecx,0xe
c000999c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000999e:	5e                   	pop    esi
c000999f:	5f                   	pop    edi
c00099a0:	c3                   	ret    
c00099a1:	90                   	nop

c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00099a2:	53                   	push   ebx
c00099a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00099af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00099b3:	0f b6 c0             	movzx  eax,al
c00099b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099be:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00099c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099c6:	5b                   	pop    ebx
c00099c7:	e9 6b 15 01 00       	jmp    c001af37 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c00099cc <Device::getParent()>:
c00099cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099d0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00099d6:	c3                   	ret    
c00099d7:	90                   	nop

c00099d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00099d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099e0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00099e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099e9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099f1:	e9 b2 16 01 00       	jmp    c001b0a8 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c00099f6 <Device::addChild(Device*)>:
c00099f6:	53                   	push   ebx
c00099f7:	83 ec 08             	sub    esp,0x8
c00099fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a02:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a08:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a0e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a10:	85 d2                	test   edx,edx
c0009a12:	74 04                	je     c0009a18 <Device::addChild(Device*)+0x22>
c0009a14:	89 d3                	mov    ebx,edx
c0009a16:	eb f6                	jmp    c0009a0e <Device::addChild(Device*)+0x18>
c0009a18:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a1b:	83 ec 0c             	sub    esp,0xc
c0009a1e:	6a 08                	push   0x8
c0009a20:	e8 43 5c 00 00       	call   c000f668 <malloc>
c0009a25:	89 03                	mov    DWORD PTR [ebx],eax
c0009a27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a34:	83 c4 18             	add    esp,0x18
c0009a37:	5b                   	pop    ebx
c0009a38:	c3                   	ret    
c0009a39:	90                   	nop

c0009a3a <Device::removeAllChildren()>:
c0009a3a:	56                   	push   esi
c0009a3b:	53                   	push   ebx
c0009a3c:	52                   	push   edx
c0009a3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a41:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009a47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a4a:	74 17                	je     c0009a63 <Device::removeAllChildren()+0x29>
c0009a4c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009a4f:	85 c0                	test   eax,eax
c0009a51:	74 0c                	je     c0009a5f <Device::removeAllChildren()+0x25>
c0009a53:	8b 10                	mov    edx,DWORD PTR [eax]
c0009a55:	83 ec 0c             	sub    esp,0xc
c0009a58:	50                   	push   eax
c0009a59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a5c:	83 c4 10             	add    esp,0x10
c0009a5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a61:	eb e4                	jmp    c0009a47 <Device::removeAllChildren()+0xd>
c0009a63:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a7c:	58                   	pop    eax
c0009a7d:	5b                   	pop    ebx
c0009a7e:	5e                   	pop    esi
c0009a7f:	c3                   	ret    

c0009a80 <Device::hibernateAll()>:
c0009a80:	53                   	push   ebx
c0009a81:	83 ec 14             	sub    esp,0x14
c0009a84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a8a:	53                   	push   ebx
c0009a8b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a94:	83 c4 10             	add    esp,0x10
c0009a97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a9a:	74 0f                	je     c0009aab <Device::hibernateAll()+0x2b>
c0009a9c:	83 ec 0c             	sub    esp,0xc
c0009a9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aa2:	e8 d9 ff ff ff       	call   c0009a80 <Device::hibernateAll()>
c0009aa7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009aa9:	eb e9                	jmp    c0009a94 <Device::hibernateAll()+0x14>
c0009aab:	83 c4 08             	add    esp,0x8
c0009aae:	5b                   	pop    ebx
c0009aaf:	c3                   	ret    

c0009ab0 <Device::wakeAll()>:
c0009ab0:	53                   	push   ebx
c0009ab1:	83 ec 14             	sub    esp,0x14
c0009ab4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aba:	53                   	push   ebx
c0009abb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009abe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ac4:	83 c4 10             	add    esp,0x10
c0009ac7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aca:	74 0f                	je     c0009adb <Device::wakeAll()+0x2b>
c0009acc:	83 ec 0c             	sub    esp,0xc
c0009acf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ad2:	e8 d9 ff ff ff       	call   c0009ab0 <Device::wakeAll()>
c0009ad7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ad9:	eb e9                	jmp    c0009ac4 <Device::wakeAll()+0x14>
c0009adb:	83 c4 08             	add    esp,0x8
c0009ade:	5b                   	pop    ebx
c0009adf:	c3                   	ret    

c0009ae0 <Device::detectAll()>:
c0009ae0:	53                   	push   ebx
c0009ae1:	83 ec 14             	sub    esp,0x14
c0009ae4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aea:	53                   	push   ebx
c0009aeb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009aee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009afa:	74 0f                	je     c0009b0b <Device::detectAll()+0x2b>
c0009afc:	83 ec 0c             	sub    esp,0xc
c0009aff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b02:	e8 d9 ff ff ff       	call   c0009ae0 <Device::detectAll()>
c0009b07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b09:	eb e9                	jmp    c0009af4 <Device::detectAll()+0x14>
c0009b0b:	83 c4 08             	add    esp,0x8
c0009b0e:	5b                   	pop    ebx
c0009b0f:	c3                   	ret    

c0009b10 <Device::disableLegacyAll()>:
c0009b10:	c3                   	ret    
c0009b11:	90                   	nop

c0009b12 <Device::loadDriversForAll()>:
c0009b12:	c3                   	ret    
c0009b13:	90                   	nop

c0009b14 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b14:	56                   	push   esi
c0009b15:	53                   	push   ebx
c0009b16:	83 ec 0c             	sub    esp,0xc
c0009b19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b23:	56                   	push   esi
c0009b24:	53                   	push   ebx
c0009b25:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b2e:	83 c4 10             	add    esp,0x10
c0009b31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b34:	74 0f                	je     c0009b45 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b36:	52                   	push   edx
c0009b37:	52                   	push   edx
c0009b38:	56                   	push   esi
c0009b39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b3c:	e8 d3 ff ff ff       	call   c0009b14 <Device::powerSavingAll(PowerSavingLevel)>
c0009b41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b43:	eb e9                	jmp    c0009b2e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009b45:	58                   	pop    eax
c0009b46:	5b                   	pop    ebx
c0009b47:	5e                   	pop    esi
c0009b48:	c3                   	ret    
c0009b49:	90                   	nop

c0009b4a <Device::setName(char const*)>:
c0009b4a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009b52:	e9 f9 6a ff ff       	jmp    c0000650 <strcpy>
c0009b57:	90                   	nop

c0009b58 <Device::Device(char const*)>:
c0009b58:	83 ec 1c             	sub    esp,0x1c
c0009b5b:	ba d0 3a 02 c0       	mov    edx,0xc0023ad0
c0009b60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b64:	89 10                	mov    DWORD PTR [eax],edx
c0009b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b6a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b78:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b86:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b94:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009b9e:	83 ec 08             	sub    esp,0x8
c0009ba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ba9:	e8 9c ff ff ff       	call   c0009b4a <Device::setName(char const*)>
c0009bae:	83 c4 10             	add    esp,0x10
c0009bb1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009bb9:	83 ec 0c             	sub    esp,0xc
c0009bbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009bc0:	e8 a3 5a 00 00       	call   c000f668 <malloc>
c0009bc5:	83 c4 10             	add    esp,0x10
c0009bc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009bd5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009bd9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009be9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c04:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c0f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c1a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c28:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c36:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c44:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009c4e:	90                   	nop
c0009c4f:	83 c4 1c             	add    esp,0x1c
c0009c52:	c3                   	ret    
c0009c53:	90                   	nop

c0009c54 <Device::getName()>:
c0009c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c58:	05 d0 00 00 00       	add    eax,0xd0
c0009c5d:	c3                   	ret    

c0009c5e <Device::closeAll()>:
c0009c5e:	53                   	push   ebx
c0009c5f:	83 ec 08             	sub    esp,0x8
c0009c62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c66:	53                   	push   ebx
c0009c67:	e8 e8 ff ff ff       	call   c0009c54 <Device::getName()>
c0009c6c:	52                   	push   edx
c0009c6d:	50                   	push   eax
c0009c6e:	68 84 3a 02 c0       	push   0xc0023a84
c0009c73:	e8 ee d2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009c78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c7a:	6a 00                	push   0x0
c0009c7c:	6a 00                	push   0x0
c0009c7e:	6a 00                	push   0x0
c0009c80:	53                   	push   ebx
c0009c81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c84:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c8a:	83 c4 20             	add    esp,0x20
c0009c8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c90:	74 12                	je     c0009ca4 <Device::closeAll()+0x46>
c0009c92:	83 ec 0c             	sub    esp,0xc
c0009c95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c98:	e8 c1 ff ff ff       	call   c0009c5e <Device::closeAll()>
c0009c9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009c9f:	83 c4 10             	add    esp,0x10
c0009ca2:	eb e9                	jmp    c0009c8d <Device::closeAll()+0x2f>
c0009ca4:	83 c4 08             	add    esp,0x8
c0009ca7:	5b                   	pop    ebx
c0009ca8:	c3                   	ret    
c0009ca9:	90                   	nop

c0009caa <DriverlessDevice::DriverlessDevice(char const*)>:
c0009caa:	83 ec 0c             	sub    esp,0xc
c0009cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb1:	83 ec 08             	sub    esp,0x8
c0009cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cb8:	50                   	push   eax
c0009cb9:	e8 9a fe ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009cbe:	83 c4 10             	add    esp,0x10
c0009cc1:	ba fc 3a 02 c0       	mov    edx,0xc0023afc
c0009cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cca:	89 10                	mov    DWORD PTR [eax],edx
c0009ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009cda:	90                   	nop
c0009cdb:	83 c4 0c             	add    esp,0xc
c0009cde:	c3                   	ret    
c0009cdf:	90                   	nop

c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009ce0:	57                   	push   edi
c0009ce1:	56                   	push   esi
c0009ce2:	53                   	push   ebx
c0009ce3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009ce7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009ceb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009cef:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009cf5:	75 0c                	jne    c0009d03 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009cf7:	52                   	push   edx
c0009cf8:	52                   	push   edx
c0009cf9:	53                   	push   ebx
c0009cfa:	56                   	push   esi
c0009cfb:	e8 ac 83 01 00       	call   c00220ac <LinkedList<Device>::addElement(Device*)>
c0009d00:	83 c4 10             	add    esp,0x10
c0009d03:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d0c:	74 12                	je     c0009d20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d0e:	50                   	push   eax
c0009d0f:	57                   	push   edi
c0009d10:	56                   	push   esi
c0009d11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d14:	e8 c7 ff ff ff       	call   c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	eb e9                	jmp    c0009d09 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d20:	5b                   	pop    ebx
c0009d21:	5e                   	pop    esi
c0009d22:	5f                   	pop    edi
c0009d23:	c3                   	ret    

c0009d24 <getDevicesOfType(DeviceType)>:
c0009d24:	53                   	push   ebx
c0009d25:	83 ec 14             	sub    esp,0x14
c0009d28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d2c:	53                   	push   ebx
c0009d2d:	e8 56 84 01 00       	call   c0022188 <LinkedList<Device>::LinkedList()>
c0009d32:	83 c4 0c             	add    esp,0xc
c0009d35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d39:	53                   	push   ebx
c0009d3a:	ff 35 08 d1 02 c0    	push   DWORD PTR ds:0xc002d108
c0009d40:	e8 9b ff ff ff       	call   c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d45:	83 c4 18             	add    esp,0x18
c0009d48:	89 d8                	mov    eax,ebx
c0009d4a:	5b                   	pop    ebx
c0009d4b:	c2 04 00             	ret    0x4
c0009d4e:	66 90                	xchg   ax,ax

c0009d50 <HardDiskController::HardDiskController(char const*)>:
c0009d50:	83 ec 0c             	sub    esp,0xc
c0009d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d57:	83 ec 08             	sub    esp,0x8
c0009d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d5e:	50                   	push   eax
c0009d5f:	e8 f4 fd ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009d64:	83 c4 10             	add    esp,0x10
c0009d67:	ba 28 3b 02 c0       	mov    edx,0xc0023b28
c0009d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d70:	89 10                	mov    DWORD PTR [eax],edx
c0009d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d76:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d80:	90                   	nop
c0009d81:	83 c4 0c             	add    esp,0xc
c0009d84:	c3                   	ret    
c0009d85:	90                   	nop
c0009d86:	66 90                	xchg   ax,ax

c0009d88 <HardDiskController::~HardDiskController()>:
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	ba 28 3b 02 c0       	mov    edx,0xc0023b28
c0009d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d94:	89 10                	mov    DWORD PTR [eax],edx
c0009d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9a:	83 ec 0c             	sub    esp,0xc
c0009d9d:	50                   	push   eax
c0009d9e:	e8 55 fb ff ff       	call   c00098f8 <Device::~Device()>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	90                   	nop
c0009da7:	83 c4 0c             	add    esp,0xc
c0009daa:	c3                   	ret    
c0009dab:	90                   	nop

c0009dac <HardDiskController::~HardDiskController()>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	83 ec 0c             	sub    esp,0xc
c0009db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009db6:	e8 cd ff ff ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0009dbb:	83 c4 10             	add    esp,0x10
c0009dbe:	83 ec 08             	sub    esp,0x8
c0009dc1:	68 58 01 00 00       	push   0x158
c0009dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dca:	e8 a1 34 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	83 c4 0c             	add    esp,0xc
c0009dd5:	c3                   	ret    

c0009dd6 <PhysicalDisk::eject()>:
c0009dd6:	83 c8 ff             	or     eax,0xffffffff
c0009dd9:	c3                   	ret    

c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009dda:	83 ec 0c             	sub    esp,0xc
c0009ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de1:	83 ec 08             	sub    esp,0x8
c0009de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009de8:	50                   	push   eax
c0009de9:	e8 6a fd ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009dee:	83 c4 10             	add    esp,0x10
c0009df1:	ba 54 3b 02 c0       	mov    edx,0xc0023b54
c0009df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dfa:	89 10                	mov    DWORD PTR [eax],edx
c0009dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e00:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e0b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e16:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e28:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e32:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e3c:	90                   	nop
c0009e3d:	83 c4 0c             	add    esp,0xc
c0009e40:	c3                   	ret    
c0009e41:	90                   	nop

c0009e42 <PhysicalDisk::startCache()>:
c0009e42:	56                   	push   esi
c0009e43:	53                   	push   ebx
c0009e44:	83 ec 10             	sub    esp,0x10
c0009e47:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e4b:	6a 44                	push   0x44
c0009e4d:	e8 16 58 00 00       	call   c000f668 <malloc>
c0009e52:	89 c6                	mov    esi,eax
c0009e54:	58                   	pop    eax
c0009e55:	5a                   	pop    edx
c0009e56:	53                   	push   ebx
c0009e57:	56                   	push   esi
c0009e58:	e8 b7 13 00 00       	call   c000b214 <VCache::VCache(PhysicalDisk*)>
c0009e5d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e63:	83 c4 14             	add    esp,0x14
c0009e66:	5b                   	pop    ebx
c0009e67:	5e                   	pop    esi
c0009e68:	c3                   	ret    
c0009e69:	90                   	nop

c0009e6a <PhysicalDisk::~PhysicalDisk()>:
c0009e6a:	83 ec 0c             	sub    esp,0xc
c0009e6d:	ba 54 3b 02 c0       	mov    edx,0xc0023b54
c0009e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e76:	89 10                	mov    DWORD PTR [eax],edx
c0009e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e7c:	83 ec 0c             	sub    esp,0xc
c0009e7f:	50                   	push   eax
c0009e80:	e8 73 fa ff ff       	call   c00098f8 <Device::~Device()>
c0009e85:	83 c4 10             	add    esp,0x10
c0009e88:	90                   	nop
c0009e89:	83 c4 0c             	add    esp,0xc
c0009e8c:	c3                   	ret    
c0009e8d:	90                   	nop

c0009e8e <PhysicalDisk::~PhysicalDisk()>:
c0009e8e:	83 ec 0c             	sub    esp,0xc
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e98:	e8 cd ff ff ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c0009e9d:	83 c4 10             	add    esp,0x10
c0009ea0:	83 ec 08             	sub    esp,0x8
c0009ea3:	68 6c 01 00 00       	push   0x16c
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	e8 bf 33 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c0009eb1:	83 c4 10             	add    esp,0x10
c0009eb4:	83 c4 0c             	add    esp,0xc
c0009eb7:	c3                   	ret    

c0009eb8 <startGUI(void*)>:
c0009eb8:	55                   	push   ebp
c0009eb9:	89 e5                	mov    ebp,esp
c0009ebb:	83 ec 08             	sub    esp,0x8
c0009ebe:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0009ec6:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0009ecb:	85 c0                	test   eax,eax
c0009ecd:	75 01                	jne    c0009ed0 <startGUI(void*)+0x18>
c0009ecf:	fb                   	sti    
c0009ed0:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0009ed5:	83 ec 04             	sub    esp,0x4
c0009ed8:	6a 00                	push   0x0
c0009eda:	50                   	push   eax
c0009edb:	68 84 3b 02 c0       	push   0xc0023b84
c0009ee0:	e8 ce bd 00 00       	call   c0015cb3 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0009eed:	83 ec 04             	sub    esp,0x4
c0009ef0:	6a 00                	push   0x0
c0009ef2:	50                   	push   eax
c0009ef3:	68 9e 3b 02 c0       	push   0xc0023b9e
c0009ef8:	e8 b6 bd 00 00       	call   c0015cb3 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009efd:	83 c4 10             	add    esp,0x10
c0009f00:	eb fe                	jmp    c0009f00 <startGUI(void*)+0x48>

c0009f02 <startGUIVESA(void*)>:
c0009f02:	55                   	push   ebp
c0009f03:	89 e5                	mov    ebp,esp
c0009f05:	83 ec 08             	sub    esp,0x8
c0009f08:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0009f10:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0009f15:	85 c0                	test   eax,eax
c0009f17:	75 01                	jne    c0009f1a <startGUIVESA(void*)+0x18>
c0009f19:	fb                   	sti    
c0009f1a:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0009f1f:	83 ec 04             	sub    esp,0x4
c0009f22:	6a 00                	push   0x0
c0009f24:	50                   	push   eax
c0009f25:	68 bc 3b 02 c0       	push   0xc0023bbc
c0009f2a:	e8 84 bd 00 00       	call   c0015cb3 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009f2f:	83 c4 10             	add    esp,0x10
c0009f32:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0009f37:	83 ec 04             	sub    esp,0x4
c0009f3a:	6a 00                	push   0x0
c0009f3c:	50                   	push   eax
c0009f3d:	68 9e 3b 02 c0       	push   0xc0023b9e
c0009f42:	e8 6c bd 00 00       	call   c0015cb3 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009f47:	83 c4 10             	add    esp,0x10
c0009f4a:	eb fe                	jmp    c0009f4a <startGUIVESA(void*)+0x48>

c0009f4c <sendKeyToTerminal(unsigned char)>:
c0009f4c:	55                   	push   ebp
c0009f4d:	89 e5                	mov    ebp,esp
c0009f4f:	83 ec 28             	sub    esp,0x28
c0009f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f55:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f58:	a1 f4 d1 02 c0       	mov    eax,ds:0xc002d1f4
c0009f5d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f61:	83 ec 08             	sub    esp,0x8
c0009f64:	52                   	push   edx
c0009f65:	50                   	push   eax
c0009f66:	e8 d9 87 00 00       	call   c0012744 <VgaText::receiveKey(unsigned char)>
c0009f6b:	83 c4 10             	add    esp,0x10
c0009f6e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f72:	83 f8 0a             	cmp    eax,0xa
c0009f75:	74 16                	je     c0009f8d <sendKeyToTerminal(unsigned char)+0x41>
c0009f77:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f7b:	83 f8 03             	cmp    eax,0x3
c0009f7e:	74 0d                	je     c0009f8d <sendKeyToTerminal(unsigned char)+0x41>
c0009f80:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f84:	83 f8 1c             	cmp    eax,0x1c
c0009f87:	0f 85 92 00 00 00    	jne    c000a01f <sendKeyToTerminal(unsigned char)+0xd3>
c0009f8d:	fa                   	cli    
c0009f8e:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0009f93:	83 c0 01             	add    eax,0x1
c0009f96:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0009f9b:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0009fa0:	83 c0 01             	add    eax,0x1
c0009fa3:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0009fa8:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c0009fad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fb0:	c7 05 80 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c680,0x0
c0009fba:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009fbe:	74 1f                	je     c0009fdf <sendKeyToTerminal(unsigned char)+0x93>
c0009fc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009fc3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009fc6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009fc9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009fcc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fcf:	83 ec 0c             	sub    esp,0xc
c0009fd2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009fd5:	e8 b2 c9 00 00       	call   c001698c <unblockTask(ThreadControlBlock*)>
c0009fda:	83 c4 10             	add    esp,0x10
c0009fdd:	eb db                	jmp    c0009fba <sendKeyToTerminal(unsigned char)+0x6e>
c0009fdf:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0009fe4:	83 e8 01             	sub    eax,0x1
c0009fe7:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0009fec:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0009ff1:	85 c0                	test   eax,eax
c0009ff3:	75 18                	jne    c000a00d <sendKeyToTerminal(unsigned char)+0xc1>
c0009ff5:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c0009ffa:	85 c0                	test   eax,eax
c0009ffc:	74 0f                	je     c000a00d <sendKeyToTerminal(unsigned char)+0xc1>
c0009ffe:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c000a008:	e8 27 c6 00 00       	call   c0016634 <schedule()>
c000a00d:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000a015:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000a01a:	85 c0                	test   eax,eax
c000a01c:	75 01                	jne    c000a01f <sendKeyToTerminal(unsigned char)+0xd3>
c000a01e:	fb                   	sti    
c000a01f:	90                   	nop
c000a020:	c9                   	leave  
c000a021:	c3                   	ret    

c000a022 <sendKeyboardToken(KeyboardToken)>:
c000a022:	55                   	push   ebp
c000a023:	89 e5                	mov    ebp,esp
c000a025:	83 ec 18             	sub    esp,0x18
c000a028:	e8 0c 63 00 00       	call   c0010339 <KeUserIOReceived()>
c000a02d:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a033:	0f b7 c0             	movzx  eax,ax
c000a036:	83 f2 01             	xor    edx,0x1
c000a039:	88 90 a0 c6 02 c0    	mov    BYTE PTR [eax-0x3ffd3960],dl
c000a03f:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a044:	85 c0                	test   eax,eax
c000a046:	74 24                	je     c000a06c <sendKeyboardToken(KeyboardToken)+0x4a>
c000a048:	8b 15 88 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c688
c000a04e:	83 ec 04             	sub    esp,0x4
c000a051:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a056:	83 ec 08             	sub    esp,0x8
c000a059:	89 e0                	mov    eax,esp
c000a05b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a05e:	89 08                	mov    DWORD PTR [eax],ecx
c000a060:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a063:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a067:	ff d2                	call   edx
c000a069:	83 c4 10             	add    esp,0x10
c000a06c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a070:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a073:	0f b6 c0             	movzx  eax,al
c000a076:	85 c0                	test   eax,eax
c000a078:	0f 84 da 00 00 00    	je     c000a158 <sendKeyboardToken(KeyboardToken)+0x136>
c000a07e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a081:	0f b7 c0             	movzx  eax,ax
c000a084:	3d 18 03 00 00       	cmp    eax,0x318
c000a089:	75 06                	jne    c000a091 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a08b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a094:	0f b7 c0             	movzx  eax,ax
c000a097:	3d 19 03 00 00       	cmp    eax,0x319
c000a09c:	75 06                	jne    c000a0a4 <sendKeyboardToken(KeyboardToken)+0x82>
c000a09e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a0a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0a7:	0f b7 c0             	movzx  eax,ax
c000a0aa:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a0af:	75 06                	jne    c000a0b7 <sendKeyboardToken(KeyboardToken)+0x95>
c000a0b1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a0b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ba:	0f b7 c0             	movzx  eax,ax
c000a0bd:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a0c2:	75 06                	jne    c000a0ca <sendKeyboardToken(KeyboardToken)+0xa8>
c000a0c4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a0ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0cd:	0f b7 c0             	movzx  eax,ax
c000a0d0:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a0d5:	75 06                	jne    c000a0dd <sendKeyboardToken(KeyboardToken)+0xbb>
c000a0d7:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a0dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0e0:	0f b7 c0             	movzx  eax,ax
c000a0e3:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a0e8:	75 06                	jne    c000a0f0 <sendKeyboardToken(KeyboardToken)+0xce>
c000a0ea:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a0f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f3:	0f b7 c0             	movzx  eax,ax
c000a0f6:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a0fb:	75 06                	jne    c000a103 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a0fd:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a106:	0f b7 c0             	movzx  eax,ax
c000a109:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a10e:	75 06                	jne    c000a116 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a110:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a119:	0f b7 c0             	movzx  eax,ax
c000a11c:	3d 20 03 00 00       	cmp    eax,0x320
c000a121:	75 06                	jne    c000a129 <sendKeyboardToken(KeyboardToken)+0x107>
c000a123:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a12c:	0f b7 c0             	movzx  eax,ax
c000a12f:	3d 21 03 00 00       	cmp    eax,0x321
c000a134:	75 06                	jne    c000a13c <sendKeyboardToken(KeyboardToken)+0x11a>
c000a136:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a13c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a13f:	0f b7 c0             	movzx  eax,ax
c000a142:	3d 22 03 00 00       	cmp    eax,0x322
c000a147:	0f 85 f1 00 00 00    	jne    c000a23e <sendKeyboardToken(KeyboardToken)+0x21c>
c000a14d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a153:	e9 e6 00 00 00       	jmp    c000a23e <sendKeyboardToken(KeyboardToken)+0x21c>
c000a158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a15b:	0f b7 c0             	movzx  eax,ax
c000a15e:	3d 18 03 00 00       	cmp    eax,0x318
c000a163:	75 0a                	jne    c000a16f <sendKeyboardToken(KeyboardToken)+0x14d>
c000a165:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a16b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a172:	0f b7 c0             	movzx  eax,ax
c000a175:	3d 19 03 00 00       	cmp    eax,0x319
c000a17a:	75 0a                	jne    c000a186 <sendKeyboardToken(KeyboardToken)+0x164>
c000a17c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a182:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a189:	0f b7 c0             	movzx  eax,ax
c000a18c:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a191:	75 0a                	jne    c000a19d <sendKeyboardToken(KeyboardToken)+0x17b>
c000a193:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a199:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a19d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1a0:	0f b7 c0             	movzx  eax,ax
c000a1a3:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a1a8:	75 0a                	jne    c000a1b4 <sendKeyboardToken(KeyboardToken)+0x192>
c000a1aa:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a1b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1b7:	0f b7 c0             	movzx  eax,ax
c000a1ba:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a1bf:	75 0a                	jne    c000a1cb <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a1c1:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a1c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ce:	0f b7 c0             	movzx  eax,ax
c000a1d1:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a1d6:	75 0a                	jne    c000a1e2 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a1d8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a1de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1e5:	0f b7 c0             	movzx  eax,ax
c000a1e8:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a1ed:	75 0a                	jne    c000a1f9 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a1ef:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a1f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1fc:	0f b7 c0             	movzx  eax,ax
c000a1ff:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a204:	75 0a                	jne    c000a210 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a206:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a20c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a213:	0f b7 c0             	movzx  eax,ax
c000a216:	3d 20 03 00 00       	cmp    eax,0x320
c000a21b:	75 0a                	jne    c000a227 <sendKeyboardToken(KeyboardToken)+0x205>
c000a21d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a223:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a22a:	0f b7 c0             	movzx  eax,ax
c000a22d:	3d 21 03 00 00       	cmp    eax,0x321
c000a232:	75 0a                	jne    c000a23e <sendKeyboardToken(KeyboardToken)+0x21c>
c000a234:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a23a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a23e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a241:	0f b7 c0             	movzx  eax,ax
c000a244:	3d 00 02 00 00       	cmp    eax,0x200
c000a249:	75 2f                	jne    c000a27a <sendKeyboardToken(KeyboardToken)+0x258>
c000a24b:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a250:	83 f0 01             	xor    eax,0x1
c000a253:	0f b6 c0             	movzx  eax,al
c000a256:	85 c0                	test   eax,eax
c000a258:	74 20                	je     c000a27a <sendKeyboardToken(KeyboardToken)+0x258>
c000a25a:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000a25f:	6a 01                	push   0x1
c000a261:	6a 00                	push   0x0
c000a263:	68 b8 9e 00 c0       	push   0xc0009eb8
c000a268:	50                   	push   eax
c000a269:	e8 12 c1 00 00       	call   c0016380 <Process::createThread(void (*)(void*), void*, int)>
c000a26e:	83 c4 10             	add    esp,0x10
c000a271:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a278:	eb 3a                	jmp    c000a2b4 <sendKeyboardToken(KeyboardToken)+0x292>
c000a27a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a27d:	0f b7 c0             	movzx  eax,ax
c000a280:	3d 01 02 00 00       	cmp    eax,0x201
c000a285:	75 2d                	jne    c000a2b4 <sendKeyboardToken(KeyboardToken)+0x292>
c000a287:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a28c:	83 f0 01             	xor    eax,0x1
c000a28f:	0f b6 c0             	movzx  eax,al
c000a292:	85 c0                	test   eax,eax
c000a294:	74 1e                	je     c000a2b4 <sendKeyboardToken(KeyboardToken)+0x292>
c000a296:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000a29b:	6a 01                	push   0x1
c000a29d:	6a 00                	push   0x0
c000a29f:	68 02 9f 00 c0       	push   0xc0009f02
c000a2a4:	50                   	push   eax
c000a2a5:	e8 d6 c0 00 00       	call   c0016380 <Process::createThread(void (*)(void*), void*, int)>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a2b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2b7:	0f b7 c0             	movzx  eax,ax
c000a2ba:	3d 25 03 00 00       	cmp    eax,0x325
c000a2bf:	75 06                	jne    c000a2c7 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a2c1:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a2c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2ca:	0f b7 c0             	movzx  eax,ax
c000a2cd:	3d 24 03 00 00       	cmp    eax,0x324
c000a2d2:	75 06                	jne    c000a2da <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a2d4:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a2da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2dd:	0f b7 c0             	movzx  eax,ax
c000a2e0:	3d 23 03 00 00       	cmp    eax,0x323
c000a2e5:	75 06                	jne    c000a2ed <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a2e7:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a2ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2f0:	0f b7 c0             	movzx  eax,ax
c000a2f3:	3d 26 03 00 00       	cmp    eax,0x326
c000a2f8:	75 06                	jne    c000a300 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a2fa:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a303:	0f b7 c0             	movzx  eax,ax
c000a306:	3d 27 03 00 00       	cmp    eax,0x327
c000a30b:	75 06                	jne    c000a313 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a30d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a316:	0f b7 c0             	movzx  eax,ax
c000a319:	3d 22 03 00 00       	cmp    eax,0x322
c000a31e:	75 06                	jne    c000a326 <sendKeyboardToken(KeyboardToken)+0x304>
c000a320:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a326:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a32a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a32d:	83 f0 01             	xor    eax,0x1
c000a330:	0f b6 c0             	movzx  eax,al
c000a333:	85 c0                	test   eax,eax
c000a335:	74 7c                	je     c000a3b3 <sendKeyboardToken(KeyboardToken)+0x391>
c000a337:	a0 a1 c7 02 c0       	mov    al,ds:0xc002c7a1
c000a33c:	0f b6 c0             	movzx  eax,al
c000a33f:	85 c0                	test   eax,eax
c000a341:	74 43                	je     c000a386 <sendKeyboardToken(KeyboardToken)+0x364>
c000a343:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a347:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a34b:	85 c0                	test   eax,eax
c000a34d:	74 2b                	je     c000a37a <sendKeyboardToken(KeyboardToken)+0x358>
c000a34f:	8b 15 a4 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002caa4
c000a355:	89 d0                	mov    eax,edx
c000a357:	c1 e0 02             	shl    eax,0x2
c000a35a:	01 d0                	add    eax,edx
c000a35c:	d1 e0                	shl    eax,1
c000a35e:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a366:	0f b7 c0             	movzx  eax,ax
c000a369:	8d 50 d0             	lea    edx,[eax-0x30]
c000a36c:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a371:	01 d0                	add    eax,edx
c000a373:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a378:	eb 71                	jmp    c000a3eb <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a37a:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a384:	eb 65                	jmp    c000a3eb <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a386:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a38b:	85 c0                	test   eax,eax
c000a38d:	74 18                	je     c000a3a7 <sendKeyboardToken(KeyboardToken)+0x385>
c000a38f:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a394:	0f b6 c0             	movzx  eax,al
c000a397:	83 ec 0c             	sub    esp,0xc
c000a39a:	50                   	push   eax
c000a39b:	e8 ac fb ff ff       	call   c0009f4c <sendKeyToTerminal(unsigned char)>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3a7:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a3b1:	eb 38                	jmp    c000a3eb <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3b6:	0f b7 c0             	movzx  eax,ax
c000a3b9:	3d 01 01 00 00       	cmp    eax,0x101
c000a3be:	75 2b                	jne    c000a3eb <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3c0:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3c5:	85 c0                	test   eax,eax
c000a3c7:	74 18                	je     c000a3e1 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a3c9:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3ce:	0f b6 c0             	movzx  eax,al
c000a3d1:	83 ec 0c             	sub    esp,0xc
c000a3d4:	50                   	push   eax
c000a3d5:	e8 72 fb ff ff       	call   c0009f4c <sendKeyToTerminal(unsigned char)>
c000a3da:	83 c4 10             	add    esp,0x10
c000a3dd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3e1:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a3eb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a3ee:	83 f0 01             	xor    eax,0x1
c000a3f1:	0f b6 c0             	movzx  eax,al
c000a3f4:	85 c0                	test   eax,eax
c000a3f6:	74 5a                	je     c000a452 <sendKeyboardToken(KeyboardToken)+0x430>
c000a3f8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a3fb:	83 f0 01             	xor    eax,0x1
c000a3fe:	0f b6 c0             	movzx  eax,al
c000a401:	85 c0                	test   eax,eax
c000a403:	74 4d                	je     c000a452 <sendKeyboardToken(KeyboardToken)+0x430>
c000a405:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a40a:	83 f0 01             	xor    eax,0x1
c000a40d:	0f b6 c0             	movzx  eax,al
c000a410:	85 c0                	test   eax,eax
c000a412:	74 3e                	je     c000a452 <sendKeyboardToken(KeyboardToken)+0x430>
c000a414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a417:	0f b7 c0             	movzx  eax,ax
c000a41a:	83 f8 1f             	cmp    eax,0x1f
c000a41d:	76 0b                	jbe    c000a42a <sendKeyboardToken(KeyboardToken)+0x408>
c000a41f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a422:	0f b7 c0             	movzx  eax,ax
c000a425:	83 f8 7e             	cmp    eax,0x7e
c000a428:	76 16                	jbe    c000a440 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a42d:	0f b7 c0             	movzx  eax,ax
c000a430:	83 f8 0a             	cmp    eax,0xa
c000a433:	74 0b                	je     c000a440 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a438:	0f b7 c0             	movzx  eax,ax
c000a43b:	83 f8 08             	cmp    eax,0x8
c000a43e:	75 12                	jne    c000a452 <sendKeyboardToken(KeyboardToken)+0x430>
c000a440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a443:	0f b6 c0             	movzx  eax,al
c000a446:	83 ec 0c             	sub    esp,0xc
c000a449:	50                   	push   eax
c000a44a:	e8 fd fa ff ff       	call   c0009f4c <sendKeyToTerminal(unsigned char)>
c000a44f:	83 c4 10             	add    esp,0x10
c000a452:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a455:	83 f0 01             	xor    eax,0x1
c000a458:	0f b6 c0             	movzx  eax,al
c000a45b:	85 c0                	test   eax,eax
c000a45d:	74 5d                	je     c000a4bc <sendKeyboardToken(KeyboardToken)+0x49a>
c000a45f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a462:	83 f0 01             	xor    eax,0x1
c000a465:	0f b6 c0             	movzx  eax,al
c000a468:	85 c0                	test   eax,eax
c000a46a:	74 50                	je     c000a4bc <sendKeyboardToken(KeyboardToken)+0x49a>
c000a46c:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a471:	0f b6 c0             	movzx  eax,al
c000a474:	85 c0                	test   eax,eax
c000a476:	74 44                	je     c000a4bc <sendKeyboardToken(KeyboardToken)+0x49a>
c000a478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a47b:	0f b7 c0             	movzx  eax,ax
c000a47e:	83 f8 3f             	cmp    eax,0x3f
c000a481:	76 39                	jbe    c000a4bc <sendKeyboardToken(KeyboardToken)+0x49a>
c000a483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a486:	0f b7 c0             	movzx  eax,ax
c000a489:	83 f8 7f             	cmp    eax,0x7f
c000a48c:	77 2e                	ja     c000a4bc <sendKeyboardToken(KeyboardToken)+0x49a>
c000a48e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a491:	88 c2                	mov    dl,al
c000a493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a496:	0f b7 c0             	movzx  eax,ax
c000a499:	83 f8 5f             	cmp    eax,0x5f
c000a49c:	76 04                	jbe    c000a4a2 <sendKeyboardToken(KeyboardToken)+0x480>
c000a49e:	b0 20                	mov    al,0x20
c000a4a0:	eb 02                	jmp    c000a4a4 <sendKeyboardToken(KeyboardToken)+0x482>
c000a4a2:	b0 00                	mov    al,0x0
c000a4a4:	89 d1                	mov    ecx,edx
c000a4a6:	29 c1                	sub    ecx,eax
c000a4a8:	89 c8                	mov    eax,ecx
c000a4aa:	83 e8 40             	sub    eax,0x40
c000a4ad:	0f b6 c0             	movzx  eax,al
c000a4b0:	83 ec 0c             	sub    esp,0xc
c000a4b3:	50                   	push   eax
c000a4b4:	e8 93 fa ff ff       	call   c0009f4c <sendKeyToTerminal(unsigned char)>
c000a4b9:	83 c4 10             	add    esp,0x10
c000a4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4bf:	0f b7 c0             	movzx  eax,ax
c000a4c2:	3d 00 03 00 00       	cmp    eax,0x300
c000a4c7:	75 12                	jne    c000a4db <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4c9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4cc:	83 f0 01             	xor    eax,0x1
c000a4cf:	0f b6 c0             	movzx  eax,al
c000a4d2:	85 c0                	test   eax,eax
c000a4d4:	74 05                	je     c000a4db <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4d6:	e8 6e 79 00 00       	call   c0011e49 <doTerminalCycle()>
c000a4db:	90                   	nop
c000a4dc:	c9                   	leave  
c000a4dd:	c3                   	ret    

c000a4de <clearInternalKeybuffer(VgaText*)>:
c000a4de:	55                   	push   ebp
c000a4df:	89 e5                	mov    ebp,esp
c000a4e1:	83 ec 08             	sub    esp,0x8
c000a4e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4e7:	05 02 01 00 00       	add    eax,0x102
c000a4ec:	83 ec 0c             	sub    esp,0xc
c000a4ef:	50                   	push   eax
c000a4f0:	e8 8b 60 ff ff       	call   c0000580 <strlen>
c000a4f5:	83 c4 10             	add    esp,0x10
c000a4f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a4fb:	81 c2 02 01 00 00    	add    edx,0x102
c000a501:	83 ec 04             	sub    esp,0x4
c000a504:	50                   	push   eax
c000a505:	6a 00                	push   0x0
c000a507:	52                   	push   edx
c000a508:	e8 e3 5f ff ff       	call   c00004f0 <memset>
c000a50d:	83 c4 10             	add    esp,0x10
c000a510:	90                   	nop
c000a511:	c9                   	leave  
c000a512:	c3                   	ret    

c000a513 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a513:	55                   	push   ebp
c000a514:	89 e5                	mov    ebp,esp
c000a516:	83 ec 18             	sub    esp,0x18
c000a519:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a51e:	85 c0                	test   eax,eax
c000a520:	74 2a                	je     c000a54c <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a522:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a528:	8b 15 88 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c688
c000a52e:	83 ec 04             	sub    esp,0x4
c000a531:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a536:	83 ec 08             	sub    esp,0x8
c000a539:	89 e0                	mov    eax,esp
c000a53b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000a53e:	89 08                	mov    DWORD PTR [eax],ecx
c000a540:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a543:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a547:	ff d2                	call   edx
c000a549:	83 c4 10             	add    esp,0x10
c000a54c:	fb                   	sti    
c000a54d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a554:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a558:	0f 84 08 01 00 00    	je     c000a666 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a55e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a561:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a567:	0f be c0             	movsx  eax,al
c000a56a:	85 c0                	test   eax,eax
c000a56c:	75 27                	jne    c000a595 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a56e:	fa                   	cli    
c000a56f:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000a574:	83 c0 01             	add    eax,0x1
c000a577:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c000a57c:	e8 b3 c0 00 00       	call   c0016634 <schedule()>
c000a581:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000a589:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000a58e:	85 c0                	test   eax,eax
c000a590:	75 cc                	jne    c000a55e <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a592:	fb                   	sti    
c000a593:	eb c9                	jmp    c000a55e <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a595:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a598:	8d 50 01             	lea    edx,[eax+0x1]
c000a59b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a59e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5a1:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a5a7:	88 10                	mov    BYTE PTR [eax],dl
c000a5a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5ac:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5b2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a5b5:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5b9:	83 f8 03             	cmp    eax,0x3
c000a5bc:	75 1e                	jne    c000a5dc <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a5be:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a5c8:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a5ce:	83 ec 08             	sub    esp,0x8
c000a5d1:	6a 02                	push   0x2
c000a5d3:	50                   	push   eax
c000a5d4:	e8 f2 66 00 00       	call   c0010ccb <KeRaiseSignal(SigHandlerBlock*, int)>
c000a5d9:	83 c4 10             	add    esp,0x10
c000a5dc:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5e0:	83 f8 1c             	cmp    eax,0x1c
c000a5e3:	75 1e                	jne    c000a603 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a5e5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a5ef:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a5f5:	83 ec 08             	sub    esp,0x8
c000a5f8:	6a 09                	push   0x9
c000a5fa:	50                   	push   eax
c000a5fb:	e8 cb 66 00 00       	call   c0010ccb <KeRaiseSignal(SigHandlerBlock*, int)>
c000a600:	83 c4 10             	add    esp,0x10
c000a603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a606:	05 02 01 00 00       	add    eax,0x102
c000a60b:	83 ec 0c             	sub    esp,0xc
c000a60e:	50                   	push   eax
c000a60f:	e8 6c 5f ff ff       	call   c0000580 <strlen>
c000a614:	83 c4 10             	add    esp,0x10
c000a617:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a61a:	81 c2 02 01 00 00    	add    edx,0x102
c000a620:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a623:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a626:	81 c2 02 01 00 00    	add    edx,0x102
c000a62c:	83 ec 04             	sub    esp,0x4
c000a62f:	50                   	push   eax
c000a630:	51                   	push   ecx
c000a631:	52                   	push   edx
c000a632:	e8 99 5d ff ff       	call   c00003d0 <memmove>
c000a637:	83 c4 10             	add    esp,0x10
c000a63a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a63e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a642:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a646:	83 f8 0a             	cmp    eax,0xa
c000a649:	74 16                	je     c000a661 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a64b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a64f:	83 f8 03             	cmp    eax,0x3
c000a652:	74 0d                	je     c000a661 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a654:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a658:	83 f8 1c             	cmp    eax,0x1c
c000a65b:	0f 85 f3 fe ff ff    	jne    c000a554 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a661:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a664:	eb 03                	jmp    c000a669 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a666:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a669:	c9                   	leave  
c000a66a:	c3                   	ret    
c000a66b:	90                   	nop

c000a66c <Keyboard::Keyboard(char const*)>:
c000a66c:	83 ec 0c             	sub    esp,0xc
c000a66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a673:	83 ec 08             	sub    esp,0x8
c000a676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67a:	50                   	push   eax
c000a67b:	e8 d8 f4 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	ba e0 3b 02 c0       	mov    edx,0xc0023be0
c000a688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68c:	89 10                	mov    DWORD PTR [eax],edx
c000a68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a692:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a69c:	c6 05 84 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c684,0x1
c000a6a3:	90                   	nop
c000a6a4:	83 c4 0c             	add    esp,0xc
c000a6a7:	c3                   	ret    

c000a6a8 <Keyboard::~Keyboard()>:
c000a6a8:	83 ec 0c             	sub    esp,0xc
c000a6ab:	ba e0 3b 02 c0       	mov    edx,0xc0023be0
c000a6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b4:	89 10                	mov    DWORD PTR [eax],edx
c000a6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ba:	83 ec 0c             	sub    esp,0xc
c000a6bd:	50                   	push   eax
c000a6be:	e8 35 f2 ff ff       	call   c00098f8 <Device::~Device()>
c000a6c3:	83 c4 10             	add    esp,0x10
c000a6c6:	90                   	nop
c000a6c7:	83 c4 0c             	add    esp,0xc
c000a6ca:	c3                   	ret    
c000a6cb:	90                   	nop

c000a6cc <Keyboard::~Keyboard()>:
c000a6cc:	83 ec 0c             	sub    esp,0xc
c000a6cf:	83 ec 0c             	sub    esp,0xc
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	e8 cd ff ff ff       	call   c000a6a8 <Keyboard::~Keyboard()>
c000a6db:	83 c4 10             	add    esp,0x10
c000a6de:	83 ec 08             	sub    esp,0x8
c000a6e1:	68 5c 01 00 00       	push   0x15c
c000a6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ea:	e8 81 2b 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	83 c4 0c             	add    esp,0xc
c000a6f5:	c3                   	ret    

c000a6f6 <LogicalDisk::close(int, int, void*)>:
c000a6f6:	83 c8 ff             	or     eax,0xffffffff
c000a6f9:	c3                   	ret    

c000a6fa <LogicalDisk::~LogicalDisk()>:
c000a6fa:	83 ec 0c             	sub    esp,0xc
c000a6fd:	ba 58 3c 02 c0       	mov    edx,0xc0023c58
c000a702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a706:	89 10                	mov    DWORD PTR [eax],edx
c000a708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a70c:	83 ec 0c             	sub    esp,0xc
c000a70f:	50                   	push   eax
c000a710:	e8 e3 f1 ff ff       	call   c00098f8 <Device::~Device()>
c000a715:	83 c4 10             	add    esp,0x10
c000a718:	90                   	nop
c000a719:	83 c4 0c             	add    esp,0xc
c000a71c:	c3                   	ret    
c000a71d:	90                   	nop

c000a71e <LogicalDisk::~LogicalDisk()>:
c000a71e:	83 ec 0c             	sub    esp,0xc
c000a721:	83 ec 0c             	sub    esp,0xc
c000a724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a728:	e8 cd ff ff ff       	call   c000a6fa <LogicalDisk::~LogicalDisk()>
c000a72d:	83 c4 10             	add    esp,0x10
c000a730:	83 ec 08             	sub    esp,0x8
c000a733:	68 78 01 00 00       	push   0x178
c000a738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a73c:	e8 2f 2b 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	83 c4 0c             	add    esp,0xc
c000a747:	c3                   	ret    

c000a748 <LogicalDisk::open(int, int, void*)>:
c000a748:	83 ec 18             	sub    esp,0x18
c000a74b:	68 0c 3c 02 c0       	push   0xc0023c0c
c000a750:	e8 67 53 00 00       	call   c000fabc <KePanic(char const*)>
c000a755:	83 c8 ff             	or     eax,0xffffffff
c000a758:	83 c4 1c             	add    esp,0x1c
c000a75b:	c3                   	ret    

c000a75c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a75c:	53                   	push   ebx
c000a75d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a761:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a765:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a769:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a76f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a775:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a77b:	77 10                	ja     c000a78d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a77d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a783:	89 d3                	mov    ebx,edx
c000a785:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a78b:	72 05                	jb     c000a792 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a78d:	83 c8 ff             	or     eax,0xffffffff
c000a790:	89 c2                	mov    edx,eax
c000a792:	5b                   	pop    ebx
c000a793:	c3                   	ret    

c000a794 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a794:	56                   	push   esi
c000a795:	83 c8 ff             	or     eax,0xffffffff
c000a798:	53                   	push   ebx
c000a799:	89 c2                	mov    edx,eax
c000a79b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a79f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a7a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7a7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a7ad:	77 27                	ja     c000a7d6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7af:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a7b5:	89 d8                	mov    eax,ebx
c000a7b7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a7bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a7c2:	89 c2                	mov    edx,eax
c000a7c4:	73 10                	jae    c000a7d6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7c6:	89 c8                	mov    eax,ecx
c000a7c8:	89 da                	mov    edx,ebx
c000a7ca:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a7d0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a7d6:	5b                   	pop    ebx
c000a7d7:	5e                   	pop    esi
c000a7d8:	c3                   	ret    
c000a7d9:	90                   	nop

c000a7da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a7da:	83 ec 1c             	sub    esp,0x1c
c000a7dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a7e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a7e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a7ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a7f1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a7f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a7f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a7fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a800:	83 ec 08             	sub    esp,0x8
c000a803:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a807:	50                   	push   eax
c000a808:	e8 4b f3 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000a80d:	83 c4 10             	add    esp,0x10
c000a810:	ba 58 3c 02 c0       	mov    edx,0xc0023c58
c000a815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a819:	89 10                	mov    DWORD PTR [eax],edx
c000a81b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a81f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a826:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a82a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a831:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a835:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a83c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a840:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a84a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a84e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a852:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a856:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a85c:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a862:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a866:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a869:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a86d:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a873:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a879:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a87d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a881:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a88b:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a895:	90                   	nop
c000a896:	83 c4 1c             	add    esp,0x1c
c000a899:	c3                   	ret    

c000a89a <LogicalDisk::assignDriveLetter()>:
c000a89a:	55                   	push   ebp
c000a89b:	57                   	push   edi
c000a89c:	56                   	push   esi
c000a89d:	53                   	push   ebx
c000a89e:	83 ec 14             	sub    esp,0x14
c000a8a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a8a5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a8ab:	b0 41                	mov    al,0x41
c000a8ad:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a8b3:	84 d2                	test   dl,dl
c000a8b5:	75 02                	jne    c000a8b9 <LogicalDisk::assignDriveLetter()+0x1f>
c000a8b7:	b0 43                	mov    al,0x43
c000a8b9:	8b 3d c0 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac0
c000a8bf:	0f b6 ca             	movzx  ecx,dl
c000a8c2:	0f be e8             	movsx  ebp,al
c000a8c5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a8c9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a8cd:	8b 3d c4 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac4
c000a8d3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a8d7:	3c 43                	cmp    al,0x43
c000a8d9:	75 10                	jne    c000a8eb <LogicalDisk::assignDriveLetter()+0x51>
c000a8db:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a8e2:	75 5a                	jne    c000a93e <LogicalDisk::assignDriveLetter()+0xa4>
c000a8e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a8e9:	75 53                	jne    c000a93e <LogicalDisk::assignDriveLetter()+0xa4>
c000a8eb:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a8ee:	ba 01 00 00 00       	mov    edx,0x1
c000a8f3:	89 34 24             	mov    DWORD PTR [esp],esi
c000a8f6:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a8f9:	d3 e2                	shl    edx,cl
c000a8fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a8ff:	89 d7                	mov    edi,edx
c000a901:	89 d6                	mov    esi,edx
c000a903:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a907:	c1 ff 1f             	sar    edi,0x1f
c000a90a:	21 f9                	and    ecx,edi
c000a90c:	09 d1                	or     ecx,edx
c000a90e:	75 2e                	jne    c000a93e <LogicalDisk::assignDriveLetter()+0xa4>
c000a910:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a914:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a918:	09 f2                	or     edx,esi
c000a91a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a91d:	89 15 c0 ca 02 c0    	mov    DWORD PTR ds:0xc002cac0,edx
c000a923:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a927:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a92d:	89 1c b5 e0 ca 02 c0 	mov    DWORD PTR [esi*4-0x3ffd3520],ebx
c000a934:	09 fa                	or     edx,edi
c000a936:	89 15 c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,edx
c000a93c:	eb 0d                	jmp    c000a94b <LogicalDisk::assignDriveLetter()+0xb1>
c000a93e:	8d 50 01             	lea    edx,[eax+0x1]
c000a941:	45                   	inc    ebp
c000a942:	80 fa 5b             	cmp    dl,0x5b
c000a945:	88 d0                	mov    al,dl
c000a947:	75 8e                	jne    c000a8d7 <LogicalDisk::assignDriveLetter()+0x3d>
c000a949:	31 c0                	xor    eax,eax
c000a94b:	83 c4 14             	add    esp,0x14
c000a94e:	5b                   	pop    ebx
c000a94f:	5e                   	pop    esi
c000a950:	5f                   	pop    edi
c000a951:	5d                   	pop    ebp
c000a952:	c3                   	ret    
c000a953:	90                   	nop

c000a954 <LogicalDisk::mount()>:
c000a954:	56                   	push   esi
c000a955:	53                   	push   ebx
c000a956:	53                   	push   ebx
c000a957:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a95b:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c000a961:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a96b:	85 db                	test   ebx,ebx
c000a96d:	74 27                	je     c000a996 <LogicalDisk::mount()+0x42>
c000a96f:	51                   	push   ecx
c000a970:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a977:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a979:	83 e8 41             	sub    eax,0x41
c000a97c:	50                   	push   eax
c000a97d:	56                   	push   esi
c000a97e:	53                   	push   ebx
c000a97f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a982:	83 c4 10             	add    esp,0x10
c000a985:	84 c0                	test   al,al
c000a987:	74 08                	je     c000a991 <LogicalDisk::mount()+0x3d>
c000a989:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a98f:	eb 07                	jmp    c000a998 <LogicalDisk::mount()+0x44>
c000a991:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a994:	eb d5                	jmp    c000a96b <LogicalDisk::mount()+0x17>
c000a996:	31 c0                	xor    eax,eax
c000a998:	5a                   	pop    edx
c000a999:	5b                   	pop    ebx
c000a99a:	5e                   	pop    esi
c000a99b:	c3                   	ret    

c000a99c <LogicalDisk::unmount()>:
c000a99c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9a0:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a9aa:	c3                   	ret    
c000a9ab:	90                   	nop

c000a9ac <LogicalDisk::eject()>:
c000a9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9b0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a9b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9bc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a9bf:	90                   	nop

c000a9c0 <LogicalDisk::unassignDriveLetter()>:
c000a9c0:	57                   	push   edi
c000a9c1:	56                   	push   esi
c000a9c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a9c6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a9cd:	85 c9                	test   ecx,ecx
c000a9cf:	75 0f                	jne    c000a9e0 <LogicalDisk::unassignDriveLetter()+0x20>
c000a9d1:	c7 44 24 0c 30 3c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023c30
c000a9d9:	5e                   	pop    esi
c000a9da:	5f                   	pop    edi
c000a9db:	e9 dc 50 00 00       	jmp    c000fabc <KePanic(char const*)>
c000a9e0:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a9e7:	83 e9 41             	sub    ecx,0x41
c000a9ea:	b8 01 00 00 00       	mov    eax,0x1
c000a9ef:	c7 04 8d e0 ca 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3520],0x0
c000a9fa:	d3 e0                	shl    eax,cl
c000a9fc:	89 c7                	mov    edi,eax
c000a9fe:	f7 d0                	not    eax
c000aa00:	c1 ff 1f             	sar    edi,0x1f
c000aa03:	21 05 c0 ca 02 c0    	and    DWORD PTR ds:0xc002cac0,eax
c000aa09:	89 fe                	mov    esi,edi
c000aa0b:	f7 d6                	not    esi
c000aa0d:	21 35 c4 ca 02 c0    	and    DWORD PTR ds:0xc002cac4,esi
c000aa13:	5e                   	pop    esi
c000aa14:	5f                   	pop    edi
c000aa15:	c3                   	ret    

c000aa16 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa16:	57                   	push   edi
c000aa17:	56                   	push   esi
c000aa18:	53                   	push   ebx
c000aa19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa21:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa29:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa2f:	77 41                	ja     c000aa72 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa31:	99                   	cdq    
c000aa32:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa38:	01 c8                	add    eax,ecx
c000aa3a:	11 da                	adc    edx,ebx
c000aa3c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa42:	19 d7                	sbb    edi,edx
c000aa44:	72 33                	jb     c000aa79 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa46:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa4c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa52:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa56:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa5a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa60:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aa66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa6a:	5b                   	pop    ebx
c000aa6b:	5e                   	pop    esi
c000aa6c:	5f                   	pop    edi
c000aa6d:	e9 bc 0b 00 00       	jmp    c000b62e <VCache::read(unsigned long long, int, void*)>
c000aa72:	b8 05 00 00 00       	mov    eax,0x5
c000aa77:	eb 05                	jmp    c000aa7e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aa79:	b8 07 00 00 00       	mov    eax,0x7
c000aa7e:	5b                   	pop    ebx
c000aa7f:	5e                   	pop    esi
c000aa80:	5f                   	pop    edi
c000aa81:	c3                   	ret    

c000aa82 <LogicalDisk::write(unsigned long long, int, void*)>:
c000aa82:	57                   	push   edi
c000aa83:	56                   	push   esi
c000aa84:	53                   	push   ebx
c000aa85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa8d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa95:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa9b:	77 41                	ja     c000aade <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aa9d:	99                   	cdq    
c000aa9e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aaa4:	01 c8                	add    eax,ecx
c000aaa6:	11 da                	adc    edx,ebx
c000aaa8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aaae:	19 d7                	sbb    edi,edx
c000aab0:	72 33                	jb     c000aae5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aab2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aab8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aabe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aac2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aac6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aacc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aad2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aad6:	5b                   	pop    ebx
c000aad7:	5e                   	pop    esi
c000aad8:	5f                   	pop    edi
c000aad9:	e9 82 09 00 00       	jmp    c000b460 <VCache::write(unsigned long long, int, void*)>
c000aade:	b8 05 00 00 00       	mov    eax,0x5
c000aae3:	eb 05                	jmp    c000aaea <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000aae5:	b8 07 00 00 00       	mov    eax,0x7
c000aaea:	5b                   	pop    ebx
c000aaeb:	5e                   	pop    esi
c000aaec:	5f                   	pop    edi
c000aaed:	c3                   	ret    
c000aaee:	66 90                	xchg   ax,ax

c000aaf0 <Mouse::Mouse(char const*)>:
c000aaf0:	83 ec 0c             	sub    esp,0xc
c000aaf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf7:	83 ec 08             	sub    esp,0x8
c000aafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aafe:	50                   	push   eax
c000aaff:	e8 54 f0 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000ab04:	83 c4 10             	add    esp,0x10
c000ab07:	ba 84 3c 02 c0       	mov    edx,0xc0023c84
c000ab0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab10:	89 10                	mov    DWORD PTR [eax],edx
c000ab12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab16:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab20:	90                   	nop
c000ab21:	83 c4 0c             	add    esp,0xc
c000ab24:	c3                   	ret    
c000ab25:	90                   	nop
c000ab26:	66 90                	xchg   ax,ax

c000ab28 <Mouse::~Mouse()>:
c000ab28:	83 ec 0c             	sub    esp,0xc
c000ab2b:	ba 84 3c 02 c0       	mov    edx,0xc0023c84
c000ab30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab34:	89 10                	mov    DWORD PTR [eax],edx
c000ab36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab3a:	83 ec 0c             	sub    esp,0xc
c000ab3d:	50                   	push   eax
c000ab3e:	e8 b5 ed ff ff       	call   c00098f8 <Device::~Device()>
c000ab43:	83 c4 10             	add    esp,0x10
c000ab46:	90                   	nop
c000ab47:	83 c4 0c             	add    esp,0xc
c000ab4a:	c3                   	ret    
c000ab4b:	90                   	nop

c000ab4c <Mouse::~Mouse()>:
c000ab4c:	83 ec 0c             	sub    esp,0xc
c000ab4f:	83 ec 0c             	sub    esp,0xc
c000ab52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab56:	e8 cd ff ff ff       	call   c000ab28 <Mouse::~Mouse()>
c000ab5b:	83 c4 10             	add    esp,0x10
c000ab5e:	83 ec 08             	sub    esp,0x8
c000ab61:	68 58 01 00 00       	push   0x158
c000ab66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab6a:	e8 01 27 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c000ab6f:	83 c4 10             	add    esp,0x10
c000ab72:	83 c4 0c             	add    esp,0xc
c000ab75:	c3                   	ret    

c000ab76 <NIC::getMAC()>:
c000ab76:	31 c0                	xor    eax,eax
c000ab78:	31 d2                	xor    edx,edx
c000ab7a:	c3                   	ret    
c000ab7b:	90                   	nop

c000ab7c <NIC::write(int, unsigned char*, int*)>:
c000ab7c:	b8 01 00 00 00       	mov    eax,0x1
c000ab81:	c3                   	ret    

c000ab82 <NIC::NIC(char const*)>:
c000ab82:	83 ec 0c             	sub    esp,0xc
c000ab85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab89:	83 ec 08             	sub    esp,0x8
c000ab8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab90:	50                   	push   eax
c000ab91:	e8 c2 ef ff ff       	call   c0009b58 <Device::Device(char const*)>
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	ba b0 3c 02 c0       	mov    edx,0xc0023cb0
c000ab9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba2:	89 10                	mov    DWORD PTR [eax],edx
c000aba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000abb2:	90                   	nop
c000abb3:	83 c4 0c             	add    esp,0xc
c000abb6:	c3                   	ret    
c000abb7:	90                   	nop

c000abb8 <NIC::~NIC()>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	ba b0 3c 02 c0       	mov    edx,0xc0023cb0
c000abc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc4:	89 10                	mov    DWORD PTR [eax],edx
c000abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abca:	83 ec 0c             	sub    esp,0xc
c000abcd:	50                   	push   eax
c000abce:	e8 25 ed ff ff       	call   c00098f8 <Device::~Device()>
c000abd3:	83 c4 10             	add    esp,0x10
c000abd6:	90                   	nop
c000abd7:	83 c4 0c             	add    esp,0xc
c000abda:	c3                   	ret    
c000abdb:	90                   	nop

c000abdc <NIC::~NIC()>:
c000abdc:	83 ec 0c             	sub    esp,0xc
c000abdf:	83 ec 0c             	sub    esp,0xc
c000abe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abe6:	e8 cd ff ff ff       	call   c000abb8 <NIC::~NIC()>
c000abeb:	83 c4 10             	add    esp,0x10
c000abee:	83 ec 08             	sub    esp,0x8
c000abf1:	68 58 01 00 00       	push   0x158
c000abf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abfa:	e8 71 26 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c000abff:	83 c4 10             	add    esp,0x10
c000ac02:	83 c4 0c             	add    esp,0xc
c000ac05:	c3                   	ret    

c000ac06 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac06:	55                   	push   ebp
c000ac07:	57                   	push   edi
c000ac08:	56                   	push   esi
c000ac09:	53                   	push   ebx
c000ac0a:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac10:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000ac17:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000ac1e:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000ac25:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000ac2c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac30:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac34:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac3b:	e8 14 f0 ff ff       	call   c0009c54 <Device::getName()>
c000ac40:	5a                   	pop    edx
c000ac41:	59                   	pop    ecx
c000ac42:	50                   	push   eax
c000ac43:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac47:	55                   	push   ebp
c000ac48:	e8 03 5a ff ff       	call   c0000650 <strcpy>
c000ac4d:	5b                   	pop    ebx
c000ac4e:	58                   	pop    eax
c000ac4f:	68 dc 3c 02 c0       	push   0xc0023cdc
c000ac54:	55                   	push   ebp
c000ac55:	e8 16 5c ff ff       	call   c0000870 <strcat>
c000ac5a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac61:	e8 02 4a 00 00       	call   c000f668 <malloc>
c000ac66:	83 c4 0c             	add    esp,0xc
c000ac69:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac6d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac71:	89 c3                	mov    ebx,eax
c000ac73:	57                   	push   edi
c000ac74:	56                   	push   esi
c000ac75:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ac7c:	55                   	push   ebp
c000ac7d:	50                   	push   eax
c000ac7e:	e8 57 fb ff ff       	call   c000a7da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ac83:	83 c4 14             	add    esp,0x14
c000ac86:	53                   	push   ebx
c000ac87:	e8 0e fc ff ff       	call   c000a89a <LogicalDisk::assignDriveLetter()>
c000ac8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ac8f:	e8 c0 fc ff ff       	call   c000a954 <LogicalDisk::mount()>
c000ac94:	58                   	pop    eax
c000ac95:	5a                   	pop    edx
c000ac96:	53                   	push   ebx
c000ac97:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac9e:	e8 53 ed ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000aca3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000aca9:	5b                   	pop    ebx
c000acaa:	5e                   	pop    esi
c000acab:	5f                   	pop    edi
c000acac:	5d                   	pop    ebp
c000acad:	c3                   	ret    

c000acae <createPartitionsForDisk(PhysicalDisk*)>:
c000acae:	55                   	push   ebp
c000acaf:	57                   	push   edi
c000acb0:	56                   	push   esi
c000acb1:	53                   	push   ebx
c000acb2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000acb8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000acbf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000acc5:	3d 00 02 00 00       	cmp    eax,0x200
c000acca:	74 27                	je     c000acf3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000accc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000acd2:	83 ec 10             	sub    esp,0x10
c000acd5:	99                   	cdq    
c000acd6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000acdc:	52                   	push   edx
c000acdd:	50                   	push   eax
c000acde:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ace2:	c1 e6 0a             	shl    esi,0xa
c000ace5:	89 fd                	mov    ebp,edi
c000ace7:	55                   	push   ebp
c000ace8:	56                   	push   esi
c000ace9:	e8 46 71 01 00       	call   c0021e34 <__udivdi3>
c000acee:	e9 b9 00 00 00       	jmp    c000adac <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000acf3:	83 ec 0c             	sub    esp,0xc
c000acf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000acf8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000acfc:	56                   	push   esi
c000acfd:	6a 01                	push   0x1
c000acff:	6a 00                	push   0x0
c000ad01:	6a 00                	push   0x0
c000ad03:	53                   	push   ebx
c000ad04:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad07:	83 c4 20             	add    esp,0x20
c000ad0a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad12:	75 0a                	jne    c000ad1e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad14:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad1c:	74 2c                	je     c000ad4a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad1e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad24:	83 ec 10             	sub    esp,0x10
c000ad27:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad2d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad33:	89 f7                	mov    edi,esi
c000ad35:	c1 ff 1f             	sar    edi,0x1f
c000ad38:	57                   	push   edi
c000ad39:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad3d:	56                   	push   esi
c000ad3e:	c1 e0 0a             	shl    eax,0xa
c000ad41:	52                   	push   edx
c000ad42:	50                   	push   eax
c000ad43:	e8 ec 70 01 00       	call   c0021e34 <__udivdi3>
c000ad48:	eb 62                	jmp    c000adac <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad4a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad51:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad58:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad5f:	89 cf                	mov    edi,ecx
c000ad61:	83 e2 7f             	and    edx,0x7f
c000ad64:	83 e7 7f             	and    edi,0x7f
c000ad67:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ad6a:	83 e0 7f             	and    eax,0x7f
c000ad6d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ad70:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ad77:	83 e0 7f             	and    eax,0x7f
c000ad7a:	01 d0                	add    eax,edx
c000ad7c:	84 c0                	test   al,al
c000ad7e:	89 c5                	mov    ebp,eax
c000ad80:	74 41                	je     c000adc3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000ad82:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad88:	83 ec 10             	sub    esp,0x10
c000ad8b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad91:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad97:	89 f7                	mov    edi,esi
c000ad99:	c1 ff 1f             	sar    edi,0x1f
c000ad9c:	57                   	push   edi
c000ad9d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ada1:	56                   	push   esi
c000ada2:	c1 e0 0a             	shl    eax,0xa
c000ada5:	52                   	push   edx
c000ada6:	50                   	push   eax
c000ada7:	e8 88 70 01 00       	call   c0021e34 <__udivdi3>
c000adac:	83 c4 14             	add    esp,0x14
c000adaf:	52                   	push   edx
c000adb0:	50                   	push   eax
c000adb1:	6a 00                	push   0x0
c000adb3:	6a 00                	push   0x0
c000adb5:	53                   	push   ebx
c000adb6:	e8 4b fe ff ff       	call   c000ac06 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000adbb:	83 c4 20             	add    esp,0x20
c000adbe:	e9 73 01 00 00       	jmp    c000af36 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000adc3:	89 f0                	mov    eax,esi
c000adc5:	31 c9                	xor    ecx,ecx
c000adc7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000adce:	75 02                	jne    c000add2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000add0:	89 cd                	mov    ebp,ecx
c000add2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000adda:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ade1:	83 c0 10             	add    eax,0x10
c000ade4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000adec:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000adf3:	c1 e2 08             	shl    edx,0x8
c000adf6:	c1 e6 10             	shl    esi,0x10
c000adf9:	09 f2                	or     edx,esi
c000adfb:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000ae02:	09 f2                	or     edx,esi
c000ae04:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae0b:	c1 e6 18             	shl    esi,0x18
c000ae0e:	09 f2                	or     edx,esi
c000ae10:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae17:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae1b:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae22:	c1 e6 10             	shl    esi,0x10
c000ae25:	c1 e2 08             	shl    edx,0x8
c000ae28:	09 f2                	or     edx,esi
c000ae2a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae31:	09 f2                	or     edx,esi
c000ae33:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae3a:	c1 e6 18             	shl    esi,0x18
c000ae3d:	09 f2                	or     edx,esi
c000ae3f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae43:	41                   	inc    ecx
c000ae44:	83 f9 04             	cmp    ecx,0x4
c000ae47:	0f 85 7a ff ff ff    	jne    c000adc7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae51:	83 f0 01             	xor    eax,0x1
c000ae54:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae58:	75 4f                	jne    c000aea9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae5e:	83 f0 01             	xor    eax,0x1
c000ae61:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae65:	75 42                	jne    c000aea9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae67:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ae6d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000ae75:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ae7b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ae83:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ae89:	89 f7                	mov    edi,esi
c000ae8b:	c1 ff 1f             	sar    edi,0x1f
c000ae8e:	57                   	push   edi
c000ae8f:	56                   	push   esi
c000ae90:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ae94:	52                   	push   edx
c000ae95:	c1 e0 0a             	shl    eax,0xa
c000ae98:	50                   	push   eax
c000ae99:	e8 96 6f 01 00       	call   c0021e34 <__udivdi3>
c000ae9e:	83 c4 10             	add    esp,0x10
c000aea1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aea5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000aea9:	89 e8                	mov    eax,ebp
c000aeab:	0f b6 e8             	movzx  ebp,al
c000aeae:	85 ed                	test   ebp,ebp
c000aeb0:	74 50                	je     c000af02 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000aeb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeb6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000aeba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aebe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000aec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aec6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000aeca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aece:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000aed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aeda:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aede:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aee2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000aee6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000aeea:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000aeee:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000aef2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000aef6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000aefa:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000aefe:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af02:	31 ed                	xor    ebp,ebp
c000af04:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af08:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af0c:	89 f8                	mov    eax,edi
c000af0e:	09 f0                	or     eax,esi
c000af10:	74 1e                	je     c000af30 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af12:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af16:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af1a:	89 d1                	mov    ecx,edx
c000af1c:	09 c1                	or     ecx,eax
c000af1e:	74 10                	je     c000af30 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af20:	83 ec 0c             	sub    esp,0xc
c000af23:	57                   	push   edi
c000af24:	56                   	push   esi
c000af25:	52                   	push   edx
c000af26:	50                   	push   eax
c000af27:	53                   	push   ebx
c000af28:	e8 d9 fc ff ff       	call   c000ac06 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af2d:	83 c4 20             	add    esp,0x20
c000af30:	45                   	inc    ebp
c000af31:	83 fd 04             	cmp    ebp,0x4
c000af34:	75 ce                	jne    c000af04 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af36:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af3c:	5b                   	pop    ebx
c000af3d:	5e                   	pop    esi
c000af3e:	5f                   	pop    edi
c000af3f:	5d                   	pop    ebp
c000af40:	c3                   	ret    
c000af41:	66 90                	xchg   ax,ax
c000af43:	90                   	nop

c000af44 <Serial::Serial(char const*)>:
c000af44:	83 ec 0c             	sub    esp,0xc
c000af47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4b:	83 ec 08             	sub    esp,0x8
c000af4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af52:	50                   	push   eax
c000af53:	e8 00 ec ff ff       	call   c0009b58 <Device::Device(char const*)>
c000af58:	83 c4 10             	add    esp,0x10
c000af5b:	ba f0 3c 02 c0       	mov    edx,0xc0023cf0
c000af60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af64:	89 10                	mov    DWORD PTR [eax],edx
c000af66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af6a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000af74:	90                   	nop
c000af75:	83 c4 0c             	add    esp,0xc
c000af78:	c3                   	ret    
c000af79:	90                   	nop
c000af7a:	66 90                	xchg   ax,ax

c000af7c <Serial::~Serial()>:
c000af7c:	83 ec 0c             	sub    esp,0xc
c000af7f:	ba f0 3c 02 c0       	mov    edx,0xc0023cf0
c000af84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af88:	89 10                	mov    DWORD PTR [eax],edx
c000af8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8e:	83 ec 0c             	sub    esp,0xc
c000af91:	50                   	push   eax
c000af92:	e8 61 e9 ff ff       	call   c00098f8 <Device::~Device()>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	90                   	nop
c000af9b:	83 c4 0c             	add    esp,0xc
c000af9e:	c3                   	ret    
c000af9f:	90                   	nop

c000afa0 <Serial::~Serial()>:
c000afa0:	83 ec 0c             	sub    esp,0xc
c000afa3:	83 ec 0c             	sub    esp,0xc
c000afa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afaa:	e8 cd ff ff ff       	call   c000af7c <Serial::~Serial()>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	83 ec 08             	sub    esp,0x8
c000afb5:	68 58 01 00 00       	push   0x158
c000afba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afbe:	e8 ad 22 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c000afc3:	83 c4 10             	add    esp,0x10
c000afc6:	83 c4 0c             	add    esp,0xc
c000afc9:	c3                   	ret    
c000afca:	66 90                	xchg   ax,ax

c000afcc <Timer::Timer(char const*)>:
c000afcc:	83 ec 0c             	sub    esp,0xc
c000afcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd3:	83 ec 08             	sub    esp,0x8
c000afd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afda:	50                   	push   eax
c000afdb:	e8 78 eb ff ff       	call   c0009b58 <Device::Device(char const*)>
c000afe0:	83 c4 10             	add    esp,0x10
c000afe3:	ba d0 3d 02 c0       	mov    edx,0xc0023dd0
c000afe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afec:	89 10                	mov    DWORD PTR [eax],edx
c000afee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000affc:	90                   	nop
c000affd:	83 c4 0c             	add    esp,0xc
c000b000:	c3                   	ret    
c000b001:	90                   	nop
c000b002:	66 90                	xchg   ax,ax

c000b004 <Timer::~Timer()>:
c000b004:	83 ec 0c             	sub    esp,0xc
c000b007:	ba d0 3d 02 c0       	mov    edx,0xc0023dd0
c000b00c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b010:	89 10                	mov    DWORD PTR [eax],edx
c000b012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b016:	83 ec 0c             	sub    esp,0xc
c000b019:	50                   	push   eax
c000b01a:	e8 d9 e8 ff ff       	call   c00098f8 <Device::~Device()>
c000b01f:	83 c4 10             	add    esp,0x10
c000b022:	90                   	nop
c000b023:	83 c4 0c             	add    esp,0xc
c000b026:	c3                   	ret    
c000b027:	90                   	nop

c000b028 <Timer::~Timer()>:
c000b028:	83 ec 0c             	sub    esp,0xc
c000b02b:	83 ec 0c             	sub    esp,0xc
c000b02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b032:	e8 cd ff ff ff       	call   c000b004 <Timer::~Timer()>
c000b037:	83 c4 10             	add    esp,0x10
c000b03a:	83 ec 08             	sub    esp,0x8
c000b03d:	68 5c 01 00 00       	push   0x15c
c000b042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b046:	e8 25 22 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	83 c4 0c             	add    esp,0xc
c000b051:	c3                   	ret    

c000b052 <Timer::read()>:
c000b052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b056:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b05c:	c3                   	ret    

c000b05d <setupTimer(int)>:
c000b05d:	53                   	push   ebx
c000b05e:	83 ec 14             	sub    esp,0x14
c000b061:	68 5c 01 00 00       	push   0x15c
c000b066:	e8 fd 45 00 00       	call   c000f668 <malloc>
c000b06b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b06e:	89 c3                	mov    ebx,eax
c000b070:	e8 77 66 01 00       	call   c00216ec <PIT::PIT()>
c000b075:	58                   	pop    eax
c000b076:	5a                   	pop    edx
c000b077:	53                   	push   ebx
c000b078:	ff 35 08 d1 02 c0    	push   DWORD PTR ds:0xc002d108
c000b07e:	e8 73 e9 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000b083:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b085:	6a 00                	push   0x0
c000b087:	6a 00                	push   0x0
c000b089:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b08d:	53                   	push   ebx
c000b08e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b091:	83 c4 28             	add    esp,0x28
c000b094:	89 d8                	mov    eax,ebx
c000b096:	5b                   	pop    ebx
c000b097:	c3                   	ret    

c000b098 <timerHandler(unsigned int)>:
c000b098:	57                   	push   edi
c000b099:	31 d2                	xor    edx,edx
c000b09b:	56                   	push   esi
c000b09c:	53                   	push   ebx
c000b09d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0a1:	01 1d 50 cb 02 c0    	add    DWORD PTR ds:0xc002cb50,ebx
c000b0a7:	11 15 54 cb 02 c0    	adc    DWORD PTR ds:0xc002cb54,edx
c000b0ad:	80 3d 0d d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d10d,0x0
c000b0b4:	75 12                	jne    c000b0c8 <timerHandler(unsigned int)+0x30>
c000b0b6:	c7 44 24 10 7f 3d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023d7f
c000b0be:	5b                   	pop    ebx
c000b0bf:	5e                   	pop    esi
c000b0c0:	5f                   	pop    edi
c000b0c1:	e9 a0 be ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000b0c6:	66 90                	xchg   ax,ax
c000b0c8:	fa                   	cli    
c000b0c9:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c000b0cf:	83 ec 0c             	sub    esp,0xc
c000b0d2:	68 40 d3 02 c0       	push   0xc002d340
c000b0d7:	e8 f0 70 01 00       	call   c00221cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b0dc:	83 c4 10             	add    esp,0x10
c000b0df:	84 c0                	test   al,al
c000b0e1:	0f 85 a9 00 00 00    	jne    c000b190 <timerHandler(unsigned int)+0xf8>
c000b0e7:	83 ec 0c             	sub    esp,0xc
c000b0ea:	68 40 d3 02 c0       	push   0xc002d340
c000b0ef:	e8 f4 70 01 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b0f4:	83 c4 10             	add    esp,0x10
c000b0f7:	89 c6                	mov    esi,eax
c000b0f9:	8d 76 00             	lea    esi,[esi+0x0]
c000b0fc:	83 ec 0c             	sub    esp,0xc
c000b0ff:	68 40 d3 02 c0       	push   0xc002d340
c000b104:	e8 df 70 01 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b109:	c7 04 24 40 d3 02 c0 	mov    DWORD PTR [esp],0xc002d340
c000b110:	89 c7                	mov    edi,eax
c000b112:	e8 d9 70 01 00       	call   c00221f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b117:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b11a:	83 c4 10             	add    esp,0x10
c000b11d:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b120:	a1 54 cb 02 c0       	mov    eax,ds:0xc002cb54
c000b125:	39 15 50 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb50,edx
c000b12b:	19 c8                	sbb    eax,ecx
c000b12d:	72 21                	jb     c000b150 <timerHandler(unsigned int)+0xb8>
c000b12f:	83 ec 0c             	sub    esp,0xc
c000b132:	57                   	push   edi
c000b133:	e8 54 b8 00 00       	call   c001698c <unblockTask(ThreadControlBlock*)>
c000b138:	83 c4 10             	add    esp,0x10
c000b13b:	39 fe                	cmp    esi,edi
c000b13d:	75 25                	jne    c000b164 <timerHandler(unsigned int)+0xcc>
c000b13f:	83 ec 0c             	sub    esp,0xc
c000b142:	68 40 d3 02 c0       	push   0xc002d340
c000b147:	e8 9c 70 01 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b14c:	89 c6                	mov    esi,eax
c000b14e:	eb 10                	jmp    c000b160 <timerHandler(unsigned int)+0xc8>
c000b150:	51                   	push   ecx
c000b151:	51                   	push   ecx
c000b152:	57                   	push   edi
c000b153:	68 40 d3 02 c0       	push   0xc002d340
c000b158:	e8 4f 71 01 00       	call   c00222ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b15d:	8d 76 00             	lea    esi,[esi+0x0]
c000b160:	83 c4 10             	add    esp,0x10
c000b163:	90                   	nop
c000b164:	83 ec 0c             	sub    esp,0xc
c000b167:	68 40 d3 02 c0       	push   0xc002d340
c000b16c:	e8 5b 70 01 00       	call   c00221cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b171:	83 c4 10             	add    esp,0x10
c000b174:	84 c0                	test   al,al
c000b176:	75 18                	jne    c000b190 <timerHandler(unsigned int)+0xf8>
c000b178:	83 ec 0c             	sub    esp,0xc
c000b17b:	68 40 d3 02 c0       	push   0xc002d340
c000b180:	e8 63 70 01 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b185:	83 c4 10             	add    esp,0x10
c000b188:	39 f0                	cmp    eax,esi
c000b18a:	0f 85 6c ff ff ff    	jne    c000b0fc <timerHandler(unsigned int)+0x64>
c000b190:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b196:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b199:	85 c0                	test   eax,eax
c000b19b:	74 5f                	je     c000b1fc <timerHandler(unsigned int)+0x164>
c000b19d:	80 3d 0c d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d10c,0x0
c000b1a4:	74 56                	je     c000b1fc <timerHandler(unsigned int)+0x164>
c000b1a6:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b1ab:	76 23                	jbe    c000b1d0 <timerHandler(unsigned int)+0x138>
c000b1ad:	80 7a 62 00          	cmp    BYTE PTR [edx+0x62],0x0
c000b1b1:	75 11                	jne    c000b1c4 <timerHandler(unsigned int)+0x12c>
c000b1b3:	52                   	push   edx
c000b1b4:	52                   	push   edx
c000b1b5:	50                   	push   eax
c000b1b6:	68 95 3d 02 c0       	push   0xc0023d95
c000b1bb:	e8 a6 bd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b1c0:	83 c4 10             	add    esp,0x10
c000b1c3:	90                   	nop
c000b1c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1c9:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b1d0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b1d6:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b1d9:	39 d8                	cmp    eax,ebx
c000b1db:	73 0b                	jae    c000b1e8 <timerHandler(unsigned int)+0x150>
c000b1dd:	c7 42 38 00 00 00 00 	mov    DWORD PTR [edx+0x38],0x0
c000b1e4:	eb 0e                	jmp    c000b1f4 <timerHandler(unsigned int)+0x15c>
c000b1e6:	66 90                	xchg   ax,ax
c000b1e8:	89 c1                	mov    ecx,eax
c000b1ea:	29 d9                	sub    ecx,ebx
c000b1ec:	39 d8                	cmp    eax,ebx
c000b1ee:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b1f1:	75 09                	jne    c000b1fc <timerHandler(unsigned int)+0x164>
c000b1f3:	90                   	nop
c000b1f4:	e8 3b b4 00 00       	call   c0016634 <schedule()>
c000b1f9:	8d 76 00             	lea    esi,[esi+0x0]
c000b1fc:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c000b203:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c000b20a:	75 04                	jne    c000b210 <timerHandler(unsigned int)+0x178>
c000b20c:	fb                   	sti    
c000b20d:	8d 76 00             	lea    esi,[esi+0x0]
c000b210:	5b                   	pop    ebx
c000b211:	5e                   	pop    esi
c000b212:	5f                   	pop    edi
c000b213:	c3                   	ret    

c000b214 <VCache::VCache(PhysicalDisk*)>:
c000b214:	53                   	push   ebx
c000b215:	83 ec 18             	sub    esp,0x18
c000b218:	ba 40 3e 02 c0       	mov    edx,0xc0023e40
c000b21d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b221:	89 10                	mov    DWORD PTR [eax],edx
c000b223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b227:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b22e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b232:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b23d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b244:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b24b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b24f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b256:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b25d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b261:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b26c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b274:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b27b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b286:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b28a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b28e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b296:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b29a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b29e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b2a5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b2ad:	83 ec 0c             	sub    esp,0xc
c000b2b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2b4:	e8 af 43 00 00       	call   c000f668 <malloc>
c000b2b9:	83 c4 10             	add    esp,0x10
c000b2bc:	89 c3                	mov    ebx,eax
c000b2be:	83 ec 0c             	sub    esp,0xc
c000b2c1:	53                   	push   ebx
c000b2c2:	e8 d5 47 00 00       	call   c000fa9c <Mutex::Mutex()>
c000b2c7:	83 c4 10             	add    esp,0x10
c000b2ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b2d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b2d9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b2dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2e0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b2e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2eb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b2f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2f5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b2f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2fc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b302:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b308:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b30c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b30f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b316:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b31a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b31e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b324:	05 00 01 00 00       	add    eax,0x100
c000b329:	c1 e0 04             	shl    eax,0x4
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	50                   	push   eax
c000b330:	e8 33 43 00 00       	call   c000f668 <malloc>
c000b335:	83 c4 10             	add    esp,0x10
c000b338:	89 c2                	mov    edx,eax
c000b33a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b33e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b345:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b34c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b350:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b354:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b358:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b35e:	89 d0                	mov    eax,edx
c000b360:	c1 e0 02             	shl    eax,0x2
c000b363:	01 d0                	add    eax,edx
c000b365:	c1 e0 04             	shl    eax,0x4
c000b368:	83 ec 0c             	sub    esp,0xc
c000b36b:	50                   	push   eax
c000b36c:	e8 f7 42 00 00       	call   c000f668 <malloc>
c000b371:	83 c4 10             	add    esp,0x10
c000b374:	89 c2                	mov    edx,eax
c000b376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b37a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b37d:	90                   	nop
c000b37e:	83 c4 18             	add    esp,0x18
c000b381:	5b                   	pop    ebx
c000b382:	c3                   	ret    
c000b383:	90                   	nop

c000b384 <VCache::invalidateReadBuffer()>:
c000b384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b388:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b38e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b392:	c3                   	ret    
c000b393:	90                   	nop

c000b394 <VCache::writeWriteBuffer()>:
c000b394:	53                   	push   ebx
c000b395:	83 ec 08             	sub    esp,0x8
c000b398:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b39c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b3a0:	74 1e                	je     c000b3c0 <VCache::writeWriteBuffer()+0x2c>
c000b3a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b3a5:	83 ec 0c             	sub    esp,0xc
c000b3a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3aa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b3ad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b3b0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b3b3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b3b6:	50                   	push   eax
c000b3b7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b3ba:	83 c4 20             	add    esp,0x20
c000b3bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b3c0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b3c7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b3ce:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b3d2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b3d9:	83 c4 08             	add    esp,0x8
c000b3dc:	5b                   	pop    ebx
c000b3dd:	c3                   	ret    
c000b3de:	66 90                	xchg   ax,ax

c000b3e0 <VCache::~VCache()>:
c000b3e0:	83 ec 0c             	sub    esp,0xc
c000b3e3:	ba 40 3e 02 c0       	mov    edx,0xc0023e40
c000b3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ec:	89 10                	mov    DWORD PTR [eax],edx
c000b3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b3f5:	0f b6 c0             	movzx  eax,al
c000b3f8:	85 c0                	test   eax,eax
c000b3fa:	74 10                	je     c000b40c <VCache::~VCache()+0x2c>
c000b3fc:	83 ec 0c             	sub    esp,0xc
c000b3ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b403:	e8 8c ff ff ff       	call   c000b394 <VCache::writeWriteBuffer()>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	90                   	nop
c000b40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b410:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b413:	83 ec 0c             	sub    esp,0xc
c000b416:	50                   	push   eax
c000b417:	e8 5c 42 00 00       	call   c000f678 <free>
c000b41c:	83 c4 10             	add    esp,0x10
c000b41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b423:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	50                   	push   eax
c000b42a:	e8 49 42 00 00       	call   c000f678 <free>
c000b42f:	83 c4 10             	add    esp,0x10
c000b432:	90                   	nop
c000b433:	83 c4 0c             	add    esp,0xc
c000b436:	c3                   	ret    
c000b437:	90                   	nop

c000b438 <VCache::~VCache()>:
c000b438:	83 ec 0c             	sub    esp,0xc
c000b43b:	83 ec 0c             	sub    esp,0xc
c000b43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b442:	e8 99 ff ff ff       	call   c000b3e0 <VCache::~VCache()>
c000b447:	83 c4 10             	add    esp,0x10
c000b44a:	83 ec 08             	sub    esp,0x8
c000b44d:	6a 44                	push   0x44
c000b44f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b453:	e8 18 1e 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c000b458:	83 c4 10             	add    esp,0x10
c000b45b:	83 c4 0c             	add    esp,0xc
c000b45e:	c3                   	ret    
c000b45f:	90                   	nop

c000b460 <VCache::write(unsigned long long, int, void*)>:
c000b460:	55                   	push   ebp
c000b461:	57                   	push   edi
c000b462:	56                   	push   esi
c000b463:	53                   	push   ebx
c000b464:	83 ec 1c             	sub    esp,0x1c
c000b467:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b46b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b46f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b473:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b477:	e8 bc ae 00 00       	call   c0016338 <KeDisablePreemption()>
c000b47c:	b9 00 10 00 00       	mov    ecx,0x1000
c000b481:	50                   	push   eax
c000b482:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b485:	0f af c3             	imul   eax,ebx
c000b488:	05 ff 0f 00 00       	add    eax,0xfff
c000b48d:	99                   	cdq    
c000b48e:	f7 f9                	idiv   ecx
c000b490:	50                   	push   eax
c000b491:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b495:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b49b:	e8 ba 88 00 00       	call   c0013d5a <VAS::canLockPages(unsigned long, int)>
c000b4a0:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b4a4:	83 c4 10             	add    esp,0x10
c000b4a7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4ac:	74 2a                	je     c000b4d8 <VCache::write(unsigned long long, int, void*)+0x78>
c000b4ae:	50                   	push   eax
c000b4af:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4b7:	0f af c3             	imul   eax,ebx
c000b4ba:	05 ff 0f 00 00       	add    eax,0xfff
c000b4bf:	99                   	cdq    
c000b4c0:	f7 f9                	idiv   ecx
c000b4c2:	50                   	push   eax
c000b4c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4c7:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b4cd:	e8 26 8b 00 00       	call   c0013ff8 <VAS::lockPages(unsigned long, int)>
c000b4d2:	83 c4 10             	add    esp,0x10
c000b4d5:	8d 76 00             	lea    esi,[esi+0x0]
c000b4d8:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b4dc:	74 0e                	je     c000b4ec <VCache::write(unsigned long long, int, void*)+0x8c>
c000b4de:	83 ec 0c             	sub    esp,0xc
c000b4e1:	55                   	push   ebp
c000b4e2:	e8 9d fe ff ff       	call   c000b384 <VCache::invalidateReadBuffer()>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	66 90                	xchg   ax,ax
c000b4ec:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b4f0:	74 72                	je     c000b564 <VCache::write(unsigned long long, int, void*)+0x104>
c000b4f2:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b4f5:	89 c8                	mov    eax,ecx
c000b4f7:	99                   	cdq    
c000b4f8:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b4fb:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b4fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b502:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b506:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b50a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b50e:	31 f0                	xor    eax,esi
c000b510:	31 fa                	xor    edx,edi
c000b512:	09 d0                	or     eax,edx
c000b514:	75 42                	jne    c000b558 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b516:	83 fb 01             	cmp    ebx,0x1
c000b519:	75 3d                	jne    c000b558 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b51b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b51e:	89 cf                	mov    edi,ecx
c000b520:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b524:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b52a:	0f af f8             	imul   edi,eax
c000b52d:	89 c1                	mov    ecx,eax
c000b52f:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b532:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b534:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b537:	40                   	inc    eax
c000b538:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b53b:	83 f8 50             	cmp    eax,0x50
c000b53e:	0f 85 a8 00 00 00    	jne    c000b5ec <VCache::write(unsigned long long, int, void*)+0x18c>
c000b544:	83 ec 0c             	sub    esp,0xc
c000b547:	55                   	push   ebp
c000b548:	e8 47 fe ff ff       	call   c000b394 <VCache::writeWriteBuffer()>
c000b54d:	83 c4 10             	add    esp,0x10
c000b550:	e9 97 00 00 00       	jmp    c000b5ec <VCache::write(unsigned long long, int, void*)+0x18c>
c000b555:	8d 76 00             	lea    esi,[esi+0x0]
c000b558:	83 ec 0c             	sub    esp,0xc
c000b55b:	55                   	push   ebp
c000b55c:	e8 33 fe ff ff       	call   c000b394 <VCache::writeWriteBuffer()>
c000b561:	83 c4 10             	add    esp,0x10
c000b564:	83 fb 4f             	cmp    ebx,0x4f
c000b567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b56a:	7f 20                	jg     c000b58c <VCache::write(unsigned long long, int, void*)+0x12c>
c000b56c:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b56f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b573:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b576:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b579:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b57c:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b580:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b586:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b588:	eb 62                	jmp    c000b5ec <VCache::write(unsigned long long, int, void*)+0x18c>
c000b58a:	66 90                	xchg   ax,ax
c000b58c:	83 ec 0c             	sub    esp,0xc
c000b58f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b591:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b595:	53                   	push   ebx
c000b596:	57                   	push   edi
c000b597:	56                   	push   esi
c000b598:	50                   	push   eax
c000b599:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b59c:	83 c4 20             	add    esp,0x20
c000b59f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5a4:	89 c6                	mov    esi,eax
c000b5a6:	74 28                	je     c000b5d0 <VCache::write(unsigned long long, int, void*)+0x170>
c000b5a8:	52                   	push   edx
c000b5a9:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5ae:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5b2:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5b8:	99                   	cdq    
c000b5b9:	f7 f9                	idiv   ecx
c000b5bb:	50                   	push   eax
c000b5bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5c0:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b5c6:	e8 cb 87 00 00       	call   c0013d96 <VAS::unlockPages(unsigned long, int)>
c000b5cb:	83 c4 10             	add    esp,0x10
c000b5ce:	66 90                	xchg   ax,ax
c000b5d0:	e8 8b ad 00 00       	call   c0016360 <KeRestorePreemption()>
c000b5d5:	85 f6                	test   esi,esi
c000b5d7:	74 4b                	je     c000b624 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5d9:	83 ec 0c             	sub    esp,0xc
c000b5dc:	68 f8 3d 02 c0       	push   0xc0023df8
c000b5e1:	e8 80 b9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b5e6:	83 c4 10             	add    esp,0x10
c000b5e9:	eb 39                	jmp    c000b624 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5eb:	90                   	nop
c000b5ec:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5f1:	74 29                	je     c000b61c <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b5f3:	50                   	push   eax
c000b5f4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5f9:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5fd:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b603:	99                   	cdq    
c000b604:	f7 f9                	idiv   ecx
c000b606:	50                   	push   eax
c000b607:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b60b:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b611:	e8 80 87 00 00       	call   c0013d96 <VAS::unlockPages(unsigned long, int)>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	8d 76 00             	lea    esi,[esi+0x0]
c000b61c:	e8 3f ad 00 00       	call   c0016360 <KeRestorePreemption()>
c000b621:	31 f6                	xor    esi,esi
c000b623:	90                   	nop
c000b624:	83 c4 1c             	add    esp,0x1c
c000b627:	89 f0                	mov    eax,esi
c000b629:	5b                   	pop    ebx
c000b62a:	5e                   	pop    esi
c000b62b:	5f                   	pop    edi
c000b62c:	5d                   	pop    ebp
c000b62d:	c3                   	ret    

c000b62e <VCache::read(unsigned long long, int, void*)>:
c000b62e:	55                   	push   ebp
c000b62f:	bd 00 10 00 00       	mov    ebp,0x1000
c000b634:	57                   	push   edi
c000b635:	56                   	push   esi
c000b636:	53                   	push   ebx
c000b637:	83 ec 2c             	sub    esp,0x2c
c000b63a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b63e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b642:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b646:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b652:	e8 e1 ac 00 00       	call   c0016338 <KeDisablePreemption()>
c000b657:	50                   	push   eax
c000b658:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b65b:	0f af c6             	imul   eax,esi
c000b65e:	05 ff 0f 00 00       	add    eax,0xfff
c000b663:	99                   	cdq    
c000b664:	f7 fd                	idiv   ebp
c000b666:	50                   	push   eax
c000b667:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b66b:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b671:	e8 e4 86 00 00       	call   c0013d5a <VAS::canLockPages(unsigned long, int)>
c000b676:	83 c4 10             	add    esp,0x10
c000b679:	84 c0                	test   al,al
c000b67b:	89 c7                	mov    edi,eax
c000b67d:	74 25                	je     c000b6a4 <VCache::read(unsigned long long, int, void*)+0x76>
c000b67f:	50                   	push   eax
c000b680:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b683:	0f af c6             	imul   eax,esi
c000b686:	05 ff 0f 00 00       	add    eax,0xfff
c000b68b:	99                   	cdq    
c000b68c:	f7 fd                	idiv   ebp
c000b68e:	50                   	push   eax
c000b68f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b693:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b699:	e8 5a 89 00 00       	call   c0013ff8 <VAS::lockPages(unsigned long, int)>
c000b69e:	83 c4 10             	add    esp,0x10
c000b6a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b6a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b6a8:	74 0e                	je     c000b6b8 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b6aa:	83 ec 0c             	sub    esp,0xc
c000b6ad:	53                   	push   ebx
c000b6ae:	e8 e1 fc ff ff       	call   c000b394 <VCache::writeWriteBuffer()>
c000b6b3:	83 c4 10             	add    esp,0x10
c000b6b6:	66 90                	xchg   ax,ax
c000b6b8:	83 fe 01             	cmp    esi,0x1
c000b6bb:	0f 85 fb 00 00 00    	jne    c000b7bc <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b6c4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000b6cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6cf:	0f 85 e7 00 00 00    	jne    c000b7bc <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6d5:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000b6d8:	89 ee                	mov    esi,ebp
c000b6da:	f7 de                	neg    esi
c000b6dc:	89 f0                	mov    eax,esi
c000b6de:	c1 f8 1f             	sar    eax,0x1f
c000b6e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6e5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b6e9:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000b6ed:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b6f1:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b6f5:	89 ca                	mov    edx,ecx
c000b6f7:	89 f9                	mov    ecx,edi
c000b6f9:	0f b6 f9             	movzx  edi,cl
c000b6fc:	89 f0                	mov    eax,esi
c000b6fe:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000b702:	74 0c                	je     c000b710 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b704:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b707:	75 07                	jne    c000b710 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b709:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000b70c:	74 56                	je     c000b764 <VCache::read(unsigned long long, int, void*)+0x136>
c000b70e:	66 90                	xchg   ax,ax
c000b710:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b714:	83 ec 0c             	sub    esp,0xc
c000b717:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b71a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b71e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b721:	8b 37                	mov    esi,DWORD PTR [edi]
c000b723:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b726:	55                   	push   ebp
c000b727:	52                   	push   edx
c000b728:	50                   	push   eax
c000b729:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b72d:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b730:	83 c4 20             	add    esp,0x20
c000b733:	85 c0                	test   eax,eax
c000b735:	89 c5                	mov    ebp,eax
c000b737:	74 2b                	je     c000b764 <VCache::read(unsigned long long, int, void*)+0x136>
c000b739:	83 ec 0c             	sub    esp,0xc
c000b73c:	68 10 3e 02 c0       	push   0xc0023e10
c000b741:	e8 20 b8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b746:	83 c4 10             	add    esp,0x10
c000b749:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b74e:	0f 84 bc 00 00 00    	je     c000b810 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b754:	56                   	push   esi
c000b755:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b758:	05 ff 0f 00 00       	add    eax,0xfff
c000b75d:	e9 92 00 00 00       	jmp    c000b7f4 <VCache::read(unsigned long long, int, void*)+0x1c6>
c000b762:	66 90                	xchg   ax,ax
c000b764:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b767:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000b76b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b771:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b774:	8d 70 ff             	lea    esi,[eax-0x1]
c000b777:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b77b:	0f af f1             	imul   esi,ecx
c000b77e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b781:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b783:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b788:	74 26                	je     c000b7b0 <VCache::read(unsigned long long, int, void*)+0x182>
c000b78a:	51                   	push   ecx
c000b78b:	b9 00 10 00 00       	mov    ecx,0x1000
c000b790:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b793:	05 ff 0f 00 00       	add    eax,0xfff
c000b798:	99                   	cdq    
c000b799:	f7 f9                	idiv   ecx
c000b79b:	50                   	push   eax
c000b79c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b7a0:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b7a6:	e8 eb 85 00 00       	call   c0013d96 <VAS::unlockPages(unsigned long, int)>
c000b7ab:	83 c4 10             	add    esp,0x10
c000b7ae:	66 90                	xchg   ax,ax
c000b7b0:	e8 ab ab 00 00       	call   c0016360 <KeRestorePreemption()>
c000b7b5:	31 ed                	xor    ebp,ebp
c000b7b7:	eb 5f                	jmp    c000b818 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000b7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000b7bc:	83 ec 0c             	sub    esp,0xc
c000b7bf:	53                   	push   ebx
c000b7c0:	e8 bf fb ff ff       	call   c000b384 <VCache::invalidateReadBuffer()>
c000b7c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7c8:	5a                   	pop    edx
c000b7c9:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b7cf:	56                   	push   esi
c000b7d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7d8:	50                   	push   eax
c000b7d9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b7dc:	83 c4 20             	add    esp,0x20
c000b7df:	89 c5                	mov    ebp,eax
c000b7e1:	89 f8                	mov    eax,edi
c000b7e3:	84 c0                	test   al,al
c000b7e5:	74 29                	je     c000b810 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b7e7:	50                   	push   eax
c000b7e8:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b7ec:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b7f2:	66 90                	xchg   ax,ax
c000b7f4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7f9:	99                   	cdq    
c000b7fa:	f7 f9                	idiv   ecx
c000b7fc:	50                   	push   eax
c000b7fd:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b801:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b807:	e8 8a 85 00 00       	call   c0013d96 <VAS::unlockPages(unsigned long, int)>
c000b80c:	83 c4 10             	add    esp,0x10
c000b80f:	90                   	nop
c000b810:	e8 4b ab 00 00       	call   c0016360 <KeRestorePreemption()>
c000b815:	8d 76 00             	lea    esi,[esi+0x0]
c000b818:	83 c4 2c             	add    esp,0x2c
c000b81b:	89 e8                	mov    eax,ebp
c000b81d:	5b                   	pop    ebx
c000b81e:	5e                   	pop    esi
c000b81f:	5f                   	pop    edi
c000b820:	5d                   	pop    ebp
c000b821:	c3                   	ret    

c000b822 <Video::putrect(int, int, int, int, unsigned int)>:
c000b822:	55                   	push   ebp
c000b823:	57                   	push   edi
c000b824:	56                   	push   esi
c000b825:	53                   	push   ebx
c000b826:	83 ec 1c             	sub    esp,0x1c
c000b829:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b82d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b831:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b835:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b839:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b83d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b841:	01 df                	add    edi,ebx
c000b843:	39 fb                	cmp    ebx,edi
c000b845:	7d 1f                	jge    c000b866 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b847:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b84b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b84f:	7d 12                	jge    c000b863 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b851:	8b 16                	mov    edx,DWORD PTR [esi]
c000b853:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b857:	53                   	push   ebx
c000b858:	55                   	push   ebp
c000b859:	45                   	inc    ebp
c000b85a:	56                   	push   esi
c000b85b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b85e:	83 c4 10             	add    esp,0x10
c000b861:	eb e8                	jmp    c000b84b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b863:	43                   	inc    ebx
c000b864:	eb dd                	jmp    c000b843 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b866:	83 c4 1c             	add    esp,0x1c
c000b869:	5b                   	pop    ebx
c000b86a:	5e                   	pop    esi
c000b86b:	5f                   	pop    edi
c000b86c:	5d                   	pop    ebp
c000b86d:	c3                   	ret    

c000b86e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b86e:	55                   	push   ebp
c000b86f:	57                   	push   edi
c000b870:	31 ff                	xor    edi,edi
c000b872:	56                   	push   esi
c000b873:	53                   	push   ebx
c000b874:	83 ec 1c             	sub    esp,0x1c
c000b877:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b87b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b87f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b886:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b88b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b88f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b893:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b897:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b89a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b89e:	01 f9                	add    ecx,edi
c000b8a0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b8a4:	7d 2f                	jge    c000b8d5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b8a6:	31 f6                	xor    esi,esi
c000b8a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8ac:	01 f2                	add    edx,esi
c000b8ae:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8b2:	7d 1a                	jge    c000b8ce <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b8b4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b8b7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b8ba:	46                   	inc    esi
c000b8bb:	51                   	push   ecx
c000b8bc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b8c0:	52                   	push   edx
c000b8c1:	55                   	push   ebp
c000b8c2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8c5:	83 c4 10             	add    esp,0x10
c000b8c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b8cc:	eb da                	jmp    c000b8a8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b8ce:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b8d2:	47                   	inc    edi
c000b8d3:	eb c5                	jmp    c000b89a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b8d5:	83 c4 1c             	add    esp,0x1c
c000b8d8:	5b                   	pop    ebx
c000b8d9:	5e                   	pop    esi
c000b8da:	5f                   	pop    edi
c000b8db:	5d                   	pop    ebp
c000b8dc:	c3                   	ret    
c000b8dd:	90                   	nop

c000b8de <Video::blit(unsigned int*, int, int, int, int)>:
c000b8de:	55                   	push   ebp
c000b8df:	ba 00 00 00 00       	mov    edx,0x0
c000b8e4:	57                   	push   edi
c000b8e5:	56                   	push   esi
c000b8e6:	53                   	push   ebx
c000b8e7:	83 ec 1c             	sub    esp,0x1c
c000b8ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b8ee:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b8f2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8f6:	85 c0                	test   eax,eax
c000b8f8:	0f 49 d0             	cmovns edx,eax
c000b8fb:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000b902:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000b906:	89 eb                	mov    ebx,ebp
c000b908:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b90c:	01 ea                	add    edx,ebp
c000b90e:	39 da                	cmp    edx,ebx
c000b910:	7e 54                	jle    c000b966 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b912:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b918:	7c 4c                	jl     c000b966 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b91a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b91e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b922:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b926:	01 c1                	add    ecx,eax
c000b928:	39 f9                	cmp    ecx,edi
c000b92a:	7e 2f                	jle    c000b95b <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000b92c:	83 c2 04             	add    edx,0x4
c000b92f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b935:	7c 21                	jl     c000b958 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000b937:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b93b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b93d:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000b940:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b944:	55                   	push   ebp
c000b945:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b949:	56                   	push   esi
c000b94a:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b94d:	83 c4 10             	add    esp,0x10
c000b950:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b954:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b958:	47                   	inc    edi
c000b959:	eb c7                	jmp    c000b922 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000b95b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000b95f:	43                   	inc    ebx
c000b960:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000b964:	eb a2                	jmp    c000b908 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000b966:	83 c4 1c             	add    esp,0x1c
c000b969:	5b                   	pop    ebx
c000b96a:	5e                   	pop    esi
c000b96b:	5f                   	pop    edi
c000b96c:	5d                   	pop    ebp
c000b96d:	c3                   	ret    

c000b96e <Video::clearScreen(unsigned int)>:
c000b96e:	83 ec 14             	sub    esp,0x14
c000b971:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b975:	8b 10                	mov    edx,DWORD PTR [eax]
c000b977:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b97b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000b981:	ff b0 58 01 00 00    	push   DWORD PTR [eax+0x158]
c000b987:	6a 00                	push   0x0
c000b989:	6a 00                	push   0x0
c000b98b:	50                   	push   eax
c000b98c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b98f:	83 c4 2c             	add    esp,0x2c
c000b992:	c3                   	ret    
c000b993:	90                   	nop

c000b994 <Video::putpixel(int, int, unsigned int)>:
c000b994:	c7 44 24 04 48 3e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023e48
c000b99c:	e9 1b 41 00 00       	jmp    c000fabc <KePanic(char const*)>
c000b9a1:	90                   	nop

c000b9a2 <Video::readPixelApprox(int, int)>:
c000b9a2:	83 ec 18             	sub    esp,0x18
c000b9a5:	68 69 3e 02 c0       	push   0xc0023e69
c000b9aa:	e8 0d 41 00 00       	call   c000fabc <KePanic(char const*)>
c000b9af:	31 c0                	xor    eax,eax
c000b9b1:	83 c4 1c             	add    esp,0x1c
c000b9b4:	c3                   	ret    
c000b9b5:	90                   	nop

c000b9b6 <Video::Video(char const*)>:
c000b9b6:	83 ec 0c             	sub    esp,0xc
c000b9b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9bd:	83 ec 08             	sub    esp,0x8
c000b9c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9c4:	50                   	push   eax
c000b9c5:	e8 8e e1 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	ba 0c 3f 02 c0       	mov    edx,0xc0023f0c
c000b9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9d6:	89 10                	mov    DWORD PTR [eax],edx
c000b9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9dc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b9e6:	90                   	nop
c000b9e7:	83 c4 0c             	add    esp,0xc
c000b9ea:	c3                   	ret    
c000b9eb:	90                   	nop

c000b9ec <Video::~Video()>:
c000b9ec:	83 ec 0c             	sub    esp,0xc
c000b9ef:	ba 0c 3f 02 c0       	mov    edx,0xc0023f0c
c000b9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9f8:	89 10                	mov    DWORD PTR [eax],edx
c000b9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fe:	83 ec 0c             	sub    esp,0xc
c000ba01:	50                   	push   eax
c000ba02:	e8 f1 de ff ff       	call   c00098f8 <Device::~Device()>
c000ba07:	83 c4 10             	add    esp,0x10
c000ba0a:	90                   	nop
c000ba0b:	83 c4 0c             	add    esp,0xc
c000ba0e:	c3                   	ret    
c000ba0f:	90                   	nop

c000ba10 <Video::~Video()>:
c000ba10:	83 ec 0c             	sub    esp,0xc
c000ba13:	83 ec 0c             	sub    esp,0xc
c000ba16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba1a:	e8 cd ff ff ff       	call   c000b9ec <Video::~Video()>
c000ba1f:	83 c4 10             	add    esp,0x10
c000ba22:	83 ec 08             	sub    esp,0x8
c000ba25:	68 64 01 00 00       	push   0x164
c000ba2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba2e:	e8 3d 18 00 00       	call   c000d270 <operator delete(void*, unsigned long)>
c000ba33:	83 c4 10             	add    esp,0x10
c000ba36:	83 c4 0c             	add    esp,0xc
c000ba39:	c3                   	ret    

c000ba3a <Video::isMonochrome()>:
c000ba3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba3e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba44:	c3                   	ret    
c000ba45:	90                   	nop

c000ba46 <Video::getWidth()>:
c000ba46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba4a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba50:	c3                   	ret    
c000ba51:	90                   	nop

c000ba52 <Video::getHeight()>:
c000ba52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba56:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba5c:	c3                   	ret    
c000ba5d:	90                   	nop

c000ba5e <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba5e:	55                   	push   ebp
c000ba5f:	57                   	push   edi
c000ba60:	56                   	push   esi
c000ba61:	53                   	push   ebx
c000ba62:	83 ec 2c             	sub    esp,0x2c
c000ba65:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ba69:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ba6d:	83 f8 01             	cmp    eax,0x1
c000ba70:	19 c9                	sbb    ecx,ecx
c000ba72:	31 db                	xor    ebx,ebx
c000ba74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ba78:	89 ce                	mov    esi,ecx
c000ba7a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ba82:	f7 d6                	not    esi
c000ba84:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ba8a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ba8e:	01 d8                	add    eax,ebx
c000ba90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ba94:	57                   	push   edi
c000ba95:	e8 b8 ff ff ff       	call   c000ba52 <Video::getHeight()>
c000ba9a:	59                   	pop    ecx
c000ba9b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ba9f:	7e 70                	jle    c000bb11 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000baa1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000baa5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000baa9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000baac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bab0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bab4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	89 e8                	mov    eax,ebp
c000bac1:	83 c0 20             	add    eax,0x20
c000bac4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bac8:	57                   	push   edi
c000bac9:	e8 78 ff ff ff       	call   c000ba46 <Video::getWidth()>
c000bace:	5a                   	pop    edx
c000bacf:	39 c5                	cmp    ebp,eax
c000bad1:	7d 34                	jge    c000bb07 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bad3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bad8:	74 05                	je     c000badf <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bada:	8b 07                	mov    eax,DWORD PTR [edi]
c000badc:	56                   	push   esi
c000badd:	eb 0d                	jmp    c000baec <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000badf:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bae4:	74 12                	je     c000baf8 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bae6:	8b 07                	mov    eax,DWORD PTR [edi]
c000bae8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000baf0:	55                   	push   ebp
c000baf1:	57                   	push   edi
c000baf2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000baf5:	83 c4 10             	add    esp,0x10
c000baf8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bafc:	45                   	inc    ebp
c000bafd:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb01:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000bb05:	75 c1                	jne    c000bac8 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb07:	43                   	inc    ebx
c000bb08:	83 fb 20             	cmp    ebx,0x20
c000bb0b:	0f 85 79 ff ff ff    	jne    c000ba8a <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb11:	83 c4 2c             	add    esp,0x2c
c000bb14:	5b                   	pop    ebx
c000bb15:	5e                   	pop    esi
c000bb16:	5f                   	pop    edi
c000bb17:	5d                   	pop    ebp
c000bb18:	c3                   	ret    
c000bb19:	90                   	nop

c000bb1a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb1a:	55                   	push   ebp
c000bb1b:	57                   	push   edi
c000bb1c:	56                   	push   esi
c000bb1d:	53                   	push   ebx
c000bb1e:	83 ec 48             	sub    esp,0x48
c000bb21:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb25:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb29:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb2d:	c1 e0 08             	shl    eax,0x8
c000bb30:	01 d0                	add    eax,edx
c000bb32:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb3a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb3e:	c1 e0 08             	shl    eax,0x8
c000bb41:	01 d0                	add    eax,edx
c000bb43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb4b:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000bb50:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb58:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb5f:	50                   	push   eax
c000bb60:	e8 03 3b 00 00       	call   c000f668 <malloc>
c000bb65:	83 c4 10             	add    esp,0x10
c000bb68:	85 c0                	test   eax,eax
c000bb6a:	89 c5                	mov    ebp,eax
c000bb6c:	75 10                	jne    c000bb7e <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000bb6e:	83 ec 0c             	sub    esp,0xc
c000bb71:	68 94 3e 02 c0       	push   0xc0023e94
c000bb76:	e8 41 3f 00 00       	call   c000fabc <KePanic(char const*)>
c000bb7b:	83 c4 10             	add    esp,0x10
c000bb7e:	52                   	push   edx
c000bb7f:	bf 12 00 00 00       	mov    edi,0x12
c000bb84:	52                   	push   edx
c000bb85:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bb89:	50                   	push   eax
c000bb8a:	68 a4 3e 02 c0       	push   0xc0023ea4
c000bb8f:	e8 d2 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bb94:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bb97:	83 e0 20             	and    eax,0x20
c000bb9a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000bb9e:	85 c0                	test   eax,eax
c000bba0:	59                   	pop    ecx
c000bba1:	0f 94 c0             	sete   al
c000bba4:	0f b6 c0             	movzx  eax,al
c000bba7:	5e                   	pop    esi
c000bba8:	50                   	push   eax
c000bba9:	68 ae 3e 02 c0       	push   0xc0023eae
c000bbae:	e8 b3 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bbb3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000bbb7:	83 c4 10             	add    esp,0x10
c000bbba:	85 c0                	test   eax,eax
c000bbbc:	89 c2                	mov    edx,eax
c000bbbe:	74 11                	je     c000bbd1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000bbc0:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000bbc4:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bbc8:	c1 ff 03             	sar    edi,0x3
c000bbcb:	0f af f9             	imul   edi,ecx
c000bbce:	83 c7 12             	add    edi,0x12
c000bbd1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbd6:	74 07                	je     c000bbdf <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000bbd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bbdd:	75 12                	jne    c000bbf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000bbdf:	83 ec 0c             	sub    esp,0xc
c000bbe2:	68 bc 3e 02 c0       	push   0xc0023ebc
c000bbe7:	e8 7a b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bbec:	e9 aa 02 00 00       	jmp    c000be9b <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000bbf1:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bbf5:	83 f9 02             	cmp    ecx,0x2
c000bbf8:	74 0e                	je     c000bc08 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000bbfa:	83 f9 0a             	cmp    ecx,0xa
c000bbfd:	0f 84 d1 00 00 00    	je     c000bcd4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000bc03:	e9 7e 02 00 00       	jmp    c000be86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000bc08:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc0d:	75 0e                	jne    c000bc1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc0f:	84 d2                	test   dl,dl
c000bc11:	75 0a                	jne    c000bc1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc13:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc16:	83 e8 18             	sub    eax,0x18
c000bc19:	a8 f7                	test   al,0xf7
c000bc1b:	74 0d                	je     c000bc2a <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000bc1d:	83 ec 0c             	sub    esp,0xc
c000bc20:	68 d1 3e 02 c0       	push   0xc0023ed1
c000bc25:	e9 64 02 00 00       	jmp    c000be8e <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bc2a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc32:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000bc37:	31 c0                	xor    eax,eax
c000bc39:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000bc3d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bc45:	89 c6                	mov    esi,eax
c000bc47:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bc4c:	75 15                	jne    c000bc63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc4e:	99                   	cdq    
c000bc4f:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bc53:	85 d2                	test   edx,edx
c000bc55:	75 0c                	jne    c000bc63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc57:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000bc5b:	29 c6                	sub    esi,eax
c000bc5d:	4e                   	dec    esi
c000bc5e:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000bc63:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bc67:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc6f:	75 0c                	jne    c000bc7d <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000bc71:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000bc76:	c1 e2 18             	shl    edx,0x18
c000bc79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc7d:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000bc82:	8d 46 01             	lea    eax,[esi+0x1]
c000bc85:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000bc89:	c1 e1 10             	shl    ecx,0x10
c000bc8c:	89 ca                	mov    edx,ecx
c000bc8e:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000bc93:	c1 e1 08             	shl    ecx,0x8
c000bc96:	09 d1                	or     ecx,edx
c000bc98:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bc9c:	09 d1                	or     ecx,edx
c000bc9e:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000bca2:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000bca6:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bcaa:	c1 fa 03             	sar    edx,0x3
c000bcad:	01 d7                	add    edi,edx
c000bcaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bcb3:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000bcb7:	7e 04                	jle    c000bcbd <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000bcb9:	89 c6                	mov    esi,eax
c000bcbb:	eb 8a                	jmp    c000bc47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000bcbd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bcc1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcc5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bcc9:	0f 8f 6e ff ff ff    	jg     c000bc3d <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000bccf:	e9 ce 01 00 00       	jmp    c000bea2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bcd4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bcd9:	75 0e                	jne    c000bce9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bcdb:	85 c0                	test   eax,eax
c000bcdd:	75 0a                	jne    c000bce9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bcdf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bce2:	83 e8 18             	sub    eax,0x18
c000bce5:	a8 f7                	test   al,0xf7
c000bce7:	74 0d                	je     c000bcf6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000bce9:	83 ec 0c             	sub    esp,0xc
c000bcec:	68 df 3e 02 c0       	push   0xc0023edf
c000bcf1:	e9 98 01 00 00       	jmp    c000be8e <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bcf6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bcfe:	31 c9                	xor    ecx,ecx
c000bd00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bd08:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000bd0c:	0f 8d 90 01 00 00    	jge    c000bea2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd16:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000bd1a:	0f 8e 82 01 00 00    	jle    c000bea2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd20:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bd24:	8d 77 01             	lea    esi,[edi+0x1]
c000bd27:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd2b:	83 fa 7f             	cmp    edx,0x7f
c000bd2e:	89 d0                	mov    eax,edx
c000bd30:	0f 8e a3 00 00 00    	jle    c000bdd9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000bd36:	83 e0 7f             	and    eax,0x7f
c000bd39:	31 d2                	xor    edx,edx
c000bd3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd3f:	40                   	inc    eax
c000bd40:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bd48:	75 08                	jne    c000bd52 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000bd4a:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000bd4f:	c1 e2 18             	shl    edx,0x18
c000bd52:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000bd57:	c1 e0 10             	shl    eax,0x10
c000bd5a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd5e:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000bd63:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000bd67:	c1 e0 08             	shl    eax,0x8
c000bd6a:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000bd6e:	09 f8                	or     eax,edi
c000bd70:	31 ff                	xor    edi,edi
c000bd72:	09 d0                	or     eax,edx
c000bd74:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd78:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bd7d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd81:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000bd86:	75 1d                	jne    c000bda5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bd88:	89 c8                	mov    eax,ecx
c000bd8a:	99                   	cdq    
c000bd8b:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bd8f:	85 d2                	test   edx,edx
c000bd91:	75 12                	jne    c000bda5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bd93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd97:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000bd9b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bd9f:	49                   	dec    ecx
c000bda0:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000bda5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bda9:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdac:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000bdb0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000bdb4:	8d 47 01             	lea    eax,[edi+0x1]
c000bdb7:	7e 06                	jle    c000bdbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000bdb9:	89 c7                	mov    edi,eax
c000bdbb:	89 d1                	mov    ecx,edx
c000bdbd:	eb c2                	jmp    c000bd81 <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000bdbf:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bdc3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000bdc7:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000bdcb:	c1 f8 03             	sar    eax,0x3
c000bdce:	01 c6                	add    esi,eax
c000bdd0:	89 d1                	mov    ecx,edx
c000bdd2:	89 f7                	mov    edi,esi
c000bdd4:	e9 2f ff ff ff       	jmp    c000bd08 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000bdd9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bde1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bde5:	40                   	inc    eax
c000bde6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bdef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bdf3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000bdf8:	75 1d                	jne    c000be17 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000bdfa:	89 c8                	mov    eax,ecx
c000bdfc:	99                   	cdq    
c000bdfd:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000be01:	85 d2                	test   edx,edx
c000be03:	75 12                	jne    c000be17 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be09:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000be0d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000be11:	49                   	dec    ecx
c000be12:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000be17:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be1b:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be23:	75 0c                	jne    c000be31 <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000be25:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000be2a:	c1 e7 18             	shl    edi,0x18
c000be2d:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be31:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000be36:	8d 51 01             	lea    edx,[ecx+0x1]
c000be39:	c1 e0 10             	shl    eax,0x10
c000be3c:	89 c7                	mov    edi,eax
c000be3e:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000be43:	c1 e0 08             	shl    eax,0x8
c000be46:	09 f8                	or     eax,edi
c000be48:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000be4c:	09 f8                	or     eax,edi
c000be4e:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be52:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000be56:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000be5a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be5e:	c1 f8 03             	sar    eax,0x3
c000be61:	01 c6                	add    esi,eax
c000be63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be67:	40                   	inc    eax
c000be68:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000be6c:	7e 0b                	jle    c000be79 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000be6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be72:	89 d1                	mov    ecx,edx
c000be74:	e9 7a ff ff ff       	jmp    c000bdf3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000be79:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000be7d:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000be81:	e9 4a ff ff ff       	jmp    c000bdd0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000be86:	50                   	push   eax
c000be87:	50                   	push   eax
c000be88:	51                   	push   ecx
c000be89:	68 ee 3e 02 c0       	push   0xc0023eee
c000be8e:	e8 d3 b0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000be93:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be96:	e8 dd 37 00 00       	call   c000f678 <free>
c000be9b:	83 c4 10             	add    esp,0x10
c000be9e:	31 ed                	xor    ebp,ebp
c000bea0:	eb 14                	jmp    c000beb6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000bea2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bea6:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000beaa:	89 18                	mov    DWORD PTR [eax],ebx
c000beac:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000beb0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000beb4:	89 18                	mov    DWORD PTR [eax],ebx
c000beb6:	83 c4 3c             	add    esp,0x3c
c000beb9:	89 e8                	mov    eax,ebp
c000bebb:	5b                   	pop    ebx
c000bebc:	5e                   	pop    esi
c000bebd:	5f                   	pop    edi
c000bebe:	5d                   	pop    ebp
c000bebf:	c3                   	ret    

c000bec0 <Video::putTGA(int, int, unsigned char*, int)>:
c000bec0:	55                   	push   ebp
c000bec1:	57                   	push   edi
c000bec2:	56                   	push   esi
c000bec3:	53                   	push   ebx
c000bec4:	83 ec 28             	sub    esp,0x28
c000bec7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000becb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000becf:	50                   	push   eax
c000bed0:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bed4:	50                   	push   eax
c000bed5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bed9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bedd:	55                   	push   ebp
c000bede:	e8 37 fc ff ff       	call   c000bb1a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bee3:	83 c4 20             	add    esp,0x20
c000bee6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000beea:	85 c0                	test   eax,eax
c000beec:	74 3b                	je     c000bf29 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000beee:	89 c6                	mov    esi,eax
c000bef0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bef4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bef8:	39 d8                	cmp    eax,ebx
c000befa:	7e 2d                	jle    c000bf29 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000befc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bf00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf04:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf08:	39 f8                	cmp    eax,edi
c000bf0a:	7e 1a                	jle    c000bf26 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000bf0c:	83 c6 04             	add    esi,0x4
c000bf0f:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf12:	85 c0                	test   eax,eax
c000bf14:	79 0d                	jns    c000bf23 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000bf16:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf19:	50                   	push   eax
c000bf1a:	53                   	push   ebx
c000bf1b:	57                   	push   edi
c000bf1c:	55                   	push   ebp
c000bf1d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000bf20:	83 c4 10             	add    esp,0x10
c000bf23:	47                   	inc    edi
c000bf24:	eb da                	jmp    c000bf00 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf26:	43                   	inc    ebx
c000bf27:	eb c7                	jmp    c000bef0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf29:	83 c4 1c             	add    esp,0x1c
c000bf2c:	5b                   	pop    ebx
c000bf2d:	5e                   	pop    esi
c000bf2e:	5f                   	pop    edi
c000bf2f:	5d                   	pop    ebp
c000bf30:	c3                   	ret    
c000bf31:	66 90                	xchg   ax,ax
c000bf33:	90                   	nop

c000bf34 <ACPI::close(int, int, void*)>:
c000bf34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf39:	c3                   	ret    
c000bf3a:	66 90                	xchg   ax,ax

c000bf3c <loadACPITables(unsigned char*)>:
c000bf3c:	57                   	push   edi
c000bf3d:	56                   	push   esi
c000bf3e:	53                   	push   ebx
c000bf3f:	83 ec 60             	sub    esp,0x60
c000bf42:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf47:	0f 84 43 02 00 00    	je     c000c190 <loadACPITables(unsigned char*)+0x254>
c000bf4d:	a0 80 cd 02 c0       	mov    al,ds:0xc002cd80
c000bf52:	0f b6 c0             	movzx  eax,al
c000bf55:	85 c0                	test   eax,eax
c000bf57:	74 7b                	je     c000bfd4 <loadACPITables(unsigned char*)+0x98>
c000bf59:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf5d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf61:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf68:	83 e8 24             	sub    eax,0x24
c000bf6b:	c1 e8 03             	shr    eax,0x3
c000bf6e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bf72:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bf7a:	66 90                	xchg   ax,ax
c000bf7c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf80:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bf84:	0f 8d ba 00 00 00    	jge    c000c044 <loadACPITables(unsigned char*)+0x108>
c000bf8a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf8e:	83 c0 24             	add    eax,0x24
c000bf91:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bf95:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bf99:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bf9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfa1:	c1 e0 03             	shl    eax,0x3
c000bfa4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bfa8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bfac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bfaf:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfb1:	89 c1                	mov    ecx,eax
c000bfb3:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000bfb8:	8d 50 01             	lea    edx,[eax+0x1]
c000bfbb:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000bfc1:	89 ca                	mov    edx,ecx
c000bfc3:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000bfca:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000bfcf:	eb ab                	jmp    c000bf7c <loadACPITables(unsigned char*)+0x40>
c000bfd1:	8d 76 00             	lea    esi,[esi+0x0]
c000bfd4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfd8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bfdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfe3:	83 e8 24             	sub    eax,0x24
c000bfe6:	c1 e8 02             	shr    eax,0x2
c000bfe9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000bfed:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000bff5:	8d 76 00             	lea    esi,[esi+0x0]
c000bff8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000bffc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c000:	7d 42                	jge    c000c044 <loadACPITables(unsigned char*)+0x108>
c000c002:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c006:	83 c0 24             	add    eax,0x24
c000c009:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c00d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c011:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c015:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c019:	c1 e0 02             	shl    eax,0x2
c000c01c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c020:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c024:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c026:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c02b:	8d 50 01             	lea    edx,[eax+0x1]
c000c02e:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c034:	89 ca                	mov    edx,ecx
c000c036:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c03d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c042:	eb b4                	jmp    c000bff8 <loadACPITables(unsigned char*)+0xbc>
c000c044:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c04c:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c051:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c055:	0f 8d 39 01 00 00    	jge    c000c194 <loadACPITables(unsigned char*)+0x258>
c000c05b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c05f:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c066:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c06a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c06e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c072:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c076:	25 ff 0f 00 00       	and    eax,0xfff
c000c07b:	89 c6                	mov    esi,eax
c000c07d:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c000c083:	83 ec 0c             	sub    esp,0xc
c000c086:	6a 01                	push   0x1
c000c088:	e8 76 6f 00 00       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c000c08d:	83 c4 10             	add    esp,0x10
c000c090:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c094:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c09a:	83 ec 0c             	sub    esp,0xc
c000c09d:	6a 01                	push   0x1
c000c09f:	6a 01                	push   0x1
c000c0a1:	50                   	push   eax
c000c0a2:	52                   	push   edx
c000c0a3:	53                   	push   ebx
c000c0a4:	e8 2d 78 00 00       	call   c00138d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0a9:	83 c4 20             	add    esp,0x20
c000c0ac:	09 f0                	or     eax,esi
c000c0ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0b2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0b6:	c1 e0 03             	shl    eax,0x3
c000c0b9:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c0be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c0c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0ca:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c0d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c0e6:	89 c6                	mov    esi,eax
c000c0e8:	89 d7                	mov    edi,edx
c000c0ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c0ec:	89 c8                	mov    eax,ecx
c000c0ee:	89 fa                	mov    edx,edi
c000c0f0:	89 f3                	mov    ebx,esi
c000c0f2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c0f6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c0fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c0fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c102:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c105:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c109:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c10d:	05 00 10 00 00       	add    eax,0x1000
c000c112:	c1 e8 0c             	shr    eax,0xc
c000c115:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c119:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c11d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c121:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c125:	25 ff 0f 00 00       	and    eax,0xfff
c000c12a:	89 c6                	mov    esi,eax
c000c12c:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c000c132:	83 ec 0c             	sub    esp,0xc
c000c135:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c139:	e8 c5 6e 00 00       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c000c13e:	83 c4 10             	add    esp,0x10
c000c141:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c145:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c14b:	83 ec 0c             	sub    esp,0xc
c000c14e:	6a 01                	push   0x1
c000c150:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c154:	50                   	push   eax
c000c155:	52                   	push   edx
c000c156:	53                   	push   ebx
c000c157:	e8 7a 77 00 00       	call   c00138d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c15c:	83 c4 20             	add    esp,0x20
c000c15f:	09 f0                	or     eax,esi
c000c161:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c169:	83 ec 0c             	sub    esp,0xc
c000c16c:	50                   	push   eax
c000c16d:	e8 8f 71 00 00       	call   c0013301 <Virt::freeKernelVirtualPages(unsigned long)>
c000c172:	83 c4 10             	add    esp,0x10
c000c175:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c179:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c17d:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c184:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c189:	e9 be fe ff ff       	jmp    c000c04c <loadACPITables(unsigned char*)+0x110>
c000c18e:	66 90                	xchg   ax,ax
c000c190:	90                   	nop
c000c191:	8d 76 00             	lea    esi,[esi+0x0]
c000c194:	83 c4 60             	add    esp,0x60
c000c197:	5b                   	pop    ebx
c000c198:	5e                   	pop    esi
c000c199:	5f                   	pop    edi
c000c19a:	c3                   	ret    
c000c19b:	90                   	nop

c000c19c <findRSDT(unsigned char*)>:
c000c19c:	57                   	push   edi
c000c19d:	56                   	push   esi
c000c19e:	53                   	push   ebx
c000c19f:	83 ec 50             	sub    esp,0x50
c000c1a2:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c1a7:	85 c0                	test   eax,eax
c000c1a9:	75 0d                	jne    c000c1b8 <findRSDT(unsigned char*)+0x1c>
c000c1ab:	b8 00 00 00 00       	mov    eax,0x0
c000c1b0:	e9 2b 01 00 00       	jmp    c000c2e0 <findRSDT(unsigned char*)+0x144>
c000c1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1b8:	89 e0                	mov    eax,esp
c000c1ba:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c1be:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c1c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c1c6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c1ce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c1d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c1da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c1de:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c1e2:	89 c6                	mov    esi,eax
c000c1e4:	89 d7                	mov    edi,edx
c000c1e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c1e8:	89 c8                	mov    eax,ecx
c000c1ea:	89 fa                	mov    edx,edi
c000c1ec:	89 f3                	mov    ebx,esi
c000c1ee:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c1f2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c1f6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c1fa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c1fe:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c202:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c20a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c20e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c212:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c21e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c222:	25 ff 0f 00 00       	and    eax,0xfff
c000c227:	89 c6                	mov    esi,eax
c000c229:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c000c22f:	83 ec 0c             	sub    esp,0xc
c000c232:	6a 02                	push   0x2
c000c234:	e8 ca 6d 00 00       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c000c239:	83 c4 10             	add    esp,0x10
c000c23c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c240:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c246:	83 ec 0c             	sub    esp,0xc
c000c249:	6a 01                	push   0x1
c000c24b:	6a 02                	push   0x2
c000c24d:	50                   	push   eax
c000c24e:	52                   	push   edx
c000c24f:	53                   	push   ebx
c000c250:	e8 81 76 00 00       	call   c00138d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c255:	83 c4 20             	add    esp,0x20
c000c258:	09 f0                	or     eax,esi
c000c25a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c25e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c262:	25 ff 0f 00 00       	and    eax,0xfff
c000c267:	89 c6                	mov    esi,eax
c000c269:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c000c26f:	83 ec 0c             	sub    esp,0xc
c000c272:	6a 02                	push   0x2
c000c274:	e8 8a 6d 00 00       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c280:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c286:	83 ec 0c             	sub    esp,0xc
c000c289:	6a 01                	push   0x1
c000c28b:	6a 02                	push   0x2
c000c28d:	50                   	push   eax
c000c28e:	52                   	push   edx
c000c28f:	53                   	push   ebx
c000c290:	e8 41 76 00 00       	call   c00138d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c295:	83 c4 20             	add    esp,0x20
c000c298:	09 f0                	or     eax,esi
c000c29a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c29e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	75 11                	jne    c000c2b8 <findRSDT(unsigned char*)+0x11c>
c000c2a7:	c6 05 80 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd80,0x0
c000c2ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2b2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2b6:	eb 24                	jmp    c000c2dc <findRSDT(unsigned char*)+0x140>
c000c2b8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2bd:	83 f8 02             	cmp    eax,0x2
c000c2c0:	75 12                	jne    c000c2d4 <findRSDT(unsigned char*)+0x138>
c000c2c2:	c6 05 80 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd80,0x1
c000c2c9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c2cd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2d1:	eb 09                	jmp    c000c2dc <findRSDT(unsigned char*)+0x140>
c000c2d3:	90                   	nop
c000c2d4:	b8 00 00 00 00       	mov    eax,0x0
c000c2d9:	eb 05                	jmp    c000c2e0 <findRSDT(unsigned char*)+0x144>
c000c2db:	90                   	nop
c000c2dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c2e0:	83 c4 50             	add    esp,0x50
c000c2e3:	5b                   	pop    ebx
c000c2e4:	5e                   	pop    esi
c000c2e5:	5f                   	pop    edi
c000c2e6:	c3                   	ret    
c000c2e7:	90                   	nop

c000c2e8 <findDataTable(unsigned char*, char*)>:
c000c2e8:	83 ec 1c             	sub    esp,0x1c
c000c2eb:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c2f0:	75 0a                	jne    c000c2fc <findDataTable(unsigned char*, char*)+0x14>
c000c2f2:	b8 00 00 00 00       	mov    eax,0x0
c000c2f7:	eb 5f                	jmp    c000c358 <findDataTable(unsigned char*, char*)+0x70>
c000c2f9:	8d 76 00             	lea    esi,[esi+0x0]
c000c2fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c304:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c309:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c30d:	7d 41                	jge    c000c350 <findDataTable(unsigned char*, char*)+0x68>
c000c30f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c313:	c1 e0 03             	shl    eax,0x3
c000c316:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c31b:	83 ec 04             	sub    esp,0x4
c000c31e:	6a 04                	push   0x4
c000c320:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c324:	50                   	push   eax
c000c325:	e8 56 40 ff ff       	call   c0000380 <memcmp>
c000c32a:	83 c4 10             	add    esp,0x10
c000c32d:	85 c0                	test   eax,eax
c000c32f:	0f 94 c0             	sete   al
c000c332:	0f b6 c0             	movzx  eax,al
c000c335:	85 c0                	test   eax,eax
c000c337:	74 0f                	je     c000c348 <findDataTable(unsigned char*, char*)+0x60>
c000c339:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c33d:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c344:	eb 12                	jmp    c000c358 <findDataTable(unsigned char*, char*)+0x70>
c000c346:	66 90                	xchg   ax,ax
c000c348:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c34d:	eb b5                	jmp    c000c304 <findDataTable(unsigned char*, char*)+0x1c>
c000c34f:	90                   	nop
c000c350:	b8 00 00 00 00       	mov    eax,0x0
c000c355:	8d 76 00             	lea    esi,[esi+0x0]
c000c358:	83 c4 1c             	add    esp,0x1c
c000c35b:	c3                   	ret    

c000c35c <scanMADT()>:
c000c35c:	53                   	push   ebx
c000c35d:	83 ec 38             	sub    esp,0x38
c000c360:	c7 05 88 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd88,0x0
c000c36a:	c7 05 84 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd84,0x0
c000c374:	83 ec 0c             	sub    esp,0xc
c000c377:	68 50 3f 02 c0       	push   0xc0023f50
c000c37c:	e8 e5 ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c381:	83 c4 10             	add    esp,0x10
c000c384:	e8 d0 dc 00 00       	call   c001a059 <HalFindRSDP()>
c000c389:	a3 88 cd 02 c0       	mov    ds:0xc002cd88,eax
c000c38e:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c393:	85 c0                	test   eax,eax
c000c395:	0f 84 59 04 00 00    	je     c000c7f4 <scanMADT()+0x498>
c000c39b:	83 ec 0c             	sub    esp,0xc
c000c39e:	68 5e 3f 02 c0       	push   0xc0023f5e
c000c3a3:	e8 be ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c3a8:	83 c4 10             	add    esp,0x10
c000c3ab:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3b0:	83 ec 0c             	sub    esp,0xc
c000c3b3:	50                   	push   eax
c000c3b4:	e8 e3 fd ff ff       	call   c000c19c <findRSDT(unsigned char*)>
c000c3b9:	83 c4 10             	add    esp,0x10
c000c3bc:	a3 84 cd 02 c0       	mov    ds:0xc002cd84,eax
c000c3c1:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c3c6:	85 c0                	test   eax,eax
c000c3c8:	0f 84 2a 04 00 00    	je     c000c7f8 <scanMADT()+0x49c>
c000c3ce:	8b 15 84 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd84
c000c3d4:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3d9:	83 ec 04             	sub    esp,0x4
c000c3dc:	52                   	push   edx
c000c3dd:	50                   	push   eax
c000c3de:	68 08 41 02 c0       	push   0xc0024108
c000c3e3:	e8 7e ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c3e8:	83 c4 10             	add    esp,0x10
c000c3eb:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c3f0:	83 ec 0c             	sub    esp,0xc
c000c3f3:	50                   	push   eax
c000c3f4:	e8 43 fb ff ff       	call   c000bf3c <loadACPITables(unsigned char*)>
c000c3f9:	83 c4 10             	add    esp,0x10
c000c3fc:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c401:	83 ec 08             	sub    esp,0x8
c000c404:	68 6d 3f 02 c0       	push   0xc0023f6d
c000c409:	50                   	push   eax
c000c40a:	e8 d9 fe ff ff       	call   c000c2e8 <findDataTable(unsigned char*, char*)>
c000c40f:	83 c4 10             	add    esp,0x10
c000c412:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c416:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c41b:	0f 84 db 03 00 00    	je     c000c7fc <scanMADT()+0x4a0>
c000c421:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c429:	8d 76 00             	lea    esi,[esi+0x0]
c000c42c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c430:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c433:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c437:	0f 87 c7 03 00 00    	ja     c000c804 <scanMADT()+0x4a8>
c000c43d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c445:	0f 87 b9 03 00 00    	ja     c000c804 <scanMADT()+0x4a8>
c000c44b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c44f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c453:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c457:	8d 50 01             	lea    edx,[eax+0x1]
c000c45a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c45e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c462:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c466:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c46a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c46e:	8d 50 01             	lea    edx,[eax+0x1]
c000c471:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c475:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c479:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c47d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c481:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c486:	83 f8 02             	cmp    eax,0x2
c000c489:	0f 86 71 03 00 00    	jbe    c000c800 <scanMADT()+0x4a4>
c000c48f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c494:	85 c0                	test   eax,eax
c000c496:	75 58                	jne    c000c4f0 <scanMADT()+0x194>
c000c498:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c49c:	8d 50 01             	lea    edx,[eax+0x1]
c000c49f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a3:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c4a9:	0f b6 d2             	movzx  edx,dl
c000c4ac:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4b0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4b4:	88 82 c0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3040],al
c000c4ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4be:	8d 50 01             	lea    edx,[eax+0x1]
c000c4c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c5:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c4cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c4ce:	88 0d 80 cf 02 c0    	mov    BYTE PTR ds:0xc002cf80,cl
c000c4d4:	0f b6 d2             	movzx  edx,dl
c000c4d7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4db:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4df:	88 82 a0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3060],al
c000c4e5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c4ea:	e9 f1 02 00 00       	jmp    c000c7e0 <scanMADT()+0x484>
c000c4ef:	90                   	nop
c000c4f0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4f5:	83 f8 01             	cmp    eax,0x1
c000c4f8:	0f 85 32 01 00 00    	jne    c000c630 <scanMADT()+0x2d4>
c000c4fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c502:	8d 50 01             	lea    edx,[eax+0x1]
c000c505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c509:	8a 15 40 ce 02 c0    	mov    dl,BYTE PTR ds:0xc002ce40
c000c50f:	0f b6 d2             	movzx  edx,dl
c000c512:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c516:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c51a:	88 82 60 ce 02 c0    	mov    BYTE PTR [edx-0x3ffd31a0],al
c000c520:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c525:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c529:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c52d:	01 d0                	add    eax,edx
c000c52f:	83 c0 2c             	add    eax,0x2c
c000c532:	8a 00                	mov    al,BYTE PTR [eax]
c000c534:	0f b6 d0             	movzx  edx,al
c000c537:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c53b:	8d 48 01             	lea    ecx,[eax+0x1]
c000c53e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c542:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c546:	0f b6 c0             	movzx  eax,al
c000c549:	c1 e0 08             	shl    eax,0x8
c000c54c:	89 d1                	mov    ecx,edx
c000c54e:	09 c1                	or     ecx,eax
c000c550:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c554:	8d 50 02             	lea    edx,[eax+0x2]
c000c557:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c55b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c55f:	0f b6 c0             	movzx  eax,al
c000c562:	c1 e0 10             	shl    eax,0x10
c000c565:	09 c1                	or     ecx,eax
c000c567:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c56b:	8d 50 03             	lea    edx,[eax+0x3]
c000c56e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c572:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c576:	0f b6 c0             	movzx  eax,al
c000c579:	c1 e0 18             	shl    eax,0x18
c000c57c:	09 c1                	or     ecx,eax
c000c57e:	89 ca                	mov    edx,ecx
c000c580:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c585:	0f b6 c0             	movzx  eax,al
c000c588:	89 14 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],edx
c000c58f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c594:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c598:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c59c:	01 d0                	add    eax,edx
c000c59e:	83 c0 2c             	add    eax,0x2c
c000c5a1:	8a 00                	mov    al,BYTE PTR [eax]
c000c5a3:	0f b6 d0             	movzx  edx,al
c000c5a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5aa:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5b1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5b5:	0f b6 c0             	movzx  eax,al
c000c5b8:	c1 e0 08             	shl    eax,0x8
c000c5bb:	89 d1                	mov    ecx,edx
c000c5bd:	09 c1                	or     ecx,eax
c000c5bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5c3:	8d 50 02             	lea    edx,[eax+0x2]
c000c5c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5ce:	0f b6 c0             	movzx  eax,al
c000c5d1:	c1 e0 10             	shl    eax,0x10
c000c5d4:	09 c1                	or     ecx,eax
c000c5d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5da:	8d 50 03             	lea    edx,[eax+0x3]
c000c5dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5e1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5e5:	0f b6 c0             	movzx  eax,al
c000c5e8:	c1 e0 18             	shl    eax,0x18
c000c5eb:	09 c1                	or     ecx,eax
c000c5ed:	89 ca                	mov    edx,ecx
c000c5ef:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c5f4:	0f b6 c0             	movzx  eax,al
c000c5f7:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c000c5fe:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c603:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c608:	83 c0 01             	add    eax,0x1
c000c60b:	a2 40 ce 02 c0       	mov    ds:0xc002ce40,al
c000c610:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c615:	0f b6 c0             	movzx  eax,al
c000c618:	83 ec 08             	sub    esp,0x8
c000c61b:	50                   	push   eax
c000c61c:	68 72 3f 02 c0       	push   0xc0023f72
c000c621:	e8 40 a9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c626:	83 c4 10             	add    esp,0x10
c000c629:	e9 b2 01 00 00       	jmp    c000c7e0 <scanMADT()+0x484>
c000c62e:	66 90                	xchg   ax,ax
c000c630:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c635:	83 f8 02             	cmp    eax,0x2
c000c638:	0f 85 ea 00 00 00    	jne    c000c728 <scanMADT()+0x3cc>
c000c63e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c642:	8d 50 01             	lea    edx,[eax+0x1]
c000c645:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c649:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c64d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c651:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c655:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c659:	8d 50 01             	lea    edx,[eax+0x1]
c000c65c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c660:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c664:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c668:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c66c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c670:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c674:	01 d0                	add    eax,edx
c000c676:	83 c0 2c             	add    eax,0x2c
c000c679:	8a 00                	mov    al,BYTE PTR [eax]
c000c67b:	0f b6 d0             	movzx  edx,al
c000c67e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c682:	8d 48 01             	lea    ecx,[eax+0x1]
c000c685:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c689:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c68d:	0f b6 c0             	movzx  eax,al
c000c690:	c1 e0 08             	shl    eax,0x8
c000c693:	89 d1                	mov    ecx,edx
c000c695:	09 c1                	or     ecx,eax
c000c697:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c69b:	8d 50 02             	lea    edx,[eax+0x2]
c000c69e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6a2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6a6:	0f b6 c0             	movzx  eax,al
c000c6a9:	c1 e0 10             	shl    eax,0x10
c000c6ac:	09 c1                	or     ecx,eax
c000c6ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6b2:	8d 50 03             	lea    edx,[eax+0x3]
c000c6b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6b9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6bd:	0f b6 c0             	movzx  eax,al
c000c6c0:	c1 e0 18             	shl    eax,0x18
c000c6c3:	09 c8                	or     eax,ecx
c000c6c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c6c9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c6ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6d6:	01 d0                	add    eax,edx
c000c6d8:	83 c0 2c             	add    eax,0x2c
c000c6db:	8a 00                	mov    al,BYTE PTR [eax]
c000c6dd:	0f b6 d0             	movzx  edx,al
c000c6e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6e4:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6eb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6ef:	0f b6 c0             	movzx  eax,al
c000c6f2:	c1 e0 08             	shl    eax,0x8
c000c6f5:	09 d0                	or     eax,edx
c000c6f7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c6fc:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c701:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c706:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c70a:	88 90 28 66 02 c0    	mov    BYTE PTR [eax-0x3ffd99d8],dl
c000c710:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c715:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000c71a:	66 89 94 00 20 ce 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd31e0],dx
c000c722:	e9 b9 00 00 00       	jmp    c000c7e0 <scanMADT()+0x484>
c000c727:	90                   	nop
c000c728:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c72d:	83 f8 04             	cmp    eax,0x4
c000c730:	0f 85 9a 00 00 00    	jne    c000c7d0 <scanMADT()+0x474>
c000c736:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c73a:	8d 50 01             	lea    edx,[eax+0x1]
c000c73d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c741:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c745:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c749:	0f b6 c0             	movzx  eax,al
c000c74c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c750:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c754:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c758:	01 d0                	add    eax,edx
c000c75a:	83 c0 2c             	add    eax,0x2c
c000c75d:	8a 00                	mov    al,BYTE PTR [eax]
c000c75f:	0f b6 d0             	movzx  edx,al
c000c762:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c766:	8d 48 01             	lea    ecx,[eax+0x1]
c000c769:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c76d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c771:	0f b6 c0             	movzx  eax,al
c000c774:	c1 e0 08             	shl    eax,0x8
c000c777:	09 d0                	or     eax,edx
c000c779:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c77d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c782:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c786:	8d 50 01             	lea    edx,[eax+0x1]
c000c789:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c791:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c795:	0f b6 c0             	movzx  eax,al
c000c798:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7a0:	c1 e0 08             	shl    eax,0x8
c000c7a3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c7a7:	89 c1                	mov    ecx,eax
c000c7a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7ad:	c1 e0 18             	shl    eax,0x18
c000c7b0:	89 c3                	mov    ebx,eax
c000c7b2:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c000c7b7:	8d 50 01             	lea    edx,[eax+0x1]
c000c7ba:	89 15 8c cd 02 c0    	mov    DWORD PTR ds:0xc002cd8c,edx
c000c7c0:	09 d9                	or     ecx,ebx
c000c7c2:	89 ca                	mov    edx,ecx
c000c7c4:	89 14 85 a0 cd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3260],edx
c000c7cb:	eb 13                	jmp    c000c7e0 <scanMADT()+0x484>
c000c7cd:	8d 76 00             	lea    esi,[esi+0x0]
c000c7d0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c7d5:	83 f8 05             	cmp    eax,0x5
c000c7d8:	75 06                	jne    c000c7e0 <scanMADT()+0x484>
c000c7da:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c7df:	90                   	nop
c000c7e0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c7e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c7e9:	01 d0                	add    eax,edx
c000c7eb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c7ef:	e9 38 fc ff ff       	jmp    c000c42c <scanMADT()+0xd0>
c000c7f4:	90                   	nop
c000c7f5:	eb 0d                	jmp    c000c804 <scanMADT()+0x4a8>
c000c7f7:	90                   	nop
c000c7f8:	90                   	nop
c000c7f9:	eb 09                	jmp    c000c804 <scanMADT()+0x4a8>
c000c7fb:	90                   	nop
c000c7fc:	90                   	nop
c000c7fd:	eb 05                	jmp    c000c804 <scanMADT()+0x4a8>
c000c7ff:	90                   	nop
c000c800:	90                   	nop
c000c801:	8d 76 00             	lea    esi,[esi+0x0]
c000c804:	83 c4 38             	add    esp,0x38
c000c807:	5b                   	pop    ebx
c000c808:	c3                   	ret    
c000c809:	90                   	nop
c000c80a:	66 90                	xchg   ax,ax

c000c80c <ACPI::ACPI()>:
c000c80c:	83 ec 0c             	sub    esp,0xc
c000c80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c813:	83 ec 08             	sub    esp,0x8
c000c816:	68 8e 3f 02 c0       	push   0xc0023f8e
c000c81b:	50                   	push   eax
c000c81c:	e8 37 d3 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000c821:	83 c4 10             	add    esp,0x10
c000c824:	ba ac 41 02 c0       	mov    edx,0xc00241ac
c000c829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c82d:	89 10                	mov    DWORD PTR [eax],edx
c000c82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c833:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c83e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c84c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c856:	90                   	nop
c000c857:	83 c4 0c             	add    esp,0xc
c000c85a:	c3                   	ret    
c000c85b:	90                   	nop

c000c85c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c85c:	83 ec 2c             	sub    esp,0x2c
c000c85f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c863:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c867:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000c86b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000c86f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c874:	88 c8                	mov    al,cl
c000c876:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c87a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c87f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c887:	90                   	nop
c000c888:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c88c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c892:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c896:	0f 8d b0 00 00 00    	jge    c000c94c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c89c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8a4:	83 c2 2a             	add    edx,0x2a
c000c8a7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c8ab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c8b0:	0f b7 c0             	movzx  eax,ax
c000c8b3:	39 c2                	cmp    edx,eax
c000c8b5:	0f 85 85 00 00 00    	jne    c000c940 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8c3:	83 c2 2a             	add    edx,0x2a
c000c8c6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c8ca:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c8cf:	0f b6 c0             	movzx  eax,al
c000c8d2:	39 c2                	cmp    edx,eax
c000c8d4:	75 6a                	jne    c000c940 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8d6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c8db:	85 c0                	test   eax,eax
c000c8dd:	74 3d                	je     c000c91c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c8df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8e7:	83 c2 2a             	add    edx,0x2a
c000c8ea:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c8ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8f5:	39 c2                	cmp    edx,eax
c000c8f7:	74 13                	je     c000c90c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c8f9:	83 ec 0c             	sub    esp,0xc
c000c8fc:	68 2c 41 02 c0       	push   0xc002412c
c000c901:	e8 b6 31 00 00       	call   c000fabc <KePanic(char const*)>
c000c906:	83 c4 10             	add    esp,0x10
c000c909:	8d 76 00             	lea    esi,[esi+0x0]
c000c90c:	83 ec 0c             	sub    esp,0xc
c000c90f:	68 93 3f 02 c0       	push   0xc0023f93
c000c914:	e8 a3 31 00 00       	call   c000fabc <KePanic(char const*)>
c000c919:	83 c4 10             	add    esp,0x10
c000c91c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c920:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c924:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c928:	83 c2 2a             	add    edx,0x2a
c000c92b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c92f:	8b 02                	mov    eax,DWORD PTR [edx]
c000c931:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c934:	89 01                	mov    DWORD PTR [ecx],eax
c000c936:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c939:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c93e:	66 90                	xchg   ax,ax
c000c940:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c945:	e9 3e ff ff ff       	jmp    c000c888 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c94a:	66 90                	xchg   ax,ax
c000c94c:	90                   	nop
c000c94d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c951:	83 c4 2c             	add    esp,0x2c
c000c954:	c2 04 00             	ret    0x4
c000c957:	90                   	nop

c000c958 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c958:	83 ec 1c             	sub    esp,0x1c
c000c95b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c95f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c963:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c967:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c96c:	88 c8                	mov    al,cl
c000c96e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c972:	88 d0                	mov    al,dl
c000c974:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c986:	83 c2 2a             	add    edx,0x2a
c000c989:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000c98d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000c991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c995:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c99b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9a6:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000c9ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9af:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9b5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c9b9:	83 c0 01             	add    eax,0x1
c000c9bc:	88 c1                	mov    cl,al
c000c9be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c2:	83 c2 2a             	add    edx,0x2a
c000c9c5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c9c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9cd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9da:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c9de:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c9e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9ec:	8d 50 01             	lea    edx,[eax+0x1]
c000c9ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c9f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9fd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca03:	3d 00 02 00 00       	cmp    eax,0x200
c000ca08:	75 12                	jne    c000ca1c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca0a:	83 ec 0c             	sub    esp,0xc
c000ca0d:	68 a2 3f 02 c0       	push   0xc0023fa2
c000ca12:	e8 a5 30 00 00       	call   c000fabc <KePanic(char const*)>
c000ca17:	83 c4 10             	add    esp,0x10
c000ca1a:	66 90                	xchg   ax,ax
c000ca1c:	90                   	nop
c000ca1d:	83 c4 1c             	add    esp,0x1c
c000ca20:	c3                   	ret    
c000ca21:	90                   	nop
c000ca22:	66 90                	xchg   ax,ax

c000ca24 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca24:	b8 00 00 00 00       	mov    eax,0x0
c000ca29:	c3                   	ret    
c000ca2a:	66 90                	xchg   ax,ax

c000ca2c <ACPI::detectPCI()>:
c000ca2c:	53                   	push   ebx
c000ca2d:	83 ec 28             	sub    esp,0x28
c000ca30:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca35:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca3a:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000ca3f:	83 ec 08             	sub    esp,0x8
c000ca42:	68 bf 3f 02 c0       	push   0xc0023fbf
c000ca47:	50                   	push   eax
c000ca48:	e8 9b f8 ff ff       	call   c000c2e8 <findDataTable(unsigned char*, char*)>
c000ca4d:	83 c4 10             	add    esp,0x10
c000ca50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ca54:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca59:	74 0d                	je     c000ca68 <ACPI::detectPCI()+0x3c>
c000ca5b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca60:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca65:	8d 76 00             	lea    esi,[esi+0x0]
c000ca68:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ca70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca74:	8a 00                	mov    al,BYTE PTR [eax]
c000ca76:	0f b6 c0             	movzx  eax,al
c000ca79:	83 f8 01             	cmp    eax,0x1
c000ca7c:	75 0e                	jne    c000ca8c <ACPI::detectPCI()+0x60>
c000ca7e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca83:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca88:	eb 2e                	jmp    c000cab8 <ACPI::detectPCI()+0x8c>
c000ca8a:	66 90                	xchg   ax,ax
c000ca8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca90:	8a 00                	mov    al,BYTE PTR [eax]
c000ca92:	0f b6 c0             	movzx  eax,al
c000ca95:	83 f8 02             	cmp    eax,0x2
c000ca98:	75 1e                	jne    c000cab8 <ACPI::detectPCI()+0x8c>
c000ca9a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca9f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000caa4:	85 c0                	test   eax,eax
c000caa6:	74 10                	je     c000cab8 <ACPI::detectPCI()+0x8c>
c000caa8:	83 ec 0c             	sub    esp,0xc
c000caab:	68 5c 41 02 c0       	push   0xc002415c
c000cab0:	e8 07 30 00 00       	call   c000fabc <KePanic(char const*)>
c000cab5:	83 c4 10             	add    esp,0x10
c000cab8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cabc:	83 f0 01             	xor    eax,0x1
c000cabf:	0f b6 c0             	movzx  eax,al
c000cac2:	85 c0                	test   eax,eax
c000cac4:	74 46                	je     c000cb0c <ACPI::detectPCI()+0xe0>
c000cac6:	e8 65 36 ff ff       	call   c0000130 <manualPCIProbe>
c000cacb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cacf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cad4:	75 0e                	jne    c000cae4 <ACPI::detectPCI()+0xb8>
c000cad6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cadb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cae0:	eb 2a                	jmp    c000cb0c <ACPI::detectPCI()+0xe0>
c000cae2:	66 90                	xchg   ax,ax
c000cae4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cae9:	75 21                	jne    c000cb0c <ACPI::detectPCI()+0xe0>
c000caeb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000caf0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000caf5:	85 c0                	test   eax,eax
c000caf7:	74 13                	je     c000cb0c <ACPI::detectPCI()+0xe0>
c000caf9:	83 ec 0c             	sub    esp,0xc
c000cafc:	68 5c 41 02 c0       	push   0xc002415c
c000cb01:	e8 b6 2f 00 00       	call   c000fabc <KePanic(char const*)>
c000cb06:	83 c4 10             	add    esp,0x10
c000cb09:	8d 76 00             	lea    esi,[esi+0x0]
c000cb0c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb11:	85 c0                	test   eax,eax
c000cb13:	0f 84 87 00 00 00    	je     c000cba0 <ACPI::detectPCI()+0x174>
c000cb19:	83 ec 0c             	sub    esp,0xc
c000cb1c:	68 c4 3f 02 c0       	push   0xc0023fc4
c000cb21:	e8 9f 06 00 00       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000cb26:	83 c4 10             	add    esp,0x10
c000cb29:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb31:	83 ec 0c             	sub    esp,0xc
c000cb34:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb38:	e8 2b 2b 00 00       	call   c000f668 <malloc>
c000cb3d:	83 c4 10             	add    esp,0x10
c000cb40:	89 c3                	mov    ebx,eax
c000cb42:	83 ec 0c             	sub    esp,0xc
c000cb45:	53                   	push   ebx
c000cb46:	e8 f3 13 01 00       	call   c001df3e <PCI::PCI()>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cb52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb56:	83 ec 08             	sub    esp,0x8
c000cb59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb5d:	50                   	push   eax
c000cb5e:	e8 93 ce ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000cb63:	83 c4 10             	add    esp,0x10
c000cb66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb6c:	83 c0 08             	add    eax,0x8
c000cb6f:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb71:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cb76:	85 d2                	test   edx,edx
c000cb78:	74 0a                	je     c000cb84 <ACPI::detectPCI()+0x158>
c000cb7a:	ba 01 00 00 00       	mov    edx,0x1
c000cb7f:	eb 0b                	jmp    c000cb8c <ACPI::detectPCI()+0x160>
c000cb81:	8d 76 00             	lea    esi,[esi+0x0]
c000cb84:	ba 02 00 00 00       	mov    edx,0x2
c000cb89:	8d 76 00             	lea    esi,[esi+0x0]
c000cb8c:	6a 00                	push   0x0
c000cb8e:	6a 00                	push   0x0
c000cb90:	52                   	push   edx
c000cb91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb95:	ff d0                	call   eax
c000cb97:	83 c4 10             	add    esp,0x10
c000cb9a:	e9 91 00 00 00       	jmp    c000cc30 <ACPI::detectPCI()+0x204>
c000cb9f:	90                   	nop
c000cba0:	83 ec 0c             	sub    esp,0xc
c000cba3:	68 dc 3f 02 c0       	push   0xc0023fdc
c000cba8:	e8 18 06 00 00       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000cbad:	83 c4 10             	add    esp,0x10
c000cbb0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cbb7:	83 ec 0c             	sub    esp,0xc
c000cbba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbbe:	e8 a5 2a 00 00       	call   c000f668 <malloc>
c000cbc3:	83 c4 10             	add    esp,0x10
c000cbc6:	89 c3                	mov    ebx,eax
c000cbc8:	83 ec 0c             	sub    esp,0xc
c000cbcb:	53                   	push   ebx
c000cbcc:	e8 75 1f 01 00       	call   c001eb46 <IDE::IDE()>
c000cbd1:	83 c4 10             	add    esp,0x10
c000cbd4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cbd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbdc:	83 ec 08             	sub    esp,0x8
c000cbdf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cbe3:	50                   	push   eax
c000cbe4:	e8 0d ce ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000cbe9:	83 c4 10             	add    esp,0x10
c000cbec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbf0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cbfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbfe:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc0b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc18:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc1a:	83 c0 08             	add    eax,0x8
c000cc1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc1f:	6a 00                	push   0x0
c000cc21:	6a 00                	push   0x0
c000cc23:	6a 00                	push   0x0
c000cc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc29:	ff d0                	call   eax
c000cc2b:	83 c4 10             	add    esp,0x10
c000cc2e:	66 90                	xchg   ax,ax
c000cc30:	90                   	nop
c000cc31:	83 c4 28             	add    esp,0x28
c000cc34:	5b                   	pop    ebx
c000cc35:	c3                   	ret    
c000cc36:	66 90                	xchg   ax,ax

c000cc38 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc38:	83 ec 0c             	sub    esp,0xc
c000cc3b:	83 ec 0c             	sub    esp,0xc
c000cc3e:	68 f1 3f 02 c0       	push   0xc0023ff1
c000cc43:	e8 74 2e 00 00       	call   c000fabc <KePanic(char const*)>
c000cc48:	83 c4 10             	add    esp,0x10
c000cc4b:	90                   	nop
c000cc4c:	83 c4 0c             	add    esp,0xc
c000cc4f:	c3                   	ret    

c000cc50 <ACPI::open(int, int, void*)>:
c000cc50:	55                   	push   ebp
c000cc51:	89 e5                	mov    ebp,esp
c000cc53:	53                   	push   ebx
c000cc54:	81 ec 74 01 00 00    	sub    esp,0x174
c000cc5a:	83 ec 0c             	sub    esp,0xc
c000cc5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cc60:	e8 c7 fd ff ff       	call   c000ca2c <ACPI::detectPCI()>
c000cc65:	83 c4 10             	add    esp,0x10
c000cc68:	83 ec 0c             	sub    esp,0xc
c000cc6b:	68 84 41 02 c0       	push   0xc0024184
c000cc70:	e8 50 05 00 00       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000cc75:	83 c4 10             	add    esp,0x10
c000cc78:	b8 4c 05 00 00       	mov    eax,0x54c
c000cc7d:	8a 00                	mov    al,BYTE PTR [eax]
c000cc7f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000cc82:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cc86:	83 f8 01             	cmp    eax,0x1
c000cc89:	75 15                	jne    c000cca0 <ACPI::open(int, int, void*)+0x50>
c000cc8b:	83 ec 0c             	sub    esp,0xc
c000cc8e:	68 02 40 02 c0       	push   0xc0024002
c000cc93:	e8 7f 88 00 00       	call   c0015517 <Thr::loadKernelSymbolTable(char const*)>
c000cc98:	83 c4 10             	add    esp,0x10
c000cc9b:	eb 33                	jmp    c000ccd0 <ACPI::open(int, int, void*)+0x80>
c000cc9d:	8d 76 00             	lea    esi,[esi+0x0]
c000cca0:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cca4:	3d bb 00 00 00       	cmp    eax,0xbb
c000cca9:	75 15                	jne    c000ccc0 <ACPI::open(int, int, void*)+0x70>
c000ccab:	83 ec 0c             	sub    esp,0xc
c000ccae:	68 20 40 02 c0       	push   0xc0024020
c000ccb3:	e8 5f 88 00 00       	call   c0015517 <Thr::loadKernelSymbolTable(char const*)>
c000ccb8:	83 c4 10             	add    esp,0x10
c000ccbb:	eb 13                	jmp    c000ccd0 <ACPI::open(int, int, void*)+0x80>
c000ccbd:	8d 76 00             	lea    esi,[esi+0x0]
c000ccc0:	83 ec 0c             	sub    esp,0xc
c000ccc3:	68 3e 40 02 c0       	push   0xc002403e
c000ccc8:	e8 ef 2d 00 00       	call   c000fabc <KePanic(char const*)>
c000cccd:	83 c4 10             	add    esp,0x10
c000ccd0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ccd4:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000ccdb:	83 ec 0c             	sub    esp,0xc
c000ccde:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000cce1:	e8 82 29 00 00       	call   c000f668 <malloc>
c000cce6:	83 c4 10             	add    esp,0x10
c000cce9:	89 c3                	mov    ebx,eax
c000cceb:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000ccf0:	83 ec 04             	sub    esp,0x4
c000ccf3:	50                   	push   eax
c000ccf4:	68 58 40 02 c0       	push   0xc0024058
c000ccf9:	53                   	push   ebx
c000ccfa:	e8 89 b4 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000ccff:	83 c4 10             	add    esp,0x10
c000cd02:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000cd05:	83 ec 08             	sub    esp,0x8
c000cd08:	6a 01                	push   0x1
c000cd0a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd0d:	e8 94 b4 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000cd12:	83 c4 10             	add    esp,0x10
c000cd15:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000cd18:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000cd1c:	75 12                	jne    c000cd30 <ACPI::open(int, int, void*)+0xe0>
c000cd1e:	83 ec 0c             	sub    esp,0xc
c000cd21:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd24:	e8 db b4 ff ff       	call   c0008204 <File::close()>
c000cd29:	83 c4 10             	add    esp,0x10
c000cd2c:	eb 06                	jmp    c000cd34 <ACPI::open(int, int, void*)+0xe4>
c000cd2e:	66 90                	xchg   ax,ax
c000cd30:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cd34:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000cd38:	74 16                	je     c000cd50 <ACPI::open(int, int, void*)+0x100>
c000cd3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cd3d:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd3f:	83 c0 08             	add    eax,0x8
c000cd42:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd44:	83 ec 0c             	sub    esp,0xc
c000cd47:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd4a:	ff d0                	call   eax
c000cd4c:	83 c4 10             	add    esp,0x10
c000cd4f:	90                   	nop
c000cd50:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000cd53:	83 f0 01             	xor    eax,0x1
c000cd56:	0f b6 c0             	movzx  eax,al
c000cd59:	85 c0                	test   eax,eax
c000cd5b:	74 27                	je     c000cd84 <ACPI::open(int, int, void*)+0x134>
c000cd5d:	83 ec 0c             	sub    esp,0xc
c000cd60:	68 76 40 02 c0       	push   0xc0024076
c000cd65:	e8 5b 04 00 00       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000cd6a:	83 c4 10             	add    esp,0x10
c000cd6d:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000cd74:	83 ec 0c             	sub    esp,0xc
c000cd77:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000cd7a:	e8 a9 64 00 00       	call   c0013228 <Virt::setupPageSwapping(int)>
c000cd7f:	83 c4 10             	add    esp,0x10
c000cd82:	66 90                	xchg   ax,ax
c000cd84:	83 ec 0c             	sub    esp,0xc
c000cd87:	68 91 40 02 c0       	push   0xc0024091
c000cd8c:	e8 34 04 00 00       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000cd91:	83 c4 10             	add    esp,0x10
c000cd94:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cd97:	83 ec 08             	sub    esp,0x8
c000cd9a:	6a 13                	push   0x13
c000cd9c:	50                   	push   eax
c000cd9d:	e8 82 cf ff ff       	call   c0009d24 <getDevicesOfType(DeviceType)>
c000cda2:	83 c4 0c             	add    esp,0xc
c000cda5:	8d 76 00             	lea    esi,[esi+0x0]
c000cda8:	83 ec 0c             	sub    esp,0xc
c000cdab:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdae:	50                   	push   eax
c000cdaf:	e8 28 56 01 00       	call   c00223dc <LinkedList<Device>::isEmpty()>
c000cdb4:	83 c4 10             	add    esp,0x10
c000cdb7:	83 f0 01             	xor    eax,0x1
c000cdba:	0f b6 c0             	movzx  eax,al
c000cdbd:	85 c0                	test   eax,eax
c000cdbf:	0f 84 13 01 00 00    	je     c000ced8 <ACPI::open(int, int, void*)+0x288>
c000cdc5:	83 ec 0c             	sub    esp,0xc
c000cdc8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdcb:	50                   	push   eax
c000cdcc:	e8 27 56 01 00       	call   c00223f8 <LinkedList<Device>::getFirstElement()>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000cdd7:	83 ec 0c             	sub    esp,0xc
c000cdda:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cddd:	50                   	push   eax
c000cdde:	e8 1d 56 01 00       	call   c0022400 <LinkedList<Device>::removeFirst()>
c000cde3:	83 c4 10             	add    esp,0x10
c000cde6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000cde9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000cdec:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000cdef:	b8 24 00 00 00       	mov    eax,0x24
c000cdf4:	83 e0 fc             	and    eax,0xfffffffc
c000cdf7:	89 c3                	mov    ebx,eax
c000cdf9:	b8 00 00 00 00       	mov    eax,0x0
c000cdfe:	66 90                	xchg   ax,ax
c000ce00:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ce07:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ce0e:	83 c0 04             	add    eax,0x4
c000ce11:	39 d8                	cmp    eax,ebx
c000ce13:	72 eb                	jb     c000ce00 <ACPI::open(int, int, void*)+0x1b0>
c000ce15:	83 ec 08             	sub    esp,0x8
c000ce18:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ce1e:	50                   	push   eax
c000ce1f:	83 ec 24             	sub    esp,0x24
c000ce22:	89 e1                	mov    ecx,esp
c000ce24:	b8 24 00 00 00       	mov    eax,0x24
c000ce29:	83 e0 fc             	and    eax,0xfffffffc
c000ce2c:	89 c3                	mov    ebx,eax
c000ce2e:	b8 00 00 00 00       	mov    eax,0x0
c000ce33:	90                   	nop
c000ce34:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000ce3b:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000ce3e:	83 c0 04             	add    eax,0x4
c000ce41:	39 d8                	cmp    eax,ebx
c000ce43:	72 ef                	jb     c000ce34 <ACPI::open(int, int, void*)+0x1e4>
c000ce45:	e8 dc 15 01 00       	call   c001e426 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ce4a:	83 c4 30             	add    esp,0x30
c000ce4d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000ce50:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ce54:	0f 84 4e ff ff ff    	je     c000cda8 <ACPI::open(int, int, void*)+0x158>
c000ce5a:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ce61:	83 ec 0c             	sub    esp,0xc
c000ce64:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000ce67:	e8 fc 27 00 00       	call   c000f668 <malloc>
c000ce6c:	83 c4 10             	add    esp,0x10
c000ce6f:	89 c3                	mov    ebx,eax
c000ce71:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000ce76:	83 ec 04             	sub    esp,0x4
c000ce79:	50                   	push   eax
c000ce7a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ce7d:	53                   	push   ebx
c000ce7e:	e8 05 b3 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000ce83:	83 c4 10             	add    esp,0x10
c000ce86:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000ce89:	83 ec 0c             	sub    esp,0xc
c000ce8c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ce8f:	e8 d6 b5 ff ff       	call   c000846a <File::exists()>
c000ce94:	83 c4 10             	add    esp,0x10
c000ce97:	0f b6 c0             	movzx  eax,al
c000ce9a:	85 c0                	test   eax,eax
c000ce9c:	74 16                	je     c000ceb4 <ACPI::open(int, int, void*)+0x264>
c000ce9e:	83 ec 04             	sub    esp,0x4
c000cea1:	6a 00                	push   0x0
c000cea3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000cea6:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000cea9:	e8 05 8e 00 00       	call   c0015cb3 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000ceae:	83 c4 10             	add    esp,0x10
c000ceb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ceb4:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000ceb8:	0f 84 ea fe ff ff    	je     c000cda8 <ACPI::open(int, int, void*)+0x158>
c000cebe:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000cec1:	8b 00                	mov    eax,DWORD PTR [eax]
c000cec3:	83 c0 08             	add    eax,0x8
c000cec6:	8b 00                	mov    eax,DWORD PTR [eax]
c000cec8:	83 ec 0c             	sub    esp,0xc
c000cecb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000cece:	ff d0                	call   eax
c000ced0:	83 c4 10             	add    esp,0x10
c000ced3:	e9 d0 fe ff ff       	jmp    c000cda8 <ACPI::open(int, int, void*)+0x158>
c000ced8:	83 ec 0c             	sub    esp,0xc
c000cedb:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cede:	50                   	push   eax
c000cedf:	e8 f4 54 01 00       	call   c00223d8 <LinkedList<Device>::~LinkedList()>
c000cee4:	83 c4 10             	add    esp,0x10
c000cee7:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c000ceec:	83 ec 04             	sub    esp,0x4
c000ceef:	6a 00                	push   0x0
c000cef1:	50                   	push   eax
c000cef2:	68 ab 40 02 c0       	push   0xc00240ab
c000cef7:	e8 b7 8d 00 00       	call   c0015cb3 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000cf04:	85 c0                	test   eax,eax
c000cf06:	0f 84 e4 00 00 00    	je     c000cff0 <ACPI::open(int, int, void*)+0x3a0>
c000cf0c:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000cf11:	85 c0                	test   eax,eax
c000cf13:	0f 84 d7 00 00 00    	je     c000cff0 <ACPI::open(int, int, void*)+0x3a0>
c000cf19:	83 ec 0c             	sub    esp,0xc
c000cf1c:	68 c8 40 02 c0       	push   0xc00240c8
c000cf21:	e8 9f 02 00 00       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000cf26:	83 c4 10             	add    esp,0x10
c000cf29:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000cf30:	83 ec 0c             	sub    esp,0xc
c000cf33:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000cf36:	e8 2d 27 00 00       	call   c000f668 <malloc>
c000cf3b:	83 c4 10             	add    esp,0x10
c000cf3e:	89 c3                	mov    ebx,eax
c000cf40:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000cf45:	83 ec 04             	sub    esp,0x4
c000cf48:	50                   	push   eax
c000cf49:	68 e5 40 02 c0       	push   0xc00240e5
c000cf4e:	53                   	push   ebx
c000cf4f:	e8 34 b2 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000cf54:	83 c4 10             	add    esp,0x10
c000cf57:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000cf5a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf5e:	74 1c                	je     c000cf7c <ACPI::open(int, int, void*)+0x32c>
c000cf60:	83 ec 0c             	sub    esp,0xc
c000cf63:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cf66:	e8 ff b4 ff ff       	call   c000846a <File::exists()>
c000cf6b:	83 c4 10             	add    esp,0x10
c000cf6e:	0f b6 c0             	movzx  eax,al
c000cf71:	85 c0                	test   eax,eax
c000cf73:	74 07                	je     c000cf7c <ACPI::open(int, int, void*)+0x32c>
c000cf75:	b0 01                	mov    al,0x1
c000cf77:	eb 07                	jmp    c000cf80 <ACPI::open(int, int, void*)+0x330>
c000cf79:	8d 76 00             	lea    esi,[esi+0x0]
c000cf7c:	b0 00                	mov    al,0x0
c000cf7e:	66 90                	xchg   ax,ax
c000cf80:	0f b6 c0             	movzx  eax,al
c000cf83:	85 c0                	test   eax,eax
c000cf85:	74 15                	je     c000cf9c <ACPI::open(int, int, void*)+0x34c>
c000cf87:	83 ec 04             	sub    esp,0x4
c000cf8a:	6a 00                	push   0x0
c000cf8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cf8f:	68 e5 40 02 c0       	push   0xc00240e5
c000cf94:	e8 1a 8d 00 00       	call   c0015cb3 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000cf99:	83 c4 10             	add    esp,0x10
c000cf9c:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cfa0:	74 1e                	je     c000cfc0 <ACPI::open(int, int, void*)+0x370>
c000cfa2:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cfa6:	74 18                	je     c000cfc0 <ACPI::open(int, int, void*)+0x370>
c000cfa8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000cfab:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfad:	83 c0 08             	add    eax,0x8
c000cfb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfb2:	83 ec 0c             	sub    esp,0xc
c000cfb5:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cfb8:	ff d0                	call   eax
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	8d 76 00             	lea    esi,[esi+0x0]
c000cfc0:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000cfc5:	83 ec 08             	sub    esp,0x8
c000cfc8:	68 02 41 02 c0       	push   0xc0024102
c000cfcd:	50                   	push   eax
c000cfce:	e8 15 f3 ff ff       	call   c000c2e8 <findDataTable(unsigned char*, char*)>
c000cfd3:	83 c4 10             	add    esp,0x10
c000cfd6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000cfd9:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000cfdd:	74 11                	je     c000cff0 <ACPI::open(int, int, void*)+0x3a0>
c000cfdf:	83 ec 08             	sub    esp,0x8
c000cfe2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000cfe5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cfe8:	e8 4b fc ff ff       	call   c000cc38 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000cfed:	83 c4 10             	add    esp,0x10
c000cff0:	b8 00 00 00 00       	mov    eax,0x0
c000cff5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cff8:	c9                   	leave  
c000cff9:	c3                   	ret    
c000cffa:	66 90                	xchg   ax,ax

c000cffc <KeAssertionFailed(char*, char const*, char const*, int)>:
c000cffc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d002:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d009:	89 c2                	mov    edx,eax
c000d00b:	c1 fa 1f             	sar    edx,0x1f
c000d00e:	83 ec 04             	sub    esp,0x4
c000d011:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d015:	51                   	push   ecx
c000d016:	52                   	push   edx
c000d017:	50                   	push   eax
c000d018:	e8 43 24 00 00       	call   c000f460 <KeItoa(long long, char*)>
c000d01d:	83 c4 10             	add    esp,0x10
c000d020:	83 ec 08             	sub    esp,0x8
c000d023:	68 d0 41 02 c0       	push   0xc00241d0
c000d028:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d02c:	50                   	push   eax
c000d02d:	e8 1e 36 ff ff       	call   c0000650 <strcpy>
c000d032:	83 c4 10             	add    esp,0x10
c000d035:	83 ec 08             	sub    esp,0x8
c000d038:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d03f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d043:	50                   	push   eax
c000d044:	e8 27 38 ff ff       	call   c0000870 <strcat>
c000d049:	83 c4 10             	add    esp,0x10
c000d04c:	83 ec 08             	sub    esp,0x8
c000d04f:	68 de 41 02 c0       	push   0xc00241de
c000d054:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d058:	50                   	push   eax
c000d059:	e8 12 38 ff ff       	call   c0000870 <strcat>
c000d05e:	83 c4 10             	add    esp,0x10
c000d061:	83 ec 08             	sub    esp,0x8
c000d064:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d06b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d06f:	50                   	push   eax
c000d070:	e8 fb 37 ff ff       	call   c0000870 <strcat>
c000d075:	83 c4 10             	add    esp,0x10
c000d078:	83 ec 08             	sub    esp,0x8
c000d07b:	68 e1 41 02 c0       	push   0xc00241e1
c000d080:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d084:	50                   	push   eax
c000d085:	e8 e6 37 ff ff       	call   c0000870 <strcat>
c000d08a:	83 c4 10             	add    esp,0x10
c000d08d:	83 ec 08             	sub    esp,0x8
c000d090:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d097:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d09b:	50                   	push   eax
c000d09c:	e8 cf 37 ff ff       	call   c0000870 <strcat>
c000d0a1:	83 c4 10             	add    esp,0x10
c000d0a4:	83 ec 08             	sub    esp,0x8
c000d0a7:	68 e1 41 02 c0       	push   0xc00241e1
c000d0ac:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0b0:	50                   	push   eax
c000d0b1:	e8 ba 37 ff ff       	call   c0000870 <strcat>
c000d0b6:	83 c4 10             	add    esp,0x10
c000d0b9:	83 ec 08             	sub    esp,0x8
c000d0bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d0c0:	50                   	push   eax
c000d0c1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0c5:	50                   	push   eax
c000d0c6:	e8 a5 37 ff ff       	call   c0000870 <strcat>
c000d0cb:	83 c4 10             	add    esp,0x10
c000d0ce:	83 ec 0c             	sub    esp,0xc
c000d0d1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0d5:	50                   	push   eax
c000d0d6:	e8 e1 29 00 00       	call   c000fabc <KePanic(char const*)>
c000d0db:	83 c4 10             	add    esp,0x10
c000d0de:	90                   	nop
c000d0df:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d0e5:	c3                   	ret    

c000d0e6 <KeInitialiseAtexit()>:
c000d0e6:	83 ec 10             	sub    esp,0x10
c000d0e9:	68 80 00 00 00       	push   0x80
c000d0ee:	6a 00                	push   0x0
c000d0f0:	68 80 d0 02 c0       	push   0xc002d080
c000d0f5:	c7 05 e0 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfe0,0x0
c000d0ff:	e8 ec 33 ff ff       	call   c00004f0 <memset>
c000d104:	83 c4 1c             	add    esp,0x1c
c000d107:	c3                   	ret    

c000d108 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d108:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c000d10d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d111:	89 14 85 80 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f80],edx
c000d118:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d11c:	89 14 85 00 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3000],edx
c000d123:	40                   	inc    eax
c000d124:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c000d129:	83 f8 1f             	cmp    eax,0x1f
c000d12c:	7e 0d                	jle    c000d13b <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d12e:	c7 44 24 04 e3 41 02 c0 	mov    DWORD PTR [esp+0x4],0xc00241e3
c000d136:	e9 81 29 00 00       	jmp    c000fabc <KePanic(char const*)>
c000d13b:	c3                   	ret    

c000d13c <KeExecuteAtexit()>:
c000d13c:	53                   	push   ebx
c000d13d:	31 db                	xor    ebx,ebx
c000d13f:	83 ec 08             	sub    esp,0x8
c000d142:	39 1d e0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe0,ebx
c000d148:	7e 28                	jle    c000d172 <KeExecuteAtexit()+0x36>
c000d14a:	8b 04 9d 80 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f80]
c000d151:	85 c0                	test   eax,eax
c000d153:	74 1a                	je     c000d16f <KeExecuteAtexit()+0x33>
c000d155:	83 ec 0c             	sub    esp,0xc
c000d158:	ff 34 9d 00 d0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd3000]
c000d15f:	ff d0                	call   eax
c000d161:	c7 04 9d 80 d0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd2f80],0x0
c000d16c:	83 c4 10             	add    esp,0x10
c000d16f:	43                   	inc    ebx
c000d170:	eb d0                	jmp    c000d142 <KeExecuteAtexit()+0x6>
c000d172:	83 c4 08             	add    esp,0x8
c000d175:	5b                   	pop    ebx
c000d176:	c3                   	ret    
c000d177:	90                   	nop

c000d178 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d178:	8b 15 00 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d100
c000d17e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d182:	21 d0                	and    eax,edx
c000d184:	0f 95 c0             	setne  al
c000d187:	c3                   	ret    

c000d188 <KeInitialiseBootConfigurationFlags()>:
c000d188:	b8 00 05 00 00       	mov    eax,0x500
c000d18d:	8b 00                	mov    eax,DWORD PTR [eax]
c000d18f:	a3 00 d1 02 c0       	mov    ds:0xc002d100,eax
c000d194:	90                   	nop
c000d195:	c3                   	ret    

c000d196 <KeDisplaySplashScreen()>:
c000d196:	53                   	push   ebx
c000d197:	bb 01 00 00 00       	mov    ebx,0x1
c000d19c:	83 ec 08             	sub    esp,0x8
c000d19f:	43                   	inc    ebx
c000d1a0:	0f be 83 fa 41 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdbe06]
c000d1a7:	85 c0                	test   eax,eax
c000d1a9:	74 15                	je     c000d1c0 <KeDisplaySplashScreen()+0x2a>
c000d1ab:	83 ec 0c             	sub    esp,0xc
c000d1ae:	6a 01                	push   0x1
c000d1b0:	53                   	push   ebx
c000d1b1:	6a 00                	push   0x0
c000d1b3:	6a 0f                	push   0xf
c000d1b5:	50                   	push   eax
c000d1b6:	e8 35 e9 00 00       	call   c001baf0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d1bb:	83 c4 20             	add    esp,0x20
c000d1be:	eb df                	jmp    c000d19f <KeDisplaySplashScreen()+0x9>
c000d1c0:	83 c4 08             	add    esp,0x8
c000d1c3:	5b                   	pop    ebx
c000d1c4:	c3                   	ret    

c000d1c5 <KeSetBootMessage(char const*)>:
c000d1c5:	57                   	push   edi
c000d1c6:	56                   	push   esi
c000d1c7:	53                   	push   ebx
c000d1c8:	31 db                	xor    ebx,ebx
c000d1ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1ce:	83 ec 0c             	sub    esp,0xc
c000d1d1:	6a 14                	push   0x14
c000d1d3:	53                   	push   ebx
c000d1d4:	43                   	inc    ebx
c000d1d5:	6a 00                	push   0x0
c000d1d7:	6a 00                	push   0x0
c000d1d9:	6a 20                	push   0x20
c000d1db:	e8 10 e9 00 00       	call   c001baf0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d1e0:	83 c4 20             	add    esp,0x20
c000d1e3:	83 fb 50             	cmp    ebx,0x50
c000d1e6:	75 e6                	jne    c000d1ce <KeSetBootMessage(char const*)+0x9>
c000d1e8:	83 ec 0c             	sub    esp,0xc
c000d1eb:	56                   	push   esi
c000d1ec:	e8 8f 33 ff ff       	call   c0000580 <strlen>
c000d1f1:	83 c4 10             	add    esp,0x10
c000d1f4:	29 c3                	sub    ebx,eax
c000d1f6:	d1 eb                	shr    ebx,1
c000d1f8:	89 df                	mov    edi,ebx
c000d1fa:	89 f0                	mov    eax,esi
c000d1fc:	29 d8                	sub    eax,ebx
c000d1fe:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000d202:	85 c0                	test   eax,eax
c000d204:	74 16                	je     c000d21c <KeSetBootMessage(char const*)+0x57>
c000d206:	83 ec 0c             	sub    esp,0xc
c000d209:	6a 14                	push   0x14
c000d20b:	57                   	push   edi
c000d20c:	47                   	inc    edi
c000d20d:	6a 00                	push   0x0
c000d20f:	6a 07                	push   0x7
c000d211:	50                   	push   eax
c000d212:	e8 d9 e8 00 00       	call   c001baf0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d217:	83 c4 20             	add    esp,0x20
c000d21a:	eb de                	jmp    c000d1fa <KeSetBootMessage(char const*)+0x35>
c000d21c:	5b                   	pop    ebx
c000d21d:	5e                   	pop    esi
c000d21e:	5f                   	pop    edi
c000d21f:	c3                   	ret    

c000d220 <__cxa_atexit>:
c000d220:	31 c0                	xor    eax,eax
c000d222:	c3                   	ret    

c000d223 <__cxa_finalize>:
c000d223:	c3                   	ret    

c000d224 <__stack_chk_fail>:
c000d224:	55                   	push   ebp
c000d225:	89 e5                	mov    ebp,esp
c000d227:	83 ec 10             	sub    esp,0x10
c000d22a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d22d:	68 0f 42 02 c0       	push   0xc002420f
c000d232:	e8 2f 9d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d237:	58                   	pop    eax
c000d238:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d23b:	5a                   	pop    edx
c000d23c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d23f:	68 0f 42 02 c0       	push   0xc002420f
c000d244:	e8 1d 9d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d249:	c7 04 24 17 42 02 c0 	mov    DWORD PTR [esp],0xc0024217
c000d250:	e8 67 28 00 00       	call   c000fabc <KePanic(char const*)>
c000d255:	83 c4 10             	add    esp,0x10
c000d258:	c9                   	leave  
c000d259:	c3                   	ret    

c000d25a <__cxa_pure_virtual>:
c000d25a:	83 ec 18             	sub    esp,0x18
c000d25d:	68 2f 42 02 c0       	push   0xc002422f
c000d262:	e8 55 28 00 00       	call   c000fabc <KePanic(char const*)>
c000d267:	83 c4 1c             	add    esp,0x1c
c000d26a:	c3                   	ret    

c000d26b <operator new[](unsigned long)>:
c000d26b:	e9 f8 23 00 00       	jmp    c000f668 <malloc>

c000d270 <operator delete(void*, unsigned long)>:
c000d270:	e9 13 24 00 00       	jmp    c000f688 <rfree>

c000d275 <operator delete[](void*)>:
c000d275:	e9 0e 24 00 00       	jmp    c000f688 <rfree>

c000d27a <operator delete[](void*, unsigned long)>:
c000d27a:	e9 09 24 00 00       	jmp    c000f688 <rfree>
c000d27f:	90                   	nop

c000d280 <CUnlockScheduler>:
c000d280:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000d288:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000d28d:	85 c0                	test   eax,eax
c000d28f:	75 03                	jne    c000d294 <CUnlockScheduler+0x14>
c000d291:	fb                   	sti    
c000d292:	66 90                	xchg   ax,ax
c000d294:	90                   	nop
c000d295:	c3                   	ret    
c000d296:	66 90                	xchg   ax,ax

c000d298 <CLockScheduler>:
c000d298:	fa                   	cli    
c000d299:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000d29e:	83 c0 01             	add    eax,0x1
c000d2a1:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c000d2a6:	90                   	nop
c000d2a7:	c3                   	ret    

c000d2a8 <CPrintf>:
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	83 ec 08             	sub    esp,0x8
c000d2ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d2b2:	68 42 42 02 c0       	push   0xc0024242
c000d2b7:	e8 aa 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d2bc:	83 c4 10             	add    esp,0x10
c000d2bf:	90                   	nop
c000d2c0:	83 c4 0c             	add    esp,0xc
c000d2c3:	c3                   	ret    

c000d2c4 <CmOpen(char const*)>:
c000d2c4:	57                   	push   edi
c000d2c5:	56                   	push   esi
c000d2c6:	53                   	push   ebx
c000d2c7:	83 ec 1c             	sub    esp,0x1c
c000d2ca:	6a 30                	push   0x30
c000d2cc:	e8 97 23 00 00       	call   c000f668 <malloc>
c000d2d1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d2d8:	89 c3                	mov    ebx,eax
c000d2da:	e8 89 23 00 00       	call   c000f668 <malloc>
c000d2df:	83 c4 0c             	add    esp,0xc
c000d2e2:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c000d2e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d2ec:	89 c6                	mov    esi,eax
c000d2ee:	50                   	push   eax
c000d2ef:	e8 94 ae ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000d2f4:	83 c4 0c             	add    esp,0xc
c000d2f7:	89 33                	mov    DWORD PTR [ebx],esi
c000d2f9:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d2fd:	50                   	push   eax
c000d2fe:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d302:	50                   	push   eax
c000d303:	56                   	push   esi
c000d304:	e8 9f b1 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c000d309:	5a                   	pop    edx
c000d30a:	59                   	pop    ecx
c000d30b:	6a 01                	push   0x1
c000d30d:	ff 33                	push   DWORD PTR [ebx]
c000d30f:	e8 92 ae ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000d314:	5e                   	pop    esi
c000d315:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d319:	e8 4a 23 00 00       	call   c000f668 <malloc>
c000d31e:	5a                   	pop    edx
c000d31f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d323:	89 c7                	mov    edi,eax
c000d325:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d327:	8b 10                	mov    edx,DWORD PTR [eax]
c000d329:	56                   	push   esi
c000d32a:	57                   	push   edi
c000d32b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d32f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d333:	50                   	push   eax
c000d334:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d337:	83 c4 14             	add    esp,0x14
c000d33a:	ff 33                	push   DWORD PTR [ebx]
c000d33c:	e8 c3 ae ff ff       	call   c0008204 <File::close()>
c000d341:	59                   	pop    ecx
c000d342:	58                   	pop    eax
c000d343:	6a 13                	push   0x13
c000d345:	ff 33                	push   DWORD PTR [ebx]
c000d347:	e8 5a ae ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000d34c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d34e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d350:	89 34 24             	mov    DWORD PTR [esp],esi
c000d353:	57                   	push   edi
c000d354:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d358:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d35c:	50                   	push   eax
c000d35d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d360:	83 c4 14             	add    esp,0x14
c000d363:	57                   	push   edi
c000d364:	e8 0f 23 00 00       	call   c000f678 <free>
c000d369:	83 c4 10             	add    esp,0x10
c000d36c:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d36f:	75 10                	jne    c000d381 <CmOpen(char const*)+0xbd>
c000d371:	83 ec 0c             	sub    esp,0xc
c000d374:	68 45 42 02 c0       	push   0xc0024245
c000d379:	e8 3e 27 00 00       	call   c000fabc <KePanic(char const*)>
c000d37e:	83 c4 10             	add    esp,0x10
c000d381:	50                   	push   eax
c000d382:	6a 00                	push   0x0
c000d384:	6a 00                	push   0x0
c000d386:	ff 33                	push   DWORD PTR [ebx]
c000d388:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d38b:	e8 d4 ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d390:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d392:	8b 10                	mov    edx,DWORD PTR [eax]
c000d394:	89 34 24             	mov    DWORD PTR [esp],esi
c000d397:	57                   	push   edi
c000d398:	6a 00                	push   0x0
c000d39a:	6a 2b                	push   0x2b
c000d39c:	50                   	push   eax
c000d39d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3a0:	83 c4 1c             	add    esp,0x1c
c000d3a3:	6a 00                	push   0x0
c000d3a5:	6a 00                	push   0x0
c000d3a7:	ff 33                	push   DWORD PTR [ebx]
c000d3a9:	e8 b6 ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d3ae:	83 c4 0c             	add    esp,0xc
c000d3b1:	6a 08                	push   0x8
c000d3b3:	68 67 42 02 c0       	push   0xc0024267
c000d3b8:	57                   	push   edi
c000d3b9:	e8 c2 2f ff ff       	call   c0000380 <memcmp>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	85 c0                	test   eax,eax
c000d3c3:	74 10                	je     c000d3d5 <CmOpen(char const*)+0x111>
c000d3c5:	83 ec 0c             	sub    esp,0xc
c000d3c8:	68 70 42 02 c0       	push   0xc0024270
c000d3cd:	e8 ea 26 00 00       	call   c000fabc <KePanic(char const*)>
c000d3d2:	83 c4 10             	add    esp,0x10
c000d3d5:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 d8                	mov    eax,ebx
c000d3de:	5b                   	pop    ebx
c000d3df:	5e                   	pop    esi
c000d3e0:	5f                   	pop    edi
c000d3e1:	c3                   	ret    

c000d3e2 <CmClose(Reghive_Tag*)>:
c000d3e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3e6:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d3ea:	74 0b                	je     c000d3f7 <CmClose(Reghive_Tag*)+0x15>
c000d3ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d3f2:	e9 0d ae ff ff       	jmp    c0008204 <File::close()>
c000d3f7:	c3                   	ret    

c000d3f8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d3f8:	53                   	push   ebx
c000d3f9:	83 ec 18             	sub    esp,0x18
c000d3fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d400:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d404:	74 29                	je     c000d42f <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d406:	50                   	push   eax
c000d407:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d40c:	99                   	cdq    
c000d40d:	52                   	push   edx
c000d40e:	50                   	push   eax
c000d40f:	ff 33                	push   DWORD PTR [ebx]
c000d411:	e8 4e ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d416:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d418:	5a                   	pop    edx
c000d419:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d41d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d41f:	51                   	push   ecx
c000d420:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d424:	6a 00                	push   0x0
c000d426:	6a 2b                	push   0x2b
c000d428:	50                   	push   eax
c000d429:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d42c:	83 c4 20             	add    esp,0x20
c000d42f:	83 c4 18             	add    esp,0x18
c000d432:	5b                   	pop    ebx
c000d433:	c3                   	ret    

c000d434 <CmGetString(Reghive_Tag*, int, char*)>:
c000d434:	55                   	push   ebp
c000d435:	57                   	push   edi
c000d436:	56                   	push   esi
c000d437:	53                   	push   ebx
c000d438:	31 db                	xor    ebx,ebx
c000d43a:	83 ec 70             	sub    esp,0x70
c000d43d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d441:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d448:	50                   	push   eax
c000d449:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d450:	55                   	push   ebp
c000d451:	e8 a2 ff ff ff       	call   c000d3f8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d456:	83 c4 10             	add    esp,0x10
c000d459:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d45e:	c1 e0 08             	shl    eax,0x8
c000d461:	89 c2                	mov    edx,eax
c000d463:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d468:	09 d0                	or     eax,edx
c000d46a:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d46f:	c1 e0 08             	shl    eax,0x8
c000d472:	09 d0                	or     eax,edx
c000d474:	74 25                	je     c000d49b <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d476:	52                   	push   edx
c000d477:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d47b:	52                   	push   edx
c000d47c:	6b fb 0d             	imul   edi,ebx,0xd
c000d47f:	50                   	push   eax
c000d480:	55                   	push   ebp
c000d481:	e8 72 ff ff ff       	call   c000d3f8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d486:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d48a:	b9 27 00 00 00       	mov    ecx,0x27
c000d48f:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d496:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d498:	83 c4 10             	add    esp,0x10
c000d49b:	83 c3 03             	add    ebx,0x3
c000d49e:	83 fb 15             	cmp    ebx,0x15
c000d4a1:	75 b6                	jne    c000d459 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d4a3:	83 c4 6c             	add    esp,0x6c
c000d4a6:	5b                   	pop    ebx
c000d4a7:	5e                   	pop    esi
c000d4a8:	5f                   	pop    edi
c000d4a9:	5d                   	pop    ebp
c000d4aa:	c3                   	ret    

c000d4ab <CmEnterDirectory(Reghive_Tag*, int)>:
c000d4ab:	83 ec 40             	sub    esp,0x40
c000d4ae:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d4b2:	50                   	push   eax
c000d4b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4bb:	e8 38 ff ff ff       	call   c000d3f8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4c0:	83 c4 10             	add    esp,0x10
c000d4c3:	83 c8 ff             	or     eax,0xffffffff
c000d4c6:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d4cb:	75 19                	jne    c000d4e6 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d4cd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d4d2:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d4d7:	c1 e0 08             	shl    eax,0x8
c000d4da:	09 c2                	or     edx,eax
c000d4dc:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d4e1:	c1 e0 10             	shl    eax,0x10
c000d4e4:	09 d0                	or     eax,edx
c000d4e6:	83 c4 3c             	add    esp,0x3c
c000d4e9:	c3                   	ret    

c000d4ea <CmGetNext(Reghive_Tag*, int)>:
c000d4ea:	83 ec 40             	sub    esp,0x40
c000d4ed:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d4f1:	50                   	push   eax
c000d4f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4f6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4fa:	e8 f9 fe ff ff       	call   c000d3f8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4ff:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d504:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d509:	c1 e0 08             	shl    eax,0x8
c000d50c:	09 c2                	or     edx,eax
c000d50e:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d513:	83 c4 4c             	add    esp,0x4c
c000d516:	c1 e0 10             	shl    eax,0x10
c000d519:	09 d0                	or     eax,edx
c000d51b:	c3                   	ret    

c000d51c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d51c:	53                   	push   ebx
c000d51d:	83 ec 18             	sub    esp,0x18
c000d520:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d524:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d528:	74 29                	je     c000d553 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d52a:	50                   	push   eax
c000d52b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d530:	99                   	cdq    
c000d531:	52                   	push   edx
c000d532:	50                   	push   eax
c000d533:	ff 33                	push   DWORD PTR [ebx]
c000d535:	e8 2a ad ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d53a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d53c:	5a                   	pop    edx
c000d53d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d541:	8b 10                	mov    edx,DWORD PTR [eax]
c000d543:	51                   	push   ecx
c000d544:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d548:	6a 00                	push   0x0
c000d54a:	6a 2b                	push   0x2b
c000d54c:	50                   	push   eax
c000d54d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d550:	83 c4 20             	add    esp,0x20
c000d553:	83 c4 18             	add    esp,0x18
c000d556:	5b                   	pop    ebx
c000d557:	c3                   	ret    

c000d558 <CmFreeExtent(Reghive_Tag*, int)>:
c000d558:	53                   	push   ebx
c000d559:	83 ec 3c             	sub    esp,0x3c
c000d55c:	6a 2b                	push   0x2b
c000d55e:	6a 00                	push   0x0
c000d560:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d564:	53                   	push   ebx
c000d565:	e8 86 2f ff ff       	call   c00004f0 <memset>
c000d56a:	83 c4 0c             	add    esp,0xc
c000d56d:	53                   	push   ebx
c000d56e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d572:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d576:	e8 a1 ff ff ff       	call   c000d51c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d57b:	83 c4 48             	add    esp,0x48
c000d57e:	5b                   	pop    ebx
c000d57f:	c3                   	ret    

c000d580 <CmUpdateHeader(Reghive_Tag*)>:
c000d580:	83 ec 0c             	sub    esp,0xc
c000d583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d587:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d58b:	74 10                	je     c000d59d <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d58d:	52                   	push   edx
c000d58e:	8d 50 05             	lea    edx,[eax+0x5]
c000d591:	52                   	push   edx
c000d592:	6a 00                	push   0x0
c000d594:	50                   	push   eax
c000d595:	e8 82 ff ff ff       	call   c000d51c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d59a:	83 c4 10             	add    esp,0x10
c000d59d:	83 c4 0c             	add    esp,0xc
c000d5a0:	c3                   	ret    

c000d5a1 <CmExpand(Reghive_Tag*, int)>:
c000d5a1:	55                   	push   ebp
c000d5a2:	57                   	push   edi
c000d5a3:	83 cf ff             	or     edi,0xffffffff
c000d5a6:	56                   	push   esi
c000d5a7:	53                   	push   ebx
c000d5a8:	83 ec 3c             	sub    esp,0x3c
c000d5ab:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000d5af:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d5b3:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d5b7:	74 59                	je     c000d612 <CmExpand(Reghive_Tag*, int)+0x71>
c000d5b9:	50                   	push   eax
c000d5ba:	31 d2                	xor    edx,edx
c000d5bc:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d5c0:	31 ff                	xor    edi,edi
c000d5c2:	52                   	push   edx
c000d5c3:	50                   	push   eax
c000d5c4:	ff 33                	push   DWORD PTR [ebx]
c000d5c6:	e8 99 ac ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d5cb:	83 c4 0c             	add    esp,0xc
c000d5ce:	6a 2b                	push   0x2b
c000d5d0:	6a 00                	push   0x0
c000d5d2:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000d5d6:	55                   	push   ebp
c000d5d7:	e8 14 2f ff ff       	call   c00004f0 <memset>
c000d5dc:	83 c4 10             	add    esp,0x10
c000d5df:	39 f7                	cmp    edi,esi
c000d5e1:	7d 1b                	jge    c000d5fe <CmExpand(Reghive_Tag*, int)+0x5d>
c000d5e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d5e5:	83 ec 0c             	sub    esp,0xc
c000d5e8:	47                   	inc    edi
c000d5e9:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d5ed:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5ef:	51                   	push   ecx
c000d5f0:	55                   	push   ebp
c000d5f1:	6a 00                	push   0x0
c000d5f3:	6a 2b                	push   0x2b
c000d5f5:	50                   	push   eax
c000d5f6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d5f9:	83 c4 20             	add    esp,0x20
c000d5fc:	eb e1                	jmp    c000d5df <CmExpand(Reghive_Tag*, int)+0x3e>
c000d5fe:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000d601:	83 ec 0c             	sub    esp,0xc
c000d604:	01 fe                	add    esi,edi
c000d606:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000d609:	53                   	push   ebx
c000d60a:	e8 71 ff ff ff       	call   c000d580 <CmUpdateHeader(Reghive_Tag*)>
c000d60f:	83 c4 10             	add    esp,0x10
c000d612:	83 c4 3c             	add    esp,0x3c
c000d615:	89 f8                	mov    eax,edi
c000d617:	5b                   	pop    ebx
c000d618:	5e                   	pop    esi
c000d619:	5f                   	pop    edi
c000d61a:	5d                   	pop    ebp
c000d61b:	c3                   	ret    

c000d61c <CmFindUnusedExtent(Reghive_Tag*)>:
c000d61c:	55                   	push   ebp
c000d61d:	57                   	push   edi
c000d61e:	56                   	push   esi
c000d61f:	53                   	push   ebx
c000d620:	83 cb ff             	or     ebx,0xffffffff
c000d623:	83 ec 1c             	sub    esp,0x1c
c000d626:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d62a:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d62e:	74 68                	je     c000d698 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d630:	51                   	push   ecx
c000d631:	be 2b 00 00 00       	mov    esi,0x2b
c000d636:	6a 00                	push   0x0
c000d638:	31 ff                	xor    edi,edi
c000d63a:	6a 00                	push   0x0
c000d63c:	31 db                	xor    ebx,ebx
c000d63e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d641:	e8 1e ac ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d646:	83 c4 10             	add    esp,0x10
c000d649:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d64c:	76 3b                	jbe    c000d689 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d64e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d651:	83 ec 0c             	sub    esp,0xc
c000d654:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d658:	8b 10                	mov    edx,DWORD PTR [eax]
c000d65a:	51                   	push   ecx
c000d65b:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d65f:	51                   	push   ecx
c000d660:	6a 00                	push   0x0
c000d662:	6a 01                	push   0x1
c000d664:	50                   	push   eax
c000d665:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d668:	83 c4 20             	add    esp,0x20
c000d66b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d670:	74 26                	je     c000d698 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d672:	52                   	push   edx
c000d673:	43                   	inc    ebx
c000d674:	57                   	push   edi
c000d675:	56                   	push   esi
c000d676:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d679:	e8 e6 ab ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d67e:	83 c6 2b             	add    esi,0x2b
c000d681:	83 d7 00             	adc    edi,0x0
c000d684:	83 c4 10             	add    esp,0x10
c000d687:	eb c0                	jmp    c000d649 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d689:	50                   	push   eax
c000d68a:	50                   	push   eax
c000d68b:	6a 40                	push   0x40
c000d68d:	55                   	push   ebp
c000d68e:	e8 0e ff ff ff       	call   c000d5a1 <CmExpand(Reghive_Tag*, int)>
c000d693:	83 c4 10             	add    esp,0x10
c000d696:	89 c3                	mov    ebx,eax
c000d698:	83 c4 1c             	add    esp,0x1c
c000d69b:	89 d8                	mov    eax,ebx
c000d69d:	5b                   	pop    ebx
c000d69e:	5e                   	pop    esi
c000d69f:	5f                   	pop    edi
c000d6a0:	5d                   	pop    ebp
c000d6a1:	c3                   	ret    

c000d6a2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d6a2:	55                   	push   ebp
c000d6a3:	57                   	push   edi
c000d6a4:	56                   	push   esi
c000d6a5:	53                   	push   ebx
c000d6a6:	81 ec 88 00 00 00    	sub    esp,0x88
c000d6ac:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d6b3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d6ba:	e8 5d ff ff ff       	call   c000d61c <CmFindUnusedExtent(Reghive_Tag*)>
c000d6bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d6c3:	83 c4 0c             	add    esp,0xc
c000d6c6:	6a 2b                	push   0x2b
c000d6c8:	6a 00                	push   0x0
c000d6ca:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d6ce:	55                   	push   ebp
c000d6cf:	e8 1c 2e ff ff       	call   c00004f0 <memset>
c000d6d4:	83 c4 10             	add    esp,0x10
c000d6d7:	85 db                	test   ebx,ebx
c000d6d9:	74 12                	je     c000d6ed <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d6db:	51                   	push   ecx
c000d6dc:	55                   	push   ebp
c000d6dd:	53                   	push   ebx
c000d6de:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d6e5:	e8 0e fd ff ff       	call   c000d3f8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d6ea:	83 c4 10             	add    esp,0x10
c000d6ed:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d6f1:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d6f8:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d6fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6ff:	85 db                	test   ebx,ebx
c000d701:	74 49                	je     c000d74c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d703:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d708:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d70d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d711:	c1 e0 08             	shl    eax,0x8
c000d714:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d71a:	09 c8                	or     eax,ecx
c000d71c:	74 11                	je     c000d72f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d71e:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d722:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d726:	c1 e8 10             	shr    eax,0x10
c000d729:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d72d:	eb 0f                	jmp    c000d73e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d72f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d734:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d739:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d73e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d742:	c1 ea 08             	shr    edx,0x8
c000d745:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d74a:	eb 0f                	jmp    c000d75b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d74c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d751:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d756:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d75b:	52                   	push   edx
c000d75c:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d760:	50                   	push   eax
c000d761:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d765:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d76c:	e8 ab fd ff ff       	call   c000d51c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d771:	83 c4 10             	add    esp,0x10
c000d774:	85 db                	test   ebx,ebx
c000d776:	74 12                	je     c000d78a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d778:	50                   	push   eax
c000d779:	55                   	push   ebp
c000d77a:	53                   	push   ebx
c000d77b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d782:	e8 95 fd ff ff       	call   c000d51c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d78e:	83 c4 7c             	add    esp,0x7c
c000d791:	5b                   	pop    ebx
c000d792:	5e                   	pop    esi
c000d793:	5f                   	pop    edi
c000d794:	5d                   	pop    ebp
c000d795:	c3                   	ret    

c000d796 <CmSetString(Reghive_Tag*, int, char const*)>:
c000d796:	55                   	push   ebp
c000d797:	57                   	push   edi
c000d798:	56                   	push   esi
c000d799:	53                   	push   ebx
c000d79a:	bb 27 00 00 00       	mov    ebx,0x27
c000d79f:	81 ec 88 00 00 00    	sub    esp,0x88
c000d7a5:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000d7ac:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d7b3:	e8 c8 2d ff ff       	call   c0000580 <strlen>
c000d7b8:	8d 48 26             	lea    ecx,[eax+0x26]
c000d7bb:	89 c8                	mov    eax,ecx
c000d7bd:	99                   	cdq    
c000d7be:	f7 fb                	idiv   ebx
c000d7c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d7c4:	83 c4 10             	add    esp,0x10
c000d7c7:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d7cd:	7e 10                	jle    c000d7df <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d7cf:	83 ec 0c             	sub    esp,0xc
c000d7d2:	68 8b 42 02 c0       	push   0xc002428b
c000d7d7:	e8 e0 22 00 00       	call   c000fabc <KePanic(char const*)>
c000d7dc:	83 c4 10             	add    esp,0x10
c000d7df:	53                   	push   ebx
c000d7e0:	31 ed                	xor    ebp,ebp
c000d7e2:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d7e6:	53                   	push   ebx
c000d7e7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7ee:	57                   	push   edi
c000d7ef:	e8 04 fc ff ff       	call   c000d3f8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d7f4:	83 c4 10             	add    esp,0x10
c000d7f7:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000d7fb:	89 f0                	mov    eax,esi
c000d7fd:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000d801:	c1 e0 08             	shl    eax,0x8
c000d804:	09 c6                	or     esi,eax
c000d806:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d80a:	c1 e6 08             	shl    esi,0x8
c000d80d:	09 c6                	or     esi,eax
c000d80f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000d813:	7e 72                	jle    c000d887 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000d815:	85 f6                	test   esi,esi
c000d817:	75 25                	jne    c000d83e <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d819:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d81e:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d822:	50                   	push   eax
c000d823:	6a 00                	push   0x0
c000d825:	6a 00                	push   0x0
c000d827:	57                   	push   edi
c000d828:	e8 75 fe ff ff       	call   c000d6a2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d82d:	83 c4 10             	add    esp,0x10
c000d830:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d833:	89 c6                	mov    esi,eax
c000d835:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d838:	c1 f8 10             	sar    eax,0x10
c000d83b:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d83e:	51                   	push   ecx
c000d83f:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d843:	52                   	push   edx
c000d844:	56                   	push   esi
c000d845:	57                   	push   edi
c000d846:	e8 ad fb ff ff       	call   c000d3f8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d84b:	83 c4 0c             	add    esp,0xc
c000d84e:	6a 27                	push   0x27
c000d850:	6a 00                	push   0x0
c000d852:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d856:	51                   	push   ecx
c000d857:	e8 94 2c ff ff       	call   c00004f0 <memset>
c000d85c:	6b c5 27             	imul   eax,ebp,0x27
c000d85f:	83 c4 0c             	add    esp,0xc
c000d862:	6a 27                	push   0x27
c000d864:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d86b:	50                   	push   eax
c000d86c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d870:	51                   	push   ecx
c000d871:	e8 1a 2e ff ff       	call   c0000690 <strncpy>
c000d876:	83 c4 0c             	add    esp,0xc
c000d879:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d87d:	52                   	push   edx
c000d87e:	56                   	push   esi
c000d87f:	57                   	push   edi
c000d880:	e8 97 fc ff ff       	call   c000d51c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d885:	eb 19                	jmp    c000d8a0 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000d887:	85 f6                	test   esi,esi
c000d889:	74 18                	je     c000d8a3 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000d88b:	52                   	push   edx
c000d88c:	52                   	push   edx
c000d88d:	56                   	push   esi
c000d88e:	57                   	push   edi
c000d88f:	e8 c4 fc ff ff       	call   c000d558 <CmFreeExtent(Reghive_Tag*, int)>
c000d894:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d898:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d89c:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d8a0:	83 c4 10             	add    esp,0x10
c000d8a3:	45                   	inc    ebp
c000d8a4:	83 c3 03             	add    ebx,0x3
c000d8a7:	83 fd 07             	cmp    ebp,0x7
c000d8aa:	0f 85 47 ff ff ff    	jne    c000d7f7 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d8b0:	50                   	push   eax
c000d8b1:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d8b5:	50                   	push   eax
c000d8b6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8bd:	57                   	push   edi
c000d8be:	e8 59 fc ff ff       	call   c000d51c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8c3:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d8c9:	5b                   	pop    ebx
c000d8ca:	5e                   	pop    esi
c000d8cb:	5f                   	pop    edi
c000d8cc:	5d                   	pop    ebp
c000d8cd:	c3                   	ret    

c000d8ce <CmGetMatch(char*, char*, bool, bool*)>:
c000d8ce:	56                   	push   esi
c000d8cf:	53                   	push   ebx
c000d8d0:	50                   	push   eax
c000d8d1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d8d6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d8da:	74 25                	je     c000d901 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d8dc:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d8df:	31 db                	xor    ebx,ebx
c000d8e1:	50                   	push   eax
c000d8e2:	50                   	push   eax
c000d8e3:	8d 04 9d 40 66 02 c0 	lea    eax,[ebx*4-0x3ffd99c0]
c000d8ea:	50                   	push   eax
c000d8eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ef:	e8 8c 2e ff ff       	call   c0000780 <strcmp>
c000d8f4:	83 c4 10             	add    esp,0x10
c000d8f7:	85 c0                	test   eax,eax
c000d8f9:	74 2e                	je     c000d929 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d8fb:	43                   	inc    ebx
c000d8fc:	83 fb 3f             	cmp    ebx,0x3f
c000d8ff:	75 e0                	jne    c000d8e1 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d901:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d904:	31 db                	xor    ebx,ebx
c000d906:	51                   	push   ecx
c000d907:	51                   	push   ecx
c000d908:	8d 04 9d 40 66 02 c0 	lea    eax,[ebx*4-0x3ffd99c0]
c000d90f:	50                   	push   eax
c000d910:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d914:	e8 67 2e ff ff       	call   c0000780 <strcmp>
c000d919:	83 c4 10             	add    esp,0x10
c000d91c:	85 c0                	test   eax,eax
c000d91e:	74 09                	je     c000d929 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d920:	43                   	inc    ebx
c000d921:	83 fb 3f             	cmp    ebx,0x3f
c000d924:	75 e0                	jne    c000d906 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d926:	83 cb ff             	or     ebx,0xffffffff
c000d929:	5a                   	pop    edx
c000d92a:	89 d8                	mov    eax,ebx
c000d92c:	5b                   	pop    ebx
c000d92d:	5e                   	pop    esi
c000d92e:	c3                   	ret    

c000d92f <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d92f:	55                   	push   ebp
c000d930:	31 c0                	xor    eax,eax
c000d932:	57                   	push   edi
c000d933:	56                   	push   esi
c000d934:	53                   	push   ebx
c000d935:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d939:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d93d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d941:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d945:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d947:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d94a:	83 fd 1f             	cmp    ebp,0x1f
c000d94d:	7f 0b                	jg     c000d95a <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d94f:	0f b6 c2             	movzx  eax,dl
c000d952:	d3 e0                	shl    eax,cl
c000d954:	09 07                	or     DWORD PTR [edi],eax
c000d956:	b0 01                	mov    al,0x1
c000d958:	01 33                	add    DWORD PTR [ebx],esi
c000d95a:	5b                   	pop    ebx
c000d95b:	5e                   	pop    esi
c000d95c:	5f                   	pop    edi
c000d95d:	5d                   	pop    ebp
c000d95e:	c3                   	ret    

c000d95f <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d95f:	57                   	push   edi
c000d960:	56                   	push   esi
c000d961:	53                   	push   ebx
c000d962:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d966:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d96a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d96e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d972:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d974:	7c 17                	jl     c000d98d <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d976:	8b 17                	mov    edx,DWORD PTR [edi]
c000d978:	b8 01 00 00 00       	mov    eax,0x1
c000d97d:	d3 e0                	shl    eax,cl
c000d97f:	48                   	dec    eax
c000d980:	21 d0                	and    eax,edx
c000d982:	d3 ea                	shr    edx,cl
c000d984:	89 17                	mov    DWORD PTR [edi],edx
c000d986:	29 0b                	sub    DWORD PTR [ebx],ecx
c000d988:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d98b:	eb 05                	jmp    c000d992 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000d98d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d990:	31 c0                	xor    eax,eax
c000d992:	5b                   	pop    ebx
c000d993:	5e                   	pop    esi
c000d994:	5f                   	pop    edi
c000d995:	c3                   	ret    

c000d996 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000d996:	83 ec 40             	sub    esp,0x40
c000d999:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d99d:	50                   	push   eax
c000d99e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9a2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9a6:	e8 4d fa ff ff       	call   c000d3f8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9ab:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d9af:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000d9b3:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000d9b7:	89 10                	mov    DWORD PTR [eax],edx
c000d9b9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000d9bc:	83 c4 4c             	add    esp,0x4c
c000d9bf:	c3                   	ret    

c000d9c0 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000d9c0:	55                   	push   ebp
c000d9c1:	57                   	push   edi
c000d9c2:	56                   	push   esi
c000d9c3:	53                   	push   ebx
c000d9c4:	83 ec 40             	sub    esp,0x40
c000d9c7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000d9cb:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000d9cf:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000d9d3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d9d7:	53                   	push   ebx
c000d9d8:	56                   	push   esi
c000d9d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d9dd:	e8 16 fa ff ff       	call   c000d3f8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9e2:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000d9e6:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000d9ea:	83 c4 0c             	add    esp,0xc
c000d9ed:	53                   	push   ebx
c000d9ee:	56                   	push   esi
c000d9ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d9f3:	e8 24 fb ff ff       	call   c000d51c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d9f8:	83 c4 4c             	add    esp,0x4c
c000d9fb:	5b                   	pop    ebx
c000d9fc:	5e                   	pop    esi
c000d9fd:	5f                   	pop    edi
c000d9fe:	5d                   	pop    ebp
c000d9ff:	c3                   	ret    

c000da00 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000da00:	55                   	push   ebp
c000da01:	57                   	push   edi
c000da02:	56                   	push   esi
c000da03:	31 f6                	xor    esi,esi
c000da05:	53                   	push   ebx
c000da06:	31 db                	xor    ebx,ebx
c000da08:	83 ec 40             	sub    esp,0x40
c000da0b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000da13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000da1b:	6a 12                	push   0x12
c000da1d:	68 ee 00 00 00       	push   0xee
c000da22:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da26:	e8 c5 2a ff ff       	call   c00004f0 <memset>
c000da2b:	83 c4 10             	add    esp,0x10
c000da2e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000da32:	6a 08                	push   0x8
c000da34:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000da38:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000da3c:	50                   	push   eax
c000da3d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000da41:	55                   	push   ebp
c000da42:	57                   	push   edi
c000da43:	e8 e7 fe ff ff       	call   c000d92f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000da48:	83 c4 10             	add    esp,0x10
c000da4b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000da4f:	50                   	push   eax
c000da50:	6a 06                	push   0x6
c000da52:	55                   	push   ebp
c000da53:	57                   	push   edi
c000da54:	e8 06 ff ff ff       	call   c000d95f <CmGetShift(unsigned int*, int*, int, bool*)>
c000da59:	83 c4 10             	add    esp,0x10
c000da5c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000da61:	74 07                	je     c000da6a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000da63:	46                   	inc    esi
c000da64:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000da68:	eb e1                	jmp    c000da4b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000da6a:	43                   	inc    ebx
c000da6b:	83 fb 12             	cmp    ebx,0x12
c000da6e:	75 c2                	jne    c000da32 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000da70:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000da74:	31 f6                	xor    esi,esi
c000da76:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000da79:	50                   	push   eax
c000da7a:	50                   	push   eax
c000da7b:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000da80:	46                   	inc    esi
c000da81:	8d 04 85 40 66 02 c0 	lea    eax,[eax*4-0x3ffd99c0]
c000da88:	50                   	push   eax
c000da89:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da8d:	e8 de 2d ff ff       	call   c0000870 <strcat>
c000da92:	83 c4 10             	add    esp,0x10
c000da95:	83 fe 18             	cmp    esi,0x18
c000da98:	75 df                	jne    c000da79 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000da9a:	83 c4 3c             	add    esp,0x3c
c000da9d:	31 c0                	xor    eax,eax
c000da9f:	5b                   	pop    ebx
c000daa0:	5e                   	pop    esi
c000daa1:	5f                   	pop    edi
c000daa2:	5d                   	pop    ebp
c000daa3:	c3                   	ret    

c000daa4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000daa4:	83 ec 40             	sub    esp,0x40
c000daa7:	8d 44 24 09          	lea    eax,[esp+0x9]
c000daab:	50                   	push   eax
c000daac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dab0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dab4:	e8 3f f9 ff ff       	call   c000d3f8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dab9:	58                   	pop    eax
c000daba:	5a                   	pop    edx
c000dabb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dabf:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dac3:	50                   	push   eax
c000dac4:	e8 37 ff ff ff       	call   c000da00 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dac9:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000dace:	83 c4 4c             	add    esp,0x4c
c000dad1:	c3                   	ret    

c000dad2 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dad2:	55                   	push   ebp
c000dad3:	57                   	push   edi
c000dad4:	56                   	push   esi
c000dad5:	53                   	push   ebx
c000dad6:	31 db                	xor    ebx,ebx
c000dad8:	83 ec 70             	sub    esp,0x70
c000dadb:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dae2:	6a 30                	push   0x30
c000dae4:	6a 00                	push   0x0
c000dae6:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000daea:	56                   	push   esi
c000daeb:	e8 00 2a ff ff       	call   c00004f0 <memset>
c000daf0:	83 c4 10             	add    esp,0x10
c000daf3:	83 ec 0c             	sub    esp,0xc
c000daf6:	57                   	push   edi
c000daf7:	e8 84 2a ff ff       	call   c0000580 <strlen>
c000dafc:	83 c4 10             	add    esp,0x10
c000daff:	39 d8                	cmp    eax,ebx
c000db01:	76 16                	jbe    c000db19 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000db03:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000db07:	83 ec 0c             	sub    esp,0xc
c000db0a:	50                   	push   eax
c000db0b:	e8 50 2e ff ff       	call   c0000960 <toupper>
c000db10:	83 c4 10             	add    esp,0x10
c000db13:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000db16:	43                   	inc    ebx
c000db17:	eb da                	jmp    c000daf3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000db19:	52                   	push   edx
c000db1a:	31 db                	xor    ebx,ebx
c000db1c:	6a 18                	push   0x18
c000db1e:	31 ff                	xor    edi,edi
c000db20:	6a 3f                	push   0x3f
c000db22:	8d 44 24 24          	lea    eax,[esp+0x24]
c000db26:	50                   	push   eax
c000db27:	e8 c4 29 ff ff       	call   c00004f0 <memset>
c000db2c:	83 c4 10             	add    esp,0x10
c000db2f:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000db33:	8d 74 24 10          	lea    esi,[esp+0x10]
c000db37:	84 c0                	test   al,al
c000db39:	0f 84 af 00 00 00    	je     c000dbee <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000db3f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000db43:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000db46:	83 ec 0c             	sub    esp,0xc
c000db49:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000db4e:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000db52:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000db56:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000db5b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000db5f:	56                   	push   esi
c000db60:	e8 1b 2a ff ff       	call   c0000580 <strlen>
c000db65:	83 c4 10             	add    esp,0x10
c000db68:	85 c0                	test   eax,eax
c000db6a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db6e:	74 0b                	je     c000db7b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000db70:	50                   	push   eax
c000db71:	6a 01                	push   0x1
c000db73:	56                   	push   esi
c000db74:	8d 44 24 20          	lea    eax,[esp+0x20]
c000db78:	50                   	push   eax
c000db79:	eb 0a                	jmp    c000db85 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000db7b:	50                   	push   eax
c000db7c:	6a 00                	push   0x0
c000db7e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000db82:	50                   	push   eax
c000db83:	6a 00                	push   0x0
c000db85:	e8 44 fd ff ff       	call   c000d8ce <CmGetMatch(char*, char*, bool, bool*)>
c000db8a:	83 c4 10             	add    esp,0x10
c000db8d:	83 f8 ff             	cmp    eax,0xffffffff
c000db90:	75 1a                	jne    c000dbac <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000db92:	83 ec 0c             	sub    esp,0xc
c000db95:	68 a0 42 02 c0       	push   0xc00242a0
c000db9a:	e8 1d 1f 00 00       	call   c000fabc <KePanic(char const*)>
c000db9f:	83 c4 10             	add    esp,0x10
c000dba2:	b8 02 00 00 00       	mov    eax,0x2
c000dba7:	e9 bb 00 00 00       	jmp    c000dc67 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dbac:	83 ff 18             	cmp    edi,0x18
c000dbaf:	75 1a                	jne    c000dbcb <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dbb1:	83 ec 0c             	sub    esp,0xc
c000dbb4:	68 b5 42 02 c0       	push   0xc00242b5
c000dbb9:	e8 fe 1e 00 00       	call   c000fabc <KePanic(char const*)>
c000dbbe:	83 c4 10             	add    esp,0x10
c000dbc1:	b8 01 00 00 00       	mov    eax,0x1
c000dbc6:	e9 9c 00 00 00       	jmp    c000dc67 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dbcb:	47                   	inc    edi
c000dbcc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dbd1:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dbd5:	0f 45 dd             	cmovne ebx,ebp
c000dbd8:	83 ec 0c             	sub    esp,0xc
c000dbdb:	56                   	push   esi
c000dbdc:	e8 9f 29 ff ff       	call   c0000580 <strlen>
c000dbe1:	83 c4 10             	add    esp,0x10
c000dbe4:	85 c0                	test   eax,eax
c000dbe6:	74 06                	je     c000dbee <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000dbe8:	43                   	inc    ebx
c000dbe9:	e9 41 ff ff ff       	jmp    c000db2f <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dbee:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dbf6:	31 db                	xor    ebx,ebx
c000dbf8:	31 ff                	xor    edi,edi
c000dbfa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dc02:	50                   	push   eax
c000dc03:	6a 12                	push   0x12
c000dc05:	68 ee 00 00 00       	push   0xee
c000dc0a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dc11:	e8 da 28 ff ff       	call   c00004f0 <memset>
c000dc16:	83 c4 10             	add    esp,0x10
c000dc19:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dc1d:	83 fb 17             	cmp    ebx,0x17
c000dc20:	7e 26                	jle    c000dc48 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000dc22:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc26:	50                   	push   eax
c000dc27:	6a 08                	push   0x8
c000dc29:	55                   	push   ebp
c000dc2a:	56                   	push   esi
c000dc2b:	e8 2f fd ff ff       	call   c000d95f <CmGetShift(unsigned int*, int*, int, bool*)>
c000dc30:	83 c4 10             	add    esp,0x10
c000dc33:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc38:	74 26                	je     c000dc60 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000dc3a:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dc41:	4b                   	dec    ebx
c000dc42:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dc45:	47                   	inc    edi
c000dc46:	eb 1c                	jmp    c000dc64 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dc48:	6a 06                	push   0x6
c000dc4a:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000dc4f:	50                   	push   eax
c000dc50:	55                   	push   ebp
c000dc51:	56                   	push   esi
c000dc52:	e8 d8 fc ff ff       	call   c000d92f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dc57:	83 c4 10             	add    esp,0x10
c000dc5a:	84 c0                	test   al,al
c000dc5c:	75 06                	jne    c000dc64 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dc5e:	eb c2                	jmp    c000dc22 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000dc60:	31 c0                	xor    eax,eax
c000dc62:	eb 03                	jmp    c000dc67 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dc64:	43                   	inc    ebx
c000dc65:	eb b2                	jmp    c000dc19 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000dc67:	83 c4 6c             	add    esp,0x6c
c000dc6a:	5b                   	pop    ebx
c000dc6b:	5e                   	pop    esi
c000dc6c:	5f                   	pop    edi
c000dc6d:	5d                   	pop    ebp
c000dc6e:	c3                   	ret    

c000dc6f <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dc6f:	53                   	push   ebx
c000dc70:	83 ec 3c             	sub    esp,0x3c
c000dc73:	6a 2b                	push   0x2b
c000dc75:	6a 00                	push   0x0
c000dc77:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dc7b:	53                   	push   ebx
c000dc7c:	e8 6f 28 ff ff       	call   c00004f0 <memset>
c000dc81:	58                   	pop    eax
c000dc82:	5a                   	pop    edx
c000dc83:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dc87:	50                   	push   eax
c000dc88:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc8c:	e8 41 fe ff ff       	call   c000dad2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dc91:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dc96:	83 c4 0c             	add    esp,0xc
c000dc99:	6a 15                	push   0x15
c000dc9b:	6a 00                	push   0x0
c000dc9d:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dca1:	50                   	push   eax
c000dca2:	e8 49 28 ff ff       	call   c00004f0 <memset>
c000dca7:	53                   	push   ebx
c000dca8:	6a 00                	push   0x0
c000dcaa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcb2:	e8 eb f9 ff ff       	call   c000d6a2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dcb7:	83 c4 58             	add    esp,0x58
c000dcba:	5b                   	pop    ebx
c000dcbb:	c3                   	ret    

c000dcbc <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dcbc:	56                   	push   esi
c000dcbd:	53                   	push   ebx
c000dcbe:	83 ec 48             	sub    esp,0x48
c000dcc1:	6a 12                	push   0x12
c000dcc3:	68 ff 00 00 00       	push   0xff
c000dcc8:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dccc:	56                   	push   esi
c000dccd:	e8 1e 28 ff ff       	call   c00004f0 <memset>
c000dcd2:	5a                   	pop    edx
c000dcd3:	59                   	pop    ecx
c000dcd4:	56                   	push   esi
c000dcd5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dcd9:	e8 f4 fd ff ff       	call   c000dad2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dcde:	83 c4 10             	add    esp,0x10
c000dce1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dce5:	85 db                	test   ebx,ebx
c000dce7:	74 42                	je     c000dd2b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dce9:	50                   	push   eax
c000dcea:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dcee:	50                   	push   eax
c000dcef:	53                   	push   ebx
c000dcf0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcf4:	e8 ff f6 ff ff       	call   c000d3f8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dcf9:	83 c4 0c             	add    esp,0xc
c000dcfc:	6a 12                	push   0x12
c000dcfe:	8d 44 24 21          	lea    eax,[esp+0x21]
c000dd02:	50                   	push   eax
c000dd03:	56                   	push   esi
c000dd04:	e8 77 26 ff ff       	call   c0000380 <memcmp>
c000dd09:	83 c4 10             	add    esp,0x10
c000dd0c:	85 c0                	test   eax,eax
c000dd0e:	74 1e                	je     c000dd2e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000dd10:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000dd15:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000dd1a:	c1 e3 08             	shl    ebx,0x8
c000dd1d:	09 d8                	or     eax,ebx
c000dd1f:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dd24:	c1 e3 10             	shl    ebx,0x10
c000dd27:	09 c3                	or     ebx,eax
c000dd29:	eb ba                	jmp    c000dce5 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dd2b:	83 cb ff             	or     ebx,0xffffffff
c000dd2e:	83 c4 44             	add    esp,0x44
c000dd31:	89 d8                	mov    eax,ebx
c000dd33:	5b                   	pop    ebx
c000dd34:	5e                   	pop    esi
c000dd35:	c3                   	ret    

c000dd36 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000dd36:	57                   	push   edi
c000dd37:	56                   	push   esi
c000dd38:	53                   	push   ebx
c000dd39:	83 ec 34             	sub    esp,0x34
c000dd3c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000dd40:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000dd44:	6a 2b                	push   0x2b
c000dd46:	6a 00                	push   0x0
c000dd48:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd4c:	53                   	push   ebx
c000dd4d:	e8 9e 27 ff ff       	call   c00004f0 <memset>
c000dd52:	58                   	pop    eax
c000dd53:	5a                   	pop    edx
c000dd54:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd58:	50                   	push   eax
c000dd59:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd5d:	e8 70 fd ff ff       	call   c000dad2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd62:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000dd66:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000dd6a:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000dd6e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000dd72:	53                   	push   ebx
c000dd73:	6a 00                	push   0x0
c000dd75:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd79:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd7d:	e8 20 f9 ff ff       	call   c000d6a2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd82:	83 c4 50             	add    esp,0x50
c000dd85:	5b                   	pop    ebx
c000dd86:	5e                   	pop    esi
c000dd87:	5f                   	pop    edi
c000dd88:	c3                   	ret    

c000dd89 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000dd89:	55                   	push   ebp
c000dd8a:	57                   	push   edi
c000dd8b:	56                   	push   esi
c000dd8c:	53                   	push   ebx
c000dd8d:	83 ec 40             	sub    esp,0x40
c000dd90:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000dd94:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dd98:	6a 2b                	push   0x2b
c000dd9a:	6a 00                	push   0x0
c000dd9c:	8d 74 24 11          	lea    esi,[esp+0x11]
c000dda0:	56                   	push   esi
c000dda1:	e8 4a 27 ff ff       	call   c00004f0 <memset>
c000dda6:	5f                   	pop    edi
c000dda7:	89 ef                	mov    edi,ebp
c000dda9:	58                   	pop    eax
c000ddaa:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ddae:	50                   	push   eax
c000ddaf:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ddb3:	e8 1a fd ff ff       	call   c000dad2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ddb8:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000ddbd:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ddc2:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000ddc7:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	85 ed                	test   ebp,ebp
c000ddd1:	74 14                	je     c000dde7 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000ddd3:	51                   	push   ecx
c000ddd4:	51                   	push   ecx
c000ddd5:	57                   	push   edi
c000ddd6:	53                   	push   ebx
c000ddd7:	e8 0e f7 ff ff       	call   c000d4ea <CmGetNext(Reghive_Tag*, int)>
c000dddc:	83 c4 10             	add    esp,0x10
c000dddf:	85 c0                	test   eax,eax
c000dde1:	74 04                	je     c000dde7 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000dde3:	89 c7                	mov    edi,eax
c000dde5:	eb e8                	jmp    c000ddcf <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000dde7:	56                   	push   esi
c000dde8:	6a 00                	push   0x0
c000ddea:	57                   	push   edi
c000ddeb:	53                   	push   ebx
c000ddec:	e8 b1 f8 ff ff       	call   c000d6a2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ddf1:	83 c4 0c             	add    esp,0xc
c000ddf4:	56                   	push   esi
c000ddf5:	50                   	push   eax
c000ddf6:	89 c7                	mov    edi,eax
c000ddf8:	53                   	push   ebx
c000ddf9:	e8 fa f5 ff ff       	call   c000d3f8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ddfe:	58                   	pop    eax
c000ddff:	5a                   	pop    edx
c000de00:	6a 6c                	push   0x6c
c000de02:	6a 00                	push   0x0
c000de04:	6a 00                	push   0x0
c000de06:	68 c6 42 02 c0       	push   0xc00242c6
c000de0b:	57                   	push   edi
c000de0c:	53                   	push   ebx
c000de0d:	e8 24 ff ff ff       	call   c000dd36 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000de12:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000de16:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000de1a:	c1 e8 10             	shr    eax,0x10
c000de1d:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000de21:	83 c4 1c             	add    esp,0x1c
c000de24:	56                   	push   esi
c000de25:	57                   	push   edi
c000de26:	53                   	push   ebx
c000de27:	e8 f0 f6 ff ff       	call   c000d51c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000de2c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000de31:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000de36:	c1 e0 08             	shl    eax,0x8
c000de39:	09 c2                	or     edx,eax
c000de3b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000de40:	83 c4 4c             	add    esp,0x4c
c000de43:	5b                   	pop    ebx
c000de44:	5e                   	pop    esi
c000de45:	c1 e0 10             	shl    eax,0x10
c000de48:	09 d0                	or     eax,edx
c000de4a:	5f                   	pop    edi
c000de4b:	5d                   	pop    ebp
c000de4c:	c3                   	ret    

c000de4d <zStrtok(char*, char const*)>:
c000de4d:	55                   	push   ebp
c000de4e:	57                   	push   edi
c000de4f:	56                   	push   esi
c000de50:	53                   	push   ebx
c000de51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de59:	85 db                	test   ebx,ebx
c000de5b:	74 2f                	je     c000de8c <zStrtok(char*, char const*)+0x3f>
c000de5d:	85 c0                	test   eax,eax
c000de5f:	75 09                	jne    c000de6a <zStrtok(char*, char const*)+0x1d>
c000de61:	a1 04 d1 02 c0       	mov    eax,ds:0xc002d104
c000de66:	85 c0                	test   eax,eax
c000de68:	74 50                	je     c000deba <zStrtok(char*, char const*)+0x6d>
c000de6a:	31 c9                	xor    ecx,ecx
c000de6c:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000de70:	74 03                	je     c000de75 <zStrtok(char*, char const*)+0x28>
c000de72:	41                   	inc    ecx
c000de73:	eb f7                	jmp    c000de6c <zStrtok(char*, char const*)+0x1f>
c000de75:	31 d2                	xor    edx,edx
c000de77:	39 ca                	cmp    edx,ecx
c000de79:	74 15                	je     c000de90 <zStrtok(char*, char const*)+0x43>
c000de7b:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000de7f:	8d 3c 10             	lea    edi,[eax+edx*1]
c000de82:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000de85:	39 ee                	cmp    esi,ebp
c000de87:	74 13                	je     c000de9c <zStrtok(char*, char const*)+0x4f>
c000de89:	42                   	inc    edx
c000de8a:	eb eb                	jmp    c000de77 <zStrtok(char*, char const*)+0x2a>
c000de8c:	31 c0                	xor    eax,eax
c000de8e:	eb 2a                	jmp    c000deba <zStrtok(char*, char const*)+0x6d>
c000de90:	c7 05 04 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d104,0x0
c000de9a:	eb 1e                	jmp    c000deba <zStrtok(char*, char const*)+0x6d>
c000de9c:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000de9f:	39 ce                	cmp    esi,ecx
c000dea1:	75 0a                	jne    c000dead <zStrtok(char*, char const*)+0x60>
c000dea3:	40                   	inc    eax
c000dea4:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c000dea9:	89 d8                	mov    eax,ebx
c000deab:	eb 0d                	jmp    c000deba <zStrtok(char*, char const*)+0x6d>
c000dead:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000deb0:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000deb4:	89 15 04 d1 02 c0    	mov    DWORD PTR ds:0xc002d104,edx
c000deba:	5b                   	pop    ebx
c000debb:	5e                   	pop    esi
c000debc:	5f                   	pop    edi
c000debd:	5d                   	pop    ebp
c000debe:	c3                   	ret    

c000debf <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000debf:	57                   	push   edi
c000dec0:	56                   	push   esi
c000dec1:	53                   	push   ebx
c000dec2:	81 ec 08 01 00 00    	sub    esp,0x108
c000dec8:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000decf:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000ded6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000deda:	53                   	push   ebx
c000dedb:	e8 70 27 ff ff       	call   c0000650 <strcpy>
c000dee0:	59                   	pop    ecx
c000dee1:	5e                   	pop    esi
c000dee2:	68 6e 51 02 c0       	push   0xc002516e
c000dee7:	53                   	push   ebx
c000dee8:	bb 01 00 00 00       	mov    ebx,0x1
c000deed:	e8 5b ff ff ff       	call   c000de4d <zStrtok(char*, char const*)>
c000def2:	83 c4 10             	add    esp,0x10
c000def5:	85 c0                	test   eax,eax
c000def7:	74 3b                	je     c000df34 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000def9:	52                   	push   edx
c000defa:	50                   	push   eax
c000defb:	6a 01                	push   0x1
c000defd:	57                   	push   edi
c000defe:	e8 b9 fd ff ff       	call   c000dcbc <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000df03:	59                   	pop    ecx
c000df04:	5e                   	pop    esi
c000df05:	89 c3                	mov    ebx,eax
c000df07:	68 6e 51 02 c0       	push   0xc002516e
c000df0c:	6a 00                	push   0x0
c000df0e:	e8 3a ff ff ff       	call   c000de4d <zStrtok(char*, char const*)>
c000df13:	83 c4 10             	add    esp,0x10
c000df16:	85 c0                	test   eax,eax
c000df18:	89 c6                	mov    esi,eax
c000df1a:	74 18                	je     c000df34 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df1c:	52                   	push   edx
c000df1d:	52                   	push   edx
c000df1e:	53                   	push   ebx
c000df1f:	57                   	push   edi
c000df20:	e8 86 f5 ff ff       	call   c000d4ab <CmEnterDirectory(Reghive_Tag*, int)>
c000df25:	83 c4 10             	add    esp,0x10
c000df28:	83 f8 ff             	cmp    eax,0xffffffff
c000df2b:	89 c3                	mov    ebx,eax
c000df2d:	74 05                	je     c000df34 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df2f:	50                   	push   eax
c000df30:	56                   	push   esi
c000df31:	53                   	push   ebx
c000df32:	eb c9                	jmp    c000defd <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000df34:	81 c4 00 01 00 00    	add    esp,0x100
c000df3a:	89 d8                	mov    eax,ebx
c000df3c:	5b                   	pop    ebx
c000df3d:	5e                   	pop    esi
c000df3e:	5f                   	pop    edi
c000df3f:	c3                   	ret    

c000df40 <Computer::close(int, int, void*)>:
c000df40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000df45:	c3                   	ret    

c000df46 <Computer::Computer()>:
c000df46:	83 ec 0c             	sub    esp,0xc
c000df49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4d:	83 ec 08             	sub    esp,0x8
c000df50:	68 cc 42 02 c0       	push   0xc00242cc
c000df55:	50                   	push   eax
c000df56:	e8 fd bb ff ff       	call   c0009b58 <Device::Device(char const*)>
c000df5b:	83 c4 10             	add    esp,0x10
c000df5e:	ba 24 43 02 c0       	mov    edx,0xc0024324
c000df63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df67:	89 10                	mov    DWORD PTR [eax],edx
c000df69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df6d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000df77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000df85:	90                   	nop
c000df86:	83 c4 0c             	add    esp,0xc
c000df89:	c3                   	ret    

c000df8a <Computer::open(int, int, void*)>:
c000df8a:	56                   	push   esi
c000df8b:	53                   	push   ebx
c000df8c:	83 ec 04             	sub    esp,0x4
c000df8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df93:	39 1d 08 d1 02 c0    	cmp    DWORD PTR ds:0xc002d108,ebx
c000df99:	74 10                	je     c000dfab <Computer::open(int, int, void*)+0x21>
c000df9b:	83 ec 0c             	sub    esp,0xc
c000df9e:	68 f0 42 02 c0       	push   0xc00242f0
c000dfa3:	e8 14 1b 00 00       	call   c000fabc <KePanic(char const*)>
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	83 ec 0c             	sub    esp,0xc
c000dfae:	68 78 11 00 00       	push   0x1178
c000dfb3:	e8 b0 16 00 00       	call   c000f668 <malloc>
c000dfb8:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfbb:	89 c6                	mov    esi,eax
c000dfbd:	e8 2a cb 00 00       	call   c001aaec <CPU::CPU()>
c000dfc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dfc6:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000dfcc:	50                   	push   eax
c000dfcd:	6a 00                	push   0x0
c000dfcf:	6a 00                	push   0x0
c000dfd1:	56                   	push   esi
c000dfd2:	e8 f7 cc 00 00       	call   c001acce <CPU::open(int, int, void*)>
c000dfd7:	83 c4 14             	add    esp,0x14
c000dfda:	68 d5 42 02 c0       	push   0xc00242d5
c000dfdf:	e8 e1 f1 ff ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000dfe4:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000dfeb:	e8 78 16 00 00       	call   c000f668 <malloc>
c000dff0:	89 04 24             	mov    DWORD PTR [esp],eax
c000dff3:	89 c6                	mov    esi,eax
c000dff5:	e8 12 e8 ff ff       	call   c000c80c <ACPI::ACPI()>
c000dffa:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e000:	5a                   	pop    edx
c000e001:	59                   	pop    ecx
c000e002:	56                   	push   esi
c000e003:	53                   	push   ebx
c000e004:	e8 ed b9 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000e009:	5e                   	pop    esi
c000e00a:	58                   	pop    eax
c000e00b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e011:	50                   	push   eax
c000e012:	53                   	push   ebx
c000e013:	e8 de b9 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000e018:	83 c4 14             	add    esp,0x14
c000e01b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e020:	5b                   	pop    ebx
c000e021:	5e                   	pop    esi
c000e022:	c3                   	ret    

c000e023 <KeCalculateCRC32(unsigned char*, int)>:
c000e023:	53                   	push   ebx
c000e024:	83 c8 ff             	or     eax,0xffffffff
c000e027:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e02b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e02f:	01 cb                	add    ebx,ecx
c000e031:	39 d9                	cmp    ecx,ebx
c000e033:	74 15                	je     c000e04a <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e035:	41                   	inc    ecx
c000e036:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e039:	31 c2                	xor    edx,eax
c000e03b:	c1 e8 08             	shr    eax,0x8
c000e03e:	0f b6 d2             	movzx  edx,dl
c000e041:	33 04 95 40 67 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd98c0]
c000e048:	eb e7                	jmp    c000e031 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e04a:	5b                   	pop    ebx
c000e04b:	f7 d0                	not    eax
c000e04d:	c3                   	ret    

c000e04e <EnvVarContainer::getEnv(char const*)>:
c000e04e:	57                   	push   edi
c000e04f:	56                   	push   esi
c000e050:	53                   	push   ebx
c000e051:	31 db                	xor    ebx,ebx
c000e053:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e057:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e059:	7e 2b                	jle    c000e086 <EnvVarContainer::getEnv(char const*)+0x38>
c000e05b:	50                   	push   eax
c000e05c:	50                   	push   eax
c000e05d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e060:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e067:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e06a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e06e:	e8 0d 27 ff ff       	call   c0000780 <strcmp>
c000e073:	83 c4 10             	add    esp,0x10
c000e076:	85 c0                	test   eax,eax
c000e078:	75 09                	jne    c000e083 <EnvVarContainer::getEnv(char const*)+0x35>
c000e07a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e07d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e081:	eb 05                	jmp    c000e088 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e083:	43                   	inc    ebx
c000e084:	eb d1                	jmp    c000e057 <EnvVarContainer::getEnv(char const*)+0x9>
c000e086:	31 c0                	xor    eax,eax
c000e088:	5b                   	pop    ebx
c000e089:	5e                   	pop    esi
c000e08a:	5f                   	pop    edi
c000e08b:	c3                   	ret    

c000e08c <EnvVarContainer::setEnv(char const*, char const*)>:
c000e08c:	55                   	push   ebp
c000e08d:	57                   	push   edi
c000e08e:	56                   	push   esi
c000e08f:	53                   	push   ebx
c000e090:	83 ec 28             	sub    esp,0x28
c000e093:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e097:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e09b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e09f:	56                   	push   esi
c000e0a0:	e8 db 24 ff ff       	call   c0000580 <strlen>
c000e0a5:	40                   	inc    eax
c000e0a6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0a9:	e8 ba 15 00 00       	call   c000f668 <malloc>
c000e0ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e0b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b5:	e8 c6 24 ff ff       	call   c0000580 <strlen>
c000e0ba:	40                   	inc    eax
c000e0bb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0be:	e8 a5 15 00 00       	call   c000f668 <malloc>
c000e0c3:	89 34 24             	mov    DWORD PTR [esp],esi
c000e0c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0ca:	e8 b1 24 ff ff       	call   c0000580 <strlen>
c000e0cf:	83 c4 0c             	add    esp,0xc
c000e0d2:	40                   	inc    eax
c000e0d3:	50                   	push   eax
c000e0d4:	6a 00                	push   0x0
c000e0d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0da:	e8 11 24 ff ff       	call   c00004f0 <memset>
c000e0df:	89 34 24             	mov    DWORD PTR [esp],esi
c000e0e2:	e8 99 24 ff ff       	call   c0000580 <strlen>
c000e0e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e0eb:	8d 48 01             	lea    ecx,[eax+0x1]
c000e0ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e0f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e0f3:	89 de                	mov    esi,ebx
c000e0f5:	e8 86 24 ff ff       	call   c0000580 <strlen>
c000e0fa:	83 c4 0c             	add    esp,0xc
c000e0fd:	40                   	inc    eax
c000e0fe:	50                   	push   eax
c000e0ff:	6a 00                	push   0x0
c000e101:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e105:	e8 e6 23 ff ff       	call   c00004f0 <memset>
c000e10a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e10d:	e8 6e 24 ff ff       	call   c0000580 <strlen>
c000e112:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e116:	8d 48 01             	lea    ecx,[eax+0x1]
c000e119:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e11b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e11e:	40                   	inc    eax
c000e11f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e122:	c1 e0 03             	shl    eax,0x3
c000e125:	5a                   	pop    edx
c000e126:	59                   	pop    ecx
c000e127:	50                   	push   eax
c000e128:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e12b:	e8 24 15 00 00       	call   c000f654 <realloc>
c000e130:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e133:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e137:	b9 08 00 00 00       	mov    ecx,0x8
c000e13c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e13f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e143:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e145:	83 c4 2c             	add    esp,0x2c
c000e148:	5b                   	pop    ebx
c000e149:	5e                   	pop    esi
c000e14a:	5f                   	pop    edi
c000e14b:	5d                   	pop    ebp
c000e14c:	c3                   	ret    
c000e14d:	90                   	nop

c000e14e <EnvVarContainer::deleteEnv(char const*)>:
c000e14e:	c3                   	ret    
c000e14f:	90                   	nop

c000e150 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e150:	55                   	push   ebp
c000e151:	57                   	push   edi
c000e152:	56                   	push   esi
c000e153:	53                   	push   ebx
c000e154:	81 ec 38 01 00 00    	sub    esp,0x138
c000e15a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e161:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e168:	68 14 01 00 00       	push   0x114
c000e16d:	e8 f6 14 00 00       	call   c000f668 <malloc>
c000e172:	83 c4 0c             	add    esp,0xc
c000e175:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e178:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e17f:	89 c3                	mov    ebx,eax
c000e181:	50                   	push   eax
c000e182:	e8 01 a0 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000e187:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e18a:	e8 db a2 ff ff       	call   c000846a <File::exists()>
c000e18f:	83 c4 10             	add    esp,0x10
c000e192:	84 c0                	test   al,al
c000e194:	75 31                	jne    c000e1c7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e196:	50                   	push   eax
c000e197:	50                   	push   eax
c000e198:	6a 12                	push   0x12
c000e19a:	53                   	push   ebx
c000e19b:	e8 06 a0 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000e1a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1a2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e1a5:	89 34 24             	mov    DWORD PTR [esp],esi
c000e1a8:	e8 d3 23 ff ff       	call   c0000580 <strlen>
c000e1ad:	5a                   	pop    edx
c000e1ae:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e1b2:	52                   	push   edx
c000e1b3:	31 d2                	xor    edx,edx
c000e1b5:	56                   	push   esi
c000e1b6:	52                   	push   edx
c000e1b7:	50                   	push   eax
c000e1b8:	53                   	push   ebx
c000e1b9:	ff d7                	call   edi
c000e1bb:	83 c4 14             	add    esp,0x14
c000e1be:	53                   	push   ebx
c000e1bf:	e8 40 a0 ff ff       	call   c0008204 <File::close()>
c000e1c4:	83 c4 10             	add    esp,0x10
c000e1c7:	56                   	push   esi
c000e1c8:	31 f6                	xor    esi,esi
c000e1ca:	68 00 01 00 00       	push   0x100
c000e1cf:	6a 00                	push   0x0
c000e1d1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e1d5:	50                   	push   eax
c000e1d6:	e8 15 23 ff ff       	call   c00004f0 <memset>
c000e1db:	5f                   	pop    edi
c000e1dc:	58                   	pop    eax
c000e1dd:	6a 01                	push   0x1
c000e1df:	53                   	push   ebx
c000e1e0:	e8 c1 9f ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000e1e5:	83 c4 10             	add    esp,0x10
c000e1e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e1f8:	83 ec 0c             	sub    esp,0xc
c000e1fb:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e1ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e201:	52                   	push   edx
c000e202:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000e206:	51                   	push   ecx
c000e207:	6a 00                	push   0x0
c000e209:	6a 01                	push   0x1
c000e20b:	53                   	push   ebx
c000e20c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e20f:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e214:	83 c4 20             	add    esp,0x20
c000e217:	85 c0                	test   eax,eax
c000e219:	89 c1                	mov    ecx,eax
c000e21b:	0f 84 36 01 00 00    	je     c000e357 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e221:	83 f8 0d             	cmp    eax,0xd
c000e224:	0f 84 22 01 00 00    	je     c000e34c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e22a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e22f:	0f 84 f0 00 00 00    	je     c000e325 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e235:	83 f8 0a             	cmp    eax,0xa
c000e238:	74 13                	je     c000e24d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e23a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e23f:	74 0c                	je     c000e24d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e241:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e247:	0f 8e f6 00 00 00    	jle    c000e343 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e24d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	8d 78 01             	lea    edi,[eax+0x1]
c000e257:	57                   	push   edi
c000e258:	e8 0b 14 00 00       	call   c000f668 <malloc>
c000e25d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e261:	8d 56 04             	lea    edx,[esi+0x4]
c000e264:	89 14 24             	mov    DWORD PTR [esp],edx
c000e267:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e26b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e26f:	e8 f4 13 00 00       	call   c000f668 <malloc>
c000e274:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e278:	83 c4 0c             	add    esp,0xc
c000e27b:	57                   	push   edi
c000e27c:	6a 00                	push   0x0
c000e27e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e282:	e8 69 22 ff ff       	call   c00004f0 <memset>
c000e287:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e28b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e28f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e293:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e295:	83 c4 0c             	add    esp,0xc
c000e298:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e29c:	52                   	push   edx
c000e29d:	6a 00                	push   0x0
c000e29f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e2a3:	e8 48 22 ff ff       	call   c00004f0 <memset>
c000e2a8:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e2ac:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e2b0:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2b3:	e8 c8 22 ff ff       	call   c0000580 <strlen>
c000e2b8:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e2bc:	89 c1                	mov    ecx,eax
c000e2be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e2c0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e2c3:	83 c4 10             	add    esp,0x10
c000e2c6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e2c9:	40                   	inc    eax
c000e2ca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e2cd:	85 d2                	test   edx,edx
c000e2cf:	75 0c                	jne    c000e2dd <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e2d1:	83 ec 0c             	sub    esp,0xc
c000e2d4:	6a 08                	push   0x8
c000e2d6:	e8 8d 13 00 00       	call   c000f668 <malloc>
c000e2db:	eb 0c                	jmp    c000e2e9 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e2dd:	51                   	push   ecx
c000e2de:	51                   	push   ecx
c000e2df:	c1 e0 03             	shl    eax,0x3
c000e2e2:	50                   	push   eax
c000e2e3:	52                   	push   edx
c000e2e4:	e8 6b 13 00 00       	call   c000f654 <realloc>
c000e2e9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e2ec:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e2ef:	83 c4 10             	add    esp,0x10
c000e2f2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e2f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e2f9:	b9 08 00 00 00       	mov    ecx,0x8
c000e2fe:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e302:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e304:	50                   	push   eax
c000e305:	31 f6                	xor    esi,esi
c000e307:	68 00 01 00 00       	push   0x100
c000e30c:	6a 00                	push   0x0
c000e30e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e312:	50                   	push   eax
c000e313:	e8 d8 21 ff ff       	call   c00004f0 <memset>
c000e318:	83 c4 10             	add    esp,0x10
c000e31b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e323:	eb 27                	jmp    c000e34c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e325:	83 f8 3d             	cmp    eax,0x3d
c000e328:	74 1e                	je     c000e348 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e32a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e330:	7f 07                	jg     c000e339 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e332:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000e336:	46                   	inc    esi
c000e337:	eb 13                	jmp    c000e34c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e339:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e341:	eb 09                	jmp    c000e34c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e343:	83 f8 3d             	cmp    eax,0x3d
c000e346:	75 ea                	jne    c000e332 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e348:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e34c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e351:	0f 85 99 fe ff ff    	jne    c000e1f0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e357:	83 ec 0c             	sub    esp,0xc
c000e35a:	53                   	push   ebx
c000e35b:	e8 a4 9e ff ff       	call   c0008204 <File::close()>
c000e360:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e362:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e365:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e368:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e36e:	5b                   	pop    ebx
c000e36f:	5e                   	pop    esi
c000e370:	5f                   	pop    edi
c000e371:	5d                   	pop    ebp
c000e372:	c3                   	ret    
c000e373:	90                   	nop

c000e374 <EnvVarContainer::__loadSystem()>:
c000e374:	83 ec 10             	sub    esp,0x10
c000e377:	68 40 6b 02 c0       	push   0xc0026b40
c000e37c:	68 48 43 02 c0       	push   0xc0024348
c000e381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e385:	e8 c6 fd ff ff       	call   c000e150 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e38a:	83 c4 1c             	add    esp,0x1c
c000e38d:	c3                   	ret    

c000e38e <EnvVarContainer::__loadUser()>:
c000e38e:	c3                   	ret    
c000e38f:	90                   	nop

c000e390 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e394:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e39a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e39e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3b0:	90                   	nop
c000e3b1:	c3                   	ret    

c000e3b2 <EnvVarContainer::~EnvVarContainer()>:
c000e3b2:	83 ec 0c             	sub    esp,0xc
c000e3b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3bc:	85 c0                	test   eax,eax
c000e3be:	74 1d                	je     c000e3dd <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3c6:	85 c0                	test   eax,eax
c000e3c8:	74 13                	je     c000e3dd <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3d1:	83 ec 0c             	sub    esp,0xc
c000e3d4:	50                   	push   eax
c000e3d5:	e8 9e 12 00 00       	call   c000f678 <free>
c000e3da:	83 c4 10             	add    esp,0x10
c000e3dd:	90                   	nop
c000e3de:	83 c4 0c             	add    esp,0xc
c000e3e1:	c3                   	ret    

c000e3e2 <KeGetEnv(Process*, char const*)>:
c000e3e2:	53                   	push   ebx
c000e3e3:	83 ec 08             	sub    esp,0x8
c000e3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ea:	39 05 58 d3 02 c0    	cmp    DWORD PTR ds:0xc002d358,eax
c000e3f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e3f4:	74 04                	je     c000e3fa <KeGetEnv(Process*, char const*)+0x18>
c000e3f6:	85 c0                	test   eax,eax
c000e3f8:	75 0b                	jne    c000e405 <KeGetEnv(Process*, char const*)+0x23>
c000e3fa:	a1 10 d1 02 c0       	mov    eax,ds:0xc002d110
c000e3ff:	85 c0                	test   eax,eax
c000e401:	75 19                	jne    c000e41c <KeGetEnv(Process*, char const*)+0x3a>
c000e403:	eb 27                	jmp    c000e42c <KeGetEnv(Process*, char const*)+0x4a>
c000e405:	52                   	push   edx
c000e406:	52                   	push   edx
c000e407:	53                   	push   ebx
c000e408:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e40e:	e8 3b fc ff ff       	call   c000e04e <EnvVarContainer::getEnv(char const*)>
c000e413:	83 c4 10             	add    esp,0x10
c000e416:	85 c0                	test   eax,eax
c000e418:	75 28                	jne    c000e442 <KeGetEnv(Process*, char const*)+0x60>
c000e41a:	eb de                	jmp    c000e3fa <KeGetEnv(Process*, char const*)+0x18>
c000e41c:	52                   	push   edx
c000e41d:	52                   	push   edx
c000e41e:	53                   	push   ebx
c000e41f:	50                   	push   eax
c000e420:	e8 29 fc ff ff       	call   c000e04e <EnvVarContainer::getEnv(char const*)>
c000e425:	83 c4 10             	add    esp,0x10
c000e428:	85 c0                	test   eax,eax
c000e42a:	75 16                	jne    c000e442 <KeGetEnv(Process*, char const*)+0x60>
c000e42c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e430:	a1 14 d1 02 c0       	mov    eax,ds:0xc002d114
c000e435:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e439:	83 c4 08             	add    esp,0x8
c000e43c:	5b                   	pop    ebx
c000e43d:	e9 0c fc ff ff       	jmp    c000e04e <EnvVarContainer::getEnv(char const*)>
c000e442:	83 c4 08             	add    esp,0x8
c000e445:	5b                   	pop    ebx
c000e446:	c3                   	ret    

c000e447 <KeSetEnvSystem(char const*, char const*)>:
c000e447:	83 ec 10             	sub    esp,0x10
c000e44a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e44e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e452:	ff 35 14 d1 02 c0    	push   DWORD PTR ds:0xc002d114
c000e458:	e8 2f fc ff ff       	call   c000e08c <EnvVarContainer::setEnv(char const*, char const*)>
c000e45d:	83 c4 1c             	add    esp,0x1c
c000e460:	c3                   	ret    

c000e461 <KeSetEnvUser(char const*, char const*)>:
c000e461:	a1 10 d1 02 c0       	mov    eax,ds:0xc002d110
c000e466:	85 c0                	test   eax,eax
c000e468:	74 15                	je     c000e47f <KeSetEnvUser(char const*, char const*)+0x1e>
c000e46a:	83 ec 10             	sub    esp,0x10
c000e46d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e471:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e475:	50                   	push   eax
c000e476:	e8 11 fc ff ff       	call   c000e08c <EnvVarContainer::setEnv(char const*, char const*)>
c000e47b:	83 c4 1c             	add    esp,0x1c
c000e47e:	c3                   	ret    
c000e47f:	c3                   	ret    

c000e480 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e484:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e48a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e48e:	e9 f9 fb ff ff       	jmp    c000e08c <EnvVarContainer::setEnv(char const*, char const*)>

c000e493 <KeDeleteEnvSystem(char const*)>:
c000e493:	c3                   	ret    

c000e494 <KeDeleteEnvUser(char const*)>:
c000e494:	c3                   	ret    

c000e495 <KeDeleteEnvProcess(Process*, char const*)>:
c000e495:	c3                   	ret    

c000e496 <KeNewProcessEnv(Process*)>:
c000e496:	83 ec 28             	sub    esp,0x28
c000e499:	6a 0c                	push   0xc
c000e49b:	e8 c8 11 00 00       	call   c000f668 <malloc>
c000e4a0:	5a                   	pop    edx
c000e4a1:	59                   	pop    ecx
c000e4a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e4a6:	50                   	push   eax
c000e4a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4ab:	e8 e0 fe ff ff       	call   c000e390 <EnvVarContainer::EnvVarContainer(Process*)>
c000e4b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e4b4:	83 c4 2c             	add    esp,0x2c
c000e4b7:	c3                   	ret    

c000e4b8 <KeCopyProcessEnv(Process*, Process*)>:
c000e4b8:	57                   	push   edi
c000e4b9:	56                   	push   esi
c000e4ba:	53                   	push   ebx
c000e4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4bf:	83 ec 0c             	sub    esp,0xc
c000e4c2:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e4c8:	6a 0c                	push   0xc
c000e4ca:	e8 99 11 00 00       	call   c000f668 <malloc>
c000e4cf:	89 c3                	mov    ebx,eax
c000e4d1:	58                   	pop    eax
c000e4d2:	5a                   	pop    edx
c000e4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4d7:	53                   	push   ebx
c000e4d8:	e8 b3 fe ff ff       	call   c000e390 <EnvVarContainer::EnvVarContainer(Process*)>
c000e4dd:	8b 07                	mov    eax,DWORD PTR [edi]
c000e4df:	89 03                	mov    DWORD PTR [ebx],eax
c000e4e1:	c1 e0 03             	shl    eax,0x3
c000e4e4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4e7:	e8 7c 11 00 00       	call   c000f668 <malloc>
c000e4ec:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e4ef:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e4f1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e4f4:	89 c7                	mov    edi,eax
c000e4f6:	c1 e1 03             	shl    ecx,0x3
c000e4f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4fb:	83 c4 10             	add    esp,0x10
c000e4fe:	89 d8                	mov    eax,ebx
c000e500:	5b                   	pop    ebx
c000e501:	5e                   	pop    esi
c000e502:	5f                   	pop    edi
c000e503:	c3                   	ret    

c000e504 <KeLoadSystemEnv()>:
c000e504:	53                   	push   ebx
c000e505:	83 ec 14             	sub    esp,0x14
c000e508:	6a 0c                	push   0xc
c000e50a:	e8 59 11 00 00       	call   c000f668 <malloc>
c000e50f:	89 c3                	mov    ebx,eax
c000e511:	58                   	pop    eax
c000e512:	5a                   	pop    edx
c000e513:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c000e519:	53                   	push   ebx
c000e51a:	e8 71 fe ff ff       	call   c000e390 <EnvVarContainer::EnvVarContainer(Process*)>
c000e51f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e522:	89 1d 14 d1 02 c0    	mov    DWORD PTR ds:0xc002d114,ebx
c000e528:	e8 47 fe ff ff       	call   c000e374 <EnvVarContainer::__loadSystem()>
c000e52d:	83 c4 18             	add    esp,0x18
c000e530:	5b                   	pop    ebx
c000e531:	c3                   	ret    

c000e532 <KeLoadUserEnv()>:
c000e532:	53                   	push   ebx
c000e533:	83 ec 14             	sub    esp,0x14
c000e536:	6a 0c                	push   0xc
c000e538:	e8 2b 11 00 00       	call   c000f668 <malloc>
c000e53d:	89 c3                	mov    ebx,eax
c000e53f:	58                   	pop    eax
c000e540:	5a                   	pop    edx
c000e541:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c000e547:	53                   	push   ebx
c000e548:	e8 43 fe ff ff       	call   c000e390 <EnvVarContainer::EnvVarContainer(Process*)>
c000e54d:	89 1d 10 d1 02 c0    	mov    DWORD PTR ds:0xc002d110,ebx
c000e553:	83 c4 18             	add    esp,0x18
c000e556:	5b                   	pop    ebx
c000e557:	c3                   	ret    

c000e558 <KeFlushEnv()>:
c000e558:	c3                   	ret    

c000e559 <KeGetProcessTotalEnvCount(Process*)>:
c000e559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e55d:	8b 15 10 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d110
c000e563:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e569:	a1 14 d1 02 c0       	mov    eax,ds:0xc002d114
c000e56e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e570:	03 01                	add    eax,DWORD PTR [ecx]
c000e572:	85 d2                	test   edx,edx
c000e574:	74 02                	je     c000e578 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e576:	03 02                	add    eax,DWORD PTR [edx]
c000e578:	c3                   	ret    

c000e579 <KeGetProcessEnvPair(Process*, int)>:
c000e579:	57                   	push   edi
c000e57a:	56                   	push   esi
c000e57b:	8b 35 10 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d110
c000e581:	53                   	push   ebx
c000e582:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e586:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e58a:	85 f6                	test   esi,esi
c000e58c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e590:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e596:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e598:	75 16                	jne    c000e5b0 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e59a:	39 c2                	cmp    edx,eax
c000e59c:	7c 16                	jl     c000e5b4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e59e:	8b 0d 14 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d114
c000e5a4:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e5a6:	01 c6                	add    esi,eax
c000e5a8:	39 d6                	cmp    esi,edx
c000e5aa:	7e 3c                	jle    c000e5e8 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e5ac:	29 c2                	sub    edx,eax
c000e5ae:	eb 04                	jmp    c000e5b4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e5b0:	39 c2                	cmp    edx,eax
c000e5b2:	7d 05                	jge    c000e5b9 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e5b4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e5b7:	eb 20                	jmp    c000e5d9 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e5b9:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e5bb:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e5be:	39 d1                	cmp    ecx,edx
c000e5c0:	7e 04                	jle    c000e5c6 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e5c2:	29 c2                	sub    edx,eax
c000e5c4:	eb 10                	jmp    c000e5d6 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e5c6:	8b 35 14 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d114
c000e5cc:	03 0e                	add    ecx,DWORD PTR [esi]
c000e5ce:	39 d1                	cmp    ecx,edx
c000e5d0:	7e 16                	jle    c000e5e8 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e5d2:	29 c2                	sub    edx,eax
c000e5d4:	29 fa                	sub    edx,edi
c000e5d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e5d9:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e5dc:	8b 02                	mov    eax,DWORD PTR [edx]
c000e5de:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e5e1:	89 03                	mov    DWORD PTR [ebx],eax
c000e5e3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e5e6:	eb 1d                	jmp    c000e605 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e5e8:	83 ec 0c             	sub    esp,0xc
c000e5eb:	68 6a 43 02 c0       	push   0xc002436a
c000e5f0:	e8 c7 14 00 00       	call   c000fabc <KePanic(char const*)>
c000e5f5:	83 c4 10             	add    esp,0x10
c000e5f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e5fe:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e605:	89 d8                	mov    eax,ebx
c000e607:	5b                   	pop    ebx
c000e608:	5e                   	pop    esi
c000e609:	5f                   	pop    edi
c000e60a:	c2 04 00             	ret    0x4
c000e60d:	66 90                	xchg   ax,ax
c000e60f:	90                   	nop

c000e610 <KeDisplayProgramFault(char const*)>:
c000e610:	83 ec 0c             	sub    esp,0xc
c000e613:	83 ec 0c             	sub    esp,0xc
c000e616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e61a:	e8 47 89 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e61f:	83 c4 10             	add    esp,0x10
c000e622:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e627:	8b 00                	mov    eax,DWORD PTR [eax]
c000e629:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e62c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e632:	85 c0                	test   eax,eax
c000e634:	74 22                	je     c000e658 <KeDisplayProgramFault(char const*)+0x48>
c000e636:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e63b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e63d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e640:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e646:	6a 04                	push   0x4
c000e648:	6a 0f                	push   0xf
c000e64a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e64e:	50                   	push   eax
c000e64f:	e8 16 3e 00 00       	call   c001246a <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e654:	83 c4 10             	add    esp,0x10
c000e657:	90                   	nop
c000e658:	90                   	nop
c000e659:	83 c4 0c             	add    esp,0xc
c000e65c:	c3                   	ret    
c000e65d:	8d 76 00             	lea    esi,[esi+0x0]

c000e660 <KeGeneralProtectionFault(void*, void*)>:
c000e660:	83 ec 0c             	sub    esp,0xc
c000e663:	83 ec 08             	sub    esp,0x8
c000e666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e66a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e66e:	e8 bb b9 00 00       	call   c001a02e <HalHandleGeneralProtectionFault(void*, void*)>
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	0f b6 c0             	movzx  eax,al
c000e679:	85 c0                	test   eax,eax
c000e67b:	75 2f                	jne    c000e6ac <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e67d:	83 ec 0c             	sub    esp,0xc
c000e680:	68 84 43 02 c0       	push   0xc0024384
c000e685:	e8 86 ff ff ff       	call   c000e610 <KeDisplayProgramFault(char const*)>
c000e68a:	83 c4 10             	add    esp,0x10
c000e68d:	83 ec 0c             	sub    esp,0xc
c000e690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e694:	e8 0e bb 00 00       	call   c001a1a7 <HalDisplayDebugInfo(void*)>
c000e699:	83 c4 10             	add    esp,0x10
c000e69c:	83 ec 0c             	sub    esp,0xc
c000e69f:	6a 7e                	push   0x7e
c000e6a1:	e8 82 87 00 00       	call   c0016e28 <KeTerminateCurrentThread(int)>
c000e6a6:	83 c4 10             	add    esp,0x10
c000e6a9:	eb 05                	jmp    c000e6b0 <KeGeneralProtectionFault(void*, void*)+0x50>
c000e6ab:	90                   	nop
c000e6ac:	90                   	nop
c000e6ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e6b0:	83 c4 0c             	add    esp,0xc
c000e6b3:	c3                   	ret    

c000e6b4 <KePageFault(void*, void*)>:
c000e6b4:	83 ec 0c             	sub    esp,0xc
c000e6b7:	83 ec 08             	sub    esp,0x8
c000e6ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6c2:	e8 6f ba 00 00       	call   c001a136 <HalHandlePageFault(void*, void*)>
c000e6c7:	83 c4 10             	add    esp,0x10
c000e6ca:	0f b6 c0             	movzx  eax,al
c000e6cd:	85 c0                	test   eax,eax
c000e6cf:	75 2f                	jne    c000e700 <KePageFault(void*, void*)+0x4c>
c000e6d1:	83 ec 0c             	sub    esp,0xc
c000e6d4:	68 9d 43 02 c0       	push   0xc002439d
c000e6d9:	e8 32 ff ff ff       	call   c000e610 <KeDisplayProgramFault(char const*)>
c000e6de:	83 c4 10             	add    esp,0x10
c000e6e1:	83 ec 0c             	sub    esp,0xc
c000e6e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6e8:	e8 ba ba 00 00       	call   c001a1a7 <HalDisplayDebugInfo(void*)>
c000e6ed:	83 c4 10             	add    esp,0x10
c000e6f0:	83 ec 0c             	sub    esp,0xc
c000e6f3:	6a 7f                	push   0x7f
c000e6f5:	e8 2e 87 00 00       	call   c0016e28 <KeTerminateCurrentThread(int)>
c000e6fa:	83 c4 10             	add    esp,0x10
c000e6fd:	eb 05                	jmp    c000e704 <KePageFault(void*, void*)+0x50>
c000e6ff:	90                   	nop
c000e700:	90                   	nop
c000e701:	8d 76 00             	lea    esi,[esi+0x0]
c000e704:	83 c4 0c             	add    esp,0xc
c000e707:	c3                   	ret    

c000e708 <KeOpcodeFault(void*, void*)>:
c000e708:	83 ec 0c             	sub    esp,0xc
c000e70b:	83 ec 08             	sub    esp,0x8
c000e70e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e716:	e8 4a ba 00 00       	call   c001a165 <HalHandleOpcodeFault(void*, void*)>
c000e71b:	83 c4 10             	add    esp,0x10
c000e71e:	0f b6 c0             	movzx  eax,al
c000e721:	85 c0                	test   eax,eax
c000e723:	75 2f                	jne    c000e754 <KeOpcodeFault(void*, void*)+0x4c>
c000e725:	83 ec 0c             	sub    esp,0xc
c000e728:	68 a8 43 02 c0       	push   0xc00243a8
c000e72d:	e8 de fe ff ff       	call   c000e610 <KeDisplayProgramFault(char const*)>
c000e732:	83 c4 10             	add    esp,0x10
c000e735:	83 ec 0c             	sub    esp,0xc
c000e738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e73c:	e8 66 ba 00 00       	call   c001a1a7 <HalDisplayDebugInfo(void*)>
c000e741:	83 c4 10             	add    esp,0x10
c000e744:	83 ec 0c             	sub    esp,0xc
c000e747:	6a 7c                	push   0x7c
c000e749:	e8 da 86 00 00       	call   c0016e28 <KeTerminateCurrentThread(int)>
c000e74e:	83 c4 10             	add    esp,0x10
c000e751:	eb 05                	jmp    c000e758 <KeOpcodeFault(void*, void*)+0x50>
c000e753:	90                   	nop
c000e754:	90                   	nop
c000e755:	8d 76 00             	lea    esi,[esi+0x0]
c000e758:	83 c4 0c             	add    esp,0xc
c000e75b:	c3                   	ret    

c000e75c <KeOtherFault(void*, void*)>:
c000e75c:	83 ec 0c             	sub    esp,0xc
c000e75f:	83 ec 0c             	sub    esp,0xc
c000e762:	68 c4 43 02 c0       	push   0xc00243c4
c000e767:	e8 a4 fe ff ff       	call   c000e610 <KeDisplayProgramFault(char const*)>
c000e76c:	83 c4 10             	add    esp,0x10
c000e76f:	83 ec 0c             	sub    esp,0xc
c000e772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e776:	e8 2c ba 00 00       	call   c001a1a7 <HalDisplayDebugInfo(void*)>
c000e77b:	83 c4 10             	add    esp,0x10
c000e77e:	83 ec 0c             	sub    esp,0xc
c000e781:	6a 7d                	push   0x7d
c000e783:	e8 a0 86 00 00       	call   c0016e28 <KeTerminateCurrentThread(int)>
c000e788:	83 c4 10             	add    esp,0x10
c000e78b:	90                   	nop
c000e78c:	83 c4 0c             	add    esp,0xc
c000e78f:	c3                   	ret    

c000e790 <KeNonMaskableInterrupt(void*, void*)>:
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	e8 9d bd 00 00       	call   c001a535 <HalReceivedNMI()>
c000e798:	90                   	nop
c000e799:	83 c4 0c             	add    esp,0xc
c000e79c:	c3                   	ret    
c000e79d:	8d 76 00             	lea    esi,[esi+0x0]

c000e7a0 <KeDoubleFault(void*, void*)>:
c000e7a0:	83 ec 0c             	sub    esp,0xc
c000e7a3:	83 ec 0c             	sub    esp,0xc
c000e7a6:	68 b5 43 02 c0       	push   0xc00243b5
c000e7ab:	e8 0c 13 00 00       	call   c000fabc <KePanic(char const*)>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	90                   	nop
c000e7b4:	83 c4 0c             	add    esp,0xc
c000e7b7:	c3                   	ret    

c000e7b8 <GDTEntry::setBase(unsigned int)>:
c000e7b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e7bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e7c0:	89 c1                	mov    ecx,eax
c000e7c2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e7c6:	c1 e9 10             	shr    ecx,0x10
c000e7c9:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e7cc:	c1 e8 18             	shr    eax,0x18
c000e7cf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e7d2:	c3                   	ret    
c000e7d3:	90                   	nop

c000e7d4 <GDTEntry::setLimit(unsigned int)>:
c000e7d4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e7d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e7dc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e7df:	66 89 01             	mov    WORD PTR [ecx],ax
c000e7e2:	c1 e8 10             	shr    eax,0x10
c000e7e5:	83 e0 0f             	and    eax,0xf
c000e7e8:	83 e2 f0             	and    edx,0xfffffff0
c000e7eb:	09 d0                	or     eax,edx
c000e7ed:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e7f0:	c3                   	ret    
c000e7f1:	90                   	nop

c000e7f2 <GDT::GDT()>:
c000e7f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e7fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e800:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e806:	90                   	nop
c000e807:	c3                   	ret    

c000e808 <GDT::addEntry(GDTEntry)>:
c000e808:	53                   	push   ebx
c000e809:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e80d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e811:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e815:	8b 02                	mov    eax,DWORD PTR [edx]
c000e817:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e81b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e81e:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e822:	c1 e0 03             	shl    eax,0x3
c000e825:	89 0a                	mov    DWORD PTR [edx],ecx
c000e827:	5b                   	pop    ebx
c000e828:	c3                   	ret    
c000e829:	90                   	nop

c000e82a <GDT::getNumberOfEntries()>:
c000e82a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e82e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e830:	c3                   	ret    
c000e831:	90                   	nop

c000e832 <GDT::flush()>:
c000e832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e836:	8b 10                	mov    edx,DWORD PTR [eax]
c000e838:	83 c0 04             	add    eax,0x4
c000e83b:	a3 1a d1 02 c0       	mov    ds:0xc002d11a,eax
c000e840:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e847:	66 89 15 18 d1 02 c0 	mov    WORD PTR ds:0xc002d118,dx
c000e84e:	e9 07 1b ff ff       	jmp    c000035a <loadGDT>
c000e853:	90                   	nop

c000e854 <GDT::setup()>:
c000e854:	57                   	push   edi
c000e855:	56                   	push   esi
c000e856:	53                   	push   ebx
c000e857:	83 ec 30             	sub    esp,0x30
c000e85a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e85e:	6a 00                	push   0x0
c000e860:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e864:	56                   	push   esi
c000e865:	e8 4e ff ff ff       	call   c000e7b8 <GDTEntry::setBase(unsigned int)>
c000e86a:	6a 00                	push   0x0
c000e86c:	56                   	push   esi
c000e86d:	e8 62 ff ff ff       	call   c000e7d4 <GDTEntry::setLimit(unsigned int)>
c000e872:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e87a:	6a 00                	push   0x0
c000e87c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e880:	56                   	push   esi
c000e881:	e8 32 ff ff ff       	call   c000e7b8 <GDTEntry::setBase(unsigned int)>
c000e886:	68 ff ff ff 00       	push   0xffffff
c000e88b:	56                   	push   esi
c000e88c:	e8 43 ff ff ff       	call   c000e7d4 <GDTEntry::setLimit(unsigned int)>
c000e891:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e895:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e899:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e89e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e8a2:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e8a7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e8ab:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e8af:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e8b3:	89 f8                	mov    eax,edi
c000e8b5:	89 fa                	mov    edx,edi
c000e8b7:	80 e4 f7             	and    ah,0xf7
c000e8ba:	80 ce 60             	or     dh,0x60
c000e8bd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e8c1:	89 c7                	mov    edi,eax
c000e8c3:	80 cc 60             	or     ah,0x60
c000e8c6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e8ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e8ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e8d2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e8d6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e8da:	83 c4 20             	add    esp,0x20
c000e8dd:	6a 00                	push   0x0
c000e8df:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e8e3:	50                   	push   eax
c000e8e4:	e8 cf fe ff ff       	call   c000e7b8 <GDTEntry::setBase(unsigned int)>
c000e8e9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e8ed:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e8f1:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e8f5:	83 e0 3f             	and    eax,0x3f
c000e8f8:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e8fc:	6a 00                	push   0x0
c000e8fe:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e902:	50                   	push   eax
c000e903:	e8 b0 fe ff ff       	call   c000e7b8 <GDTEntry::setBase(unsigned int)>
c000e908:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e90c:	83 e0 3f             	and    eax,0x3f
c000e90f:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e913:	83 c4 0c             	add    esp,0xc
c000e916:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e91a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e91e:	53                   	push   ebx
c000e91f:	e8 e4 fe ff ff       	call   c000e808 <GDT::addEntry(GDTEntry)>
c000e924:	83 c4 0c             	add    esp,0xc
c000e927:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e92b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e92f:	53                   	push   ebx
c000e930:	e8 d3 fe ff ff       	call   c000e808 <GDT::addEntry(GDTEntry)>
c000e935:	83 c4 0c             	add    esp,0xc
c000e938:	57                   	push   edi
c000e939:	56                   	push   esi
c000e93a:	53                   	push   ebx
c000e93b:	e8 c8 fe ff ff       	call   c000e808 <GDT::addEntry(GDTEntry)>
c000e940:	83 c4 0c             	add    esp,0xc
c000e943:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e947:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e94b:	53                   	push   ebx
c000e94c:	e8 b7 fe ff ff       	call   c000e808 <GDT::addEntry(GDTEntry)>
c000e951:	83 c4 0c             	add    esp,0xc
c000e954:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e958:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e95c:	53                   	push   ebx
c000e95d:	e8 a6 fe ff ff       	call   c000e808 <GDT::addEntry(GDTEntry)>
c000e962:	83 c4 0c             	add    esp,0xc
c000e965:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e969:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e96d:	53                   	push   ebx
c000e96e:	e8 95 fe ff ff       	call   c000e808 <GDT::addEntry(GDTEntry)>
c000e973:	83 c4 0c             	add    esp,0xc
c000e976:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e97a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e97e:	53                   	push   ebx
c000e97f:	e8 84 fe ff ff       	call   c000e808 <GDT::addEntry(GDTEntry)>
c000e984:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e987:	e8 a6 fe ff ff       	call   c000e832 <GDT::flush()>
c000e98c:	83 c4 40             	add    esp,0x40
c000e98f:	5b                   	pop    ebx
c000e990:	5e                   	pop    esi
c000e991:	5f                   	pop    edi
c000e992:	c3                   	ret    

c000e993 <idleFunction(void*)>:
c000e993:	83 ec 0c             	sub    esp,0xc
c000e996:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c000e99d:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c000e9a4:	75 01                	jne    c000e9a7 <idleFunction(void*)+0x14>
c000e9a6:	fb                   	sti    
c000e9a7:	e8 24 bc 00 00       	call   c001a5d0 <HalSystemIdle()>
c000e9ac:	e8 55 3b 01 00       	call   c0022506 <idleCommon()>
c000e9b1:	eb f4                	jmp    c000e9a7 <idleFunction(void*)+0x14>
c000e9b3:	90                   	nop

c000e9b4 <IDTEntry::IDTEntry(bool)>:
c000e9b4:	53                   	push   ebx
c000e9b5:	83 ec 04             	sub    esp,0x4
c000e9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9bc:	88 04 24             	mov    BYTE PTR [esp],al
c000e9bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9c3:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e9c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9cd:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e9d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9d5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e9d8:	83 e2 f0             	and    edx,0xfffffff0
c000e9db:	83 ca 0e             	or     edx,0xe
c000e9de:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e9e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9e5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e9e8:	83 e2 ef             	and    edx,0xffffffef
c000e9eb:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e9ee:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e9f2:	85 c0                	test   eax,eax
c000e9f4:	74 06                	je     c000e9fc <IDTEntry::IDTEntry(bool)+0x48>
c000e9f6:	b2 03                	mov    dl,0x3
c000e9f8:	eb 06                	jmp    c000ea00 <IDTEntry::IDTEntry(bool)+0x4c>
c000e9fa:	66 90                	xchg   ax,ax
c000e9fc:	b2 00                	mov    dl,0x0
c000e9fe:	66 90                	xchg   ax,ax
c000ea00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea04:	83 e2 03             	and    edx,0x3
c000ea07:	89 d3                	mov    ebx,edx
c000ea09:	c1 e3 05             	shl    ebx,0x5
c000ea0c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ea0f:	83 e2 9f             	and    edx,0xffffff9f
c000ea12:	88 d1                	mov    cl,dl
c000ea14:	88 da                	mov    dl,bl
c000ea16:	09 ca                	or     edx,ecx
c000ea18:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ea1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea1f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ea22:	83 ca 80             	or     edx,0xffffff80
c000ea25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ea28:	90                   	nop
c000ea29:	83 c4 04             	add    esp,0x4
c000ea2c:	5b                   	pop    ebx
c000ea2d:	c3                   	ret    

c000ea2e <IDTEntry::setOffset(unsigned int)>:
c000ea2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ea32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea36:	66 89 02             	mov    WORD PTR [edx],ax
c000ea39:	c1 e8 10             	shr    eax,0x10
c000ea3c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ea40:	c3                   	ret    
c000ea41:	90                   	nop
c000ea42:	66 90                	xchg   ax,ax

c000ea44 <IDT::IDT()>:
c000ea44:	90                   	nop
c000ea45:	c3                   	ret    

c000ea46 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ea46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ea4a:	83 c0 30             	add    eax,0x30
c000ea4d:	c3                   	ret    

c000ea4e <IDT::addEntry(IDTEntry, int)>:
c000ea4e:	53                   	push   ebx
c000ea4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ea57:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ea5f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ea62:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ea66:	5b                   	pop    ebx
c000ea67:	c3                   	ret    

c000ea68 <IDT::addEntry(int, void (*)(), bool)>:
c000ea68:	53                   	push   ebx
c000ea69:	83 ec 10             	sub    esp,0x10
c000ea6c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ea71:	50                   	push   eax
c000ea72:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ea76:	53                   	push   ebx
c000ea77:	e8 38 ff ff ff       	call   c000e9b4 <IDTEntry::IDTEntry(bool)>
c000ea7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea80:	53                   	push   ebx
c000ea81:	e8 a8 ff ff ff       	call   c000ea2e <IDTEntry::setOffset(unsigned int)>
c000ea86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea8e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ea96:	e8 b3 ff ff ff       	call   c000ea4e <IDT::addEntry(IDTEntry, int)>
c000ea9b:	83 c4 30             	add    esp,0x30
c000ea9e:	5b                   	pop    ebx
c000ea9f:	c3                   	ret    

c000eaa0 <IDT::flush()>:
c000eaa0:	66 c7 05 20 d1 02 c0 ff 07 	mov    WORD PTR ds:0xc002d120,0x7ff
c000eaa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaad:	a3 22 d1 02 c0       	mov    ds:0xc002d122,eax
c000eab2:	0f 01 1d 20 d1 02 c0 	lidtd  ds:0xc002d120
c000eab9:	c3                   	ret    

c000eaba <IDT::setup()>:
c000eaba:	57                   	push   edi
c000eabb:	56                   	push   esi
c000eabc:	53                   	push   ebx
c000eabd:	83 ec 10             	sub    esp,0x10
c000eac0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000eac4:	6a 00                	push   0x0
c000eac6:	68 e0 17 02 c0       	push   0xc00217e0
c000eacb:	6a 00                	push   0x0
c000eacd:	53                   	push   ebx
c000eace:	e8 95 ff ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ead3:	6a 00                	push   0x0
c000ead5:	68 f0 17 02 c0       	push   0xc00217f0
c000eada:	6a 01                	push   0x1
c000eadc:	53                   	push   ebx
c000eadd:	e8 86 ff ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eae2:	83 c4 20             	add    esp,0x20
c000eae5:	6a 00                	push   0x0
c000eae7:	68 fa 17 02 c0       	push   0xc00217fa
c000eaec:	6a 02                	push   0x2
c000eaee:	53                   	push   ebx
c000eaef:	e8 74 ff ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eaf4:	6a 00                	push   0x0
c000eaf6:	68 04 18 02 c0       	push   0xc0021804
c000eafb:	6a 03                	push   0x3
c000eafd:	53                   	push   ebx
c000eafe:	e8 65 ff ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eb03:	83 c4 20             	add    esp,0x20
c000eb06:	6a 00                	push   0x0
c000eb08:	68 0e 18 02 c0       	push   0xc002180e
c000eb0d:	6a 04                	push   0x4
c000eb0f:	53                   	push   ebx
c000eb10:	e8 53 ff ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eb15:	6a 00                	push   0x0
c000eb17:	68 18 18 02 c0       	push   0xc0021818
c000eb1c:	6a 05                	push   0x5
c000eb1e:	53                   	push   ebx
c000eb1f:	e8 44 ff ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eb24:	83 c4 20             	add    esp,0x20
c000eb27:	6a 00                	push   0x0
c000eb29:	68 22 18 02 c0       	push   0xc0021822
c000eb2e:	6a 06                	push   0x6
c000eb30:	53                   	push   ebx
c000eb31:	e8 32 ff ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eb36:	6a 00                	push   0x0
c000eb38:	68 2c 18 02 c0       	push   0xc002182c
c000eb3d:	6a 07                	push   0x7
c000eb3f:	53                   	push   ebx
c000eb40:	e8 23 ff ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eb45:	83 c4 20             	add    esp,0x20
c000eb48:	6a 00                	push   0x0
c000eb4a:	68 36 18 02 c0       	push   0xc0021836
c000eb4f:	6a 08                	push   0x8
c000eb51:	53                   	push   ebx
c000eb52:	e8 11 ff ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eb57:	6a 00                	push   0x0
c000eb59:	68 3e 18 02 c0       	push   0xc002183e
c000eb5e:	6a 09                	push   0x9
c000eb60:	53                   	push   ebx
c000eb61:	e8 02 ff ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eb66:	83 c4 20             	add    esp,0x20
c000eb69:	6a 00                	push   0x0
c000eb6b:	68 48 18 02 c0       	push   0xc0021848
c000eb70:	6a 0a                	push   0xa
c000eb72:	53                   	push   ebx
c000eb73:	e8 f0 fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eb78:	6a 00                	push   0x0
c000eb7a:	68 50 18 02 c0       	push   0xc0021850
c000eb7f:	6a 0b                	push   0xb
c000eb81:	53                   	push   ebx
c000eb82:	e8 e1 fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eb87:	83 c4 20             	add    esp,0x20
c000eb8a:	6a 00                	push   0x0
c000eb8c:	68 58 18 02 c0       	push   0xc0021858
c000eb91:	6a 0c                	push   0xc
c000eb93:	53                   	push   ebx
c000eb94:	e8 cf fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eb99:	6a 00                	push   0x0
c000eb9b:	68 60 18 02 c0       	push   0xc0021860
c000eba0:	6a 0d                	push   0xd
c000eba2:	53                   	push   ebx
c000eba3:	e8 c0 fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eba8:	83 c4 20             	add    esp,0x20
c000ebab:	6a 00                	push   0x0
c000ebad:	68 7a 18 02 c0       	push   0xc002187a
c000ebb2:	6a 0e                	push   0xe
c000ebb4:	53                   	push   ebx
c000ebb5:	e8 ae fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ebba:	6a 00                	push   0x0
c000ebbc:	68 82 18 02 c0       	push   0xc0021882
c000ebc1:	6a 0f                	push   0xf
c000ebc3:	53                   	push   ebx
c000ebc4:	e8 9f fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ebc9:	83 c4 20             	add    esp,0x20
c000ebcc:	6a 00                	push   0x0
c000ebce:	68 8c 18 02 c0       	push   0xc002188c
c000ebd3:	6a 10                	push   0x10
c000ebd5:	53                   	push   ebx
c000ebd6:	e8 8d fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ebdb:	6a 00                	push   0x0
c000ebdd:	68 96 18 02 c0       	push   0xc0021896
c000ebe2:	6a 11                	push   0x11
c000ebe4:	53                   	push   ebx
c000ebe5:	e8 7e fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ebea:	83 c4 20             	add    esp,0x20
c000ebed:	6a 00                	push   0x0
c000ebef:	68 a0 18 02 c0       	push   0xc00218a0
c000ebf4:	6a 12                	push   0x12
c000ebf6:	53                   	push   ebx
c000ebf7:	e8 6c fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ebfc:	6a 01                	push   0x1
c000ebfe:	68 3a 19 02 c0       	push   0xc002193a
c000ec03:	6a 60                	push   0x60
c000ec05:	53                   	push   ebx
c000ec06:	e8 5d fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ec0b:	83 c4 20             	add    esp,0x20
c000ec0e:	6a 00                	push   0x0
c000ec10:	68 41 19 02 c0       	push   0xc0021941
c000ec15:	6a 20                	push   0x20
c000ec17:	53                   	push   ebx
c000ec18:	e8 4b fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ec1d:	6a 00                	push   0x0
c000ec1f:	68 2c 19 02 c0       	push   0xc002192c
c000ec24:	6a 21                	push   0x21
c000ec26:	53                   	push   ebx
c000ec27:	e8 3c fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ec2c:	83 c4 20             	add    esp,0x20
c000ec2f:	6a 00                	push   0x0
c000ec31:	68 33 19 02 c0       	push   0xc0021933
c000ec36:	6a 22                	push   0x22
c000ec38:	53                   	push   ebx
c000ec39:	e8 2a fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ec3e:	6a 00                	push   0x0
c000ec40:	68 aa 18 02 c0       	push   0xc00218aa
c000ec45:	6a 23                	push   0x23
c000ec47:	53                   	push   ebx
c000ec48:	e8 1b fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ec4d:	83 c4 20             	add    esp,0x20
c000ec50:	6a 00                	push   0x0
c000ec52:	68 b4 18 02 c0       	push   0xc00218b4
c000ec57:	6a 24                	push   0x24
c000ec59:	53                   	push   ebx
c000ec5a:	e8 09 fe ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ec5f:	6a 00                	push   0x0
c000ec61:	68 be 18 02 c0       	push   0xc00218be
c000ec66:	6a 25                	push   0x25
c000ec68:	53                   	push   ebx
c000ec69:	e8 fa fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ec6e:	83 c4 20             	add    esp,0x20
c000ec71:	6a 00                	push   0x0
c000ec73:	68 c8 18 02 c0       	push   0xc00218c8
c000ec78:	6a 26                	push   0x26
c000ec7a:	53                   	push   ebx
c000ec7b:	e8 e8 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ec80:	6a 00                	push   0x0
c000ec82:	68 d2 18 02 c0       	push   0xc00218d2
c000ec87:	6a 27                	push   0x27
c000ec89:	53                   	push   ebx
c000ec8a:	e8 d9 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ec8f:	83 c4 20             	add    esp,0x20
c000ec92:	6a 00                	push   0x0
c000ec94:	68 dc 18 02 c0       	push   0xc00218dc
c000ec99:	6a 28                	push   0x28
c000ec9b:	53                   	push   ebx
c000ec9c:	e8 c7 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000eca1:	6a 00                	push   0x0
c000eca3:	68 e6 18 02 c0       	push   0xc00218e6
c000eca8:	6a 29                	push   0x29
c000ecaa:	53                   	push   ebx
c000ecab:	e8 b8 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ecb0:	83 c4 20             	add    esp,0x20
c000ecb3:	6a 00                	push   0x0
c000ecb5:	68 f0 18 02 c0       	push   0xc00218f0
c000ecba:	6a 2a                	push   0x2a
c000ecbc:	53                   	push   ebx
c000ecbd:	e8 a6 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ecc2:	6a 00                	push   0x0
c000ecc4:	68 fa 18 02 c0       	push   0xc00218fa
c000ecc9:	6a 2b                	push   0x2b
c000eccb:	53                   	push   ebx
c000eccc:	e8 97 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ecd1:	83 c4 20             	add    esp,0x20
c000ecd4:	6a 00                	push   0x0
c000ecd6:	68 04 19 02 c0       	push   0xc0021904
c000ecdb:	6a 2c                	push   0x2c
c000ecdd:	53                   	push   ebx
c000ecde:	e8 85 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ece3:	6a 00                	push   0x0
c000ece5:	68 0e 19 02 c0       	push   0xc002190e
c000ecea:	6a 2d                	push   0x2d
c000ecec:	53                   	push   ebx
c000eced:	e8 76 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ecf2:	83 c4 20             	add    esp,0x20
c000ecf5:	6a 00                	push   0x0
c000ecf7:	68 18 19 02 c0       	push   0xc0021918
c000ecfc:	6a 2e                	push   0x2e
c000ecfe:	53                   	push   ebx
c000ecff:	e8 64 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ed04:	6a 00                	push   0x0
c000ed06:	68 22 19 02 c0       	push   0xc0021922
c000ed0b:	6a 2f                	push   0x2f
c000ed0d:	53                   	push   ebx
c000ed0e:	e8 55 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ed13:	83 c4 20             	add    esp,0x20
c000ed16:	6a 00                	push   0x0
c000ed18:	68 48 1a 02 c0       	push   0xc0021a48
c000ed1d:	6a 30                	push   0x30
c000ed1f:	53                   	push   ebx
c000ed20:	e8 43 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ed25:	6a 00                	push   0x0
c000ed27:	68 52 1a 02 c0       	push   0xc0021a52
c000ed2c:	6a 31                	push   0x31
c000ed2e:	53                   	push   ebx
c000ed2f:	e8 34 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ed34:	83 c4 20             	add    esp,0x20
c000ed37:	6a 00                	push   0x0
c000ed39:	68 5c 1a 02 c0       	push   0xc0021a5c
c000ed3e:	6a 32                	push   0x32
c000ed40:	53                   	push   ebx
c000ed41:	e8 22 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ed46:	6a 00                	push   0x0
c000ed48:	68 66 1a 02 c0       	push   0xc0021a66
c000ed4d:	6a 33                	push   0x33
c000ed4f:	53                   	push   ebx
c000ed50:	e8 13 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ed55:	83 c4 20             	add    esp,0x20
c000ed58:	6a 00                	push   0x0
c000ed5a:	68 70 1a 02 c0       	push   0xc0021a70
c000ed5f:	6a 34                	push   0x34
c000ed61:	53                   	push   ebx
c000ed62:	e8 01 fd ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ed67:	6a 00                	push   0x0
c000ed69:	68 7a 1a 02 c0       	push   0xc0021a7a
c000ed6e:	6a 35                	push   0x35
c000ed70:	53                   	push   ebx
c000ed71:	e8 f2 fc ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ed76:	83 c4 20             	add    esp,0x20
c000ed79:	6a 00                	push   0x0
c000ed7b:	68 84 1a 02 c0       	push   0xc0021a84
c000ed80:	6a 36                	push   0x36
c000ed82:	53                   	push   ebx
c000ed83:	e8 e0 fc ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ed88:	6a 00                	push   0x0
c000ed8a:	68 8e 1a 02 c0       	push   0xc0021a8e
c000ed8f:	6a 37                	push   0x37
c000ed91:	53                   	push   ebx
c000ed92:	e8 d1 fc ff ff       	call   c000ea68 <IDT::addEntry(int, void (*)(), bool)>
c000ed97:	83 c4 1c             	add    esp,0x1c
c000ed9a:	6a 03                	push   0x3
c000ed9c:	6a 02                	push   0x2
c000ed9e:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000eda4:	e8 3b 4a 00 00       	call   c00137e4 <VAS::allocatePages(int, int)>
c000eda9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000edb0:	89 c6                	mov    esi,eax
c000edb2:	e8 b1 08 00 00       	call   c000f668 <malloc>
c000edb7:	81 c6 00 20 00 00    	add    esi,0x2000
c000edbd:	89 04 24             	mov    DWORD PTR [esp],eax
c000edc0:	89 c7                	mov    edi,eax
c000edc2:	e8 ed 3a 00 00       	call   c00128b4 <TSS::TSS()>
c000edc7:	83 c4 0c             	add    esp,0xc
c000edca:	68 36 18 02 c0       	push   0xc0021836
c000edcf:	56                   	push   esi
c000edd0:	57                   	push   edi
c000edd1:	e8 22 3b 00 00       	call   c00128f8 <TSS::setup(unsigned long, unsigned long)>
c000edd6:	89 c6                	mov    esi,eax
c000edd8:	58                   	pop    eax
c000edd9:	5a                   	pop    edx
c000edda:	6a 00                	push   0x0
c000eddc:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ede0:	50                   	push   eax
c000ede1:	e8 ce fb ff ff       	call   c000e9b4 <IDTEntry::IDTEntry(bool)>
c000ede6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edea:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000edef:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000edf6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edfa:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ee00:	80 ce 05             	or     dh,0x5
c000ee03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ee07:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ee0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee0e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ee11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee14:	e8 87 fc ff ff       	call   c000eaa0 <IDT::flush()>
c000ee19:	83 c4 20             	add    esp,0x20
c000ee1c:	5b                   	pop    ebx
c000ee1d:	5e                   	pop    esi
c000ee1e:	5f                   	pop    edi
c000ee1f:	c3                   	ret    

c000ee20 <CPU::current()>:
c000ee20:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c000ee25:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ee2b:	c3                   	ret    

c000ee2c <operator new(unsigned long)>:
c000ee2c:	e9 37 08 00 00       	jmp    c000f668 <malloc>

c000ee31 <operator delete(void*)>:
c000ee31:	e9 52 08 00 00       	jmp    c000f688 <rfree>

c000ee36 <disableIRQs()>:
c000ee36:	fa                   	cli    
c000ee37:	c3                   	ret    

c000ee38 <enableIRQs()>:
c000ee38:	fb                   	sti    
c000ee39:	c3                   	ret    

c000ee3a <lockScheduler()>:
c000ee3a:	fa                   	cli    
c000ee3b:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c000ee41:	c3                   	ret    

c000ee42 <unlockScheduler()>:
c000ee42:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c000ee49:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c000ee50:	75 01                	jne    c000ee53 <unlockScheduler()+0x11>
c000ee52:	fb                   	sti    
c000ee53:	c3                   	ret    

c000ee54 <lockStuff()>:
c000ee54:	fa                   	cli    
c000ee55:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c000ee5b:	ff 05 2c d3 02 c0    	inc    DWORD PTR ds:0xc002d32c
c000ee61:	c3                   	ret    

c000ee62 <unlockStuff()>:
c000ee62:	83 ec 0c             	sub    esp,0xc
c000ee65:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c000ee6a:	48                   	dec    eax
c000ee6b:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c000ee70:	75 18                	jne    c000ee8a <unlockStuff()+0x28>
c000ee72:	83 3d 28 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d328,0x0
c000ee79:	74 0f                	je     c000ee8a <unlockStuff()+0x28>
c000ee7b:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c000ee85:	e8 aa 77 00 00       	call   c0016634 <schedule()>
c000ee8a:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c000ee91:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c000ee98:	75 01                	jne    c000ee9b <unlockStuff()+0x39>
c000ee9a:	fb                   	sti    
c000ee9b:	83 c4 0c             	add    esp,0xc
c000ee9e:	c3                   	ret    

c000ee9f <Virt::getAKernelVAS()>:
c000ee9f:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c000eea4:	c3                   	ret    

c000eea5 <__not_memcpy>:
c000eea5:	57                   	push   edi
c000eea6:	56                   	push   esi
c000eea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eeab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eeaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eeb3:	89 c7                	mov    edi,eax
c000eeb5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eeb7:	5e                   	pop    esi
c000eeb8:	5f                   	pop    edi
c000eeb9:	c3                   	ret    

c000eeba <KeFormatDate(char*, int, int, int, int, bool)>:
c000eeba:	55                   	push   ebp
c000eebb:	57                   	push   edi
c000eebc:	56                   	push   esi
c000eebd:	be e8 03 00 00       	mov    esi,0x3e8
c000eec2:	53                   	push   ebx
c000eec3:	bb 0a 00 00 00       	mov    ebx,0xa
c000eec8:	81 ec ac 00 00 00    	sub    esp,0xac
c000eece:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000eed3:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000eeda:	89 c8                	mov    eax,ecx
c000eedc:	99                   	cdq    
c000eedd:	f7 fb                	idiv   ebx
c000eedf:	89 d5                	mov    ebp,edx
c000eee1:	99                   	cdq    
c000eee2:	f7 fb                	idiv   ebx
c000eee4:	8d 42 30             	lea    eax,[edx+0x30]
c000eee7:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eeeb:	8d 45 30             	lea    eax,[ebp+0x30]
c000eeee:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000eef6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000eefa:	89 c8                	mov    eax,ecx
c000eefc:	99                   	cdq    
c000eefd:	f7 fe                	idiv   esi
c000eeff:	be 64 00 00 00       	mov    esi,0x64
c000ef04:	99                   	cdq    
c000ef05:	f7 fb                	idiv   ebx
c000ef07:	8d 42 30             	lea    eax,[edx+0x30]
c000ef0a:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000ef0e:	89 c8                	mov    eax,ecx
c000ef10:	99                   	cdq    
c000ef11:	f7 fe                	idiv   esi
c000ef13:	99                   	cdq    
c000ef14:	f7 fb                	idiv   ebx
c000ef16:	31 db                	xor    ebx,ebx
c000ef18:	8d 42 30             	lea    eax,[edx+0x30]
c000ef1b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ef1f:	0f be 8b 44 d1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd2ebc]
c000ef26:	83 f9 59             	cmp    ecx,0x59
c000ef29:	0f 84 1f 01 00 00    	je     c000f04e <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000ef2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ef33:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000ef3a:	83 f9 4d             	cmp    ecx,0x4d
c000ef3d:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000ef45:	57                   	push   edi
c000ef46:	57                   	push   edi
c000ef47:	89 d7                	mov    edi,edx
c000ef49:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ef4d:	c1 ff 1f             	sar    edi,0x1f
c000ef50:	57                   	push   edi
c000ef51:	52                   	push   edx
c000ef52:	e8 6d 04 00 00       	call   c000f3c4 <KeGetDigitsInNumber(long long)>
c000ef57:	83 c4 10             	add    esp,0x10
c000ef5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef5e:	48                   	dec    eax
c000ef5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef63:	75 1c                	jne    c000ef81 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000ef65:	83 f9 44             	cmp    ecx,0x44
c000ef68:	75 09                	jne    c000ef73 <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000ef6a:	80 3d 60 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d160,0x0
c000ef71:	eb 0c                	jmp    c000ef7f <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000ef73:	83 f9 4d             	cmp    ecx,0x4d
c000ef76:	75 60                	jne    c000efd8 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000ef78:	80 3d 61 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d161,0x0
c000ef7f:	74 57                	je     c000efd8 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000ef81:	89 d0                	mov    eax,edx
c000ef83:	b9 0a 00 00 00       	mov    ecx,0xa
c000ef88:	99                   	cdq    
c000ef89:	f7 f9                	idiv   ecx
c000ef8b:	89 d6                	mov    esi,edx
c000ef8d:	99                   	cdq    
c000ef8e:	f7 f9                	idiv   ecx
c000ef90:	83 c2 30             	add    edx,0x30
c000ef93:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000ef97:	8d 56 30             	lea    edx,[esi+0x30]
c000ef9a:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000ef9e:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000efa3:	56                   	push   esi
c000efa4:	56                   	push   esi
c000efa5:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000efa9:	57                   	push   edi
c000efaa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000efae:	56                   	push   esi
c000efaf:	e8 bc 18 ff ff       	call   c0000870 <strcat>
c000efb4:	83 c4 10             	add    esp,0x10
c000efb7:	83 fb 02             	cmp    ebx,0x2
c000efba:	74 34                	je     c000eff0 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000efbc:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000efc1:	a0 48 d1 02 c0       	mov    al,ds:0xc002d148
c000efc6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000efca:	51                   	push   ecx
c000efcb:	51                   	push   ecx
c000efcc:	57                   	push   edi
c000efcd:	56                   	push   esi
c000efce:	e8 9d 18 ff ff       	call   c0000870 <strcat>
c000efd3:	83 c4 10             	add    esp,0x10
c000efd6:	eb 18                	jmp    c000eff0 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000efd8:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000efdd:	89 d0                	mov    eax,edx
c000efdf:	b9 0a 00 00 00       	mov    ecx,0xa
c000efe4:	99                   	cdq    
c000efe5:	f7 f9                	idiv   ecx
c000efe7:	83 c2 30             	add    edx,0x30
c000efea:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000efee:	eb b3                	jmp    c000efa3 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000eff0:	43                   	inc    ebx
c000eff1:	83 fb 03             	cmp    ebx,0x3
c000eff4:	0f 85 25 ff ff ff    	jne    c000ef1f <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000effa:	52                   	push   edx
c000effb:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f002:	6a 00                	push   0x0
c000f004:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f00b:	e8 e0 14 ff ff       	call   c00004f0 <memset>
c000f010:	89 34 24             	mov    DWORD PTR [esp],esi
c000f013:	e8 68 15 ff ff       	call   c0000580 <strlen>
c000f018:	83 c4 10             	add    esp,0x10
c000f01b:	40                   	inc    eax
c000f01c:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f023:	72 14                	jb     c000f039 <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000f025:	50                   	push   eax
c000f026:	50                   	push   eax
c000f027:	56                   	push   esi
c000f028:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f02f:	e8 1c 16 ff ff       	call   c0000650 <strcpy>
c000f034:	83 c4 10             	add    esp,0x10
c000f037:	eb 58                	jmp    c000f091 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f039:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f040:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f047:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f04a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f04c:	eb 43                	jmp    c000f091 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f04e:	85 ed                	test   ebp,ebp
c000f050:	74 2a                	je     c000f07c <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000f052:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f057:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f05b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f05f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f063:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f067:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f06b:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f06f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f073:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f077:	e9 27 ff ff ff       	jmp    c000efa3 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f07c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f080:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f084:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f088:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f08c:	e9 0d ff ff ff       	jmp    c000ef9e <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000f091:	81 c4 ac 00 00 00    	add    esp,0xac
c000f097:	5b                   	pop    ebx
c000f098:	5e                   	pop    esi
c000f099:	5f                   	pop    edi
c000f09a:	5d                   	pop    ebp
c000f09b:	c3                   	ret    

c000f09c <KeFormatShortDate(char*, int, int, int, int)>:
c000f09c:	83 ec 14             	sub    esp,0x14
c000f09f:	6a 00                	push   0x0
c000f0a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0b5:	e8 00 fe ff ff       	call   c000eeba <KeFormatDate(char*, int, int, int, int, bool)>
c000f0ba:	83 c4 2c             	add    esp,0x2c
c000f0bd:	c3                   	ret    

c000f0be <KeFormatLongDate(char*, int, int, int, int)>:
c000f0be:	83 ec 14             	sub    esp,0x14
c000f0c1:	6a 01                	push   0x1
c000f0c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0d7:	e8 de fd ff ff       	call   c000eeba <KeFormatDate(char*, int, int, int, int, bool)>
c000f0dc:	83 c4 2c             	add    esp,0x2c
c000f0df:	c3                   	ret    

c000f0e0 <KeSetLocale(klocale_t)>:
c000f0e0:	57                   	push   edi
c000f0e1:	b9 09 00 00 00       	mov    ecx,0x9
c000f0e6:	56                   	push   esi
c000f0e7:	bf 40 d1 02 c0       	mov    edi,0xc002d140
c000f0ec:	fc                   	cld    
c000f0ed:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f0f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f0f3:	5e                   	pop    esi
c000f0f4:	5f                   	pop    edi
c000f0f5:	c3                   	ret    

c000f0f6 <KeInitialiseLocale()>:
c000f0f6:	57                   	push   edi
c000f0f7:	56                   	push   esi
c000f0f8:	83 ec 3c             	sub    esp,0x3c
c000f0fb:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f103:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f10b:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f113:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f11b:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f122:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f12a:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f132:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f139:	68 ec 43 02 c0       	push   0xc00243ec
c000f13e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f142:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f146:	50                   	push   eax
c000f147:	e8 04 15 ff ff       	call   c0000650 <strcpy>
c000f14c:	83 ec 20             	sub    esp,0x20
c000f14f:	b9 09 00 00 00       	mov    ecx,0x9
c000f154:	fc                   	cld    
c000f155:	89 e7                	mov    edi,esp
c000f157:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f159:	e8 82 ff ff ff       	call   c000f0e0 <KeSetLocale(klocale_t)>
c000f15e:	83 c4 64             	add    esp,0x64
c000f161:	5e                   	pop    esi
c000f162:	5f                   	pop    edi
c000f163:	c3                   	ret    

c000f164 <KeFormatCurrency(char*, int, long long, long long)>:
c000f164:	c3                   	ret    

c000f165 <KeFormatCurrency(char*, int, double)>:
c000f165:	c3                   	ret    

c000f166 <KeFormatNumber(char*, long long, long long)>:
c000f166:	c3                   	ret    

c000f167 <KeFormatNumber(char*, double)>:
c000f167:	c3                   	ret    

c000f168 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f168:	55                   	push   ebp
c000f169:	57                   	push   edi
c000f16a:	56                   	push   esi
c000f16b:	53                   	push   ebx
c000f16c:	83 ec 4c             	sub    esp,0x4c
c000f16f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f173:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f177:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f17b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f17f:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f187:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f18f:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f197:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f19f:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f1a4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f1a8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f1b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f1b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1b8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f1bc:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f1c1:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f1c5:	89 c2                	mov    edx,eax
c000f1c7:	c1 fa 1f             	sar    edx,0x1f
c000f1ca:	52                   	push   edx
c000f1cb:	50                   	push   eax
c000f1cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f1d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f1d4:	e8 5b 2c 01 00       	call   c0021e34 <__udivdi3>
c000f1d9:	83 c4 10             	add    esp,0x10
c000f1dc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1e0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f1e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1e8:	80 f4 00             	xor    ah,0x0
c000f1eb:	89 c7                	mov    edi,eax
c000f1ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f1f1:	80 f4 00             	xor    ah,0x0
c000f1f4:	89 c5                	mov    ebp,eax
c000f1f6:	89 e8                	mov    eax,ebp
c000f1f8:	09 f8                	or     eax,edi
c000f1fa:	74 04                	je     c000f200 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000f1fc:	eb be                	jmp    c000f1bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f1fe:	66 90                	xchg   ax,ax
c000f200:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f204:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f207:	90                   	nop
c000f208:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f20c:	89 c7                	mov    edi,eax
c000f20e:	89 c5                	mov    ebp,eax
c000f210:	c1 fd 1f             	sar    ebp,0x1f
c000f213:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f217:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f21b:	55                   	push   ebp
c000f21c:	57                   	push   edi
c000f21d:	52                   	push   edx
c000f21e:	50                   	push   eax
c000f21f:	e8 10 2d 01 00       	call   c0021f34 <__umoddi3>
c000f224:	83 c4 10             	add    esp,0x10
c000f227:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f22c:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f230:	01 c8                	add    eax,ecx
c000f232:	8a 10                	mov    dl,BYTE PTR [eax]
c000f234:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f238:	88 10                	mov    BYTE PTR [eax],dl
c000f23a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f23e:	89 c2                	mov    edx,eax
c000f240:	c1 fa 1f             	sar    edx,0x1f
c000f243:	52                   	push   edx
c000f244:	50                   	push   eax
c000f245:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f249:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f24d:	e8 e2 2b 01 00       	call   c0021e34 <__udivdi3>
c000f252:	83 c4 10             	add    esp,0x10
c000f255:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f259:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f25d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f261:	80 f4 00             	xor    ah,0x0
c000f264:	89 c3                	mov    ebx,eax
c000f266:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f26a:	80 f4 00             	xor    ah,0x0
c000f26d:	89 c6                	mov    esi,eax
c000f26f:	89 f0                	mov    eax,esi
c000f271:	09 d8                	or     eax,ebx
c000f273:	74 03                	je     c000f278 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000f275:	eb 91                	jmp    c000f208 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000f277:	90                   	nop
c000f278:	90                   	nop
c000f279:	83 c4 4c             	add    esp,0x4c
c000f27c:	5b                   	pop    ebx
c000f27d:	5e                   	pop    esi
c000f27e:	5f                   	pop    edi
c000f27f:	5d                   	pop    ebp
c000f280:	c3                   	ret    
c000f281:	8d 76 00             	lea    esi,[esi+0x0]

c000f284 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f284:	55                   	push   ebp
c000f285:	57                   	push   edi
c000f286:	56                   	push   esi
c000f287:	53                   	push   ebx
c000f288:	83 ec 4c             	sub    esp,0x4c
c000f28b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f28f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f293:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f297:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f29b:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f2a3:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f2ab:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f2b3:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f2bb:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f2c0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f2c4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f2c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f2cd:	79 1d                	jns    c000f2ec <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000f2cf:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000f2d3:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000f2d8:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000f2dc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f2e0:	8d 50 01             	lea    edx,[eax+0x1]
c000f2e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f2e7:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f2ea:	66 90                	xchg   ax,ax
c000f2ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f2f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f2fc:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f301:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f305:	89 c2                	mov    edx,eax
c000f307:	c1 fa 1f             	sar    edx,0x1f
c000f30a:	52                   	push   edx
c000f30b:	50                   	push   eax
c000f30c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f310:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f314:	e8 1b 2b 01 00       	call   c0021e34 <__udivdi3>
c000f319:	83 c4 10             	add    esp,0x10
c000f31c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f320:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f324:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f328:	80 f4 00             	xor    ah,0x0
c000f32b:	89 c7                	mov    edi,eax
c000f32d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f331:	80 f4 00             	xor    ah,0x0
c000f334:	89 c5                	mov    ebp,eax
c000f336:	89 e8                	mov    eax,ebp
c000f338:	09 f8                	or     eax,edi
c000f33a:	74 04                	je     c000f340 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f33c:	eb be                	jmp    c000f2fc <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000f33e:	66 90                	xchg   ax,ax
c000f340:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f344:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f347:	90                   	nop
c000f348:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f34c:	89 c7                	mov    edi,eax
c000f34e:	89 c5                	mov    ebp,eax
c000f350:	c1 fd 1f             	sar    ebp,0x1f
c000f353:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f357:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f35b:	55                   	push   ebp
c000f35c:	57                   	push   edi
c000f35d:	52                   	push   edx
c000f35e:	50                   	push   eax
c000f35f:	e8 50 29 01 00       	call   c0021cb4 <__moddi3>
c000f364:	83 c4 10             	add    esp,0x10
c000f367:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f36c:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f370:	01 c8                	add    eax,ecx
c000f372:	8a 10                	mov    dl,BYTE PTR [eax]
c000f374:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f378:	88 10                	mov    BYTE PTR [eax],dl
c000f37a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f37e:	89 c2                	mov    edx,eax
c000f380:	c1 fa 1f             	sar    edx,0x1f
c000f383:	52                   	push   edx
c000f384:	50                   	push   eax
c000f385:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f389:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f38d:	e8 d6 27 01 00       	call   c0021b68 <__divdi3>
c000f392:	83 c4 10             	add    esp,0x10
c000f395:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f399:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f39d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3a1:	80 f4 00             	xor    ah,0x0
c000f3a4:	89 c3                	mov    ebx,eax
c000f3a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3aa:	80 f4 00             	xor    ah,0x0
c000f3ad:	89 c6                	mov    esi,eax
c000f3af:	89 f0                	mov    eax,esi
c000f3b1:	09 d8                	or     eax,ebx
c000f3b3:	74 03                	je     c000f3b8 <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000f3b5:	eb 91                	jmp    c000f348 <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000f3b7:	90                   	nop
c000f3b8:	90                   	nop
c000f3b9:	83 c4 4c             	add    esp,0x4c
c000f3bc:	5b                   	pop    ebx
c000f3bd:	5e                   	pop    esi
c000f3be:	5f                   	pop    edi
c000f3bf:	5d                   	pop    ebp
c000f3c0:	c3                   	ret    
c000f3c1:	8d 76 00             	lea    esi,[esi+0x0]

c000f3c4 <KeGetDigitsInNumber(long long)>:
c000f3c4:	56                   	push   esi
c000f3c5:	53                   	push   ebx
c000f3c6:	83 ec 24             	sub    esp,0x24
c000f3c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f3cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f3d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f3d9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f3e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f3e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3e8:	80 f4 00             	xor    ah,0x0
c000f3eb:	89 c3                	mov    ebx,eax
c000f3ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3f1:	80 f4 00             	xor    ah,0x0
c000f3f4:	89 c6                	mov    esi,eax
c000f3f6:	89 f0                	mov    eax,esi
c000f3f8:	09 d8                	or     eax,ebx
c000f3fa:	74 28                	je     c000f424 <KeGetDigitsInNumber(long long)+0x60>
c000f3fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f400:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f404:	6a 00                	push   0x0
c000f406:	6a 0a                	push   0xa
c000f408:	52                   	push   edx
c000f409:	50                   	push   eax
c000f40a:	e8 59 27 01 00       	call   c0021b68 <__divdi3>
c000f40f:	83 c4 10             	add    esp,0x10
c000f412:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f416:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f41a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f41f:	eb c3                	jmp    c000f3e4 <KeGetDigitsInNumber(long long)+0x20>
c000f421:	8d 76 00             	lea    esi,[esi+0x0]
c000f424:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f428:	83 c4 24             	add    esp,0x24
c000f42b:	5b                   	pop    ebx
c000f42c:	5e                   	pop    esi
c000f42d:	c3                   	ret    
c000f42e:	66 90                	xchg   ax,ax

c000f430 <KeItoa(unsigned long long, char*)>:
c000f430:	83 ec 1c             	sub    esp,0x1c
c000f433:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f437:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f43b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f43f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f443:	6a 0a                	push   0xa
c000f445:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f451:	e8 12 fd ff ff       	call   c000f168 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f456:	83 c4 10             	add    esp,0x10
c000f459:	90                   	nop
c000f45a:	83 c4 1c             	add    esp,0x1c
c000f45d:	c3                   	ret    
c000f45e:	66 90                	xchg   ax,ax

c000f460 <KeItoa(long long, char*)>:
c000f460:	83 ec 1c             	sub    esp,0x1c
c000f463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f467:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f46b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f46f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f473:	6a 0a                	push   0xa
c000f475:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f481:	e8 fe fd ff ff       	call   c000f284 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f486:	83 c4 10             	add    esp,0x10
c000f489:	90                   	nop
c000f48a:	83 c4 1c             	add    esp,0x1c
c000f48d:	c3                   	ret    
c000f48e:	66 90                	xchg   ax,ax

c000f490 <KeXtoa(unsigned long long, char*)>:
c000f490:	83 ec 1c             	sub    esp,0x1c
c000f493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f497:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f49b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f49f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4a3:	6a 10                	push   0x10
c000f4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f4ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f4b1:	e8 b2 fc ff ff       	call   c000f168 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f4b6:	83 c4 10             	add    esp,0x10
c000f4b9:	90                   	nop
c000f4ba:	83 c4 1c             	add    esp,0x1c
c000f4bd:	c3                   	ret    

c000f4be <sbrk>:
c000f4be:	55                   	push   ebp
c000f4bf:	57                   	push   edi
c000f4c0:	56                   	push   esi
c000f4c1:	53                   	push   ebx
c000f4c2:	83 ec 1c             	sub    esp,0x1c
c000f4c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f4c9:	85 c0                	test   eax,eax
c000f4cb:	74 66                	je     c000f533 <sbrk+0x75>
c000f4cd:	78 6b                	js     c000f53a <sbrk+0x7c>
c000f4cf:	8b 15 90 6b 02 c0    	mov    edx,DWORD PTR ds:0xc0026b90
c000f4d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4d9:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000f4df:	05 ff 0f 00 00       	add    eax,0xfff
c000f4e4:	0f 49 e8             	cmovns ebp,eax
c000f4e7:	c1 fd 0c             	sar    ebp,0xc
c000f4ea:	bb 00 00 00 00       	mov    ebx,0x0
c000f4ef:	8b 35 90 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d290
c000f4f5:	8b 3d 90 6b 02 c0    	mov    edi,DWORD PTR ds:0xc0026b90
c000f4fb:	e8 b6 07 00 00       	call   c000fcb6 <Phys::allocatePage()>
c000f500:	68 01 04 00 00       	push   0x401
c000f505:	57                   	push   edi
c000f506:	50                   	push   eax
c000f507:	56                   	push   esi
c000f508:	e8 cf 41 00 00       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c000f50d:	81 05 90 6b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026b90,0x1000
c000f517:	83 c3 01             	add    ebx,0x1
c000f51a:	83 c4 10             	add    esp,0x10
c000f51d:	39 dd                	cmp    ebp,ebx
c000f51f:	75 ce                	jne    c000f4ef <sbrk+0x31>
c000f521:	0f 20 d8             	mov    eax,cr3
c000f524:	0f 22 d8             	mov    cr3,eax
c000f527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f52b:	83 c4 1c             	add    esp,0x1c
c000f52e:	5b                   	pop    ebx
c000f52f:	5e                   	pop    esi
c000f530:	5f                   	pop    edi
c000f531:	5d                   	pop    ebp
c000f532:	c3                   	ret    
c000f533:	a1 90 6b 02 c0       	mov    eax,ds:0xc0026b90
c000f538:	eb f1                	jmp    c000f52b <sbrk+0x6d>
c000f53a:	83 ec 08             	sub    esp,0x8
c000f53d:	50                   	push   eax
c000f53e:	68 f0 43 02 c0       	push   0xc00243f0
c000f543:	e8 1e 7a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000f548:	83 c4 10             	add    esp,0x10
c000f54b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f550:	eb d9                	jmp    c000f52b <sbrk+0x6d>

c000f552 <sbrk_thunk>:
c000f552:	83 ec 0c             	sub    esp,0xc
c000f555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f559:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f55e:	7f 10                	jg     c000f570 <sbrk_thunk+0x1e>
c000f560:	83 ec 0c             	sub    esp,0xc
c000f563:	50                   	push   eax
c000f564:	e8 55 ff ff ff       	call   c000f4be <sbrk>
c000f569:	83 c4 10             	add    esp,0x10
c000f56c:	83 c4 0c             	add    esp,0xc
c000f56f:	c3                   	ret    
c000f570:	83 ec 08             	sub    esp,0x8
c000f573:	50                   	push   eax
c000f574:	68 20 44 02 c0       	push   0xc0024420
c000f579:	e8 e8 79 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f586:	eb e4                	jmp    c000f56c <sbrk_thunk+0x1a>

c000f588 <mmap>:
c000f588:	55                   	push   ebp
c000f589:	57                   	push   edi
c000f58a:	56                   	push   esi
c000f58b:	53                   	push   ebx
c000f58c:	83 ec 18             	sub    esp,0x18
c000f58f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f593:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f599:	89 fb                	mov    ebx,edi
c000f59b:	c1 eb 0c             	shr    ebx,0xc
c000f59e:	53                   	push   ebx
c000f59f:	e8 5f 3a 00 00       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c000f5a4:	89 c5                	mov    ebp,eax
c000f5a6:	83 c4 10             	add    esp,0x10
c000f5a9:	85 db                	test   ebx,ebx
c000f5ab:	7e 2f                	jle    c000f5dc <mmap+0x54>
c000f5ad:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f5b3:	01 c7                	add    edi,eax
c000f5b5:	89 c3                	mov    ebx,eax
c000f5b7:	8b 35 90 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d290
c000f5bd:	e8 f4 06 00 00       	call   c000fcb6 <Phys::allocatePage()>
c000f5c2:	68 01 04 00 00       	push   0x401
c000f5c7:	53                   	push   ebx
c000f5c8:	50                   	push   eax
c000f5c9:	56                   	push   esi
c000f5ca:	e8 0d 41 00 00       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c000f5cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f5d5:	83 c4 10             	add    esp,0x10
c000f5d8:	39 fb                	cmp    ebx,edi
c000f5da:	75 db                	jne    c000f5b7 <mmap+0x2f>
c000f5dc:	89 e8                	mov    eax,ebp
c000f5de:	83 c4 0c             	add    esp,0xc
c000f5e1:	5b                   	pop    ebx
c000f5e2:	5e                   	pop    esi
c000f5e3:	5f                   	pop    edi
c000f5e4:	5d                   	pop    ebp
c000f5e5:	c3                   	ret    

c000f5e6 <munmap>:
c000f5e6:	83 ec 18             	sub    esp,0x18
c000f5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5ed:	e8 0f 3d 00 00       	call   c0013301 <Virt::freeKernelVirtualPages(unsigned long)>
c000f5f2:	b8 00 00 00 00       	mov    eax,0x0
c000f5f7:	83 c4 1c             	add    esp,0x1c
c000f5fa:	c3                   	ret    

c000f5fb <liballoc_lock()>:
c000f5fb:	fa                   	cli    
c000f5fc:	83 05 30 d3 02 c0 01 	add    DWORD PTR ds:0xc002d330,0x1
c000f603:	b8 00 00 00 00       	mov    eax,0x0
c000f608:	c3                   	ret    

c000f609 <liballoc_unlock()>:
c000f609:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000f611:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c000f618:	75 01                	jne    c000f61b <liballoc_unlock()+0x12>
c000f61a:	fb                   	sti    
c000f61b:	b8 00 00 00 00       	mov    eax,0x0
c000f620:	c3                   	ret    

c000f621 <liballoc_alloc(int)>:
c000f621:	83 ec 10             	sub    esp,0x10
c000f624:	6a 01                	push   0x1
c000f626:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f62a:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000f630:	e8 af 41 00 00       	call   c00137e4 <VAS::allocatePages(int, int)>
c000f635:	83 c4 1c             	add    esp,0x1c
c000f638:	c3                   	ret    

c000f639 <liballoc_free(void*, int)>:
c000f639:	83 ec 14             	sub    esp,0x14
c000f63c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f640:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000f646:	e8 f3 3d 00 00       	call   c001343e <VAS::freeAllocatedPages(unsigned long)>
c000f64b:	b8 00 00 00 00       	mov    eax,0x0
c000f650:	83 c4 1c             	add    esp,0x1c
c000f653:	c3                   	ret    

c000f654 <realloc>:
c000f654:	83 ec 14             	sub    esp,0x14
c000f657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f65f:	e8 21 21 ff ff       	call   c0001785 <dlrealloc>
c000f664:	83 c4 1c             	add    esp,0x1c
c000f667:	c3                   	ret    

c000f668 <malloc>:
c000f668:	83 ec 18             	sub    esp,0x18
c000f66b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f66f:	e8 d4 1b ff ff       	call   c0001248 <dlmalloc>
c000f674:	83 c4 1c             	add    esp,0x1c
c000f677:	c3                   	ret    

c000f678 <free>:
c000f678:	83 ec 18             	sub    esp,0x18
c000f67b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f67f:	e8 02 17 ff ff       	call   c0000d86 <dlfree>
c000f684:	83 c4 1c             	add    esp,0x1c
c000f687:	c3                   	ret    

c000f688 <rfree>:
c000f688:	83 ec 18             	sub    esp,0x18
c000f68b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f68f:	e8 f2 16 ff ff       	call   c0000d86 <dlfree>
c000f694:	83 c4 1c             	add    esp,0x1c
c000f697:	c3                   	ret    

c000f698 <calloc>:
c000f698:	56                   	push   esi
c000f699:	53                   	push   ebx
c000f69a:	83 ec 10             	sub    esp,0x10
c000f69d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f6a1:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f6a6:	53                   	push   ebx
c000f6a7:	e8 bc ff ff ff       	call   c000f668 <malloc>
c000f6ac:	89 c6                	mov    esi,eax
c000f6ae:	83 c4 0c             	add    esp,0xc
c000f6b1:	53                   	push   ebx
c000f6b2:	6a 00                	push   0x0
c000f6b4:	50                   	push   eax
c000f6b5:	e8 36 0e ff ff       	call   c00004f0 <memset>
c000f6ba:	89 f0                	mov    eax,esi
c000f6bc:	83 c4 14             	add    esp,0x14
c000f6bf:	5b                   	pop    ebx
c000f6c0:	5e                   	pop    esi
c000f6c1:	c3                   	ret    
c000f6c2:	66 90                	xchg   ax,ax

c000f6c4 <KeMailboxTryPost(Mailbox*, void*)>:
c000f6c4:	83 ec 10             	sub    esp,0x10
c000f6c7:	fa                   	cli    
c000f6c8:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f6cd:	83 c0 01             	add    eax,0x1
c000f6d0:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c000f6d5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f6da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f6e1:	85 c0                	test   eax,eax
c000f6e3:	75 23                	jne    c000f708 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000f6e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6ed:	89 10                	mov    DWORD PTR [eax],edx
c000f6ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f6f6:	8d 50 01             	lea    edx,[eax+0x1]
c000f6f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f700:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f705:	8d 76 00             	lea    esi,[esi+0x0]
c000f708:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000f710:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f715:	85 c0                	test   eax,eax
c000f717:	75 03                	jne    c000f71c <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000f719:	fb                   	sti    
c000f71a:	66 90                	xchg   ax,ax
c000f71c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f720:	83 c4 10             	add    esp,0x10
c000f723:	c3                   	ret    

c000f724 <KeMailboxTryGet(Mailbox*, void**)>:
c000f724:	83 ec 10             	sub    esp,0x10
c000f727:	fa                   	cli    
c000f728:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f72d:	83 c0 01             	add    eax,0x1
c000f730:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c000f735:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f73a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f73e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f741:	83 f8 01             	cmp    eax,0x1
c000f744:	75 22                	jne    c000f768 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000f746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f74a:	8b 10                	mov    edx,DWORD PTR [eax]
c000f74c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f750:	89 10                	mov    DWORD PTR [eax],edx
c000f752:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f759:	8d 50 ff             	lea    edx,[eax-0x1]
c000f75c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f760:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f763:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f768:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000f770:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f775:	85 c0                	test   eax,eax
c000f777:	75 03                	jne    c000f77c <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000f779:	fb                   	sti    
c000f77a:	66 90                	xchg   ax,ax
c000f77c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f780:	83 c4 10             	add    esp,0x10
c000f783:	c3                   	ret    

c000f784 <KeMailboxCreate()>:
c000f784:	83 ec 1c             	sub    esp,0x1c
c000f787:	83 ec 0c             	sub    esp,0xc
c000f78a:	6a 08                	push   0x8
c000f78c:	e8 d7 fe ff ff       	call   c000f668 <malloc>
c000f791:	83 c4 10             	add    esp,0x10
c000f794:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f798:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f79c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f7a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f7ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7b1:	83 c4 1c             	add    esp,0x1c
c000f7b4:	c3                   	ret    
c000f7b5:	8d 76 00             	lea    esi,[esi+0x0]

c000f7b8 <KeMailboxPost(Mailbox*, void*)>:
c000f7b8:	83 ec 1c             	sub    esp,0x1c
c000f7bb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f7c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f7c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f7c8:	e8 f7 fe ff ff       	call   c000f6c4 <KeMailboxTryPost(Mailbox*, void*)>
c000f7cd:	83 c4 08             	add    esp,0x8
c000f7d0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f7d4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f7d8:	83 f0 01             	xor    eax,0x1
c000f7db:	0f b6 c0             	movzx  eax,al
c000f7de:	85 c0                	test   eax,eax
c000f7e0:	74 26                	je     c000f808 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f7e2:	fa                   	cli    
c000f7e3:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f7e8:	83 c0 01             	add    eax,0x1
c000f7eb:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c000f7f0:	e8 3f 6e 00 00       	call   c0016634 <schedule()>
c000f7f5:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000f7fd:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f802:	85 c0                	test   eax,eax
c000f804:	75 02                	jne    c000f808 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f806:	fb                   	sti    
c000f807:	90                   	nop
c000f808:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f80d:	85 c0                	test   eax,eax
c000f80f:	75 03                	jne    c000f814 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000f811:	eb ad                	jmp    c000f7c0 <KeMailboxPost(Mailbox*, void*)+0x8>
c000f813:	90                   	nop
c000f814:	90                   	nop
c000f815:	83 c4 1c             	add    esp,0x1c
c000f818:	c3                   	ret    
c000f819:	8d 76 00             	lea    esi,[esi+0x0]

c000f81c <KeMailboxGet(Mailbox*, void**)>:
c000f81c:	83 ec 1c             	sub    esp,0x1c
c000f81f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f824:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f82c:	e8 f3 fe ff ff       	call   c000f724 <KeMailboxTryGet(Mailbox*, void**)>
c000f831:	83 c4 08             	add    esp,0x8
c000f834:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f838:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f83c:	83 f0 01             	xor    eax,0x1
c000f83f:	0f b6 c0             	movzx  eax,al
c000f842:	85 c0                	test   eax,eax
c000f844:	74 26                	je     c000f86c <KeMailboxGet(Mailbox*, void**)+0x50>
c000f846:	fa                   	cli    
c000f847:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f84c:	83 c0 01             	add    eax,0x1
c000f84f:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c000f854:	e8 db 6d 00 00       	call   c0016634 <schedule()>
c000f859:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000f861:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000f866:	85 c0                	test   eax,eax
c000f868:	75 02                	jne    c000f86c <KeMailboxGet(Mailbox*, void**)+0x50>
c000f86a:	fb                   	sti    
c000f86b:	90                   	nop
c000f86c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f871:	85 c0                	test   eax,eax
c000f873:	75 03                	jne    c000f878 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000f875:	eb ad                	jmp    c000f824 <KeMailboxGet(Mailbox*, void**)+0x8>
c000f877:	90                   	nop
c000f878:	90                   	nop
c000f879:	83 c4 1c             	add    esp,0x1c
c000f87c:	c3                   	ret    
c000f87d:	8d 76 00             	lea    esi,[esi+0x0]

c000f880 <KeMailboxDestroy(Mailbox*)>:
c000f880:	83 ec 0c             	sub    esp,0xc
c000f883:	83 ec 0c             	sub    esp,0xc
c000f886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f88a:	e8 e9 fd ff ff       	call   c000f678 <free>
c000f88f:	83 c4 10             	add    esp,0x10
c000f892:	90                   	nop
c000f893:	83 c4 0c             	add    esp,0xc
c000f896:	c3                   	ret    

c000f897 <KeFirstTask()>:
c000f897:	53                   	push   ebx
c000f898:	83 ec 08             	sub    esp,0x8
c000f89b:	fb                   	sti    
c000f89c:	e8 de a6 00 00       	call   c0019f7f <HalEnableNMI()>
c000f8a1:	83 ec 0c             	sub    esp,0xc
c000f8a4:	68 2f 44 02 c0       	push   0xc002442f
c000f8a9:	e8 17 d9 ff ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000f8ae:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000f8b5:	e8 ae fd ff ff       	call   c000f668 <malloc>
c000f8ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000f8c1:	89 c3                	mov    ebx,eax
c000f8c3:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c000f8c8:	50                   	push   eax
c000f8c9:	68 48 44 02 c0       	push   0xc0024448
c000f8ce:	6a 01                	push   0x1
c000f8d0:	53                   	push   ebx
c000f8d1:	e8 6a 68 00 00       	call   c0016140 <Process::Process(bool, char const*, Process*, char**)>
c000f8d6:	83 c4 20             	add    esp,0x20
c000f8d9:	68 ff 00 00 00       	push   0xff
c000f8de:	6a 00                	push   0x0
c000f8e0:	68 93 e9 00 c0       	push   0xc000e993
c000f8e5:	53                   	push   ebx
c000f8e6:	e8 95 6a 00 00       	call   c0016380 <Process::createThread(void (*)(void*), void*, int)>
c000f8eb:	8b 15 58 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d358
c000f8f1:	6a 7a                	push   0x7a
c000f8f3:	6a 00                	push   0x0
c000f8f5:	68 10 6d 01 c0       	push   0xc0016d10
c000f8fa:	52                   	push   edx
c000f8fb:	e8 80 6a 00 00       	call   c0016380 <Process::createThread(void (*)(void*), void*, int)>
c000f900:	83 c4 14             	add    esp,0x14
c000f903:	68 d0 44 02 c0       	push   0xc00244d0
c000f908:	a3 10 d3 02 c0       	mov    ds:0xc002d310,eax
c000f90d:	e8 b3 d8 ff ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000f912:	c6 05 0d d1 02 c0 01 	mov    BYTE PTR ds:0xc002d10d,0x1
c000f919:	e8 df 0b 00 00       	call   c00104fd <KeInitRand()>
c000f91e:	e8 73 78 00 00       	call   c0017196 <Vm::initialise8086()>
c000f923:	e8 0a 85 ff ff       	call   c0007e32 <Fs::initVFS()>
c000f928:	c7 04 24 91 40 02 c0 	mov    DWORD PTR [esp],0xc0024091
c000f92f:	e8 91 d8 ff ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000f934:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c000f939:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c000f93f:	8b 10                	mov    edx,DWORD PTR [eax]
c000f941:	6a 00                	push   0x0
c000f943:	6a 00                	push   0x0
c000f945:	6a 00                	push   0x0
c000f947:	50                   	push   eax
c000f948:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f94b:	83 c4 14             	add    esp,0x14
c000f94e:	68 d0 44 02 c0       	push   0xc00244d0
c000f953:	e8 6d d8 ff ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000f958:	e8 ba 7c ff ff       	call   c0007617 <KeInitialiseSymlinks()>
c000f95d:	e8 a2 eb ff ff       	call   c000e504 <KeLoadSystemEnv()>
c000f962:	e8 dd 09 00 00       	call   c0010344 <KeSetupPowerManager()>
c000f967:	c7 04 24 55 44 02 c0 	mov    DWORD PTR [esp],0xc0024455
c000f96e:	e8 52 d8 ff ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000f973:	8b 0d 08 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d108
c000f979:	83 c4 0c             	add    esp,0xc
c000f97c:	6a 00                	push   0x0
c000f97e:	51                   	push   ecx
c000f97f:	68 66 44 02 c0       	push   0xc0024466
c000f984:	e8 2a 63 00 00       	call   c0015cb3 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000f989:	83 c4 10             	add    esp,0x10
c000f98c:	83 ec 0c             	sub    esp,0xc
c000f98f:	6a 02                	push   0x2
c000f991:	e8 5e 6d 00 00       	call   c00166f4 <blockTask(TaskState)>
c000f996:	83 c4 10             	add    esp,0x10
c000f999:	eb f1                	jmp    c000f98c <KeFirstTask()+0xf5>

c000f99b <KeEntryPoint>:
c000f99b:	57                   	push   edi
c000f99c:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9a1:	56                   	push   esi
c000f9a2:	31 f6                	xor    esi,esi
c000f9a4:	53                   	push   ebx
c000f9a5:	83 ec 20             	sub    esp,0x20
c000f9a8:	e8 db d7 ff ff       	call   c000d188 <KeInitialiseBootConfigurationFlags()>
c000f9ad:	89 f0                	mov    eax,esi
c000f9af:	89 fa                	mov    edx,edi
c000f9b1:	ee                   	out    dx,al
c000f9b2:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f9b7:	b0 80                	mov    al,0x80
c000f9b9:	89 da                	mov    edx,ebx
c000f9bb:	ee                   	out    dx,al
c000f9bc:	b1 03                	mov    cl,0x3
c000f9be:	ba f8 03 00 00       	mov    edx,0x3f8
c000f9c3:	88 c8                	mov    al,cl
c000f9c5:	ee                   	out    dx,al
c000f9c6:	89 f0                	mov    eax,esi
c000f9c8:	89 fa                	mov    edx,edi
c000f9ca:	ee                   	out    dx,al
c000f9cb:	88 c8                	mov    al,cl
c000f9cd:	89 da                	mov    edx,ebx
c000f9cf:	ee                   	out    dx,al
c000f9d0:	b0 c7                	mov    al,0xc7
c000f9d2:	ba fa 03 00 00       	mov    edx,0x3fa
c000f9d7:	ee                   	out    dx,al
c000f9d8:	b0 0b                	mov    al,0xb
c000f9da:	ba fc 03 00 00       	mov    edx,0x3fc
c000f9df:	ee                   	out    dx,al
c000f9e0:	83 ec 0c             	sub    esp,0xc
c000f9e3:	68 82 44 02 c0       	push   0xc0024482
c000f9e8:	e8 79 75 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000f9ed:	e8 a4 d7 ff ff       	call   c000d196 <KeDisplaySplashScreen()>
c000f9f2:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f9f7:	05 ff 0f 00 00       	add    eax,0xfff
c000f9fc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa01:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa04:	e8 47 04 00 00       	call   c000fe50 <Phys::physicalMemorySetup(unsigned int)>
c000fa09:	e8 c9 37 00 00       	call   c00131d7 <Virt::virtualMemorySetup()>
c000fa0e:	e8 d3 d6 ff ff       	call   c000d0e6 <KeInitialiseAtexit()>
c000fa13:	58                   	pop    eax
c000fa14:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fa18:	53                   	push   ebx
c000fa19:	e8 a0 3a 00 00       	call   c00134be <VAS::VAS()>
c000fa1e:	89 1d 90 d2 02 c0    	mov    DWORD PTR ds:0xc002d290,ebx
c000fa24:	e8 25 26 01 00       	call   c002204e <_init>
c000fa29:	c7 04 24 99 44 02 c0 	mov    DWORD PTR [esp],0xc0024499
c000fa30:	e8 90 d7 ff ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000fa35:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c000fa3c:	e8 27 fc ff ff       	call   c000f668 <malloc>
c000fa41:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa44:	89 c6                	mov    esi,eax
c000fa46:	e8 fb e4 ff ff       	call   c000df46 <Computer::Computer()>
c000fa4b:	8b 15 90 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d290
c000fa51:	89 35 08 d1 02 c0    	mov    DWORD PTR ds:0xc002d108,esi
c000fa57:	52                   	push   edx
c000fa58:	6a 00                	push   0x0
c000fa5a:	6a 00                	push   0x0
c000fa5c:	56                   	push   esi
c000fa5d:	e8 28 e5 ff ff       	call   c000df8a <Computer::open(int, int, void*)>
c000fa62:	83 c4 14             	add    esp,0x14
c000fa65:	68 f4 44 02 c0       	push   0xc00244f4
c000fa6a:	e8 56 d7 ff ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000fa6f:	e8 80 ac 00 00       	call   c001a6f4 <HalInitialiseCoprocessor()>
c000fa74:	c7 04 24 b3 44 02 c0 	mov    DWORD PTR [esp],0xc00244b3
c000fa7b:	e8 45 d7 ff ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c000fa80:	c7 04 24 97 f8 00 c0 	mov    DWORD PTR [esp],0xc000f897
c000fa87:	e8 60 6a 00 00       	call   c00164ec <setupMultitasking(void (*)())>
c000fa8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa8f:	e8 e0 3a 00 00       	call   c0013574 <VAS::~VAS()>
c000fa94:	83 c4 30             	add    esp,0x30
c000fa97:	5b                   	pop    ebx
c000fa98:	5e                   	pop    esi
c000fa99:	5f                   	pop    edi
c000fa9a:	c3                   	ret    
c000fa9b:	90                   	nop

c000fa9c <Mutex::Mutex()>:
c000fa9c:	83 ec 0c             	sub    esp,0xc
c000fa9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faa3:	83 ec 08             	sub    esp,0x8
c000faa6:	6a 01                	push   0x1
c000faa8:	50                   	push   eax
c000faa9:	e8 ee 0c 00 00       	call   c001079c <Semaphore::Semaphore(int)>
c000faae:	83 c4 10             	add    esp,0x10
c000fab1:	90                   	nop
c000fab2:	83 c4 0c             	add    esp,0xc
c000fab5:	c3                   	ret    

c000fab6 <KeIsKernelInPanic()>:
c000fab6:	a0 64 d1 02 c0       	mov    al,ds:0xc002d164
c000fabb:	c3                   	ret    

c000fabc <KePanic(char const*)>:
c000fabc:	c6 05 64 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d164,0x1
c000fac3:	e9 b0 ac 00 00       	jmp    c001a778 <HalPanic(char const*)>

c000fac8 <Phys::allocateDMA(unsigned long)>:
c000fac8:	55                   	push   ebp
c000fac9:	31 ed                	xor    ebp,ebp
c000facb:	57                   	push   edi
c000facc:	56                   	push   esi
c000facd:	31 f6                	xor    esi,esi
c000facf:	53                   	push   ebx
c000fad0:	31 db                	xor    ebx,ebx
c000fad2:	83 ec 1c             	sub    esp,0x1c
c000fad5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fad9:	05 ff 0f 00 00       	add    eax,0xfff
c000fade:	c1 e8 0c             	shr    eax,0xc
c000fae1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fae5:	31 c0                	xor    eax,eax
c000fae7:	eb 1b                	jmp    c000fb04 <Phys::allocateDMA(unsigned long)+0x3c>
c000fae9:	8d 78 01             	lea    edi,[eax+0x1]
c000faec:	85 c0                	test   eax,eax
c000faee:	0f 44 eb             	cmove  ebp,ebx
c000faf1:	0f 44 f3             	cmove  esi,ebx
c000faf4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000faf8:	74 37                	je     c000fb31 <Phys::allocateDMA(unsigned long)+0x69>
c000fafa:	89 f8                	mov    eax,edi
c000fafc:	83 c3 01             	add    ebx,0x1
c000faff:	83 fb 0f             	cmp    ebx,0xf
c000fb02:	7f 13                	jg     c000fb17 <Phys::allocateDMA(unsigned long)+0x4f>
c000fb04:	80 bb 80 d1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd2e80],0x0
c000fb0b:	74 dc                	je     c000fae9 <Phys::allocateDMA(unsigned long)+0x21>
c000fb0d:	31 c0                	xor    eax,eax
c000fb0f:	83 c3 01             	add    ebx,0x1
c000fb12:	83 fb 0f             	cmp    ebx,0xf
c000fb15:	7e ed                	jle    c000fb04 <Phys::allocateDMA(unsigned long)+0x3c>
c000fb17:	83 ec 0c             	sub    esp,0xc
c000fb1a:	68 18 45 02 c0       	push   0xc0024518
c000fb1f:	e8 98 ff ff ff       	call   c000fabc <KePanic(char const*)>
c000fb24:	83 c4 10             	add    esp,0x10
c000fb27:	31 c0                	xor    eax,eax
c000fb29:	83 c4 1c             	add    esp,0x1c
c000fb2c:	5b                   	pop    ebx
c000fb2d:	5e                   	pop    esi
c000fb2e:	5f                   	pop    edi
c000fb2f:	5d                   	pop    ebp
c000fb30:	c3                   	ret    
c000fb31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fb35:	89 f2                	mov    edx,esi
c000fb37:	c1 fa 04             	sar    edx,0x4
c000fb3a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fb3e:	01 f1                	add    ecx,esi
c000fb40:	8d 51 0e             	lea    edx,[ecx+0xe]
c000fb43:	83 e9 01             	sub    ecx,0x1
c000fb46:	0f 48 ca             	cmovs  ecx,edx
c000fb49:	c1 f9 04             	sar    ecx,0x4
c000fb4c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000fb50:	74 06                	je     c000fb58 <Phys::allocateDMA(unsigned long)+0x90>
c000fb52:	89 eb                	mov    ebx,ebp
c000fb54:	31 c0                	xor    eax,eax
c000fb56:	eb b7                	jmp    c000fb0f <Phys::allocateDMA(unsigned long)+0x47>
c000fb58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb5c:	85 d2                	test   edx,edx
c000fb5e:	74 17                	je     c000fb77 <Phys::allocateDMA(unsigned long)+0xaf>
c000fb60:	8d 96 80 d1 02 c0    	lea    edx,[esi-0x3ffd2e80]
c000fb66:	8d 84 06 81 d1 02 c0 	lea    eax,[esi+eax*1-0x3ffd2e7f]
c000fb6d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb70:	83 c2 01             	add    edx,0x1
c000fb73:	39 d0                	cmp    eax,edx
c000fb75:	75 f6                	jne    c000fb6d <Phys::allocateDMA(unsigned long)+0xa5>
c000fb77:	8b 15 78 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d178
c000fb7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb81:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb85:	01 c2                	add    edx,eax
c000fb87:	89 15 78 d1 02 c0    	mov    DWORD PTR ds:0xc002d178,edx
c000fb8d:	85 c9                	test   ecx,ecx
c000fb8f:	74 17                	je     c000fba8 <Phys::allocateDMA(unsigned long)+0xe0>
c000fb91:	83 ec 0c             	sub    esp,0xc
c000fb94:	68 18 45 02 c0       	push   0xc0024518
c000fb99:	e8 1e ff ff ff       	call   c000fabc <KePanic(char const*)>
c000fb9e:	83 c4 10             	add    esp,0x10
c000fba1:	89 f8                	mov    eax,edi
c000fba3:	e9 54 ff ff ff       	jmp    c000fafc <Phys::allocateDMA(unsigned long)+0x34>
c000fba8:	c1 e6 0c             	shl    esi,0xc
c000fbab:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000fbb1:	e9 73 ff ff ff       	jmp    c000fb29 <Phys::allocateDMA(unsigned long)+0x61>

c000fbb6 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fbb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbba:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000fbc0:	a1 78 d1 02 c0       	mov    eax,ds:0xc002d178
c000fbc5:	c1 ea 0c             	shr    edx,0xc
c000fbc8:	29 d0                	sub    eax,edx
c000fbca:	a3 78 d1 02 c0       	mov    ds:0xc002d178,eax
c000fbcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fbd3:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000fbd8:	c1 e8 0c             	shr    eax,0xc
c000fbdb:	85 d2                	test   edx,edx
c000fbdd:	74 11                	je     c000fbf0 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000fbdf:	05 80 d1 02 c0       	add    eax,0xc002d180
c000fbe4:	01 c2                	add    edx,eax
c000fbe6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbe9:	83 c0 01             	add    eax,0x1
c000fbec:	39 d0                	cmp    eax,edx
c000fbee:	75 f6                	jne    c000fbe6 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000fbf0:	c3                   	ret    

c000fbf1 <Phys::setPageState(unsigned long, bool)>:
c000fbf1:	57                   	push   edi
c000fbf2:	56                   	push   esi
c000fbf3:	8b 35 94 6b 02 c0    	mov    esi,DWORD PTR ds:0xc0026b94
c000fbf9:	53                   	push   ebx
c000fbfa:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000fbff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc07:	89 ca                	mov    edx,ecx
c000fc09:	83 e1 07             	and    ecx,0x7
c000fc0c:	c1 ea 03             	shr    edx,0x3
c000fc0f:	0f b6 c0             	movzx  eax,al
c000fc12:	d3 c3                	rol    ebx,cl
c000fc14:	01 d6                	add    esi,edx
c000fc16:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000fc19:	d3 e0                	shl    eax,cl
c000fc1b:	21 fb                	and    ebx,edi
c000fc1d:	88 1e                	mov    BYTE PTR [esi],bl
c000fc1f:	8b 1d 94 6b 02 c0    	mov    ebx,DWORD PTR ds:0xc0026b94
c000fc25:	01 da                	add    edx,ebx
c000fc27:	8a 0a                	mov    cl,BYTE PTR [edx]
c000fc29:	09 c8                	or     eax,ecx
c000fc2b:	88 02                	mov    BYTE PTR [edx],al
c000fc2d:	5b                   	pop    ebx
c000fc2e:	5e                   	pop    esi
c000fc2f:	5f                   	pop    edi
c000fc30:	c3                   	ret    

c000fc31 <Phys::getPageState(unsigned long)>:
c000fc31:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc35:	8b 15 94 6b 02 c0    	mov    edx,DWORD PTR ds:0xc0026b94
c000fc3b:	89 c8                	mov    eax,ecx
c000fc3d:	83 e1 07             	and    ecx,0x7
c000fc40:	c1 e8 03             	shr    eax,0x3
c000fc43:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc47:	d3 f8                	sar    eax,cl
c000fc49:	83 e0 01             	and    eax,0x1
c000fc4c:	c3                   	ret    

c000fc4d <Phys::freePage(unsigned long)>:
c000fc4d:	53                   	push   ebx
c000fc4e:	83 ec 08             	sub    esp,0x8
c000fc51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc55:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000fc5b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000fc61:	76 41                	jbe    c000fca4 <Phys::freePage(unsigned long)+0x57>
c000fc63:	c1 e8 0c             	shr    eax,0xc
c000fc66:	50                   	push   eax
c000fc67:	89 c3                	mov    ebx,eax
c000fc69:	e8 c3 ff ff ff       	call   c000fc31 <Phys::getPageState(unsigned long)>
c000fc6e:	5a                   	pop    edx
c000fc6f:	84 c0                	test   al,al
c000fc71:	74 20                	je     c000fc93 <Phys::freePage(unsigned long)+0x46>
c000fc73:	a1 78 d1 02 c0       	mov    eax,ds:0xc002d178
c000fc78:	83 ec 08             	sub    esp,0x8
c000fc7b:	6a 00                	push   0x0
c000fc7d:	53                   	push   ebx
c000fc7e:	83 e8 01             	sub    eax,0x1
c000fc81:	a3 78 d1 02 c0       	mov    ds:0xc002d178,eax
c000fc86:	e8 66 ff ff ff       	call   c000fbf1 <Phys::setPageState(unsigned long, bool)>
c000fc8b:	83 c4 10             	add    esp,0x10
c000fc8e:	83 c4 08             	add    esp,0x8
c000fc91:	5b                   	pop    ebx
c000fc92:	c3                   	ret    
c000fc93:	c7 44 24 10 2a 45 02 c0 	mov    DWORD PTR [esp+0x10],0xc002452a
c000fc9b:	83 c4 08             	add    esp,0x8
c000fc9e:	5b                   	pop    ebx
c000fc9f:	e9 18 fe ff ff       	jmp    c000fabc <KePanic(char const*)>
c000fca4:	68 00 10 00 00       	push   0x1000
c000fca9:	50                   	push   eax
c000fcaa:	e8 07 ff ff ff       	call   c000fbb6 <Phys::freeDMA(unsigned long, unsigned long)>
c000fcaf:	59                   	pop    ecx
c000fcb0:	5b                   	pop    ebx
c000fcb1:	83 c4 08             	add    esp,0x8
c000fcb4:	5b                   	pop    ebx
c000fcb5:	c3                   	ret    

c000fcb6 <Phys::allocatePage()>:
c000fcb6:	56                   	push   esi
c000fcb7:	53                   	push   ebx
c000fcb8:	83 ec 14             	sub    esp,0x14
c000fcbb:	8b 35 6c d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d16c
c000fcc1:	89 f3                	mov    ebx,esi
c000fcc3:	eb 18                	jmp    c000fcdd <Phys::allocatePage()+0x27>
c000fcc5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fccb:	75 0c                	jne    c000fcd9 <Phys::allocatePage()+0x23>
c000fccd:	c7 05 6c d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d16c,0x0
c000fcd7:	31 db                	xor    ebx,ebx
c000fcd9:	39 de                	cmp    esi,ebx
c000fcdb:	74 5b                	je     c000fd38 <Phys::allocatePage()+0x82>
c000fcdd:	53                   	push   ebx
c000fcde:	e8 4e ff ff ff       	call   c000fc31 <Phys::getPageState(unsigned long)>
c000fce3:	59                   	pop    ecx
c000fce4:	84 c0                	test   al,al
c000fce6:	74 29                	je     c000fd11 <Phys::allocatePage()+0x5b>
c000fce8:	83 c3 01             	add    ebx,0x1
c000fceb:	89 1d 6c d1 02 c0    	mov    DWORD PTR ds:0xc002d16c,ebx
c000fcf1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fcf7:	76 cc                	jbe    c000fcc5 <Phys::allocatePage()+0xf>
c000fcf9:	83 ec 0c             	sub    esp,0xc
c000fcfc:	68 40 45 02 c0       	push   0xc0024540
c000fd01:	e8 b6 fd ff ff       	call   c000fabc <KePanic(char const*)>
c000fd06:	8b 1d 6c d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d16c
c000fd0c:	83 c4 10             	add    esp,0x10
c000fd0f:	eb b4                	jmp    c000fcc5 <Phys::allocatePage()+0xf>
c000fd11:	6a 01                	push   0x1
c000fd13:	53                   	push   ebx
c000fd14:	e8 d8 fe ff ff       	call   c000fbf1 <Phys::setPageState(unsigned long, bool)>
c000fd19:	8b 1d 78 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d178
c000fd1f:	5e                   	pop    esi
c000fd20:	a1 6c d1 02 c0       	mov    eax,ds:0xc002d16c
c000fd25:	5a                   	pop    edx
c000fd26:	83 c3 01             	add    ebx,0x1
c000fd29:	89 1d 78 d1 02 c0    	mov    DWORD PTR ds:0xc002d178,ebx
c000fd2f:	c1 e0 0c             	shl    eax,0xc
c000fd32:	83 c4 14             	add    esp,0x14
c000fd35:	5b                   	pop    ebx
c000fd36:	5e                   	pop    esi
c000fd37:	c3                   	ret    
c000fd38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fd3d:	83 ec 0c             	sub    esp,0xc
c000fd40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fd43:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c000fd49:	51                   	push   ecx
c000fd4a:	e8 85 43 00 00       	call   c00140d4 <VAS::scanForEviction()>
c000fd4f:	83 c4 10             	add    esp,0x10
c000fd52:	85 c0                	test   eax,eax
c000fd54:	75 1b                	jne    c000fd71 <Phys::allocatePage()+0xbb>
c000fd56:	83 ec 0c             	sub    esp,0xc
c000fd59:	68 88 45 02 c0       	push   0xc0024588
c000fd5e:	e8 59 fd ff ff       	call   c000fabc <KePanic(char const*)>
c000fd63:	8b 1d 6c d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d16c
c000fd69:	83 c4 10             	add    esp,0x10
c000fd6c:	e9 6c ff ff ff       	jmp    c000fcdd <Phys::allocatePage()+0x27>
c000fd71:	8b 15 78 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d178
c000fd77:	83 ec 08             	sub    esp,0x8
c000fd7a:	6a 01                	push   0x1
c000fd7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd80:	83 c2 01             	add    edx,0x1
c000fd83:	89 15 78 d1 02 c0    	mov    DWORD PTR ds:0xc002d178,edx
c000fd89:	89 c2                	mov    edx,eax
c000fd8b:	c1 ea 0c             	shr    edx,0xc
c000fd8e:	52                   	push   edx
c000fd8f:	e8 5d fe ff ff       	call   c000fbf1 <Phys::setPageState(unsigned long, bool)>
c000fd94:	83 c4 10             	add    esp,0x10
c000fd97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd9b:	eb 95                	jmp    c000fd32 <Phys::allocatePage()+0x7c>

c000fd9d <Phys::allocateContiguousPages(int)>:
c000fd9d:	57                   	push   edi
c000fd9e:	56                   	push   esi
c000fd9f:	53                   	push   ebx
c000fda0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fda4:	fa                   	cli    
c000fda5:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c000fdab:	83 ec 0c             	sub    esp,0xc
c000fdae:	31 db                	xor    ebx,ebx
c000fdb0:	68 b8 45 02 c0       	push   0xc00245b8
c000fdb5:	83 c2 01             	add    edx,0x1
c000fdb8:	89 15 30 d3 02 c0    	mov    DWORD PTR ds:0xc002d330,edx
c000fdbe:	e8 a3 71 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fdc3:	83 c4 10             	add    esp,0x10
c000fdc6:	85 db                	test   ebx,ebx
c000fdc8:	75 11                	jne    c000fddb <Phys::allocateContiguousPages(int)+0x3e>
c000fdca:	e8 e7 fe ff ff       	call   c000fcb6 <Phys::allocatePage()>
c000fdcf:	83 ff 01             	cmp    edi,0x1
c000fdd2:	89 c6                	mov    esi,eax
c000fdd4:	74 21                	je     c000fdf7 <Phys::allocateContiguousPages(int)+0x5a>
c000fdd6:	bb 01 00 00 00       	mov    ebx,0x1
c000fddb:	e8 d6 fe ff ff       	call   c000fcb6 <Phys::allocatePage()>
c000fde0:	89 da                	mov    edx,ebx
c000fde2:	c1 e2 0c             	shl    edx,0xc
c000fde5:	01 f2                	add    edx,esi
c000fde7:	39 c2                	cmp    edx,eax
c000fde9:	74 24                	je     c000fe0f <Phys::allocateContiguousPages(int)+0x72>
c000fdeb:	83 ff 01             	cmp    edi,0x1
c000fdee:	bb 01 00 00 00       	mov    ebx,0x1
c000fdf3:	89 c6                	mov    esi,eax
c000fdf5:	75 e4                	jne    c000fddb <Phys::allocateContiguousPages(int)+0x3e>
c000fdf7:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c000fdff:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c000fe04:	85 c0                	test   eax,eax
c000fe06:	75 01                	jne    c000fe09 <Phys::allocateContiguousPages(int)+0x6c>
c000fe08:	fb                   	sti    
c000fe09:	5b                   	pop    ebx
c000fe0a:	89 f0                	mov    eax,esi
c000fe0c:	5e                   	pop    esi
c000fe0d:	5f                   	pop    edi
c000fe0e:	c3                   	ret    
c000fe0f:	83 c3 01             	add    ebx,0x1
c000fe12:	39 fb                	cmp    ebx,edi
c000fe14:	75 b0                	jne    c000fdc6 <Phys::allocateContiguousPages(int)+0x29>
c000fe16:	eb df                	jmp    c000fdf7 <Phys::allocateContiguousPages(int)+0x5a>

c000fe18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fe18:	56                   	push   esi
c000fe19:	53                   	push   ebx
c000fe1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1e:	39 1d 70 d1 02 c0    	cmp    DWORD PTR ds:0xc002d170,ebx
c000fe24:	73 06                	jae    c000fe2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fe26:	89 1d 70 d1 02 c0    	mov    DWORD PTR ds:0xc002d170,ebx
c000fe2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe30:	c1 eb 0c             	shr    ebx,0xc
c000fe33:	c1 e8 0c             	shr    eax,0xc
c000fe36:	39 d8                	cmp    eax,ebx
c000fe38:	73 13                	jae    c000fe4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fe3a:	6a 00                	push   0x0
c000fe3c:	50                   	push   eax
c000fe3d:	8d 70 01             	lea    esi,[eax+0x1]
c000fe40:	e8 ac fd ff ff       	call   c000fbf1 <Phys::setPageState(unsigned long, bool)>
c000fe45:	39 f3                	cmp    ebx,esi
c000fe47:	89 f0                	mov    eax,esi
c000fe49:	5a                   	pop    edx
c000fe4a:	59                   	pop    ecx
c000fe4b:	75 ed                	jne    c000fe3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fe4d:	5b                   	pop    ebx
c000fe4e:	5e                   	pop    esi
c000fe4f:	c3                   	ret    

c000fe50 <Phys::physicalMemorySetup(unsigned int)>:
c000fe50:	55                   	push   ebp
c000fe51:	57                   	push   edi
c000fe52:	56                   	push   esi
c000fe53:	53                   	push   ebx
c000fe54:	83 ec 40             	sub    esp,0x40
c000fe57:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000fe5b:	6a 10                	push   0x10
c000fe5d:	6a 00                	push   0x0
c000fe5f:	68 80 d1 02 c0       	push   0xc002d180
c000fe64:	e8 87 06 ff ff       	call   c00004f0 <memset>
c000fe69:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000fe6f:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c000fe75:	31 db                	xor    ebx,ebx
c000fe77:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000fe7b:	5a                   	pop    edx
c000fe7c:	59                   	pop    ecx
c000fe7d:	50                   	push   eax
c000fe7e:	68 45 45 02 c0       	push   0xc0024545
c000fe83:	e8 de 70 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fe88:	83 c4 10             	add    esp,0x10
c000fe8b:	83 ec 08             	sub    esp,0x8
c000fe8e:	6a 01                	push   0x1
c000fe90:	53                   	push   ebx
c000fe91:	83 c3 01             	add    ebx,0x1
c000fe94:	e8 58 fd ff ff       	call   c000fbf1 <Phys::setPageState(unsigned long, bool)>
c000fe99:	83 c4 10             	add    esp,0x10
c000fe9c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fea2:	75 e7                	jne    c000fe8b <Phys::physicalMemorySetup(unsigned int)+0x3b>
c000fea4:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000feab:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000feb2:	c1 e0 08             	shl    eax,0x8
c000feb5:	09 c2                	or     edx,eax
c000feb7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000febb:	0f 84 ab 01 00 00    	je     c001006c <Phys::physicalMemorySetup(unsigned int)+0x21c>
c000fec1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fec9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fece:	e9 82 00 00 00       	jmp    c000ff55 <Phys::physicalMemorySetup(unsigned int)+0x105>
c000fed3:	ba 00 00 08 00       	mov    edx,0x80000
c000fed8:	89 c1                	mov    ecx,eax
c000feda:	39 f2                	cmp    edx,esi
c000fedc:	19 f9                	sbb    ecx,edi
c000fede:	0f 82 c4 00 00 00    	jb     c000ffa8 <Phys::physicalMemorySetup(unsigned int)+0x158>
c000fee4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fee8:	89 c5                	mov    ebp,eax
c000feea:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000feee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fef2:	19 cd                	sbb    ebp,ecx
c000fef4:	0f 83 b3 00 00 00    	jae    c000ffad <Phys::physicalMemorySetup(unsigned int)+0x15d>
c000fefa:	89 d6                	mov    esi,edx
c000fefc:	ba 00 00 0a 00       	mov    edx,0xa0000
c000ff01:	39 f2                	cmp    edx,esi
c000ff03:	89 cf                	mov    edi,ecx
c000ff05:	19 c8                	sbb    eax,ecx
c000ff07:	73 07                	jae    c000ff10 <Phys::physicalMemorySetup(unsigned int)+0xc0>
c000ff09:	be 00 00 0a 00       	mov    esi,0xa0000
c000ff0e:	31 ff                	xor    edi,edi
c000ff10:	89 f2                	mov    edx,esi
c000ff12:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000ff17:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000ff1d:	89 f9                	mov    ecx,edi
c000ff1f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ff23:	83 d1 ff             	adc    ecx,0xffffffff
c000ff26:	39 d0                	cmp    eax,edx
c000ff28:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000ff2c:	b8 00 00 00 00       	mov    eax,0x0
c000ff31:	19 c8                	sbb    eax,ecx
c000ff33:	0f 82 c8 00 00 00    	jb     c0010001 <Phys::physicalMemorySetup(unsigned int)+0x1b1>
c000ff39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff3d:	83 c3 18             	add    ebx,0x18
c000ff40:	83 c0 01             	add    eax,0x1
c000ff43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ff47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff4b:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000ff4f:	0f 84 0f 01 00 00    	je     c0010064 <Phys::physicalMemorySetup(unsigned int)+0x214>
c000ff55:	8b 33                	mov    esi,DWORD PTR [ebx]
c000ff57:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ff5a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000ff5d:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ff60:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000ff64:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ff67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff6b:	01 f0                	add    eax,esi
c000ff6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff71:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ff75:	55                   	push   ebp
c000ff76:	11 fa                	adc    edx,edi
c000ff78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff7c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ff80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff84:	50                   	push   eax
c000ff85:	56                   	push   esi
c000ff86:	68 18 46 02 c0       	push   0xc0024618
c000ff8b:	e8 d6 6f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000ff90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff94:	83 c4 10             	add    esp,0x10
c000ff97:	09 f8                	or     eax,edi
c000ff99:	0f 85 c5 00 00 00    	jne    c0010064 <Phys::physicalMemorySetup(unsigned int)+0x214>
c000ff9f:	83 fd 01             	cmp    ebp,0x1
c000ffa2:	0f 84 2b ff ff ff    	je     c000fed3 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ffa8:	83 fd 01             	cmp    ebp,0x1
c000ffab:	75 8c                	jne    c000ff39 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c000ffad:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ffb1:	31 d2                	xor    edx,edx
c000ffb3:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000ffb7:	89 c8                	mov    eax,ecx
c000ffb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffbd:	19 d1                	sbb    ecx,edx
c000ffbf:	0f 82 74 ff ff ff    	jb     c000ff39 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c000ffc5:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000ffca:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000ffce:	b9 00 00 00 00       	mov    ecx,0x0
c000ffd3:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000ffd7:	0f 83 5c ff ff ff    	jae    c000ff39 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c000ffdd:	39 c6                	cmp    esi,eax
c000ffdf:	19 d7                	sbb    edi,edx
c000ffe1:	73 2a                	jae    c001000d <Phys::physicalMemorySetup(unsigned int)+0x1bd>
c000ffe3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ffe7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ffeb:	29 c7                	sub    edi,eax
c000ffed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000fff1:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fff5:	19 d5                	sbb    ebp,edx
c000fff7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fffb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ffff:	eb 0c                	jmp    c001000d <Phys::physicalMemorySetup(unsigned int)+0x1bd>
c0010001:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010005:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c001000d:	83 ec 04             	sub    esp,0x4
c0010010:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010014:	56                   	push   esi
c0010015:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010019:	57                   	push   edi
c001001a:	68 3c 46 02 c0       	push   0xc002463c
c001001f:	e8 42 6f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010024:	5a                   	pop    edx
c0010025:	59                   	pop    ecx
c0010026:	56                   	push   esi
c0010027:	57                   	push   edi
c0010028:	e8 eb fd ff ff       	call   c000fe18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001002d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010031:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010035:	83 c4 0c             	add    esp,0xc
c0010038:	8b 3d 7c d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d17c
c001003e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010042:	01 f8                	add    eax,edi
c0010044:	a3 7c d1 02 c0       	mov    ds:0xc002d17c,eax
c0010049:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010050:	52                   	push   edx
c0010051:	50                   	push   eax
c0010052:	68 6b 45 02 c0       	push   0xc002456b
c0010057:	e8 0a 6f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001005c:	83 c4 10             	add    esp,0x10
c001005f:	e9 d5 fe ff ff       	jmp    c000ff39 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c0010064:	83 c4 3c             	add    esp,0x3c
c0010067:	5b                   	pop    ebx
c0010068:	5e                   	pop    esi
c0010069:	5f                   	pop    edi
c001006a:	5d                   	pop    ebp
c001006b:	c3                   	ret    
c001006c:	c7 44 24 50 5d 45 02 c0 	mov    DWORD PTR [esp+0x50],0xc002455d
c0010074:	83 c4 3c             	add    esp,0x3c
c0010077:	5b                   	pop    ebx
c0010078:	5e                   	pop    esi
c0010079:	5f                   	pop    edi
c001007a:	5d                   	pop    ebp
c001007b:	e9 3c fa ff ff       	jmp    c000fabc <KePanic(char const*)>

c0010080 <Pipe::isAtty()>:
c0010080:	31 c0                	xor    eax,eax
c0010082:	c3                   	ret    
c0010083:	90                   	nop

c0010084 <Pipe::~Pipe()>:
c0010084:	83 ec 0c             	sub    esp,0xc
c0010087:	ba a8 46 02 c0       	mov    edx,0xc00246a8
c001008c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010090:	89 10                	mov    DWORD PTR [eax],edx
c0010092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010096:	83 ec 0c             	sub    esp,0xc
c0010099:	50                   	push   eax
c001009a:	e8 f7 2c 00 00       	call   c0012d96 <UnixFile::~UnixFile()>
c001009f:	83 c4 10             	add    esp,0x10
c00100a2:	90                   	nop
c00100a3:	83 c4 0c             	add    esp,0xc
c00100a6:	c3                   	ret    
c00100a7:	90                   	nop

c00100a8 <Pipe::~Pipe()>:
c00100a8:	83 ec 0c             	sub    esp,0xc
c00100ab:	83 ec 0c             	sub    esp,0xc
c00100ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100b2:	e8 cd ff ff ff       	call   c0010084 <Pipe::~Pipe()>
c00100b7:	83 c4 10             	add    esp,0x10
c00100ba:	83 ec 08             	sub    esp,0x8
c00100bd:	6a 20                	push   0x20
c00100bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100c3:	e8 a8 d1 ff ff       	call   c000d270 <operator delete(void*, unsigned long)>
c00100c8:	83 c4 10             	add    esp,0x10
c00100cb:	83 c4 0c             	add    esp,0xc
c00100ce:	c3                   	ret    
c00100cf:	90                   	nop

c00100d0 <Pipe::write(unsigned long long, void*, int*)>:
c00100d0:	55                   	push   ebp
c00100d1:	57                   	push   edi
c00100d2:	56                   	push   esi
c00100d3:	53                   	push   ebx
c00100d4:	83 ec 1c             	sub    esp,0x1c
c00100d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00100db:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00100df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00100e3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00100e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00100ea:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00100ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00100f0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00100f4:	89 d8                	mov    eax,ebx
c00100f6:	89 d6                	mov    esi,edx
c00100f8:	89 d7                	mov    edi,edx
c00100fa:	c1 ff 1f             	sar    edi,0x1f
c00100fd:	03 34 24             	add    esi,DWORD PTR [esp]
c0010100:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010104:	c1 f8 1f             	sar    eax,0x1f
c0010107:	39 f3                	cmp    ebx,esi
c0010109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001010d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010111:	19 f8                	sbb    eax,edi
c0010113:	b8 01 00 00 00       	mov    eax,0x1
c0010118:	72 72                	jb     c001018c <Pipe::write(unsigned long long, void*, int*)+0xbc>
c001011a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001011d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010121:	01 d0                	add    eax,edx
c0010123:	99                   	cdq    
c0010124:	f7 fb                	idiv   ebx
c0010126:	89 d8                	mov    eax,ebx
c0010128:	29 d0                	sub    eax,edx
c001012a:	89 d6                	mov    esi,edx
c001012c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001012f:	89 c3                	mov    ebx,eax
c0010131:	c1 fb 1f             	sar    ebx,0x1f
c0010134:	39 c2                	cmp    edx,eax
c0010136:	19 df                	sbb    edi,ebx
c0010138:	bb 00 00 00 00       	mov    ebx,0x0
c001013d:	72 04                	jb     c0010143 <Pipe::write(unsigned long long, void*, int*)+0x73>
c001013f:	89 d3                	mov    ebx,edx
c0010141:	29 c3                	sub    ebx,eax
c0010143:	89 d0                	mov    eax,edx
c0010145:	29 d8                	sub    eax,ebx
c0010147:	74 0d                	je     c0010156 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0010149:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001014c:	89 c1                	mov    ecx,eax
c001014e:	01 f7                	add    edi,esi
c0010150:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010154:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010156:	85 db                	test   ebx,ebx
c0010158:	74 0d                	je     c0010167 <Pipe::write(unsigned long long, void*, int*)+0x97>
c001015a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001015e:	89 d9                	mov    ecx,ebx
c0010160:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010163:	89 c6                	mov    esi,eax
c0010165:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010167:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c001016a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001016f:	75 10                	jne    c0010181 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0010171:	83 ec 0c             	sub    esp,0xc
c0010174:	68 65 46 02 c0       	push   0xc0024665
c0010179:	e8 3e f9 ff ff       	call   c000fabc <KePanic(char const*)>
c001017e:	83 c4 10             	add    esp,0x10
c0010181:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010185:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010188:	89 08                	mov    DWORD PTR [eax],ecx
c001018a:	31 c0                	xor    eax,eax
c001018c:	83 c4 1c             	add    esp,0x1c
c001018f:	5b                   	pop    ebx
c0010190:	5e                   	pop    esi
c0010191:	5f                   	pop    edi
c0010192:	5d                   	pop    ebp
c0010193:	c3                   	ret    

c0010194 <Pipe::read(unsigned long long, void*, int*)>:
c0010194:	55                   	push   ebp
c0010195:	57                   	push   edi
c0010196:	56                   	push   esi
c0010197:	53                   	push   ebx
c0010198:	83 ec 1c             	sub    esp,0x1c
c001019b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001019f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00101a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00101a7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00101aa:	89 c8                	mov    eax,ecx
c00101ac:	99                   	cdq    
c00101ad:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00101b1:	74 27                	je     c00101da <Pipe::read(unsigned long long, void*, int*)+0x46>
c00101b3:	39 f9                	cmp    ecx,edi
c00101b5:	89 d1                	mov    ecx,edx
c00101b7:	19 f1                	sbb    ecx,esi
c00101b9:	73 1f                	jae    c00101da <Pipe::read(unsigned long long, void*, int*)+0x46>
c00101bb:	fa                   	cli    
c00101bc:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c00101c2:	e8 6d 64 00 00       	call   c0016634 <schedule()>
c00101c7:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c00101ce:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c00101d5:	75 d0                	jne    c00101a7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00101d7:	fb                   	sti    
c00101d8:	eb cd                	jmp    c00101a7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00101da:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00101de:	39 f8                	cmp    eax,edi
c00101e0:	89 d1                	mov    ecx,edx
c00101e2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00101e6:	19 f1                	sbb    ecx,esi
c00101e8:	73 08                	jae    c00101f2 <Pipe::read(unsigned long long, void*, int*)+0x5e>
c00101ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00101ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00101f2:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00101f5:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00101f8:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00101fc:	29 f7                	sub    edi,esi
c00101fe:	89 f8                	mov    eax,edi
c0010200:	99                   	cdq    
c0010201:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0010205:	89 d0                	mov    eax,edx
c0010207:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001020b:	19 c2                	sbb    edx,eax
c001020d:	89 f8                	mov    eax,edi
c001020f:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0010214:	89 ea                	mov    edx,ebp
c0010216:	29 c2                	sub    edx,eax
c0010218:	85 c0                	test   eax,eax
c001021a:	74 0b                	je     c0010227 <Pipe::read(unsigned long long, void*, int*)+0x93>
c001021c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001021f:	89 c1                	mov    ecx,eax
c0010221:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010225:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010227:	85 d2                	test   edx,edx
c0010229:	74 0d                	je     c0010238 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c001022b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001022f:	89 d1                	mov    ecx,edx
c0010231:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010234:	89 c7                	mov    edi,eax
c0010236:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010238:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001023b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001023e:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010241:	99                   	cdq    
c0010242:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010246:	89 f7                	mov    edi,esi
c0010248:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001024c:	c1 ff 1f             	sar    edi,0x1f
c001024f:	57                   	push   edi
c0010250:	56                   	push   esi
c0010251:	52                   	push   edx
c0010252:	50                   	push   eax
c0010253:	e8 dc 1c 01 00       	call   c0021f34 <__umoddi3>
c0010258:	83 c4 10             	add    esp,0x10
c001025b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010260:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010263:	75 10                	jne    c0010275 <Pipe::read(unsigned long long, void*, int*)+0xe1>
c0010265:	83 ec 0c             	sub    esp,0xc
c0010268:	68 82 46 02 c0       	push   0xc0024682
c001026d:	e8 4a f8 ff ff       	call   c000fabc <KePanic(char const*)>
c0010272:	83 c4 10             	add    esp,0x10
c0010275:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010279:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001027d:	89 10                	mov    DWORD PTR [eax],edx
c001027f:	83 c4 1c             	add    esp,0x1c
c0010282:	31 c0                	xor    eax,eax
c0010284:	5b                   	pop    ebx
c0010285:	5e                   	pop    esi
c0010286:	5f                   	pop    edi
c0010287:	5d                   	pop    ebp
c0010288:	c3                   	ret    
c0010289:	90                   	nop

c001028a <Pipe::Pipe(int)>:
c001028a:	83 ec 0c             	sub    esp,0xc
c001028d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010291:	83 ec 08             	sub    esp,0x8
c0010294:	6a 00                	push   0x0
c0010296:	50                   	push   eax
c0010297:	e8 14 29 00 00       	call   c0012bb0 <UnixFile::UnixFile(int)>
c001029c:	83 c4 10             	add    esp,0x10
c001029f:	ba a8 46 02 c0       	mov    edx,0xc00246a8
c00102a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a8:	89 10                	mov    DWORD PTR [eax],edx
c00102aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00102b2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00102b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00102c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102c4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00102cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102cf:	83 ec 0c             	sub    esp,0xc
c00102d2:	50                   	push   eax
c00102d3:	e8 90 f3 ff ff       	call   c000f668 <malloc>
c00102d8:	83 c4 10             	add    esp,0x10
c00102db:	89 c2                	mov    edx,eax
c00102dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00102e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00102ec:	90                   	nop
c00102ed:	83 c4 0c             	add    esp,0xc
c00102f0:	c3                   	ret    

c00102f1 <KePowerThread(void*)>:
c00102f1:	83 ec 0c             	sub    esp,0xc
c00102f4:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c00102fb:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c0010302:	75 01                	jne    c0010305 <KePowerThread(void*)+0x14>
c0010304:	fb                   	sti    
c0010305:	50                   	push   eax
c0010306:	50                   	push   eax
c0010307:	6a 00                	push   0x0
c0010309:	6a 0a                	push   0xa
c001030b:	c6 05 ac d1 02 c0 00 	mov    BYTE PTR ds:0xc002d1ac,0x0
c0010312:	e8 29 65 00 00       	call   c0016840 <sleep(unsigned long long)>
c0010317:	83 c4 10             	add    esp,0x10
c001031a:	83 05 e4 d1 02 c0 0a 	add    DWORD PTR ds:0xc002d1e4,0xa
c0010321:	eb e2                	jmp    c0010305 <KePowerThread(void*)+0x14>

c0010323 <KeChangePowerSettings(PowerSettings)>:
c0010323:	57                   	push   edi
c0010324:	b9 09 00 00 00       	mov    ecx,0x9
c0010329:	56                   	push   esi
c001032a:	bf c0 d1 02 c0       	mov    edi,0xc002d1c0
c001032f:	fc                   	cld    
c0010330:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010334:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010336:	5e                   	pop    esi
c0010337:	5f                   	pop    edi
c0010338:	c3                   	ret    

c0010339 <KeUserIOReceived()>:
c0010339:	c7 05 e4 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1e4,0x0
c0010343:	c3                   	ret    

c0010344 <KeSetupPowerManager()>:
c0010344:	83 ec 0c             	sub    esp,0xc
c0010347:	68 f0 00 00 00       	push   0xf0
c001034c:	6a 00                	push   0x0
c001034e:	68 f1 02 01 c0       	push   0xc00102f1
c0010353:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0010359:	c7 05 e4 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1e4,0x0
c0010363:	c6 05 ac d1 02 c0 00 	mov    BYTE PTR ds:0xc002d1ac,0x0
c001036a:	e8 11 60 00 00       	call   c0016380 <Process::createThread(void (*)(void*), void*, int)>
c001036f:	c7 05 c0 d1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d1c0,0x2
c0010379:	c7 05 c4 d1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d1c4,0x1
c0010383:	c7 05 c8 d1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d1c8,0x3
c001038d:	c7 05 cc d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1cc,0x0
c0010397:	c7 05 d8 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1d8,0x0
c00103a1:	c7 05 d0 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1d0,0x0
c00103ab:	c7 05 dc d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1dc,0x0
c00103b5:	c7 05 d4 d1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002d1d4,0x3c
c00103bf:	c7 05 e0 d1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002d1e0,0x3c
c00103c9:	83 c4 1c             	add    esp,0x1c
c00103cc:	c3                   	ret    

c00103cd <KePrepareShutdown()>:
c00103cd:	83 ec 0c             	sub    esp,0xc
c00103d0:	e8 67 cd ff ff       	call   c000d13c <KeExecuteAtexit()>
c00103d5:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c00103da:	83 ec 0c             	sub    esp,0xc
c00103dd:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c00103e3:	e8 76 98 ff ff       	call   c0009c5e <Device::closeAll()>
c00103e8:	83 c4 1c             	add    esp,0x1c
c00103eb:	c3                   	ret    

c00103ec <KeRegisterShutdownHandler(void (*)())>:
c00103ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103f0:	a3 a8 d1 02 c0       	mov    ds:0xc002d1a8,eax
c00103f5:	c3                   	ret    

c00103f6 <KeRegisterRestartHandler(void (*)())>:
c00103f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103fa:	a3 a4 d1 02 c0       	mov    ds:0xc002d1a4,eax
c00103ff:	c3                   	ret    

c0010400 <KeRegisterSleepHandler(void (*)())>:
c0010400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010404:	a3 a0 d1 02 c0       	mov    ds:0xc002d1a0,eax
c0010409:	c3                   	ret    

c001040a <KeShutdown()>:
c001040a:	83 ec 0c             	sub    esp,0xc
c001040d:	e8 bb ff ff ff       	call   c00103cd <KePrepareShutdown()>
c0010412:	a1 a8 d1 02 c0       	mov    eax,ds:0xc002d1a8
c0010417:	85 c0                	test   eax,eax
c0010419:	74 04                	je     c001041f <KeShutdown()+0x15>
c001041b:	ff d0                	call   eax
c001041d:	eb 10                	jmp    c001042f <KeShutdown()+0x25>
c001041f:	83 ec 0c             	sub    esp,0xc
c0010422:	68 bc 46 02 c0       	push   0xc00246bc
c0010427:	e8 90 f6 ff ff       	call   c000fabc <KePanic(char const*)>
c001042c:	83 c4 10             	add    esp,0x10
c001042f:	83 ec 0c             	sub    esp,0xc
c0010432:	68 dd 46 02 c0       	push   0xc00246dd
c0010437:	e8 80 f6 ff ff       	call   c000fabc <KePanic(char const*)>
c001043c:	83 c4 1c             	add    esp,0x1c
c001043f:	c3                   	ret    

c0010440 <KeSleep()>:
c0010440:	a1 a0 d1 02 c0       	mov    eax,ds:0xc002d1a0
c0010445:	85 c0                	test   eax,eax
c0010447:	74 02                	je     c001044b <KeSleep()+0xb>
c0010449:	ff e0                	jmp    eax
c001044b:	c3                   	ret    

c001044c <KeHandlePowerButton()>:
c001044c:	a1 c0 d1 02 c0       	mov    eax,ds:0xc002d1c0
c0010451:	83 f8 02             	cmp    eax,0x2
c0010454:	75 02                	jne    c0010458 <KeHandlePowerButton()+0xc>
c0010456:	eb b2                	jmp    c001040a <KeShutdown()>
c0010458:	48                   	dec    eax
c0010459:	75 02                	jne    c001045d <KeHandlePowerButton()+0x11>
c001045b:	eb e3                	jmp    c0010440 <KeSleep()>
c001045d:	c3                   	ret    

c001045e <KeHandleSleepButton()>:
c001045e:	a1 c4 d1 02 c0       	mov    eax,ds:0xc002d1c4
c0010463:	83 f8 02             	cmp    eax,0x2
c0010466:	75 02                	jne    c001046a <KeHandleSleepButton()+0xc>
c0010468:	eb a0                	jmp    c001040a <KeShutdown()>
c001046a:	48                   	dec    eax
c001046b:	75 02                	jne    c001046f <KeHandleSleepButton()+0x11>
c001046d:	eb d1                	jmp    c0010440 <KeSleep()>
c001046f:	c3                   	ret    

c0010470 <KeRestart()>:
c0010470:	83 ec 0c             	sub    esp,0xc
c0010473:	e8 55 ff ff ff       	call   c00103cd <KePrepareShutdown()>
c0010478:	a1 a4 d1 02 c0       	mov    eax,ds:0xc002d1a4
c001047d:	85 c0                	test   eax,eax
c001047f:	74 02                	je     c0010483 <KeRestart()+0x13>
c0010481:	ff d0                	call   eax
c0010483:	83 ec 0c             	sub    esp,0xc
c0010486:	68 01 47 02 c0       	push   0xc0024701
c001048b:	e8 2c f6 ff ff       	call   c000fabc <KePanic(char const*)>
c0010490:	83 c4 1c             	add    esp,0x1c
c0010493:	c3                   	ret    

c0010494 <KeRand()>:
c0010494:	69 05 e8 d1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002d1e8,0x2875
c001049e:	69 0d ec d1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002d1ec,0xa2e7b175
c00104a8:	53                   	push   ebx
c00104a9:	01 c1                	add    ecx,eax
c00104ab:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00104b0:	f7 25 e8 d1 02 c0    	mul    DWORD PTR ds:0xc002d1e8
c00104b6:	01 ca                	add    edx,ecx
c00104b8:	05 ef 04 b5 00       	add    eax,0xb504ef
c00104bd:	a3 e8 d1 02 c0       	mov    ds:0xc002d1e8,eax
c00104c2:	83 d2 00             	adc    edx,0x0
c00104c5:	0f b7 da             	movzx  ebx,dx
c00104c8:	89 1d ec d1 02 c0    	mov    DWORD PTR ds:0xc002d1ec,ebx
c00104ce:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00104d2:	5b                   	pop    ebx
c00104d3:	c3                   	ret    

c00104d4 <KeSeedRand(unsigned int)>:
c00104d4:	53                   	push   ebx
c00104d5:	83 ec 08             	sub    esp,0x8
c00104d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104dc:	e8 dd a5 00 00       	call   c001aabe <HalGetRand()>
c00104e1:	c7 05 ec d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1ec,0x0
c00104eb:	31 d8                	xor    eax,ebx
c00104ed:	a3 e8 d1 02 c0       	mov    ds:0xc002d1e8,eax
c00104f2:	e8 9d ff ff ff       	call   c0010494 <KeRand()>
c00104f7:	83 c4 08             	add    esp,0x8
c00104fa:	5b                   	pop    ebx
c00104fb:	eb 97                	jmp    c0010494 <KeRand()>

c00104fd <KeInitRand()>:
c00104fd:	83 ec 0c             	sub    esp,0xc
c0010500:	e8 87 a3 00 00       	call   c001a88c <HalQueryPerformanceCounter()>
c0010505:	0f 20 da             	mov    edx,cr3
c0010508:	0f 22 da             	mov    cr3,edx
c001050b:	0f 20 da             	mov    edx,cr3
c001050e:	0f 22 da             	mov    cr3,edx
c0010511:	0f 20 da             	mov    edx,cr3
c0010514:	0f 22 da             	mov    cr3,edx
c0010517:	0f 20 da             	mov    edx,cr3
c001051a:	0f 22 da             	mov    cr3,edx
c001051d:	83 ec 0c             	sub    esp,0xc
c0010520:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010525:	50                   	push   eax
c0010526:	e8 a9 ff ff ff       	call   c00104d4 <KeSeedRand(unsigned int)>
c001052b:	83 c4 1c             	add    esp,0x1c
c001052e:	c3                   	ret    
c001052f:	90                   	nop

c0010530 <KeResolveCompatibilitySymbol(char*)>:
c0010530:	83 ec 0c             	sub    esp,0xc
c0010533:	83 ec 08             	sub    esp,0x8
c0010536:	68 10 47 02 c0       	push   0xc0024710
c001053b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053f:	e8 3c 02 ff ff       	call   c0000780 <strcmp>
c0010544:	83 c4 10             	add    esp,0x10
c0010547:	85 c0                	test   eax,eax
c0010549:	0f 94 c0             	sete   al
c001054c:	0f b6 c0             	movzx  eax,al
c001054f:	85 c0                	test   eax,eax
c0010551:	74 0d                	je     c0010560 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010553:	b8 08 d1 02 c0       	mov    eax,0xc002d108
c0010558:	e9 3b 02 00 00       	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c001055d:	8d 76 00             	lea    esi,[esi+0x0]
c0010560:	83 ec 08             	sub    esp,0x8
c0010563:	68 19 47 02 c0       	push   0xc0024719
c0010568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001056c:	e8 0f 02 ff ff       	call   c0000780 <strcmp>
c0010571:	83 c4 10             	add    esp,0x10
c0010574:	85 c0                	test   eax,eax
c0010576:	0f 94 c0             	sete   al
c0010579:	0f b6 c0             	movzx  eax,al
c001057c:	85 c0                	test   eax,eax
c001057e:	74 0c                	je     c001058c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010580:	b8 34 1e 02 c0       	mov    eax,0xc0021e34
c0010585:	e9 0e 02 00 00       	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c001058a:	66 90                	xchg   ax,ax
c001058c:	83 ec 08             	sub    esp,0x8
c001058f:	68 23 47 02 c0       	push   0xc0024723
c0010594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010598:	e8 e3 01 ff ff       	call   c0000780 <strcmp>
c001059d:	83 c4 10             	add    esp,0x10
c00105a0:	85 c0                	test   eax,eax
c00105a2:	0f 94 c0             	sete   al
c00105a5:	0f b6 c0             	movzx  eax,al
c00105a8:	85 c0                	test   eax,eax
c00105aa:	74 0c                	je     c00105b8 <KeResolveCompatibilitySymbol(char*)+0x88>
c00105ac:	b8 08 d1 02 c0       	mov    eax,0xc002d108
c00105b1:	e9 e2 01 00 00       	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c00105b6:	66 90                	xchg   ax,ax
c00105b8:	83 ec 08             	sub    esp,0x8
c00105bb:	68 36 47 02 c0       	push   0xc0024736
c00105c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c4:	e8 b7 01 ff ff       	call   c0000780 <strcmp>
c00105c9:	83 c4 10             	add    esp,0x10
c00105cc:	85 c0                	test   eax,eax
c00105ce:	0f 94 c0             	sete   al
c00105d1:	0f b6 c0             	movzx  eax,al
c00105d4:	85 c0                	test   eax,eax
c00105d6:	74 0c                	je     c00105e4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00105d8:	b8 68 1b 02 c0       	mov    eax,0xc0021b68
c00105dd:	e9 b6 01 00 00       	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c00105e2:	66 90                	xchg   ax,ax
c00105e4:	83 ec 08             	sub    esp,0x8
c00105e7:	68 3f 47 02 c0       	push   0xc002473f
c00105ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f0:	e8 8b 01 ff ff       	call   c0000780 <strcmp>
c00105f5:	83 c4 10             	add    esp,0x10
c00105f8:	85 c0                	test   eax,eax
c00105fa:	0f 94 c0             	sete   al
c00105fd:	0f b6 c0             	movzx  eax,al
c0010600:	85 c0                	test   eax,eax
c0010602:	74 0c                	je     c0010610 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010604:	b8 bc fa 00 c0       	mov    eax,0xc000fabc
c0010609:	e9 8a 01 00 00       	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c001060e:	66 90                	xchg   ax,ax
c0010610:	83 ec 08             	sub    esp,0x8
c0010613:	68 52 47 02 c0       	push   0xc0024752
c0010618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001061c:	e8 5f 01 ff ff       	call   c0000780 <strcmp>
c0010621:	83 c4 10             	add    esp,0x10
c0010624:	85 c0                	test   eax,eax
c0010626:	0f 94 c0             	sete   al
c0010629:	0f b6 c0             	movzx  eax,al
c001062c:	85 c0                	test   eax,eax
c001062e:	74 0c                	je     c001063c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010630:	b8 c5 d1 00 c0       	mov    eax,0xc000d1c5
c0010635:	e9 5e 01 00 00       	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c001063a:	66 90                	xchg   ax,ax
c001063c:	83 ec 08             	sub    esp,0x8
c001063f:	68 6f 47 02 c0       	push   0xc002476f
c0010644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010648:	e8 33 01 ff ff       	call   c0000780 <strcmp>
c001064d:	83 c4 10             	add    esp,0x10
c0010650:	85 c0                	test   eax,eax
c0010652:	0f 94 c0             	sete   al
c0010655:	0f b6 c0             	movzx  eax,al
c0010658:	85 c0                	test   eax,eax
c001065a:	74 0c                	je     c0010668 <KeResolveCompatibilitySymbol(char*)+0x138>
c001065c:	b8 34 1f 02 c0       	mov    eax,0xc0021f34
c0010661:	e9 32 01 00 00       	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010666:	66 90                	xchg   ax,ax
c0010668:	83 ec 08             	sub    esp,0x8
c001066b:	68 79 47 02 c0       	push   0xc0024779
c0010670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010674:	e8 07 01 ff ff       	call   c0000780 <strcmp>
c0010679:	83 c4 10             	add    esp,0x10
c001067c:	85 c0                	test   eax,eax
c001067e:	0f 94 c0             	sete   al
c0010681:	0f b6 c0             	movzx  eax,al
c0010684:	85 c0                	test   eax,eax
c0010686:	74 0c                	je     c0010694 <KeResolveCompatibilitySymbol(char*)+0x164>
c0010688:	b8 b4 1c 02 c0       	mov    eax,0xc0021cb4
c001068d:	e9 06 01 00 00       	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010692:	66 90                	xchg   ax,ax
c0010694:	83 ec 08             	sub    esp,0x8
c0010697:	68 82 47 02 c0       	push   0xc0024782
c001069c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106a0:	e8 db 00 ff ff       	call   c0000780 <strcmp>
c00106a5:	83 c4 10             	add    esp,0x10
c00106a8:	85 c0                	test   eax,eax
c00106aa:	0f 94 c0             	sete   al
c00106ad:	0f b6 c0             	movzx  eax,al
c00106b0:	85 c0                	test   eax,eax
c00106b2:	74 0c                	je     c00106c0 <KeResolveCompatibilitySymbol(char*)+0x190>
c00106b4:	b8 0c d1 02 c0       	mov    eax,0xc002d10c
c00106b9:	e9 da 00 00 00       	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c00106be:	66 90                	xchg   ax,ax
c00106c0:	83 ec 08             	sub    esp,0x8
c00106c3:	68 9a 47 02 c0       	push   0xc002479a
c00106c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106cc:	e8 af 00 ff ff       	call   c0000780 <strcmp>
c00106d1:	83 c4 10             	add    esp,0x10
c00106d4:	85 c0                	test   eax,eax
c00106d6:	0f 94 c0             	sete   al
c00106d9:	0f b6 c0             	movzx  eax,al
c00106dc:	85 c0                	test   eax,eax
c00106de:	74 0c                	je     c00106ec <KeResolveCompatibilitySymbol(char*)+0x1bc>
c00106e0:	b8 0c d1 02 c0       	mov    eax,0xc002d10c
c00106e5:	e9 ae 00 00 00       	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c00106ea:	66 90                	xchg   ax,ax
c00106ec:	83 ec 08             	sub    esp,0x8
c00106ef:	68 a7 47 02 c0       	push   0xc00247a7
c00106f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106f8:	e8 83 00 ff ff       	call   c0000780 <strcmp>
c00106fd:	83 c4 10             	add    esp,0x10
c0010700:	85 c0                	test   eax,eax
c0010702:	0f 94 c0             	sete   al
c0010705:	0f b6 c0             	movzx  eax,al
c0010708:	85 c0                	test   eax,eax
c001070a:	74 0c                	je     c0010718 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c001070c:	b8 0d d1 02 c0       	mov    eax,0xc002d10d
c0010711:	e9 82 00 00 00       	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010716:	66 90                	xchg   ax,ax
c0010718:	83 ec 08             	sub    esp,0x8
c001071b:	68 b4 47 02 c0       	push   0xc00247b4
c0010720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010724:	e8 57 00 ff ff       	call   c0000780 <strcmp>
c0010729:	83 c4 10             	add    esp,0x10
c001072c:	85 c0                	test   eax,eax
c001072e:	0f 94 c0             	sete   al
c0010731:	0f b6 c0             	movzx  eax,al
c0010734:	85 c0                	test   eax,eax
c0010736:	74 08                	je     c0010740 <KeResolveCompatibilitySymbol(char*)+0x210>
c0010738:	b8 0c d1 02 c0       	mov    eax,0xc002d10c
c001073d:	eb 59                	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c001073f:	90                   	nop
c0010740:	83 ec 08             	sub    esp,0x8
c0010743:	68 c5 47 02 c0       	push   0xc00247c5
c0010748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001074c:	e8 2f 00 ff ff       	call   c0000780 <strcmp>
c0010751:	83 c4 10             	add    esp,0x10
c0010754:	85 c0                	test   eax,eax
c0010756:	0f 94 c0             	sete   al
c0010759:	0f b6 c0             	movzx  eax,al
c001075c:	85 c0                	test   eax,eax
c001075e:	74 08                	je     c0010768 <KeResolveCompatibilitySymbol(char*)+0x238>
c0010760:	b8 0d d1 02 c0       	mov    eax,0xc002d10d
c0010765:	eb 31                	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010767:	90                   	nop
c0010768:	83 ec 08             	sub    esp,0x8
c001076b:	68 d6 47 02 c0       	push   0xc00247d6
c0010770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010774:	e8 07 00 ff ff       	call   c0000780 <strcmp>
c0010779:	83 c4 10             	add    esp,0x10
c001077c:	85 c0                	test   eax,eax
c001077e:	0f 94 c0             	sete   al
c0010781:	0f b6 c0             	movzx  eax,al
c0010784:	85 c0                	test   eax,eax
c0010786:	74 08                	je     c0010790 <KeResolveCompatibilitySymbol(char*)+0x260>
c0010788:	b8 28 6e 01 c0       	mov    eax,0xc0016e28
c001078d:	eb 09                	jmp    c0010798 <KeResolveCompatibilitySymbol(char*)+0x268>
c001078f:	90                   	nop
c0010790:	b8 00 00 00 00       	mov    eax,0x0
c0010795:	8d 76 00             	lea    esi,[esi+0x0]
c0010798:	83 c4 0c             	add    esp,0xc
c001079b:	c3                   	ret    

c001079c <Semaphore::Semaphore(int)>:
c001079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107a4:	89 10                	mov    DWORD PTR [eax],edx
c00107a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107aa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00107b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107c0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00107c7:	90                   	nop
c00107c8:	c3                   	ret    
c00107c9:	90                   	nop
c00107ca:	66 90                	xchg   ax,ax

c00107cc <Semaphore::tryAcquire()>:
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	fa                   	cli    
c00107d0:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00107d5:	83 c0 01             	add    eax,0x1
c00107d8:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c00107dd:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c00107e2:	83 c0 01             	add    eax,0x1
c00107e5:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c00107ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ee:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00107f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00107f7:	39 c2                	cmp    edx,eax
c00107f9:	7d 59                	jge    c0010854 <Semaphore::tryAcquire()+0x88>
c00107fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010802:	8d 50 01             	lea    edx,[eax+0x1]
c0010805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010809:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001080c:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010811:	83 e8 01             	sub    eax,0x1
c0010814:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010819:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c001081e:	85 c0                	test   eax,eax
c0010820:	75 1a                	jne    c001083c <Semaphore::tryAcquire()+0x70>
c0010822:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c0010827:	85 c0                	test   eax,eax
c0010829:	74 11                	je     c001083c <Semaphore::tryAcquire()+0x70>
c001082b:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c0010835:	e8 fa 5d 00 00       	call   c0016634 <schedule()>
c001083a:	66 90                	xchg   ax,ax
c001083c:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0010844:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0010849:	85 c0                	test   eax,eax
c001084b:	75 03                	jne    c0010850 <Semaphore::tryAcquire()+0x84>
c001084d:	fb                   	sti    
c001084e:	66 90                	xchg   ax,ax
c0010850:	b0 01                	mov    al,0x1
c0010852:	eb 48                	jmp    c001089c <Semaphore::tryAcquire()+0xd0>
c0010854:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010859:	83 e8 01             	sub    eax,0x1
c001085c:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010861:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010866:	85 c0                	test   eax,eax
c0010868:	75 1a                	jne    c0010884 <Semaphore::tryAcquire()+0xb8>
c001086a:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c001086f:	85 c0                	test   eax,eax
c0010871:	74 11                	je     c0010884 <Semaphore::tryAcquire()+0xb8>
c0010873:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c001087d:	e8 b2 5d 00 00       	call   c0016634 <schedule()>
c0010882:	66 90                	xchg   ax,ax
c0010884:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001088c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0010891:	85 c0                	test   eax,eax
c0010893:	75 03                	jne    c0010898 <Semaphore::tryAcquire()+0xcc>
c0010895:	fb                   	sti    
c0010896:	66 90                	xchg   ax,ax
c0010898:	b0 00                	mov    al,0x0
c001089a:	66 90                	xchg   ax,ax
c001089c:	83 c4 0c             	add    esp,0xc
c001089f:	c3                   	ret    

c00108a0 <Semaphore::assertLocked(char const*)>:
c00108a0:	83 ec 0c             	sub    esp,0xc
c00108a3:	fa                   	cli    
c00108a4:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00108a9:	83 c0 01             	add    eax,0x1
c00108ac:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c00108b1:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c00108b6:	83 c0 01             	add    eax,0x1
c00108b9:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c00108be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00108c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00108cb:	39 c2                	cmp    edx,eax
c00108cd:	7d 11                	jge    c00108e0 <Semaphore::assertLocked(char const*)+0x40>
c00108cf:	83 ec 0c             	sub    esp,0xc
c00108d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00108d6:	e8 e1 f1 ff ff       	call   c000fabc <KePanic(char const*)>
c00108db:	83 c4 10             	add    esp,0x10
c00108de:	66 90                	xchg   ax,ax
c00108e0:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c00108e5:	83 e8 01             	sub    eax,0x1
c00108e8:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c00108ed:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c00108f2:	85 c0                	test   eax,eax
c00108f4:	75 1a                	jne    c0010910 <Semaphore::assertLocked(char const*)+0x70>
c00108f6:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c00108fb:	85 c0                	test   eax,eax
c00108fd:	74 11                	je     c0010910 <Semaphore::assertLocked(char const*)+0x70>
c00108ff:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c0010909:	e8 26 5d 00 00       	call   c0016634 <schedule()>
c001090e:	66 90                	xchg   ax,ax
c0010910:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0010918:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001091d:	85 c0                	test   eax,eax
c001091f:	75 03                	jne    c0010924 <Semaphore::assertLocked(char const*)+0x84>
c0010921:	fb                   	sti    
c0010922:	66 90                	xchg   ax,ax
c0010924:	90                   	nop
c0010925:	83 c4 0c             	add    esp,0xc
c0010928:	c3                   	ret    
c0010929:	90                   	nop
c001092a:	66 90                	xchg   ax,ax

c001092c <Semaphore::acquire(int)>:
c001092c:	83 ec 1c             	sub    esp,0x1c
c001092f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010934:	0f 84 ae 00 00 00    	je     c00109e8 <Semaphore::acquire(int)+0xbc>
c001093a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010942:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010947:	90                   	nop
c0010948:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c001094d:	85 c0                	test   eax,eax
c001094f:	0f 84 87 00 00 00    	je     c00109dc <Semaphore::acquire(int)+0xb0>
c0010955:	83 ec 0c             	sub    esp,0xc
c0010958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001095c:	e8 6b fe ff ff       	call   c00107cc <Semaphore::tryAcquire()>
c0010961:	83 c4 10             	add    esp,0x10
c0010964:	83 f0 01             	xor    eax,0x1
c0010967:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001096b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001096f:	83 f0 01             	xor    eax,0x1
c0010972:	0f b6 c0             	movzx  eax,al
c0010975:	85 c0                	test   eax,eax
c0010977:	75 5f                	jne    c00109d8 <Semaphore::acquire(int)+0xac>
c0010979:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c001097e:	7f 34                	jg     c00109b4 <Semaphore::acquire(int)+0x88>
c0010980:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010984:	89 d0                	mov    eax,edx
c0010986:	c1 e0 02             	shl    eax,0x2
c0010989:	01 d0                	add    eax,edx
c001098b:	d1 e0                	shl    eax,1
c001098d:	89 c2                	mov    edx,eax
c001098f:	c1 fa 1f             	sar    edx,0x1f
c0010992:	83 ec 08             	sub    esp,0x8
c0010995:	52                   	push   edx
c0010996:	50                   	push   eax
c0010997:	e8 8c 5e 00 00       	call   c0016828 <milliTenthSleep(unsigned long long)>
c001099c:	83 c4 10             	add    esp,0x10
c001099f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00109a3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00109a7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00109af:	eb 97                	jmp    c0010948 <Semaphore::acquire(int)+0x1c>
c00109b1:	8d 76 00             	lea    esi,[esi+0x0]
c00109b4:	83 ec 08             	sub    esp,0x8
c00109b7:	6a 00                	push   0x0
c00109b9:	68 90 01 00 00       	push   0x190
c00109be:	e8 65 5e 00 00       	call   c0016828 <milliTenthSleep(unsigned long long)>
c00109c3:	83 c4 10             	add    esp,0x10
c00109c6:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c00109cb:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c00109d0:	e9 73 ff ff ff       	jmp    c0010948 <Semaphore::acquire(int)+0x1c>
c00109d5:	8d 76 00             	lea    esi,[esi+0x0]
c00109d8:	90                   	nop
c00109d9:	8d 76 00             	lea    esi,[esi+0x0]
c00109dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109e0:	e9 fb 00 00 00       	jmp    c0010ae0 <Semaphore::acquire(int)+0x1b4>
c00109e5:	8d 76 00             	lea    esi,[esi+0x0]
c00109e8:	fa                   	cli    
c00109e9:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00109ee:	83 c0 01             	add    eax,0x1
c00109f1:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c00109f6:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c00109fb:	83 c0 01             	add    eax,0x1
c00109fe:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a07:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010a0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a10:	39 c2                	cmp    edx,eax
c0010a12:	7d 14                	jge    c0010a28 <Semaphore::acquire(int)+0xfc>
c0010a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010a1b:	8d 50 01             	lea    edx,[eax+0x1]
c0010a1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a22:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a25:	eb 6d                	jmp    c0010a94 <Semaphore::acquire(int)+0x168>
c0010a27:	90                   	nop
c0010a28:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010a2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a2f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010a36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a3d:	85 c0                	test   eax,eax
c0010a3f:	75 13                	jne    c0010a54 <Semaphore::acquire(int)+0x128>
c0010a41:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010a46:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a4c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a4f:	eb 17                	jmp    c0010a68 <Semaphore::acquire(int)+0x13c>
c0010a51:	8d 76 00             	lea    esi,[esi+0x0]
c0010a54:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010a59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a5d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010a60:	8b 12                	mov    edx,DWORD PTR [edx]
c0010a62:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010a65:	8d 76 00             	lea    esi,[esi+0x0]
c0010a68:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010a6d:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a73:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010a76:	83 ec 0c             	sub    esp,0xc
c0010a79:	68 ec 47 02 c0       	push   0xc00247ec
c0010a7e:	e8 e3 64 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010a83:	83 c4 10             	add    esp,0x10
c0010a86:	83 ec 0c             	sub    esp,0xc
c0010a89:	6a 05                	push   0x5
c0010a8b:	e8 64 5c 00 00       	call   c00166f4 <blockTask(TaskState)>
c0010a90:	83 c4 10             	add    esp,0x10
c0010a93:	90                   	nop
c0010a94:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010a99:	83 e8 01             	sub    eax,0x1
c0010a9c:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010aa1:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010aa6:	85 c0                	test   eax,eax
c0010aa8:	75 1a                	jne    c0010ac4 <Semaphore::acquire(int)+0x198>
c0010aaa:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c0010aaf:	85 c0                	test   eax,eax
c0010ab1:	74 11                	je     c0010ac4 <Semaphore::acquire(int)+0x198>
c0010ab3:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c0010abd:	e8 72 5b 00 00       	call   c0016634 <schedule()>
c0010ac2:	66 90                	xchg   ax,ax
c0010ac4:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0010acc:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0010ad1:	85 c0                	test   eax,eax
c0010ad3:	75 03                	jne    c0010ad8 <Semaphore::acquire(int)+0x1ac>
c0010ad5:	fb                   	sti    
c0010ad6:	66 90                	xchg   ax,ax
c0010ad8:	b8 00 00 00 00       	mov    eax,0x0
c0010add:	8d 76 00             	lea    esi,[esi+0x0]
c0010ae0:	83 c4 1c             	add    esp,0x1c
c0010ae3:	c3                   	ret    

c0010ae4 <Semaphore::acquire()>:
c0010ae4:	83 ec 0c             	sub    esp,0xc
c0010ae7:	83 ec 08             	sub    esp,0x8
c0010aea:	6a 00                	push   0x0
c0010aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af0:	e8 37 fe ff ff       	call   c001092c <Semaphore::acquire(int)>
c0010af5:	83 c4 10             	add    esp,0x10
c0010af8:	90                   	nop
c0010af9:	83 c4 0c             	add    esp,0xc
c0010afc:	c3                   	ret    
c0010afd:	90                   	nop
c0010afe:	66 90                	xchg   ax,ax

c0010b00 <Semaphore::release()>:
c0010b00:	83 ec 1c             	sub    esp,0x1c
c0010b03:	fa                   	cli    
c0010b04:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0010b09:	83 c0 01             	add    eax,0x1
c0010b0c:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0010b11:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010b16:	83 c0 01             	add    eax,0x1
c0010b19:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010b1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b25:	85 c0                	test   eax,eax
c0010b27:	74 2b                	je     c0010b54 <Semaphore::release()+0x54>
c0010b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b38:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010b3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b42:	83 ec 0c             	sub    esp,0xc
c0010b45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010b49:	e8 3e 5e 00 00       	call   c001698c <unblockTask(ThreadControlBlock*)>
c0010b4e:	83 c4 10             	add    esp,0x10
c0010b51:	eb 15                	jmp    c0010b68 <Semaphore::release()+0x68>
c0010b53:	90                   	nop
c0010b54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b58:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010b5b:	8d 50 ff             	lea    edx,[eax-0x1]
c0010b5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b62:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b65:	8d 76 00             	lea    esi,[esi+0x0]
c0010b68:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010b6d:	83 e8 01             	sub    eax,0x1
c0010b70:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0010b75:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0010b7a:	85 c0                	test   eax,eax
c0010b7c:	75 1a                	jne    c0010b98 <Semaphore::release()+0x98>
c0010b7e:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c0010b83:	85 c0                	test   eax,eax
c0010b85:	74 11                	je     c0010b98 <Semaphore::release()+0x98>
c0010b87:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c0010b91:	e8 9e 5a 00 00       	call   c0016634 <schedule()>
c0010b96:	66 90                	xchg   ax,ax
c0010b98:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0010ba0:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0010ba5:	85 c0                	test   eax,eax
c0010ba7:	75 03                	jne    c0010bac <Semaphore::release()+0xac>
c0010ba9:	fb                   	sti    
c0010baa:	66 90                	xchg   ax,ax
c0010bac:	90                   	nop
c0010bad:	83 c4 1c             	add    esp,0x1c
c0010bb0:	c3                   	ret    

c0010bb1 <KiSigKill(int)>:
c0010bb1:	83 ec 0c             	sub    esp,0xc
c0010bb4:	6a 00                	push   0x0
c0010bb6:	6a 00                	push   0x0
c0010bb8:	6a ff                	push   0xffffffff
c0010bba:	6a 01                	push   0x1
c0010bbc:	e8 91 74 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bc1:	83 c4 1c             	add    esp,0x1c
c0010bc4:	c3                   	ret    

c0010bc5 <KiDefaultSignalHandlerIgnore(int)>:
c0010bc5:	c3                   	ret    

c0010bc6 <KiDefaultSignalHandlerPause(int)>:
c0010bc6:	57                   	push   edi
c0010bc7:	b9 07 00 00 00       	mov    ecx,0x7
c0010bcc:	56                   	push   esi
c0010bcd:	be 47 48 02 c0       	mov    esi,0xc0024847
c0010bd2:	83 ec 24             	sub    esp,0x24
c0010bd5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010bd9:	fc                   	cld    
c0010bda:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010bdc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010be0:	50                   	push   eax
c0010be1:	6a 00                	push   0x0
c0010be3:	6a 00                	push   0x0
c0010be5:	6a 27                	push   0x27
c0010be7:	e8 66 74 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bec:	83 c4 34             	add    esp,0x34
c0010bef:	5e                   	pop    esi
c0010bf0:	5f                   	pop    edi
c0010bf1:	c3                   	ret    

c0010bf2 <KiDefaultSignalHandlerResume(int)>:
c0010bf2:	57                   	push   edi
c0010bf3:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010bf8:	56                   	push   esi
c0010bf9:	be 63 48 02 c0       	mov    esi,0xc0024863
c0010bfe:	83 ec 24             	sub    esp,0x24
c0010c01:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010c05:	fc                   	cld    
c0010c06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c08:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010c0c:	50                   	push   eax
c0010c0d:	6a 00                	push   0x0
c0010c0f:	6a 00                	push   0x0
c0010c11:	6a 27                	push   0x27
c0010c13:	e8 3a 74 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c18:	83 c4 34             	add    esp,0x34
c0010c1b:	5e                   	pop    esi
c0010c1c:	5f                   	pop    edi
c0010c1d:	c3                   	ret    

c0010c1e <KeDeinitSignals(SigHandlerBlock*)>:
c0010c1e:	e9 55 ea ff ff       	jmp    c000f678 <free>

c0010c23 <KeInitSignals()>:
c0010c23:	53                   	push   ebx
c0010c24:	83 ec 14             	sub    esp,0x14
c0010c27:	68 c8 00 00 00       	push   0xc8
c0010c2c:	e8 37 ea ff ff       	call   c000f668 <malloc>
c0010c31:	83 c4 0c             	add    esp,0xc
c0010c34:	6a 04                	push   0x4
c0010c36:	6a 00                	push   0x0
c0010c38:	50                   	push   eax
c0010c39:	89 c3                	mov    ebx,eax
c0010c3b:	e8 b0 f8 fe ff       	call   c00004f0 <memset>
c0010c40:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010c46:	83 c4 0c             	add    esp,0xc
c0010c49:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010c53:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0010c5d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010c64:	6a 20                	push   0x20
c0010c66:	6a 00                	push   0x0
c0010c68:	50                   	push   eax
c0010c69:	e8 82 f8 fe ff       	call   c00004f0 <memset>
c0010c6e:	83 c4 0c             	add    esp,0xc
c0010c71:	6a 44                	push   0x44
c0010c73:	6a 00                	push   0x0
c0010c75:	53                   	push   ebx
c0010c76:	e8 75 f8 fe ff       	call   c00004f0 <memset>
c0010c7b:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0010c81:	83 c4 0c             	add    esp,0xc
c0010c84:	6a 11                	push   0x11
c0010c86:	6a 00                	push   0x0
c0010c88:	50                   	push   eax
c0010c89:	e8 62 f8 fe ff       	call   c00004f0 <memset>
c0010c8e:	83 c4 18             	add    esp,0x18
c0010c91:	89 d8                	mov    eax,ebx
c0010c93:	5b                   	pop    ebx
c0010c94:	c3                   	ret    

c0010c95 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010c95:	53                   	push   ebx
c0010c96:	b8 01 00 00 00       	mov    eax,0x1
c0010c9b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ca3:	83 f9 10             	cmp    ecx,0x10
c0010ca6:	7f 21                	jg     c0010cc9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cac:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010caf:	89 03                	mov    DWORD PTR [ebx],eax
c0010cb1:	b8 01 00 00 00       	mov    eax,0x1
c0010cb6:	d3 e0                	shl    eax,cl
c0010cb8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010cbc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010cbf:	31 c0                	xor    eax,eax
c0010cc1:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010cc9:	5b                   	pop    ebx
c0010cca:	c3                   	ret    

c0010ccb <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010ccb:	55                   	push   ebp
c0010ccc:	57                   	push   edi
c0010ccd:	bf 08 00 00 00       	mov    edi,0x8
c0010cd2:	56                   	push   esi
c0010cd3:	53                   	push   ebx
c0010cd4:	83 ec 14             	sub    esp,0x14
c0010cd7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010cdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cdf:	68 80 48 02 c0       	push   0xc0024880
c0010ce4:	e8 7d 62 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010ce9:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010cef:	83 c4 10             	add    esp,0x10
c0010cf2:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010cf9:	31 c9                	xor    ecx,ecx
c0010cfb:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010cff:	99                   	cdq    
c0010d00:	f7 ff                	idiv   edi
c0010d02:	8d 42 24             	lea    eax,[edx+0x24]
c0010d05:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010d09:	85 f6                	test   esi,esi
c0010d0b:	75 1a                	jne    c0010d27 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0010d0d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d11:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0010d15:	50                   	push   eax
c0010d16:	50                   	push   eax
c0010d17:	52                   	push   edx
c0010d18:	68 96 48 02 c0       	push   0xc0024896
c0010d1d:	e8 44 62 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010d22:	83 c4 10             	add    esp,0x10
c0010d25:	eb 1b                	jmp    c0010d42 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0010d27:	41                   	inc    ecx
c0010d28:	83 f9 08             	cmp    ecx,0x8
c0010d2b:	75 ce                	jne    c0010cfb <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0010d2d:	83 ec 0c             	sub    esp,0xc
c0010d30:	be 01 00 00 00       	mov    esi,0x1
c0010d35:	68 b7 48 02 c0       	push   0xc00248b7
c0010d3a:	e8 27 62 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010d3f:	83 c4 10             	add    esp,0x10
c0010d42:	83 c4 0c             	add    esp,0xc
c0010d45:	89 f0                	mov    eax,esi
c0010d47:	5b                   	pop    ebx
c0010d48:	5e                   	pop    esi
c0010d49:	5f                   	pop    edi
c0010d4a:	5d                   	pop    ebp
c0010d4b:	c3                   	ret    

c0010d4c <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d4c:	55                   	push   ebp
c0010d4d:	57                   	push   edi
c0010d4e:	56                   	push   esi
c0010d4f:	53                   	push   ebx
c0010d50:	83 ec 1c             	sub    esp,0x1c
c0010d53:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d57:	85 db                	test   ebx,ebx
c0010d59:	0f 84 e0 00 00 00    	je     c0010e3f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010d5f:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d66:	0f 84 d3 00 00 00    	je     c0010e3f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010d6c:	31 c9                	xor    ecx,ecx
c0010d6e:	bf 08 00 00 00       	mov    edi,0x8
c0010d73:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010d79:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010d7c:	99                   	cdq    
c0010d7d:	f7 ff                	idiv   edi
c0010d7f:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010d86:	85 ed                	test   ebp,ebp
c0010d88:	0f 84 d2 00 00 00    	je     c0010e60 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c0010d8e:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010d94:	89 e9                	mov    ecx,ebp
c0010d96:	bf 01 00 00 00       	mov    edi,0x1
c0010d9b:	d3 e7                	shl    edi,cl
c0010d9d:	31 c9                	xor    ecx,ecx
c0010d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010da3:	b8 01 00 00 00       	mov    eax,0x1
c0010da8:	d3 e0                	shl    eax,cl
c0010daa:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c0010dae:	74 0a                	je     c0010dba <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0010db0:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010db4:	0f 85 85 00 00 00    	jne    c0010e3f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010dba:	41                   	inc    ecx
c0010dbb:	83 f9 11             	cmp    ecx,0x11
c0010dbe:	75 e3                	jne    c0010da3 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0010dc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010dc4:	46                   	inc    esi
c0010dc5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010dcb:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010dd6:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010ddd:	09 f8                	or     eax,edi
c0010ddf:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010de5:	31 c0                	xor    eax,eax
c0010de7:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010def:	74 09                	je     c0010dfa <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0010df1:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010df8:	eb 06                	jmp    c0010e00 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c0010dfa:	40                   	inc    eax
c0010dfb:	83 f8 08             	cmp    eax,0x8
c0010dfe:	75 e7                	jne    c0010de7 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0010e00:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010e04:	83 fd 09             	cmp    ebp,0x9
c0010e07:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010e0a:	89 2a                	mov    DWORD PTR [edx],ebp
c0010e0c:	75 14                	jne    c0010e22 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010e0e:	83 ec 0c             	sub    esp,0xc
c0010e11:	68 c8 48 02 c0       	push   0xc00248c8
c0010e16:	e8 4b 61 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010e1b:	b8 b1 0b 01 c0       	mov    eax,0xc0010bb1
c0010e20:	eb 39                	jmp    c0010e5b <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0010e22:	83 f8 01             	cmp    eax,0x1
c0010e25:	75 1c                	jne    c0010e43 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0010e27:	83 ec 0c             	sub    esp,0xc
c0010e2a:	f7 d7                	not    edi
c0010e2c:	68 d2 48 02 c0       	push   0xc00248d2
c0010e31:	e8 30 61 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010e36:	83 c4 10             	add    esp,0x10
c0010e39:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010e3f:	31 c0                	xor    eax,eax
c0010e41:	eb 30                	jmp    c0010e73 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0010e43:	85 c0                	test   eax,eax
c0010e45:	75 2c                	jne    c0010e73 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0010e47:	83 ec 0c             	sub    esp,0xc
c0010e4a:	68 df 48 02 c0       	push   0xc00248df
c0010e4f:	e8 12 61 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010e54:	8b 04 ad a0 6b 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd9460]
c0010e5b:	83 c4 10             	add    esp,0x10
c0010e5e:	eb 13                	jmp    c0010e73 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0010e60:	41                   	inc    ecx
c0010e61:	46                   	inc    esi
c0010e62:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010e68:	83 f9 08             	cmp    ecx,0x8
c0010e6b:	0f 85 02 ff ff ff    	jne    c0010d73 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0010e71:	eb cc                	jmp    c0010e3f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010e73:	83 c4 1c             	add    esp,0x1c
c0010e76:	5b                   	pop    ebx
c0010e77:	5e                   	pop    esi
c0010e78:	5f                   	pop    edi
c0010e79:	5d                   	pop    ebp
c0010e7a:	c3                   	ret    

c0010e7b <KiCheckSignalZ>:
c0010e7b:	80 3d 0c d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d10c,0x0
c0010e82:	74 43                	je     c0010ec7 <KiCheckSignalZ+0x4c>
c0010e84:	83 ec 24             	sub    esp,0x24
c0010e87:	8d 44 24 14          	lea    eax,[esp+0x14]
c0010e8b:	50                   	push   eax
c0010e8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e91:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e94:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0010e9a:	e8 ad fe ff ff       	call   c0010d4c <KeCheckSignal(SigHandlerBlock*, int*)>
c0010e9f:	83 c4 10             	add    esp,0x10
c0010ea2:	31 d2                	xor    edx,edx
c0010ea4:	85 c0                	test   eax,eax
c0010ea6:	74 19                	je     c0010ec1 <KiCheckSignalZ+0x46>
c0010ea8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010eae:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010eb1:	89 02                	mov    DWORD PTR [edx],eax
c0010eb3:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010eba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ebe:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010ec1:	89 d0                	mov    eax,edx
c0010ec3:	83 c4 1c             	add    esp,0x1c
c0010ec6:	c3                   	ret    
c0010ec7:	31 d2                	xor    edx,edx
c0010ec9:	89 d0                	mov    eax,edx
c0010ecb:	c3                   	ret    

c0010ecc <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010ecc:	56                   	push   esi
c0010ecd:	53                   	push   ebx
c0010ece:	bb 01 00 00 00       	mov    ebx,0x1
c0010ed3:	52                   	push   edx
c0010ed4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010ed8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010edc:	d3 e3                	shl    ebx,cl
c0010ede:	83 f9 10             	cmp    ecx,0x10
c0010ee1:	7f 08                	jg     c0010eeb <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010ee3:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010ee9:	75 10                	jne    c0010efb <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010eeb:	83 ec 0c             	sub    esp,0xc
c0010eee:	68 02 49 02 c0       	push   0xc0024902
c0010ef3:	e8 c4 eb ff ff       	call   c000fabc <KePanic(char const*)>
c0010ef8:	83 c4 10             	add    esp,0x10
c0010efb:	f7 d3                	not    ebx
c0010efd:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010f03:	58                   	pop    eax
c0010f04:	5b                   	pop    ebx
c0010f05:	5e                   	pop    esi
c0010f06:	c3                   	ret    

c0010f07 <KiFinishSignalZ>:
c0010f07:	53                   	push   ebx
c0010f08:	83 ec 08             	sub    esp,0x8
c0010f0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f14:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0010f17:	83 fa 08             	cmp    edx,0x8
c0010f1a:	75 0c                	jne    c0010f28 <KiFinishSignalZ+0x21>
c0010f1c:	83 ec 0c             	sub    esp,0xc
c0010f1f:	50                   	push   eax
c0010f20:	e8 67 5a 00 00       	call   c001698c <unblockTask(ThreadControlBlock*)>
c0010f25:	83 c4 10             	add    esp,0x10
c0010f28:	50                   	push   eax
c0010f29:	50                   	push   eax
c0010f2a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010f2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f35:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0010f3b:	e8 8c ff ff ff       	call   c0010ecc <KeCompleteSignal(SigHandlerBlock*, int)>
c0010f40:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010f46:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010f4d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010f54:	83 c4 18             	add    esp,0x18
c0010f57:	5b                   	pop    ebx
c0010f58:	c3                   	ret    

c0010f59 <SysSeekDir(regs*)>:
c0010f59:	31 c0                	xor    eax,eax
c0010f5b:	31 d2                	xor    edx,edx
c0010f5d:	c3                   	ret    

c0010f5e <SysTellDir(regs*)>:
c0010f5e:	31 c0                	xor    eax,eax
c0010f60:	31 d2                	xor    edx,edx
c0010f62:	c3                   	ret    

c0010f63 <SysVerify(regs*)>:
c0010f63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f67:	31 d2                	xor    edx,edx
c0010f69:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f6c:	c3                   	ret    

c0010f6d <SysGetArgc(regs*)>:
c0010f6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f72:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f75:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c0010f7b:	89 c2                	mov    edx,eax
c0010f7d:	c1 fa 1f             	sar    edx,0x1f
c0010f80:	c3                   	ret    

c0010f81 <SysTTYName(regs*)>:
c0010f81:	b8 01 00 00 00       	mov    eax,0x1
c0010f86:	31 d2                	xor    edx,edx
c0010f88:	c3                   	ret    

c0010f89 <SysFormatDisk(regs*)>:
c0010f89:	56                   	push   esi
c0010f8a:	53                   	push   ebx
c0010f8b:	83 ec 04             	sub    esp,0x4
c0010f8e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f92:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c0010f98:	eb 2a                	jmp    c0010fc4 <SysFormatDisk(regs*)+0x3b>
c0010f9a:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010f9d:	83 ec 0c             	sub    esp,0xc
c0010fa0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010fa3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010fa5:	51                   	push   ecx
c0010fa6:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010fa9:	51                   	push   ecx
c0010faa:	50                   	push   eax
c0010fab:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0010fb2:	50                   	push   eax
c0010fb3:	53                   	push   ebx
c0010fb4:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0010fb7:	83 c4 20             	add    esp,0x20
c0010fba:	83 f8 08             	cmp    eax,0x8
c0010fbd:	89 c1                	mov    ecx,eax
c0010fbf:	75 14                	jne    c0010fd5 <SysFormatDisk(regs*)+0x4c>
c0010fc1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010fc4:	85 db                	test   ebx,ebx
c0010fc6:	75 d2                	jne    c0010f9a <SysFormatDisk(regs*)+0x11>
c0010fc8:	b8 03 00 00 00       	mov    eax,0x3
c0010fcd:	31 d2                	xor    edx,edx
c0010fcf:	83 c4 04             	add    esp,0x4
c0010fd2:	5b                   	pop    ebx
c0010fd3:	5e                   	pop    esi
c0010fd4:	c3                   	ret    
c0010fd5:	85 c0                	test   eax,eax
c0010fd7:	74 13                	je     c0010fec <SysFormatDisk(regs*)+0x63>
c0010fd9:	31 d2                	xor    edx,edx
c0010fdb:	83 f9 09             	cmp    ecx,0x9
c0010fde:	b8 01 00 00 00       	mov    eax,0x1
c0010fe3:	74 ea                	je     c0010fcf <SysFormatDisk(regs*)+0x46>
c0010fe5:	b8 02 00 00 00       	mov    eax,0x2
c0010fea:	eb e1                	jmp    c0010fcd <SysFormatDisk(regs*)+0x44>
c0010fec:	31 c0                	xor    eax,eax
c0010fee:	eb dd                	jmp    c0010fcd <SysFormatDisk(regs*)+0x44>

c0010ff0 <SysSetDiskVolumeLabel(regs*)>:
c0010ff0:	56                   	push   esi
c0010ff1:	53                   	push   ebx
c0010ff2:	83 ec 04             	sub    esp,0x4
c0010ff5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010ff9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010ffc:	83 f8 19             	cmp    eax,0x19
c0010fff:	77 33                	ja     c0011034 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011001:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c0011008:	85 c9                	test   ecx,ecx
c001100a:	74 28                	je     c0011034 <SysSetDiskVolumeLabel(regs*)+0x44>
c001100c:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001100f:	85 db                	test   ebx,ebx
c0011011:	74 21                	je     c0011034 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011013:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011019:	85 d2                	test   edx,edx
c001101b:	74 17                	je     c0011034 <SysSetDiskVolumeLabel(regs*)+0x44>
c001101d:	8b 32                	mov    esi,DWORD PTR [edx]
c001101f:	53                   	push   ebx
c0011020:	50                   	push   eax
c0011021:	51                   	push   ecx
c0011022:	52                   	push   edx
c0011023:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011026:	83 c4 10             	add    esp,0x10
c0011029:	83 c4 04             	add    esp,0x4
c001102c:	5b                   	pop    ebx
c001102d:	5e                   	pop    esi
c001102e:	89 c2                	mov    edx,eax
c0011030:	c1 fa 1f             	sar    edx,0x1f
c0011033:	c3                   	ret    
c0011034:	83 c4 04             	add    esp,0x4
c0011037:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001103c:	5b                   	pop    ebx
c001103d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011042:	5e                   	pop    esi
c0011043:	c3                   	ret    

c0011044 <SysGetDiskVolumeLabel(regs*)>:
c0011044:	57                   	push   edi
c0011045:	56                   	push   esi
c0011046:	53                   	push   ebx
c0011047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001104b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001104e:	83 fa 19             	cmp    edx,0x19
c0011051:	77 3c                	ja     c001108f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011053:	8b 0c 95 e0 ca 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3520]
c001105a:	85 c9                	test   ecx,ecx
c001105c:	74 31                	je     c001108f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001105e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011061:	85 db                	test   ebx,ebx
c0011063:	74 2a                	je     c001108f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011065:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011068:	85 f6                	test   esi,esi
c001106a:	74 23                	je     c001108f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001106c:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011072:	85 c0                	test   eax,eax
c0011074:	74 19                	je     c001108f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011076:	83 ec 0c             	sub    esp,0xc
c0011079:	8b 38                	mov    edi,DWORD PTR [eax]
c001107b:	56                   	push   esi
c001107c:	53                   	push   ebx
c001107d:	52                   	push   edx
c001107e:	51                   	push   ecx
c001107f:	50                   	push   eax
c0011080:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011083:	83 c4 20             	add    esp,0x20
c0011086:	5b                   	pop    ebx
c0011087:	5e                   	pop    esi
c0011088:	89 c2                	mov    edx,eax
c001108a:	c1 fa 1f             	sar    edx,0x1f
c001108d:	5f                   	pop    edi
c001108e:	c3                   	ret    
c001108f:	5b                   	pop    ebx
c0011090:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011095:	ba ff ff ff ff       	mov    edx,0xffffffff
c001109a:	5e                   	pop    esi
c001109b:	5f                   	pop    edi
c001109c:	c3                   	ret    

c001109d <SysRealpath(regs*)>:
c001109d:	53                   	push   ebx
c001109e:	83 ec 08             	sub    esp,0x8
c00110a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00110a8:	85 c9                	test   ecx,ecx
c00110aa:	74 36                	je     c00110e2 <SysRealpath(regs*)+0x45>
c00110ac:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00110af:	31 d2                	xor    edx,edx
c00110b1:	b8 01 00 00 00       	mov    eax,0x1
c00110b6:	85 db                	test   ebx,ebx
c00110b8:	75 05                	jne    c00110bf <SysRealpath(regs*)+0x22>
c00110ba:	83 c4 08             	add    esp,0x8
c00110bd:	5b                   	pop    ebx
c00110be:	c3                   	ret    
c00110bf:	6a 00                	push   0x0
c00110c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110c9:	05 0c 01 00 00       	add    eax,0x10c
c00110ce:	50                   	push   eax
c00110cf:	51                   	push   ecx
c00110d0:	53                   	push   ebx
c00110d1:	e8 86 6d ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00110d6:	83 c4 10             	add    esp,0x10
c00110d9:	31 c0                	xor    eax,eax
c00110db:	31 d2                	xor    edx,edx
c00110dd:	83 c4 08             	add    esp,0x8
c00110e0:	5b                   	pop    ebx
c00110e1:	c3                   	ret    
c00110e2:	b8 01 00 00 00       	mov    eax,0x1
c00110e7:	31 d2                	xor    edx,edx
c00110e9:	eb f2                	jmp    c00110dd <SysRealpath(regs*)+0x40>

c00110eb <SysReadDir(regs*)>:
c00110eb:	53                   	push   ebx
c00110ec:	83 ec 18             	sub    esp,0x18
c00110ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00110f3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00110f6:	83 f8 02             	cmp    eax,0x2
c00110f9:	76 4f                	jbe    c001114a <SysReadDir(regs*)+0x5f>
c00110fb:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011102:	77 52                	ja     c0011156 <SysReadDir(regs*)+0x6b>
c0011104:	83 ec 0c             	sub    esp,0xc
c0011107:	50                   	push   eax
c0011108:	e8 98 1d 00 00       	call   c0012ea5 <KeGetFileFromDescriptor(int)>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	85 c0                	test   eax,eax
c0011112:	74 42                	je     c0011156 <SysReadDir(regs*)+0x6b>
c0011114:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001111c:	83 ec 0c             	sub    esp,0xc
c001111f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011123:	8b 10                	mov    edx,DWORD PTR [eax]
c0011125:	51                   	push   ecx
c0011126:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011129:	51                   	push   ecx
c001112a:	6a 00                	push   0x0
c001112c:	68 10 01 00 00       	push   0x110
c0011131:	50                   	push   eax
c0011132:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011135:	83 c4 20             	add    esp,0x20
c0011138:	85 c0                	test   eax,eax
c001113a:	89 c1                	mov    ecx,eax
c001113c:	74 27                	je     c0011165 <SysReadDir(regs*)+0x7a>
c001113e:	31 d2                	xor    edx,edx
c0011140:	83 f9 07             	cmp    ecx,0x7
c0011143:	b8 02 00 00 00       	mov    eax,0x2
c0011148:	75 16                	jne    c0011160 <SysReadDir(regs*)+0x75>
c001114a:	b8 01 00 00 00       	mov    eax,0x1
c001114f:	31 d2                	xor    edx,edx
c0011151:	83 c4 18             	add    esp,0x18
c0011154:	5b                   	pop    ebx
c0011155:	c3                   	ret    
c0011156:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001115b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011160:	83 c4 18             	add    esp,0x18
c0011163:	5b                   	pop    ebx
c0011164:	c3                   	ret    
c0011165:	31 c0                	xor    eax,eax
c0011167:	31 d2                	xor    edx,edx
c0011169:	eb e6                	jmp    c0011151 <SysReadDir(regs*)+0x66>

c001116b <SysIsATTY(regs*)>:
c001116b:	83 ec 0c             	sub    esp,0xc
c001116e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011172:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011175:	83 f8 02             	cmp    eax,0x2
c0011178:	76 07                	jbe    c0011181 <SysIsATTY(regs*)+0x16>
c001117a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001117f:	75 26                	jne    c00111a7 <SysIsATTY(regs*)+0x3c>
c0011181:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011186:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011189:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001118f:	85 c0                	test   eax,eax
c0011191:	74 24                	je     c00111b7 <SysIsATTY(regs*)+0x4c>
c0011193:	8b 10                	mov    edx,DWORD PTR [eax]
c0011195:	83 ec 0c             	sub    esp,0xc
c0011198:	50                   	push   eax
c0011199:	ff 12                	call   DWORD PTR [edx]
c001119b:	83 c4 10             	add    esp,0x10
c001119e:	31 d2                	xor    edx,edx
c00111a0:	83 c4 0c             	add    esp,0xc
c00111a3:	0f b6 c0             	movzx  eax,al
c00111a6:	c3                   	ret    
c00111a7:	83 ec 0c             	sub    esp,0xc
c00111aa:	50                   	push   eax
c00111ab:	e8 f5 1c 00 00       	call   c0012ea5 <KeGetFileFromDescriptor(int)>
c00111b0:	83 c4 10             	add    esp,0x10
c00111b3:	85 c0                	test   eax,eax
c00111b5:	75 dc                	jne    c0011193 <SysIsATTY(regs*)+0x28>
c00111b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111c1:	83 c4 0c             	add    esp,0xc
c00111c4:	c3                   	ret    

c00111c5 <SysSeek(regs*)>:
c00111c5:	53                   	push   ebx
c00111c6:	83 ec 08             	sub    esp,0x8
c00111c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111cd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111d0:	8d 50 fd             	lea    edx,[eax-0x3]
c00111d3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00111d9:	77 39                	ja     c0011214 <SysSeek(regs*)+0x4f>
c00111db:	83 ec 0c             	sub    esp,0xc
c00111de:	50                   	push   eax
c00111df:	e8 c1 1c 00 00       	call   c0012ea5 <KeGetFileFromDescriptor(int)>
c00111e4:	83 c4 10             	add    esp,0x10
c00111e7:	85 c0                	test   eax,eax
c00111e9:	74 29                	je     c0011214 <SysSeek(regs*)+0x4f>
c00111eb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00111ee:	83 ec 04             	sub    esp,0x4
c00111f1:	31 db                	xor    ebx,ebx
c00111f3:	53                   	push   ebx
c00111f4:	51                   	push   ecx
c00111f5:	50                   	push   eax
c00111f6:	e8 69 70 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00111fb:	83 c4 10             	add    esp,0x10
c00111fe:	85 c0                	test   eax,eax
c0011200:	0f 95 c0             	setne  al
c0011203:	31 d2                	xor    edx,edx
c0011205:	0f b6 c0             	movzx  eax,al
c0011208:	f7 d8                	neg    eax
c001120a:	83 d2 00             	adc    edx,0x0
c001120d:	83 c4 08             	add    esp,0x8
c0011210:	5b                   	pop    ebx
c0011211:	f7 da                	neg    edx
c0011213:	c3                   	ret    
c0011214:	83 c4 08             	add    esp,0x8
c0011217:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001121c:	5b                   	pop    ebx
c001121d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011222:	c3                   	ret    

c0011223 <SysTell(regs*)>:
c0011223:	53                   	push   ebx
c0011224:	83 ec 08             	sub    esp,0x8
c0011227:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001122b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001122e:	83 f8 02             	cmp    eax,0x2
c0011231:	76 56                	jbe    c0011289 <SysTell(regs*)+0x66>
c0011233:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011238:	76 19                	jbe    c0011253 <SysTell(regs*)+0x30>
c001123a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001123d:	31 d2                	xor    edx,edx
c001123f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011245:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001124c:	83 c4 08             	add    esp,0x8
c001124f:	31 c0                	xor    eax,eax
c0011251:	5b                   	pop    ebx
c0011252:	c3                   	ret    
c0011253:	83 ec 0c             	sub    esp,0xc
c0011256:	50                   	push   eax
c0011257:	e8 49 1c 00 00       	call   c0012ea5 <KeGetFileFromDescriptor(int)>
c001125c:	83 c4 10             	add    esp,0x10
c001125f:	85 c0                	test   eax,eax
c0011261:	74 26                	je     c0011289 <SysTell(regs*)+0x66>
c0011263:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011266:	83 ec 08             	sub    esp,0x8
c0011269:	52                   	push   edx
c001126a:	50                   	push   eax
c001126b:	e8 a0 70 ff ff       	call   c0008310 <File::tell(unsigned long long*)>
c0011270:	83 c4 10             	add    esp,0x10
c0011273:	85 c0                	test   eax,eax
c0011275:	0f 95 c0             	setne  al
c0011278:	31 d2                	xor    edx,edx
c001127a:	0f b6 c0             	movzx  eax,al
c001127d:	f7 d8                	neg    eax
c001127f:	83 d2 00             	adc    edx,0x0
c0011282:	83 c4 08             	add    esp,0x8
c0011285:	5b                   	pop    ebx
c0011286:	f7 da                	neg    edx
c0011288:	c3                   	ret    
c0011289:	83 c4 08             	add    esp,0x8
c001128c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011291:	5b                   	pop    ebx
c0011292:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011297:	c3                   	ret    

c0011298 <SysSize(regs*)>:
c0011298:	53                   	push   ebx
c0011299:	83 ec 18             	sub    esp,0x18
c001129c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112a3:	83 f8 02             	cmp    eax,0x2
c00112a6:	76 5b                	jbe    c0011303 <SysSize(regs*)+0x6b>
c00112a8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112ad:	76 19                	jbe    c00112c8 <SysSize(regs*)+0x30>
c00112af:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112b2:	31 d2                	xor    edx,edx
c00112b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112c1:	83 c4 18             	add    esp,0x18
c00112c4:	31 c0                	xor    eax,eax
c00112c6:	5b                   	pop    ebx
c00112c7:	c3                   	ret    
c00112c8:	83 ec 0c             	sub    esp,0xc
c00112cb:	50                   	push   eax
c00112cc:	e8 d4 1b 00 00       	call   c0012ea5 <KeGetFileFromDescriptor(int)>
c00112d1:	83 c4 10             	add    esp,0x10
c00112d4:	85 c0                	test   eax,eax
c00112d6:	74 2b                	je     c0011303 <SysSize(regs*)+0x6b>
c00112d8:	83 ec 04             	sub    esp,0x4
c00112db:	8d 54 24 13          	lea    edx,[esp+0x13]
c00112df:	52                   	push   edx
c00112e0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00112e3:	52                   	push   edx
c00112e4:	50                   	push   eax
c00112e5:	e8 be 71 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00112ea:	83 c4 10             	add    esp,0x10
c00112ed:	85 c0                	test   eax,eax
c00112ef:	0f 95 c0             	setne  al
c00112f2:	31 d2                	xor    edx,edx
c00112f4:	0f b6 c0             	movzx  eax,al
c00112f7:	f7 d8                	neg    eax
c00112f9:	83 d2 00             	adc    edx,0x0
c00112fc:	83 c4 18             	add    esp,0x18
c00112ff:	5b                   	pop    ebx
c0011300:	f7 da                	neg    edx
c0011302:	c3                   	ret    
c0011303:	83 c4 18             	add    esp,0x18
c0011306:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001130b:	5b                   	pop    ebx
c001130c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011311:	c3                   	ret    

c0011312 <SysSizeFromFilename(regs*)>:
c0011312:	55                   	push   ebp
c0011313:	57                   	push   edi
c0011314:	56                   	push   esi
c0011315:	53                   	push   ebx
c0011316:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001131c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011323:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011326:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011329:	85 f6                	test   esi,esi
c001132b:	89 f8                	mov    eax,edi
c001132d:	74 09                	je     c0011338 <SysSizeFromFilename(regs*)+0x26>
c001132f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011335:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011338:	83 f8 02             	cmp    eax,0x2
c001133b:	0f 86 c9 00 00 00    	jbe    c001140a <SysSizeFromFilename(regs*)+0xf8>
c0011341:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011346:	76 1f                	jbe    c0011367 <SysSizeFromFilename(regs*)+0x55>
c0011348:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001134b:	31 d2                	xor    edx,edx
c001134d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011353:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001135a:	31 c0                	xor    eax,eax
c001135c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011362:	5b                   	pop    ebx
c0011363:	5e                   	pop    esi
c0011364:	5f                   	pop    edi
c0011365:	5d                   	pop    ebp
c0011366:	c3                   	ret    
c0011367:	83 ec 0c             	sub    esp,0xc
c001136a:	68 14 01 00 00       	push   0x114
c001136f:	e8 f4 e2 ff ff       	call   c000f668 <malloc>
c0011374:	6a 01                	push   0x1
c0011376:	89 c5                	mov    ebp,eax
c0011378:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001137d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011380:	50                   	push   eax
c0011381:	57                   	push   edi
c0011382:	55                   	push   ebp
c0011383:	e8 02 6d ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c0011388:	83 c4 20             	add    esp,0x20
c001138b:	85 ed                	test   ebp,ebp
c001138d:	74 7b                	je     c001140a <SysSizeFromFilename(regs*)+0xf8>
c001138f:	83 ec 04             	sub    esp,0x4
c0011392:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011396:	50                   	push   eax
c0011397:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001139a:	51                   	push   ecx
c001139b:	55                   	push   ebp
c001139c:	e8 07 71 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00113a1:	89 c3                	mov    ebx,eax
c00113a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00113a6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00113a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113ac:	83 c4 10             	add    esp,0x10
c00113af:	85 db                	test   ebx,ebx
c00113b1:	75 57                	jne    c001140a <SysSizeFromFilename(regs*)+0xf8>
c00113b3:	6a 00                	push   0x0
c00113b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113bd:	05 0c 01 00 00       	add    eax,0x10c
c00113c2:	50                   	push   eax
c00113c3:	57                   	push   edi
c00113c4:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00113cb:	53                   	push   ebx
c00113cc:	e8 8b 6a ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00113d1:	58                   	pop    eax
c00113d2:	5a                   	pop    edx
c00113d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00113d7:	50                   	push   eax
c00113d8:	53                   	push   ebx
c00113d9:	e8 05 65 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c00113de:	83 c4 10             	add    esp,0x10
c00113e1:	ba 00 00 00 00       	mov    edx,0x0
c00113e6:	83 f8 01             	cmp    eax,0x1
c00113e9:	b8 00 00 00 00       	mov    eax,0x0
c00113ee:	74 2f                	je     c001141f <SysSizeFromFilename(regs*)+0x10d>
c00113f0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00113f5:	74 3b                	je     c0011432 <SysSizeFromFilename(regs*)+0x120>
c00113f7:	85 f6                	test   esi,esi
c00113f9:	0f 84 5d ff ff ff    	je     c001135c <SysSizeFromFilename(regs*)+0x4a>
c00113ff:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011405:	e9 52 ff ff ff       	jmp    c001135c <SysSizeFromFilename(regs*)+0x4a>
c001140a:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011410:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011415:	5b                   	pop    ebx
c0011416:	ba ff ff ff ff       	mov    edx,0xffffffff
c001141b:	5e                   	pop    esi
c001141c:	5f                   	pop    edi
c001141d:	5d                   	pop    ebp
c001141e:	c3                   	ret    
c001141f:	85 f6                	test   esi,esi
c0011421:	0f 84 35 ff ff ff    	je     c001135c <SysSizeFromFilename(regs*)+0x4a>
c0011427:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001142d:	e9 2a ff ff ff       	jmp    c001135c <SysSizeFromFilename(regs*)+0x4a>
c0011432:	85 f6                	test   esi,esi
c0011434:	0f 84 22 ff ff ff    	je     c001135c <SysSizeFromFilename(regs*)+0x4a>
c001143a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011440:	e9 17 ff ff ff       	jmp    c001135c <SysSizeFromFilename(regs*)+0x4a>

c0011445 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011445:	55                   	push   ebp
c0011446:	57                   	push   edi
c0011447:	56                   	push   esi
c0011448:	53                   	push   ebx
c0011449:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001144f:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011456:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011459:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001145c:	85 f6                	test   esi,esi
c001145e:	89 f8                	mov    eax,edi
c0011460:	74 09                	je     c001146b <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0011462:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011468:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001146b:	83 f8 02             	cmp    eax,0x2
c001146e:	0f 86 c9 00 00 00    	jbe    c001153d <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011474:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011479:	76 1f                	jbe    c001149a <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c001147b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001147e:	31 d2                	xor    edx,edx
c0011480:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011486:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001148d:	31 c0                	xor    eax,eax
c001148f:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011495:	5b                   	pop    ebx
c0011496:	5e                   	pop    esi
c0011497:	5f                   	pop    edi
c0011498:	5d                   	pop    ebp
c0011499:	c3                   	ret    
c001149a:	83 ec 0c             	sub    esp,0xc
c001149d:	68 14 01 00 00       	push   0x114
c00114a2:	e8 c1 e1 ff ff       	call   c000f668 <malloc>
c00114a7:	6a 00                	push   0x0
c00114a9:	89 c5                	mov    ebp,eax
c00114ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114b3:	50                   	push   eax
c00114b4:	57                   	push   edi
c00114b5:	55                   	push   ebp
c00114b6:	e8 cf 6b ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c00114bb:	83 c4 20             	add    esp,0x20
c00114be:	85 ed                	test   ebp,ebp
c00114c0:	74 7b                	je     c001153d <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00114c2:	83 ec 04             	sub    esp,0x4
c00114c5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00114c9:	50                   	push   eax
c00114ca:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00114cd:	51                   	push   ecx
c00114ce:	55                   	push   ebp
c00114cf:	e8 d4 6f ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00114d4:	89 c3                	mov    ebx,eax
c00114d6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00114d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00114dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114df:	83 c4 10             	add    esp,0x10
c00114e2:	85 db                	test   ebx,ebx
c00114e4:	75 57                	jne    c001153d <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00114e6:	6a 00                	push   0x0
c00114e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114f0:	05 0c 01 00 00       	add    eax,0x10c
c00114f5:	50                   	push   eax
c00114f6:	57                   	push   edi
c00114f7:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00114fe:	53                   	push   ebx
c00114ff:	e8 58 69 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011504:	58                   	pop    eax
c0011505:	5a                   	pop    edx
c0011506:	8d 44 24 18          	lea    eax,[esp+0x18]
c001150a:	50                   	push   eax
c001150b:	53                   	push   ebx
c001150c:	e8 d2 63 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c0011511:	83 c4 10             	add    esp,0x10
c0011514:	ba 00 00 00 00       	mov    edx,0x0
c0011519:	83 f8 01             	cmp    eax,0x1
c001151c:	b8 00 00 00 00       	mov    eax,0x0
c0011521:	74 2f                	je     c0011552 <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c0011523:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011528:	74 3b                	je     c0011565 <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c001152a:	85 f6                	test   esi,esi
c001152c:	0f 84 5d ff ff ff    	je     c001148f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011532:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011538:	e9 52 ff ff ff       	jmp    c001148f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001153d:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011543:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011548:	5b                   	pop    ebx
c0011549:	ba ff ff ff ff       	mov    edx,0xffffffff
c001154e:	5e                   	pop    esi
c001154f:	5f                   	pop    edi
c0011550:	5d                   	pop    ebp
c0011551:	c3                   	ret    
c0011552:	85 f6                	test   esi,esi
c0011554:	0f 84 35 ff ff ff    	je     c001148f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001155a:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011560:	e9 2a ff ff ff       	jmp    c001148f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011565:	85 f6                	test   esi,esi
c0011567:	0f 84 22 ff ff ff    	je     c001148f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001156d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011573:	e9 17 ff ff ff       	jmp    c001148f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0011578 <SysClose(regs*)>:
c0011578:	57                   	push   edi
c0011579:	56                   	push   esi
c001157a:	53                   	push   ebx
c001157b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001157f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011582:	83 f8 02             	cmp    eax,0x2
c0011585:	76 44                	jbe    c00115cb <SysClose(regs*)+0x53>
c0011587:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001158d:	31 f6                	xor    esi,esi
c001158f:	31 ff                	xor    edi,edi
c0011591:	83 fa 01             	cmp    edx,0x1
c0011594:	76 2d                	jbe    c00115c3 <SysClose(regs*)+0x4b>
c0011596:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001159b:	77 2e                	ja     c00115cb <SysClose(regs*)+0x53>
c001159d:	83 ec 0c             	sub    esp,0xc
c00115a0:	50                   	push   eax
c00115a1:	e8 ff 18 00 00       	call   c0012ea5 <KeGetFileFromDescriptor(int)>
c00115a6:	83 c4 10             	add    esp,0x10
c00115a9:	85 c0                	test   eax,eax
c00115ab:	89 c3                	mov    ebx,eax
c00115ad:	74 1c                	je     c00115cb <SysClose(regs*)+0x53>
c00115af:	83 ec 0c             	sub    esp,0xc
c00115b2:	50                   	push   eax
c00115b3:	e8 4c 6c ff ff       	call   c0008204 <File::close()>
c00115b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115c0:	83 c4 10             	add    esp,0x10
c00115c3:	5b                   	pop    ebx
c00115c4:	89 f0                	mov    eax,esi
c00115c6:	89 fa                	mov    edx,edi
c00115c8:	5e                   	pop    esi
c00115c9:	5f                   	pop    edi
c00115ca:	c3                   	ret    
c00115cb:	5b                   	pop    ebx
c00115cc:	be ff ff ff ff       	mov    esi,0xffffffff
c00115d1:	89 f0                	mov    eax,esi
c00115d3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00115d8:	89 fa                	mov    edx,edi
c00115da:	5e                   	pop    esi
c00115db:	5f                   	pop    edi
c00115dc:	c3                   	ret    

c00115dd <SysOpenDir(regs*)>:
c00115dd:	56                   	push   esi
c00115de:	53                   	push   ebx
c00115df:	83 ec 04             	sub    esp,0x4
c00115e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115e6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00115e9:	85 c9                	test   ecx,ecx
c00115eb:	74 5d                	je     c001164a <SysOpenDir(regs*)+0x6d>
c00115ed:	83 ec 0c             	sub    esp,0xc
c00115f0:	68 14 01 00 00       	push   0x114
c00115f5:	e8 6e e0 ff ff       	call   c000f668 <malloc>
c00115fa:	83 c4 0c             	add    esp,0xc
c00115fd:	89 c6                	mov    esi,eax
c00115ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011604:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011607:	50                   	push   eax
c0011608:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001160b:	52                   	push   edx
c001160c:	56                   	push   esi
c001160d:	e8 56 70 ff ff       	call   c0008668 <Directory::Directory(char const*, Process*)>
c0011612:	83 c4 10             	add    esp,0x10
c0011615:	85 f6                	test   esi,esi
c0011617:	74 31                	je     c001164a <SysOpenDir(regs*)+0x6d>
c0011619:	83 ec 0c             	sub    esp,0xc
c001161c:	56                   	push   esi
c001161d:	e8 0e 71 ff ff       	call   c0008730 <Directory::open()>
c0011622:	83 c4 10             	add    esp,0x10
c0011625:	85 c0                	test   eax,eax
c0011627:	75 21                	jne    c001164a <SysOpenDir(regs*)+0x6d>
c0011629:	83 ec 0c             	sub    esp,0xc
c001162c:	56                   	push   esi
c001162d:	e8 76 15 00 00       	call   c0012ba8 <UnixFile::getFileDescriptor()>
c0011632:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011635:	83 c4 10             	add    esp,0x10
c0011638:	89 02                	mov    DWORD PTR [edx],eax
c001163a:	c1 f8 1f             	sar    eax,0x1f
c001163d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011640:	83 c4 04             	add    esp,0x4
c0011643:	31 c0                	xor    eax,eax
c0011645:	5b                   	pop    ebx
c0011646:	31 d2                	xor    edx,edx
c0011648:	5e                   	pop    esi
c0011649:	c3                   	ret    
c001164a:	83 c4 04             	add    esp,0x4
c001164d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011652:	5b                   	pop    ebx
c0011653:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011658:	5e                   	pop    esi
c0011659:	c3                   	ret    

c001165a <SysMakeDir(regs*)>:
c001165a:	56                   	push   esi
c001165b:	53                   	push   ebx
c001165c:	83 ec 10             	sub    esp,0x10
c001165f:	68 14 01 00 00       	push   0x114
c0011664:	e8 ff df ff ff       	call   c000f668 <malloc>
c0011669:	83 c4 0c             	add    esp,0xc
c001166c:	89 c3                	mov    ebx,eax
c001166e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011673:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011676:	50                   	push   eax
c0011677:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001167b:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001167e:	52                   	push   edx
c001167f:	53                   	push   ebx
c0011680:	e8 e3 6f ff ff       	call   c0008668 <Directory::Directory(char const*, Process*)>
c0011685:	83 c4 10             	add    esp,0x10
c0011688:	85 db                	test   ebx,ebx
c001168a:	74 2c                	je     c00116b8 <SysMakeDir(regs*)+0x5e>
c001168c:	83 ec 0c             	sub    esp,0xc
c001168f:	53                   	push   ebx
c0011690:	e8 7b 72 ff ff       	call   c0008910 <Directory::create()>
c0011695:	89 c6                	mov    esi,eax
c0011697:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011699:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001169c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001169f:	83 c4 10             	add    esp,0x10
c00116a2:	31 c0                	xor    eax,eax
c00116a4:	85 f6                	test   esi,esi
c00116a6:	0f 95 c0             	setne  al
c00116a9:	31 d2                	xor    edx,edx
c00116ab:	f7 d8                	neg    eax
c00116ad:	83 d2 00             	adc    edx,0x0
c00116b0:	83 c4 04             	add    esp,0x4
c00116b3:	5b                   	pop    ebx
c00116b4:	f7 da                	neg    edx
c00116b6:	5e                   	pop    esi
c00116b7:	c3                   	ret    
c00116b8:	83 c4 04             	add    esp,0x4
c00116bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116c0:	5b                   	pop    ebx
c00116c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116c6:	5e                   	pop    esi
c00116c7:	c3                   	ret    

c00116c8 <SysCloseDir(regs*)>:
c00116c8:	53                   	push   ebx
c00116c9:	83 ec 08             	sub    esp,0x8
c00116cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116d3:	8d 50 fd             	lea    edx,[eax-0x3]
c00116d6:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00116dc:	77 2f                	ja     c001170d <SysCloseDir(regs*)+0x45>
c00116de:	83 ec 0c             	sub    esp,0xc
c00116e1:	50                   	push   eax
c00116e2:	e8 be 17 00 00       	call   c0012ea5 <KeGetFileFromDescriptor(int)>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	85 c0                	test   eax,eax
c00116ec:	89 c3                	mov    ebx,eax
c00116ee:	74 1d                	je     c001170d <SysCloseDir(regs*)+0x45>
c00116f0:	83 ec 0c             	sub    esp,0xc
c00116f3:	50                   	push   eax
c00116f4:	e8 93 70 ff ff       	call   c000878c <Directory::close()>
c00116f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011701:	83 c4 10             	add    esp,0x10
c0011704:	31 c0                	xor    eax,eax
c0011706:	83 c4 08             	add    esp,0x8
c0011709:	31 d2                	xor    edx,edx
c001170b:	5b                   	pop    ebx
c001170c:	c3                   	ret    
c001170d:	83 c4 08             	add    esp,0x8
c0011710:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011715:	5b                   	pop    ebx
c0011716:	ba ff ff ff ff       	mov    edx,0xffffffff
c001171b:	c3                   	ret    

c001171c <SysWait(regs*)>:
c001171c:	83 ec 10             	sub    esp,0x10
c001171f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011723:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011726:	52                   	push   edx
c0011727:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001172a:	51                   	push   ecx
c001172b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001172e:	50                   	push   eax
c001172f:	e8 fc 4f 00 00       	call   c0016730 <waitTask(int, int*, int)>
c0011734:	83 c4 1c             	add    esp,0x1c
c0011737:	89 c2                	mov    edx,eax
c0011739:	c1 fa 1f             	sar    edx,0x1f
c001173c:	c3                   	ret    

c001173d <SysNotImpl(regs*)>:
c001173d:	83 ec 18             	sub    esp,0x18
c0011740:	68 13 49 02 c0       	push   0xc0024913
c0011745:	e8 72 e3 ff ff       	call   c000fabc <KePanic(char const*)>
c001174a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001174f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011754:	83 c4 1c             	add    esp,0x1c
c0011757:	c3                   	ret    

c0011758 <SysPanic(regs*)>:
c0011758:	83 ec 18             	sub    esp,0x18
c001175b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001175f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011762:	50                   	push   eax
c0011763:	e8 54 e3 ff ff       	call   c000fabc <KePanic(char const*)>
c0011768:	b8 01 00 00 00       	mov    eax,0x1
c001176d:	31 d2                	xor    edx,edx
c001176f:	83 c4 1c             	add    esp,0x1c
c0011772:	c3                   	ret    

c0011773 <SysRmdir(regs*)>:
c0011773:	56                   	push   esi
c0011774:	53                   	push   ebx
c0011775:	83 ec 10             	sub    esp,0x10
c0011778:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001177c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001177f:	68 14 01 00 00       	push   0x114
c0011784:	e8 df de ff ff       	call   c000f668 <malloc>
c0011789:	6a 00                	push   0x0
c001178b:	89 c3                	mov    ebx,eax
c001178d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011792:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011795:	50                   	push   eax
c0011796:	56                   	push   esi
c0011797:	53                   	push   ebx
c0011798:	e8 ed 68 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c001179d:	83 c4 14             	add    esp,0x14
c00117a0:	53                   	push   ebx
c00117a1:	e8 ce 6b ff ff       	call   c0008374 <File::unlink()>
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	85 db                	test   ebx,ebx
c00117ab:	89 c6                	mov    esi,eax
c00117ad:	74 0c                	je     c00117bb <SysRmdir(regs*)+0x48>
c00117af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117b1:	83 ec 0c             	sub    esp,0xc
c00117b4:	53                   	push   ebx
c00117b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117b8:	83 c4 10             	add    esp,0x10
c00117bb:	31 c0                	xor    eax,eax
c00117bd:	85 f6                	test   esi,esi
c00117bf:	0f 95 c0             	setne  al
c00117c2:	31 d2                	xor    edx,edx
c00117c4:	f7 d8                	neg    eax
c00117c6:	83 d2 00             	adc    edx,0x0
c00117c9:	83 c4 04             	add    esp,0x4
c00117cc:	5b                   	pop    ebx
c00117cd:	f7 da                	neg    edx
c00117cf:	5e                   	pop    esi
c00117d0:	c3                   	ret    

c00117d1 <SysUnlink(regs*)>:
c00117d1:	56                   	push   esi
c00117d2:	53                   	push   ebx
c00117d3:	83 ec 10             	sub    esp,0x10
c00117d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117da:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00117dd:	68 14 01 00 00       	push   0x114
c00117e2:	e8 81 de ff ff       	call   c000f668 <malloc>
c00117e7:	6a 00                	push   0x0
c00117e9:	89 c3                	mov    ebx,eax
c00117eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117f3:	50                   	push   eax
c00117f4:	56                   	push   esi
c00117f5:	53                   	push   ebx
c00117f6:	e8 8f 68 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c00117fb:	83 c4 14             	add    esp,0x14
c00117fe:	53                   	push   ebx
c00117ff:	e8 70 6b ff ff       	call   c0008374 <File::unlink()>
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	85 db                	test   ebx,ebx
c0011809:	89 c6                	mov    esi,eax
c001180b:	74 0c                	je     c0011819 <SysUnlink(regs*)+0x48>
c001180d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001180f:	83 ec 0c             	sub    esp,0xc
c0011812:	53                   	push   ebx
c0011813:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011816:	83 c4 10             	add    esp,0x10
c0011819:	31 c0                	xor    eax,eax
c001181b:	85 f6                	test   esi,esi
c001181d:	0f 95 c0             	setne  al
c0011820:	31 d2                	xor    edx,edx
c0011822:	f7 d8                	neg    eax
c0011824:	83 d2 00             	adc    edx,0x0
c0011827:	83 c4 04             	add    esp,0x4
c001182a:	5b                   	pop    ebx
c001182b:	f7 da                	neg    edx
c001182d:	5e                   	pop    esi
c001182e:	c3                   	ret    

c001182f <SysGetArgv(regs*)>:
c001182f:	83 ec 0c             	sub    esp,0xc
c0011832:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011836:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011839:	85 c0                	test   eax,eax
c001183b:	78 2c                	js     c0011869 <SysGetArgv(regs*)+0x3a>
c001183d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011843:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011846:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c001184c:	7d 1b                	jge    c0011869 <SysGetArgv(regs*)+0x3a>
c001184e:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011855:	85 c0                	test   eax,eax
c0011857:	74 18                	je     c0011871 <SysGetArgv(regs*)+0x42>
c0011859:	83 ec 08             	sub    esp,0x8
c001185c:	50                   	push   eax
c001185d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011860:	50                   	push   eax
c0011861:	e8 ea ed fe ff       	call   c0000650 <strcpy>
c0011866:	83 c4 10             	add    esp,0x10
c0011869:	31 c0                	xor    eax,eax
c001186b:	31 d2                	xor    edx,edx
c001186d:	83 c4 0c             	add    esp,0xc
c0011870:	c3                   	ret    
c0011871:	b8 01 00 00 00       	mov    eax,0x1
c0011876:	31 d2                	xor    edx,edx
c0011878:	83 c4 0c             	add    esp,0xc
c001187b:	c3                   	ret    

c001187c <SysUSleep(regs*)>:
c001187c:	83 ec 1c             	sub    esp,0x1c
c001187f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011883:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011886:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011889:	6a 00                	push   0x0
c001188b:	6a 64                	push   0x64
c001188d:	52                   	push   edx
c001188e:	50                   	push   eax
c001188f:	e8 a0 05 01 00       	call   c0021e34 <__udivdi3>
c0011894:	83 c4 18             	add    esp,0x18
c0011897:	52                   	push   edx
c0011898:	50                   	push   eax
c0011899:	e8 8a 4f 00 00       	call   c0016828 <milliTenthSleep(unsigned long long)>
c001189e:	31 c0                	xor    eax,eax
c00118a0:	31 d2                	xor    edx,edx
c00118a2:	83 c4 1c             	add    esp,0x1c
c00118a5:	c3                   	ret    

c00118a6 <SysSpawn(regs*)>:
c00118a6:	56                   	push   esi
c00118a7:	53                   	push   ebx
c00118a8:	83 ec 04             	sub    esp,0x4
c00118ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118af:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00118b2:	85 f6                	test   esi,esi
c00118b4:	75 0a                	jne    c00118c0 <SysSpawn(regs*)+0x1a>
c00118b6:	83 c4 04             	add    esp,0x4
c00118b9:	31 c0                	xor    eax,eax
c00118bb:	5b                   	pop    ebx
c00118bc:	31 d2                	xor    edx,edx
c00118be:	5e                   	pop    esi
c00118bf:	c3                   	ret    
c00118c0:	83 ec 0c             	sub    esp,0xc
c00118c3:	68 c4 07 00 00       	push   0x7c4
c00118c8:	e8 9b dd ff ff       	call   c000f668 <malloc>
c00118cd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00118d0:	83 c4 10             	add    esp,0x10
c00118d3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00118d6:	89 c6                	mov    esi,eax
c00118d8:	31 c0                	xor    eax,eax
c00118da:	85 c9                	test   ecx,ecx
c00118dc:	74 08                	je     c00118e6 <SysSpawn(regs*)+0x40>
c00118de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118e6:	52                   	push   edx
c00118e7:	50                   	push   eax
c00118e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00118eb:	50                   	push   eax
c00118ec:	56                   	push   esi
c00118ed:	e8 16 46 00 00       	call   c0015f08 <Process::Process(char const*, Process*, char**)>
c00118f2:	83 c4 10             	add    esp,0x10
c00118f5:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c00118fc:	75 b8                	jne    c00118b6 <SysSpawn(regs*)+0x10>
c00118fe:	83 ec 0c             	sub    esp,0xc
c0011901:	56                   	push   esi
c0011902:	e8 c5 4b 00 00       	call   c00164cc <Process::createUserThread()>
c0011907:	8b 06                	mov    eax,DWORD PTR [esi]
c0011909:	83 c4 10             	add    esp,0x10
c001190c:	83 c4 04             	add    esp,0x4
c001190f:	5b                   	pop    ebx
c0011910:	89 c2                	mov    edx,eax
c0011912:	c1 fa 1f             	sar    edx,0x1f
c0011915:	5e                   	pop    esi
c0011916:	c3                   	ret    

c0011917 <SysGetEnv(regs*)>:
c0011917:	57                   	push   edi
c0011918:	56                   	push   esi
c0011919:	53                   	push   ebx
c001191a:	83 ec 1c             	sub    esp,0x1c
c001191d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011922:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011926:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011929:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001192c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001192f:	51                   	push   ecx
c0011930:	e8 24 cc ff ff       	call   c000e559 <KeGetProcessTotalEnvCount(Process*)>
c0011935:	83 c4 10             	add    esp,0x10
c0011938:	39 c7                	cmp    edi,eax
c001193a:	7c 12                	jl     c001194e <SysGetEnv(regs*)+0x37>
c001193c:	31 c0                	xor    eax,eax
c001193e:	31 d2                	xor    edx,edx
c0011940:	85 f6                	test   esi,esi
c0011942:	74 03                	je     c0011947 <SysGetEnv(regs*)+0x30>
c0011944:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011947:	83 c4 10             	add    esp,0x10
c001194a:	5b                   	pop    ebx
c001194b:	5e                   	pop    esi
c001194c:	5f                   	pop    edi
c001194d:	c3                   	ret    
c001194e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011952:	83 ec 04             	sub    esp,0x4
c0011955:	57                   	push   edi
c0011956:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001195c:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c001195f:	57                   	push   edi
c0011960:	50                   	push   eax
c0011961:	e8 13 cc ff ff       	call   c000e579 <KeGetProcessEnvPair(Process*, int)>
c0011966:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011969:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001196d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011971:	83 c4 0c             	add    esp,0xc
c0011974:	85 d2                	test   edx,edx
c0011976:	75 23                	jne    c001199b <SysGetEnv(regs*)+0x84>
c0011978:	83 ec 0c             	sub    esp,0xc
c001197b:	50                   	push   eax
c001197c:	e8 ff eb fe ff       	call   c0000580 <strlen>
c0011981:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011984:	89 c3                	mov    ebx,eax
c0011986:	e8 f5 eb fe ff       	call   c0000580 <strlen>
c001198b:	83 c4 10             	add    esp,0x10
c001198e:	31 d2                	xor    edx,edx
c0011990:	83 c4 10             	add    esp,0x10
c0011993:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011997:	5b                   	pop    ebx
c0011998:	5e                   	pop    esi
c0011999:	5f                   	pop    edi
c001199a:	c3                   	ret    
c001199b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001199e:	83 ec 08             	sub    esp,0x8
c00119a1:	50                   	push   eax
c00119a2:	56                   	push   esi
c00119a3:	e8 a8 ec fe ff       	call   c0000650 <strcpy>
c00119a8:	58                   	pop    eax
c00119a9:	5a                   	pop    edx
c00119aa:	68 2d 49 02 c0       	push   0xc002492d
c00119af:	56                   	push   esi
c00119b0:	e8 bb ee fe ff       	call   c0000870 <strcat>
c00119b5:	59                   	pop    ecx
c00119b6:	5b                   	pop    ebx
c00119b7:	57                   	push   edi
c00119b8:	56                   	push   esi
c00119b9:	e8 b2 ee fe ff       	call   c0000870 <strcat>
c00119be:	83 c4 10             	add    esp,0x10
c00119c1:	31 c0                	xor    eax,eax
c00119c3:	83 c4 10             	add    esp,0x10
c00119c6:	31 d2                	xor    edx,edx
c00119c8:	5b                   	pop    ebx
c00119c9:	5e                   	pop    esi
c00119ca:	5f                   	pop    edi
c00119cb:	c3                   	ret    

c00119cc <SysSetFatAttrib(regs*)>:
c00119cc:	57                   	push   edi
c00119cd:	56                   	push   esi
c00119ce:	53                   	push   ebx
c00119cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00119d3:	83 ec 0c             	sub    esp,0xc
c00119d6:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00119d9:	68 14 01 00 00       	push   0x114
c00119de:	e8 85 dc ff ff       	call   c000f668 <malloc>
c00119e3:	83 c4 0c             	add    esp,0xc
c00119e6:	89 c3                	mov    ebx,eax
c00119e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119f0:	50                   	push   eax
c00119f1:	57                   	push   edi
c00119f2:	53                   	push   ebx
c00119f3:	e8 90 67 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00119f8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00119fb:	83 c4 0c             	add    esp,0xc
c00119fe:	0f b6 d4             	movzx  edx,ah
c0011a01:	0f b6 c0             	movzx  eax,al
c0011a04:	52                   	push   edx
c0011a05:	50                   	push   eax
c0011a06:	53                   	push   ebx
c0011a07:	e8 02 6a ff ff       	call   c000840e <File::chfatattr(unsigned char, unsigned char)>
c0011a0c:	83 c4 10             	add    esp,0x10
c0011a0f:	85 db                	test   ebx,ebx
c0011a11:	89 c6                	mov    esi,eax
c0011a13:	74 0c                	je     c0011a21 <SysSetFatAttrib(regs*)+0x55>
c0011a15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a17:	83 ec 0c             	sub    esp,0xc
c0011a1a:	53                   	push   ebx
c0011a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	5b                   	pop    ebx
c0011a22:	31 c0                	xor    eax,eax
c0011a24:	85 f6                	test   esi,esi
c0011a26:	0f 95 c0             	setne  al
c0011a29:	31 d2                	xor    edx,edx
c0011a2b:	5e                   	pop    esi
c0011a2c:	f7 d8                	neg    eax
c0011a2e:	83 d2 00             	adc    edx,0x0
c0011a31:	f7 da                	neg    edx
c0011a33:	5f                   	pop    edi
c0011a34:	c3                   	ret    

c0011a35 <SysShutdown(regs*)>:
c0011a35:	83 ec 1c             	sub    esp,0x1c
c0011a38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a3c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011a3f:	85 c9                	test   ecx,ecx
c0011a41:	74 18                	je     c0011a5b <SysShutdown(regs*)+0x26>
c0011a43:	83 f9 01             	cmp    ecx,0x1
c0011a46:	74 26                	je     c0011a6e <SysShutdown(regs*)+0x39>
c0011a48:	83 f9 02             	cmp    ecx,0x2
c0011a4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a50:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a55:	74 24                	je     c0011a7b <SysShutdown(regs*)+0x46>
c0011a57:	83 c4 1c             	add    esp,0x1c
c0011a5a:	c3                   	ret    
c0011a5b:	e8 aa e9 ff ff       	call   c001040a <KeShutdown()>
c0011a60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a65:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a6a:	83 c4 1c             	add    esp,0x1c
c0011a6d:	c3                   	ret    
c0011a6e:	e8 cd e9 ff ff       	call   c0010440 <KeSleep()>
c0011a73:	31 c0                	xor    eax,eax
c0011a75:	31 d2                	xor    edx,edx
c0011a77:	83 c4 1c             	add    esp,0x1c
c0011a7a:	c3                   	ret    
c0011a7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a83:	e8 e8 e9 ff ff       	call   c0010470 <KeRestart()>
c0011a88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a90:	eb c5                	jmp    c0011a57 <SysShutdown(regs*)+0x22>

c0011a92 <SysPipe(regs*)>:
c0011a92:	57                   	push   edi
c0011a93:	56                   	push   esi
c0011a94:	53                   	push   ebx
c0011a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a99:	83 ec 0c             	sub    esp,0xc
c0011a9c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011a9f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011aa2:	6a 20                	push   0x20
c0011aa4:	e8 bf db ff ff       	call   c000f668 <malloc>
c0011aa9:	89 c3                	mov    ebx,eax
c0011aab:	58                   	pop    eax
c0011aac:	5a                   	pop    edx
c0011aad:	68 00 50 00 00       	push   0x5000
c0011ab2:	53                   	push   ebx
c0011ab3:	e8 d2 e7 ff ff       	call   c001028a <Pipe::Pipe(int)>
c0011ab8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011abb:	e8 e8 10 00 00       	call   c0012ba8 <UnixFile::getFileDescriptor()>
c0011ac0:	89 07                	mov    DWORD PTR [edi],eax
c0011ac2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ac5:	e8 de 10 00 00       	call   c0012ba8 <UnixFile::getFileDescriptor()>
c0011aca:	83 c4 10             	add    esp,0x10
c0011acd:	31 d2                	xor    edx,edx
c0011acf:	89 06                	mov    DWORD PTR [esi],eax
c0011ad1:	31 c0                	xor    eax,eax
c0011ad3:	5b                   	pop    ebx
c0011ad4:	5e                   	pop    esi
c0011ad5:	5f                   	pop    edi
c0011ad6:	c3                   	ret    

c0011ad7 <SysGetUnixTime(regs*)>:
c0011ad7:	53                   	push   ebx
c0011ad8:	83 ec 10             	sub    esp,0x10
c0011adb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011adf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ae2:	52                   	push   edx
c0011ae3:	68 2f 49 02 c0       	push   0xc002492f
c0011ae8:	e8 79 54 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011aed:	83 c4 10             	add    esp,0x10
c0011af0:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0011af4:	74 3b                	je     c0011b31 <SysGetUnixTime(regs*)+0x5a>
c0011af6:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0011afb:	83 ec 0c             	sub    esp,0xc
c0011afe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011b04:	50                   	push   eax
c0011b05:	e8 30 76 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0011b0a:	83 c4 0c             	add    esp,0xc
c0011b0d:	52                   	push   edx
c0011b0e:	50                   	push   eax
c0011b0f:	68 43 49 02 c0       	push   0xc0024943
c0011b14:	e8 4d 54 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011b19:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0011b1e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011b24:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011b28:	83 c4 18             	add    esp,0x18
c0011b2b:	5b                   	pop    ebx
c0011b2c:	e9 09 76 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c0011b31:	6b 0d 54 cb 02 c0 64 	imul   ecx,DWORD PTR ds:0xc002cb54,0x64
c0011b38:	b8 64 00 00 00       	mov    eax,0x64
c0011b3d:	f7 25 50 cb 02 c0    	mul    DWORD PTR ds:0xc002cb50
c0011b43:	83 c4 08             	add    esp,0x8
c0011b46:	5b                   	pop    ebx
c0011b47:	01 ca                	add    edx,ecx
c0011b49:	c3                   	ret    

c0011b4a <string_ends_with(char const*, char const*)>:
c0011b4a:	57                   	push   edi
c0011b4b:	56                   	push   esi
c0011b4c:	53                   	push   ebx
c0011b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b51:	83 ec 0c             	sub    esp,0xc
c0011b54:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b58:	53                   	push   ebx
c0011b59:	e8 22 ea fe ff       	call   c0000580 <strlen>
c0011b5e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b61:	89 c6                	mov    esi,eax
c0011b63:	e8 18 ea fe ff       	call   c0000580 <strlen>
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	31 d2                	xor    edx,edx
c0011b6d:	39 c6                	cmp    esi,eax
c0011b6f:	7d 06                	jge    c0011b77 <string_ends_with(char const*, char const*)+0x2d>
c0011b71:	5b                   	pop    ebx
c0011b72:	89 d0                	mov    eax,edx
c0011b74:	5e                   	pop    esi
c0011b75:	5f                   	pop    edi
c0011b76:	c3                   	ret    
c0011b77:	83 ec 08             	sub    esp,0x8
c0011b7a:	29 c6                	sub    esi,eax
c0011b7c:	57                   	push   edi
c0011b7d:	01 f3                	add    ebx,esi
c0011b7f:	53                   	push   ebx
c0011b80:	e8 fb eb fe ff       	call   c0000780 <strcmp>
c0011b85:	83 c4 10             	add    esp,0x10
c0011b88:	31 d2                	xor    edx,edx
c0011b8a:	5b                   	pop    ebx
c0011b8b:	5e                   	pop    esi
c0011b8c:	85 c0                	test   eax,eax
c0011b8e:	5f                   	pop    edi
c0011b8f:	0f 94 c2             	sete   dl
c0011b92:	89 d0                	mov    eax,edx
c0011b94:	c3                   	ret    

c0011b95 <SysOpen(regs*)>:
c0011b95:	56                   	push   esi
c0011b96:	53                   	push   ebx
c0011b97:	81 ec 04 01 00 00    	sub    esp,0x104
c0011b9d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011ba4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ba7:	85 c0                	test   eax,eax
c0011ba9:	0f 84 c4 01 00 00    	je     c0011d73 <SysOpen(regs*)+0x1de>
c0011baf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011bb2:	85 c0                	test   eax,eax
c0011bb4:	0f 84 b9 01 00 00    	je     c0011d73 <SysOpen(regs*)+0x1de>
c0011bba:	6a 00                	push   0x0
c0011bbc:	68 4a 49 02 c0       	push   0xc002494a
c0011bc1:	50                   	push   eax
c0011bc2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011bc6:	56                   	push   esi
c0011bc7:	e8 90 62 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011bcc:	89 34 24             	mov    DWORD PTR [esp],esi
c0011bcf:	e8 ac e9 fe ff       	call   c0000580 <strlen>
c0011bd4:	83 c4 10             	add    esp,0x10
c0011bd7:	83 e8 01             	sub    eax,0x1
c0011bda:	74 29                	je     c0011c05 <SysOpen(regs*)+0x70>
c0011bdc:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011be0:	83 fa 2e             	cmp    edx,0x2e
c0011be3:	74 1c                	je     c0011c01 <SysOpen(regs*)+0x6c>
c0011be5:	83 fa 3a             	cmp    edx,0x3a
c0011be8:	74 17                	je     c0011c01 <SysOpen(regs*)+0x6c>
c0011bea:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011bee:	83 e8 01             	sub    eax,0x1
c0011bf1:	74 12                	je     c0011c05 <SysOpen(regs*)+0x70>
c0011bf3:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011bf7:	83 fa 3a             	cmp    edx,0x3a
c0011bfa:	74 05                	je     c0011c01 <SysOpen(regs*)+0x6c>
c0011bfc:	83 fa 2e             	cmp    edx,0x2e
c0011bff:	75 e9                	jne    c0011bea <SysOpen(regs*)+0x55>
c0011c01:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011c05:	83 ec 08             	sub    esp,0x8
c0011c08:	68 4e 49 02 c0       	push   0xc002494e
c0011c0d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c10:	50                   	push   eax
c0011c11:	e8 34 ff ff ff       	call   c0011b4a <string_ends_with(char const*, char const*)>
c0011c16:	83 c4 10             	add    esp,0x10
c0011c19:	85 c0                	test   eax,eax
c0011c1b:	74 1d                	je     c0011c3a <SysOpen(regs*)+0xa5>
c0011c1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c20:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011c26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c2d:	81 c4 04 01 00 00    	add    esp,0x104
c0011c33:	31 c0                	xor    eax,eax
c0011c35:	5b                   	pop    ebx
c0011c36:	31 d2                	xor    edx,edx
c0011c38:	5e                   	pop    esi
c0011c39:	c3                   	ret    
c0011c3a:	83 ec 08             	sub    esp,0x8
c0011c3d:	68 53 49 02 c0       	push   0xc0024953
c0011c42:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c45:	50                   	push   eax
c0011c46:	e8 ff fe ff ff       	call   c0011b4a <string_ends_with(char const*, char const*)>
c0011c4b:	83 c4 10             	add    esp,0x10
c0011c4e:	85 c0                	test   eax,eax
c0011c50:	75 cb                	jne    c0011c1d <SysOpen(regs*)+0x88>
c0011c52:	83 ec 08             	sub    esp,0x8
c0011c55:	68 4f 49 02 c0       	push   0xc002494f
c0011c5a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c5d:	50                   	push   eax
c0011c5e:	e8 1d eb fe ff       	call   c0000780 <strcmp>
c0011c63:	83 c4 10             	add    esp,0x10
c0011c66:	85 c0                	test   eax,eax
c0011c68:	74 b3                	je     c0011c1d <SysOpen(regs*)+0x88>
c0011c6a:	83 ec 08             	sub    esp,0x8
c0011c6d:	68 4e 49 02 c0       	push   0xc002494e
c0011c72:	56                   	push   esi
c0011c73:	e8 d2 fe ff ff       	call   c0011b4a <string_ends_with(char const*, char const*)>
c0011c78:	83 c4 10             	add    esp,0x10
c0011c7b:	85 c0                	test   eax,eax
c0011c7d:	75 9e                	jne    c0011c1d <SysOpen(regs*)+0x88>
c0011c7f:	83 ec 08             	sub    esp,0x8
c0011c82:	68 58 49 02 c0       	push   0xc0024958
c0011c87:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c8a:	50                   	push   eax
c0011c8b:	e8 ba fe ff ff       	call   c0011b4a <string_ends_with(char const*, char const*)>
c0011c90:	83 c4 10             	add    esp,0x10
c0011c93:	85 c0                	test   eax,eax
c0011c95:	0f 85 eb 00 00 00    	jne    c0011d86 <SysOpen(regs*)+0x1f1>
c0011c9b:	83 ec 08             	sub    esp,0x8
c0011c9e:	68 5d 49 02 c0       	push   0xc002495d
c0011ca3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ca6:	50                   	push   eax
c0011ca7:	e8 9e fe ff ff       	call   c0011b4a <string_ends_with(char const*, char const*)>
c0011cac:	83 c4 10             	add    esp,0x10
c0011caf:	85 c0                	test   eax,eax
c0011cb1:	0f 85 cf 00 00 00    	jne    c0011d86 <SysOpen(regs*)+0x1f1>
c0011cb7:	83 ec 08             	sub    esp,0x8
c0011cba:	68 59 49 02 c0       	push   0xc0024959
c0011cbf:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011cc2:	51                   	push   ecx
c0011cc3:	e8 b8 ea fe ff       	call   c0000780 <strcmp>
c0011cc8:	83 c4 10             	add    esp,0x10
c0011ccb:	85 c0                	test   eax,eax
c0011ccd:	0f 84 b3 00 00 00    	je     c0011d86 <SysOpen(regs*)+0x1f1>
c0011cd3:	83 ec 08             	sub    esp,0x8
c0011cd6:	68 58 49 02 c0       	push   0xc0024958
c0011cdb:	56                   	push   esi
c0011cdc:	e8 69 fe ff ff       	call   c0011b4a <string_ends_with(char const*, char const*)>
c0011ce1:	83 c4 10             	add    esp,0x10
c0011ce4:	85 c0                	test   eax,eax
c0011ce6:	0f 85 9a 00 00 00    	jne    c0011d86 <SysOpen(regs*)+0x1f1>
c0011cec:	83 ec 0c             	sub    esp,0xc
c0011cef:	68 14 01 00 00       	push   0x114
c0011cf4:	e8 6f d9 ff ff       	call   c000f668 <malloc>
c0011cf9:	83 c4 0c             	add    esp,0xc
c0011cfc:	89 c6                	mov    esi,eax
c0011cfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d03:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d06:	50                   	push   eax
c0011d07:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011d0a:	52                   	push   edx
c0011d0b:	56                   	push   esi
c0011d0c:	e8 77 64 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0011d11:	83 c4 10             	add    esp,0x10
c0011d14:	85 f6                	test   esi,esi
c0011d16:	74 5b                	je     c0011d73 <SysOpen(regs*)+0x1de>
c0011d18:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d1b:	0f b6 c2             	movzx  eax,dl
c0011d1e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011d21:	89 d0                	mov    eax,edx
c0011d23:	83 e0 01             	and    eax,0x1
c0011d26:	f6 c2 02             	test   dl,0x2
c0011d29:	74 03                	je     c0011d2e <SysOpen(regs*)+0x199>
c0011d2b:	83 c8 02             	or     eax,0x2
c0011d2e:	f6 c2 04             	test   dl,0x4
c0011d31:	74 03                	je     c0011d36 <SysOpen(regs*)+0x1a1>
c0011d33:	83 c8 04             	or     eax,0x4
c0011d36:	f6 c2 08             	test   dl,0x8
c0011d39:	74 03                	je     c0011d3e <SysOpen(regs*)+0x1a9>
c0011d3b:	83 c8 0a             	or     eax,0xa
c0011d3e:	80 e2 10             	and    dl,0x10
c0011d41:	74 03                	je     c0011d46 <SysOpen(regs*)+0x1b1>
c0011d43:	83 c8 12             	or     eax,0x12
c0011d46:	83 ec 08             	sub    esp,0x8
c0011d49:	50                   	push   eax
c0011d4a:	56                   	push   esi
c0011d4b:	e8 56 64 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0011d50:	83 c4 10             	add    esp,0x10
c0011d53:	85 c0                	test   eax,eax
c0011d55:	75 1c                	jne    c0011d73 <SysOpen(regs*)+0x1de>
c0011d57:	83 ec 0c             	sub    esp,0xc
c0011d5a:	56                   	push   esi
c0011d5b:	e8 48 0e 00 00       	call   c0012ba8 <UnixFile::getFileDescriptor()>
c0011d60:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011d63:	83 c4 10             	add    esp,0x10
c0011d66:	89 02                	mov    DWORD PTR [edx],eax
c0011d68:	c1 f8 1f             	sar    eax,0x1f
c0011d6b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011d6e:	e9 ba fe ff ff       	jmp    c0011c2d <SysOpen(regs*)+0x98>
c0011d73:	81 c4 04 01 00 00    	add    esp,0x104
c0011d79:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d7e:	5b                   	pop    ebx
c0011d7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d84:	5e                   	pop    esi
c0011d85:	c3                   	ret    
c0011d86:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d89:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011d8f:	e9 92 fe ff ff       	jmp    c0011c26 <SysOpen(regs*)+0x91>

c0011d94 <KeSystemCall(regs*, void*)>:
c0011d94:	53                   	push   ebx
c0011d95:	83 ec 08             	sub    esp,0x8
c0011d98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d9c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011d9f:	83 f8 48             	cmp    eax,0x48
c0011da2:	77 16                	ja     c0011dba <KeSystemCall(regs*, void*)+0x26>
c0011da4:	8b 14 85 00 6c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9400]
c0011dab:	85 d2                	test   edx,edx
c0011dad:	74 0b                	je     c0011dba <KeSystemCall(regs*, void*)+0x26>
c0011daf:	83 ec 0c             	sub    esp,0xc
c0011db2:	53                   	push   ebx
c0011db3:	ff d2                	call   edx
c0011db5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011db8:	eb 0d                	jmp    c0011dc7 <KeSystemCall(regs*, void*)+0x33>
c0011dba:	52                   	push   edx
c0011dbb:	52                   	push   edx
c0011dbc:	50                   	push   eax
c0011dbd:	68 62 49 02 c0       	push   0xc0024962
c0011dc2:	e8 9f 51 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011dc7:	83 c4 10             	add    esp,0x10
c0011dca:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011dcf:	83 c4 08             	add    esp,0x8
c0011dd2:	31 d2                	xor    edx,edx
c0011dd4:	5b                   	pop    ebx
c0011dd5:	c3                   	ret    

c0011dd6 <VgaText::isAtty()>:
c0011dd6:	b0 01                	mov    al,0x1
c0011dd8:	c3                   	ret    
c0011dd9:	90                   	nop

c0011dda <VgaText::~VgaText()>:
c0011dda:	83 ec 0c             	sub    esp,0xc
c0011ddd:	ba dc 49 02 c0       	mov    edx,0xc00249dc
c0011de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011de6:	89 10                	mov    DWORD PTR [eax],edx
c0011de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dec:	83 ec 0c             	sub    esp,0xc
c0011def:	50                   	push   eax
c0011df0:	e8 a1 0f 00 00       	call   c0012d96 <UnixFile::~UnixFile()>
c0011df5:	83 c4 10             	add    esp,0x10
c0011df8:	90                   	nop
c0011df9:	83 c4 0c             	add    esp,0xc
c0011dfc:	c3                   	ret    
c0011dfd:	90                   	nop

c0011dfe <VgaText::~VgaText()>:
c0011dfe:	83 ec 0c             	sub    esp,0xc
c0011e01:	83 ec 0c             	sub    esp,0xc
c0011e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e08:	e8 cd ff ff ff       	call   c0011dda <VgaText::~VgaText()>
c0011e0d:	83 c4 10             	add    esp,0x10
c0011e10:	83 ec 08             	sub    esp,0x8
c0011e13:	68 84 01 00 00       	push   0x184
c0011e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e1c:	e8 4f b4 ff ff       	call   c000d270 <operator delete(void*, unsigned long)>
c0011e21:	83 c4 10             	add    esp,0x10
c0011e24:	83 c4 0c             	add    esp,0xc
c0011e27:	c3                   	ret    

c0011e28 <VgaText::read(unsigned long long, void*, int*)>:
c0011e28:	83 ec 10             	sub    esp,0x10
c0011e2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011e33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e37:	e8 d7 86 ff ff       	call   c000a513 <readKeyboard(VgaText*, char*, unsigned long)>
c0011e3c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011e40:	89 02                	mov    DWORD PTR [edx],eax
c0011e42:	31 c0                	xor    eax,eax
c0011e44:	83 c4 1c             	add    esp,0x1c
c0011e47:	c3                   	ret    

c0011e48 <setTerminalScrollLock(bool)>:
c0011e48:	c3                   	ret    

c0011e49 <doTerminalCycle()>:
c0011e49:	c3                   	ret    

c0011e4a <addToTerminalCycle(VgaText*)>:
c0011e4a:	c3                   	ret    

c0011e4b <scrollTerminalScrollLock(int)>:
c0011e4b:	c3                   	ret    

c0011e4c <VgaText::updateTitle()>:
c0011e4c:	c3                   	ret    
c0011e4d:	90                   	nop

c0011e4e <VgaText::load()>:
c0011e4e:	c3                   	ret    
c0011e4f:	90                   	nop

c0011e50 <VgaText::updateCursor()>:
c0011e50:	83 ec 14             	sub    esp,0x14
c0011e53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e57:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0011e5a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011e5d:	e8 f2 9c 00 00       	call   c001bb54 <HalConsoleCursorUpdate(int, int)>
c0011e62:	83 c4 1c             	add    esp,0x1c
c0011e65:	c3                   	ret    

c0011e66 <VgaText::doANSI_SGR(int)>:
c0011e66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e6e:	85 d2                	test   edx,edx
c0011e70:	75 0b                	jne    c0011e7d <VgaText::doANSI_SGR(int)+0x17>
c0011e72:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0011e75:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011e78:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011e7b:	eb 59                	jmp    c0011ed6 <VgaText::doANSI_SGR(int)+0x70>
c0011e7d:	83 fa 07             	cmp    edx,0x7
c0011e80:	75 0b                	jne    c0011e8d <VgaText::doANSI_SGR(int)+0x27>
c0011e82:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0011e85:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0011e88:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0011e8b:	eb 49                	jmp    c0011ed6 <VgaText::doANSI_SGR(int)+0x70>
c0011e8d:	83 fa 1b             	cmp    edx,0x1b
c0011e90:	74 e0                	je     c0011e72 <VgaText::doANSI_SGR(int)+0xc>
c0011e92:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0011e95:	83 f9 07             	cmp    ecx,0x7
c0011e98:	77 09                	ja     c0011ea3 <VgaText::doANSI_SGR(int)+0x3d>
c0011e9a:	8b 14 8d 60 6d 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd92a0]
c0011ea1:	eb 20                	jmp    c0011ec3 <VgaText::doANSI_SGR(int)+0x5d>
c0011ea3:	8d 4a d8             	lea    ecx,[edx-0x28]
c0011ea6:	83 f9 07             	cmp    ecx,0x7
c0011ea9:	77 09                	ja     c0011eb4 <VgaText::doANSI_SGR(int)+0x4e>
c0011eab:	8b 14 8d 60 6d 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd92a0]
c0011eb2:	eb 22                	jmp    c0011ed6 <VgaText::doANSI_SGR(int)+0x70>
c0011eb4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0011eb7:	83 f9 07             	cmp    ecx,0x7
c0011eba:	77 0b                	ja     c0011ec7 <VgaText::doANSI_SGR(int)+0x61>
c0011ebc:	8b 14 95 18 6c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd93e8]
c0011ec3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011ec6:	c3                   	ret    
c0011ec7:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0011eca:	83 f9 07             	cmp    ecx,0x7
c0011ecd:	77 0a                	ja     c0011ed9 <VgaText::doANSI_SGR(int)+0x73>
c0011ecf:	8b 14 95 f0 6b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9410]
c0011ed6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011ed9:	c3                   	ret    

c0011eda <VgaText::setDefaultBgColour(VgaColour)>:
c0011eda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ede:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ee2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011ee5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011ee8:	c3                   	ret    
c0011ee9:	90                   	nop

c0011eea <VgaText::setDefaultFgColour(VgaColour)>:
c0011eea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ef2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011ef5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011ef8:	c3                   	ret    
c0011ef9:	90                   	nop

c0011efa <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0011efa:	53                   	push   ebx
c0011efb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011eff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f07:	51                   	push   ecx
c0011f08:	e8 cd ff ff ff       	call   c0011eda <VgaText::setDefaultBgColour(VgaColour)>
c0011f0d:	58                   	pop    eax
c0011f0e:	5a                   	pop    edx
c0011f0f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011f13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011f17:	5b                   	pop    ebx
c0011f18:	eb d0                	jmp    c0011eea <VgaText::setDefaultFgColour(VgaColour)>

c0011f1a <VgaText::setTitleTextColour(VgaColour)>:
c0011f1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f22:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0011f25:	c3                   	ret    

c0011f26 <VgaText::setTitleColour(VgaColour)>:
c0011f26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f2e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011f31:	c3                   	ret    

c0011f32 <VgaText::setTitle(char*)>:
c0011f32:	c3                   	ret    
c0011f33:	90                   	nop

c0011f34 <VgaText::combineColours(unsigned char, unsigned char)>:
c0011f34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f38:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0011f3d:	83 e0 0f             	and    eax,0xf
c0011f40:	c1 e2 04             	shl    edx,0x4
c0011f43:	09 d0                	or     eax,edx
c0011f45:	c3                   	ret    

c0011f46 <VgaText::scrollScreen()>:
c0011f46:	55                   	push   ebp
c0011f47:	57                   	push   edi
c0011f48:	56                   	push   esi
c0011f49:	be 01 00 00 00       	mov    esi,0x1
c0011f4e:	53                   	push   ebx
c0011f4f:	83 ec 0c             	sub    esp,0xc
c0011f52:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f56:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0011f59:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0011f5f:	31 ff                	xor    edi,edi
c0011f61:	01 e9                	add    ecx,ebp
c0011f63:	8a 01                	mov    al,BYTE PTR [ecx]
c0011f65:	83 fe 18             	cmp    esi,0x18
c0011f68:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0011f6e:	75 20                	jne    c0011f90 <VgaText::scrollScreen()+0x4a>
c0011f70:	f7 c7 01 00 00 00    	test   edi,0x1
c0011f76:	74 15                	je     c0011f8d <VgaText::scrollScreen()+0x47>
c0011f78:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011f7c:	50                   	push   eax
c0011f7d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011f81:	50                   	push   eax
c0011f82:	e8 ad ff ff ff       	call   c0011f34 <VgaText::combineColours(unsigned char, unsigned char)>
c0011f87:	5a                   	pop    edx
c0011f88:	5a                   	pop    edx
c0011f89:	88 01                	mov    BYTE PTR [ecx],al
c0011f8b:	eb 03                	jmp    c0011f90 <VgaText::scrollScreen()+0x4a>
c0011f8d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0011f90:	47                   	inc    edi
c0011f91:	41                   	inc    ecx
c0011f92:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0011f98:	75 c9                	jne    c0011f63 <VgaText::scrollScreen()+0x1d>
c0011f9a:	46                   	inc    esi
c0011f9b:	83 fe 19             	cmp    esi,0x19
c0011f9e:	75 b9                	jne    c0011f59 <VgaText::scrollScreen()+0x13>
c0011fa0:	39 1d f4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1f4,ebx
c0011fa6:	75 1f                	jne    c0011fc7 <VgaText::scrollScreen()+0x81>
c0011fa8:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0011fac:	74 05                	je     c0011fb3 <VgaText::scrollScreen()+0x6d>
c0011fae:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0011fb1:	eb 14                	jmp    c0011fc7 <VgaText::scrollScreen()+0x81>
c0011fb3:	50                   	push   eax
c0011fb4:	50                   	push   eax
c0011fb5:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011fb9:	50                   	push   eax
c0011fba:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011fbe:	50                   	push   eax
c0011fbf:	e8 24 9a 00 00       	call   c001b9e8 <HalConsoleScroll(int, int)>
c0011fc4:	83 c4 10             	add    esp,0x10
c0011fc7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011fcb:	83 c4 0c             	add    esp,0xc
c0011fce:	5b                   	pop    ebx
c0011fcf:	5e                   	pop    esi
c0011fd0:	5f                   	pop    edi
c0011fd1:	5d                   	pop    ebp
c0011fd2:	e9 79 fe ff ff       	jmp    c0011e50 <VgaText::updateCursor()>
c0011fd7:	90                   	nop

c0011fd8 <VgaText::combineCharAndColour(char, unsigned char)>:
c0011fd8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0011fdd:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0011fe2:	c1 e0 08             	shl    eax,0x8
c0011fe5:	09 d0                	or     eax,edx
c0011fe7:	c3                   	ret    

c0011fe8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0011fe8:	55                   	push   ebp
c0011fe9:	57                   	push   edi
c0011fea:	56                   	push   esi
c0011feb:	53                   	push   ebx
c0011fec:	83 ec 1c             	sub    esp,0x1c
c0011fef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ff3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011ff7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011ffb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011fff:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012002:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012006:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001200a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001200e:	85 ed                	test   ebp,ebp
c0012010:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012014:	75 14                	jne    c001202a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0012016:	c7 44 24 30 76 49 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024976
c001201e:	83 c4 1c             	add    esp,0x1c
c0012021:	5b                   	pop    ebx
c0012022:	5e                   	pop    esi
c0012023:	5f                   	pop    edi
c0012024:	5d                   	pop    ebp
c0012025:	e9 92 da ff ff       	jmp    c000fabc <KePanic(char const*)>
c001202a:	50                   	push   eax
c001202b:	50                   	push   eax
c001202c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012031:	50                   	push   eax
c0012032:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012037:	50                   	push   eax
c0012038:	e8 f7 fe ff ff       	call   c0011f34 <VgaText::combineColours(unsigned char, unsigned char)>
c001203d:	5a                   	pop    edx
c001203e:	5a                   	pop    edx
c001203f:	0f b6 c0             	movzx  eax,al
c0012042:	0f be c9             	movsx  ecx,cl
c0012045:	50                   	push   eax
c0012046:	51                   	push   ecx
c0012047:	e8 8c ff ff ff       	call   c0011fd8 <VgaText::combineCharAndColour(char, unsigned char)>
c001204c:	6b d6 50             	imul   edx,esi,0x50
c001204f:	83 c4 10             	add    esp,0x10
c0012052:	01 da                	add    edx,ebx
c0012054:	0f b7 d2             	movzx  edx,dx
c0012057:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c001205c:	39 3d f4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1f4,edi
c0012062:	75 28                	jne    c001208c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012064:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012068:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001206c:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012070:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012074:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012078:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001207c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012080:	83 c4 1c             	add    esp,0x1c
c0012083:	5b                   	pop    ebx
c0012084:	5e                   	pop    esi
c0012085:	5f                   	pop    edi
c0012086:	5d                   	pop    ebp
c0012087:	e9 64 9a 00 00       	jmp    c001baf0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001208c:	83 c4 1c             	add    esp,0x1c
c001208f:	5b                   	pop    ebx
c0012090:	5e                   	pop    esi
c0012091:	5f                   	pop    edi
c0012092:	5d                   	pop    ebp
c0012093:	c3                   	ret    

c0012094 <VgaText::getCursorX()>:
c0012094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012098:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001209b:	c3                   	ret    

c001209c <VgaText::getCursorY()>:
c001209c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120a0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00120a3:	c3                   	ret    

c00120a4 <VgaText::setCursor(int, int)>:
c00120a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120ac:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00120af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120b3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00120b6:	e9 95 fd ff ff       	jmp    c0011e50 <VgaText::updateCursor()>

c00120bb <setActiveTerminal(VgaText*)>:
c00120bb:	53                   	push   ebx
c00120bc:	83 ec 08             	sub    esp,0x8
c00120bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120c3:	85 db                	test   ebx,ebx
c00120c5:	75 11                	jne    c00120d8 <setActiveTerminal(VgaText*)+0x1d>
c00120c7:	c7 44 24 10 86 49 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024986
c00120cf:	83 c4 08             	add    esp,0x8
c00120d2:	5b                   	pop    ebx
c00120d3:	e9 e4 d9 ff ff       	jmp    c000fabc <KePanic(char const*)>
c00120d8:	a1 f4 d1 02 c0       	mov    eax,ds:0xc002d1f4
c00120dd:	85 c0                	test   eax,eax
c00120df:	74 0c                	je     c00120ed <setActiveTerminal(VgaText*)+0x32>
c00120e1:	83 ec 0c             	sub    esp,0xc
c00120e4:	50                   	push   eax
c00120e5:	e8 66 fd ff ff       	call   c0011e50 <VgaText::updateCursor()>
c00120ea:	83 c4 10             	add    esp,0x10
c00120ed:	50                   	push   eax
c00120ee:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00120f1:	89 1d f4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1f4,ebx
c00120f7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00120fa:	53                   	push   ebx
c00120fb:	e8 a4 ff ff ff       	call   c00120a4 <VgaText::setCursor(int, int)>
c0012100:	83 c4 18             	add    esp,0x18
c0012103:	5b                   	pop    ebx
c0012104:	c3                   	ret    
c0012105:	90                   	nop

c0012106 <VgaText::clearScreen()>:
c0012106:	57                   	push   edi
c0012107:	56                   	push   esi
c0012108:	31 f6                	xor    esi,esi
c001210a:	53                   	push   ebx
c001210b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001210f:	52                   	push   edx
c0012110:	6a 00                	push   0x0
c0012112:	6a 00                	push   0x0
c0012114:	53                   	push   ebx
c0012115:	e8 8a ff ff ff       	call   c00120a4 <VgaText::setCursor(int, int)>
c001211a:	83 c4 10             	add    esp,0x10
c001211d:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012124:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0012127:	7e 20                	jle    c0012149 <VgaText::clearScreen()+0x43>
c0012129:	31 ff                	xor    edi,edi
c001212b:	50                   	push   eax
c001212c:	50                   	push   eax
c001212d:	56                   	push   esi
c001212e:	57                   	push   edi
c001212f:	47                   	inc    edi
c0012130:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012133:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012136:	6a 20                	push   0x20
c0012138:	53                   	push   ebx
c0012139:	e8 aa fe ff ff       	call   c0011fe8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001213e:	83 c4 20             	add    esp,0x20
c0012141:	83 ff 50             	cmp    edi,0x50
c0012144:	75 e5                	jne    c001212b <VgaText::clearScreen()+0x25>
c0012146:	46                   	inc    esi
c0012147:	eb db                	jmp    c0012124 <VgaText::clearScreen()+0x1e>
c0012149:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012150:	5b                   	pop    ebx
c0012151:	5e                   	pop    esi
c0012152:	5f                   	pop    edi
c0012153:	c3                   	ret    

c0012154 <VgaText::setCursorX(int)>:
c0012154:	83 ec 10             	sub    esp,0x10
c0012157:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001215b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001215e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012162:	50                   	push   eax
c0012163:	e8 3c ff ff ff       	call   c00120a4 <VgaText::setCursor(int, int)>
c0012168:	83 c4 1c             	add    esp,0x1c
c001216b:	c3                   	ret    

c001216c <VgaText::setCursorY(int)>:
c001216c:	83 ec 10             	sub    esp,0x10
c001216f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012173:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012177:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001217a:	50                   	push   eax
c001217b:	e8 24 ff ff ff       	call   c00120a4 <VgaText::setCursor(int, int)>
c0012180:	83 c4 1c             	add    esp,0x1c
c0012183:	c3                   	ret    

c0012184 <VgaText::incrementCursor(bool)>:
c0012184:	56                   	push   esi
c0012185:	53                   	push   ebx
c0012186:	51                   	push   ecx
c0012187:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001218b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001218f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012192:	40                   	inc    eax
c0012193:	83 f8 50             	cmp    eax,0x50
c0012196:	74 05                	je     c001219d <VgaText::incrementCursor(bool)+0x19>
c0012198:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001219b:	eb 24                	jmp    c00121c1 <VgaText::incrementCursor(bool)+0x3d>
c001219d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00121a4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00121a7:	8d 50 01             	lea    edx,[eax+0x1]
c00121aa:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00121ad:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00121b0:	75 0f                	jne    c00121c1 <VgaText::incrementCursor(bool)+0x3d>
c00121b2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00121b5:	83 ec 0c             	sub    esp,0xc
c00121b8:	53                   	push   ebx
c00121b9:	e8 88 fd ff ff       	call   c0011f46 <VgaText::scrollScreen()>
c00121be:	83 c4 10             	add    esp,0x10
c00121c1:	89 f0                	mov    eax,esi
c00121c3:	84 c0                	test   al,al
c00121c5:	74 0c                	je     c00121d3 <VgaText::incrementCursor(bool)+0x4f>
c00121c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00121cb:	5a                   	pop    edx
c00121cc:	5b                   	pop    ebx
c00121cd:	5e                   	pop    esi
c00121ce:	e9 7d fc ff ff       	jmp    c0011e50 <VgaText::updateCursor()>
c00121d3:	58                   	pop    eax
c00121d4:	5b                   	pop    ebx
c00121d5:	5e                   	pop    esi
c00121d6:	c3                   	ret    
c00121d7:	90                   	nop

c00121d8 <VgaText::decrementCursor(bool)>:
c00121d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00121dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00121e0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00121e3:	85 c0                	test   eax,eax
c00121e5:	74 04                	je     c00121eb <VgaText::decrementCursor(bool)+0x13>
c00121e7:	48                   	dec    eax
c00121e8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00121eb:	84 c9                	test   cl,cl
c00121ed:	74 09                	je     c00121f8 <VgaText::decrementCursor(bool)+0x20>
c00121ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00121f3:	e9 58 fc ff ff       	jmp    c0011e50 <VgaText::updateCursor()>
c00121f8:	c3                   	ret    
c00121f9:	90                   	nop

c00121fa <VgaText::putchar(char, VgaColour, VgaColour)>:
c00121fa:	53                   	push   ebx
c00121fb:	83 ec 08             	sub    esp,0x8
c00121fe:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0012203:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012207:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001220b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001220f:	83 f8 07             	cmp    eax,0x7
c0012212:	75 21                	jne    c0012235 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012214:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001221c:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012224:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c001222c:	83 c4 08             	add    esp,0x8
c001222f:	5b                   	pop    ebx
c0012230:	e9 f6 67 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c0012235:	83 f8 0d             	cmp    eax,0xd
c0012238:	75 09                	jne    c0012243 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001223a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012241:	eb 2d                	jmp    c0012270 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012243:	83 f8 0a             	cmp    eax,0xa
c0012246:	75 31                	jne    c0012279 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012248:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001224f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012252:	8d 50 01             	lea    edx,[eax+0x1]
c0012255:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012258:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001225b:	75 0f                	jne    c001226c <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c001225d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012260:	83 ec 0c             	sub    esp,0xc
c0012263:	53                   	push   ebx
c0012264:	e8 dd fc ff ff       	call   c0011f46 <VgaText::scrollScreen()>
c0012269:	83 c4 10             	add    esp,0x10
c001226c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012270:	83 c4 08             	add    esp,0x8
c0012273:	5b                   	pop    ebx
c0012274:	e9 d7 fb ff ff       	jmp    c0011e50 <VgaText::updateCursor()>
c0012279:	83 f8 08             	cmp    eax,0x8
c001227c:	75 25                	jne    c00122a3 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001227e:	50                   	push   eax
c001227f:	50                   	push   eax
c0012280:	6a 01                	push   0x1
c0012282:	53                   	push   ebx
c0012283:	e8 50 ff ff ff       	call   c00121d8 <VgaText::decrementCursor(bool)>
c0012288:	5a                   	pop    edx
c0012289:	59                   	pop    ecx
c001228a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001228d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012290:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012293:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012296:	6a 20                	push   0x20
c0012298:	53                   	push   ebx
c0012299:	e8 4a fd ff ff       	call   c0011fe8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001229e:	83 c4 28             	add    esp,0x28
c00122a1:	5b                   	pop    ebx
c00122a2:	c3                   	ret    
c00122a3:	83 ec 08             	sub    esp,0x8
c00122a6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00122a9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00122ac:	51                   	push   ecx
c00122ad:	52                   	push   edx
c00122ae:	50                   	push   eax
c00122af:	53                   	push   ebx
c00122b0:	e8 33 fd ff ff       	call   c0011fe8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00122b5:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00122b9:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00122c1:	83 c4 28             	add    esp,0x28
c00122c4:	5b                   	pop    ebx
c00122c5:	e9 ba fe ff ff       	jmp    c0012184 <VgaText::incrementCursor(bool)>

c00122ca <VgaText::putchar(char)>:
c00122ca:	57                   	push   edi
c00122cb:	56                   	push   esi
c00122cc:	53                   	push   ebx
c00122cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00122d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122d5:	0f be c2             	movsx  eax,dl
c00122d8:	83 f8 5b             	cmp    eax,0x5b
c00122db:	75 18                	jne    c00122f5 <VgaText::putchar(char)+0x2b>
c00122dd:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00122e1:	74 20                	je     c0012303 <VgaText::putchar(char)+0x39>
c00122e3:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00122e9:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00122f0:	e9 b8 00 00 00       	jmp    c00123ad <VgaText::putchar(char)+0xe3>
c00122f5:	83 f8 1b             	cmp    eax,0x1b
c00122f8:	75 09                	jne    c0012303 <VgaText::putchar(char)+0x39>
c00122fa:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00122fe:	e9 aa 00 00 00       	jmp    c00123ad <VgaText::putchar(char)+0xe3>
c0012303:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0012307:	89 f9                	mov    ecx,edi
c0012309:	84 c9                	test   cl,cl
c001230b:	0f 84 8c 00 00 00    	je     c001239d <VgaText::putchar(char)+0xd3>
c0012311:	8d 4a c0             	lea    ecx,[edx-0x40]
c0012314:	80 f9 3e             	cmp    cl,0x3e
c0012317:	77 70                	ja     c0012389 <VgaText::putchar(char)+0xbf>
c0012319:	83 f8 6d             	cmp    eax,0x6d
c001231c:	75 3f                	jne    c001235d <VgaText::putchar(char)+0x93>
c001231e:	31 f6                	xor    esi,esi
c0012320:	31 d2                	xor    edx,edx
c0012322:	31 c0                	xor    eax,eax
c0012324:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0012327:	7e 25                	jle    c001234e <VgaText::putchar(char)+0x84>
c0012329:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001232e:	83 fa 3b             	cmp    edx,0x3b
c0012331:	75 0f                	jne    c0012342 <VgaText::putchar(char)+0x78>
c0012333:	50                   	push   eax
c0012334:	53                   	push   ebx
c0012335:	e8 2c fb ff ff       	call   c0011e66 <VgaText::doANSI_SGR(int)>
c001233a:	31 d2                	xor    edx,edx
c001233c:	59                   	pop    ecx
c001233d:	58                   	pop    eax
c001233e:	31 c0                	xor    eax,eax
c0012340:	eb 09                	jmp    c001234b <VgaText::putchar(char)+0x81>
c0012342:	6b c0 0a             	imul   eax,eax,0xa
c0012345:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012349:	89 fa                	mov    edx,edi
c001234b:	46                   	inc    esi
c001234c:	eb d6                	jmp    c0012324 <VgaText::putchar(char)+0x5a>
c001234e:	84 d2                	test   dl,dl
c0012350:	74 2f                	je     c0012381 <VgaText::putchar(char)+0xb7>
c0012352:	50                   	push   eax
c0012353:	53                   	push   ebx
c0012354:	e8 0d fb ff ff       	call   c0011e66 <VgaText::doANSI_SGR(int)>
c0012359:	58                   	pop    eax
c001235a:	5a                   	pop    edx
c001235b:	eb 24                	jmp    c0012381 <VgaText::putchar(char)+0xb7>
c001235d:	83 f8 4a             	cmp    eax,0x4a
c0012360:	75 1f                	jne    c0012381 <VgaText::putchar(char)+0xb7>
c0012362:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012366:	75 19                	jne    c0012381 <VgaText::putchar(char)+0xb7>
c0012368:	83 ec 0c             	sub    esp,0xc
c001236b:	53                   	push   ebx
c001236c:	e8 95 fd ff ff       	call   c0012106 <VgaText::clearScreen()>
c0012371:	83 c4 0c             	add    esp,0xc
c0012374:	6a 00                	push   0x0
c0012376:	6a 00                	push   0x0
c0012378:	53                   	push   ebx
c0012379:	e8 26 fd ff ff       	call   c00120a4 <VgaText::setCursor(int, int)>
c001237e:	83 c4 10             	add    esp,0x10
c0012381:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012387:	eb 24                	jmp    c00123ad <VgaText::putchar(char)+0xe3>
c0012389:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001238c:	83 f8 0e             	cmp    eax,0xe
c001238f:	7f 1c                	jg     c00123ad <VgaText::putchar(char)+0xe3>
c0012391:	8d 48 01             	lea    ecx,[eax+0x1]
c0012394:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0012397:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c001239b:	eb 10                	jmp    c00123ad <VgaText::putchar(char)+0xe3>
c001239d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00123a0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00123a3:	50                   	push   eax
c00123a4:	53                   	push   ebx
c00123a5:	e8 50 fe ff ff       	call   c00121fa <VgaText::putchar(char, VgaColour, VgaColour)>
c00123aa:	83 c4 10             	add    esp,0x10
c00123ad:	5b                   	pop    ebx
c00123ae:	5e                   	pop    esi
c00123af:	5f                   	pop    edi
c00123b0:	c3                   	ret    
c00123b1:	90                   	nop

c00123b2 <VgaText::putx(unsigned int)>:
c00123b2:	57                   	push   edi
c00123b3:	b9 11 00 00 00       	mov    ecx,0x11
c00123b8:	56                   	push   esi
c00123b9:	be 94 49 02 c0       	mov    esi,0xc0024994
c00123be:	53                   	push   ebx
c00123bf:	83 ec 20             	sub    esp,0x20
c00123c2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00123c6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00123ca:	fc                   	cld    
c00123cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00123cd:	be 08 00 00 00       	mov    esi,0x8
c00123d2:	50                   	push   eax
c00123d3:	50                   	push   eax
c00123d4:	89 d8                	mov    eax,ebx
c00123d6:	c1 e8 1c             	shr    eax,0x1c
c00123d9:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00123de:	c1 e3 04             	shl    ebx,0x4
c00123e1:	50                   	push   eax
c00123e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123e6:	e8 df fe ff ff       	call   c00122ca <VgaText::putchar(char)>
c00123eb:	83 c4 10             	add    esp,0x10
c00123ee:	4e                   	dec    esi
c00123ef:	75 e1                	jne    c00123d2 <VgaText::putx(unsigned int)+0x20>
c00123f1:	83 c4 20             	add    esp,0x20
c00123f4:	5b                   	pop    ebx
c00123f5:	5e                   	pop    esi
c00123f6:	5f                   	pop    edi
c00123f7:	c3                   	ret    

c00123f8 <VgaText::puts(char const*)>:
c00123f8:	53                   	push   ebx
c00123f9:	83 ec 08             	sub    esp,0x8
c00123fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012400:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012403:	85 c0                	test   eax,eax
c0012405:	74 12                	je     c0012419 <VgaText::puts(char const*)+0x21>
c0012407:	51                   	push   ecx
c0012408:	43                   	inc    ebx
c0012409:	51                   	push   ecx
c001240a:	50                   	push   eax
c001240b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001240f:	e8 b6 fe ff ff       	call   c00122ca <VgaText::putchar(char)>
c0012414:	83 c4 10             	add    esp,0x10
c0012417:	eb e7                	jmp    c0012400 <VgaText::puts(char const*)+0x8>
c0012419:	83 c4 08             	add    esp,0x8
c001241c:	5b                   	pop    ebx
c001241d:	c3                   	ret    

c001241e <VgaText::write(unsigned long long, void*, int*)>:
c001241e:	55                   	push   ebp
c001241f:	57                   	push   edi
c0012420:	56                   	push   esi
c0012421:	53                   	push   ebx
c0012422:	83 ec 0c             	sub    esp,0xc
c0012425:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012429:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001242d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012431:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012438:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001243b:	39 eb                	cmp    ebx,ebp
c001243d:	74 13                	je     c0012452 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001243f:	50                   	push   eax
c0012440:	43                   	inc    ebx
c0012441:	50                   	push   eax
c0012442:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012446:	50                   	push   eax
c0012447:	56                   	push   esi
c0012448:	e8 7d fe ff ff       	call   c00122ca <VgaText::putchar(char)>
c001244d:	83 c4 10             	add    esp,0x10
c0012450:	eb e9                	jmp    c001243b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012452:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012459:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001245d:	89 38                	mov    DWORD PTR [eax],edi
c001245f:	83 c4 0c             	add    esp,0xc
c0012462:	31 c0                	xor    eax,eax
c0012464:	5b                   	pop    ebx
c0012465:	5e                   	pop    esi
c0012466:	5f                   	pop    edi
c0012467:	5d                   	pop    ebp
c0012468:	c3                   	ret    
c0012469:	90                   	nop

c001246a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001246a:	55                   	push   ebp
c001246b:	57                   	push   edi
c001246c:	56                   	push   esi
c001246d:	53                   	push   ebx
c001246e:	83 ec 1c             	sub    esp,0x1c
c0012471:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012475:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012479:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001247d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012481:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012484:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012488:	85 db                	test   ebx,ebx
c001248a:	75 14                	jne    c00124a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c001248c:	c7 44 24 30 a5 49 02 c0 	mov    DWORD PTR [esp+0x30],0xc00249a5
c0012494:	83 c4 1c             	add    esp,0x1c
c0012497:	5b                   	pop    ebx
c0012498:	5e                   	pop    esi
c0012499:	5f                   	pop    edi
c001249a:	5d                   	pop    ebp
c001249b:	e9 1c d6 ff ff       	jmp    c000fabc <KePanic(char const*)>
c00124a0:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c00124a7:	50                   	push   eax
c00124a8:	50                   	push   eax
c00124a9:	89 e8                	mov    eax,ebp
c00124ab:	0f b6 c0             	movzx  eax,al
c00124ae:	50                   	push   eax
c00124af:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00124b4:	50                   	push   eax
c00124b5:	e8 7a fa ff ff       	call   c0011f34 <VgaText::combineColours(unsigned char, unsigned char)>
c00124ba:	83 c4 10             	add    esp,0x10
c00124bd:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00124c1:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00124c4:	0f b6 c0             	movzx  eax,al
c00124c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124cb:	0f b7 c9             	movzx  ecx,cx
c00124ce:	01 c9                	add    ecx,ecx
c00124d0:	01 cb                	add    ebx,ecx
c00124d2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00124d5:	85 c0                	test   eax,eax
c00124d7:	0f 84 ef 00 00 00    	je     c00125cc <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00124dd:	83 f8 0d             	cmp    eax,0xd
c00124e0:	75 0c                	jne    c00124ee <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00124e2:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00124e9:	e9 d8 00 00 00       	jmp    c00125c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00124ee:	83 f8 0a             	cmp    eax,0xa
c00124f1:	75 44                	jne    c0012537 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c00124f3:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00124fa:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00124fd:	8d 48 01             	lea    ecx,[eax+0x1]
c0012500:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0012503:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012506:	75 0f                	jne    c0012517 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012508:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c001250b:	83 ec 0c             	sub    esp,0xc
c001250e:	57                   	push   edi
c001250f:	e8 32 fa ff ff       	call   c0011f46 <VgaText::scrollScreen()>
c0012514:	83 c4 10             	add    esp,0x10
c0012517:	83 ec 0c             	sub    esp,0xc
c001251a:	57                   	push   edi
c001251b:	e8 30 f9 ff ff       	call   c0011e50 <VgaText::updateCursor()>
c0012520:	83 c4 10             	add    esp,0x10
c0012523:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012527:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001252a:	0f b7 db             	movzx  ebx,bx
c001252d:	01 db                	add    ebx,ebx
c001252f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012532:	e9 8f 00 00 00       	jmp    c00125c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012537:	83 f8 08             	cmp    eax,0x8
c001253a:	75 34                	jne    c0012570 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c001253c:	51                   	push   ecx
c001253d:	51                   	push   ecx
c001253e:	6a 01                	push   0x1
c0012540:	57                   	push   edi
c0012541:	e8 92 fc ff ff       	call   c00121d8 <VgaText::decrementCursor(bool)>
c0012546:	5b                   	pop    ebx
c0012547:	58                   	pop    eax
c0012548:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001254b:	ff 77 14             	push   DWORD PTR [edi+0x14]
c001254e:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012551:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012554:	6a 20                	push   0x20
c0012556:	57                   	push   edi
c0012557:	e8 8c fa ff ff       	call   c0011fe8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001255c:	83 c4 20             	add    esp,0x20
c001255f:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012563:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012566:	0f b7 db             	movzx  ebx,bx
c0012569:	01 db                	add    ebx,ebx
c001256b:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001256e:	eb 56                	jmp    c00125c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012570:	52                   	push   edx
c0012571:	52                   	push   edx
c0012572:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012576:	50                   	push   eax
c0012577:	e8 5c fa ff ff       	call   c0011fd8 <VgaText::combineCharAndColour(char, unsigned char)>
c001257c:	83 c4 10             	add    esp,0x10
c001257f:	66 89 03             	mov    WORD PTR [ebx],ax
c0012582:	39 3d f4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1f4,edi
c0012588:	75 1a                	jne    c00125a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c001258a:	83 ec 0c             	sub    esp,0xc
c001258d:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012590:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012593:	55                   	push   ebp
c0012594:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012598:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001259b:	50                   	push   eax
c001259c:	e8 4f 95 00 00       	call   c001baf0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00125a1:	83 c4 20             	add    esp,0x20
c00125a4:	50                   	push   eax
c00125a5:	83 c3 02             	add    ebx,0x2
c00125a8:	50                   	push   eax
c00125a9:	6a 00                	push   0x0
c00125ab:	57                   	push   edi
c00125ac:	e8 d3 fb ff ff       	call   c0012184 <VgaText::incrementCursor(bool)>
c00125b1:	83 c4 10             	add    esp,0x10
c00125b4:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00125b8:	75 0c                	jne    c00125c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00125ba:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00125be:	0f b7 db             	movzx  ebx,bx
c00125c1:	01 db                	add    ebx,ebx
c00125c3:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00125c6:	46                   	inc    esi
c00125c7:	e9 06 ff ff ff       	jmp    c00124d2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00125cc:	83 ec 0c             	sub    esp,0xc
c00125cf:	57                   	push   edi
c00125d0:	e8 7b f8 ff ff       	call   c0011e50 <VgaText::updateCursor()>
c00125d5:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c00125dc:	83 c4 2c             	add    esp,0x2c
c00125df:	5b                   	pop    ebx
c00125e0:	5e                   	pop    esi
c00125e1:	5f                   	pop    edi
c00125e2:	5d                   	pop    ebp
c00125e3:	c3                   	ret    

c00125e4 <VgaText::VgaText(char const*)>:
c00125e4:	56                   	push   esi
c00125e5:	53                   	push   ebx
c00125e6:	83 ec 04             	sub    esp,0x4
c00125e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125ed:	83 ec 08             	sub    esp,0x8
c00125f0:	6a 00                	push   0x0
c00125f2:	50                   	push   eax
c00125f3:	e8 b8 05 00 00       	call   c0012bb0 <UnixFile::UnixFile(int)>
c00125f8:	83 c4 10             	add    esp,0x10
c00125fb:	ba dc 49 02 c0       	mov    edx,0xc00249dc
c0012600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012604:	89 10                	mov    DWORD PTR [eax],edx
c0012606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001260a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012615:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001261c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012620:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012628:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001262c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012630:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001263b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012646:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001264d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012651:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012658:	83 ec 0c             	sub    esp,0xc
c001265b:	68 b5 49 02 c0       	push   0xc00249b5
c0012660:	e8 01 49 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012665:	83 c4 10             	add    esp,0x10
c0012668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001266c:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012673:	83 ec 0c             	sub    esp,0xc
c0012676:	6a 01                	push   0x1
c0012678:	e8 86 09 00 00       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c001267d:	83 c4 10             	add    esp,0x10
c0012680:	89 c2                	mov    edx,eax
c0012682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012686:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012689:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c001268f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012693:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012696:	89 c6                	mov    esi,eax
c0012698:	e8 19 d6 ff ff       	call   c000fcb6 <Phys::allocatePage()>
c001269d:	68 05 0c 00 00       	push   0xc05
c00126a2:	56                   	push   esi
c00126a3:	50                   	push   eax
c00126a4:	53                   	push   ebx
c00126a5:	e8 32 10 00 00       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c00126aa:	83 c4 10             	add    esp,0x10
c00126ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126b1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126b4:	83 ec 04             	sub    esp,0x4
c00126b7:	68 a0 0f 00 00       	push   0xfa0
c00126bc:	6a 00                	push   0x0
c00126be:	50                   	push   eax
c00126bf:	e8 2c de fe ff       	call   c00004f0 <memset>
c00126c4:	83 c4 10             	add    esp,0x10
c00126c7:	83 ec 04             	sub    esp,0x4
c00126ca:	6a 00                	push   0x0
c00126cc:	6a 07                	push   0x7
c00126ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126d2:	e8 23 f8 ff ff       	call   c0011efa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00126d7:	83 c4 10             	add    esp,0x10
c00126da:	83 ec 04             	sub    esp,0x4
c00126dd:	6a 00                	push   0x0
c00126df:	6a 00                	push   0x0
c00126e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126e5:	e8 ba f9 ff ff       	call   c00120a4 <VgaText::setCursor(int, int)>
c00126ea:	83 c4 10             	add    esp,0x10
c00126ed:	83 ec 0c             	sub    esp,0xc
c00126f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126f4:	e8 0d fa ff ff       	call   c0012106 <VgaText::clearScreen()>
c00126f9:	83 c4 10             	add    esp,0x10
c00126fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012700:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012708:	05 82 00 00 00       	add    eax,0x82
c001270d:	83 ec 04             	sub    esp,0x4
c0012710:	68 80 00 00 00       	push   0x80
c0012715:	6a 00                	push   0x0
c0012717:	50                   	push   eax
c0012718:	e8 d3 dd fe ff       	call   c00004f0 <memset>
c001271d:	83 c4 10             	add    esp,0x10
c0012720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012724:	05 02 01 00 00       	add    eax,0x102
c0012729:	83 ec 04             	sub    esp,0x4
c001272c:	68 80 00 00 00       	push   0x80
c0012731:	6a 00                	push   0x0
c0012733:	50                   	push   eax
c0012734:	e8 b7 dd fe ff       	call   c00004f0 <memset>
c0012739:	83 c4 10             	add    esp,0x10
c001273c:	90                   	nop
c001273d:	83 c4 04             	add    esp,0x4
c0012740:	5b                   	pop    ebx
c0012741:	5e                   	pop    esi
c0012742:	c3                   	ret    
c0012743:	90                   	nop

c0012744 <VgaText::receiveKey(unsigned char)>:
c0012744:	55                   	push   ebp
c0012745:	57                   	push   edi
c0012746:	56                   	push   esi
c0012747:	53                   	push   ebx
c0012748:	83 ec 2c             	sub    esp,0x2c
c001274b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001274f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012753:	89 fd                	mov    ebp,edi
c0012755:	81 e5 ff 00 00 00    	and    ebp,0xff
c001275b:	0f 84 48 01 00 00    	je     c00128a9 <VgaText::receiveKey(unsigned char)+0x165>
c0012761:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012767:	83 fd 08             	cmp    ebp,0x8
c001276a:	75 6a                	jne    c00127d6 <VgaText::receiveKey(unsigned char)+0x92>
c001276c:	83 ec 0c             	sub    esp,0xc
c001276f:	56                   	push   esi
c0012770:	e8 0b de fe ff       	call   c0000580 <strlen>
c0012775:	83 c4 10             	add    esp,0x10
c0012778:	85 c0                	test   eax,eax
c001277a:	0f 84 ef 00 00 00    	je     c001286f <VgaText::receiveKey(unsigned char)+0x12b>
c0012780:	50                   	push   eax
c0012781:	50                   	push   eax
c0012782:	6a 08                	push   0x8
c0012784:	53                   	push   ebx
c0012785:	e8 40 fb ff ff       	call   c00122ca <VgaText::putchar(char)>
c001278a:	89 34 24             	mov    DWORD PTR [esp],esi
c001278d:	e8 ee dd fe ff       	call   c0000580 <strlen>
c0012792:	83 c4 10             	add    esp,0x10
c0012795:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001279d:	83 fa 1f             	cmp    edx,0x1f
c00127a0:	89 d0                	mov    eax,edx
c00127a2:	7f 1c                	jg     c00127c0 <VgaText::receiveKey(unsigned char)+0x7c>
c00127a4:	83 e8 08             	sub    eax,0x8
c00127a7:	3c 02                	cmp    al,0x2
c00127a9:	76 15                	jbe    c00127c0 <VgaText::receiveKey(unsigned char)+0x7c>
c00127ab:	83 fa 0d             	cmp    edx,0xd
c00127ae:	74 10                	je     c00127c0 <VgaText::receiveKey(unsigned char)+0x7c>
c00127b0:	57                   	push   edi
c00127b1:	57                   	push   edi
c00127b2:	68 c8 49 02 c0       	push   0xc00249c8
c00127b7:	53                   	push   ebx
c00127b8:	e8 3b fc ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c00127bd:	83 c4 10             	add    esp,0x10
c00127c0:	83 ec 0c             	sub    esp,0xc
c00127c3:	56                   	push   esi
c00127c4:	e8 b7 dd fe ff       	call   c0000580 <strlen>
c00127c9:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c00127d1:	e9 96 00 00 00       	jmp    c001286c <VgaText::receiveKey(unsigned char)+0x128>
c00127d6:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c00127dc:	83 ec 0c             	sub    esp,0xc
c00127df:	50                   	push   eax
c00127e0:	e8 9b dd fe ff       	call   c0000580 <strlen>
c00127e5:	89 34 24             	mov    DWORD PTR [esp],esi
c00127e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127ec:	e8 8f dd fe ff       	call   c0000580 <strlen>
c00127f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127f5:	83 c4 10             	add    esp,0x10
c00127f8:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c00127fc:	3d 80 00 00 00       	cmp    eax,0x80
c0012801:	0f 87 a2 00 00 00    	ja     c00128a9 <VgaText::receiveKey(unsigned char)+0x165>
c0012807:	8d 47 ff             	lea    eax,[edi-0x1]
c001280a:	3c 1e                	cmp    al,0x1e
c001280c:	77 35                	ja     c0012843 <VgaText::receiveKey(unsigned char)+0xff>
c001280e:	8d 47 f7             	lea    eax,[edi-0x9]
c0012811:	3c 01                	cmp    al,0x1
c0012813:	76 2e                	jbe    c0012843 <VgaText::receiveKey(unsigned char)+0xff>
c0012815:	83 fd 0d             	cmp    ebp,0xd
c0012818:	74 29                	je     c0012843 <VgaText::receiveKey(unsigned char)+0xff>
c001281a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001281d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012820:	68 ce 49 02 c0       	push   0xc00249ce
c0012825:	53                   	push   ebx
c0012826:	e8 3f fc ff ff       	call   c001246a <VgaText::puts(char const*, VgaColour, VgaColour)>
c001282b:	8d 47 40             	lea    eax,[edi+0x40]
c001282e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012831:	0f b6 c0             	movzx  eax,al
c0012834:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012837:	50                   	push   eax
c0012838:	53                   	push   ebx
c0012839:	e8 bc f9 ff ff       	call   c00121fa <VgaText::putchar(char, VgaColour, VgaColour)>
c001283e:	83 c4 20             	add    esp,0x20
c0012841:	eb 11                	jmp    c0012854 <VgaText::receiveKey(unsigned char)+0x110>
c0012843:	51                   	push   ecx
c0012844:	89 f8                	mov    eax,edi
c0012846:	51                   	push   ecx
c0012847:	0f be c0             	movsx  eax,al
c001284a:	50                   	push   eax
c001284b:	53                   	push   ebx
c001284c:	e8 79 fa ff ff       	call   c00122ca <VgaText::putchar(char)>
c0012851:	83 c4 10             	add    esp,0x10
c0012854:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012859:	89 f8                	mov    eax,edi
c001285b:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001285f:	52                   	push   edx
c0012860:	52                   	push   edx
c0012861:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012865:	50                   	push   eax
c0012866:	56                   	push   esi
c0012867:	e8 04 e0 fe ff       	call   c0000870 <strcat>
c001286c:	83 c4 10             	add    esp,0x10
c001286f:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0012876:	75 0f                	jne    c0012887 <VgaText::receiveKey(unsigned char)+0x143>
c0012878:	83 fd 1c             	cmp    ebp,0x1c
c001287b:	77 2c                	ja     c00128a9 <VgaText::receiveKey(unsigned char)+0x165>
c001287d:	b8 08 04 00 10       	mov    eax,0x10000408
c0012882:	0f a3 e8             	bt     eax,ebp
c0012885:	73 22                	jae    c00128a9 <VgaText::receiveKey(unsigned char)+0x165>
c0012887:	50                   	push   eax
c0012888:	81 c3 02 01 00 00    	add    ebx,0x102
c001288e:	50                   	push   eax
c001288f:	56                   	push   esi
c0012890:	53                   	push   ebx
c0012891:	e8 da df fe ff       	call   c0000870 <strcat>
c0012896:	83 c4 0c             	add    esp,0xc
c0012899:	68 80 00 00 00       	push   0x80
c001289e:	6a 00                	push   0x0
c00128a0:	56                   	push   esi
c00128a1:	e8 4a dc fe ff       	call   c00004f0 <memset>
c00128a6:	83 c4 10             	add    esp,0x10
c00128a9:	83 c4 2c             	add    esp,0x2c
c00128ac:	5b                   	pop    ebx
c00128ad:	5e                   	pop    esi
c00128ae:	5f                   	pop    edi
c00128af:	5d                   	pop    ebp
c00128b0:	c3                   	ret    
c00128b1:	90                   	nop

c00128b2 <VgaText::doUpdate()>:
c00128b2:	c3                   	ret    
c00128b3:	90                   	nop

c00128b4 <TSS::TSS()>:
c00128b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00128bf:	90                   	nop
c00128c0:	c3                   	ret    
c00128c1:	90                   	nop
c00128c2:	66 90                	xchg   ax,ax

c00128c4 <TSS::setESP(unsigned long)>:
c00128c4:	55                   	push   ebp
c00128c5:	89 e5                	mov    ebp,esp
c00128c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00128ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00128cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00128d0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00128d3:	90                   	nop
c00128d4:	5d                   	pop    ebp
c00128d5:	c3                   	ret    
c00128d6:	66 90                	xchg   ax,ax

c00128d8 <TSS::flush()>:
c00128d8:	55                   	push   ebp
c00128d9:	89 e5                	mov    ebp,esp
c00128db:	83 ec 10             	sub    esp,0x10
c00128de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00128e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00128e3:	83 c8 03             	or     eax,0x3
c00128e6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00128ea:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00128ee:	66 89 d0             	mov    ax,dx
c00128f1:	0f 00 d8             	ltr    ax
c00128f4:	90                   	nop
c00128f5:	c9                   	leave  
c00128f6:	c3                   	ret    
c00128f7:	90                   	nop

c00128f8 <TSS::setup(unsigned long, unsigned long)>:
c00128f8:	55                   	push   ebp
c00128f9:	89 e5                	mov    ebp,esp
c00128fb:	83 ec 18             	sub    esp,0x18
c00128fe:	83 ec 0c             	sub    esp,0xc
c0012901:	6a 68                	push   0x68
c0012903:	e8 60 cd ff ff       	call   c000f668 <malloc>
c0012908:	83 c4 10             	add    esp,0x10
c001290b:	89 c2                	mov    edx,eax
c001290d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012910:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012916:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012919:	83 ec 08             	sub    esp,0x8
c001291c:	50                   	push   eax
c001291d:	68 f0 49 02 c0       	push   0xc00249f0
c0012922:	e8 3f 46 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012927:	83 c4 10             	add    esp,0x10
c001292a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001292d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012930:	83 ec 04             	sub    esp,0x4
c0012933:	6a 68                	push   0x68
c0012935:	6a 00                	push   0x0
c0012937:	50                   	push   eax
c0012938:	e8 b3 db fe ff       	call   c00004f0 <memset>
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012943:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012946:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001294c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001294f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012952:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001295b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001295e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012961:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012967:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001296a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012973:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012976:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001297c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001297f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012982:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001298b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001298e:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012997:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001299a:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00129a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129a6:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00129ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129b2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00129b5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00129b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00129c1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00129c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129ca:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00129d1:	83 ec 0c             	sub    esp,0xc
c00129d4:	68 07 4a 02 c0       	push   0xc0024a07
c00129d9:	e8 88 45 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00129de:	83 c4 10             	add    esp,0x10
c00129e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129e7:	0f 20 da             	mov    edx,cr3
c00129ea:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00129ed:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00129f0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00129f3:	83 ec 0c             	sub    esp,0xc
c00129f6:	68 0a 4a 02 c0       	push   0xc0024a0a
c00129fb:	e8 66 45 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012a00:	83 c4 10             	add    esp,0x10
c0012a03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a09:	83 ec 08             	sub    esp,0x8
c0012a0c:	50                   	push   eax
c0012a0d:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012a10:	50                   	push   eax
c0012a11:	e8 a2 bd ff ff       	call   c000e7b8 <GDTEntry::setBase(unsigned int)>
c0012a16:	83 c4 10             	add    esp,0x10
c0012a19:	83 ec 08             	sub    esp,0x8
c0012a1c:	6a 68                	push   0x68
c0012a1e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012a21:	50                   	push   eax
c0012a22:	e8 ad bd ff ff       	call   c000e7d4 <GDTEntry::setLimit(unsigned int)>
c0012a27:	83 c4 10             	add    esp,0x10
c0012a2a:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012a2e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012a31:	83 e0 0f             	and    eax,0xf
c0012a34:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012a37:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012a3a:	83 c8 40             	or     eax,0x40
c0012a3d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012a40:	83 ec 0c             	sub    esp,0xc
c0012a43:	68 0d 4a 02 c0       	push   0xc0024a0d
c0012a48:	e8 19 45 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012a4d:	83 c4 10             	add    esp,0x10
c0012a50:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0012a55:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012a5b:	83 ec 08             	sub    esp,0x8
c0012a5e:	50                   	push   eax
c0012a5f:	68 10 4a 02 c0       	push   0xc0024a10
c0012a64:	e8 fd 44 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012a69:	83 c4 10             	add    esp,0x10
c0012a6c:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0012a71:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012a77:	05 64 01 00 00       	add    eax,0x164
c0012a7c:	83 ec 04             	sub    esp,0x4
c0012a7f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012a82:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012a85:	50                   	push   eax
c0012a86:	e8 7d bd ff ff       	call   c000e808 <GDT::addEntry(GDTEntry)>
c0012a8b:	83 c4 10             	add    esp,0x10
c0012a8e:	89 c2                	mov    edx,eax
c0012a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a93:	89 10                	mov    DWORD PTR [eax],edx
c0012a95:	83 ec 0c             	sub    esp,0xc
c0012a98:	68 25 4a 02 c0       	push   0xc0024a25
c0012a9d:	e8 c4 44 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012aa2:	83 c4 10             	add    esp,0x10
c0012aa5:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0012aaa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012ab0:	05 64 01 00 00       	add    eax,0x164
c0012ab5:	83 ec 0c             	sub    esp,0xc
c0012ab8:	50                   	push   eax
c0012ab9:	e8 74 bd ff ff       	call   c000e832 <GDT::flush()>
c0012abe:	83 c4 10             	add    esp,0x10
c0012ac1:	83 ec 0c             	sub    esp,0xc
c0012ac4:	68 28 4a 02 c0       	push   0xc0024a28
c0012ac9:	e8 98 44 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012ace:	83 c4 10             	add    esp,0x10
c0012ad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ad4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ad6:	c9                   	leave  
c0012ad7:	c3                   	ret    

c0012ad8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012adc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012ae0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ae3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012ae8:	75 08                	jne    c0012af2 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012aea:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012af0:	eb 38                	jmp    c0012b2a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012af2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012af7:	75 17                	jne    c0012b10 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012af9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012afe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012b01:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012b07:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b0d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012b10:	89 c1                	mov    ecx,eax
c0012b12:	83 e1 fd             	and    ecx,0xfffffffd
c0012b15:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012b1b:	74 cd                	je     c0012aea <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012b1d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012b22:	83 e0 ef             	and    eax,0xffffffef
c0012b25:	83 f8 08             	cmp    eax,0x8
c0012b28:	76 c0                	jbe    c0012aea <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012b2a:	31 c0                	xor    eax,eax
c0012b2c:	c3                   	ret    
c0012b2d:	90                   	nop

c0012b2e <ReservedFilename::isAtty()>:
c0012b2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b32:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012b35:	31 c0                	xor    eax,eax
c0012b37:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012b3d:	74 09                	je     c0012b48 <ReservedFilename::isAtty()+0x1a>
c0012b3f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012b45:	0f 94 c0             	sete   al
c0012b48:	c3                   	ret    
c0012b49:	90                   	nop

c0012b4a <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012b4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b4e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012b52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012b56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b59:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012b5e:	75 08                	jne    c0012b68 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012b60:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012b66:	eb 3d                	jmp    c0012ba5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012b68:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012b6d:	75 17                	jne    c0012b86 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012b6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b74:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012b77:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012b7d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b83:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012b86:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012b8b:	75 04                	jne    c0012b91 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012b8d:	89 0a                	mov    DWORD PTR [edx],ecx
c0012b8f:	eb 14                	jmp    c0012ba5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012b91:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012b96:	74 c8                	je     c0012b60 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012b98:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012b9d:	83 e0 ef             	and    eax,0xffffffef
c0012ba0:	83 f8 08             	cmp    eax,0x8
c0012ba3:	76 bb                	jbe    c0012b60 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012ba5:	31 c0                	xor    eax,eax
c0012ba7:	c3                   	ret    

c0012ba8 <UnixFile::getFileDescriptor()>:
c0012ba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012baf:	c3                   	ret    

c0012bb0 <UnixFile::UnixFile(int)>:
c0012bb0:	53                   	push   ebx
c0012bb1:	83 ec 28             	sub    esp,0x28
c0012bb4:	ba 54 4a 02 c0       	mov    edx,0xc0024a54
c0012bb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bbd:	89 10                	mov    DWORD PTR [eax],edx
c0012bbf:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012bc7:	0f 8f 90 01 00 00    	jg     c0012d5d <UnixFile::UnixFile(int)+0x1ad>
c0012bcd:	a1 a0 6d 02 c0       	mov    eax,ds:0xc0026da0
c0012bd2:	8d 50 01             	lea    edx,[eax+0x1]
c0012bd5:	89 15 a0 6d 02 c0    	mov    DWORD PTR ds:0xc0026da0,edx
c0012bdb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012bdf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012be2:	83 ec 08             	sub    esp,0x8
c0012be5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012be9:	68 78 d2 02 c0       	push   0xc002d278
c0012bee:	e8 7b f9 00 00       	call   c002256e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012bf3:	83 c4 10             	add    esp,0x10
c0012bf6:	a0 74 d2 02 c0       	mov    al,ds:0xc002d274
c0012bfb:	83 f0 01             	xor    eax,0x1
c0012bfe:	0f b6 c0             	movzx  eax,al
c0012c01:	85 c0                	test   eax,eax
c0012c03:	0f 84 55 01 00 00    	je     c0012d5e <UnixFile::UnixFile(int)+0x1ae>
c0012c09:	c6 05 74 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d274,0x1
c0012c10:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012c18:	83 ec 0c             	sub    esp,0xc
c0012c1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c1f:	e8 44 ca ff ff       	call   c000f668 <malloc>
c0012c24:	83 c4 10             	add    esp,0x10
c0012c27:	89 c3                	mov    ebx,eax
c0012c29:	83 ec 08             	sub    esp,0x8
c0012c2c:	68 03 ff ff 0f       	push   0xfffff03
c0012c31:	53                   	push   ebx
c0012c32:	e8 2d 01 00 00       	call   c0012d64 <ReservedFilename::ReservedFilename(int)>
c0012c37:	83 c4 10             	add    esp,0x10
c0012c3a:	89 1d 6c d2 02 c0    	mov    DWORD PTR ds:0xc002d26c,ebx
c0012c40:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012c48:	83 ec 0c             	sub    esp,0xc
c0012c4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c4f:	e8 14 ca ff ff       	call   c000f668 <malloc>
c0012c54:	83 c4 10             	add    esp,0x10
c0012c57:	89 c3                	mov    ebx,eax
c0012c59:	83 ec 08             	sub    esp,0x8
c0012c5c:	68 01 ff ff 0f       	push   0xfffff01
c0012c61:	53                   	push   ebx
c0012c62:	e8 fd 00 00 00       	call   c0012d64 <ReservedFilename::ReservedFilename(int)>
c0012c67:	83 c4 10             	add    esp,0x10
c0012c6a:	89 1d 70 d2 02 c0    	mov    DWORD PTR ds:0xc002d270,ebx
c0012c70:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012c78:	83 ec 0c             	sub    esp,0xc
c0012c7b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c7f:	e8 e4 c9 ff ff       	call   c000f668 <malloc>
c0012c84:	83 c4 10             	add    esp,0x10
c0012c87:	89 c3                	mov    ebx,eax
c0012c89:	83 ec 08             	sub    esp,0x8
c0012c8c:	68 00 ff ff 0f       	push   0xfffff00
c0012c91:	53                   	push   ebx
c0012c92:	e8 cd 00 00 00       	call   c0012d64 <ReservedFilename::ReservedFilename(int)>
c0012c97:	83 c4 10             	add    esp,0x10
c0012c9a:	89 1d 64 d2 02 c0    	mov    DWORD PTR ds:0xc002d264,ebx
c0012ca0:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012ca8:	83 ec 0c             	sub    esp,0xc
c0012cab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012caf:	e8 b4 c9 ff ff       	call   c000f668 <malloc>
c0012cb4:	83 c4 10             	add    esp,0x10
c0012cb7:	89 c3                	mov    ebx,eax
c0012cb9:	83 ec 08             	sub    esp,0x8
c0012cbc:	68 02 ff ff 0f       	push   0xfffff02
c0012cc1:	53                   	push   ebx
c0012cc2:	e8 9d 00 00 00       	call   c0012d64 <ReservedFilename::ReservedFilename(int)>
c0012cc7:	83 c4 10             	add    esp,0x10
c0012cca:	89 1d 68 d2 02 c0    	mov    DWORD PTR ds:0xc002d268,ebx
c0012cd0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012cd8:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012cdd:	7f 7f                	jg     c0012d5e <UnixFile::UnixFile(int)+0x1ae>
c0012cdf:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0012ce7:	83 ec 0c             	sub    esp,0xc
c0012cea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012cee:	e8 75 c9 ff ff       	call   c000f668 <malloc>
c0012cf3:	83 c4 10             	add    esp,0x10
c0012cf6:	89 c3                	mov    ebx,eax
c0012cf8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cfc:	05 10 ff ff 0f       	add    eax,0xfffff10
c0012d01:	83 ec 08             	sub    esp,0x8
c0012d04:	50                   	push   eax
c0012d05:	53                   	push   ebx
c0012d06:	e8 59 00 00 00       	call   c0012d64 <ReservedFilename::ReservedFilename(int)>
c0012d0b:	83 c4 10             	add    esp,0x10
c0012d0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d12:	89 1c 85 40 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2dc0],ebx
c0012d19:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0012d21:	83 ec 0c             	sub    esp,0xc
c0012d24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d28:	e8 3b c9 ff ff       	call   c000f668 <malloc>
c0012d2d:	83 c4 10             	add    esp,0x10
c0012d30:	89 c3                	mov    ebx,eax
c0012d32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d36:	05 20 ff ff 0f       	add    eax,0xfffff20
c0012d3b:	83 ec 08             	sub    esp,0x8
c0012d3e:	50                   	push   eax
c0012d3f:	53                   	push   ebx
c0012d40:	e8 1f 00 00 00       	call   c0012d64 <ReservedFilename::ReservedFilename(int)>
c0012d45:	83 c4 10             	add    esp,0x10
c0012d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d4c:	89 1c 85 00 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e00],ebx
c0012d53:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012d58:	e9 7b ff ff ff       	jmp    c0012cd8 <UnixFile::UnixFile(int)+0x128>
c0012d5d:	90                   	nop
c0012d5e:	83 c4 28             	add    esp,0x28
c0012d61:	5b                   	pop    ebx
c0012d62:	c3                   	ret    
c0012d63:	90                   	nop

c0012d64 <ReservedFilename::ReservedFilename(int)>:
c0012d64:	83 ec 0c             	sub    esp,0xc
c0012d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d6b:	83 ec 08             	sub    esp,0x8
c0012d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d72:	50                   	push   eax
c0012d73:	e8 38 fe ff ff       	call   c0012bb0 <UnixFile::UnixFile(int)>
c0012d78:	83 c4 10             	add    esp,0x10
c0012d7b:	ba 70 4a 02 c0       	mov    edx,0xc0024a70
c0012d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d84:	89 10                	mov    DWORD PTR [eax],edx
c0012d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012d8e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012d91:	90                   	nop
c0012d92:	83 c4 0c             	add    esp,0xc
c0012d95:	c3                   	ret    

c0012d96 <UnixFile::~UnixFile()>:
c0012d96:	83 ec 1c             	sub    esp,0x1c
c0012d99:	ba 54 4a 02 c0       	mov    edx,0xc0024a54
c0012d9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012da2:	89 10                	mov    DWORD PTR [eax],edx
c0012da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012da8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dab:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0012db0:	7f 76                	jg     c0012e28 <UnixFile::~UnixFile()+0x92>
c0012db2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012dba:	83 ec 0c             	sub    esp,0xc
c0012dbd:	68 78 d2 02 c0       	push   0xc002d278
c0012dc2:	e8 7b f8 00 00       	call   c0022642 <LinkedList<UnixFile>::getFirstElement()>
c0012dc7:	83 c4 10             	add    esp,0x10
c0012dca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012dce:	83 ec 0c             	sub    esp,0xc
c0012dd1:	68 78 d2 02 c0       	push   0xc002d278
c0012dd6:	e8 6f f8 00 00       	call   c002264a <LinkedList<UnixFile>::removeFirst()>
c0012ddb:	83 c4 10             	add    esp,0x10
c0012dde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012de2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0012de6:	74 43                	je     c0012e2b <UnixFile::~UnixFile()+0x95>
c0012de8:	83 ec 08             	sub    esp,0x8
c0012deb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012def:	68 78 d2 02 c0       	push   0xc002d278
c0012df4:	e8 75 f7 00 00       	call   c002256e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012df9:	83 c4 10             	add    esp,0x10
c0012dfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e00:	8d 50 01             	lea    edx,[eax+0x1]
c0012e03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012e07:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0012e0c:	0f 94 c0             	sete   al
c0012e0f:	0f b6 c0             	movzx  eax,al
c0012e12:	85 c0                	test   eax,eax
c0012e14:	74 a4                	je     c0012dba <UnixFile::~UnixFile()+0x24>
c0012e16:	83 ec 0c             	sub    esp,0xc
c0012e19:	68 2c 4a 02 c0       	push   0xc0024a2c
c0012e1e:	e8 99 cc ff ff       	call   c000fabc <KePanic(char const*)>
c0012e23:	83 c4 10             	add    esp,0x10
c0012e26:	eb 92                	jmp    c0012dba <UnixFile::~UnixFile()+0x24>
c0012e28:	90                   	nop
c0012e29:	eb 01                	jmp    c0012e2c <UnixFile::~UnixFile()+0x96>
c0012e2b:	90                   	nop
c0012e2c:	90                   	nop
c0012e2d:	83 c4 1c             	add    esp,0x1c
c0012e30:	c3                   	ret    
c0012e31:	90                   	nop

c0012e32 <UnixFile::~UnixFile()>:
c0012e32:	83 ec 0c             	sub    esp,0xc
c0012e35:	83 ec 0c             	sub    esp,0xc
c0012e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e3c:	e8 55 ff ff ff       	call   c0012d96 <UnixFile::~UnixFile()>
c0012e41:	83 c4 10             	add    esp,0x10
c0012e44:	83 ec 08             	sub    esp,0x8
c0012e47:	6a 0c                	push   0xc
c0012e49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e4d:	e8 1e a4 ff ff       	call   c000d270 <operator delete(void*, unsigned long)>
c0012e52:	83 c4 10             	add    esp,0x10
c0012e55:	83 c4 0c             	add    esp,0xc
c0012e58:	c3                   	ret    
c0012e59:	90                   	nop

c0012e5a <ReservedFilename::~ReservedFilename()>:
c0012e5a:	83 ec 0c             	sub    esp,0xc
c0012e5d:	ba 70 4a 02 c0       	mov    edx,0xc0024a70
c0012e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e66:	89 10                	mov    DWORD PTR [eax],edx
c0012e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e6c:	83 ec 0c             	sub    esp,0xc
c0012e6f:	50                   	push   eax
c0012e70:	e8 21 ff ff ff       	call   c0012d96 <UnixFile::~UnixFile()>
c0012e75:	83 c4 10             	add    esp,0x10
c0012e78:	90                   	nop
c0012e79:	83 c4 0c             	add    esp,0xc
c0012e7c:	c3                   	ret    
c0012e7d:	90                   	nop

c0012e7e <ReservedFilename::~ReservedFilename()>:
c0012e7e:	83 ec 0c             	sub    esp,0xc
c0012e81:	83 ec 0c             	sub    esp,0xc
c0012e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e88:	e8 cd ff ff ff       	call   c0012e5a <ReservedFilename::~ReservedFilename()>
c0012e8d:	83 c4 10             	add    esp,0x10
c0012e90:	83 ec 08             	sub    esp,0x8
c0012e93:	6a 0c                	push   0xc
c0012e95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e99:	e8 d2 a3 ff ff       	call   c000d270 <operator delete(void*, unsigned long)>
c0012e9e:	83 c4 10             	add    esp,0x10
c0012ea1:	83 c4 0c             	add    esp,0xc
c0012ea4:	c3                   	ret    

c0012ea5 <KeGetFileFromDescriptor(int)>:
c0012ea5:	53                   	push   ebx
c0012ea6:	83 ec 08             	sub    esp,0x8
c0012ea9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ead:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0012eb3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0012eb9:	7f 30                	jg     c0012eeb <KeGetFileFromDescriptor(int)+0x46>
c0012ebb:	83 ec 0c             	sub    esp,0xc
c0012ebe:	68 78 d2 02 c0       	push   0xc002d278
c0012ec3:	e8 7a f7 00 00       	call   c0022642 <LinkedList<UnixFile>::getFirstElement()>
c0012ec8:	8d 50 ff             	lea    edx,[eax-0x1]
c0012ecb:	83 c4 10             	add    esp,0x10
c0012ece:	83 fa fd             	cmp    edx,0xfffffffd
c0012ed1:	76 04                	jbe    c0012ed7 <KeGetFileFromDescriptor(int)+0x32>
c0012ed3:	31 c0                	xor    eax,eax
c0012ed5:	eb 6e                	jmp    c0012f45 <KeGetFileFromDescriptor(int)+0xa0>
c0012ed7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0012eda:	74 69                	je     c0012f45 <KeGetFileFromDescriptor(int)+0xa0>
c0012edc:	52                   	push   edx
c0012edd:	52                   	push   edx
c0012ede:	50                   	push   eax
c0012edf:	68 78 d2 02 c0       	push   0xc002d278
c0012ee4:	e8 03 f8 00 00       	call   c00226ec <LinkedList<UnixFile>::getNext(UnixFile*)>
c0012ee9:	eb dd                	jmp    c0012ec8 <KeGetFileFromDescriptor(int)+0x23>
c0012eeb:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0012ef1:	a1 6c d2 02 c0       	mov    eax,ds:0xc002d26c
c0012ef6:	74 4d                	je     c0012f45 <KeGetFileFromDescriptor(int)+0xa0>
c0012ef8:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0012efe:	a1 70 d2 02 c0       	mov    eax,ds:0xc002d270
c0012f03:	74 40                	je     c0012f45 <KeGetFileFromDescriptor(int)+0xa0>
c0012f05:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0012f0b:	a1 68 d2 02 c0       	mov    eax,ds:0xc002d268
c0012f10:	74 33                	je     c0012f45 <KeGetFileFromDescriptor(int)+0xa0>
c0012f12:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0012f18:	a1 64 d2 02 c0       	mov    eax,ds:0xc002d264
c0012f1d:	74 26                	je     c0012f45 <KeGetFileFromDescriptor(int)+0xa0>
c0012f1f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0012f25:	83 f8 08             	cmp    eax,0x8
c0012f28:	77 09                	ja     c0012f33 <KeGetFileFromDescriptor(int)+0x8e>
c0012f2a:	8b 04 85 40 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2dc0]
c0012f31:	eb 12                	jmp    c0012f45 <KeGetFileFromDescriptor(int)+0xa0>
c0012f33:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0012f39:	83 fb 08             	cmp    ebx,0x8
c0012f3c:	77 95                	ja     c0012ed3 <KeGetFileFromDescriptor(int)+0x2e>
c0012f3e:	8b 04 9d 00 d2 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2e00]
c0012f45:	83 c4 08             	add    esp,0x8
c0012f48:	5b                   	pop    ebx
c0012f49:	c3                   	ret    

c0012f4a <__static_initialization_and_destruction_0(int, int)>:
c0012f4a:	83 ec 0c             	sub    esp,0xc
c0012f4d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0012f52:	75 34                	jne    c0012f88 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0012f54:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0012f5c:	75 2a                	jne    c0012f88 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0012f5e:	83 ec 0c             	sub    esp,0xc
c0012f61:	68 78 d2 02 c0       	push   0xc002d278
c0012f66:	e8 c1 f5 00 00       	call   c002252c <LinkedList<UnixFile>::LinkedList()>
c0012f6b:	83 c4 10             	add    esp,0x10
c0012f6e:	83 ec 04             	sub    esp,0x4
c0012f71:	68 f8 65 02 c0       	push   0xc00265f8
c0012f76:	68 78 d2 02 c0       	push   0xc002d278
c0012f7b:	68 2a 25 02 c0       	push   0xc002252a
c0012f80:	e8 9b a2 ff ff       	call   c000d220 <__cxa_atexit>
c0012f85:	83 c4 10             	add    esp,0x10
c0012f88:	90                   	nop
c0012f89:	83 c4 0c             	add    esp,0xc
c0012f8c:	c3                   	ret    

c0012f8d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0012f8d:	83 ec 0c             	sub    esp,0xc
c0012f90:	83 ec 08             	sub    esp,0x8
c0012f93:	68 ff ff 00 00       	push   0xffff
c0012f98:	6a 01                	push   0x1
c0012f9a:	e8 ab ff ff ff       	call   c0012f4a <__static_initialization_and_destruction_0(int, int)>
c0012f9f:	83 c4 10             	add    esp,0x10
c0012fa2:	83 c4 0c             	add    esp,0xc
c0012fa5:	c3                   	ret    

c0012fa6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0012fa6:	53                   	push   ebx
c0012fa7:	8b 15 a8 6d 02 c0    	mov    edx,DWORD PTR ds:0xc0026da8
c0012fad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012fb1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012fb5:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0012fbb:	89 d8                	mov    eax,ebx
c0012fbd:	d1 e8                	shr    eax,1
c0012fbf:	01 d0                	add    eax,edx
c0012fc1:	80 e3 01             	and    bl,0x1
c0012fc4:	8a 10                	mov    dl,BYTE PTR [eax]
c0012fc6:	75 09                	jne    c0012fd1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0012fc8:	83 e2 f0             	and    edx,0xfffffff0
c0012fcb:	09 ca                	or     edx,ecx
c0012fcd:	88 10                	mov    BYTE PTR [eax],dl
c0012fcf:	5b                   	pop    ebx
c0012fd0:	c3                   	ret    
c0012fd1:	0f b6 c9             	movzx  ecx,cl
c0012fd4:	83 e2 0f             	and    edx,0xf
c0012fd7:	c1 e1 04             	shl    ecx,0x4
c0012fda:	09 ca                	or     edx,ecx
c0012fdc:	88 10                	mov    BYTE PTR [eax],dl
c0012fde:	5b                   	pop    ebx
c0012fdf:	c3                   	ret    

c0012fe0 <Virt::getPageState(unsigned long)>:
c0012fe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fe4:	8b 0d a8 6d 02 c0    	mov    ecx,DWORD PTR ds:0xc0026da8
c0012fea:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0012ff0:	89 d0                	mov    eax,edx
c0012ff2:	d1 e8                	shr    eax,1
c0012ff4:	80 e2 01             	and    dl,0x1
c0012ff7:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0012ffa:	74 03                	je     c0012fff <Virt::getPageState(unsigned long)+0x1f>
c0012ffc:	c1 e8 04             	shr    eax,0x4
c0012fff:	83 e0 0f             	and    eax,0xf
c0013002:	c3                   	ret    

c0013003 <Virt::allocateKernelVirtualPages(int)>:
c0013003:	55                   	push   ebp
c0013004:	57                   	push   edi
c0013005:	56                   	push   esi
c0013006:	31 f6                	xor    esi,esi
c0013008:	53                   	push   ebx
c0013009:	31 db                	xor    ebx,ebx
c001300b:	83 ec 1c             	sub    esp,0x1c
c001300e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0013013:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013017:	8b 2d a4 6d 02 c0    	mov    ebp,DWORD PTR ds:0xc0026da4
c001301d:	55                   	push   ebp
c001301e:	e8 bd ff ff ff       	call   c0012fe0 <Virt::getPageState(unsigned long)>
c0013023:	5a                   	pop    edx
c0013024:	84 c0                	test   al,al
c0013026:	75 3d                	jne    c0013065 <Virt::allocateKernelVirtualPages(int)+0x62>
c0013028:	85 db                	test   ebx,ebx
c001302a:	0f 44 f5             	cmove  esi,ebp
c001302d:	83 c3 01             	add    ebx,0x1
c0013030:	39 fb                	cmp    ebx,edi
c0013032:	74 5e                	je     c0013092 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0013034:	83 c5 01             	add    ebp,0x1
c0013037:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c001303d:	76 33                	jbe    c0013072 <Virt::allocateKernelVirtualPages(int)+0x6f>
c001303f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0013044:	c7 05 a4 6d 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026da4,0xc8000
c001304e:	75 2a                	jne    c001307a <Virt::allocateKernelVirtualPages(int)+0x77>
c0013050:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0013055:	bd 00 80 0c 00       	mov    ebp,0xc8000
c001305a:	55                   	push   ebp
c001305b:	e8 80 ff ff ff       	call   c0012fe0 <Virt::getPageState(unsigned long)>
c0013060:	5a                   	pop    edx
c0013061:	84 c0                	test   al,al
c0013063:	74 c3                	je     c0013028 <Virt::allocateKernelVirtualPages(int)+0x25>
c0013065:	83 c5 01             	add    ebp,0x1
c0013068:	31 db                	xor    ebx,ebx
c001306a:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013070:	77 cd                	ja     c001303f <Virt::allocateKernelVirtualPages(int)+0x3c>
c0013072:	89 2d a4 6d 02 c0    	mov    DWORD PTR ds:0xc0026da4,ebp
c0013078:	eb a3                	jmp    c001301d <Virt::allocateKernelVirtualPages(int)+0x1a>
c001307a:	83 ec 0c             	sub    esp,0xc
c001307d:	68 84 4a 02 c0       	push   0xc0024a84
c0013082:	e8 35 ca ff ff       	call   c000fabc <KePanic(char const*)>
c0013087:	8b 2d a4 6d 02 c0    	mov    ebp,DWORD PTR ds:0xc0026da4
c001308d:	83 c4 10             	add    esp,0x10
c0013090:	eb 8b                	jmp    c001301d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0013092:	89 35 a4 6d 02 c0    	mov    DWORD PTR ds:0xc0026da4,esi
c0013098:	83 fb 01             	cmp    ebx,0x1
c001309b:	74 63                	je     c0013100 <Virt::allocateKernelVirtualPages(int)+0xfd>
c001309d:	85 ff                	test   edi,edi
c001309f:	74 41                	je     c00130e2 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00130a1:	89 f0                	mov    eax,esi
c00130a3:	31 db                	xor    ebx,ebx
c00130a5:	8d 6f ff             	lea    ebp,[edi-0x1]
c00130a8:	eb 16                	jmp    c00130c0 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00130aa:	6a 01                	push   0x1
c00130ac:	83 c3 01             	add    ebx,0x1
c00130af:	50                   	push   eax
c00130b0:	e8 f1 fe ff ff       	call   c0012fa6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00130b5:	39 fb                	cmp    ebx,edi
c00130b7:	58                   	pop    eax
c00130b8:	5a                   	pop    edx
c00130b9:	74 27                	je     c00130e2 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00130bb:	a1 a4 6d 02 c0       	mov    eax,ds:0xc0026da4
c00130c0:	8d 50 01             	lea    edx,[eax+0x1]
c00130c3:	85 db                	test   ebx,ebx
c00130c5:	89 15 a4 6d 02 c0    	mov    DWORD PTR ds:0xc0026da4,edx
c00130cb:	74 22                	je     c00130ef <Virt::allocateKernelVirtualPages(int)+0xec>
c00130cd:	39 dd                	cmp    ebp,ebx
c00130cf:	75 d9                	jne    c00130aa <Virt::allocateKernelVirtualPages(int)+0xa7>
c00130d1:	6a 03                	push   0x3
c00130d3:	83 c3 01             	add    ebx,0x1
c00130d6:	50                   	push   eax
c00130d7:	e8 ca fe ff ff       	call   c0012fa6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00130dc:	39 fb                	cmp    ebx,edi
c00130de:	59                   	pop    ecx
c00130df:	58                   	pop    eax
c00130e0:	75 d9                	jne    c00130bb <Virt::allocateKernelVirtualPages(int)+0xb8>
c00130e2:	83 c4 1c             	add    esp,0x1c
c00130e5:	89 f0                	mov    eax,esi
c00130e7:	5b                   	pop    ebx
c00130e8:	c1 e0 0c             	shl    eax,0xc
c00130eb:	5e                   	pop    esi
c00130ec:	5f                   	pop    edi
c00130ed:	5d                   	pop    ebp
c00130ee:	c3                   	ret    
c00130ef:	6a 02                	push   0x2
c00130f1:	bb 01 00 00 00       	mov    ebx,0x1
c00130f6:	50                   	push   eax
c00130f7:	e8 aa fe ff ff       	call   c0012fa6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00130fc:	58                   	pop    eax
c00130fd:	5a                   	pop    edx
c00130fe:	eb bb                	jmp    c00130bb <Virt::allocateKernelVirtualPages(int)+0xb8>
c0013100:	6a 04                	push   0x4
c0013102:	56                   	push   esi
c0013103:	8d 46 01             	lea    eax,[esi+0x1]
c0013106:	a3 a4 6d 02 c0       	mov    ds:0xc0026da4,eax
c001310b:	e8 96 fe ff ff       	call   c0012fa6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013110:	89 f0                	mov    eax,esi
c0013112:	59                   	pop    ecx
c0013113:	c1 e0 0c             	shl    eax,0xc
c0013116:	5b                   	pop    ebx
c0013117:	83 c4 1c             	add    esp,0x1c
c001311a:	5b                   	pop    ebx
c001311b:	5e                   	pop    esi
c001311c:	5f                   	pop    edi
c001311d:	5d                   	pop    ebp
c001311e:	c3                   	ret    

c001311f <Virt::freeSwapfilePage(unsigned long)>:
c001311f:	53                   	push   ebx
c0013120:	8b 15 8c d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d28c
c0013126:	b8 01 00 00 00       	mov    eax,0x1
c001312b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001312f:	d3 e0                	shl    eax,cl
c0013131:	89 cb                	mov    ebx,ecx
c0013133:	c1 eb 05             	shr    ebx,0x5
c0013136:	f7 d0                	not    eax
c0013138:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001313b:	21 c1                	and    ecx,eax
c001313d:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013140:	5b                   	pop    ebx
c0013141:	c3                   	ret    

c0013142 <Virt::swapIDToSector(unsigned long)>:
c0013142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013146:	8b 15 ac 6d 02 c0    	mov    edx,DWORD PTR ds:0xc0026dac
c001314c:	8b 0d b4 6d 02 c0    	mov    ecx,DWORD PTR ds:0xc0026db4
c0013152:	0f af c2             	imul   eax,edx
c0013155:	01 c8                	add    eax,ecx
c0013157:	c3                   	ret    

c0013158 <Virt::allocateSwapfilePage()>:
c0013158:	55                   	push   ebp
c0013159:	31 d2                	xor    edx,edx
c001315b:	57                   	push   edi
c001315c:	56                   	push   esi
c001315d:	53                   	push   ebx
c001315e:	83 ec 0c             	sub    esp,0xc
c0013161:	8b 1d b0 6d 02 c0    	mov    ebx,DWORD PTR ds:0xc0026db0
c0013167:	8b 0d ac 6d 02 c0    	mov    ecx,DWORD PTR ds:0xc0026dac
c001316d:	89 d8                	mov    eax,ebx
c001316f:	f7 f1                	div    ecx
c0013171:	39 cb                	cmp    ebx,ecx
c0013173:	72 2f                	jb     c00131a4 <Virt::allocateSwapfilePage()+0x4c>
c0013175:	8b 35 8c d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d28c
c001317b:	8b 16                	mov    edx,DWORD PTR [esi]
c001317d:	f6 c2 01             	test   dl,0x1
c0013180:	74 3e                	je     c00131c0 <Virt::allocateSwapfilePage()+0x68>
c0013182:	31 c9                	xor    ecx,ecx
c0013184:	bf 01 00 00 00       	mov    edi,0x1
c0013189:	eb 12                	jmp    c001319d <Virt::allocateSwapfilePage()+0x45>
c001318b:	89 ca                	mov    edx,ecx
c001318d:	89 fd                	mov    ebp,edi
c001318f:	c1 ea 05             	shr    edx,0x5
c0013192:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013195:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013197:	d3 e5                	shl    ebp,cl
c0013199:	85 ea                	test   edx,ebp
c001319b:	74 2c                	je     c00131c9 <Virt::allocateSwapfilePage()+0x71>
c001319d:	83 c1 01             	add    ecx,0x1
c00131a0:	39 c8                	cmp    eax,ecx
c00131a2:	77 e7                	ja     c001318b <Virt::allocateSwapfilePage()+0x33>
c00131a4:	83 ec 0c             	sub    esp,0xc
c00131a7:	68 97 4d 02 c0       	push   0xc0024d97
c00131ac:	e8 0b c9 ff ff       	call   c000fabc <KePanic(char const*)>
c00131b1:	83 c4 10             	add    esp,0x10
c00131b4:	31 c9                	xor    ecx,ecx
c00131b6:	83 c4 0c             	add    esp,0xc
c00131b9:	89 c8                	mov    eax,ecx
c00131bb:	5b                   	pop    ebx
c00131bc:	5e                   	pop    esi
c00131bd:	5f                   	pop    edi
c00131be:	5d                   	pop    ebp
c00131bf:	c3                   	ret    
c00131c0:	89 f3                	mov    ebx,esi
c00131c2:	bd 01 00 00 00       	mov    ebp,0x1
c00131c7:	31 c9                	xor    ecx,ecx
c00131c9:	09 ea                	or     edx,ebp
c00131cb:	89 c8                	mov    eax,ecx
c00131cd:	89 13                	mov    DWORD PTR [ebx],edx
c00131cf:	83 c4 0c             	add    esp,0xc
c00131d2:	5b                   	pop    ebx
c00131d3:	5e                   	pop    esi
c00131d4:	5f                   	pop    edi
c00131d5:	5d                   	pop    ebp
c00131d6:	c3                   	ret    

c00131d7 <Virt::virtualMemorySetup()>:
c00131d7:	53                   	push   ebx
c00131d8:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00131dd:	6a 0f                	push   0xf
c00131df:	53                   	push   ebx
c00131e0:	83 c3 01             	add    ebx,0x1
c00131e3:	e8 be fd ff ff       	call   c0012fa6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00131e8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00131ee:	58                   	pop    eax
c00131ef:	5a                   	pop    edx
c00131f0:	75 eb                	jne    c00131dd <Virt::virtualMemorySetup()+0x6>
c00131f2:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00131f7:	6a 00                	push   0x0
c00131f9:	53                   	push   ebx
c00131fa:	83 c3 01             	add    ebx,0x1
c00131fd:	e8 a4 fd ff ff       	call   c0012fa6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013202:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013208:	59                   	pop    ecx
c0013209:	58                   	pop    eax
c001320a:	75 eb                	jne    c00131f7 <Virt::virtualMemorySetup()+0x20>
c001320c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013211:	6a 0f                	push   0xf
c0013213:	53                   	push   ebx
c0013214:	83 c3 01             	add    ebx,0x1
c0013217:	e8 8a fd ff ff       	call   c0012fa6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001321c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013222:	58                   	pop    eax
c0013223:	5a                   	pop    edx
c0013224:	75 eb                	jne    c0013211 <Virt::virtualMemorySetup()+0x3a>
c0013226:	5b                   	pop    ebx
c0013227:	c3                   	ret    

c0013228 <Virt::setupPageSwapping(int)>:
c0013228:	53                   	push   ebx
c0013229:	83 ec 0c             	sub    esp,0xc
c001322c:	a1 e8 ca 02 c0       	mov    eax,ds:0xc002cae8
c0013231:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013235:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001323b:	8b 10                	mov    edx,DWORD PTR [eax]
c001323d:	53                   	push   ebx
c001323e:	68 ae 4d 02 c0       	push   0xc0024dae
c0013243:	50                   	push   eax
c0013244:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013247:	c1 e3 0b             	shl    ebx,0xb
c001324a:	89 1d b0 6d 02 c0    	mov    DWORD PTR ds:0xc0026db0,ebx
c0013250:	c1 eb 08             	shr    ebx,0x8
c0013253:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013256:	c6 05 b8 6d 02 c0 43 	mov    BYTE PTR ds:0xc0026db8,0x43
c001325d:	c7 05 ac 6d 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0026dac,0x8
c0013267:	a3 b4 6d 02 c0       	mov    ds:0xc0026db4,eax
c001326c:	e8 f7 c3 ff ff       	call   c000f668 <malloc>
c0013271:	31 d2                	xor    edx,edx
c0013273:	83 c4 0c             	add    esp,0xc
c0013276:	a3 8c d2 02 c0       	mov    ds:0xc002d28c,eax
c001327b:	89 c1                	mov    ecx,eax
c001327d:	a1 b0 6d 02 c0       	mov    eax,ds:0xc0026db0
c0013282:	f7 35 ac 6d 02 c0    	div    DWORD PTR ds:0xc0026dac
c0013288:	c1 e8 05             	shr    eax,0x5
c001328b:	50                   	push   eax
c001328c:	6a 00                	push   0x0
c001328e:	51                   	push   ecx
c001328f:	e8 5c d2 fe ff       	call   c00004f0 <memset>
c0013294:	83 c4 18             	add    esp,0x18
c0013297:	5b                   	pop    ebx
c0013298:	c3                   	ret    
c0013299:	90                   	nop

c001329a <VAS::setCPUSpecific(unsigned long)>:
c001329a:	c3                   	ret    
c001329b:	90                   	nop

c001329c <VAS::VAS(VAS*)>:
c001329c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00132a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132ab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00132b2:	90                   	nop
c00132b3:	c3                   	ret    

c00132b4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00132b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132b8:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00132bd:	89 c2                	mov    edx,eax
c00132bf:	c1 ea 16             	shr    edx,0x16
c00132c2:	c1 e8 0a             	shr    eax,0xa
c00132c5:	83 f9 01             	cmp    ecx,0x1
c00132c8:	19 c9                	sbb    ecx,ecx
c00132ca:	25 fc 0f 00 00       	and    eax,0xffc
c00132cf:	c1 e2 0c             	shl    edx,0xc
c00132d2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00132d8:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00132df:	01 d0                	add    eax,edx
c00132e1:	c3                   	ret    

c00132e2 <VAS::getPageTableEntry(unsigned long)>:
c00132e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00132e6:	89 ca                	mov    edx,ecx
c00132e8:	c1 ea 16             	shr    edx,0x16
c00132eb:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00132f1:	c1 e9 0a             	shr    ecx,0xa
c00132f4:	c1 e0 0c             	shl    eax,0xc
c00132f7:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00132fd:	8d 04 08             	lea    eax,[eax+ecx*1]
c0013300:	c3                   	ret    

c0013301 <Virt::freeKernelVirtualPages(unsigned long)>:
c0013301:	55                   	push   ebp
c0013302:	57                   	push   edi
c0013303:	bf 01 00 00 00       	mov    edi,0x1
c0013308:	56                   	push   esi
c0013309:	53                   	push   ebx
c001330a:	83 ec 1c             	sub    esp,0x1c
c001330d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013311:	c1 ee 0c             	shr    esi,0xc
c0013314:	eb 48                	jmp    c001335e <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013316:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c001331b:	83 ec 08             	sub    esp,0x8
c001331e:	55                   	push   ebp
c001331f:	50                   	push   eax
c0013320:	e8 bd ff ff ff       	call   c00132e2 <VAS::getPageTableEntry(unsigned long)>
c0013325:	83 c4 10             	add    esp,0x10
c0013328:	8b 10                	mov    edx,DWORD PTR [eax]
c001332a:	f6 c6 04             	test   dh,0x4
c001332d:	75 70                	jne    c001339f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001332f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013335:	83 fb 04             	cmp    ebx,0x4
c0013338:	0f 84 8a 00 00 00    	je     c00133c8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001333e:	83 fb 02             	cmp    ebx,0x2
c0013341:	0f 84 9a 00 00 00    	je     c00133e1 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013347:	83 fb 03             	cmp    ebx,0x3
c001334a:	0f 84 be 00 00 00    	je     c001340e <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013350:	83 fb 01             	cmp    ebx,0x1
c0013353:	0f 84 a2 00 00 00    	je     c00133fb <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013359:	83 c6 01             	add    esi,0x1
c001335c:	31 ff                	xor    edi,edi
c001335e:	56                   	push   esi
c001335f:	89 f5                	mov    ebp,esi
c0013361:	e8 7a fc ff ff       	call   c0012fe0 <Virt::getPageState(unsigned long)>
c0013366:	c1 e5 0c             	shl    ebp,0xc
c0013369:	5a                   	pop    edx
c001336a:	0f b6 d8             	movzx  ebx,al
c001336d:	85 db                	test   ebx,ebx
c001336f:	75 a5                	jne    c0013316 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013371:	83 ec 0c             	sub    esp,0xc
c0013374:	68 c5 4d 02 c0       	push   0xc0024dc5
c0013379:	e8 3e c7 ff ff       	call   c000fabc <KePanic(char const*)>
c001337e:	5a                   	pop    edx
c001337f:	59                   	pop    ecx
c0013380:	55                   	push   ebp
c0013381:	8b 2d 90 d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d290
c0013387:	55                   	push   ebp
c0013388:	e8 55 ff ff ff       	call   c00132e2 <VAS::getPageTableEntry(unsigned long)>
c001338d:	83 c4 10             	add    esp,0x10
c0013390:	8b 10                	mov    edx,DWORD PTR [eax]
c0013392:	f6 c6 04             	test   dh,0x4
c0013395:	75 08                	jne    c001339f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013397:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001339d:	eb ba                	jmp    c0013359 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001339f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00133a3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00133a9:	83 ec 0c             	sub    esp,0xc
c00133ac:	52                   	push   edx
c00133ad:	e8 9b c8 ff ff       	call   c000fc4d <Phys::freePage(unsigned long)>
c00133b2:	83 c4 10             	add    esp,0x10
c00133b5:	83 fb 04             	cmp    ebx,0x4
c00133b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00133bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00133c2:	0f 85 76 ff ff ff    	jne    c001333e <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00133c8:	83 e7 01             	and    edi,0x1
c00133cb:	75 46                	jne    c0013413 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00133cd:	c7 44 24 30 a4 4a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024aa4
c00133d5:	83 c4 1c             	add    esp,0x1c
c00133d8:	5b                   	pop    ebx
c00133d9:	5e                   	pop    esi
c00133da:	5f                   	pop    edi
c00133db:	5d                   	pop    ebp
c00133dc:	e9 db c6 ff ff       	jmp    c000fabc <KePanic(char const*)>
c00133e1:	83 e7 01             	and    edi,0x1
c00133e4:	75 15                	jne    c00133fb <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00133e6:	83 ec 0c             	sub    esp,0xc
c00133e9:	68 e1 4d 02 c0       	push   0xc0024de1
c00133ee:	e8 c9 c6 ff ff       	call   c000fabc <KePanic(char const*)>
c00133f3:	83 c4 10             	add    esp,0x10
c00133f6:	e9 5e ff ff ff       	jmp    c0013359 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00133fb:	83 ec 08             	sub    esp,0x8
c00133fe:	6a 00                	push   0x0
c0013400:	56                   	push   esi
c0013401:	e8 a0 fb ff ff       	call   c0012fa6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013406:	83 c4 10             	add    esp,0x10
c0013409:	e9 4b ff ff ff       	jmp    c0013359 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001340e:	83 e7 01             	and    edi,0x1
c0013411:	75 16                	jne    c0013429 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013413:	83 ec 08             	sub    esp,0x8
c0013416:	6a 00                	push   0x0
c0013418:	56                   	push   esi
c0013419:	e8 88 fb ff ff       	call   c0012fa6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001341e:	83 c4 10             	add    esp,0x10
c0013421:	83 c4 1c             	add    esp,0x1c
c0013424:	5b                   	pop    ebx
c0013425:	5e                   	pop    esi
c0013426:	5f                   	pop    edi
c0013427:	5d                   	pop    ebp
c0013428:	c3                   	ret    
c0013429:	c7 44 24 30 fd 4d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024dfd
c0013431:	83 c4 1c             	add    esp,0x1c
c0013434:	5b                   	pop    ebx
c0013435:	5e                   	pop    esi
c0013436:	5f                   	pop    edi
c0013437:	5d                   	pop    ebp
c0013438:	e9 7f c6 ff ff       	jmp    c000fabc <KePanic(char const*)>
c001343d:	90                   	nop

c001343e <VAS::freeAllocatedPages(unsigned long)>:
c001343e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013442:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013446:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001344a:	74 09                	je     c0013455 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001344c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013450:	e9 ac fe ff ff       	jmp    c0013301 <Virt::freeKernelVirtualPages(unsigned long)>
c0013455:	c7 44 24 04 c8 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024ac8
c001345d:	e9 04 3b ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c0013462 <VAS::virtualToPhysical(unsigned long)>:
c0013462:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013466:	50                   	push   eax
c0013467:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001346b:	52                   	push   edx
c001346c:	e8 71 fe ff ff       	call   c00132e2 <VAS::getPageTableEntry(unsigned long)>
c0013471:	59                   	pop    ecx
c0013472:	5a                   	pop    edx
c0013473:	8b 00                	mov    eax,DWORD PTR [eax]
c0013475:	25 00 f0 ff ff       	and    eax,0xfffff000
c001347a:	c3                   	ret    
c001347b:	90                   	nop

c001347c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c001347c:	55                   	push   ebp
c001347d:	57                   	push   edi
c001347e:	56                   	push   esi
c001347f:	53                   	push   ebx
c0013480:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013484:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013488:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001348c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013490:	85 db                	test   ebx,ebx
c0013492:	7e 24                	jle    c00134b8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013494:	c1 e3 0c             	shl    ebx,0xc
c0013497:	01 f3                	add    ebx,esi
c0013499:	56                   	push   esi
c001349a:	81 c6 00 10 00 00    	add    esi,0x1000
c00134a0:	55                   	push   ebp
c00134a1:	e8 3c fe ff ff       	call   c00132e2 <VAS::getPageTableEntry(unsigned long)>
c00134a6:	5a                   	pop    edx
c00134a7:	59                   	pop    ecx
c00134a8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00134aa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00134ae:	21 f9                	and    ecx,edi
c00134b0:	09 d1                	or     ecx,edx
c00134b2:	39 f3                	cmp    ebx,esi
c00134b4:	89 08                	mov    DWORD PTR [eax],ecx
c00134b6:	75 e1                	jne    c0013499 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00134b8:	5b                   	pop    ebx
c00134b9:	5e                   	pop    esi
c00134ba:	5f                   	pop    edi
c00134bb:	5d                   	pop    ebp
c00134bc:	c3                   	ret    
c00134bd:	90                   	nop

c00134be <VAS::VAS()>:
c00134be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00134c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134cd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00134d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134d8:	a3 90 d2 02 c0       	mov    ds:0xc002d290,eax
c00134dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134e1:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00134e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134e9:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00134ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134f0:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00134f7:	ba 7d 80 02 c0       	mov    edx,0xc002807d
c00134fc:	b8 00 80 02 c0       	mov    eax,0xc0028000
c0013501:	29 c2                	sub    edx,eax
c0013503:	89 d0                	mov    eax,edx
c0013505:	05 ff 0f 00 00       	add    eax,0xfff
c001350a:	c1 e8 0c             	shr    eax,0xc
c001350d:	89 c2                	mov    edx,eax
c001350f:	b8 00 80 02 c0       	mov    eax,0xc0028000
c0013514:	6a 04                	push   0x4
c0013516:	6a ff                	push   0xffffffff
c0013518:	52                   	push   edx
c0013519:	50                   	push   eax
c001351a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001351e:	e8 59 ff ff ff       	call   c001347c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013523:	83 c4 14             	add    esp,0x14
c0013526:	90                   	nop
c0013527:	c3                   	ret    

c0013528 <VAS::setToWriteCombining(unsigned long, int)>:
c0013528:	a1 24 d4 02 c0       	mov    eax,ds:0xc002d424
c001352d:	50                   	push   eax
c001352e:	6a ff                	push   0xffffffff
c0013530:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013534:	52                   	push   edx
c0013535:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013539:	51                   	push   ecx
c001353a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001353e:	50                   	push   eax
c001353f:	e8 38 ff ff ff       	call   c001347c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013544:	83 c4 14             	add    esp,0x14
c0013547:	c3                   	ret    

c0013548 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001354c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001354f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013553:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013556:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001355b:	83 f8 01             	cmp    eax,0x1
c001355e:	19 c0                	sbb    eax,eax
c0013560:	83 ca 03             	or     edx,0x3
c0013563:	83 e0 fc             	and    eax,0xfffffffc
c0013566:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001356d:	0f 20 d8             	mov    eax,cr3
c0013570:	0f 22 d8             	mov    cr3,eax
c0013573:	c3                   	ret    

c0013574 <VAS::~VAS()>:
c0013574:	83 ec 2c             	sub    esp,0x2c
c0013577:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001357f:	fa                   	cli    
c0013580:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0013585:	83 c0 01             	add    eax,0x1
c0013588:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c001358d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013592:	8b 00                	mov    eax,DWORD PTR [eax]
c0013594:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013597:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001359d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00135a1:	6a 01                	push   0x1
c00135a3:	50                   	push   eax
c00135a4:	e8 9f ff ff ff       	call   c0013548 <VAS::mapOtherVASIn(bool, VAS*)>
c00135a9:	83 c4 0c             	add    esp,0xc
c00135ac:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00135b4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00135bc:	0f 8f d8 00 00 00    	jg     c001369a <VAS::~VAS()+0x126>
c00135c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135c6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00135c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135cd:	c1 e2 02             	shl    edx,0x2
c00135d0:	01 d0                	add    eax,edx
c00135d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00135d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135dc:	83 e0 01             	and    eax,0x1
c00135df:	0f 84 ab 00 00 00    	je     c0013690 <VAS::~VAS()+0x11c>
c00135e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00135ed:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00135f5:	7f 74                	jg     c001366b <VAS::~VAS()+0xf7>
c00135f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135fb:	c1 e0 0a             	shl    eax,0xa
c00135fe:	89 c2                	mov    edx,eax
c0013600:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013604:	01 d0                	add    eax,edx
c0013606:	c1 e0 0c             	shl    eax,0xc
c0013609:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001360d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013612:	8b 00                	mov    eax,DWORD PTR [eax]
c0013614:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013617:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001361d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013621:	6a 01                	push   0x1
c0013623:	50                   	push   eax
c0013624:	e8 8b fc ff ff       	call   c00132b4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013629:	83 c4 0c             	add    esp,0xc
c001362c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013634:	8b 00                	mov    eax,DWORD PTR [eax]
c0013636:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001363a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001363e:	25 01 04 00 00       	and    eax,0x401
c0013643:	3d 01 04 00 00       	cmp    eax,0x401
c0013648:	75 1a                	jne    c0013664 <VAS::~VAS()+0xf0>
c001364a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001364e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013653:	83 ec 0c             	sub    esp,0xc
c0013656:	50                   	push   eax
c0013657:	e8 f1 c5 ff ff       	call   c000fc4d <Phys::freePage(unsigned long)>
c001365c:	83 c4 10             	add    esp,0x10
c001365f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013664:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013669:	eb 82                	jmp    c00135ed <VAS::~VAS()+0x79>
c001366b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001366f:	25 00 04 00 00       	and    eax,0x400
c0013674:	74 1a                	je     c0013690 <VAS::~VAS()+0x11c>
c0013676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001367a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001367f:	83 ec 0c             	sub    esp,0xc
c0013682:	50                   	push   eax
c0013683:	e8 c5 c5 ff ff       	call   c000fc4d <Phys::freePage(unsigned long)>
c0013688:	83 c4 10             	add    esp,0x10
c001368b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013690:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013695:	e9 1a ff ff ff       	jmp    c00135b4 <VAS::~VAS()+0x40>
c001369a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001369e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00136a1:	83 ec 0c             	sub    esp,0xc
c00136a4:	50                   	push   eax
c00136a5:	e8 57 fc ff ff       	call   c0013301 <Virt::freeKernelVirtualPages(unsigned long)>
c00136aa:	83 c4 10             	add    esp,0x10
c00136ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136b1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00136b4:	83 ec 0c             	sub    esp,0xc
c00136b7:	50                   	push   eax
c00136b8:	e8 90 c5 ff ff       	call   c000fc4d <Phys::freePage(unsigned long)>
c00136bd:	83 c4 10             	add    esp,0x10
c00136c0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00136c5:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c00136cd:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00136d2:	85 c0                	test   eax,eax
c00136d4:	75 01                	jne    c00136d7 <VAS::~VAS()+0x163>
c00136d6:	fb                   	sti    
c00136d7:	90                   	nop
c00136d8:	83 c4 2c             	add    esp,0x2c
c00136db:	c3                   	ret    

c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>:
c00136dc:	55                   	push   ebp
c00136dd:	57                   	push   edi
c00136de:	56                   	push   esi
c00136df:	53                   	push   ebx
c00136e0:	83 ec 1c             	sub    esp,0x1c
c00136e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00136e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00136eb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00136ef:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00136f5:	77 08                	ja     c00136ff <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c00136f7:	0f 20 d8             	mov    eax,cr3
c00136fa:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00136fd:	75 43                	jne    c0013742 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00136ff:	89 d8                	mov    eax,ebx
c0013701:	09 f8                	or     eax,edi
c0013703:	a9 ff 0f 00 00       	test   eax,0xfff
c0013708:	75 53                	jne    c001375d <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c001370a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001370d:	89 de                	mov    esi,ebx
c001370f:	c1 ee 16             	shr    esi,0x16
c0013712:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013719:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001371d:	74 50                	je     c001376f <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c001371f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013723:	c1 eb 0a             	shr    ebx,0xa
c0013726:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001372c:	c1 e6 0c             	shl    esi,0xc
c001372f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013735:	09 c7                	or     edi,eax
c0013737:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c001373a:	83 c4 1c             	add    esp,0x1c
c001373d:	5b                   	pop    ebx
c001373e:	5e                   	pop    esi
c001373f:	5f                   	pop    edi
c0013740:	5d                   	pop    ebp
c0013741:	c3                   	ret    
c0013742:	83 ec 0c             	sub    esp,0xc
c0013745:	68 ec 4a 02 c0       	push   0xc0024aec
c001374a:	e8 17 38 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001374f:	89 d8                	mov    eax,ebx
c0013751:	83 c4 10             	add    esp,0x10
c0013754:	09 f8                	or     eax,edi
c0013756:	a9 ff 0f 00 00       	test   eax,0xfff
c001375b:	74 ad                	je     c001370a <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c001375d:	83 ec 0c             	sub    esp,0xc
c0013760:	68 54 4b 02 c0       	push   0xc0024b54
c0013765:	e8 52 c3 ff ff       	call   c000fabc <KePanic(char const*)>
c001376a:	83 c4 10             	add    esp,0x10
c001376d:	eb 9b                	jmp    c001370a <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c001376f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013773:	e8 3e c5 ff ff       	call   c000fcb6 <Phys::allocatePage()>
c0013778:	8b 0d 90 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d290
c001377e:	83 ec 0c             	sub    esp,0xc
c0013781:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013785:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013789:	6a 01                	push   0x1
c001378b:	e8 73 f8 ff ff       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c0013790:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013797:	6a 01                	push   0x1
c0013799:	50                   	push   eax
c001379a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001379e:	52                   	push   edx
c001379f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00137a3:	51                   	push   ecx
c00137a4:	e8 2d 01 00 00       	call   c00138d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137a9:	83 c4 1c             	add    esp,0x1c
c00137ac:	68 00 10 00 00       	push   0x1000
c00137b1:	6a 00                	push   0x0
c00137b3:	50                   	push   eax
c00137b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00137b8:	e8 33 cd fe ff       	call   c00004f0 <memset>
c00137bd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00137c1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00137c4:	e8 38 fb ff ff       	call   c0013301 <Virt::freeKernelVirtualPages(unsigned long)>
c00137c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00137d1:	83 c4 10             	add    esp,0x10
c00137d4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00137d7:	0d 07 04 00 00       	or     eax,0x407
c00137dc:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c00137df:	e9 3b ff ff ff       	jmp    c001371f <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c00137e4 <VAS::allocatePages(int, int)>:
c00137e4:	55                   	push   ebp
c00137e5:	57                   	push   edi
c00137e6:	56                   	push   esi
c00137e7:	53                   	push   ebx
c00137e8:	83 ec 1c             	sub    esp,0x1c
c00137eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00137ef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00137f3:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00137f7:	75 75                	jne    c001386e <VAS::allocatePages(int, int)+0x8a>
c00137f9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00137fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013800:	85 c0                	test   eax,eax
c0013802:	74 49                	je     c001384d <VAS::allocatePages(int, int)+0x69>
c0013804:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013808:	89 d5                	mov    ebp,edx
c001380a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001380e:	c1 e5 0c             	shl    ebp,0xc
c0013811:	01 dd                	add    ebp,ebx
c0013813:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013816:	81 cf 00 04 00 00    	or     edi,0x400
c001381c:	85 d2                	test   edx,edx
c001381e:	7e 1b                	jle    c001383b <VAS::allocatePages(int, int)+0x57>
c0013820:	e8 91 c4 ff ff       	call   c000fcb6 <Phys::allocatePage()>
c0013825:	57                   	push   edi
c0013826:	53                   	push   ebx
c0013827:	81 c3 00 10 00 00    	add    ebx,0x1000
c001382d:	50                   	push   eax
c001382e:	56                   	push   esi
c001382f:	e8 a8 fe ff ff       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0013834:	83 c4 10             	add    esp,0x10
c0013837:	39 dd                	cmp    ebp,ebx
c0013839:	75 e5                	jne    c0013820 <VAS::allocatePages(int, int)+0x3c>
c001383b:	0f 20 d8             	mov    eax,cr3
c001383e:	0f 22 d8             	mov    cr3,eax
c0013841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013845:	83 c4 1c             	add    esp,0x1c
c0013848:	5b                   	pop    ebx
c0013849:	5e                   	pop    esi
c001384a:	5f                   	pop    edi
c001384b:	5d                   	pop    ebp
c001384c:	c3                   	ret    
c001384d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013851:	83 ec 0c             	sub    esp,0xc
c0013854:	68 78 4b 02 c0       	push   0xc0024b78
c0013859:	e8 5e c2 ff ff       	call   c000fabc <KePanic(char const*)>
c001385e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013865:	83 c4 10             	add    esp,0x10
c0013868:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001386c:	eb 96                	jmp    c0013804 <VAS::allocatePages(int, int)+0x20>
c001386e:	83 ec 0c             	sub    esp,0xc
c0013871:	52                   	push   edx
c0013872:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0013876:	e8 88 f7 ff ff       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c001387b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001387f:	83 c4 10             	add    esp,0x10
c0013882:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013887:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001388b:	77 38                	ja     c00138c5 <VAS::allocatePages(int, int)+0xe1>
c001388d:	85 d2                	test   edx,edx
c001388f:	7e aa                	jle    c001383b <VAS::allocatePages(int, int)+0x57>
c0013891:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013895:	c1 e2 0c             	shl    edx,0xc
c0013898:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001389c:	81 cf 00 04 00 00    	or     edi,0x400
c00138a2:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c00138a5:	e8 0c c4 ff ff       	call   c000fcb6 <Phys::allocatePage()>
c00138aa:	57                   	push   edi
c00138ab:	53                   	push   ebx
c00138ac:	81 c3 00 10 00 00    	add    ebx,0x1000
c00138b2:	50                   	push   eax
c00138b3:	56                   	push   esi
c00138b4:	e8 23 fe ff ff       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c00138b9:	83 c4 10             	add    esp,0x10
c00138bc:	39 dd                	cmp    ebp,ebx
c00138be:	75 e5                	jne    c00138a5 <VAS::allocatePages(int, int)+0xc1>
c00138c0:	e9 76 ff ff ff       	jmp    c001383b <VAS::allocatePages(int, int)+0x57>
c00138c5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00138c9:	a1 28 d4 02 c0       	mov    eax,ds:0xc002d428
c00138ce:	09 c1                	or     ecx,eax
c00138d0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00138d4:	eb b7                	jmp    c001388d <VAS::allocatePages(int, int)+0xa9>

c00138d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00138d6:	55                   	push   ebp
c00138d7:	57                   	push   edi
c00138d8:	56                   	push   esi
c00138d9:	53                   	push   ebx
c00138da:	83 ec 1c             	sub    esp,0x1c
c00138dd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00138e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00138e5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00138e9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00138ed:	85 db                	test   ebx,ebx
c00138ef:	7e 2c                	jle    c001391d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c00138f1:	c1 e3 0c             	shl    ebx,0xc
c00138f4:	8d 04 33             	lea    eax,[ebx+esi*1]
c00138f7:	89 f3                	mov    ebx,esi
c00138f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138fd:	55                   	push   ebp
c00138fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013902:	29 f2                	sub    edx,esi
c0013904:	01 da                	add    edx,ebx
c0013906:	52                   	push   edx
c0013907:	53                   	push   ebx
c0013908:	81 c3 00 10 00 00    	add    ebx,0x1000
c001390e:	57                   	push   edi
c001390f:	e8 c8 fd ff ff       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0013914:	83 c4 10             	add    esp,0x10
c0013917:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c001391b:	75 e0                	jne    c00138fd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c001391d:	0f 20 d8             	mov    eax,cr3
c0013920:	0f 22 d8             	mov    cr3,eax
c0013923:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013927:	83 c4 1c             	add    esp,0x1c
c001392a:	5b                   	pop    ebx
c001392b:	5e                   	pop    esi
c001392c:	5f                   	pop    edi
c001392d:	5d                   	pop    ebp
c001392e:	c3                   	ret    
c001392f:	90                   	nop

c0013930 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013930:	55                   	push   ebp
c0013931:	57                   	push   edi
c0013932:	56                   	push   esi
c0013933:	53                   	push   ebx
c0013934:	83 ec 1c             	sub    esp,0x1c
c0013937:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001393b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001393f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013943:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013947:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001394b:	09 d8                	or     eax,ebx
c001394d:	a9 ff 0f 00 00       	test   eax,0xfff
c0013952:	75 4b                	jne    c001399f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013954:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013957:	89 de                	mov    esi,ebx
c0013959:	c1 ee 16             	shr    esi,0x16
c001395c:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0013963:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0013967:	74 48                	je     c00139b1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0013969:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c001396e:	c1 eb 0a             	shr    ebx,0xa
c0013971:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013975:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013979:	83 ff 01             	cmp    edi,0x1
c001397c:	19 c0                	sbb    eax,eax
c001397e:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013984:	c1 e6 0c             	shl    esi,0xc
c0013987:	25 00 00 c0 ff       	and    eax,0xffc00000
c001398c:	01 f3                	add    ebx,esi
c001398e:	09 ca                	or     edx,ecx
c0013990:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0013997:	83 c4 1c             	add    esp,0x1c
c001399a:	5b                   	pop    ebx
c001399b:	5e                   	pop    esi
c001399c:	5f                   	pop    edi
c001399d:	5d                   	pop    ebp
c001399e:	c3                   	ret    
c001399f:	83 ec 0c             	sub    esp,0xc
c00139a2:	68 a4 4b 02 c0       	push   0xc0024ba4
c00139a7:	e8 10 c1 ff ff       	call   c000fabc <KePanic(char const*)>
c00139ac:	83 c4 10             	add    esp,0x10
c00139af:	eb a3                	jmp    c0013954 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c00139b1:	e8 00 c3 ff ff       	call   c000fcb6 <Phys::allocatePage()>
c00139b6:	8b 0d 90 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d290
c00139bc:	83 ec 0c             	sub    esp,0xc
c00139bf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00139c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139c7:	6a 01                	push   0x1
c00139c9:	e8 35 f6 ff ff       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c00139ce:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00139d5:	6a 01                	push   0x1
c00139d7:	50                   	push   eax
c00139d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139dc:	50                   	push   eax
c00139dd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00139e1:	51                   	push   ecx
c00139e2:	e8 ef fe ff ff       	call   c00138d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00139e7:	83 c4 1c             	add    esp,0x1c
c00139ea:	68 00 10 00 00       	push   0x1000
c00139ef:	6a 00                	push   0x0
c00139f1:	50                   	push   eax
c00139f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139f6:	e8 f5 ca fe ff       	call   c00004f0 <memset>
c00139fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00139ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013a02:	e8 fa f8 ff ff       	call   c0013301 <Virt::freeKernelVirtualPages(unsigned long)>
c0013a07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a0b:	83 c4 10             	add    esp,0x10
c0013a0e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013a11:	81 ca 07 04 00 00    	or     edx,0x407
c0013a17:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0013a1a:	e9 4a ff ff ff       	jmp    c0013969 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0013a1f:	90                   	nop

c0013a20 <VAS::VAS(bool)>:
c0013a20:	53                   	push   ebx
c0013a21:	83 ec 28             	sub    esp,0x28
c0013a24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013a28:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013a2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a3b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013a42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a46:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013a4a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013a4d:	e8 64 c2 ff ff       	call   c000fcb6 <Phys::allocatePage()>
c0013a52:	89 c2                	mov    edx,eax
c0013a54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a58:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013a5b:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c0013a61:	83 ec 0c             	sub    esp,0xc
c0013a64:	6a 01                	push   0x1
c0013a66:	e8 98 f5 ff ff       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c0013a6b:	83 c4 10             	add    esp,0x10
c0013a6e:	89 c2                	mov    edx,eax
c0013a70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a74:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013a77:	83 ec 0c             	sub    esp,0xc
c0013a7a:	6a 03                	push   0x3
c0013a7c:	6a 01                	push   0x1
c0013a7e:	52                   	push   edx
c0013a7f:	50                   	push   eax
c0013a80:	53                   	push   ebx
c0013a81:	e8 50 fe ff ff       	call   c00138d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013a86:	83 c4 20             	add    esp,0x20
c0013a89:	89 c2                	mov    edx,eax
c0013a8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a8f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013a92:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a9a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013aa2:	7f 1d                	jg     c0013ac1 <VAS::VAS(bool)+0xa1>
c0013aa4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013aa8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013aab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013aaf:	c1 e2 02             	shl    edx,0x2
c0013ab2:	01 d0                	add    eax,edx
c0013ab4:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013aba:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013abf:	eb d9                	jmp    c0013a9a <VAS::VAS(bool)+0x7a>
c0013ac1:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013ac9:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013ad1:	7f 59                	jg     c0013b2c <VAS::VAS(bool)+0x10c>
c0013ad3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ad7:	2d 00 02 00 00       	sub    eax,0x200
c0013adc:	c1 e0 0c             	shl    eax,0xc
c0013adf:	89 c2                	mov    edx,eax
c0013ae1:	a1 28 d4 02 c0       	mov    eax,ds:0xc002d428
c0013ae6:	89 d1                	mov    ecx,edx
c0013ae8:	09 c1                	or     ecx,eax
c0013aea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013aee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013af1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013af5:	c1 e2 02             	shl    edx,0x2
c0013af8:	01 d0                	add    eax,edx
c0013afa:	83 c9 05             	or     ecx,0x5
c0013afd:	89 ca                	mov    edx,ecx
c0013aff:	89 10                	mov    DWORD PTR [eax],edx
c0013b01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b05:	2d 40 03 00 00       	sub    eax,0x340
c0013b0a:	83 f8 7f             	cmp    eax,0x7f
c0013b0d:	77 16                	ja     c0013b25 <VAS::VAS(bool)+0x105>
c0013b0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013b16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b1a:	c1 e2 02             	shl    edx,0x2
c0013b1d:	01 d0                	add    eax,edx
c0013b1f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013b25:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013b2a:	eb 9d                	jmp    c0013ac9 <VAS::VAS(bool)+0xa9>
c0013b2c:	8b 15 28 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d428
c0013b32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b36:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013b39:	05 20 0c 00 00       	add    eax,0xc20
c0013b3e:	81 ca 03 40 00 00    	or     edx,0x4003
c0013b44:	89 10                	mov    DWORD PTR [eax],edx
c0013b46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b4a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013b4d:	a1 28 d4 02 c0       	mov    eax,ds:0xc002d428
c0013b52:	09 c2                	or     edx,eax
c0013b54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b58:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013b5b:	05 fc 0f 00 00       	add    eax,0xffc
c0013b60:	83 ca 03             	or     edx,0x3
c0013b63:	89 10                	mov    DWORD PTR [eax],edx
c0013b65:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0013b6a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013b70:	83 ec 0c             	sub    esp,0xc
c0013b73:	50                   	push   eax
c0013b74:	e8 db 60 ff ff       	call   c0009c54 <Device::getName()>
c0013b79:	83 c4 10             	add    esp,0x10
c0013b7c:	83 ec 08             	sub    esp,0x8
c0013b7f:	68 17 4e 02 c0       	push   0xc0024e17
c0013b84:	50                   	push   eax
c0013b85:	e8 f6 cb fe ff       	call   c0000780 <strcmp>
c0013b8a:	83 c4 10             	add    esp,0x10
c0013b8d:	85 c0                	test   eax,eax
c0013b8f:	0f 94 c0             	sete   al
c0013b92:	0f b6 c0             	movzx  eax,al
c0013b95:	85 c0                	test   eax,eax
c0013b97:	74 68                	je     c0013c01 <VAS::VAS(bool)+0x1e1>
c0013b99:	fa                   	cli    
c0013b9a:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0013b9f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013ba5:	05 68 09 00 00       	add    eax,0x968
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	50                   	push   eax
c0013bae:	e8 93 ae ff ff       	call   c000ea46 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013bb3:	83 c4 10             	add    esp,0x10
c0013bb6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013bbb:	89 c3                	mov    ebx,eax
c0013bbd:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0013bc2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013bc8:	05 68 09 00 00       	add    eax,0x968
c0013bcd:	83 ec 0c             	sub    esp,0xc
c0013bd0:	50                   	push   eax
c0013bd1:	e8 70 ae ff ff       	call   c000ea46 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	83 ec 08             	sub    esp,0x8
c0013bdc:	50                   	push   eax
c0013bdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013be1:	e8 fc f6 ff ff       	call   c00132e2 <VAS::getPageTableEntry(unsigned long)>
c0013be6:	83 c4 10             	add    esp,0x10
c0013be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0013beb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013bf0:	6a 11                	push   0x11
c0013bf2:	53                   	push   ebx
c0013bf3:	50                   	push   eax
c0013bf4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013bf8:	e8 df fa ff ff       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0013bfd:	83 c4 10             	add    esp,0x10
c0013c00:	fb                   	sti    
c0013c01:	90                   	nop
c0013c02:	83 c4 28             	add    esp,0x28
c0013c05:	5b                   	pop    ebx
c0013c06:	c3                   	ret    
c0013c07:	90                   	nop

c0013c08 <VAS::evict(unsigned long)>:
c0013c08:	55                   	push   ebp
c0013c09:	57                   	push   edi
c0013c0a:	56                   	push   esi
c0013c0b:	53                   	push   ebx
c0013c0c:	83 ec 24             	sub    esp,0x24
c0013c0f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013c13:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013c17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c1b:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0013c20:	50                   	push   eax
c0013c21:	68 25 4e 02 c0       	push   0xc0024e25
c0013c26:	e8 3b 33 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013c2b:	e8 28 f5 ff ff       	call   c0013158 <Virt::allocateSwapfilePage()>
c0013c30:	83 c4 10             	add    esp,0x10
c0013c33:	89 c7                	mov    edi,eax
c0013c35:	a1 ac 6d 02 c0       	mov    eax,ds:0xc0026dac
c0013c3a:	85 c0                	test   eax,eax
c0013c3c:	7e 40                	jle    c0013c7e <VAS::evict(unsigned long)+0x76>
c0013c3e:	89 ee                	mov    esi,ebp
c0013c40:	31 db                	xor    ebx,ebx
c0013c42:	83 ec 0c             	sub    esp,0xc
c0013c45:	57                   	push   edi
c0013c46:	e8 f7 f4 ff ff       	call   c0013142 <Virt::swapIDToSector(unsigned long)>
c0013c4b:	31 d2                	xor    edx,edx
c0013c4d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c50:	81 c6 00 02 00 00    	add    esi,0x200
c0013c56:	6a 01                	push   0x1
c0013c58:	52                   	push   edx
c0013c59:	01 d8                	add    eax,ebx
c0013c5b:	83 c3 01             	add    ebx,0x1
c0013c5e:	50                   	push   eax
c0013c5f:	0f be 05 b8 6d 02 c0 	movsx  eax,BYTE PTR ds:0xc0026db8
c0013c66:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c0013c6d:	50                   	push   eax
c0013c6e:	e8 0f 6e ff ff       	call   c000aa82 <LogicalDisk::write(unsigned long long, int, void*)>
c0013c73:	83 c4 20             	add    esp,0x20
c0013c76:	39 1d ac 6d 02 c0    	cmp    DWORD PTR ds:0xc0026dac,ebx
c0013c7c:	7f c4                	jg     c0013c42 <VAS::evict(unsigned long)+0x3a>
c0013c7e:	c1 e7 0c             	shl    edi,0xc
c0013c81:	83 ec 08             	sub    esp,0x8
c0013c84:	55                   	push   ebp
c0013c85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c89:	50                   	push   eax
c0013c8a:	e8 53 f6 ff ff       	call   c00132e2 <VAS::getPageTableEntry(unsigned long)>
c0013c8f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c91:	89 d3                	mov    ebx,edx
c0013c93:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013c99:	09 d7                	or     edi,edx
c0013c9b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013ca1:	89 38                	mov    DWORD PTR [eax],edi
c0013ca3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ca6:	8b 15 88 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d288
c0013cac:	83 c2 01             	add    edx,0x1
c0013caf:	89 15 88 d2 02 c0    	mov    DWORD PTR ds:0xc002d288,edx
c0013cb5:	e8 93 bf ff ff       	call   c000fc4d <Phys::freePage(unsigned long)>
c0013cba:	0f 20 d8             	mov    eax,cr3
c0013cbd:	0f 22 d8             	mov    cr3,eax
c0013cc0:	8b 0d 88 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d288
c0013cc6:	51                   	push   ecx
c0013cc7:	55                   	push   ebp
c0013cc8:	53                   	push   ebx
c0013cc9:	68 c8 4b 02 c0       	push   0xc0024bc8
c0013cce:	e8 93 32 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013cd3:	a1 84 d2 02 c0       	mov    eax,ds:0xc002d284
c0013cd8:	83 c4 18             	add    esp,0x18
c0013cdb:	50                   	push   eax
c0013cdc:	68 3a 4e 02 c0       	push   0xc0024e3a
c0013ce1:	8d 50 01             	lea    edx,[eax+0x1]
c0013ce4:	89 15 84 d2 02 c0    	mov    DWORD PTR ds:0xc002d284,edx
c0013cea:	e8 77 32 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013cef:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0013cf4:	c7 44 24 40 4c 4e 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024e4c
c0013cfc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013d00:	83 c4 2c             	add    esp,0x2c
c0013d03:	5b                   	pop    ebx
c0013d04:	5e                   	pop    esi
c0013d05:	5f                   	pop    edi
c0013d06:	5d                   	pop    ebp
c0013d07:	e9 5a 32 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c0013d0c <VAS::canLockPage(unsigned long)>:
c0013d0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013d10:	50                   	push   eax
c0013d11:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013d15:	52                   	push   edx
c0013d16:	e8 c7 f5 ff ff       	call   c00132e2 <VAS::getPageTableEntry(unsigned long)>
c0013d1b:	59                   	pop    ecx
c0013d1c:	5a                   	pop    edx
c0013d1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d1f:	c1 e8 0b             	shr    eax,0xb
c0013d22:	83 e0 01             	and    eax,0x1
c0013d25:	c3                   	ret    

c0013d26 <VAS::unlockPage(unsigned long)>:
c0013d26:	83 ec 0c             	sub    esp,0xc
c0013d29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d2d:	50                   	push   eax
c0013d2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d32:	52                   	push   edx
c0013d33:	e8 aa f5 ff ff       	call   c00132e2 <VAS::getPageTableEntry(unsigned long)>
c0013d38:	59                   	pop    ecx
c0013d39:	5a                   	pop    edx
c0013d3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d3c:	f6 c6 08             	test   dh,0x8
c0013d3f:	75 09                	jne    c0013d4a <VAS::unlockPage(unsigned long)+0x24>
c0013d41:	80 ce 08             	or     dh,0x8
c0013d44:	89 10                	mov    DWORD PTR [eax],edx
c0013d46:	83 c4 0c             	add    esp,0xc
c0013d49:	c3                   	ret    
c0013d4a:	c7 44 24 10 fc 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024bfc
c0013d52:	83 c4 0c             	add    esp,0xc
c0013d55:	e9 62 bd ff ff       	jmp    c000fabc <KePanic(char const*)>

c0013d5a <VAS::canLockPages(unsigned long, int)>:
c0013d5a:	55                   	push   ebp
c0013d5b:	57                   	push   edi
c0013d5c:	56                   	push   esi
c0013d5d:	53                   	push   ebx
c0013d5e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013d66:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d6a:	85 ff                	test   edi,edi
c0013d6c:	7e 23                	jle    c0013d91 <VAS::canLockPages(unsigned long, int)+0x37>
c0013d6e:	31 f6                	xor    esi,esi
c0013d70:	eb 0d                	jmp    c0013d7f <VAS::canLockPages(unsigned long, int)+0x25>
c0013d72:	83 c6 01             	add    esi,0x1
c0013d75:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013d7b:	39 f7                	cmp    edi,esi
c0013d7d:	74 0d                	je     c0013d8c <VAS::canLockPages(unsigned long, int)+0x32>
c0013d7f:	53                   	push   ebx
c0013d80:	55                   	push   ebp
c0013d81:	e8 86 ff ff ff       	call   c0013d0c <VAS::canLockPage(unsigned long)>
c0013d86:	5a                   	pop    edx
c0013d87:	59                   	pop    ecx
c0013d88:	84 c0                	test   al,al
c0013d8a:	75 e6                	jne    c0013d72 <VAS::canLockPages(unsigned long, int)+0x18>
c0013d8c:	5b                   	pop    ebx
c0013d8d:	5e                   	pop    esi
c0013d8e:	5f                   	pop    edi
c0013d8f:	5d                   	pop    ebp
c0013d90:	c3                   	ret    
c0013d91:	b0 01                	mov    al,0x1
c0013d93:	eb f7                	jmp    c0013d8c <VAS::canLockPages(unsigned long, int)+0x32>
c0013d95:	90                   	nop

c0013d96 <VAS::unlockPages(unsigned long, int)>:
c0013d96:	55                   	push   ebp
c0013d97:	57                   	push   edi
c0013d98:	56                   	push   esi
c0013d99:	53                   	push   ebx
c0013d9a:	83 ec 0c             	sub    esp,0xc
c0013d9d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013da1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013da5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013da9:	85 ff                	test   edi,edi
c0013dab:	7e 1c                	jle    c0013dc9 <VAS::unlockPages(unsigned long, int)+0x33>
c0013dad:	31 f6                	xor    esi,esi
c0013daf:	83 ec 08             	sub    esp,0x8
c0013db2:	83 c6 01             	add    esi,0x1
c0013db5:	53                   	push   ebx
c0013db6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013dbc:	55                   	push   ebp
c0013dbd:	e8 64 ff ff ff       	call   c0013d26 <VAS::unlockPage(unsigned long)>
c0013dc2:	83 c4 10             	add    esp,0x10
c0013dc5:	39 f7                	cmp    edi,esi
c0013dc7:	75 e6                	jne    c0013daf <VAS::unlockPages(unsigned long, int)+0x19>
c0013dc9:	83 c4 0c             	add    esp,0xc
c0013dcc:	5b                   	pop    ebx
c0013dcd:	5e                   	pop    esi
c0013dce:	5f                   	pop    edi
c0013dcf:	5d                   	pop    ebp
c0013dd0:	c3                   	ret    
c0013dd1:	90                   	nop

c0013dd2 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0013dd2:	55                   	push   ebp
c0013dd3:	57                   	push   edi
c0013dd4:	56                   	push   esi
c0013dd5:	53                   	push   ebx
c0013dd6:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0013ddc:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0013de3:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0013de9:	77 6f                	ja     c0013e5a <VAS::tryLoadBackOffDisk(unsigned long)+0x88>
c0013deb:	83 ec 08             	sub    esp,0x8
c0013dee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013df4:	53                   	push   ebx
c0013df5:	8b bc 24 3c 10 00 00 	mov    edi,DWORD PTR [esp+0x103c]
c0013dfc:	57                   	push   edi
c0013dfd:	e8 e0 f4 ff ff       	call   c00132e2 <VAS::getPageTableEntry(unsigned long)>
c0013e02:	83 c4 10             	add    esp,0x10
c0013e05:	85 c0                	test   eax,eax
c0013e07:	89 c5                	mov    ebp,eax
c0013e09:	0f 95 c0             	setne  al
c0013e0c:	85 db                	test   ebx,ebx
c0013e0e:	0f 95 c2             	setne  dl
c0013e11:	21 d0                	and    eax,edx
c0013e13:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0013e17:	a8 01                	test   al,0x1
c0013e19:	75 0f                	jne    c0013e2a <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c0013e1b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0013e1f:	81 c4 1c 10 00 00    	add    esp,0x101c
c0013e25:	5b                   	pop    ebx
c0013e26:	5e                   	pop    esi
c0013e27:	5f                   	pop    edi
c0013e28:	5d                   	pop    ebp
c0013e29:	c3                   	ret    
c0013e2a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e2d:	f6 c4 02             	test   ah,0x2
c0013e30:	75 3d                	jne    c0013e6f <VAS::tryLoadBackOffDisk(unsigned long)+0x9d>
c0013e32:	89 c1                	mov    ecx,eax
c0013e34:	81 e1 01 04 00 00    	and    ecx,0x401
c0013e3a:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0013e40:	0f 84 91 00 00 00    	je     c0013ed7 <VAS::tryLoadBackOffDisk(unsigned long)+0x105>
c0013e46:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0013e4b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0013e4f:	81 c4 1c 10 00 00    	add    esp,0x101c
c0013e55:	5b                   	pop    ebx
c0013e56:	5e                   	pop    esi
c0013e57:	5f                   	pop    edi
c0013e58:	5d                   	pop    ebp
c0013e59:	c3                   	ret    
c0013e5a:	83 ec 0c             	sub    esp,0xc
c0013e5d:	68 61 4e 02 c0       	push   0xc0024e61
c0013e62:	e8 55 bc ff ff       	call   c000fabc <KePanic(char const*)>
c0013e67:	83 c4 10             	add    esp,0x10
c0013e6a:	e9 7c ff ff ff       	jmp    c0013deb <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0013e6f:	83 ec 0c             	sub    esp,0xc
c0013e72:	68 2c 4c 02 c0       	push   0xc0024c2c
c0013e77:	e8 ea 30 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013e7c:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0013e7f:	e8 32 be ff ff       	call   c000fcb6 <Phys::allocatePage()>
c0013e84:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0013e8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e8e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e91:	83 c8 01             	or     eax,0x1
c0013e94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e97:	0f 20 d8             	mov    eax,cr3
c0013e9a:	0f 22 d8             	mov    cr3,eax
c0013e9d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013ea1:	b8 00 10 00 00       	mov    eax,0x1000
c0013ea6:	89 d7                	mov    edi,edx
c0013ea8:	89 c1                	mov    ecx,eax
c0013eaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013eac:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013eaf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013eb3:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0013eb9:	09 f1                	or     ecx,esi
c0013ebb:	83 c9 02             	or     ecx,0x2
c0013ebe:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013ec1:	0f 20 d9             	mov    ecx,cr3
c0013ec4:	0f 22 d9             	mov    cr3,ecx
c0013ec7:	89 d6                	mov    esi,edx
c0013ec9:	89 df                	mov    edi,ebx
c0013ecb:	89 c1                	mov    ecx,eax
c0013ecd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ecf:	83 c4 10             	add    esp,0x10
c0013ed2:	e9 44 ff ff ff       	jmp    c0013e1b <VAS::tryLoadBackOffDisk(unsigned long)+0x49>
c0013ed7:	c1 e8 0c             	shr    eax,0xc
c0013eda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ede:	e8 d3 bd ff ff       	call   c000fcb6 <Phys::allocatePage()>
c0013ee3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013ee6:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0013eec:	09 c1                	or     ecx,eax
c0013eee:	81 c9 01 08 00 00    	or     ecx,0x801
c0013ef4:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013ef7:	a1 ac 6d 02 c0       	mov    eax,ds:0xc0026dac
c0013efc:	85 c0                	test   eax,eax
c0013efe:	7e 51                	jle    c0013f51 <VAS::tryLoadBackOffDisk(unsigned long)+0x17f>
c0013f00:	89 dd                	mov    ebp,ebx
c0013f02:	31 f6                	xor    esi,esi
c0013f04:	83 ec 08             	sub    esp,0x8
c0013f07:	55                   	push   ebp
c0013f08:	68 73 4e 02 c0       	push   0xc0024e73
c0013f0d:	e8 54 30 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013f12:	59                   	pop    ecx
c0013f13:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f17:	57                   	push   edi
c0013f18:	e8 25 f2 ff ff       	call   c0013142 <Virt::swapIDToSector(unsigned long)>
c0013f1d:	31 d2                	xor    edx,edx
c0013f1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013f22:	81 c5 00 02 00 00    	add    ebp,0x200
c0013f28:	6a 01                	push   0x1
c0013f2a:	52                   	push   edx
c0013f2b:	8d 3c 06             	lea    edi,[esi+eax*1]
c0013f2e:	0f be 05 b8 6d 02 c0 	movsx  eax,BYTE PTR ds:0xc0026db8
c0013f35:	83 c6 01             	add    esi,0x1
c0013f38:	57                   	push   edi
c0013f39:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c0013f40:	50                   	push   eax
c0013f41:	e8 d0 6a ff ff       	call   c000aa16 <LogicalDisk::read(unsigned long long, int, void*)>
c0013f46:	83 c4 20             	add    esp,0x20
c0013f49:	39 35 ac 6d 02 c0    	cmp    DWORD PTR ds:0xc0026dac,esi
c0013f4f:	7f b3                	jg     c0013f04 <VAS::tryLoadBackOffDisk(unsigned long)+0x132>
c0013f51:	a1 88 d2 02 c0       	mov    eax,ds:0xc002d288
c0013f56:	83 ec 04             	sub    esp,0x4
c0013f59:	83 e8 01             	sub    eax,0x1
c0013f5c:	50                   	push   eax
c0013f5d:	53                   	push   ebx
c0013f5e:	68 8c 4e 02 c0       	push   0xc0024e8c
c0013f63:	a3 88 d2 02 c0       	mov    ds:0xc002d288,eax
c0013f68:	e8 f9 2f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013f6d:	58                   	pop    eax
c0013f6e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f72:	52                   	push   edx
c0013f73:	e8 a7 f1 ff ff       	call   c001311f <Virt::freeSwapfilePage(unsigned long)>
c0013f78:	0f 20 d8             	mov    eax,cr3
c0013f7b:	0f 22 d8             	mov    cr3,eax
c0013f7e:	83 c4 10             	add    esp,0x10
c0013f81:	e9 95 fe ff ff       	jmp    c0013e1b <VAS::tryLoadBackOffDisk(unsigned long)+0x49>

c0013f86 <VAS::lockPage(unsigned long)>:
c0013f86:	56                   	push   esi
c0013f87:	53                   	push   ebx
c0013f88:	83 ec 04             	sub    esp,0x4
c0013f8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f93:	50                   	push   eax
c0013f94:	56                   	push   esi
c0013f95:	e8 48 f3 ff ff       	call   c00132e2 <VAS::getPageTableEntry(unsigned long)>
c0013f9a:	5a                   	pop    edx
c0013f9b:	59                   	pop    ecx
c0013f9c:	89 c3                	mov    ebx,eax
c0013f9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fa0:	a8 01                	test   al,0x1
c0013fa2:	74 10                	je     c0013fb4 <VAS::lockPage(unsigned long)+0x2e>
c0013fa4:	f6 c4 08             	test   ah,0x8
c0013fa7:	74 28                	je     c0013fd1 <VAS::lockPage(unsigned long)+0x4b>
c0013fa9:	80 e4 f7             	and    ah,0xf7
c0013fac:	89 03                	mov    DWORD PTR [ebx],eax
c0013fae:	83 c4 04             	add    esp,0x4
c0013fb1:	5b                   	pop    ebx
c0013fb2:	5e                   	pop    esi
c0013fb3:	c3                   	ret    
c0013fb4:	83 ec 08             	sub    esp,0x8
c0013fb7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013fbc:	50                   	push   eax
c0013fbd:	56                   	push   esi
c0013fbe:	e8 0f fe ff ff       	call   c0013dd2 <VAS::tryLoadBackOffDisk(unsigned long)>
c0013fc3:	83 c4 10             	add    esp,0x10
c0013fc6:	84 c0                	test   al,al
c0013fc8:	74 19                	je     c0013fe3 <VAS::lockPage(unsigned long)+0x5d>
c0013fca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fcc:	f6 c4 08             	test   ah,0x8
c0013fcf:	75 d8                	jne    c0013fa9 <VAS::lockPage(unsigned long)+0x23>
c0013fd1:	c7 44 24 10 fc 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024bfc
c0013fd9:	83 c4 04             	add    esp,0x4
c0013fdc:	5b                   	pop    ebx
c0013fdd:	5e                   	pop    esi
c0013fde:	e9 d9 ba ff ff       	jmp    c000fabc <KePanic(char const*)>
c0013fe3:	83 ec 0c             	sub    esp,0xc
c0013fe6:	68 4c 4c 02 c0       	push   0xc0024c4c
c0013feb:	e8 cc ba ff ff       	call   c000fabc <KePanic(char const*)>
c0013ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ff2:	83 c4 10             	add    esp,0x10
c0013ff5:	eb ad                	jmp    c0013fa4 <VAS::lockPage(unsigned long)+0x1e>
c0013ff7:	90                   	nop

c0013ff8 <VAS::lockPages(unsigned long, int)>:
c0013ff8:	55                   	push   ebp
c0013ff9:	57                   	push   edi
c0013ffa:	56                   	push   esi
c0013ffb:	53                   	push   ebx
c0013ffc:	83 ec 0c             	sub    esp,0xc
c0013fff:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014003:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001400b:	85 ff                	test   edi,edi
c001400d:	7e 1c                	jle    c001402b <VAS::lockPages(unsigned long, int)+0x33>
c001400f:	31 f6                	xor    esi,esi
c0014011:	83 ec 08             	sub    esp,0x8
c0014014:	83 c6 01             	add    esi,0x1
c0014017:	53                   	push   ebx
c0014018:	81 c3 00 10 00 00    	add    ebx,0x1000
c001401e:	55                   	push   ebp
c001401f:	e8 62 ff ff ff       	call   c0013f86 <VAS::lockPage(unsigned long)>
c0014024:	83 c4 10             	add    esp,0x10
c0014027:	39 f7                	cmp    edi,esi
c0014029:	75 e6                	jne    c0014011 <VAS::lockPages(unsigned long, int)+0x19>
c001402b:	83 c4 0c             	add    esp,0xc
c001402e:	5b                   	pop    ebx
c001402f:	5e                   	pop    esi
c0014030:	5f                   	pop    edi
c0014031:	5d                   	pop    ebp
c0014032:	c3                   	ret    
c0014033:	90                   	nop

c0014034 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014034:	55                   	push   ebp
c0014035:	57                   	push   edi
c0014036:	56                   	push   esi
c0014037:	53                   	push   ebx
c0014038:	83 ec 28             	sub    esp,0x28
c001403b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001403f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014043:	50                   	push   eax
c0014044:	e8 ba ef ff ff       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c0014049:	83 c4 0c             	add    esp,0xc
c001404c:	6a 07                	push   0x7
c001404e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014052:	52                   	push   edx
c0014053:	89 c5                	mov    ebp,eax
c0014055:	53                   	push   ebx
c0014056:	e8 89 f7 ff ff       	call   c00137e4 <VAS::allocatePages(int, int)>
c001405b:	83 c4 10             	add    esp,0x10
c001405e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014062:	89 c7                	mov    edi,eax
c0014064:	85 c9                	test   ecx,ecx
c0014066:	74 2f                	je     c0014097 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014068:	31 f6                	xor    esi,esi
c001406a:	e8 47 bc ff ff       	call   c000fcb6 <Phys::allocatePage()>
c001406f:	83 c6 01             	add    esi,0x1
c0014072:	6a 03                	push   0x3
c0014074:	55                   	push   ebp
c0014075:	50                   	push   eax
c0014076:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001407a:	53                   	push   ebx
c001407b:	e8 5c f6 ff ff       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0014080:	6a 07                	push   0x7
c0014082:	57                   	push   edi
c0014083:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014087:	50                   	push   eax
c0014088:	53                   	push   ebx
c0014089:	e8 4e f6 ff ff       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c001408e:	83 c4 20             	add    esp,0x20
c0014091:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0014095:	75 d3                	jne    c001406a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014097:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001409b:	89 28                	mov    DWORD PTR [eax],ebp
c001409d:	83 c4 1c             	add    esp,0x1c
c00140a0:	89 f8                	mov    eax,edi
c00140a2:	5b                   	pop    ebx
c00140a3:	5e                   	pop    esi
c00140a4:	5f                   	pop    edi
c00140a5:	5d                   	pop    ebp
c00140a6:	c3                   	ret    
c00140a7:	90                   	nop

c00140a8 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c00140a8:	53                   	push   ebx
c00140a9:	83 ec 14             	sub    esp,0x14
c00140ac:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00140b0:	68 7c 4c 02 c0       	push   0xc0024c7c
c00140b5:	e8 ac 2e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00140ba:	c7 04 24 dc 4c 02 c0 	mov    DWORD PTR [esp],0xc0024cdc
c00140c1:	e8 a0 2e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00140c6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00140ca:	83 c4 18             	add    esp,0x18
c00140cd:	5b                   	pop    ebx
c00140ce:	e9 2e f2 ff ff       	jmp    c0013301 <Virt::freeKernelVirtualPages(unsigned long)>
c00140d3:	90                   	nop

c00140d4 <VAS::scanForEviction()>:
c00140d4:	57                   	push   edi
c00140d5:	56                   	push   esi
c00140d6:	31 f6                	xor    esi,esi
c00140d8:	53                   	push   ebx
c00140d9:	83 ec 18             	sub    esp,0x18
c00140dc:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00140e1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00140e5:	50                   	push   eax
c00140e6:	68 58 4d 02 c0       	push   0xc0024d58
c00140eb:	e8 76 2e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00140f0:	c7 04 24 a1 4e 02 c0 	mov    DWORD PTR [esp],0xc0024ea1
c00140f7:	e8 6a 2e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00140fc:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00140ff:	83 c4 10             	add    esp,0x10
c0014102:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014108:	75 0e                	jne    c0014118 <VAS::scanForEviction()+0x44>
c001410a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001410d:	89 da                	mov    edx,ebx
c001410f:	c1 ea 16             	shr    edx,0x16
c0014112:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014116:	74 5b                	je     c0014173 <VAS::scanForEviction()+0x9f>
c0014118:	83 ec 08             	sub    esp,0x8
c001411b:	53                   	push   ebx
c001411c:	57                   	push   edi
c001411d:	e8 c0 f1 ff ff       	call   c00132e2 <VAS::getPageTableEntry(unsigned long)>
c0014122:	83 c4 10             	add    esp,0x10
c0014125:	8b 10                	mov    edx,DWORD PTR [eax]
c0014127:	89 d1                	mov    ecx,edx
c0014129:	c1 e9 0c             	shr    ecx,0xc
c001412c:	74 10                	je     c001413e <VAS::scanForEviction()+0x6a>
c001412e:	89 d1                	mov    ecx,edx
c0014130:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0014136:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c001413c:	74 40                	je     c001417e <VAS::scanForEviction()+0xaa>
c001413e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014144:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001414a:	76 2d                	jbe    c0014179 <VAS::scanForEviction()+0xa5>
c001414c:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014153:	83 c6 01             	add    esi,0x1
c0014156:	83 fe 03             	cmp    esi,0x3
c0014159:	74 37                	je     c0014192 <VAS::scanForEviction()+0xbe>
c001415b:	31 db                	xor    ebx,ebx
c001415d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014163:	75 b3                	jne    c0014118 <VAS::scanForEviction()+0x44>
c0014165:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014168:	89 da                	mov    edx,ebx
c001416a:	c1 ea 16             	shr    edx,0x16
c001416d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014171:	75 a5                	jne    c0014118 <VAS::scanForEviction()+0x44>
c0014173:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014179:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001417c:	eb 84                	jmp    c0014102 <VAS::scanForEviction()+0x2e>
c001417e:	f6 c2 01             	test   dl,0x1
c0014181:	74 bb                	je     c001413e <VAS::scanForEviction()+0x6a>
c0014183:	f6 c2 20             	test   dl,0x20
c0014186:	74 13                	je     c001419b <VAS::scanForEviction()+0xc7>
c0014188:	83 e2 df             	and    edx,0xffffffdf
c001418b:	89 10                	mov    DWORD PTR [eax],edx
c001418d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014190:	eb ac                	jmp    c001413e <VAS::scanForEviction()+0x6a>
c0014192:	83 c4 10             	add    esp,0x10
c0014195:	31 c0                	xor    eax,eax
c0014197:	5b                   	pop    ebx
c0014198:	5e                   	pop    esi
c0014199:	5f                   	pop    edi
c001419a:	c3                   	ret    
c001419b:	89 d0                	mov    eax,edx
c001419d:	83 ec 08             	sub    esp,0x8
c00141a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00141a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141a9:	53                   	push   ebx
c00141aa:	68 bd 4e 02 c0       	push   0xc0024ebd
c00141af:	e8 b2 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141b4:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00141b7:	58                   	pop    eax
c00141b8:	5a                   	pop    edx
c00141b9:	51                   	push   ecx
c00141ba:	57                   	push   edi
c00141bb:	e8 48 fa ff ff       	call   c0013c08 <VAS::evict(unsigned long)>
c00141c0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00141c3:	5b                   	pop    ebx
c00141c4:	5e                   	pop    esi
c00141c5:	50                   	push   eax
c00141c6:	68 d1 4e 02 c0       	push   0xc0024ed1
c00141cb:	e8 96 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141d0:	58                   	pop    eax
c00141d1:	5a                   	pop    edx
c00141d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141d6:	50                   	push   eax
c00141d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00141db:	68 e4 4e 02 c0       	push   0xc0024ee4
c00141e0:	e8 81 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141e5:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00141e8:	81 c1 00 10 00 00    	add    ecx,0x1000
c00141ee:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00141f1:	8b 3d 30 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d330
c00141f7:	5b                   	pop    ebx
c00141f8:	5e                   	pop    esi
c00141f9:	57                   	push   edi
c00141fa:	68 78 4d 02 c0       	push   0xc0024d78
c00141ff:	e8 62 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014204:	83 c4 10             	add    esp,0x10
c0014207:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001420b:	83 c4 10             	add    esp,0x10
c001420e:	5b                   	pop    ebx
c001420f:	5e                   	pop    esi
c0014210:	5f                   	pop    edi
c0014211:	c3                   	ret    

c0014212 <mapVASFirstTime>:
c0014212:	55                   	push   ebp
c0014213:	57                   	push   edi
c0014214:	56                   	push   esi
c0014215:	53                   	push   ebx
c0014216:	83 ec 0c             	sub    esp,0xc
c0014219:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001421e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014221:	83 fa 01             	cmp    edx,0x1
c0014224:	0f 84 cb 00 00 00    	je     c00142f5 <mapVASFirstTime+0xe3>
c001422a:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001422d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0014232:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014237:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001423a:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c0014240:	c1 e5 15             	shl    ebp,0x15
c0014243:	29 eb                	sub    ebx,ebp
c0014245:	29 ef                	sub    edi,ebp
c0014247:	e8 6a ba ff ff       	call   c000fcb6 <Phys::allocatePage()>
c001424c:	83 ec 0c             	sub    esp,0xc
c001424f:	68 03 04 00 00       	push   0x403
c0014254:	6a 01                	push   0x1
c0014256:	53                   	push   ebx
c0014257:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001425d:	50                   	push   eax
c001425e:	56                   	push   esi
c001425f:	e8 72 f6 ff ff       	call   c00138d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014264:	83 c4 20             	add    esp,0x20
c0014267:	39 fb                	cmp    ebx,edi
c0014269:	75 dc                	jne    c0014247 <mapVASFirstTime+0x35>
c001426b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014270:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014275:	29 eb                	sub    ebx,ebp
c0014277:	29 ef                	sub    edi,ebp
c0014279:	e8 38 ba ff ff       	call   c000fcb6 <Phys::allocatePage()>
c001427e:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014282:	83 fa 01             	cmp    edx,0x1
c0014285:	19 d2                	sbb    edx,edx
c0014287:	83 ec 0c             	sub    esp,0xc
c001428a:	83 e2 04             	and    edx,0x4
c001428d:	81 c2 03 04 00 00    	add    edx,0x403
c0014293:	52                   	push   edx
c0014294:	6a 01                	push   0x1
c0014296:	53                   	push   ebx
c0014297:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001429d:	50                   	push   eax
c001429e:	56                   	push   esi
c001429f:	e8 32 f6 ff ff       	call   c00138d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00142a4:	83 c4 20             	add    esp,0x20
c00142a7:	39 df                	cmp    edi,ebx
c00142a9:	75 ce                	jne    c0014279 <mapVASFirstTime+0x67>
c00142ab:	83 ec 0c             	sub    esp,0xc
c00142ae:	bb 7c 90 02 c0       	mov    ebx,0xc002907c
c00142b3:	6a 04                	push   0x4
c00142b5:	81 eb 00 80 02 c0    	sub    ebx,0xc0028000
c00142bb:	6a ff                	push   0xffffffff
c00142bd:	c1 eb 0c             	shr    ebx,0xc
c00142c0:	53                   	push   ebx
c00142c1:	68 00 80 02 c0       	push   0xc0028000
c00142c6:	56                   	push   esi
c00142c7:	e8 b0 f1 ff ff       	call   c001347c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00142cc:	83 c4 14             	add    esp,0x14
c00142cf:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c00142d4:	6a 04                	push   0x4
c00142d6:	6a ff                	push   0xffffffff
c00142d8:	53                   	push   ebx
c00142d9:	68 00 80 02 c0       	push   0xc0028000
c00142de:	50                   	push   eax
c00142df:	e8 98 f1 ff ff       	call   c001347c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00142e4:	0f 20 d8             	mov    eax,cr3
c00142e7:	0f 22 d8             	mov    cr3,eax
c00142ea:	83 c4 20             	add    esp,0x20
c00142ed:	83 c4 0c             	add    esp,0xc
c00142f0:	5b                   	pop    ebx
c00142f1:	5e                   	pop    esi
c00142f2:	5f                   	pop    edi
c00142f3:	5d                   	pop    ebp
c00142f4:	c3                   	ret    
c00142f5:	83 ec 0c             	sub    esp,0xc
c00142f8:	68 f1 4e 02 c0       	push   0xc0024ef1
c00142fd:	e8 64 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014302:	83 c4 10             	add    esp,0x10
c0014305:	83 c4 0c             	add    esp,0xc
c0014308:	5b                   	pop    ebx
c0014309:	5e                   	pop    esi
c001430a:	5f                   	pop    edi
c001430b:	5d                   	pop    ebp
c001430c:	c3                   	ret    

c001430d <SysAlarm(regs*)>:
c001430d:	53                   	push   ebx
c001430e:	83 ec 10             	sub    esp,0x10
c0014311:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014315:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014318:	68 0a 4f 02 c0       	push   0xc0024f0a
c001431d:	e8 44 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014322:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014325:	83 c4 0c             	add    esp,0xc
c0014328:	31 d2                	xor    edx,edx
c001432a:	52                   	push   edx
c001432b:	50                   	push   eax
c001432c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014332:	e8 c5 09 00 00       	call   c0014cfc <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014337:	83 c4 18             	add    esp,0x18
c001433a:	5b                   	pop    ebx
c001433b:	c3                   	ret    

c001433c <SysEject(regs*)>:
c001433c:	83 ec 0c             	sub    esp,0xc
c001433f:	83 ca ff             	or     edx,0xffffffff
c0014342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014346:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014349:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001434e:	83 e9 41             	sub    ecx,0x41
c0014351:	83 f9 19             	cmp    ecx,0x19
c0014354:	77 18                	ja     c001436e <SysEject(regs*)+0x32>
c0014356:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c001435d:	85 c9                	test   ecx,ecx
c001435f:	74 0d                	je     c001436e <SysEject(regs*)+0x32>
c0014361:	83 ec 0c             	sub    esp,0xc
c0014364:	51                   	push   ecx
c0014365:	e8 42 66 ff ff       	call   c000a9ac <LogicalDisk::eject()>
c001436a:	83 c4 10             	add    esp,0x10
c001436d:	99                   	cdq    
c001436e:	83 c4 0c             	add    esp,0xc
c0014371:	c3                   	ret    

c0014372 <SysExit(regs*)>:
c0014372:	83 ec 18             	sub    esp,0x18
c0014375:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014379:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001437c:	e8 a7 2a 00 00       	call   c0016e28 <KeTerminateCurrentThread(int)>
c0014381:	83 c8 ff             	or     eax,0xffffffff
c0014384:	83 c4 1c             	add    esp,0x1c
c0014387:	89 c2                	mov    edx,eax
c0014389:	c3                   	ret    

c001438a <SysGetCwd(regs*)>:
c001438a:	83 ec 10             	sub    esp,0x10
c001438d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014391:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014394:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014397:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001439c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001439f:	e8 64 3a ff ff       	call   c0007e08 <Fs::getcwd(Process*, char*, int)>
c00143a4:	83 c4 1c             	add    esp,0x1c
c00143a7:	99                   	cdq    
c00143a8:	c3                   	ret    

c00143a9 <SysGetPID(regs*)>:
c00143a9:	83 ec 14             	sub    esp,0x14
c00143ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00143b4:	ff 30                	push   DWORD PTR [eax]
c00143b6:	68 1f 4f 02 c0       	push   0xc0024f1f
c00143bb:	e8 a6 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00143c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00143c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00143ca:	83 c4 1c             	add    esp,0x1c
c00143cd:	99                   	cdq    
c00143ce:	c3                   	ret    

c00143cf <SysGetRAMData(regs*)>:
c00143cf:	a1 88 d2 02 c0       	mov    eax,ds:0xc002d288
c00143d4:	03 05 78 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d178
c00143da:	8b 0d 7c d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d17c
c00143e0:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00143e6:	99                   	cdq    
c00143e7:	f7 f9                	idiv   ecx
c00143e9:	c1 e0 18             	shl    eax,0x18
c00143ec:	09 c8                	or     eax,ecx
c00143ee:	99                   	cdq    
c00143ef:	c3                   	ret    

c00143f0 <SysGetVGAPtr(regs*)>:
c00143f0:	55                   	push   ebp
c00143f1:	57                   	push   edi
c00143f2:	56                   	push   esi
c00143f3:	53                   	push   ebx
c00143f4:	83 ec 1c             	sub    esp,0x1c
c00143f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00143fb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00143fe:	83 f8 ff             	cmp    eax,0xffffffff
c0014401:	74 23                	je     c0014426 <SysGetVGAPtr(regs*)+0x36>
c0014403:	83 ec 0c             	sub    esp,0xc
c0014406:	50                   	push   eax
c0014407:	e8 d4 24 00 00       	call   c00168e0 <KeProcessFromPID(int)>
c001440c:	31 d2                	xor    edx,edx
c001440e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014412:	83 c4 10             	add    esp,0x10
c0014415:	b8 01 00 00 00       	mov    eax,0x1
c001441a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001441f:	75 11                	jne    c0014432 <SysGetVGAPtr(regs*)+0x42>
c0014421:	e9 80 00 00 00       	jmp    c00144a6 <SysGetVGAPtr(regs*)+0xb6>
c0014426:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001442b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001442e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014432:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014436:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001443a:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014440:	74 0c                	je     c001444e <SysGetVGAPtr(regs*)+0x5e>
c0014442:	83 ec 0c             	sub    esp,0xc
c0014445:	55                   	push   ebp
c0014446:	e8 70 dc ff ff       	call   c00120bb <setActiveTerminal(VgaText*)>
c001444b:	83 c4 10             	add    esp,0x10
c001444e:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014451:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014456:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014459:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001445b:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001445e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014461:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014467:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001446a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001446d:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014473:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014477:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001447a:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014481:	c1 e8 07             	shr    eax,0x7
c0014484:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c001448a:	50                   	push   eax
c001448b:	50                   	push   eax
c001448c:	68 2e 4f 02 c0       	push   0xc0024f2e
c0014491:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014494:	05 ac 0f 00 00       	add    eax,0xfac
c0014499:	50                   	push   eax
c001449a:	e8 b1 c1 fe ff       	call   c0000650 <strcpy>
c001449f:	83 c4 10             	add    esp,0x10
c00144a2:	31 c0                	xor    eax,eax
c00144a4:	31 d2                	xor    edx,edx
c00144a6:	83 c4 1c             	add    esp,0x1c
c00144a9:	5b                   	pop    ebx
c00144aa:	5e                   	pop    esi
c00144ab:	5f                   	pop    edi
c00144ac:	5d                   	pop    ebp
c00144ad:	c3                   	ret    
c00144ae:	66 90                	xchg   ax,ax

c00144b0 <SysKill(regs*)>:
c00144b0:	53                   	push   ebx
c00144b1:	83 ec 08             	sub    esp,0x8
c00144b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144b8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00144bc:	75 16                	jne    c00144d4 <SysKill(regs*)+0x24>
c00144be:	83 ec 0c             	sub    esp,0xc
c00144c1:	68 38 4f 02 c0       	push   0xc0024f38
c00144c6:	e8 f1 b5 ff ff       	call   c000fabc <KePanic(char const*)>
c00144cb:	83 c4 10             	add    esp,0x10
c00144ce:	e9 89 00 00 00       	jmp    c001455c <SysKill(regs*)+0xac>
c00144d3:	90                   	nop
c00144d4:	83 ec 0c             	sub    esp,0xc
c00144d7:	68 4c d3 02 c0       	push   0xc002d34c
c00144dc:	e8 07 dd 00 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00144e1:	8d 76 00             	lea    esi,[esi+0x0]
c00144e4:	83 c4 10             	add    esp,0x10
c00144e7:	85 c0                	test   eax,eax
c00144e9:	74 19                	je     c0014504 <SysKill(regs*)+0x54>
c00144eb:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00144ee:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00144f1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00144f3:	74 33                	je     c0014528 <SysKill(regs*)+0x78>
c00144f5:	52                   	push   edx
c00144f6:	52                   	push   edx
c00144f7:	50                   	push   eax
c00144f8:	68 4c d3 02 c0       	push   0xc002d34c
c00144fd:	e8 f2 e1 00 00       	call   c00226f4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014502:	eb e0                	jmp    c00144e4 <SysKill(regs*)+0x34>
c0014504:	83 ec 0c             	sub    esp,0xc
c0014507:	68 40 d3 02 c0       	push   0xc002d340
c001450c:	e8 d7 dc 00 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014511:	8d 76 00             	lea    esi,[esi+0x0]
c0014514:	83 c4 10             	add    esp,0x10
c0014517:	85 c0                	test   eax,eax
c0014519:	74 41                	je     c001455c <SysKill(regs*)+0xac>
c001451b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001451e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014521:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014523:	75 27                	jne    c001454c <SysKill(regs*)+0x9c>
c0014525:	8d 76 00             	lea    esi,[esi+0x0]
c0014528:	51                   	push   ecx
c0014529:	51                   	push   ecx
c001452a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001452d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014532:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014535:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001453b:	e8 8b c7 ff ff       	call   c0010ccb <KeRaiseSignal(SigHandlerBlock*, int)>
c0014540:	83 c4 10             	add    esp,0x10
c0014543:	31 c0                	xor    eax,eax
c0014545:	31 d2                	xor    edx,edx
c0014547:	eb 1b                	jmp    c0014564 <SysKill(regs*)+0xb4>
c0014549:	8d 76 00             	lea    esi,[esi+0x0]
c001454c:	52                   	push   edx
c001454d:	52                   	push   edx
c001454e:	50                   	push   eax
c001454f:	68 40 d3 02 c0       	push   0xc002d340
c0014554:	e8 9b e1 00 00       	call   c00226f4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014559:	eb b9                	jmp    c0014514 <SysKill(regs*)+0x64>
c001455b:	90                   	nop
c001455c:	83 c8 ff             	or     eax,0xffffffff
c001455f:	89 c2                	mov    edx,eax
c0014561:	8d 76 00             	lea    esi,[esi+0x0]
c0014564:	83 c4 08             	add    esp,0x8
c0014567:	5b                   	pop    ebx
c0014568:	c3                   	ret    

c0014569 <SysLoadDLL(regs*)>:
c0014569:	56                   	push   esi
c001456a:	31 d2                	xor    edx,edx
c001456c:	53                   	push   ebx
c001456d:	b8 01 00 00 00       	mov    eax,0x1
c0014572:	53                   	push   ebx
c0014573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014577:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001457b:	0f 84 82 00 00 00    	je     c0014603 <SysLoadDLL(regs*)+0x9a>
c0014581:	83 ec 0c             	sub    esp,0xc
c0014584:	68 14 01 00 00       	push   0x114
c0014589:	e8 da b0 ff ff       	call   c000f668 <malloc>
c001458e:	83 c4 0c             	add    esp,0xc
c0014591:	89 c3                	mov    ebx,eax
c0014593:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014598:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001459b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001459e:	53                   	push   ebx
c001459f:	e8 e4 3b ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00145a4:	83 c4 10             	add    esp,0x10
c00145a7:	31 d2                	xor    edx,edx
c00145a9:	85 db                	test   ebx,ebx
c00145ab:	b8 02 00 00 00       	mov    eax,0x2
c00145b0:	74 51                	je     c0014603 <SysLoadDLL(regs*)+0x9a>
c00145b2:	83 ec 0c             	sub    esp,0xc
c00145b5:	53                   	push   ebx
c00145b6:	e8 af 3e ff ff       	call   c000846a <File::exists()>
c00145bb:	83 c4 10             	add    esp,0x10
c00145be:	84 c0                	test   al,al
c00145c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145c2:	75 11                	jne    c00145d5 <SysLoadDLL(regs*)+0x6c>
c00145c4:	83 ec 0c             	sub    esp,0xc
c00145c7:	53                   	push   ebx
c00145c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145cb:	83 c4 10             	add    esp,0x10
c00145ce:	b8 03 00 00 00       	mov    eax,0x3
c00145d3:	eb 2c                	jmp    c0014601 <SysLoadDLL(regs*)+0x98>
c00145d5:	83 ec 0c             	sub    esp,0xc
c00145d8:	53                   	push   ebx
c00145d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145dc:	83 c4 0c             	add    esp,0xc
c00145df:	6a 00                	push   0x0
c00145e1:	ff 35 08 d1 02 c0    	push   DWORD PTR ds:0xc002d108
c00145e7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00145ea:	e8 c4 16 00 00       	call   c0015cb3 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c00145ef:	83 c4 10             	add    esp,0x10
c00145f2:	31 d2                	xor    edx,edx
c00145f4:	88 c1                	mov    cl,al
c00145f6:	31 c0                	xor    eax,eax
c00145f8:	84 c9                	test   cl,cl
c00145fa:	75 07                	jne    c0014603 <SysLoadDLL(regs*)+0x9a>
c00145fc:	b8 04 00 00 00       	mov    eax,0x4
c0014601:	31 d2                	xor    edx,edx
c0014603:	59                   	pop    ecx
c0014604:	5b                   	pop    ebx
c0014605:	5e                   	pop    esi
c0014606:	c3                   	ret    

c0014607 <SysPause(regs*)>:
c0014607:	83 ec 18             	sub    esp,0x18
c001460a:	6a 08                	push   0x8
c001460c:	e8 e3 20 00 00       	call   c00166f4 <blockTask(TaskState)>
c0014611:	31 c0                	xor    eax,eax
c0014613:	31 d2                	xor    edx,edx
c0014615:	83 c4 1c             	add    esp,0x1c
c0014618:	c3                   	ret    

c0014619 <SysPthreadCreate(regs*)>:
c0014619:	83 ec 18             	sub    esp,0x18
c001461c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014621:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014624:	e8 a3 1e 00 00       	call   c00164cc <Process::createUserThread()>
c0014629:	31 c0                	xor    eax,eax
c001462b:	31 d2                	xor    edx,edx
c001462d:	83 c4 1c             	add    esp,0x1c
c0014630:	c3                   	ret    

c0014631 <SysPthreadGetTID(regs*)>:
c0014631:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014636:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014639:	99                   	cdq    
c001463a:	c3                   	ret    

c001463b <SysInternalPthreadGetContext(regs*)>:
c001463b:	31 c0                	xor    eax,eax
c001463d:	31 d2                	xor    edx,edx
c001463f:	c3                   	ret    

c0014640 <SysInternalPthreadGetStartLocation(regs*)>:
c0014640:	31 c0                	xor    eax,eax
c0014642:	31 d2                	xor    edx,edx
c0014644:	c3                   	ret    

c0014645 <SysPthreadJoin(regs*)>:
c0014645:	31 c0                	xor    eax,eax
c0014647:	31 d2                	xor    edx,edx
c0014649:	c3                   	ret    

c001464a <SysPthreadExit(regs*)>:
c001464a:	83 ec 18             	sub    esp,0x18
c001464d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014651:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014654:	e8 cf 27 00 00       	call   c0016e28 <KeTerminateCurrentThread(int)>
c0014659:	83 c8 ff             	or     eax,0xffffffff
c001465c:	83 c4 1c             	add    esp,0x1c
c001465f:	89 c2                	mov    edx,eax
c0014661:	c3                   	ret    

c0014662 <SysRead(regs*)>:
c0014662:	57                   	push   edi
c0014663:	56                   	push   esi
c0014664:	53                   	push   ebx
c0014665:	83 ec 10             	sub    esp,0x10
c0014668:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001466c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001466f:	83 f8 02             	cmp    eax,0x2
c0014672:	77 10                	ja     c0014684 <SysRead(regs*)+0x22>
c0014674:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014679:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001467c:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014682:	eb 0e                	jmp    c0014692 <SysRead(regs*)+0x30>
c0014684:	83 ec 0c             	sub    esp,0xc
c0014687:	50                   	push   eax
c0014688:	e8 18 e8 ff ff       	call   c0012ea5 <KeGetFileFromDescriptor(int)>
c001468d:	83 c4 10             	add    esp,0x10
c0014690:	89 c1                	mov    ecx,eax
c0014692:	83 c8 ff             	or     eax,0xffffffff
c0014695:	85 c9                	test   ecx,ecx
c0014697:	89 c2                	mov    edx,eax
c0014699:	74 28                	je     c00146c3 <SysRead(regs*)+0x61>
c001469b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146a3:	83 ec 0c             	sub    esp,0xc
c00146a6:	31 ff                	xor    edi,edi
c00146a8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00146ac:	8b 01                	mov    eax,DWORD PTR [ecx]
c00146ae:	52                   	push   edx
c00146af:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00146b2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00146b5:	57                   	push   edi
c00146b6:	56                   	push   esi
c00146b7:	51                   	push   ecx
c00146b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00146bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00146bf:	83 c4 20             	add    esp,0x20
c00146c2:	99                   	cdq    
c00146c3:	83 c4 10             	add    esp,0x10
c00146c6:	5b                   	pop    ebx
c00146c7:	5e                   	pop    esi
c00146c8:	5f                   	pop    edi
c00146c9:	c3                   	ret    

c00146ca <SysRegisterSignal(regs*)>:
c00146ca:	83 ec 18             	sub    esp,0x18
c00146cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146d1:	6a 00                	push   0x0
c00146d3:	6a 00                	push   0x0
c00146d5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00146d8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00146db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146e3:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00146e9:	e8 a7 c5 ff ff       	call   c0010c95 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00146ee:	83 c4 2c             	add    esp,0x2c
c00146f1:	99                   	cdq    
c00146f2:	c3                   	ret    

c00146f3 <SysRegistryGetTypeFromPath(regs*)>:
c00146f3:	53                   	push   ebx
c00146f4:	81 ec 40 01 00 00    	sub    esp,0x140
c00146fa:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014701:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014704:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014707:	e8 b3 97 ff ff       	call   c000debf <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001470c:	83 c4 10             	add    esp,0x10
c001470f:	85 c0                	test   eax,eax
c0014711:	89 c1                	mov    ecx,eax
c0014713:	74 15                	je     c001472a <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014715:	50                   	push   eax
c0014716:	8d 44 24 08          	lea    eax,[esp+0x8]
c001471a:	50                   	push   eax
c001471b:	51                   	push   ecx
c001471c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001471f:	e8 80 93 ff ff       	call   c000daa4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014724:	83 c4 10             	add    esp,0x10
c0014727:	99                   	cdq    
c0014728:	eb 05                	jmp    c001472f <SysRegistryGetTypeFromPath(regs*)+0x3c>
c001472a:	83 c8 ff             	or     eax,0xffffffff
c001472d:	89 c2                	mov    edx,eax
c001472f:	81 c4 38 01 00 00    	add    esp,0x138
c0014735:	5b                   	pop    ebx
c0014736:	c3                   	ret    

c0014737 <SysRegistryReadExtent(regs*)>:
c0014737:	83 ec 1c             	sub    esp,0x1c
c001473a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001473e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014741:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014744:	85 c0                	test   eax,eax
c0014746:	79 1f                	jns    c0014767 <SysRegistryReadExtent(regs*)+0x30>
c0014748:	52                   	push   edx
c0014749:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001474e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014752:	52                   	push   edx
c0014753:	50                   	push   eax
c0014754:	51                   	push   ecx
c0014755:	e8 3c 92 ff ff       	call   c000d996 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001475a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014762:	83 c4 10             	add    esp,0x10
c0014765:	eb 14                	jmp    c001477b <SysRegistryReadExtent(regs*)+0x44>
c0014767:	83 ec 04             	sub    esp,0x4
c001476a:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001476d:	50                   	push   eax
c001476e:	51                   	push   ecx
c001476f:	e8 c0 8c ff ff       	call   c000d434 <CmGetString(Reghive_Tag*, int, char*)>
c0014774:	83 c4 10             	add    esp,0x10
c0014777:	31 c0                	xor    eax,eax
c0014779:	31 d2                	xor    edx,edx
c001477b:	83 c4 1c             	add    esp,0x1c
c001477e:	c3                   	ret    

c001477f <SysRegistryPathToExtentLookup(regs*)>:
c001477f:	83 ec 14             	sub    esp,0x14
c0014782:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014786:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014789:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001478c:	e8 2e 97 ff ff       	call   c000debf <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014791:	83 c4 1c             	add    esp,0x1c
c0014794:	99                   	cdq    
c0014795:	c3                   	ret    

c0014796 <SysRegistryEnterDirectory(regs*)>:
c0014796:	83 ec 14             	sub    esp,0x14
c0014799:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001479d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00147a0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00147a3:	e8 03 8d ff ff       	call   c000d4ab <CmEnterDirectory(Reghive_Tag*, int)>
c00147a8:	83 c4 1c             	add    esp,0x1c
c00147ab:	99                   	cdq    
c00147ac:	c3                   	ret    

c00147ad <SysRegistryGetNext(regs*)>:
c00147ad:	83 ec 14             	sub    esp,0x14
c00147b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147b4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00147b7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00147ba:	e8 2b 8d ff ff       	call   c000d4ea <CmGetNext(Reghive_Tag*, int)>
c00147bf:	83 c4 1c             	add    esp,0x1c
c00147c2:	99                   	cdq    
c00147c3:	c3                   	ret    

c00147c4 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00147c4:	57                   	push   edi
c00147c5:	56                   	push   esi
c00147c6:	53                   	push   ebx
c00147c7:	81 ec 34 01 00 00    	sub    esp,0x134
c00147cd:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00147d4:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00147d8:	57                   	push   edi
c00147d9:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00147dc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00147df:	e8 c0 92 ff ff       	call   c000daa4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00147e4:	89 c3                	mov    ebx,eax
c00147e6:	58                   	pop    eax
c00147e7:	5a                   	pop    edx
c00147e8:	57                   	push   edi
c00147e9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00147ec:	e8 5f be fe ff       	call   c0000650 <strcpy>
c00147f1:	81 c4 40 01 00 00    	add    esp,0x140
c00147f7:	89 d8                	mov    eax,ebx
c00147f9:	5b                   	pop    ebx
c00147fa:	99                   	cdq    
c00147fb:	5e                   	pop    esi
c00147fc:	5f                   	pop    edi
c00147fd:	c3                   	ret    

c00147fe <SysRegistryOpen(regs*)>:
c00147fe:	83 ec 18             	sub    esp,0x18
c0014801:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014805:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014808:	e8 b7 8a ff ff       	call   c000d2c4 <CmOpen(char const*)>
c001480d:	83 c4 1c             	add    esp,0x1c
c0014810:	99                   	cdq    
c0014811:	c3                   	ret    

c0014812 <SysRegistryClose(regs*)>:
c0014812:	83 ec 18             	sub    esp,0x18
c0014815:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014819:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001481c:	e8 c1 8b ff ff       	call   c000d3e2 <CmClose(Reghive_Tag*)>
c0014821:	31 c0                	xor    eax,eax
c0014823:	31 d2                	xor    edx,edx
c0014825:	83 c4 1c             	add    esp,0x1c
c0014828:	c3                   	ret    

c0014829 <SysRegistryEasyReadString(regs*)>:
c0014829:	57                   	push   edi
c001482a:	56                   	push   esi
c001482b:	53                   	push   ebx
c001482c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014830:	83 ec 0c             	sub    esp,0xc
c0014833:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014836:	e8 89 8a ff ff       	call   c000d2c4 <CmOpen(char const*)>
c001483b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001483e:	5a                   	pop    edx
c001483f:	59                   	pop    ecx
c0014840:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014843:	89 c3                	mov    ebx,eax
c0014845:	50                   	push   eax
c0014846:	e8 74 96 ff ff       	call   c000debf <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001484b:	83 c4 10             	add    esp,0x10
c001484e:	89 c1                	mov    ecx,eax
c0014850:	b8 01 00 00 00       	mov    eax,0x1
c0014855:	85 c9                	test   ecx,ecx
c0014857:	7e 16                	jle    c001486f <SysRegistryEasyReadString(regs*)+0x46>
c0014859:	50                   	push   eax
c001485a:	57                   	push   edi
c001485b:	51                   	push   ecx
c001485c:	53                   	push   ebx
c001485d:	e8 d2 8b ff ff       	call   c000d434 <CmGetString(Reghive_Tag*, int, char*)>
c0014862:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014865:	e8 78 8b ff ff       	call   c000d3e2 <CmClose(Reghive_Tag*)>
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	31 c0                	xor    eax,eax
c001486f:	5b                   	pop    ebx
c0014870:	31 d2                	xor    edx,edx
c0014872:	5e                   	pop    esi
c0014873:	5f                   	pop    edi
c0014874:	c3                   	ret    

c0014875 <SysRegistryEasyReadInteger(regs*)>:
c0014875:	56                   	push   esi
c0014876:	53                   	push   ebx
c0014877:	83 ec 10             	sub    esp,0x10
c001487a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001487e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014881:	e8 3e 8a ff ff       	call   c000d2c4 <CmOpen(char const*)>
c0014886:	5a                   	pop    edx
c0014887:	59                   	pop    ecx
c0014888:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001488b:	89 c3                	mov    ebx,eax
c001488d:	50                   	push   eax
c001488e:	e8 2c 96 ff ff       	call   c000debf <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014893:	83 c4 10             	add    esp,0x10
c0014896:	89 c1                	mov    ecx,eax
c0014898:	b8 01 00 00 00       	mov    eax,0x1
c001489d:	85 c9                	test   ecx,ecx
c001489f:	7e 18                	jle    c00148b9 <SysRegistryEasyReadInteger(regs*)+0x44>
c00148a1:	50                   	push   eax
c00148a2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00148a5:	51                   	push   ecx
c00148a6:	53                   	push   ebx
c00148a7:	e8 ea 90 ff ff       	call   c000d996 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00148ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148af:	e8 2e 8b ff ff       	call   c000d3e2 <CmClose(Reghive_Tag*)>
c00148b4:	83 c4 10             	add    esp,0x10
c00148b7:	31 c0                	xor    eax,eax
c00148b9:	59                   	pop    ecx
c00148ba:	31 d2                	xor    edx,edx
c00148bc:	5b                   	pop    ebx
c00148bd:	5e                   	pop    esi
c00148be:	c3                   	ret    

c00148bf <SysSbrk(regs*)>:
c00148bf:	56                   	push   esi
c00148c0:	53                   	push   ebx
c00148c1:	50                   	push   eax
c00148c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00148cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148ce:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00148d1:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c00148d7:	85 db                	test   ebx,ebx
c00148d9:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00148dc:	74 02                	je     c00148e0 <SysSbrk(regs*)+0x21>
c00148de:	79 06                	jns    c00148e6 <SysSbrk(regs*)+0x27>
c00148e0:	89 f0                	mov    eax,esi
c00148e2:	31 d2                	xor    edx,edx
c00148e4:	eb 2a                	jmp    c0014910 <SysSbrk(regs*)+0x51>
c00148e6:	83 c8 ff             	or     eax,0xffffffff
c00148e9:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00148ef:	89 c2                	mov    edx,eax
c00148f1:	77 1d                	ja     c0014910 <SysSbrk(regs*)+0x51>
c00148f3:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00148f9:	50                   	push   eax
c00148fa:	68 07 0c 00 00       	push   0xc07
c00148ff:	c1 ea 0c             	shr    edx,0xc
c0014902:	52                   	push   edx
c0014903:	51                   	push   ecx
c0014904:	e8 db ee ff ff       	call   c00137e4 <VAS::allocatePages(int, int)>
c0014909:	89 f0                	mov    eax,esi
c001490b:	31 d2                	xor    edx,edx
c001490d:	83 c4 10             	add    esp,0x10
c0014910:	59                   	pop    ecx
c0014911:	5b                   	pop    ebx
c0014912:	5e                   	pop    esi
c0014913:	c3                   	ret    

c0014914 <SysSetCwd(regs*)>:
c0014914:	83 ec 14             	sub    esp,0x14
c0014917:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001491b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001491e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014923:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014926:	e8 de 3b ff ff       	call   c0008509 <Fs::setcwd(Process*, char*)>
c001492b:	83 c4 1c             	add    esp,0x1c
c001492e:	99                   	cdq    
c001492f:	c3                   	ret    

c0014930 <SysSetTime(regs*)>:
c0014930:	55                   	push   ebp
c0014931:	31 d2                	xor    edx,edx
c0014933:	57                   	push   edi
c0014934:	56                   	push   esi
c0014935:	53                   	push   ebx
c0014936:	bb 3c 00 00 00       	mov    ebx,0x3c
c001493b:	83 ec 30             	sub    esp,0x30
c001493e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0014942:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0014945:	89 f0                	mov    eax,esi
c0014947:	f7 f3                	div    ebx
c0014949:	89 d7                	mov    edi,edx
c001494b:	31 d2                	xor    edx,edx
c001494d:	f7 f3                	div    ebx
c001494f:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014954:	89 f0                	mov    eax,esi
c0014956:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001495a:	31 d2                	xor    edx,edx
c001495c:	f7 f3                	div    ebx
c001495e:	bb 18 00 00 00       	mov    ebx,0x18
c0014963:	31 d2                	xor    edx,edx
c0014965:	f7 f3                	div    ebx
c0014967:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001496a:	bb 0c 00 00 00       	mov    ebx,0xc
c001496f:	89 c6                	mov    esi,eax
c0014971:	c1 e8 05             	shr    eax,0x5
c0014974:	83 e6 1f             	and    esi,0x1f
c0014977:	46                   	inc    esi
c0014978:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001497c:	31 d2                	xor    edx,edx
c001497e:	f7 f3                	div    ebx
c0014980:	31 db                	xor    ebx,ebx
c0014982:	57                   	push   edi
c0014983:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014987:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001498b:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c001498f:	55                   	push   ebp
c0014990:	52                   	push   edx
c0014991:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0014995:	56                   	push   esi
c0014996:	68 59 4f 02 c0       	push   0xc0024f59
c001499b:	e8 c6 25 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00149a0:	83 c4 1c             	add    esp,0x1c
c00149a3:	57                   	push   edi
c00149a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00149a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149ac:	55                   	push   ebp
c00149ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00149b1:	52                   	push   edx
c00149b2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00149b6:	56                   	push   esi
c00149b7:	68 7b 4f 02 c0       	push   0xc0024f7b
c00149bc:	e8 a5 25 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00149c1:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c00149c6:	31 c9                	xor    ecx,ecx
c00149c8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00149cc:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c00149d0:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c00149d4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00149da:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00149de:	89 f0                	mov    eax,esi
c00149e0:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00149e4:	88 c1                	mov    cl,al
c00149e6:	89 e8                	mov    eax,ebp
c00149e8:	88 d5                	mov    ch,dl
c00149ea:	83 c4 1c             	add    esp,0x1c
c00149ed:	c1 e0 10             	shl    eax,0x10
c00149f0:	0f b7 d1             	movzx  edx,cx
c00149f3:	09 c2                	or     edx,eax
c00149f5:	89 f8                	mov    eax,edi
c00149f7:	c1 e0 10             	shl    eax,0x10
c00149fa:	89 d1                	mov    ecx,edx
c00149fc:	89 da                	mov    edx,ebx
c00149fe:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c0014a04:	09 c2                	or     edx,eax
c0014a06:	52                   	push   edx
c0014a07:	51                   	push   ecx
c0014a08:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a0c:	e8 41 4b ff ff       	call   c0009552 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014a11:	83 c4 3c             	add    esp,0x3c
c0014a14:	31 d2                	xor    edx,edx
c0014a16:	5b                   	pop    ebx
c0014a17:	5e                   	pop    esi
c0014a18:	83 f0 01             	xor    eax,0x1
c0014a1b:	5f                   	pop    edi
c0014a1c:	0f b6 c0             	movzx  eax,al
c0014a1f:	5d                   	pop    ebp
c0014a20:	c3                   	ret    

c0014a21 <SysSymlink(regs*)>:
c0014a21:	56                   	push   esi
c0014a22:	83 c8 ff             	or     eax,0xffffffff
c0014a25:	53                   	push   ebx
c0014a26:	89 c2                	mov    edx,eax
c0014a28:	81 ec 34 02 00 00    	sub    esp,0x234
c0014a2e:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014a35:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014a39:	74 50                	je     c0014a8b <SysSymlink(regs*)+0x6a>
c0014a3b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014a3e:	85 c9                	test   ecx,ecx
c0014a40:	74 49                	je     c0014a8b <SysSymlink(regs*)+0x6a>
c0014a42:	6a 01                	push   0x1
c0014a44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a49:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a4c:	05 0c 01 00 00       	add    eax,0x10c
c0014a51:	50                   	push   eax
c0014a52:	51                   	push   ecx
c0014a53:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014a57:	56                   	push   esi
c0014a58:	e8 ff 33 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014a5d:	6a 01                	push   0x1
c0014a5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a64:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a67:	05 0c 01 00 00       	add    eax,0x10c
c0014a6c:	50                   	push   eax
c0014a6d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014a70:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014a77:	53                   	push   ebx
c0014a78:	e8 df 33 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014a7d:	83 c4 18             	add    esp,0x18
c0014a80:	56                   	push   esi
c0014a81:	53                   	push   ebx
c0014a82:	e8 03 30 ff ff       	call   c0007a8a <KeCreateSymlink(char const*, char const*)>
c0014a87:	83 c4 10             	add    esp,0x10
c0014a8a:	99                   	cdq    
c0014a8b:	81 c4 34 02 00 00    	add    esp,0x234
c0014a91:	5b                   	pop    ebx
c0014a92:	5e                   	pop    esi
c0014a93:	c3                   	ret    

c0014a94 <SysTimezone(regs*)>:
c0014a94:	83 ec 0c             	sub    esp,0xc
c0014a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a9b:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014a9f:	75 17                	jne    c0014ab8 <SysTimezone(regs*)+0x24>
c0014aa1:	83 ec 0c             	sub    esp,0xc
c0014aa4:	68 9d 4f 02 c0       	push   0xc0024f9d
c0014aa9:	e8 b8 24 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014aae:	83 c8 ff             	or     eax,0xffffffff
c0014ab1:	83 c4 10             	add    esp,0x10
c0014ab4:	89 c2                	mov    edx,eax
c0014ab6:	eb 16                	jmp    c0014ace <SysTimezone(regs*)+0x3a>
c0014ab8:	83 ec 0c             	sub    esp,0xc
c0014abb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014abe:	e8 46 45 ff ff       	call   c0009009 <KeSetTimezone(int)>
c0014ac3:	31 d2                	xor    edx,edx
c0014ac5:	83 c4 10             	add    esp,0x10
c0014ac8:	83 f0 01             	xor    eax,0x1
c0014acb:	0f b6 c0             	movzx  eax,al
c0014ace:	83 c4 0c             	add    esp,0xc
c0014ad1:	c3                   	ret    

c0014ad2 <SysTruncate(regs*)>:
c0014ad2:	55                   	push   ebp
c0014ad3:	57                   	push   edi
c0014ad4:	31 ff                	xor    edi,edi
c0014ad6:	56                   	push   esi
c0014ad7:	53                   	push   ebx
c0014ad8:	83 ec 0c             	sub    esp,0xc
c0014adb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014adf:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014ae2:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014ae6:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014ae9:	89 ce                	mov    esi,ecx
c0014aeb:	0f 84 9a 00 00 00    	je     c0014b8b <SysTruncate(regs*)+0xb9>
c0014af1:	83 ec 0c             	sub    esp,0xc
c0014af4:	68 14 01 00 00       	push   0x114
c0014af9:	e8 6a ab ff ff       	call   c000f668 <malloc>
c0014afe:	83 c4 0c             	add    esp,0xc
c0014b01:	89 c3                	mov    ebx,eax
c0014b03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b08:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014b0b:	55                   	push   ebp
c0014b0c:	53                   	push   ebx
c0014b0d:	e8 76 36 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0014b12:	83 c4 10             	add    esp,0x10
c0014b15:	31 d2                	xor    edx,edx
c0014b17:	85 db                	test   ebx,ebx
c0014b19:	b8 03 00 00 00       	mov    eax,0x3
c0014b1e:	0f 84 a2 00 00 00    	je     c0014bc6 <SysTruncate(regs*)+0xf4>
c0014b24:	51                   	push   ecx
c0014b25:	51                   	push   ecx
c0014b26:	6a 02                	push   0x2
c0014b28:	53                   	push   ebx
c0014b29:	e8 78 36 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	85 c0                	test   eax,eax
c0014b33:	74 13                	je     c0014b48 <SysTruncate(regs*)+0x76>
c0014b35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b37:	83 ec 0c             	sub    esp,0xc
c0014b3a:	53                   	push   ebx
c0014b3b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b3e:	83 c4 10             	add    esp,0x10
c0014b41:	b8 04 00 00 00       	mov    eax,0x4
c0014b46:	eb 7c                	jmp    c0014bc4 <SysTruncate(regs*)+0xf2>
c0014b48:	52                   	push   edx
c0014b49:	57                   	push   edi
c0014b4a:	56                   	push   esi
c0014b4b:	53                   	push   ebx
c0014b4c:	e8 69 37 ff ff       	call   c00082ba <File::truncate(unsigned long long)>
c0014b51:	83 c4 10             	add    esp,0x10
c0014b54:	85 c0                	test   eax,eax
c0014b56:	74 1b                	je     c0014b73 <SysTruncate(regs*)+0xa1>
c0014b58:	83 ec 0c             	sub    esp,0xc
c0014b5b:	53                   	push   ebx
c0014b5c:	e8 a3 36 ff ff       	call   c0008204 <File::close()>
c0014b61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b66:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b69:	83 c4 10             	add    esp,0x10
c0014b6c:	b8 05 00 00 00       	mov    eax,0x5
c0014b71:	eb 51                	jmp    c0014bc4 <SysTruncate(regs*)+0xf2>
c0014b73:	83 ec 0c             	sub    esp,0xc
c0014b76:	53                   	push   ebx
c0014b77:	e8 88 36 ff ff       	call   c0008204 <File::close()>
c0014b7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	31 c0                	xor    eax,eax
c0014b89:	eb 39                	jmp    c0014bc4 <SysTruncate(regs*)+0xf2>
c0014b8b:	31 d2                	xor    edx,edx
c0014b8d:	83 fd 02             	cmp    ebp,0x2
c0014b90:	b8 01 00 00 00       	mov    eax,0x1
c0014b95:	7e 2f                	jle    c0014bc6 <SysTruncate(regs*)+0xf4>
c0014b97:	83 ec 0c             	sub    esp,0xc
c0014b9a:	51                   	push   ecx
c0014b9b:	e8 05 e3 ff ff       	call   c0012ea5 <KeGetFileFromDescriptor(int)>
c0014ba0:	83 c4 10             	add    esp,0x10
c0014ba3:	31 d2                	xor    edx,edx
c0014ba5:	89 c1                	mov    ecx,eax
c0014ba7:	b8 02 00 00 00       	mov    eax,0x2
c0014bac:	85 c9                	test   ecx,ecx
c0014bae:	74 16                	je     c0014bc6 <SysTruncate(regs*)+0xf4>
c0014bb0:	50                   	push   eax
c0014bb1:	57                   	push   edi
c0014bb2:	56                   	push   esi
c0014bb3:	51                   	push   ecx
c0014bb4:	e8 01 37 ff ff       	call   c00082ba <File::truncate(unsigned long long)>
c0014bb9:	83 c4 10             	add    esp,0x10
c0014bbc:	85 c0                	test   eax,eax
c0014bbe:	0f 95 c0             	setne  al
c0014bc1:	0f b6 c0             	movzx  eax,al
c0014bc4:	31 d2                	xor    edx,edx
c0014bc6:	83 c4 0c             	add    esp,0xc
c0014bc9:	5b                   	pop    ebx
c0014bca:	5e                   	pop    esi
c0014bcb:	5f                   	pop    edi
c0014bcc:	5d                   	pop    ebp
c0014bcd:	c3                   	ret    

c0014bce <SysWrite(regs*)>:
c0014bce:	57                   	push   edi
c0014bcf:	56                   	push   esi
c0014bd0:	53                   	push   ebx
c0014bd1:	83 ec 10             	sub    esp,0x10
c0014bd4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014bd8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014bdb:	83 f8 02             	cmp    eax,0x2
c0014bde:	77 10                	ja     c0014bf0 <SysWrite(regs*)+0x22>
c0014be0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014be5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014be8:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014bee:	eb 0e                	jmp    c0014bfe <SysWrite(regs*)+0x30>
c0014bf0:	83 ec 0c             	sub    esp,0xc
c0014bf3:	50                   	push   eax
c0014bf4:	e8 ac e2 ff ff       	call   c0012ea5 <KeGetFileFromDescriptor(int)>
c0014bf9:	83 c4 10             	add    esp,0x10
c0014bfc:	89 c1                	mov    ecx,eax
c0014bfe:	83 c8 ff             	or     eax,0xffffffff
c0014c01:	85 c9                	test   ecx,ecx
c0014c03:	89 c2                	mov    edx,eax
c0014c05:	74 28                	je     c0014c2f <SysWrite(regs*)+0x61>
c0014c07:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c0f:	83 ec 0c             	sub    esp,0xc
c0014c12:	31 ff                	xor    edi,edi
c0014c14:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014c18:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014c1a:	52                   	push   edx
c0014c1b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c1e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014c21:	57                   	push   edi
c0014c22:	56                   	push   esi
c0014c23:	51                   	push   ecx
c0014c24:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014c27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014c2b:	83 c4 20             	add    esp,0x20
c0014c2e:	99                   	cdq    
c0014c2f:	83 c4 10             	add    esp,0x10
c0014c32:	5b                   	pop    ebx
c0014c33:	5e                   	pop    esi
c0014c34:	5f                   	pop    edi
c0014c35:	c3                   	ret    

c0014c36 <SysWsbe(regs*)>:
c0014c36:	55                   	push   ebp
c0014c37:	57                   	push   edi
c0014c38:	56                   	push   esi
c0014c39:	53                   	push   ebx
c0014c3a:	83 ec 3c             	sub    esp,0x3c
c0014c3d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014c41:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014c48:	75 2d                	jne    c0014c77 <SysWsbe(regs*)+0x41>
c0014c4a:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0014c51:	75 24                	jne    c0014c77 <SysWsbe(regs*)+0x41>
c0014c53:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0014c5a:	75 1b                	jne    c0014c77 <SysWsbe(regs*)+0x41>
c0014c5c:	6a 01                	push   0x1
c0014c5e:	6a 00                	push   0x0
c0014c60:	68 02 9f 00 c0       	push   0xc0009f02
c0014c65:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0014c6b:	e8 10 17 00 00       	call   c0016380 <Process::createThread(void (*)(void*), void*, int)>
c0014c70:	83 c4 10             	add    esp,0x10
c0014c73:	31 c0                	xor    eax,eax
c0014c75:	eb 52                	jmp    c0014cc9 <SysWsbe(regs*)+0x93>
c0014c77:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014c7b:	be b2 4f 02 c0       	mov    esi,0xc0024fb2
c0014c80:	b9 0b 00 00 00       	mov    ecx,0xb
c0014c85:	fc                   	cld    
c0014c86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014c88:	83 ec 0c             	sub    esp,0xc
c0014c8b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014c8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c94:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c97:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0014c9d:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c9f:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0014ca2:	57                   	push   edi
c0014ca3:	e8 d8 b8 fe ff       	call   c0000580 <strlen>
c0014ca8:	5a                   	pop    edx
c0014ca9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014cad:	52                   	push   edx
c0014cae:	31 d2                	xor    edx,edx
c0014cb0:	57                   	push   edi
c0014cb1:	52                   	push   edx
c0014cb2:	50                   	push   eax
c0014cb3:	56                   	push   esi
c0014cb4:	ff d5                	call   ebp
c0014cb6:	83 c4 14             	add    esp,0x14
c0014cb9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014cbc:	e8 67 21 00 00       	call   c0016e28 <KeTerminateCurrentThread(int)>
c0014cc1:	83 c4 10             	add    esp,0x10
c0014cc4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014cc9:	83 c4 3c             	add    esp,0x3c
c0014ccc:	31 d2                	xor    edx,edx
c0014cce:	5b                   	pop    ebx
c0014ccf:	5e                   	pop    esi
c0014cd0:	5f                   	pop    edi
c0014cd1:	5d                   	pop    ebp
c0014cd2:	c3                   	ret    

c0014cd3 <SysYield(regs*)>:
c0014cd3:	83 ec 0c             	sub    esp,0xc
c0014cd6:	fa                   	cli    
c0014cd7:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c0014cdd:	e8 52 19 00 00       	call   c0016634 <schedule()>
c0014ce2:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c0014ce9:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c0014cf0:	75 01                	jne    c0014cf3 <SysYield(regs*)+0x20>
c0014cf2:	fb                   	sti    
c0014cf3:	31 c0                	xor    eax,eax
c0014cf5:	31 d2                	xor    edx,edx
c0014cf7:	83 c4 0c             	add    esp,0xc
c0014cfa:	c3                   	ret    
c0014cfb:	90                   	nop

c0014cfc <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0014cfc:	55                   	push   ebp
c0014cfd:	57                   	push   edi
c0014cfe:	56                   	push   esi
c0014cff:	53                   	push   ebx
c0014d00:	83 ec 2c             	sub    esp,0x2c
c0014d03:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014d07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d0b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014d0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d13:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014d17:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c0014d1a:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0014d1e:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0014d22:	c1 e0 08             	shl    eax,0x8
c0014d25:	09 c6                	or     esi,eax
c0014d27:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0014d2b:	c1 e0 10             	shl    eax,0x10
c0014d2e:	09 c6                	or     esi,eax
c0014d30:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0014d34:	83 e0 7f             	and    eax,0x7f
c0014d37:	c1 e0 18             	shl    eax,0x18
c0014d3a:	09 f0                	or     eax,esi
c0014d3c:	89 c5                	mov    ebp,eax
c0014d3e:	89 f8                	mov    eax,edi
c0014d40:	80 f4 00             	xor    ah,0x0
c0014d43:	89 c1                	mov    ecx,eax
c0014d45:	89 e8                	mov    eax,ebp
c0014d47:	80 f4 00             	xor    ah,0x0
c0014d4a:	89 c3                	mov    ebx,eax
c0014d4c:	89 d8                	mov    eax,ebx
c0014d4e:	09 c8                	or     eax,ecx
c0014d50:	74 42                	je     c0014d94 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0014d52:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014d56:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0014d59:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0014d5d:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0014d61:	c1 e0 08             	shl    eax,0x8
c0014d64:	09 c6                	or     esi,eax
c0014d66:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0014d6a:	c1 e0 10             	shl    eax,0x10
c0014d6d:	09 c6                	or     esi,eax
c0014d6f:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0014d73:	83 e0 7f             	and    eax,0x7f
c0014d76:	c1 e0 18             	shl    eax,0x18
c0014d79:	09 f0                	or     eax,esi
c0014d7b:	89 c3                	mov    ebx,eax
c0014d7d:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c0014d82:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0014d88:	29 c1                	sub    ecx,eax
c0014d8a:	19 d3                	sbb    ebx,edx
c0014d8c:	89 c8                	mov    eax,ecx
c0014d8e:	89 da                	mov    edx,ebx
c0014d90:	eb 0e                	jmp    c0014da0 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0014d92:	66 90                	xchg   ax,ax
c0014d94:	b8 00 00 00 00       	mov    eax,0x0
c0014d99:	ba 00 00 00 00       	mov    edx,0x0
c0014d9e:	66 90                	xchg   ax,ax
c0014da0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014da4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dac:	80 f4 00             	xor    ah,0x0
c0014daf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014db3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014db7:	80 f4 00             	xor    ah,0x0
c0014dba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014dbe:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014dc2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0014dc6:	89 e8                	mov    eax,ebp
c0014dc8:	09 f8                	or     eax,edi
c0014dca:	74 30                	je     c0014dfc <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c0014dcc:	8b 0d 50 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb50
c0014dd2:	8b 1d 54 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb54
c0014dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ddc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014de0:	01 c8                	add    eax,ecx
c0014de2:	11 da                	adc    edx,ebx
c0014de4:	89 c7                	mov    edi,eax
c0014de6:	83 e7 ff             	and    edi,0xffffffff
c0014de9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014dec:	89 d0                	mov    eax,edx
c0014dee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014df3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014df7:	eb 13                	jmp    c0014e0c <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c0014df9:	8d 76 00             	lea    esi,[esi+0x0]
c0014dfc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014e03:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014e0b:	90                   	nop
c0014e0c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e10:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014e13:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0014e17:	89 cf                	mov    edi,ecx
c0014e19:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0014e1c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0014e1f:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0014e23:	0f b6 5c 24 04       	movzx  ebx,BYTE PTR [esp+0x4]
c0014e28:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0014e2b:	83 e2 00             	and    edx,0x0
c0014e2e:	88 d1                	mov    cl,dl
c0014e30:	88 da                	mov    dl,bl
c0014e32:	09 ca                	or     edx,ecx
c0014e34:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0014e37:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014e3b:	c1 ea 08             	shr    edx,0x8
c0014e3e:	0f b6 da             	movzx  ebx,dl
c0014e41:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0014e44:	83 e2 00             	and    edx,0x0
c0014e47:	88 d1                	mov    cl,dl
c0014e49:	88 da                	mov    dl,bl
c0014e4b:	09 ca                	or     edx,ecx
c0014e4d:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0014e50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014e54:	c1 ea 10             	shr    edx,0x10
c0014e57:	0f b6 da             	movzx  ebx,dl
c0014e5a:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0014e5d:	83 e2 00             	and    edx,0x0
c0014e60:	88 d1                	mov    cl,dl
c0014e62:	88 da                	mov    dl,bl
c0014e64:	09 ca                	or     edx,ecx
c0014e66:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0014e69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014e6d:	c1 ea 18             	shr    edx,0x18
c0014e70:	83 e2 7f             	and    edx,0x7f
c0014e73:	89 d3                	mov    ebx,edx
c0014e75:	83 e3 7f             	and    ebx,0x7f
c0014e78:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0014e7b:	83 e2 80             	and    edx,0xffffff80
c0014e7e:	88 d1                	mov    cl,dl
c0014e80:	88 da                	mov    dl,bl
c0014e82:	09 ca                	or     edx,ecx
c0014e84:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0014e87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e8b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e8f:	83 c4 2c             	add    esp,0x2c
c0014e92:	5b                   	pop    ebx
c0014e93:	5e                   	pop    esi
c0014e94:	5f                   	pop    edi
c0014e95:	5d                   	pop    ebp
c0014e96:	c3                   	ret    
c0014e97:	90                   	nop

c0014e98 <KeCheckAlarm(ThreadControlBlock*)>:
c0014e98:	55                   	push   ebp
c0014e99:	57                   	push   edi
c0014e9a:	56                   	push   esi
c0014e9b:	53                   	push   ebx
c0014e9c:	83 ec 0c             	sub    esp,0xc
c0014e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ea3:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0014ea6:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0014eaa:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c0014eae:	c1 e5 08             	shl    ebp,0x8
c0014eb1:	09 fd                	or     ebp,edi
c0014eb3:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c0014eb7:	c1 e7 10             	shl    edi,0x10
c0014eba:	09 ef                	or     edi,ebp
c0014ebc:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0014ec0:	83 e0 7f             	and    eax,0x7f
c0014ec3:	c1 e0 18             	shl    eax,0x18
c0014ec6:	09 f8                	or     eax,edi
c0014ec8:	89 c1                	mov    ecx,eax
c0014eca:	89 d0                	mov    eax,edx
c0014ecc:	80 f4 00             	xor    ah,0x0
c0014ecf:	89 c3                	mov    ebx,eax
c0014ed1:	89 c8                	mov    eax,ecx
c0014ed3:	80 f4 00             	xor    ah,0x0
c0014ed6:	89 c6                	mov    esi,eax
c0014ed8:	89 f0                	mov    eax,esi
c0014eda:	09 d8                	or     eax,ebx
c0014edc:	0f 84 9e 00 00 00    	je     c0014f80 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0014ee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee6:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0014ee9:	0f b6 58 67          	movzx  ebx,BYTE PTR [eax+0x67]
c0014eed:	0f b6 70 68          	movzx  esi,BYTE PTR [eax+0x68]
c0014ef1:	c1 e6 08             	shl    esi,0x8
c0014ef4:	09 de                	or     esi,ebx
c0014ef6:	0f b6 58 69          	movzx  ebx,BYTE PTR [eax+0x69]
c0014efa:	c1 e3 10             	shl    ebx,0x10
c0014efd:	09 f3                	or     ebx,esi
c0014eff:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0014f03:	83 e0 7f             	and    eax,0x7f
c0014f06:	c1 e0 18             	shl    eax,0x18
c0014f09:	09 d8                	or     eax,ebx
c0014f0b:	89 c1                	mov    ecx,eax
c0014f0d:	89 cb                	mov    ebx,ecx
c0014f0f:	89 d1                	mov    ecx,edx
c0014f11:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c0014f16:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0014f1c:	39 c8                	cmp    eax,ecx
c0014f1e:	89 d0                	mov    eax,edx
c0014f20:	19 d8                	sbb    eax,ebx
c0014f22:	72 5c                	jb     c0014f80 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0014f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f28:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c0014f2f:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0014f32:	83 e2 00             	and    edx,0x0
c0014f35:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0014f38:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0014f3b:	83 e2 00             	and    edx,0x0
c0014f3e:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0014f41:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0014f44:	83 e2 00             	and    edx,0x0
c0014f47:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0014f4a:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0014f4d:	83 e2 80             	and    edx,0xffffff80
c0014f50:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0014f53:	83 ec 0c             	sub    esp,0xc
c0014f56:	68 de 4f 02 c0       	push   0xc0024fde
c0014f5b:	e8 06 20 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014f60:	83 c4 10             	add    esp,0x10
c0014f63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f67:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f6a:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0014f70:	83 ec 08             	sub    esp,0x8
c0014f73:	6a 0e                	push   0xe
c0014f75:	50                   	push   eax
c0014f76:	e8 50 bd ff ff       	call   c0010ccb <KeRaiseSignal(SigHandlerBlock*, int)>
c0014f7b:	83 c4 10             	add    esp,0x10
c0014f7e:	66 90                	xchg   ax,ax
c0014f80:	90                   	nop
c0014f81:	83 c4 0c             	add    esp,0xc
c0014f84:	5b                   	pop    ebx
c0014f85:	5e                   	pop    esi
c0014f86:	5f                   	pop    edi
c0014f87:	5d                   	pop    ebp
c0014f88:	c3                   	ret    

c0014f89 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014f89:	55                   	push   ebp
c0014f8a:	57                   	push   edi
c0014f8b:	56                   	push   esi
c0014f8c:	53                   	push   ebx
c0014f8d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014f93:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014f9e:	74 3b                	je     c0014fdb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014fa0:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014fa8:	74 31                	je     c0014fdb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014faa:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014fb2:	75 27                	jne    c0014fdb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014fb4:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014fbb:	05 00 10 00 00       	add    eax,0x1000
c0014fc0:	89 c2                	mov    edx,eax
c0014fc2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014fc7:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014fce:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014fd4:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014fdb:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014fe2:	83 ec 0c             	sub    esp,0xc
c0014fe5:	6a 01                	push   0x1
c0014fe7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014fed:	e8 11 e0 ff ff       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c0014ff2:	83 c4 10             	add    esp,0x10
c0014ff5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014ffb:	89 c3                	mov    ebx,eax
c0014ffd:	0f 86 27 01 00 00    	jbe    c001512a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c0015003:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001500b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015012:	c1 ee 0c             	shr    esi,0xc
c0015015:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015019:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015020:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015027:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001502b:	29 ef                	sub    edi,ebp
c001502d:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0015031:	0f 83 fa 00 00 00    	jae    c0015131 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0015037:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001503d:	b8 00 10 00 00       	mov    eax,0x1000
c0015042:	0f 47 f8             	cmova  edi,eax
c0015045:	83 ec 0c             	sub    esp,0xc
c0015048:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001504f:	31 d2                	xor    edx,edx
c0015051:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015053:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015057:	50                   	push   eax
c0015058:	8d 74 24 30          	lea    esi,[esp+0x30]
c001505c:	56                   	push   esi
c001505d:	52                   	push   edx
c001505e:	57                   	push   edi
c001505f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015066:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015069:	83 c4 20             	add    esp,0x20
c001506c:	85 c0                	test   eax,eax
c001506e:	75 06                	jne    c0015076 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0015070:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015074:	74 13                	je     c0015089 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0015076:	83 ec 0c             	sub    esp,0xc
c0015079:	53                   	push   ebx
c001507a:	e8 82 e2 ff ff       	call   c0013301 <Virt::freeKernelVirtualPages(unsigned long)>
c001507f:	83 c4 10             	add    esp,0x10
c0015082:	31 c0                	xor    eax,eax
c0015084:	e9 80 01 00 00       	jmp    c0015209 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0015089:	fa                   	cli    
c001508a:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c0015090:	e8 21 ac ff ff       	call   c000fcb6 <Phys::allocatePage()>
c0015095:	6a 07                	push   0x7
c0015097:	53                   	push   ebx
c0015098:	50                   	push   eax
c0015099:	89 c7                	mov    edi,eax
c001509b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150a3:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00150a9:	e8 2e e6 ff ff       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c00150ae:	83 c4 0c             	add    esp,0xc
c00150b1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00150b8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00150be:	6a 00                	push   0x0
c00150c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150c8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00150ce:	e8 75 e4 ff ff       	call   c0013548 <VAS::mapOtherVASIn(bool, VAS*)>
c00150d3:	58                   	pop    eax
c00150d4:	5a                   	pop    edx
c00150d5:	68 07 0c 00 00       	push   0xc07
c00150da:	55                   	push   ebp
c00150db:	57                   	push   edi
c00150dc:	89 df                	mov    edi,ebx
c00150de:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00150e5:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00150eb:	6a 00                	push   0x0
c00150ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150f5:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00150fb:	e8 30 e8 ff ff       	call   c0013930 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015100:	b9 00 10 00 00       	mov    ecx,0x1000
c0015105:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015107:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c001510e:	83 c4 20             	add    esp,0x20
c0015111:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c0015118:	75 01                	jne    c001511b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c001511a:	fb                   	sti    
c001511b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001511f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015125:	e9 ef fe ff ff       	jmp    c0015019 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001512a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015131:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015138:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001513e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015144:	0f 86 b1 00 00 00    	jbe    c00151fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c001514a:	fa                   	cli    
c001514b:	51                   	push   ecx
c001514c:	31 ff                	xor    edi,edi
c001514e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015155:	c1 ee 0c             	shr    esi,0xc
c0015158:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c001515e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015164:	6a 00                	push   0x0
c0015166:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001516b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001516e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015174:	e8 cf e3 ff ff       	call   c0013548 <VAS::mapOtherVASIn(bool, VAS*)>
c0015179:	83 c4 10             	add    esp,0x10
c001517c:	e8 35 ab ff ff       	call   c000fcb6 <Phys::allocatePage()>
c0015181:	47                   	inc    edi
c0015182:	6a 07                	push   0x7
c0015184:	53                   	push   ebx
c0015185:	50                   	push   eax
c0015186:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001518a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015190:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015193:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015199:	e8 3e e5 ff ff       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c001519e:	58                   	pop    eax
c001519f:	5a                   	pop    edx
c00151a0:	68 07 0c 00 00       	push   0xc07
c00151a5:	55                   	push   ebp
c00151a6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00151ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151b0:	50                   	push   eax
c00151b1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00151b8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00151be:	6a 00                	push   0x0
c00151c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151c8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00151ce:	e8 5d e7 ff ff       	call   c0013930 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00151d3:	83 c4 1c             	add    esp,0x1c
c00151d6:	68 00 10 00 00       	push   0x1000
c00151db:	6a 00                	push   0x0
c00151dd:	53                   	push   ebx
c00151de:	e8 0d b3 fe ff       	call   c00004f0 <memset>
c00151e3:	83 c4 10             	add    esp,0x10
c00151e6:	39 fe                	cmp    esi,edi
c00151e8:	77 92                	ja     c001517c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c00151ea:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c00151f1:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c00151f8:	75 01                	jne    c00151fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00151fa:	fb                   	sti    
c00151fb:	83 ec 0c             	sub    esp,0xc
c00151fe:	53                   	push   ebx
c00151ff:	e8 fd e0 ff ff       	call   c0013301 <Virt::freeKernelVirtualPages(unsigned long)>
c0015204:	83 c4 10             	add    esp,0x10
c0015207:	b0 01                	mov    al,0x1
c0015209:	81 c4 2c 10 00 00    	add    esp,0x102c
c001520f:	5b                   	pop    ebx
c0015210:	5e                   	pop    esi
c0015211:	5f                   	pop    edi
c0015212:	5d                   	pop    ebp
c0015213:	c3                   	ret    

c0015214 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015214:	55                   	push   ebp
c0015215:	57                   	push   edi
c0015216:	56                   	push   esi
c0015217:	53                   	push   ebx
c0015218:	83 ec 68             	sub    esp,0x68
c001521b:	68 14 01 00 00       	push   0x114
c0015220:	e8 43 a4 ff ff       	call   c000f668 <malloc>
c0015225:	83 c4 0c             	add    esp,0xc
c0015228:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001522c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015230:	89 c3                	mov    ebx,eax
c0015232:	50                   	push   eax
c0015233:	e8 50 2f ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0015238:	5e                   	pop    esi
c0015239:	5f                   	pop    edi
c001523a:	6a 01                	push   0x1
c001523c:	53                   	push   ebx
c001523d:	e8 64 2f ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0015242:	83 c4 10             	add    esp,0x10
c0015245:	85 c0                	test   eax,eax
c0015247:	0f 85 cb 01 00 00    	jne    c0015418 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c001524d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015255:	83 ec 0c             	sub    esp,0xc
c0015258:	6a 34                	push   0x34
c001525a:	e8 09 a4 ff ff       	call   c000f668 <malloc>
c001525f:	59                   	pop    ecx
c0015260:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015264:	89 c7                	mov    edi,eax
c0015266:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015268:	56                   	push   esi
c0015269:	57                   	push   edi
c001526a:	6a 00                	push   0x0
c001526c:	6a 34                	push   0x34
c001526e:	53                   	push   ebx
c001526f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015272:	83 c4 20             	add    esp,0x20
c0015275:	85 c0                	test   eax,eax
c0015277:	0f 85 9b 01 00 00    	jne    c0015418 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c001527d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015283:	0f 85 8f 01 00 00    	jne    c0015418 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015289:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001528c:	85 c0                	test   eax,eax
c001528e:	0f 84 84 01 00 00    	je     c0015418 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015294:	52                   	push   edx
c0015295:	31 d2                	xor    edx,edx
c0015297:	52                   	push   edx
c0015298:	50                   	push   eax
c0015299:	53                   	push   ebx
c001529a:	e8 c5 2f ff ff       	call   c0008264 <File::seek(unsigned long long)>
c001529f:	83 c4 10             	add    esp,0x10
c00152a2:	85 c0                	test   eax,eax
c00152a4:	0f 85 6e 01 00 00    	jne    c0015418 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c00152aa:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00152ad:	83 ec 0c             	sub    esp,0xc
c00152b0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00152b4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00152b8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00152bc:	0f af c2             	imul   eax,edx
c00152bf:	50                   	push   eax
c00152c0:	e8 a3 a3 ff ff       	call   c000f668 <malloc>
c00152c5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00152c7:	89 34 24             	mov    DWORD PTR [esp],esi
c00152ca:	31 f6                	xor    esi,esi
c00152cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152d4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00152d8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00152dc:	0f af c2             	imul   eax,edx
c00152df:	99                   	cdq    
c00152e0:	52                   	push   edx
c00152e1:	50                   	push   eax
c00152e2:	53                   	push   ebx
c00152e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152e6:	83 c4 20             	add    esp,0x20
c00152e9:	66 3b 77 30          	cmp    si,WORD PTR [edi+0x30]
c00152ed:	0f b7 c6             	movzx  eax,si
c00152f0:	73 71                	jae    c0015363 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c00152f2:	55                   	push   ebp
c00152f3:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00152f7:	6b c0 28             	imul   eax,eax,0x28
c00152fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00152fe:	6b d2 28             	imul   edx,edx,0x28
c0015301:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c0015304:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015308:	31 d2                	xor    edx,edx
c001530a:	52                   	push   edx
c001530b:	50                   	push   eax
c001530c:	53                   	push   ebx
c001530d:	e8 52 2f ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015312:	83 c4 0c             	add    esp,0xc
c0015315:	6a 20                	push   0x20
c0015317:	6a 00                	push   0x0
c0015319:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c001531d:	55                   	push   ebp
c001531e:	e8 cd b1 fe ff       	call   c00004f0 <memset>
c0015323:	58                   	pop    eax
c0015324:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015326:	8d 54 24 38          	lea    edx,[esp+0x38]
c001532a:	52                   	push   edx
c001532b:	55                   	push   ebp
c001532c:	6a 00                	push   0x0
c001532e:	6a 1f                	push   0x1f
c0015330:	53                   	push   ebx
c0015331:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015334:	83 c4 18             	add    esp,0x18
c0015337:	55                   	push   ebp
c0015338:	68 ef 4f 02 c0       	push   0xc0024fef
c001533d:	e8 3e b4 fe ff       	call   c0000780 <strcmp>
c0015342:	83 c4 10             	add    esp,0x10
c0015345:	85 c0                	test   eax,eax
c0015347:	75 17                	jne    c0015360 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015349:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001534d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0015351:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015357:	83 c8 80             	or     eax,0xffffff80
c001535a:	88 82 76 02 00 00    	mov    BYTE PTR [edx+0x276],al
c0015360:	46                   	inc    esi
c0015361:	eb 86                	jmp    c00152e9 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015363:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015366:	85 c0                	test   eax,eax
c0015368:	0f 84 aa 00 00 00    	je     c0015418 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c001536e:	31 d2                	xor    edx,edx
c0015370:	56                   	push   esi
c0015371:	52                   	push   edx
c0015372:	50                   	push   eax
c0015373:	53                   	push   ebx
c0015374:	e8 eb 2e ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015379:	83 c4 10             	add    esp,0x10
c001537c:	85 c0                	test   eax,eax
c001537e:	0f 85 94 00 00 00    	jne    c0015418 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015384:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015388:	83 ec 0c             	sub    esp,0xc
c001538b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001538f:	0f af c2             	imul   eax,edx
c0015392:	50                   	push   eax
c0015393:	e8 d0 a2 ff ff       	call   c000f668 <malloc>
c0015398:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001539c:	59                   	pop    ecx
c001539d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001539f:	8d 44 24 34          	lea    eax,[esp+0x34]
c00153a3:	50                   	push   eax
c00153a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00153a8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00153ac:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00153b0:	0f af c2             	imul   eax,edx
c00153b3:	99                   	cdq    
c00153b4:	52                   	push   edx
c00153b5:	50                   	push   eax
c00153b6:	53                   	push   ebx
c00153b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00153ba:	83 c4 20             	add    esp,0x20
c00153bd:	31 c9                	xor    ecx,ecx
c00153bf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00153c7:	66 3b 4f 2c          	cmp    cx,WORD PTR [edi+0x2c]
c00153cb:	0f b7 e9             	movzx  ebp,cx
c00153ce:	0f 83 89 00 00 00    	jae    c001545d <Thr::loadProgramIntoMemory(Process*, char const*)+0x249>
c00153d4:	c1 e5 05             	shl    ebp,0x5
c00153d7:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c00153db:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00153df:	75 76                	jne    c0015457 <Thr::loadProgramIntoMemory(Process*, char const*)+0x243>
c00153e1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00153e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e8:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00153eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00153ef:	52                   	push   edx
c00153f0:	31 d2                	xor    edx,edx
c00153f2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00153f5:	52                   	push   edx
c00153f6:	50                   	push   eax
c00153f7:	53                   	push   ebx
c00153f8:	e8 67 2e ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00153fd:	83 c4 10             	add    esp,0x10
c0015400:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015404:	85 c0                	test   eax,eax
c0015406:	74 17                	je     c001541f <Thr::loadProgramIntoMemory(Process*, char const*)+0x20b>
c0015408:	83 ec 0c             	sub    esp,0xc
c001540b:	68 fe 4f 02 c0       	push   0xc0024ffe
c0015410:	e8 51 1b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015415:	83 c4 10             	add    esp,0x10
c0015418:	31 c0                	xor    eax,eax
c001541a:	e9 8e 00 00 00       	jmp    c00154ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x299>
c001541f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015423:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0015426:	83 ec 0c             	sub    esp,0xc
c0015429:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c001542c:	50                   	push   eax
c001542d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015431:	56                   	push   esi
c0015432:	53                   	push   ebx
c0015433:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001543a:	e8 4a fb ff ff       	call   c0014f89 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001543f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015443:	83 c4 20             	add    esp,0x20
c0015446:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001544a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001544e:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0015453:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0015457:	41                   	inc    ecx
c0015458:	e9 6a ff ff ff       	jmp    c00153c7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c001545d:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015461:	83 ec 0c             	sub    esp,0xc
c0015464:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015468:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001546c:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015472:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015477:	89 b1 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],esi
c001547d:	05 00 10 00 00       	add    eax,0x1000
c0015482:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015485:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015489:	e8 ea a1 ff ff       	call   c000f678 <free>
c001548e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015491:	e8 e2 a1 ff ff       	call   c000f678 <free>
c0015496:	58                   	pop    eax
c0015497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001549b:	e8 d8 a1 ff ff       	call   c000f678 <free>
c00154a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154a3:	e8 5c 2d ff ff       	call   c0008204 <File::close()>
c00154a8:	83 c4 10             	add    esp,0x10
c00154ab:	b0 01                	mov    al,0x1
c00154ad:	83 c4 5c             	add    esp,0x5c
c00154b0:	5b                   	pop    ebx
c00154b1:	5e                   	pop    esi
c00154b2:	5f                   	pop    edi
c00154b3:	5d                   	pop    ebp
c00154b4:	c3                   	ret    

c00154b5 <Thr::runtimeReferenceHelper()>:
c00154b5:	83 ec 18             	sub    esp,0x18
c00154b8:	68 06 50 02 c0       	push   0xc0025006
c00154bd:	e8 a4 1a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00154c2:	fa                   	cli    
c00154c3:	83 c4 10             	add    esp,0x10
c00154c6:	eb fe                	jmp    c00154c6 <Thr::runtimeReferenceHelper()+0x11>

c00154c8 <Thr::getAddressOfKernelSymbol(char const*)>:
c00154c8:	57                   	push   edi
c00154c9:	56                   	push   esi
c00154ca:	53                   	push   ebx
c00154cb:	31 db                	xor    ebx,ebx
c00154cd:	39 1d 00 d3 02 c0    	cmp    DWORD PTR ds:0xc002d300,ebx
c00154d3:	7e 3c                	jle    c0015511 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00154d5:	8b 34 9d e0 d2 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2d20]
c00154dc:	31 ff                	xor    edi,edi
c00154de:	39 3c 9d a0 d2 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2d60],edi
c00154e5:	7e 27                	jle    c001550e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00154e7:	50                   	push   eax
c00154e8:	50                   	push   eax
c00154e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00154ef:	03 04 9d c0 d2 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2d40]
c00154f6:	50                   	push   eax
c00154f7:	e8 84 b2 fe ff       	call   c0000780 <strcmp>
c00154fc:	83 c4 10             	add    esp,0x10
c00154ff:	85 c0                	test   eax,eax
c0015501:	75 05                	jne    c0015508 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015503:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015506:	eb 0b                	jmp    c0015513 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015508:	83 c6 10             	add    esi,0x10
c001550b:	47                   	inc    edi
c001550c:	eb d0                	jmp    c00154de <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001550e:	43                   	inc    ebx
c001550f:	eb bc                	jmp    c00154cd <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015511:	31 c0                	xor    eax,eax
c0015513:	5b                   	pop    ebx
c0015514:	5e                   	pop    esi
c0015515:	5f                   	pop    edi
c0015516:	c3                   	ret    

c0015517 <Thr::loadKernelSymbolTable(char const*)>:
c0015517:	55                   	push   ebp
c0015518:	57                   	push   edi
c0015519:	56                   	push   esi
c001551a:	53                   	push   ebx
c001551b:	83 ec 68             	sub    esp,0x68
c001551e:	68 14 01 00 00       	push   0x114
c0015523:	8b 35 58 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d358
c0015529:	e8 3a a1 ff ff       	call   c000f668 <malloc>
c001552e:	83 c4 0c             	add    esp,0xc
c0015531:	56                   	push   esi
c0015532:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015536:	89 c3                	mov    ebx,eax
c0015538:	50                   	push   eax
c0015539:	e8 4a 2c ff ff       	call   c0008188 <File::File(char const*, Process*)>
c001553e:	5e                   	pop    esi
c001553f:	5f                   	pop    edi
c0015540:	6a 01                	push   0x1
c0015542:	53                   	push   ebx
c0015543:	e8 5e 2c ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0015548:	83 c4 10             	add    esp,0x10
c001554b:	85 c0                	test   eax,eax
c001554d:	74 0a                	je     c0015559 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001554f:	83 ec 0c             	sub    esp,0xc
c0015552:	68 28 50 02 c0       	push   0xc0025028
c0015557:	eb 34                	jmp    c001558d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015559:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015561:	83 ec 0c             	sub    esp,0xc
c0015564:	6a 34                	push   0x34
c0015566:	e8 fd a0 ff ff       	call   c000f668 <malloc>
c001556b:	59                   	pop    ecx
c001556c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015570:	89 c7                	mov    edi,eax
c0015572:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015574:	56                   	push   esi
c0015575:	57                   	push   edi
c0015576:	6a 00                	push   0x0
c0015578:	6a 34                	push   0x34
c001557a:	53                   	push   ebx
c001557b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001557e:	83 c4 20             	add    esp,0x20
c0015581:	85 c0                	test   eax,eax
c0015583:	74 17                	je     c001559c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015585:	83 ec 0c             	sub    esp,0xc
c0015588:	68 3f 50 02 c0       	push   0xc002503f
c001558d:	e8 2a a5 ff ff       	call   c000fabc <KePanic(char const*)>
c0015592:	83 c4 10             	add    esp,0x10
c0015595:	31 c0                	xor    eax,eax
c0015597:	e9 31 02 00 00       	jmp    c00157cd <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001559c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00155a2:	75 e1                	jne    c0015585 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00155a4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00155a7:	85 c0                	test   eax,eax
c00155a9:	74 da                	je     c0015585 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00155ab:	52                   	push   edx
c00155ac:	31 d2                	xor    edx,edx
c00155ae:	52                   	push   edx
c00155af:	50                   	push   eax
c00155b0:	53                   	push   ebx
c00155b1:	e8 ae 2c ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00155b6:	83 c4 10             	add    esp,0x10
c00155b9:	85 c0                	test   eax,eax
c00155bb:	75 c8                	jne    c0015585 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00155bd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00155c1:	83 ec 0c             	sub    esp,0xc
c00155c4:	31 ed                	xor    ebp,ebp
c00155c6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00155ca:	0f af c2             	imul   eax,edx
c00155cd:	50                   	push   eax
c00155ce:	e8 95 a0 ff ff       	call   c000f668 <malloc>
c00155d3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00155d5:	89 34 24             	mov    DWORD PTR [esp],esi
c00155d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00155dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155e0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00155e4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00155e8:	0f af c2             	imul   eax,edx
c00155eb:	99                   	cdq    
c00155ec:	52                   	push   edx
c00155ed:	50                   	push   eax
c00155ee:	53                   	push   ebx
c00155ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00155f2:	83 c4 20             	add    esp,0x20
c00155f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00155fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015605:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001560d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015615:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015619:	0f b7 f5             	movzx  esi,bp
c001561c:	0f 83 a7 00 00 00    	jae    c00156c9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015622:	6b f6 28             	imul   esi,esi,0x28
c0015625:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015629:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001562c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015630:	50                   	push   eax
c0015631:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015635:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015639:	8b 16                	mov    edx,DWORD PTR [esi]
c001563b:	6b c0 28             	imul   eax,eax,0x28
c001563e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015642:	89 d0                	mov    eax,edx
c0015644:	31 d2                	xor    edx,edx
c0015646:	52                   	push   edx
c0015647:	50                   	push   eax
c0015648:	53                   	push   ebx
c0015649:	e8 16 2c ff ff       	call   c0008264 <File::seek(unsigned long long)>
c001564e:	83 c4 0c             	add    esp,0xc
c0015651:	6a 20                	push   0x20
c0015653:	6a 00                	push   0x0
c0015655:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015659:	52                   	push   edx
c001565a:	e8 91 ae fe ff       	call   c00004f0 <memset>
c001565f:	58                   	pop    eax
c0015660:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015662:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015666:	51                   	push   ecx
c0015667:	8d 54 24 40          	lea    edx,[esp+0x40]
c001566b:	52                   	push   edx
c001566c:	6a 00                	push   0x0
c001566e:	6a 1f                	push   0x1f
c0015670:	53                   	push   ebx
c0015671:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015674:	83 c4 18             	add    esp,0x18
c0015677:	68 56 50 02 c0       	push   0xc0025056
c001567c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015680:	52                   	push   edx
c0015681:	e8 fa b0 fe ff       	call   c0000780 <strcmp>
c0015686:	83 c4 10             	add    esp,0x10
c0015689:	85 c0                	test   eax,eax
c001568b:	75 0f                	jne    c001569c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001568d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015690:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015694:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015698:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001569c:	50                   	push   eax
c001569d:	50                   	push   eax
c001569e:	68 5e 50 02 c0       	push   0xc002505e
c00156a3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00156a7:	50                   	push   eax
c00156a8:	e8 d3 b0 fe ff       	call   c0000780 <strcmp>
c00156ad:	83 c4 10             	add    esp,0x10
c00156b0:	85 c0                	test   eax,eax
c00156b2:	75 0f                	jne    c00156c3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00156b4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00156b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00156bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00156bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00156c3:	45                   	inc    ebp
c00156c4:	e9 4c ff ff ff       	jmp    c0015615 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00156c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00156ce:	75 10                	jne    c00156e0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00156d0:	83 ec 0c             	sub    esp,0xc
c00156d3:	68 66 50 02 c0       	push   0xc0025066
c00156d8:	e8 df a3 ff ff       	call   c000fabc <KePanic(char const*)>
c00156dd:	83 c4 10             	add    esp,0x10
c00156e0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00156e5:	75 10                	jne    c00156f7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00156e7:	83 ec 0c             	sub    esp,0xc
c00156ea:	68 66 50 02 c0       	push   0xc0025066
c00156ef:	e8 c8 a3 ff ff       	call   c000fabc <KePanic(char const*)>
c00156f4:	83 c4 10             	add    esp,0x10
c00156f7:	50                   	push   eax
c00156f8:	31 d2                	xor    edx,edx
c00156fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156fe:	52                   	push   edx
c00156ff:	50                   	push   eax
c0015700:	53                   	push   ebx
c0015701:	e8 5e 2b ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015706:	5a                   	pop    edx
c0015707:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001570b:	e8 58 9f ff ff       	call   c000f668 <malloc>
c0015710:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015714:	31 c9                	xor    ecx,ecx
c0015716:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001571a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001571c:	5e                   	pop    esi
c001571d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015721:	55                   	push   ebp
c0015722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015726:	51                   	push   ecx
c0015727:	52                   	push   edx
c0015728:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001572c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015730:	53                   	push   ebx
c0015731:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015734:	83 c4 14             	add    esp,0x14
c0015737:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001573b:	e8 28 9f ff ff       	call   c000f668 <malloc>
c0015740:	89 c6                	mov    esi,eax
c0015742:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015744:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015747:	56                   	push   esi
c0015748:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001574c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015750:	51                   	push   ecx
c0015751:	52                   	push   edx
c0015752:	53                   	push   ebx
c0015753:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015756:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001575a:	83 c4 1c             	add    esp,0x1c
c001575d:	8b 15 00 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d300
c0015763:	c1 e8 04             	shr    eax,0x4
c0015766:	89 04 95 a0 d2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2d60],eax
c001576d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015771:	31 d2                	xor    edx,edx
c0015773:	52                   	push   edx
c0015774:	50                   	push   eax
c0015775:	53                   	push   ebx
c0015776:	e8 e9 2a ff ff       	call   c0008264 <File::seek(unsigned long long)>
c001577b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001577d:	31 d2                	xor    edx,edx
c001577f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015782:	56                   	push   esi
c0015783:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015787:	52                   	push   edx
c0015788:	50                   	push   eax
c0015789:	53                   	push   ebx
c001578a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001578d:	83 c4 14             	add    esp,0x14
c0015790:	53                   	push   ebx
c0015791:	e8 6e 2a ff ff       	call   c0008204 <File::close()>
c0015796:	5d                   	pop    ebp
c0015797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001579b:	e8 d8 9e ff ff       	call   c000f678 <free>
c00157a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00157a3:	e8 d0 9e ff ff       	call   c000f678 <free>
c00157a8:	a1 00 d3 02 c0       	mov    eax,ds:0xc002d300
c00157ad:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00157b1:	83 c4 10             	add    esp,0x10
c00157b4:	89 34 85 c0 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d40],esi
c00157bb:	8d 50 01             	lea    edx,[eax+0x1]
c00157be:	89 0c 85 e0 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d20],ecx
c00157c5:	b0 01                	mov    al,0x1
c00157c7:	89 15 00 d3 02 c0    	mov    DWORD PTR ds:0xc002d300,edx
c00157cd:	83 c4 5c             	add    esp,0x5c
c00157d0:	5b                   	pop    ebx
c00157d1:	5e                   	pop    esi
c00157d2:	5f                   	pop    edi
c00157d3:	5d                   	pop    ebp
c00157d4:	c3                   	ret    

c00157d5 <KeIsELFValid(Elf32_Ehdr*)>:
c00157d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00157d9:	31 c0                	xor    eax,eax
c00157db:	80 3a 7f             	cmp    BYTE PTR [edx],0x7f
c00157de:	75 13                	jne    c00157f3 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00157e0:	80 7a 01 45          	cmp    BYTE PTR [edx+0x1],0x45
c00157e4:	75 0d                	jne    c00157f3 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00157e6:	80 7a 02 4c          	cmp    BYTE PTR [edx+0x2],0x4c
c00157ea:	75 07                	jne    c00157f3 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00157ec:	80 7a 03 46          	cmp    BYTE PTR [edx+0x3],0x46
c00157f0:	0f 94 c0             	sete   al
c00157f3:	c3                   	ret    

c00157f4 <KeGetELFSectionHeader(unsigned char*, int)>:
c00157f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157f8:	6b 54 24 08 28       	imul   edx,DWORD PTR [esp+0x8],0x28
c00157fd:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
c0015800:	01 d0                	add    eax,edx
c0015802:	c3                   	ret    

c0015803 <KeGetELFProgramHeader(unsigned char*, int)>:
c0015803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015807:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001580b:	c1 e0 05             	shl    eax,0x5
c001580e:	03 42 1c             	add    eax,DWORD PTR [edx+0x1c]
c0015811:	01 d0                	add    eax,edx
c0015813:	c3                   	ret    

c0015814 <KeLookupELFString(unsigned char*, int)>:
c0015814:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015818:	31 c0                	xor    eax,eax
c001581a:	0f b7 51 32          	movzx  edx,WORD PTR [ecx+0x32]
c001581e:	85 d2                	test   edx,edx
c0015820:	74 14                	je     c0015836 <KeLookupELFString(unsigned char*, int)+0x22>
c0015822:	52                   	push   edx
c0015823:	51                   	push   ecx
c0015824:	e8 cb ff ff ff       	call   c00157f4 <KeGetELFSectionHeader(unsigned char*, int)>
c0015829:	5a                   	pop    edx
c001582a:	5a                   	pop    edx
c001582b:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c001582e:	89 c8                	mov    eax,ecx
c0015830:	74 04                	je     c0015836 <KeLookupELFString(unsigned char*, int)+0x22>
c0015832:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0015836:	c3                   	ret    

c0015837 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>:
c0015837:	55                   	push   ebp
c0015838:	31 ed                	xor    ebp,ebp
c001583a:	57                   	push   edi
c001583b:	56                   	push   esi
c001583c:	53                   	push   ebx
c001583d:	83 ec 1c             	sub    esp,0x1c
c0015840:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015844:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015847:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001584b:	89 04 24             	mov    DWORD PTR [esp],eax
c001584e:	0f b6 44 24 34       	movzx  eax,BYTE PTR [esp+0x34]
c0015853:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015857:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001585b:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c001585f:	39 e8                	cmp    eax,ebp
c0015861:	7e 79                	jle    c00158dc <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xa5>
c0015863:	55                   	push   ebp
c0015864:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015868:	e8 96 ff ff ff       	call   c0015803 <KeGetELFProgramHeader(unsigned char*, int)>
c001586d:	5a                   	pop    edx
c001586e:	59                   	pop    ecx
c001586f:	83 38 01             	cmp    DWORD PTR [eax],0x1
c0015872:	75 62                	jne    c00158d6 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x9f>
c0015874:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0015877:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001587c:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
c001587f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015882:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015886:	75 22                	jne    c00158aa <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x73>
c0015888:	83 ec 0c             	sub    esp,0xc
c001588b:	01 f3                	add    ebx,esi
c001588d:	68 80 50 02 c0       	push   0xc0025080
c0015892:	e8 25 a2 ff ff       	call   c000fabc <KePanic(char const*)>
c0015897:	03 5c 24 18          	add    ebx,DWORD PTR [esp+0x18]
c001589b:	83 c4 10             	add    esp,0x10
c001589e:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00158a1:	0f 43 1c 24          	cmovae ebx,DWORD PTR [esp]
c00158a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00158a8:	eb 2c                	jmp    c00158d6 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x9f>
c00158aa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00158ae:	89 d9                	mov    ecx,ebx
c00158b0:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c00158b4:	01 f2                	add    edx,esi
c00158b6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00158ba:	03 70 04             	add    esi,DWORD PTR [eax+0x4]
c00158bd:	89 d7                	mov    edi,edx
c00158bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00158c1:	50                   	push   eax
c00158c2:	01 da                	add    edx,ebx
c00158c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00158c8:	29 d8                	sub    eax,ebx
c00158ca:	50                   	push   eax
c00158cb:	6a 00                	push   0x0
c00158cd:	52                   	push   edx
c00158ce:	e8 1d ac fe ff       	call   c00004f0 <memset>
c00158d3:	83 c4 10             	add    esp,0x10
c00158d6:	45                   	inc    ebp
c00158d7:	e9 7b ff ff ff       	jmp    c0015857 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x20>
c00158dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00158df:	83 c4 1c             	add    esp,0x1c
c00158e2:	5b                   	pop    ebx
c00158e3:	5e                   	pop    esi
c00158e4:	5f                   	pop    edi
c00158e5:	5d                   	pop    ebp
c00158e6:	c3                   	ret    

c00158e7 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>:
c00158e7:	57                   	push   edi
c00158e8:	56                   	push   esi
c00158e9:	53                   	push   ebx
c00158ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00158ee:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00158f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00158f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158fa:	85 c0                	test   eax,eax
c00158fc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00158ff:	74 04                	je     c0015905 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c0015901:	85 db                	test   ebx,ebx
c0015903:	75 05                	jne    c001590a <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x23>
c0015905:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0015908:	eb 5c                	jmp    c0015966 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x7f>
c001590a:	50                   	push   eax
c001590b:	51                   	push   ecx
c001590c:	e8 e3 fe ff ff       	call   c00157f4 <KeGetELFSectionHeader(unsigned char*, int)>
c0015911:	5f                   	pop    edi
c0015912:	5a                   	pop    edx
c0015913:	31 d2                	xor    edx,edx
c0015915:	89 c7                	mov    edi,eax
c0015917:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001591a:	f7 77 24             	div    DWORD PTR [edi+0x24]
c001591d:	39 c3                	cmp    ebx,eax
c001591f:	73 e4                	jae    c0015905 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c0015921:	c1 e3 04             	shl    ebx,0x4
c0015924:	03 5f 10             	add    ebx,DWORD PTR [edi+0x10]
c0015927:	01 cb                	add    ebx,ecx
c0015929:	0f b7 53 0e          	movzx  edx,WORD PTR [ebx+0xe]
c001592d:	85 d2                	test   edx,edx
c001592f:	75 39                	jne    c001596a <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x83>
c0015931:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0015934:	51                   	push   ecx
c0015935:	e8 ba fe ff ff       	call   c00157f4 <KeGetELFSectionHeader(unsigned char*, int)>
c001593a:	52                   	push   edx
c001593b:	03 0b                	add    ecx,DWORD PTR [ebx]
c001593d:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c0015940:	51                   	push   ecx
c0015941:	e8 82 fb ff ff       	call   c00154c8 <Thr::getAddressOfKernelSymbol(char const*)>
c0015946:	83 c4 10             	add    esp,0x10
c0015949:	85 c0                	test   eax,eax
c001594b:	75 32                	jne    c001597f <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c001594d:	f6 43 0c 20          	test   BYTE PTR [ebx+0xc],0x20
c0015951:	75 03                	jne    c0015956 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x6f>
c0015953:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0015956:	83 ec 0c             	sub    esp,0xc
c0015959:	68 a9 50 02 c0       	push   0xc00250a9
c001595e:	e8 03 16 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015963:	83 c4 10             	add    esp,0x10
c0015966:	31 c0                	xor    eax,eax
c0015968:	eb 15                	jmp    c001597f <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c001596a:	81 fa f1 ff 00 00    	cmp    edx,0xfff1
c0015970:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015973:	74 0a                	je     c001597f <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0015975:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015979:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c001597d:	01 d0                	add    eax,edx
c001597f:	5b                   	pop    ebx
c0015980:	5e                   	pop    esi
c0015981:	5f                   	pop    edi
c0015982:	c3                   	ret    

c0015983 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>:
c0015983:	55                   	push   ebp
c0015984:	57                   	push   edi
c0015985:	56                   	push   esi
c0015986:	53                   	push   ebx
c0015987:	83 ec 1c             	sub    esp,0x1c
c001598a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001598e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0015992:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015996:	8b 69 18             	mov    ebp,DWORD PTR [ecx+0x18]
c0015999:	8b 1e                	mov    ebx,DWORD PTR [esi]
c001599b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001599e:	29 ef                	sub    edi,ebp
c00159a0:	01 fb                	add    ebx,edi
c00159a2:	c1 ea 08             	shr    edx,0x8
c00159a5:	74 2d                	je     c00159d4 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x51>
c00159a7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00159ac:	50                   	push   eax
c00159ad:	50                   	push   eax
c00159ae:	55                   	push   ebp
c00159af:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00159b3:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00159b7:	50                   	push   eax
c00159b8:	52                   	push   edx
c00159b9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00159bd:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00159c0:	51                   	push   ecx
c00159c1:	e8 21 ff ff ff       	call   c00158e7 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>
c00159c6:	83 c4 20             	add    esp,0x20
c00159c9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00159ce:	74 06                	je     c00159d6 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x53>
c00159d0:	31 c0                	xor    eax,eax
c00159d2:	eb 27                	jmp    c00159fb <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c00159d4:	31 c0                	xor    eax,eax
c00159d6:	0f b6 56 04          	movzx  edx,BYTE PTR [esi+0x4]
c00159da:	83 fa 01             	cmp    edx,0x1
c00159dd:	75 04                	jne    c00159e3 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x60>
c00159df:	01 03                	add    DWORD PTR [ebx],eax
c00159e1:	eb 16                	jmp    c00159f9 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c00159e3:	83 fa 02             	cmp    edx,0x2
c00159e6:	75 08                	jne    c00159f0 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x6d>
c00159e8:	03 03                	add    eax,DWORD PTR [ebx]
c00159ea:	29 d8                	sub    eax,ebx
c00159ec:	89 03                	mov    DWORD PTR [ebx],eax
c00159ee:	eb 09                	jmp    c00159f9 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c00159f0:	31 c0                	xor    eax,eax
c00159f2:	83 fa 08             	cmp    edx,0x8
c00159f5:	75 04                	jne    c00159fb <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c00159f7:	01 3b                	add    DWORD PTR [ebx],edi
c00159f9:	b0 01                	mov    al,0x1
c00159fb:	83 c4 1c             	add    esp,0x1c
c00159fe:	5b                   	pop    ebx
c00159ff:	5e                   	pop    esi
c0015a00:	5f                   	pop    edi
c0015a01:	5d                   	pop    ebp
c0015a02:	c3                   	ret    

c0015a03 <KePerformRelocations(unsigned char*, unsigned long)>:
c0015a03:	55                   	push   ebp
c0015a04:	31 ed                	xor    ebp,ebp
c0015a06:	57                   	push   edi
c0015a07:	56                   	push   esi
c0015a08:	53                   	push   ebx
c0015a09:	83 ec 1c             	sub    esp,0x1c
c0015a0c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015a10:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c0015a14:	39 e8                	cmp    eax,ebp
c0015a16:	0f 8e 92 00 00 00    	jle    c0015aae <KePerformRelocations(unsigned char*, unsigned long)+0xab>
c0015a1c:	55                   	push   ebp
c0015a1d:	56                   	push   esi
c0015a1e:	e8 d1 fd ff ff       	call   c00157f4 <KeGetELFSectionHeader(unsigned char*, int)>
c0015a23:	5a                   	pop    edx
c0015a24:	59                   	pop    ecx
c0015a25:	89 c3                	mov    ebx,eax
c0015a27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015a2a:	83 f8 09             	cmp    eax,0x9
c0015a2d:	75 64                	jne    c0015a93 <KePerformRelocations(unsigned char*, unsigned long)+0x90>
c0015a2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015a32:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0015a35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015a39:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015a3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a40:	ff 33                	push   DWORD PTR [ebx]
c0015a42:	56                   	push   esi
c0015a43:	e8 cc fd ff ff       	call   c0015814 <KeLookupELFString(unsigned char*, int)>
c0015a48:	68 ca 50 02 c0       	push   0xc00250ca
c0015a4d:	50                   	push   eax
c0015a4e:	e8 2d ad fe ff       	call   c0000780 <strcmp>
c0015a53:	83 c4 10             	add    esp,0x10
c0015a56:	85 c0                	test   eax,eax
c0015a58:	89 c1                	mov    ecx,eax
c0015a5a:	75 4c                	jne    c0015aa8 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015a5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015a60:	31 d2                	xor    edx,edx
c0015a62:	01 f7                	add    edi,esi
c0015a64:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0015a68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015a6c:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0015a70:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a74:	7d 32                	jge    c0015aa8 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015a76:	57                   	push   edi
c0015a77:	83 c7 08             	add    edi,0x8
c0015a7a:	53                   	push   ebx
c0015a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015a7f:	56                   	push   esi
c0015a80:	e8 fe fe ff ff       	call   c0015983 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>
c0015a85:	83 c4 10             	add    esp,0x10
c0015a88:	84 c0                	test   al,al
c0015a8a:	74 24                	je     c0015ab0 <KePerformRelocations(unsigned char*, unsigned long)+0xad>
c0015a8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a90:	41                   	inc    ecx
c0015a91:	eb d9                	jmp    c0015a6c <KePerformRelocations(unsigned char*, unsigned long)+0x69>
c0015a93:	83 f8 04             	cmp    eax,0x4
c0015a96:	75 10                	jne    c0015aa8 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015a98:	83 ec 0c             	sub    esp,0xc
c0015a9b:	68 d3 50 02 c0       	push   0xc00250d3
c0015aa0:	e8 17 a0 ff ff       	call   c000fabc <KePanic(char const*)>
c0015aa5:	83 c4 10             	add    esp,0x10
c0015aa8:	45                   	inc    ebp
c0015aa9:	e9 62 ff ff ff       	jmp    c0015a10 <KePerformRelocations(unsigned char*, unsigned long)+0xd>
c0015aae:	b0 01                	mov    al,0x1
c0015ab0:	83 c4 1c             	add    esp,0x1c
c0015ab3:	5b                   	pop    ebx
c0015ab4:	5e                   	pop    esi
c0015ab5:	5f                   	pop    edi
c0015ab6:	5d                   	pop    ebp
c0015ab7:	c3                   	ret    

c0015ab8 <KeLoadELF(unsigned char*, bool, unsigned long)>:
c0015ab8:	57                   	push   edi
c0015ab9:	56                   	push   esi
c0015aba:	53                   	push   ebx
c0015abb:	83 ec 10             	sub    esp,0x10
c0015abe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015ac2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0015ac6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015aca:	53                   	push   ebx
c0015acb:	e8 05 fd ff ff       	call   c00157d5 <KeIsELFValid(Elf32_Ehdr*)>
c0015ad0:	59                   	pop    ecx
c0015ad1:	84 c0                	test   al,al
c0015ad3:	75 04                	jne    c0015ad9 <KeLoadELF(unsigned char*, bool, unsigned long)+0x21>
c0015ad5:	31 c0                	xor    eax,eax
c0015ad7:	eb 4d                	jmp    c0015b26 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0015ad9:	81 e6 ff 00 00 00    	and    esi,0xff
c0015adf:	74 07                	je     c0015ae8 <KeLoadELF(unsigned char*, bool, unsigned long)+0x30>
c0015ae1:	66 83 7b 30 00       	cmp    WORD PTR [ebx+0x30],0x0
c0015ae6:	74 ed                	je     c0015ad5 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015ae8:	66 83 7b 2c 00       	cmp    WORD PTR [ebx+0x2c],0x0
c0015aed:	74 e6                	je     c0015ad5 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015aef:	52                   	push   edx
c0015af0:	57                   	push   edi
c0015af1:	56                   	push   esi
c0015af2:	53                   	push   ebx
c0015af3:	e8 3f fd ff ff       	call   c0015837 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>
c0015af8:	59                   	pop    ecx
c0015af9:	5a                   	pop    edx
c0015afa:	50                   	push   eax
c0015afb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015aff:	68 f4 50 02 c0       	push   0xc00250f4
c0015b04:	e8 5d 14 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015b09:	83 c4 10             	add    esp,0x10
c0015b0c:	85 f6                	test   esi,esi
c0015b0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b12:	74 12                	je     c0015b26 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0015b14:	50                   	push   eax
c0015b15:	50                   	push   eax
c0015b16:	57                   	push   edi
c0015b17:	53                   	push   ebx
c0015b18:	e8 e6 fe ff ff       	call   c0015a03 <KePerformRelocations(unsigned char*, unsigned long)>
c0015b1d:	83 c4 10             	add    esp,0x10
c0015b20:	84 c0                	test   al,al
c0015b22:	74 b1                	je     c0015ad5 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015b24:	89 f8                	mov    eax,edi
c0015b26:	83 c4 10             	add    esp,0x10
c0015b29:	5b                   	pop    ebx
c0015b2a:	5e                   	pop    esi
c0015b2b:	5f                   	pop    edi
c0015b2c:	c3                   	ret    

c0015b2d <KeLoadDriver(char const*)>:
c0015b2d:	55                   	push   ebp
c0015b2e:	57                   	push   edi
c0015b2f:	56                   	push   esi
c0015b30:	53                   	push   ebx
c0015b31:	83 ec 34             	sub    esp,0x34
c0015b34:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c0015b38:	53                   	push   ebx
c0015b39:	68 18 51 02 c0       	push   0xc0025118
c0015b3e:	e8 23 14 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015b43:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015b4a:	e8 19 9b ff ff       	call   c000f668 <malloc>
c0015b4f:	83 c4 0c             	add    esp,0xc
c0015b52:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c0015b58:	53                   	push   ebx
c0015b59:	50                   	push   eax
c0015b5a:	89 c6                	mov    esi,eax
c0015b5c:	e8 27 26 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0015b61:	83 c4 10             	add    esp,0x10
c0015b64:	85 f6                	test   esi,esi
c0015b66:	0f 84 11 01 00 00    	je     c0015c7d <KeLoadDriver(char const*)+0x150>
c0015b6c:	50                   	push   eax
c0015b6d:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015b71:	50                   	push   eax
c0015b72:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015b76:	50                   	push   eax
c0015b77:	56                   	push   esi
c0015b78:	e8 2b 29 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0015b7d:	83 c4 10             	add    esp,0x10
c0015b80:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015b85:	0f 85 f2 00 00 00    	jne    c0015c7d <KeLoadDriver(char const*)+0x150>
c0015b8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015b8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b93:	89 d1                	mov    ecx,edx
c0015b95:	09 c1                	or     ecx,eax
c0015b97:	0f 84 e0 00 00 00    	je     c0015c7d <KeLoadDriver(char const*)+0x150>
c0015b9d:	05 ff 0f 00 00       	add    eax,0xfff
c0015ba2:	51                   	push   ecx
c0015ba3:	83 d2 00             	adc    edx,0x0
c0015ba6:	6a 03                	push   0x3
c0015ba8:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015bac:	50                   	push   eax
c0015bad:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0015bb3:	e8 2c dc ff ff       	call   c00137e4 <VAS::allocatePages(int, int)>
c0015bb8:	5f                   	pop    edi
c0015bb9:	5d                   	pop    ebp
c0015bba:	89 c3                	mov    ebx,eax
c0015bbc:	6a 01                	push   0x1
c0015bbe:	56                   	push   esi
c0015bbf:	e8 e2 25 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0015bc4:	83 c4 10             	add    esp,0x10
c0015bc7:	85 c0                	test   eax,eax
c0015bc9:	74 11                	je     c0015bdc <KeLoadDriver(char const*)+0xaf>
c0015bcb:	8b 06                	mov    eax,DWORD PTR [esi]
c0015bcd:	83 ec 0c             	sub    esp,0xc
c0015bd0:	56                   	push   esi
c0015bd1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bd4:	83 c4 10             	add    esp,0x10
c0015bd7:	e9 a1 00 00 00       	jmp    c0015c7d <KeLoadDriver(char const*)+0x150>
c0015bdc:	83 ec 0c             	sub    esp,0xc
c0015bdf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015be3:	e8 80 9a ff ff       	call   c000f668 <malloc>
c0015be8:	5d                   	pop    ebp
c0015be9:	31 ed                	xor    ebp,ebp
c0015beb:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015bef:	89 c7                	mov    edi,eax
c0015bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0015bf3:	52                   	push   edx
c0015bf4:	57                   	push   edi
c0015bf5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015bf9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015bfd:	56                   	push   esi
c0015bfe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c01:	83 c4 14             	add    esp,0x14
c0015c04:	56                   	push   esi
c0015c05:	e8 fa 25 ff ff       	call   c0008204 <File::close()>
c0015c0a:	83 c4 0c             	add    esp,0xc
c0015c0d:	53                   	push   ebx
c0015c0e:	6a 01                	push   0x1
c0015c10:	57                   	push   edi
c0015c11:	e8 a2 fe ff ff       	call   c0015ab8 <KeLoadELF(unsigned char*, bool, unsigned long)>
c0015c16:	83 c4 10             	add    esp,0x10
c0015c19:	89 c6                	mov    esi,eax
c0015c1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015c23:	05 ff 0f 00 00       	add    eax,0xfff
c0015c28:	83 d2 00             	adc    edx,0x0
c0015c2b:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015c2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c33:	c1 ea 0c             	shr    edx,0xc
c0015c36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015c3a:	ba 00 00 00 00       	mov    edx,0x0
c0015c3f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0015c43:	89 d0                	mov    eax,edx
c0015c45:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015c49:	73 34                	jae    c0015c7f <KeLoadDriver(char const*)+0x152>
c0015c4b:	50                   	push   eax
c0015c4c:	50                   	push   eax
c0015c4d:	89 e8                	mov    eax,ebp
c0015c4f:	c1 e0 0c             	shl    eax,0xc
c0015c52:	01 d8                	add    eax,ebx
c0015c54:	50                   	push   eax
c0015c55:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0015c5b:	e8 82 d6 ff ff       	call   c00132e2 <VAS::getPageTableEntry(unsigned long)>
c0015c60:	83 c4 10             	add    esp,0x10
c0015c63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c65:	a8 60                	test   al,0x60
c0015c67:	75 11                	jne    c0015c7a <KeLoadDriver(char const*)+0x14d>
c0015c69:	83 ec 0c             	sub    esp,0xc
c0015c6c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015c71:	50                   	push   eax
c0015c72:	e8 d6 9f ff ff       	call   c000fc4d <Phys::freePage(unsigned long)>
c0015c77:	83 c4 10             	add    esp,0x10
c0015c7a:	45                   	inc    ebp
c0015c7b:	eb 9e                	jmp    c0015c1b <KeLoadDriver(char const*)+0xee>
c0015c7d:	31 f6                	xor    esi,esi
c0015c7f:	83 c4 2c             	add    esp,0x2c
c0015c82:	89 f0                	mov    eax,esi
c0015c84:	5b                   	pop    ebx
c0015c85:	5e                   	pop    esi
c0015c86:	5f                   	pop    edi
c0015c87:	5d                   	pop    ebp
c0015c88:	c3                   	ret    

c0015c89 <KeExecuteDriver(unsigned long, void*)>:
c0015c89:	56                   	push   esi
c0015c8a:	53                   	push   ebx
c0015c8b:	51                   	push   ecx
c0015c8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c90:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015c94:	85 db                	test   ebx,ebx
c0015c96:	75 10                	jne    c0015ca8 <KeExecuteDriver(unsigned long, void*)+0x1f>
c0015c98:	83 ec 0c             	sub    esp,0xc
c0015c9b:	68 2e 51 02 c0       	push   0xc002512e
c0015ca0:	e8 17 9e ff ff       	call   c000fabc <KePanic(char const*)>
c0015ca5:	83 c4 10             	add    esp,0x10
c0015ca8:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0015cac:	89 d8                	mov    eax,ebx
c0015cae:	5a                   	pop    edx
c0015caf:	5b                   	pop    ebx
c0015cb0:	5e                   	pop    esi
c0015cb1:	ff e0                	jmp    eax

c0015cb3 <KeLoadAndExecuteDriver(char const*, void*, bool)>:
c0015cb3:	57                   	push   edi
c0015cb4:	56                   	push   esi
c0015cb5:	53                   	push   ebx
c0015cb6:	81 ec 0c 01 00 00    	sub    esp,0x10c
c0015cbc:	8b b4 24 1c 01 00 00 	mov    esi,DWORD PTR [esp+0x11c]
c0015cc3:	8b bc 24 24 01 00 00 	mov    edi,DWORD PTR [esp+0x124]
c0015cca:	56                   	push   esi
c0015ccb:	e8 5d fe ff ff       	call   c0015b2d <KeLoadDriver(char const*)>
c0015cd0:	83 c4 10             	add    esp,0x10
c0015cd3:	85 c0                	test   eax,eax
c0015cd5:	74 16                	je     c0015ced <KeLoadAndExecuteDriver(char const*, void*, bool)+0x3a>
c0015cd7:	53                   	push   ebx
c0015cd8:	53                   	push   ebx
c0015cd9:	b3 01                	mov    bl,0x1
c0015cdb:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0015ce2:	50                   	push   eax
c0015ce3:	e8 a1 ff ff ff       	call   c0015c89 <KeExecuteDriver(unsigned long, void*)>
c0015ce8:	83 c4 10             	add    esp,0x10
c0015ceb:	eb 2d                	jmp    c0015d1a <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0015ced:	89 fb                	mov    ebx,edi
c0015cef:	84 db                	test   bl,bl
c0015cf1:	74 27                	je     c0015d1a <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0015cf3:	50                   	push   eax
c0015cf4:	50                   	push   eax
c0015cf5:	68 58 51 02 c0       	push   0xc0025158
c0015cfa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015cfe:	53                   	push   ebx
c0015cff:	e8 4c a9 fe ff       	call   c0000650 <strcpy>
c0015d04:	5a                   	pop    edx
c0015d05:	59                   	pop    ecx
c0015d06:	56                   	push   esi
c0015d07:	53                   	push   ebx
c0015d08:	e8 63 ab fe ff       	call   c0000870 <strcat>
c0015d0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d10:	31 db                	xor    ebx,ebx
c0015d12:	e8 a5 9d ff ff       	call   c000fabc <KePanic(char const*)>
c0015d17:	83 c4 10             	add    esp,0x10
c0015d1a:	81 c4 00 01 00 00    	add    esp,0x100
c0015d20:	88 d8                	mov    al,bl
c0015d22:	5b                   	pop    ebx
c0015d23:	5e                   	pop    esi
c0015d24:	5f                   	pop    edi
c0015d25:	c3                   	ret    

c0015d26 <KeProcessExec(Process*, char const*)>:
c0015d26:	56                   	push   esi
c0015d27:	53                   	push   ebx
c0015d28:	83 ec 04             	sub    esp,0x4
c0015d2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d2f:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0015d35:	85 f6                	test   esi,esi
c0015d37:	74 16                	je     c0015d4f <KeProcessExec(Process*, char const*)+0x29>
c0015d39:	83 ec 0c             	sub    esp,0xc
c0015d3c:	56                   	push   esi
c0015d3d:	e8 32 d8 ff ff       	call   c0013574 <VAS::~VAS()>
c0015d42:	58                   	pop    eax
c0015d43:	5a                   	pop    edx
c0015d44:	6a 14                	push   0x14
c0015d46:	56                   	push   esi
c0015d47:	e8 24 75 ff ff       	call   c000d270 <operator delete(void*, unsigned long)>
c0015d4c:	83 c4 10             	add    esp,0x10
c0015d4f:	83 ec 0c             	sub    esp,0xc
c0015d52:	6a 14                	push   0x14
c0015d54:	e8 0f 99 ff ff       	call   c000f668 <malloc>
c0015d59:	89 c6                	mov    esi,eax
c0015d5b:	58                   	pop    eax
c0015d5c:	5a                   	pop    edx
c0015d5d:	6a 00                	push   0x0
c0015d5f:	56                   	push   esi
c0015d60:	e8 bb dc ff ff       	call   c0013a20 <VAS::VAS(bool)>
c0015d65:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0015d6b:	59                   	pop    ecx
c0015d6c:	5e                   	pop    esi
c0015d6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d71:	50                   	push   eax
c0015d72:	53                   	push   ebx
c0015d73:	e8 9c f4 ff ff       	call   c0015214 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015d78:	83 c4 14             	add    esp,0x14
c0015d7b:	31 c0                	xor    eax,eax
c0015d7d:	5b                   	pop    ebx
c0015d7e:	5e                   	pop    esi
c0015d7f:	c3                   	ret    

c0015d80 <userModeEntryPoint(void*)>:
c0015d80:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0015d88:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0015d8d:	85 c0                	test   eax,eax
c0015d8f:	75 03                	jne    c0015d94 <userModeEntryPoint(void*)+0x14>
c0015d91:	fb                   	sti    
c0015d92:	66 90                	xchg   ax,ax
c0015d94:	fb                   	sti    
c0015d95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d9a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d9d:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0015da3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015da7:	e9 93 a4 fe ff       	jmp    c000023f <goToUsermode>

c0015dac <changeTSS>:
c0015dac:	83 ec 14             	sub    esp,0x14
c0015daf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015db4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0015db7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015dbc:	c1 e2 15             	shl    edx,0x15
c0015dbf:	29 d0                	sub    eax,edx
c0015dc1:	50                   	push   eax
c0015dc2:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0015dc7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015dcd:	05 68 11 00 00       	add    eax,0x1168
c0015dd2:	50                   	push   eax
c0015dd3:	e8 ec ca ff ff       	call   c00128c4 <TSS::setESP(unsigned long)>
c0015dd8:	83 c4 1c             	add    esp,0x1c
c0015ddb:	c3                   	ret    

c0015ddc <switchToThread(ThreadControlBlock*)>:
c0015ddc:	57                   	push   edi
c0015ddd:	8b 0d 2c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d32c
c0015de3:	56                   	push   esi
c0015de4:	53                   	push   ebx
c0015de5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015de9:	85 c9                	test   ecx,ecx
c0015deb:	0f 85 9b 00 00 00    	jne    c0015e8c <switchToThread(ThreadControlBlock*)+0xb0>
c0015df1:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0015df5:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015dfb:	0f 84 87 00 00 00    	je     c0015e88 <switchToThread(ThreadControlBlock*)+0xac>
c0015e01:	b8 00 04 00 00       	mov    eax,0x400
c0015e06:	29 d0                	sub    eax,edx
c0015e08:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0015e0b:	d1 f8                	sar    eax,1
c0015e0d:	01 d0                	add    eax,edx
c0015e0f:	90                   	nop
c0015e10:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0015e13:	e8 74 4a 00 00       	call   c001a88c <HalQueryPerformanceCounter()>
c0015e18:	a3 70 d3 02 c0       	mov    ds:0xc002d370,eax
c0015e1d:	89 c6                	mov    esi,eax
c0015e1f:	89 d7                	mov    edi,edx
c0015e21:	2b 35 60 d3 02 c0    	sub    esi,DWORD PTR ds:0xc002d360
c0015e27:	a3 60 d3 02 c0       	mov    ds:0xc002d360,eax
c0015e2c:	1b 3d 64 d3 02 c0    	sbb    edi,DWORD PTR ds:0xc002d364
c0015e32:	89 35 68 d3 02 c0    	mov    DWORD PTR ds:0xc002d368,esi
c0015e38:	89 15 74 d3 02 c0    	mov    DWORD PTR ds:0xc002d374,edx
c0015e3e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e44:	89 15 64 d3 02 c0    	mov    DWORD PTR ds:0xc002d364,edx
c0015e4a:	89 3d 6c d3 02 c0    	mov    DWORD PTR ds:0xc002d36c,edi
c0015e50:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015e53:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015e56:	01 c6                	add    esi,eax
c0015e58:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015e5b:	11 d7                	adc    edi,edx
c0015e5d:	83 ec 0c             	sub    esp,0xc
c0015e60:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015e63:	53                   	push   ebx
c0015e64:	e8 0e a4 fe ff       	call   c0000277 <switchToThreadASM>
c0015e69:	0f 20 c0             	mov    eax,cr0
c0015e6c:	83 c8 08             	or     eax,0x8
c0015e6f:	0f 22 c0             	mov    cr0,eax
c0015e72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e77:	83 c4 10             	add    esp,0x10
c0015e7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e7e:	5b                   	pop    ebx
c0015e7f:	5e                   	pop    esi
c0015e80:	5f                   	pop    edi
c0015e81:	e9 12 f0 ff ff       	jmp    c0014e98 <KeCheckAlarm(ThreadControlBlock*)>
c0015e86:	66 90                	xchg   ax,ax
c0015e88:	31 c0                	xor    eax,eax
c0015e8a:	eb 84                	jmp    c0015e10 <switchToThread(ThreadControlBlock*)+0x34>
c0015e8c:	5b                   	pop    ebx
c0015e8d:	c7 05 28 d3 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x1
c0015e97:	5e                   	pop    esi
c0015e98:	5f                   	pop    edi
c0015e99:	c3                   	ret    
c0015e9a:	66 90                	xchg   ax,ax

c0015e9c <Process::addArgs(char**)>:
c0015e9c:	57                   	push   edi
c0015e9d:	56                   	push   esi
c0015e9e:	53                   	push   ebx
c0015e9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015ea3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015ea7:	85 f6                	test   esi,esi
c0015ea9:	c7 87 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x5b6],0x0
c0015eb3:	74 4f                	je     c0015f04 <Process::addArgs(char**)+0x68>
c0015eb5:	8b 06                	mov    eax,DWORD PTR [esi]
c0015eb7:	85 c0                	test   eax,eax
c0015eb9:	74 49                	je     c0015f04 <Process::addArgs(char**)+0x68>
c0015ebb:	31 db                	xor    ebx,ebx
c0015ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0015ec0:	83 ec 0c             	sub    esp,0xc
c0015ec3:	50                   	push   eax
c0015ec4:	e8 b7 a6 fe ff       	call   c0000580 <strlen>
c0015ec9:	83 c0 01             	add    eax,0x1
c0015ecc:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ecf:	e8 94 97 ff ff       	call   c000f668 <malloc>
c0015ed4:	89 84 9f ba 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x5ba],eax
c0015edb:	5a                   	pop    edx
c0015edc:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015edf:	83 c3 01             	add    ebx,0x1
c0015ee2:	59                   	pop    ecx
c0015ee3:	52                   	push   edx
c0015ee4:	50                   	push   eax
c0015ee5:	e8 66 a7 fe ff       	call   c0000650 <strcpy>
c0015eea:	8b 8f b6 05 00 00    	mov    ecx,DWORD PTR [edi+0x5b6]
c0015ef0:	83 c4 10             	add    esp,0x10
c0015ef3:	83 c1 01             	add    ecx,0x1
c0015ef6:	89 8f b6 05 00 00    	mov    DWORD PTR [edi+0x5b6],ecx
c0015efc:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015eff:	85 c0                	test   eax,eax
c0015f01:	75 bd                	jne    c0015ec0 <Process::addArgs(char**)+0x24>
c0015f03:	90                   	nop
c0015f04:	5b                   	pop    ebx
c0015f05:	5e                   	pop    esi
c0015f06:	5f                   	pop    edi
c0015f07:	c3                   	ret    

c0015f08 <Process::Process(char const*, Process*, char**)>:
c0015f08:	56                   	push   esi
c0015f09:	53                   	push   ebx
c0015f0a:	83 ec 14             	sub    esp,0x14
c0015f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f11:	05 0c 02 00 00       	add    eax,0x20c
c0015f16:	bb 07 00 00 00       	mov    ebx,0x7
c0015f1b:	89 c6                	mov    esi,eax
c0015f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0015f20:	85 db                	test   ebx,ebx
c0015f22:	78 14                	js     c0015f38 <Process::Process(char const*, Process*, char**)+0x30>
c0015f24:	83 ec 0c             	sub    esp,0xc
c0015f27:	56                   	push   esi
c0015f28:	e8 d3 c7 00 00       	call   c0022700 <ThreadControlBlock::ThreadControlBlock()>
c0015f2d:	83 c4 10             	add    esp,0x10
c0015f30:	83 c6 73             	add    esi,0x73
c0015f33:	83 eb 01             	sub    ebx,0x1
c0015f36:	eb e8                	jmp    c0015f20 <Process::Process(char const*, Process*, char**)+0x18>
c0015f38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f3c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0015f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f47:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0015f4e:	83 ec 0c             	sub    esp,0xc
c0015f51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f55:	e8 3c 85 ff ff       	call   c000e496 <KeNewProcessEnv(Process*)>
c0015f5a:	83 c4 10             	add    esp,0x10
c0015f5d:	89 c2                	mov    edx,eax
c0015f5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f63:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0015f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f6d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0015f76:	a1 bc 6d 02 c0       	mov    eax,ds:0xc0026dbc
c0015f7b:	8d 50 01             	lea    edx,[eax+0x1]
c0015f7e:	89 15 bc 6d 02 c0    	mov    DWORD PTR ds:0xc0026dbc,edx
c0015f84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f88:	89 02                	mov    DWORD PTR [edx],eax
c0015f8a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015f92:	83 ec 0c             	sub    esp,0xc
c0015f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015f99:	e8 ca 96 ff ff       	call   c000f668 <malloc>
c0015f9e:	83 c4 10             	add    esp,0x10
c0015fa1:	89 c3                	mov    ebx,eax
c0015fa3:	83 ec 08             	sub    esp,0x8
c0015fa6:	6a 00                	push   0x0
c0015fa8:	53                   	push   ebx
c0015fa9:	e8 72 da ff ff       	call   c0013a20 <VAS::VAS(bool)>
c0015fae:	83 c4 10             	add    esp,0x10
c0015fb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fb5:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0015fbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fbf:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0015fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015fd1:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0015fd7:	e8 47 ac ff ff       	call   c0010c23 <KeInitSignals()>
c0015fdc:	89 c2                	mov    edx,eax
c0015fde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fe2:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0015fe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fec:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0015ff2:	85 c0                	test   eax,eax
c0015ff4:	74 42                	je     c0016038 <Process::Process(char const*, Process*, char**)+0x130>
c0015ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ffa:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016000:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001600a:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016014:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001601a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016024:	05 0c 01 00 00       	add    eax,0x10c
c0016029:	83 ec 08             	sub    esp,0x8
c001602c:	52                   	push   edx
c001602d:	50                   	push   eax
c001602e:	e8 1d a6 fe ff       	call   c0000650 <strcpy>
c0016033:	83 c4 10             	add    esp,0x10
c0016036:	eb 7c                	jmp    c00160b4 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016038:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016040:	83 ec 0c             	sub    esp,0xc
c0016043:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016047:	e8 1c 96 ff ff       	call   c000f668 <malloc>
c001604c:	83 c4 10             	add    esp,0x10
c001604f:	89 c3                	mov    ebx,eax
c0016051:	83 ec 08             	sub    esp,0x8
c0016054:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016058:	53                   	push   ebx
c0016059:	e8 86 c5 ff ff       	call   c00125e4 <VgaText::VgaText(char const*)>
c001605e:	83 c4 10             	add    esp,0x10
c0016061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016065:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c001606b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001606f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016075:	83 ec 0c             	sub    esp,0xc
c0016078:	50                   	push   eax
c0016079:	e8 cc bd ff ff       	call   c0011e4a <addToTerminalCycle(VgaText*)>
c001607e:	83 c4 10             	add    esp,0x10
c0016081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016085:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001608b:	83 ec 0c             	sub    esp,0xc
c001608e:	50                   	push   eax
c001608f:	e8 27 c0 ff ff       	call   c00120bb <setActiveTerminal(VgaText*)>
c0016094:	83 c4 10             	add    esp,0x10
c0016097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001609b:	05 0c 01 00 00       	add    eax,0x10c
c00160a0:	83 ec 08             	sub    esp,0x8
c00160a3:	68 6c 51 02 c0       	push   0xc002516c
c00160a8:	50                   	push   eax
c00160a9:	e8 a2 a5 fe ff       	call   c0000650 <strcpy>
c00160ae:	83 c4 10             	add    esp,0x10
c00160b1:	8d 76 00             	lea    esi,[esi+0x0]
c00160b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b8:	83 c0 0c             	add    eax,0xc
c00160bb:	83 ec 08             	sub    esp,0x8
c00160be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160c2:	50                   	push   eax
c00160c3:	e8 88 a5 fe ff       	call   c0000650 <strcpy>
c00160c8:	83 c4 10             	add    esp,0x10
c00160cb:	83 ec 08             	sub    esp,0x8
c00160ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00160d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160d6:	e8 c1 fd ff ff       	call   c0015e9c <Process::addArgs(char**)>
c00160db:	83 c4 10             	add    esp,0x10
c00160de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160e2:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c00160e8:	83 e2 7f             	and    edx,0x7f
c00160eb:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c00160f1:	83 ec 08             	sub    esp,0x8
c00160f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160fc:	e8 13 f1 ff ff       	call   c0015214 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016101:	83 c4 10             	add    esp,0x10
c0016104:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016108:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001610c:	83 f0 01             	xor    eax,0x1
c001610f:	88 c2                	mov    dl,al
c0016111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016115:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c001611b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001611f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016121:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016126:	52                   	push   edx
c0016127:	50                   	push   eax
c0016128:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001612c:	68 d8 51 02 c0       	push   0xc00251d8
c0016131:	e8 30 0e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016136:	83 c4 10             	add    esp,0x10
c0016139:	90                   	nop
c001613a:	83 c4 14             	add    esp,0x14
c001613d:	5b                   	pop    ebx
c001613e:	5e                   	pop    esi
c001613f:	c3                   	ret    

c0016140 <Process::Process(bool, char const*, Process*, char**)>:
c0016140:	56                   	push   esi
c0016141:	53                   	push   ebx
c0016142:	83 ec 24             	sub    esp,0x24
c0016145:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016149:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001614d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016151:	05 0c 02 00 00       	add    eax,0x20c
c0016156:	bb 07 00 00 00       	mov    ebx,0x7
c001615b:	89 c6                	mov    esi,eax
c001615d:	8d 76 00             	lea    esi,[esi+0x0]
c0016160:	85 db                	test   ebx,ebx
c0016162:	78 14                	js     c0016178 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016164:	83 ec 0c             	sub    esp,0xc
c0016167:	56                   	push   esi
c0016168:	e8 93 c5 00 00       	call   c0022700 <ThreadControlBlock::ThreadControlBlock()>
c001616d:	83 c4 10             	add    esp,0x10
c0016170:	83 c6 73             	add    esi,0x73
c0016173:	83 eb 01             	sub    ebx,0x1
c0016176:	eb e8                	jmp    c0016160 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016178:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001617c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016183:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016187:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001618e:	83 ec 0c             	sub    esp,0xc
c0016191:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016195:	e8 fc 82 ff ff       	call   c000e496 <KeNewProcessEnv(Process*)>
c001619a:	83 c4 10             	add    esp,0x10
c001619d:	89 c2                	mov    edx,eax
c001619f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161a3:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c00161a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161ad:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c00161b6:	a1 bc 6d 02 c0       	mov    eax,ds:0xc0026dbc
c00161bb:	8d 50 01             	lea    edx,[eax+0x1]
c00161be:	89 15 bc 6d 02 c0    	mov    DWORD PTR ds:0xc0026dbc,edx
c00161c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00161c8:	89 02                	mov    DWORD PTR [edx],eax
c00161ca:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00161d2:	83 ec 0c             	sub    esp,0xc
c00161d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00161d9:	e8 8a 94 ff ff       	call   c000f668 <malloc>
c00161de:	83 c4 10             	add    esp,0x10
c00161e1:	89 c3                	mov    ebx,eax
c00161e3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00161e8:	83 ec 08             	sub    esp,0x8
c00161eb:	50                   	push   eax
c00161ec:	53                   	push   ebx
c00161ed:	e8 2e d8 ff ff       	call   c0013a20 <VAS::VAS(bool)>
c00161f2:	83 c4 10             	add    esp,0x10
c00161f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161f9:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00161ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016203:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c001620d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016211:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016215:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c001621b:	e8 03 aa ff ff       	call   c0010c23 <KeInitSignals()>
c0016220:	89 c2                	mov    edx,eax
c0016222:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016226:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c001622c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016230:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016236:	85 c0                	test   eax,eax
c0016238:	74 42                	je     c001627c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001623a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001623e:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016244:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c001624a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001624e:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016254:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016258:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001625e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016264:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016268:	05 0c 01 00 00       	add    eax,0x10c
c001626d:	83 ec 08             	sub    esp,0x8
c0016270:	52                   	push   edx
c0016271:	50                   	push   eax
c0016272:	e8 d9 a3 fe ff       	call   c0000650 <strcpy>
c0016277:	83 c4 10             	add    esp,0x10
c001627a:	eb 7c                	jmp    c00162f8 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c001627c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016284:	83 ec 0c             	sub    esp,0xc
c0016287:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001628b:	e8 d8 93 ff ff       	call   c000f668 <malloc>
c0016290:	83 c4 10             	add    esp,0x10
c0016293:	89 c3                	mov    ebx,eax
c0016295:	83 ec 08             	sub    esp,0x8
c0016298:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001629c:	53                   	push   ebx
c001629d:	e8 42 c3 ff ff       	call   c00125e4 <VgaText::VgaText(char const*)>
c00162a2:	83 c4 10             	add    esp,0x10
c00162a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162a9:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c00162af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162b3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00162b9:	83 ec 0c             	sub    esp,0xc
c00162bc:	50                   	push   eax
c00162bd:	e8 88 bb ff ff       	call   c0011e4a <addToTerminalCycle(VgaText*)>
c00162c2:	83 c4 10             	add    esp,0x10
c00162c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162c9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00162cf:	83 ec 0c             	sub    esp,0xc
c00162d2:	50                   	push   eax
c00162d3:	e8 e3 bd ff ff       	call   c00120bb <setActiveTerminal(VgaText*)>
c00162d8:	83 c4 10             	add    esp,0x10
c00162db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162df:	05 0c 01 00 00       	add    eax,0x10c
c00162e4:	83 ec 08             	sub    esp,0x8
c00162e7:	68 6c 51 02 c0       	push   0xc002516c
c00162ec:	50                   	push   eax
c00162ed:	e8 5e a3 fe ff       	call   c0000650 <strcpy>
c00162f2:	83 c4 10             	add    esp,0x10
c00162f5:	8d 76 00             	lea    esi,[esi+0x0]
c00162f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162fc:	83 c0 0c             	add    eax,0xc
c00162ff:	83 ec 08             	sub    esp,0x8
c0016302:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016306:	50                   	push   eax
c0016307:	e8 44 a3 fe ff       	call   c0000650 <strcpy>
c001630c:	83 c4 10             	add    esp,0x10
c001630f:	83 ec 08             	sub    esp,0x8
c0016312:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016316:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001631a:	e8 7d fb ff ff       	call   c0015e9c <Process::addArgs(char**)>
c001631f:	83 c4 10             	add    esp,0x10
c0016322:	90                   	nop
c0016323:	83 c4 24             	add    esp,0x24
c0016326:	5b                   	pop    ebx
c0016327:	5e                   	pop    esi
c0016328:	c3                   	ret    
c0016329:	8d 76 00             	lea    esi,[esi+0x0]

c001632c <taskStartupFunction>:
c001632c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016331:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016334:	c3                   	ret    
c0016335:	8d 76 00             	lea    esi,[esi+0x0]

c0016338 <KeDisablePreemption()>:
c0016338:	a1 0c d3 02 c0       	mov    eax,ds:0xc002d30c
c001633d:	85 c0                	test   eax,eax
c001633f:	75 13                	jne    c0016354 <KeDisablePreemption()+0x1c>
c0016341:	8a 15 0c d1 02 c0    	mov    dl,BYTE PTR ds:0xc002d10c
c0016347:	c6 05 0c d1 02 c0 00 	mov    BYTE PTR ds:0xc002d10c,0x0
c001634e:	88 15 08 d3 02 c0    	mov    BYTE PTR ds:0xc002d308,dl
c0016354:	83 c0 01             	add    eax,0x1
c0016357:	a3 0c d3 02 c0       	mov    ds:0xc002d30c,eax
c001635c:	c3                   	ret    
c001635d:	8d 76 00             	lea    esi,[esi+0x0]

c0016360 <KeRestorePreemption()>:
c0016360:	a1 0c d3 02 c0       	mov    eax,ds:0xc002d30c
c0016365:	83 e8 01             	sub    eax,0x1
c0016368:	a3 0c d3 02 c0       	mov    ds:0xc002d30c,eax
c001636d:	75 0d                	jne    c001637c <KeRestorePreemption()+0x1c>
c001636f:	a0 08 d3 02 c0       	mov    al,ds:0xc002d308
c0016374:	a2 0c d1 02 c0       	mov    ds:0xc002d10c,al
c0016379:	8d 76 00             	lea    esi,[esi+0x0]
c001637c:	c3                   	ret    
c001637d:	90                   	nop
c001637e:	66 90                	xchg   ax,ax

c0016380 <Process::createThread(void (*)(void*), void*, int)>:
c0016380:	55                   	push   ebp
c0016381:	31 c9                	xor    ecx,ecx
c0016383:	57                   	push   edi
c0016384:	56                   	push   esi
c0016385:	53                   	push   ebx
c0016386:	83 ec 0c             	sub    esp,0xc
c0016389:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001638d:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016394:	89 f2                	mov    edx,esi
c0016396:	66 90                	xchg   ax,ax
c0016398:	0f b7 c2             	movzx  eax,dx
c001639b:	80 e2 01             	and    dl,0x1
c001639e:	74 18                	je     c00163b8 <Process::createThread(void (*)(void*), void*, int)+0x38>
c00163a0:	d1 f8                	sar    eax,1
c00163a2:	83 c1 01             	add    ecx,0x1
c00163a5:	83 f9 10             	cmp    ecx,0x10
c00163a8:	89 c2                	mov    edx,eax
c00163aa:	75 ec                	jne    c0016398 <Process::createThread(void (*)(void*), void*, int)+0x18>
c00163ac:	83 c4 0c             	add    esp,0xc
c00163af:	31 db                	xor    ebx,ebx
c00163b1:	89 d8                	mov    eax,ebx
c00163b3:	5b                   	pop    ebx
c00163b4:	5e                   	pop    esi
c00163b5:	5f                   	pop    edi
c00163b6:	5d                   	pop    ebp
c00163b7:	c3                   	ret    
c00163b8:	b8 01 00 00 00       	mov    eax,0x1
c00163bd:	d3 e0                	shl    eax,cl
c00163bf:	09 c6                	or     esi,eax
c00163c1:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c00163c8:	6b c1 73             	imul   eax,ecx,0x73
c00163cb:	01 d8                	add    eax,ebx
c00163cd:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c00163d4:	75 0a                	jne    c00163e0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00163d6:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c00163e0:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c00163e6:	6b f9 73             	imul   edi,ecx,0x73
c00163e9:	83 ec 0c             	sub    esp,0xc
c00163ec:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00163ef:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00163f2:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c00163f8:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00163fe:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016404:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001640b:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016415:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001641b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001641f:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016429:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016430:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016437:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001643d:	89 ca                	mov    edx,ecx
c001643f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016443:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c001644a:	f7 da                	neg    edx
c001644c:	c1 e2 15             	shl    edx,0x15
c001644f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016455:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001645b:	8a 54 24 38          	mov    dl,BYTE PTR [esp+0x38]
c001645f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016469:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001646f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016479:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001647f:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016485:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001648f:	83 e2 80             	and    edx,0xffffff80
c0016492:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016498:	68 00 01 00 00       	push   0x100
c001649d:	e8 c6 91 ff ff       	call   c000f668 <malloc>
c00164a2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00164a5:	58                   	pop    eax
c00164a6:	5a                   	pop    edx
c00164a7:	53                   	push   ebx
c00164a8:	68 70 51 02 c0       	push   0xc0025170
c00164ad:	e8 b4 0a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00164b2:	59                   	pop    ecx
c00164b3:	5e                   	pop    esi
c00164b4:	53                   	push   ebx
c00164b5:	68 4c d3 02 c0       	push   0xc002d34c
c00164ba:	e8 ed bd 00 00       	call   c00222ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164bf:	83 c4 10             	add    esp,0x10
c00164c2:	89 d8                	mov    eax,ebx
c00164c4:	83 c4 0c             	add    esp,0xc
c00164c7:	5b                   	pop    ebx
c00164c8:	5e                   	pop    esi
c00164c9:	5f                   	pop    edi
c00164ca:	5d                   	pop    ebp
c00164cb:	c3                   	ret    

c00164cc <Process::createUserThread()>:
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	68 80 00 00 00       	push   0x80
c00164d4:	6a 00                	push   0x0
c00164d6:	68 80 5d 01 c0       	push   0xc0015d80
c00164db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164df:	50                   	push   eax
c00164e0:	e8 9b fe ff ff       	call   c0016380 <Process::createThread(void (*)(void*), void*, int)>
c00164e5:	83 c4 1c             	add    esp,0x1c
c00164e8:	c3                   	ret    
c00164e9:	8d 76 00             	lea    esi,[esi+0x0]

c00164ec <setupMultitasking(void (*)())>:
c00164ec:	56                   	push   esi
c00164ed:	53                   	push   ebx
c00164ee:	83 ec 04             	sub    esp,0x4
c00164f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164f5:	eb 11                	jmp    c0016508 <setupMultitasking(void (*)())+0x1c>
c00164f7:	90                   	nop
c00164f8:	83 ec 0c             	sub    esp,0xc
c00164fb:	68 4c d3 02 c0       	push   0xc002d34c
c0016500:	e8 eb bc 00 00       	call   c00221f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016505:	83 c4 10             	add    esp,0x10
c0016508:	83 ec 0c             	sub    esp,0xc
c001650b:	68 4c d3 02 c0       	push   0xc002d34c
c0016510:	e8 b7 bc 00 00       	call   c00221cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016515:	83 c4 10             	add    esp,0x10
c0016518:	84 c0                	test   al,al
c001651a:	74 dc                	je     c00164f8 <setupMultitasking(void (*)())+0xc>
c001651c:	83 ec 0c             	sub    esp,0xc
c001651f:	68 c4 07 00 00       	push   0x7c4
c0016524:	e8 3f 91 ff ff       	call   c000f668 <malloc>
c0016529:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016530:	6a 00                	push   0x0
c0016532:	68 84 51 02 c0       	push   0xc0025184
c0016537:	6a 01                	push   0x1
c0016539:	50                   	push   eax
c001653a:	89 c3                	mov    ebx,eax
c001653c:	e8 ff fb ff ff       	call   c0016140 <Process::Process(bool, char const*, Process*, char**)>
c0016541:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016547:	83 c4 14             	add    esp,0x14
c001654a:	89 1d 58 d3 02 c0    	mov    DWORD PTR ds:0xc002d358,ebx
c0016550:	50                   	push   eax
c0016551:	e8 65 bb ff ff       	call   c00120bb <setActiveTerminal(VgaText*)>
c0016556:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c001655d:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016567:	83 c8 01             	or     eax,0x1
c001656a:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016571:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016577:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001657a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016584:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001658a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016594:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001659a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00165a4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00165ae:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00165b4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00165ba:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00165c4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00165ce:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00165d5:	e8 8e 90 ff ff       	call   c000f668 <malloc>
c00165da:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c00165e4:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c00165eb:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c00165f2:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c00165f9:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0016600:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016606:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001660c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016612:	5a                   	pop    edx
c0016613:	59                   	pop    ecx
c0016614:	68 6c 51 02 c0       	push   0xc002516c
c0016619:	50                   	push   eax
c001661a:	e8 31 a0 fe ff       	call   c0000650 <strcpy>
c001661f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016626:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001662a:	83 c4 14             	add    esp,0x14
c001662d:	5b                   	pop    ebx
c001662e:	5e                   	pop    esi
c001662f:	e9 35 9c fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0016634 <schedule()>:
c0016634:	8b 15 2c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d32c
c001663a:	85 d2                	test   edx,edx
c001663c:	74 0e                	je     c001664c <schedule()+0x18>
c001663e:	c7 05 28 d3 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x1
c0016648:	c3                   	ret    
c0016649:	8d 76 00             	lea    esi,[esi+0x0]
c001664c:	53                   	push   ebx
c001664d:	83 ec 14             	sub    esp,0x14
c0016650:	68 4c d3 02 c0       	push   0xc002d34c
c0016655:	e8 72 bb 00 00       	call   c00221cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001665a:	83 c4 10             	add    esp,0x10
c001665d:	84 c0                	test   al,al
c001665f:	75 3f                	jne    c00166a0 <schedule()+0x6c>
c0016661:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016666:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016669:	83 fa 01             	cmp    edx,0x1
c001666c:	74 3a                	je     c00166a8 <schedule()+0x74>
c001666e:	66 90                	xchg   ax,ax
c0016670:	83 ec 0c             	sub    esp,0xc
c0016673:	68 4c d3 02 c0       	push   0xc002d34c
c0016678:	e8 6b bb 00 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001667d:	c7 04 24 4c d3 02 c0 	mov    DWORD PTR [esp],0xc002d34c
c0016684:	89 c3                	mov    ebx,eax
c0016686:	e8 65 bb 00 00       	call   c00221f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001668b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016692:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016695:	e8 42 f7 ff ff       	call   c0015ddc <switchToThread(ThreadControlBlock*)>
c001669a:	83 c4 10             	add    esp,0x10
c001669d:	8d 76 00             	lea    esi,[esi+0x0]
c00166a0:	83 c4 08             	add    esp,0x8
c00166a3:	5b                   	pop    ebx
c00166a4:	c3                   	ret    
c00166a5:	8d 76 00             	lea    esi,[esi+0x0]
c00166a8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00166af:	83 ec 08             	sub    esp,0x8
c00166b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166b7:	50                   	push   eax
c00166b8:	68 4c d3 02 c0       	push   0xc002d34c
c00166bd:	e8 ea bb 00 00       	call   c00222ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166c2:	83 c4 10             	add    esp,0x10
c00166c5:	eb a9                	jmp    c0016670 <schedule()+0x3c>
c00166c7:	90                   	nop

c00166c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00166c8:	83 ec 0c             	sub    esp,0xc
c00166cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00166d4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00166d7:	e8 58 ff ff ff       	call   c0016634 <schedule()>
c00166dc:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c00166e4:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00166e9:	85 c0                	test   eax,eax
c00166eb:	75 03                	jne    c00166f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00166ed:	fb                   	sti    
c00166ee:	66 90                	xchg   ax,ax
c00166f0:	83 c4 0c             	add    esp,0xc
c00166f3:	c3                   	ret    

c00166f4 <blockTask(TaskState)>:
c00166f4:	83 ec 0c             	sub    esp,0xc
c00166f7:	fa                   	cli    
c00166f8:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00166fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016701:	83 c0 01             	add    eax,0x1
c0016704:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0016709:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001670e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016711:	e8 1e ff ff ff       	call   c0016634 <schedule()>
c0016716:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001671e:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c0016724:	85 d2                	test   edx,edx
c0016726:	75 04                	jne    c001672c <blockTask(TaskState)+0x38>
c0016728:	fb                   	sti    
c0016729:	8d 76 00             	lea    esi,[esi+0x0]
c001672c:	83 c4 0c             	add    esp,0xc
c001672f:	c3                   	ret    

c0016730 <waitTask(int, int*, int)>:
c0016730:	83 ec 18             	sub    esp,0x18
c0016733:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016738:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001673c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001673f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016743:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016748:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001674b:	6a 07                	push   0x7
c001674d:	e8 a2 ff ff ff       	call   c00166f4 <blockTask(TaskState)>
c0016752:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016757:	83 c4 10             	add    esp,0x10
c001675a:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001675d:	85 d2                	test   edx,edx
c001675f:	74 0b                	je     c001676c <waitTask(int, int*, int)+0x3c>
c0016761:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0016764:	89 02                	mov    DWORD PTR [edx],eax
c0016766:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001676b:	90                   	nop
c001676c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001676f:	83 c4 0c             	add    esp,0xc
c0016772:	c3                   	ret    
c0016773:	90                   	nop

c0016774 <milliTenthSleepUntil(unsigned long long)>:
c0016774:	83 ec 0c             	sub    esp,0xc
c0016777:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001677b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001677f:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c0016785:	89 d1                	mov    ecx,edx
c0016787:	1b 0d 54 cb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cb54
c001678d:	73 05                	jae    c0016794 <milliTenthSleepUntil(unsigned long long)+0x20>
c001678f:	90                   	nop
c0016790:	83 c4 0c             	add    esp,0xc
c0016793:	c3                   	ret    
c0016794:	fa                   	cli    
c0016795:	8b 0d 30 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d330
c001679b:	83 ec 08             	sub    esp,0x8
c001679e:	83 c1 01             	add    ecx,0x1
c00167a1:	89 0d 30 d3 02 c0    	mov    DWORD PTR ds:0xc002d330,ecx
c00167a7:	8b 0d 2c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d32c
c00167ad:	83 c1 01             	add    ecx,0x1
c00167b0:	89 0d 2c d3 02 c0    	mov    DWORD PTR ds:0xc002d32c,ecx
c00167b6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00167bc:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00167bf:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00167c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167c7:	50                   	push   eax
c00167c8:	68 40 d3 02 c0       	push   0xc002d340
c00167cd:	e8 da ba 00 00       	call   c00222ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00167d2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00167d9:	e8 16 ff ff ff       	call   c00166f4 <blockTask(TaskState)>
c00167de:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c00167e3:	83 c4 10             	add    esp,0x10
c00167e6:	83 e8 01             	sub    eax,0x1
c00167e9:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c00167ee:	85 c0                	test   eax,eax
c00167f0:	75 0a                	jne    c00167fc <milliTenthSleepUntil(unsigned long long)+0x88>
c00167f2:	8b 15 28 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d328
c00167f8:	85 d2                	test   edx,edx
c00167fa:	75 18                	jne    c0016814 <milliTenthSleepUntil(unsigned long long)+0xa0>
c00167fc:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016804:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016809:	85 c0                	test   eax,eax
c001680b:	75 83                	jne    c0016790 <milliTenthSleepUntil(unsigned long long)+0x1c>
c001680d:	fb                   	sti    
c001680e:	83 c4 0c             	add    esp,0xc
c0016811:	c3                   	ret    
c0016812:	66 90                	xchg   ax,ax
c0016814:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c001681e:	e8 11 fe ff ff       	call   c0016634 <schedule()>
c0016823:	eb d7                	jmp    c00167fc <milliTenthSleepUntil(unsigned long long)+0x88>
c0016825:	8d 76 00             	lea    esi,[esi+0x0]

c0016828 <milliTenthSleep(unsigned long long)>:
c0016828:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c001682d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0016831:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0016837:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001683b:	e9 34 ff ff ff       	jmp    c0016774 <milliTenthSleepUntil(unsigned long long)>

c0016840 <sleep(unsigned long long)>:
c0016840:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0016848:	b8 10 27 00 00       	mov    eax,0x2710
c001684d:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0016851:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016855:	01 ca                	add    edx,ecx
c0016857:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001685b:	eb cb                	jmp    c0016828 <milliTenthSleep(unsigned long long)>
c001685d:	8d 76 00             	lea    esi,[esi+0x0]

c0016860 <sleep(unsigned int)>:
c0016860:	83 ec 14             	sub    esp,0x14
c0016863:	b8 10 27 00 00       	mov    eax,0x2710
c0016868:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c001686c:	52                   	push   edx
c001686d:	50                   	push   eax
c001686e:	e8 b5 ff ff ff       	call   c0016828 <milliTenthSleep(unsigned long long)>
c0016873:	83 c4 1c             	add    esp,0x1c
c0016876:	c3                   	ret    
c0016877:	90                   	nop

c0016878 <milliTenthSleep(unsigned int)>:
c0016878:	83 ec 14             	sub    esp,0x14
c001687b:	31 d2                	xor    edx,edx
c001687d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016881:	03 05 50 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb50
c0016887:	13 15 54 cb 02 c0    	adc    edx,DWORD PTR ds:0xc002cb54
c001688d:	52                   	push   edx
c001688e:	50                   	push   eax
c001688f:	e8 e0 fe ff ff       	call   c0016774 <milliTenthSleepUntil(unsigned long long)>
c0016894:	83 c4 1c             	add    esp,0x1c
c0016897:	c3                   	ret    

c0016898 <taskReturned>:
c0016898:	83 ec 18             	sub    esp,0x18
c001689b:	68 0c 52 02 c0       	push   0xc002520c
c00168a0:	e8 17 92 ff ff       	call   c000fabc <KePanic(char const*)>
c00168a5:	83 c4 10             	add    esp,0x10
c00168a8:	83 ec 0c             	sub    esp,0xc
c00168ab:	6a 02                	push   0x2
c00168ad:	e8 42 fe ff ff       	call   c00166f4 <blockTask(TaskState)>
c00168b2:	fa                   	cli    
c00168b3:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00168b8:	83 c0 01             	add    eax,0x1
c00168bb:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c00168c0:	e8 6f fd ff ff       	call   c0016634 <schedule()>
c00168c5:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c00168cd:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c00168d3:	83 c4 10             	add    esp,0x10
c00168d6:	85 d2                	test   edx,edx
c00168d8:	75 ce                	jne    c00168a8 <taskReturned+0x10>
c00168da:	fb                   	sti    
c00168db:	eb cb                	jmp    c00168a8 <taskReturned+0x10>
c00168dd:	8d 76 00             	lea    esi,[esi+0x0]

c00168e0 <KeProcessFromPID(int)>:
c00168e0:	57                   	push   edi
c00168e1:	56                   	push   esi
c00168e2:	53                   	push   ebx
c00168e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168e7:	fa                   	cli    
c00168e8:	8b 0d 30 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d330
c00168ee:	83 ec 0c             	sub    esp,0xc
c00168f1:	68 4c d3 02 c0       	push   0xc002d34c
c00168f6:	83 c1 01             	add    ecx,0x1
c00168f9:	89 0d 30 d3 02 c0    	mov    DWORD PTR ds:0xc002d330,ecx
c00168ff:	e8 e4 b8 00 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016904:	83 c4 10             	add    esp,0x10
c0016907:	89 c7                	mov    edi,eax
c0016909:	eb 15                	jmp    c0016920 <KeProcessFromPID(int)+0x40>
c001690b:	90                   	nop
c001690c:	83 ec 0c             	sub    esp,0xc
c001690f:	68 4c d3 02 c0       	push   0xc002d34c
c0016914:	e8 cf b8 00 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016919:	83 c4 10             	add    esp,0x10
c001691c:	39 f8                	cmp    eax,edi
c001691e:	74 50                	je     c0016970 <KeProcessFromPID(int)+0x90>
c0016920:	83 ec 0c             	sub    esp,0xc
c0016923:	68 4c d3 02 c0       	push   0xc002d34c
c0016928:	e8 bb b8 00 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001692d:	c7 04 24 4c d3 02 c0 	mov    DWORD PTR [esp],0xc002d34c
c0016934:	89 c3                	mov    ebx,eax
c0016936:	e8 b5 b8 00 00       	call   c00221f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001693b:	58                   	pop    eax
c001693c:	5a                   	pop    edx
c001693d:	53                   	push   ebx
c001693e:	68 4c d3 02 c0       	push   0xc002d34c
c0016943:	e8 64 b9 00 00       	call   c00222ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016948:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	39 30                	cmp    DWORD PTR [eax],esi
c0016950:	75 ba                	jne    c001690c <KeProcessFromPID(int)+0x2c>
c0016952:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001695a:	8b 0d 30 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d330
c0016960:	85 c9                	test   ecx,ecx
c0016962:	74 08                	je     c001696c <KeProcessFromPID(int)+0x8c>
c0016964:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016967:	90                   	nop
c0016968:	5b                   	pop    ebx
c0016969:	5e                   	pop    esi
c001696a:	5f                   	pop    edi
c001696b:	c3                   	ret    
c001696c:	fb                   	sti    
c001696d:	eb f5                	jmp    c0016964 <KeProcessFromPID(int)+0x84>
c001696f:	90                   	nop
c0016970:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016978:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c001697e:	31 c0                	xor    eax,eax
c0016980:	85 d2                	test   edx,edx
c0016982:	75 e4                	jne    c0016968 <KeProcessFromPID(int)+0x88>
c0016984:	fb                   	sti    
c0016985:	5b                   	pop    ebx
c0016986:	5e                   	pop    esi
c0016987:	5f                   	pop    edi
c0016988:	c3                   	ret    
c0016989:	8d 76 00             	lea    esi,[esi+0x0]

c001698c <unblockTask(ThreadControlBlock*)>:
c001698c:	53                   	push   ebx
c001698d:	83 ec 08             	sub    esp,0x8
c0016990:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016994:	fa                   	cli    
c0016995:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c001699b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001699e:	83 c2 01             	add    edx,0x1
c00169a1:	89 15 30 d3 02 c0    	mov    DWORD PTR ds:0xc002d330,edx
c00169a7:	85 c0                	test   eax,eax
c00169a9:	74 6d                	je     c0016a18 <unblockTask(ThreadControlBlock*)+0x8c>
c00169ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00169ae:	83 f8 01             	cmp    eax,0x1
c00169b1:	74 39                	je     c00169ec <unblockTask(ThreadControlBlock*)+0x60>
c00169b3:	83 ec 0c             	sub    esp,0xc
c00169b6:	68 4c d3 02 c0       	push   0xc002d34c
c00169bb:	e8 28 b8 00 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169c0:	83 c4 10             	add    esp,0x10
c00169c3:	85 c0                	test   eax,eax
c00169c5:	75 1d                	jne    c00169e4 <unblockTask(ThreadControlBlock*)+0x58>
c00169c7:	eb 63                	jmp    c0016a2c <unblockTask(ThreadControlBlock*)+0xa0>
c00169c9:	8d 76 00             	lea    esi,[esi+0x0]
c00169cc:	83 ec 08             	sub    esp,0x8
c00169cf:	50                   	push   eax
c00169d0:	68 4c d3 02 c0       	push   0xc002d34c
c00169d5:	e8 1a bd 00 00       	call   c00226f4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00169da:	83 c4 10             	add    esp,0x10
c00169dd:	85 c0                	test   eax,eax
c00169df:	74 4b                	je     c0016a2c <unblockTask(ThreadControlBlock*)+0xa0>
c00169e1:	8d 76 00             	lea    esi,[esi+0x0]
c00169e4:	39 c3                	cmp    ebx,eax
c00169e6:	75 e4                	jne    c00169cc <unblockTask(ThreadControlBlock*)+0x40>
c00169e8:	eb 12                	jmp    c00169fc <unblockTask(ThreadControlBlock*)+0x70>
c00169ea:	66 90                	xchg   ax,ax
c00169ec:	83 ec 0c             	sub    esp,0xc
c00169ef:	68 a2 51 02 c0       	push   0xc00251a2
c00169f4:	e8 6d 05 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00169f9:	83 c4 10             	add    esp,0x10
c00169fc:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016a04:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016a09:	85 c0                	test   eax,eax
c0016a0b:	75 03                	jne    c0016a10 <unblockTask(ThreadControlBlock*)+0x84>
c0016a0d:	fb                   	sti    
c0016a0e:	66 90                	xchg   ax,ax
c0016a10:	83 c4 08             	add    esp,0x8
c0016a13:	5b                   	pop    ebx
c0016a14:	c3                   	ret    
c0016a15:	8d 76 00             	lea    esi,[esi+0x0]
c0016a18:	83 ec 0c             	sub    esp,0xc
c0016a1b:	68 8b 51 02 c0       	push   0xc002518b
c0016a20:	e8 41 05 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016a25:	83 c4 10             	add    esp,0x10
c0016a28:	eb d2                	jmp    c00169fc <unblockTask(ThreadControlBlock*)+0x70>
c0016a2a:	66 90                	xchg   ax,ax
c0016a2c:	83 ec 08             	sub    esp,0x8
c0016a2f:	53                   	push   ebx
c0016a30:	68 4c d3 02 c0       	push   0xc002d34c
c0016a35:	e8 72 b8 00 00       	call   c00222ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a3a:	83 c4 10             	add    esp,0x10
c0016a3d:	eb bd                	jmp    c00169fc <unblockTask(ThreadControlBlock*)+0x70>
c0016a3f:	90                   	nop

c0016a40 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016a40:	55                   	push   ebp
c0016a41:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016a46:	57                   	push   edi
c0016a47:	56                   	push   esi
c0016a48:	53                   	push   ebx
c0016a49:	83 ec 1c             	sub    esp,0x1c
c0016a4c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016a50:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0016a53:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016a56:	d3 c0                	rol    eax,cl
c0016a58:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c0016a5f:	21 c8                	and    eax,ecx
c0016a61:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0016a68:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016a6b:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0016a73:	0f 85 af 01 00 00    	jne    c0016c28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0016a79:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c0016a7f:	85 ed                	test   ebp,ebp
c0016a81:	7e 29                	jle    c0016aac <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0016a83:	31 f6                	xor    esi,esi
c0016a85:	8d 76 00             	lea    esi,[esi+0x0]
c0016a88:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0016a8f:	83 ec 0c             	sub    esp,0xc
c0016a92:	83 c6 01             	add    esi,0x1
c0016a95:	57                   	push   edi
c0016a96:	e8 dd 8b ff ff       	call   c000f678 <free>
c0016a9b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016a9e:	83 c4 10             	add    esp,0x10
c0016aa1:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0016aa7:	7f df                	jg     c0016a88 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0016aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0016aac:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016ab6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016ab9:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c0016abf:	89 f7                	mov    edi,esi
c0016ac1:	85 ed                	test   ebp,ebp
c0016ac3:	74 1b                	je     c0016ae0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016ac5:	83 ec 0c             	sub    esp,0xc
c0016ac8:	55                   	push   ebp
c0016ac9:	e8 e4 78 ff ff       	call   c000e3b2 <EnvVarContainer::~EnvVarContainer()>
c0016ace:	59                   	pop    ecx
c0016acf:	5e                   	pop    esi
c0016ad0:	6a 0c                	push   0xc
c0016ad2:	55                   	push   ebp
c0016ad3:	e8 98 67 ff ff       	call   c000d270 <operator delete(void*, unsigned long)>
c0016ad8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016adb:	83 c4 10             	add    esp,0x10
c0016ade:	89 f7                	mov    edi,esi
c0016ae0:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0016ae6:	85 c0                	test   eax,eax
c0016ae8:	0f 84 ae 00 00 00    	je     c0016b9c <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0016aee:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0016af1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016af5:	31 c9                	xor    ecx,ecx
c0016af7:	eb 17                	jmp    c0016b10 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016af9:	8d 76 00             	lea    esi,[esi+0x0]
c0016afc:	83 c1 01             	add    ecx,0x1
c0016aff:	83 f9 10             	cmp    ecx,0x10
c0016b02:	0f 84 94 00 00 00    	je     c0016b9c <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0016b08:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0016b0e:	66 90                	xchg   ax,ax
c0016b10:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0016b17:	d3 fa                	sar    edx,cl
c0016b19:	80 e2 01             	and    dl,0x1
c0016b1c:	74 de                	je     c0016afc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016b1e:	6b d1 73             	imul   edx,ecx,0x73
c0016b21:	01 d0                	add    eax,edx
c0016b23:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016b29:	83 fd 07             	cmp    ebp,0x7
c0016b2c:	75 ce                	jne    c0016afc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016b2e:	05 40 02 00 00       	add    eax,0x240
c0016b33:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0016b36:	83 fd ff             	cmp    ebp,0xffffffff
c0016b39:	0f 8c f1 00 00 00    	jl     c0016c30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0016b3f:	0f 84 af 01 00 00    	je     c0016cf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c0016b45:	85 ed                	test   ebp,ebp
c0016b47:	0f 84 93 01 00 00    	je     c0016ce0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c0016b4d:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016b4f:	75 ab                	jne    c0016afc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016b51:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016b55:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0016b5b:	01 d0                	add    eax,edx
c0016b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b60:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016b64:	83 ec 0c             	sub    esp,0xc
c0016b67:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0016b6d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016b70:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016b76:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016b7d:	50                   	push   eax
c0016b7e:	e8 09 fe ff ff       	call   c001698c <unblockTask(ThreadControlBlock*)>
c0016b83:	83 c4 10             	add    esp,0x10
c0016b86:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016b89:	89 f7                	mov    edi,esi
c0016b8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b8f:	83 c1 01             	add    ecx,0x1
c0016b92:	83 f9 10             	cmp    ecx,0x10
c0016b95:	0f 85 6d ff ff ff    	jne    c0016b08 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016b9b:	90                   	nop
c0016b9c:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c0016ba2:	85 c0                	test   eax,eax
c0016ba4:	74 62                	je     c0016c08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0016ba6:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0016bac:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c0016bb2:	74 54                	je     c0016c08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0016bb4:	83 ec 0c             	sub    esp,0xc
c0016bb7:	68 4c d3 02 c0       	push   0xc002d34c
c0016bbc:	e8 27 b6 00 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016bc1:	c7 04 24 4c d3 02 c0 	mov    DWORD PTR [esp],0xc002d34c
c0016bc8:	89 c7                	mov    edi,eax
c0016bca:	e8 fd b5 00 00       	call   c00221cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016bcf:	83 c4 10             	add    esp,0x10
c0016bd2:	84 c0                	test   al,al
c0016bd4:	0f 84 ce 00 00 00    	je     c0016ca8 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c0016bda:	66 90                	xchg   ax,ax
c0016bdc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016bdf:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016be5:	85 d2                	test   edx,edx
c0016be7:	74 0f                	je     c0016bf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0016be9:	8b 02                	mov    eax,DWORD PTR [edx]
c0016beb:	83 ec 0c             	sub    esp,0xc
c0016bee:	52                   	push   edx
c0016bef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016bf2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016bf5:	83 c4 10             	add    esp,0x10
c0016bf8:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c0016c02:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0016c05:	8d 76 00             	lea    esi,[esi+0x0]
c0016c08:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c0016c0e:	85 db                	test   ebx,ebx
c0016c10:	74 16                	je     c0016c28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0016c12:	83 ec 0c             	sub    esp,0xc
c0016c15:	53                   	push   ebx
c0016c16:	e8 59 c9 ff ff       	call   c0013574 <VAS::~VAS()>
c0016c1b:	58                   	pop    eax
c0016c1c:	5a                   	pop    edx
c0016c1d:	6a 14                	push   0x14
c0016c1f:	53                   	push   ebx
c0016c20:	e8 4b 66 ff ff       	call   c000d270 <operator delete(void*, unsigned long)>
c0016c25:	83 c4 10             	add    esp,0x10
c0016c28:	83 c4 1c             	add    esp,0x1c
c0016c2b:	5b                   	pop    ebx
c0016c2c:	5e                   	pop    esi
c0016c2d:	5f                   	pop    edi
c0016c2e:	5d                   	pop    ebp
c0016c2f:	c3                   	ret    
c0016c30:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016c34:	83 ec 0c             	sub    esp,0xc
c0016c37:	68 40 52 02 c0       	push   0xc0025240
c0016c3c:	e8 7b 8e ff ff       	call   c000fabc <KePanic(char const*)>
c0016c41:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016c44:	83 c4 10             	add    esp,0x10
c0016c47:	89 f7                	mov    edi,esi
c0016c49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c4d:	e9 aa fe ff ff       	jmp    c0016afc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016c52:	66 90                	xchg   ax,ax
c0016c54:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016c5a:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0016c60:	75 1e                	jne    c0016c80 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0016c62:	83 ec 0c             	sub    esp,0xc
c0016c65:	68 a8 52 02 c0       	push   0xc00252a8
c0016c6a:	e8 f7 02 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016c6f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016c76:	e8 79 fa ff ff       	call   c00166f4 <blockTask(TaskState)>
c0016c7b:	83 c4 10             	add    esp,0x10
c0016c7e:	66 90                	xchg   ax,ax
c0016c80:	83 ec 08             	sub    esp,0x8
c0016c83:	56                   	push   esi
c0016c84:	68 4c d3 02 c0       	push   0xc002d34c
c0016c89:	e8 1e b6 00 00       	call   c00222ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c8e:	c7 04 24 4c d3 02 c0 	mov    DWORD PTR [esp],0xc002d34c
c0016c95:	e8 4e b5 00 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c9a:	83 c4 10             	add    esp,0x10
c0016c9d:	39 f8                	cmp    eax,edi
c0016c9f:	0f 84 37 ff ff ff    	je     c0016bdc <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c0016ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ca8:	83 ec 0c             	sub    esp,0xc
c0016cab:	68 4c d3 02 c0       	push   0xc002d34c
c0016cb0:	e8 33 b5 00 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016cb5:	c7 04 24 4c d3 02 c0 	mov    DWORD PTR [esp],0xc002d34c
c0016cbc:	89 c6                	mov    esi,eax
c0016cbe:	e8 2d b5 00 00       	call   c00221f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	39 f3                	cmp    ebx,esi
c0016cc8:	74 b6                	je     c0016c80 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0016cca:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0016ccd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016cd0:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c0016cd6:	75 a8                	jne    c0016c80 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0016cd8:	e9 77 ff ff ff       	jmp    c0016c54 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c0016cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ce0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016ce4:	83 ec 0c             	sub    esp,0xc
c0016ce7:	68 74 52 02 c0       	push   0xc0025274
c0016cec:	e9 4b ff ff ff       	jmp    c0016c3c <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c0016cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0016cf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016cf8:	8b 36                	mov    esi,DWORD PTR [esi]
c0016cfa:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0016cfd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016d00:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c0016d06:	01 d7                	add    edi,edx
c0016d08:	89 f8                	mov    eax,edi
c0016d0a:	e9 51 fe ff ff       	jmp    c0016b60 <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c0016d0f:	90                   	nop

c0016d10 <cleanerTaskFunction(void*)>:
c0016d10:	53                   	push   ebx
c0016d11:	83 ec 08             	sub    esp,0x8
c0016d14:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016d1c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016d21:	85 c0                	test   eax,eax
c0016d23:	75 03                	jne    c0016d28 <cleanerTaskFunction(void*)+0x18>
c0016d25:	fb                   	sti    
c0016d26:	66 90                	xchg   ax,ax
c0016d28:	fa                   	cli    
c0016d29:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016d2e:	83 c0 01             	add    eax,0x1
c0016d31:	80 3d 14 d3 02 c0 00 	cmp    BYTE PTR ds:0xc002d314,0x0
c0016d38:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0016d3d:	0f 85 c9 00 00 00    	jne    c0016e0c <cleanerTaskFunction(void*)+0xfc>
c0016d43:	83 ec 0c             	sub    esp,0xc
c0016d46:	6a 02                	push   0x2
c0016d48:	e8 7b f9 ff ff       	call   c00166c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d4d:	83 c4 10             	add    esp,0x10
c0016d50:	c6 05 14 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d314,0x0
c0016d57:	fa                   	cli    
c0016d58:	8b 0d 30 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d330
c0016d5e:	8b 1d 2c d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d32c
c0016d64:	83 c1 01             	add    ecx,0x1
c0016d67:	89 0d 30 d3 02 c0    	mov    DWORD PTR ds:0xc002d330,ecx
c0016d6d:	83 c3 01             	add    ebx,0x1
c0016d70:	89 1d 2c d3 02 c0    	mov    DWORD PTR ds:0xc002d32c,ebx
c0016d76:	fa                   	cli    
c0016d77:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016d7c:	83 c0 01             	add    eax,0x1
c0016d7f:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0016d84:	eb 2a                	jmp    c0016db0 <cleanerTaskFunction(void*)+0xa0>
c0016d86:	66 90                	xchg   ax,ax
c0016d88:	83 ec 0c             	sub    esp,0xc
c0016d8b:	68 34 d3 02 c0       	push   0xc002d334
c0016d90:	e8 53 b4 00 00       	call   c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d95:	c7 04 24 34 d3 02 c0 	mov    DWORD PTR [esp],0xc002d334
c0016d9c:	89 c3                	mov    ebx,eax
c0016d9e:	e8 4d b4 00 00       	call   c00221f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016da3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016da6:	e8 95 fc ff ff       	call   c0016a40 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	66 90                	xchg   ax,ax
c0016db0:	83 ec 0c             	sub    esp,0xc
c0016db3:	68 34 d3 02 c0       	push   0xc002d334
c0016db8:	e8 0f b4 00 00       	call   c00221cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dbd:	83 c4 10             	add    esp,0x10
c0016dc0:	84 c0                	test   al,al
c0016dc2:	74 c4                	je     c0016d88 <cleanerTaskFunction(void*)+0x78>
c0016dc4:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016dcc:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c0016dd2:	85 d2                	test   edx,edx
c0016dd4:	75 02                	jne    c0016dd8 <cleanerTaskFunction(void*)+0xc8>
c0016dd6:	fb                   	sti    
c0016dd7:	90                   	nop
c0016dd8:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0016ddd:	83 e8 01             	sub    eax,0x1
c0016de0:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0016de5:	0f 85 29 ff ff ff    	jne    c0016d14 <cleanerTaskFunction(void*)+0x4>
c0016deb:	a1 28 d3 02 c0       	mov    eax,ds:0xc002d328
c0016df0:	85 c0                	test   eax,eax
c0016df2:	0f 84 1c ff ff ff    	je     c0016d14 <cleanerTaskFunction(void*)+0x4>
c0016df8:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c0016e02:	e8 2d f8 ff ff       	call   c0016634 <schedule()>
c0016e07:	e9 08 ff ff ff       	jmp    c0016d14 <cleanerTaskFunction(void*)+0x4>
c0016e0c:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016e14:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016e19:	85 c0                	test   eax,eax
c0016e1b:	0f 85 2f ff ff ff    	jne    c0016d50 <cleanerTaskFunction(void*)+0x40>
c0016e21:	fb                   	sti    
c0016e22:	e9 29 ff ff ff       	jmp    c0016d50 <cleanerTaskFunction(void*)+0x40>
c0016e27:	90                   	nop

c0016e28 <KeTerminateCurrentThread(int)>:
c0016e28:	83 ec 14             	sub    esp,0x14
c0016e2b:	fa                   	cli    
c0016e2c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016e31:	83 c0 01             	add    eax,0x1
c0016e34:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0016e39:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0016e3e:	83 c0 01             	add    eax,0x1
c0016e41:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0016e46:	fa                   	cli    
c0016e47:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016e4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e50:	83 c0 01             	add    eax,0x1
c0016e53:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0016e58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e5d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0016e60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e65:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016e68:	50                   	push   eax
c0016e69:	68 34 d3 02 c0       	push   0xc002d334
c0016e6e:	e8 39 b4 00 00       	call   c00222ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e78:	83 c4 10             	add    esp,0x10
c0016e7b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016e82:	a1 10 d3 02 c0       	mov    eax,ds:0xc002d310
c0016e87:	85 c0                	test   eax,eax
c0016e89:	0f 84 81 00 00 00    	je     c0016f10 <KeTerminateCurrentThread(int)+0xe8>
c0016e8f:	c6 05 14 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d314,0x1
c0016e96:	83 ec 0c             	sub    esp,0xc
c0016e99:	50                   	push   eax
c0016e9a:	e8 ed fa ff ff       	call   c001698c <unblockTask(ThreadControlBlock*)>
c0016e9f:	83 c4 10             	add    esp,0x10
c0016ea2:	66 90                	xchg   ax,ax
c0016ea4:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016eac:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016eb1:	85 c0                	test   eax,eax
c0016eb3:	75 03                	jne    c0016eb8 <KeTerminateCurrentThread(int)+0x90>
c0016eb5:	fb                   	sti    
c0016eb6:	66 90                	xchg   ax,ax
c0016eb8:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0016ebd:	83 e8 01             	sub    eax,0x1
c0016ec0:	a3 2c d3 02 c0       	mov    ds:0xc002d32c,eax
c0016ec5:	75 09                	jne    c0016ed0 <KeTerminateCurrentThread(int)+0xa8>
c0016ec7:	83 3d 28 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d328,0x0
c0016ece:	75 54                	jne    c0016f24 <KeTerminateCurrentThread(int)+0xfc>
c0016ed0:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016ed8:	8b 0d 30 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d330
c0016ede:	85 c9                	test   ecx,ecx
c0016ee0:	75 06                	jne    c0016ee8 <KeTerminateCurrentThread(int)+0xc0>
c0016ee2:	66 90                	xchg   ax,ax
c0016ee4:	fb                   	sti    
c0016ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee8:	fa                   	cli    
c0016ee9:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0016eee:	83 c0 01             	add    eax,0x1
c0016ef1:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0016ef6:	e8 39 f7 ff ff       	call   c0016634 <schedule()>
c0016efb:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0016f03:	8b 15 30 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d330
c0016f09:	85 d2                	test   edx,edx
c0016f0b:	75 db                	jne    c0016ee8 <KeTerminateCurrentThread(int)+0xc0>
c0016f0d:	eb d5                	jmp    c0016ee4 <KeTerminateCurrentThread(int)+0xbc>
c0016f0f:	90                   	nop
c0016f10:	83 ec 0c             	sub    esp,0xc
c0016f13:	68 b9 51 02 c0       	push   0xc00251b9
c0016f18:	e8 49 00 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016f1d:	83 c4 10             	add    esp,0x10
c0016f20:	eb 82                	jmp    c0016ea4 <KeTerminateCurrentThread(int)+0x7c>
c0016f22:	66 90                	xchg   ax,ax
c0016f24:	c7 05 28 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d328,0x0
c0016f2e:	e8 01 f7 ff ff       	call   c0016634 <schedule()>
c0016f33:	eb 9b                	jmp    c0016ed0 <KeTerminateCurrentThread(int)+0xa8>
c0016f35:	8d 76 00             	lea    esi,[esi+0x0]

c0016f38 <__static_initialization_and_destruction_0(int, int)>:
c0016f38:	83 ec 0c             	sub    esp,0xc
c0016f3b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016f40:	0f 85 8e 00 00 00    	jne    c0016fd4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016f46:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016f4e:	0f 85 80 00 00 00    	jne    c0016fd4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016f54:	83 ec 0c             	sub    esp,0xc
c0016f57:	68 4c d3 02 c0       	push   0xc002d34c
c0016f5c:	e8 eb b7 00 00       	call   c002274c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016f61:	83 c4 10             	add    esp,0x10
c0016f64:	83 ec 04             	sub    esp,0x4
c0016f67:	68 f8 65 02 c0       	push   0xc00265f8
c0016f6c:	68 4c d3 02 c0       	push   0xc002d34c
c0016f71:	68 fc 26 02 c0       	push   0xc00226fc
c0016f76:	e8 a5 62 ff ff       	call   c000d220 <__cxa_atexit>
c0016f7b:	83 c4 10             	add    esp,0x10
c0016f7e:	83 ec 0c             	sub    esp,0xc
c0016f81:	68 40 d3 02 c0       	push   0xc002d340
c0016f86:	e8 c1 b7 00 00       	call   c002274c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016f8b:	83 c4 10             	add    esp,0x10
c0016f8e:	83 ec 04             	sub    esp,0x4
c0016f91:	68 f8 65 02 c0       	push   0xc00265f8
c0016f96:	68 40 d3 02 c0       	push   0xc002d340
c0016f9b:	68 fc 26 02 c0       	push   0xc00226fc
c0016fa0:	e8 7b 62 ff ff       	call   c000d220 <__cxa_atexit>
c0016fa5:	83 c4 10             	add    esp,0x10
c0016fa8:	83 ec 0c             	sub    esp,0xc
c0016fab:	68 34 d3 02 c0       	push   0xc002d334
c0016fb0:	e8 97 b7 00 00       	call   c002274c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016fb5:	83 c4 10             	add    esp,0x10
c0016fb8:	83 ec 04             	sub    esp,0x4
c0016fbb:	68 f8 65 02 c0       	push   0xc00265f8
c0016fc0:	68 34 d3 02 c0       	push   0xc002d334
c0016fc5:	68 fc 26 02 c0       	push   0xc00226fc
c0016fca:	e8 51 62 ff ff       	call   c000d220 <__cxa_atexit>
c0016fcf:	83 c4 10             	add    esp,0x10
c0016fd2:	66 90                	xchg   ax,ax
c0016fd4:	90                   	nop
c0016fd5:	83 c4 0c             	add    esp,0xc
c0016fd8:	c3                   	ret    
c0016fd9:	8d 76 00             	lea    esi,[esi+0x0]

c0016fdc <_GLOBAL__sub_I_keNextPID>:
c0016fdc:	83 ec 0c             	sub    esp,0xc
c0016fdf:	83 ec 08             	sub    esp,0x8
c0016fe2:	68 ff ff 00 00       	push   0xffff
c0016fe7:	6a 01                	push   0x1
c0016fe9:	e8 4a ff ff ff       	call   c0016f38 <__static_initialization_and_destruction_0(int, int)>
c0016fee:	83 c4 10             	add    esp,0x10
c0016ff1:	83 c4 0c             	add    esp,0xc
c0016ff4:	c3                   	ret    

c0016ff5 <Vm::inbv(unsigned short)>:
c0016ff5:	55                   	push   ebp
c0016ff6:	89 e5                	mov    ebp,esp
c0016ff8:	83 ec 14             	sub    esp,0x14
c0016ffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016ffe:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017002:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017006:	3d fe fe 00 00       	cmp    eax,0xfefe
c001700b:	75 07                	jne    c0017014 <Vm::inbv(unsigned short)+0x1f>
c001700d:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c0017012:	eb 16                	jmp    c001702a <Vm::inbv(unsigned short)+0x35>
c0017014:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017018:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001701c:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0017020:	89 c2                	mov    edx,eax
c0017022:	ec                   	in     al,dx
c0017023:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0017026:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017029:	90                   	nop
c001702a:	c9                   	leave  
c001702b:	c3                   	ret    

c001702c <Vm::outbv(unsigned short, unsigned char)>:
c001702c:	55                   	push   ebp
c001702d:	89 e5                	mov    ebp,esp
c001702f:	83 ec 18             	sub    esp,0x18
c0017032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017035:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017038:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c001703c:	88 d0                	mov    al,dl
c001703e:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c0017041:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017045:	3d fe fe 00 00       	cmp    eax,0xfefe
c001704a:	75 2d                	jne    c0017079 <Vm::outbv(unsigned short, unsigned char)+0x4d>
c001704c:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c0017051:	8d 50 01             	lea    edx,[eax+0x1]
c0017054:	89 15 90 d3 02 c0    	mov    DWORD PTR ds:0xc002d390,edx
c001705a:	8a 55 e8             	mov    dl,BYTE PTR [ebp-0x18]
c001705d:	88 90 a0 d3 02 c0    	mov    BYTE PTR [eax-0x3ffd2c60],dl
c0017063:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c0017068:	83 f8 20             	cmp    eax,0x20
c001706b:	75 23                	jne    c0017090 <Vm::outbv(unsigned short, unsigned char)+0x64>
c001706d:	c7 05 90 d3 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002d390,0x1f
c0017077:	eb 17                	jmp    c0017090 <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017079:	0f b6 55 e8          	movzx  edx,BYTE PTR [ebp-0x18]
c001707d:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017081:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017085:	88 55 fd             	mov    BYTE PTR [ebp-0x3],dl
c0017088:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001708b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001708f:	ee                   	out    dx,al
c0017090:	90                   	nop
c0017091:	c9                   	leave  
c0017092:	c3                   	ret    

c0017093 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017093:	55                   	push   ebp
c0017094:	89 e5                	mov    ebp,esp
c0017096:	83 ec 08             	sub    esp,0x8
c0017099:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001709c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001709f:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
c00170a3:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
c00170a7:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
c00170ab:	c1 e0 04             	shl    eax,0x4
c00170ae:	89 c2                	mov    edx,eax
c00170b0:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
c00170b4:	01 d0                	add    eax,edx
c00170b6:	c9                   	leave  
c00170b7:	c3                   	ret    

c00170b8 <Vm::getSegment(unsigned int)>:
c00170b8:	55                   	push   ebp
c00170b9:	89 e5                	mov    ebp,esp
c00170bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00170be:	c1 e8 10             	shr    eax,0x10
c00170c1:	5d                   	pop    ebp
c00170c2:	c3                   	ret    

c00170c3 <Vm::getOffset(unsigned int)>:
c00170c3:	55                   	push   ebp
c00170c4:	89 e5                	mov    ebp,esp
c00170c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00170c9:	5d                   	pop    ebp
c00170ca:	c3                   	ret    

c00170cb <Vm::mainloop2()>:
c00170cb:	55                   	push   ebp
c00170cc:	89 e5                	mov    ebp,esp
c00170ce:	53                   	push   ebx
c00170cf:	83 ec 04             	sub    esp,0x4
c00170d2:	fa                   	cli    
c00170d3:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00170d8:	83 c0 01             	add    eax,0x1
c00170db:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c00170e0:	c6 05 89 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d389,0x1
c00170e7:	83 ec 0c             	sub    esp,0xc
c00170ea:	6a 02                	push   0x2
c00170ec:	e8 d7 f5 ff ff       	call   c00166c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00170f1:	83 c4 10             	add    esp,0x10
c00170f4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00170f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00170fb:	66 8b 40 5f          	mov    ax,WORD PTR [eax+0x5f]
c00170ff:	0f b7 d8             	movzx  ebx,ax
c0017102:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017107:	8b 00                	mov    eax,DWORD PTR [eax]
c0017109:	66 8b 40 5d          	mov    ax,WORD PTR [eax+0x5d]
c001710d:	0f b7 c8             	movzx  ecx,ax
c0017110:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017115:	8b 00                	mov    eax,DWORD PTR [eax]
c0017117:	66 8b 40 5b          	mov    ax,WORD PTR [eax+0x5b]
c001711b:	0f b7 d0             	movzx  edx,ax
c001711e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017123:	8b 00                	mov    eax,DWORD PTR [eax]
c0017125:	66 8b 40 59          	mov    ax,WORD PTR [eax+0x59]
c0017129:	0f b7 c0             	movzx  eax,ax
c001712c:	53                   	push   ebx
c001712d:	51                   	push   ecx
c001712e:	52                   	push   edx
c001712f:	50                   	push   eax
c0017130:	e8 da 90 fe ff       	call   c000020f <goToVM86>
c0017135:	83 c4 10             	add    esp,0x10
c0017138:	90                   	nop
c0017139:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001713c:	c9                   	leave  
c001713d:	c3                   	ret    

c001713e <Vm::mainVm8086Loop(void*)>:
c001713e:	55                   	push   ebp
c001713f:	89 e5                	mov    ebp,esp
c0017141:	83 ec 08             	sub    esp,0x8
c0017144:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001714c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0017151:	85 c0                	test   eax,eax
c0017153:	75 01                	jne    c0017156 <Vm::mainVm8086Loop(void*)+0x18>
c0017155:	fb                   	sti    
c0017156:	e8 70 ff ff ff       	call   c00170cb <Vm::mainloop2()>
c001715b:	90                   	nop
c001715c:	c9                   	leave  
c001715d:	c3                   	ret    

c001715e <Vm::mainloop3(unsigned long)>:
c001715e:	55                   	push   ebp
c001715f:	89 e5                	mov    ebp,esp
c0017161:	83 ec 08             	sub    esp,0x8
c0017164:	fa                   	cli    
c0017165:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001716a:	83 c0 01             	add    eax,0x1
c001716d:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0017172:	c6 05 88 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d388,0x1
c0017179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001717c:	a3 84 d3 02 c0       	mov    ds:0xc002d384,eax
c0017181:	83 ec 0c             	sub    esp,0xc
c0017184:	6a 02                	push   0x2
c0017186:	e8 3d f5 ff ff       	call   c00166c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001718b:	83 c4 10             	add    esp,0x10
c001718e:	e8 38 ff ff ff       	call   c00170cb <Vm::mainloop2()>
c0017193:	90                   	nop
c0017194:	c9                   	leave  
c0017195:	c3                   	ret    

c0017196 <Vm::initialise8086()>:
c0017196:	55                   	push   ebp
c0017197:	89 e5                	mov    ebp,esp
c0017199:	83 ec 08             	sub    esp,0x8
c001719c:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c00171a1:	68 80 00 00 00       	push   0x80
c00171a6:	6a 00                	push   0x0
c00171a8:	68 3e 71 01 c0       	push   0xc001713e
c00171ad:	50                   	push   eax
c00171ae:	e8 cd f1 ff ff       	call   c0016380 <Process::createThread(void (*)(void*), void*, int)>
c00171b3:	83 c4 10             	add    esp,0x10
c00171b6:	a3 8c d3 02 c0       	mov    ds:0xc002d38c,eax
c00171bb:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c00171c0:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00171c6:	83 ec 0c             	sub    esp,0xc
c00171c9:	6a 07                	push   0x7
c00171cb:	68 10 01 00 00       	push   0x110
c00171d0:	6a 00                	push   0x0
c00171d2:	6a 00                	push   0x0
c00171d4:	50                   	push   eax
c00171d5:	e8 fc c6 ff ff       	call   c00138d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171da:	83 c4 20             	add    esp,0x20
c00171dd:	90                   	nop
c00171de:	c9                   	leave  
c00171df:	c3                   	ret    

c00171e0 <Vm::resetConventionalMemory8086()>:
c00171e0:	55                   	push   ebp
c00171e1:	89 e5                	mov    ebp,esp
c00171e3:	83 ec 10             	sub    esp,0x10
c00171e6:	c9                   	leave  
c00171e7:	c3                   	ret    

c00171e8 <Vm::finish8086()>:
c00171e8:	55                   	push   ebp
c00171e9:	89 e5                	mov    ebp,esp
c00171eb:	83 ec 18             	sub    esp,0x18
c00171ee:	fa                   	cli    
c00171ef:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00171f4:	83 c0 01             	add    eax,0x1
c00171f7:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c00171fc:	a0 88 d3 02 c0       	mov    al,ds:0xc002d388
c0017201:	0f b6 c0             	movzx  eax,al
c0017204:	85 c0                	test   eax,eax
c0017206:	75 19                	jne    c0017221 <Vm::finish8086()+0x39>
c0017208:	e8 27 f4 ff ff       	call   c0016634 <schedule()>
c001720d:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0017215:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001721a:	85 c0                	test   eax,eax
c001721c:	75 d0                	jne    c00171ee <Vm::finish8086()+0x6>
c001721e:	fb                   	sti    
c001721f:	eb cd                	jmp    c00171ee <Vm::finish8086()+0x6>
c0017221:	90                   	nop
c0017222:	a1 84 d3 02 c0       	mov    eax,ds:0xc002d384
c0017227:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001722a:	c6 05 88 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d388,0x0
c0017231:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c0017236:	83 ec 0c             	sub    esp,0xc
c0017239:	50                   	push   eax
c001723a:	e8 4d f7 ff ff       	call   c001698c <unblockTask(ThreadControlBlock*)>
c001723f:	83 c4 10             	add    esp,0x10
c0017242:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001724a:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001724f:	85 c0                	test   eax,eax
c0017251:	75 01                	jne    c0017254 <Vm::finish8086()+0x6c>
c0017253:	fb                   	sti    
c0017254:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017257:	c9                   	leave  
c0017258:	c3                   	ret    

c0017259 <Vm::getOutput8086(unsigned char*)>:
c0017259:	55                   	push   ebp
c001725a:	89 e5                	mov    ebp,esp
c001725c:	57                   	push   edi
c001725d:	56                   	push   esi
c001725e:	53                   	push   ebx
c001725f:	83 ec 20             	sub    esp,0x20
c0017262:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c0017267:	89 c2                	mov    edx,eax
c0017269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001726c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001726f:	c7 45 e8 a0 d3 02 c0 	mov    DWORD PTR [ebp-0x18],0xc002d3a0
c0017276:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0017279:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001727c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001727f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0017282:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0017285:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0017288:	89 c6                	mov    esi,eax
c001728a:	89 d7                	mov    edi,edx
c001728c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001728e:	89 c8                	mov    eax,ecx
c0017290:	89 fa                	mov    edx,edi
c0017292:	89 f3                	mov    ebx,esi
c0017294:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c0017297:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c001729a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001729d:	a1 90 d3 02 c0       	mov    eax,ds:0xc002d390
c00172a2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00172a5:	c7 05 90 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d390,0x0
c00172af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00172b2:	83 c4 20             	add    esp,0x20
c00172b5:	5b                   	pop    ebx
c00172b6:	5e                   	pop    esi
c00172b7:	5f                   	pop    edi
c00172b8:	5d                   	pop    ebp
c00172b9:	c3                   	ret    

c00172ba <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00172ba:	55                   	push   ebp
c00172bb:	89 e5                	mov    ebp,esp
c00172bd:	57                   	push   edi
c00172be:	56                   	push   esi
c00172bf:	53                   	push   ebx
c00172c0:	83 ec 4c             	sub    esp,0x4c
c00172c3:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00172c6:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00172c9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00172cc:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00172cf:	66 89 5d b4          	mov    WORD PTR [ebp-0x4c],bx
c00172d3:	66 89 4d b0          	mov    WORD PTR [ebp-0x50],cx
c00172d7:	66 89 55 ac          	mov    WORD PTR [ebp-0x54],dx
c00172db:	66 89 45 a8          	mov    WORD PTR [ebp-0x58],ax
c00172df:	a0 80 d3 02 c0       	mov    al,ds:0xc002d380
c00172e4:	83 f0 01             	xor    eax,0x1
c00172e7:	0f b6 c0             	movzx  eax,al
c00172ea:	85 c0                	test   eax,eax
c00172ec:	0f 84 93 00 00 00    	je     c0017385 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xcb>
c00172f2:	c7 45 e0 14 01 00 00 	mov    DWORD PTR [ebp-0x20],0x114
c00172f9:	83 ec 0c             	sub    esp,0xc
c00172fc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00172ff:	e8 64 83 ff ff       	call   c000f668 <malloc>
c0017304:	83 c4 10             	add    esp,0x10
c0017307:	89 c3                	mov    ebx,eax
c0017309:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001730e:	83 ec 04             	sub    esp,0x4
c0017311:	50                   	push   eax
c0017312:	68 d0 52 02 c0       	push   0xc00252d0
c0017317:	53                   	push   ebx
c0017318:	e8 6b 0e ff ff       	call   c0008188 <File::File(char const*, Process*)>
c001731d:	83 c4 10             	add    esp,0x10
c0017320:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0017323:	83 ec 08             	sub    esp,0x8
c0017326:	6a 12                	push   0x12
c0017328:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001732b:	e8 76 0e ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0017330:	83 c4 10             	add    esp,0x10
c0017333:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017336:	8b 00                	mov    eax,DWORD PTR [eax]
c0017338:	83 c0 10             	add    eax,0x10
c001733b:	8b 00                	mov    eax,DWORD PTR [eax]
c001733d:	83 ec 0c             	sub    esp,0xc
c0017340:	8d 55 c0             	lea    edx,[ebp-0x40]
c0017343:	52                   	push   edx
c0017344:	6a 00                	push   0x0
c0017346:	6a 00                	push   0x0
c0017348:	68 00 00 11 00       	push   0x110000
c001734d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0017350:	ff d0                	call   eax
c0017352:	83 c4 20             	add    esp,0x20
c0017355:	83 ec 0c             	sub    esp,0xc
c0017358:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001735b:	e8 a4 0e ff ff       	call   c0008204 <File::close()>
c0017360:	83 c4 10             	add    esp,0x10
c0017363:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0017367:	74 15                	je     c001737e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xc4>
c0017369:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001736c:	8b 00                	mov    eax,DWORD PTR [eax]
c001736e:	83 c0 08             	add    eax,0x8
c0017371:	8b 00                	mov    eax,DWORD PTR [eax]
c0017373:	83 ec 0c             	sub    esp,0xc
c0017376:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0017379:	ff d0                	call   eax
c001737b:	83 c4 10             	add    esp,0x10
c001737e:	c6 05 80 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d380,0x1
c0017385:	e8 56 fe ff ff       	call   c00171e0 <Vm::resetConventionalMemory8086()>
c001738a:	fa                   	cli    
c001738b:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0017390:	83 c0 01             	add    eax,0x1
c0017393:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0017398:	a0 89 d3 02 c0       	mov    al,ds:0xc002d389
c001739d:	0f b6 c0             	movzx  eax,al
c00173a0:	85 c0                	test   eax,eax
c00173a2:	75 19                	jne    c00173bd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x103>
c00173a4:	e8 8b f2 ff ff       	call   c0016634 <schedule()>
c00173a9:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c00173b1:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00173b6:	85 c0                	test   eax,eax
c00173b8:	75 d0                	jne    c001738a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xd0>
c00173ba:	fb                   	sti    
c00173bb:	eb cd                	jmp    c001738a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xd0>
c00173bd:	90                   	nop
c00173be:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c00173c3:	8b 55 b4             	mov    edx,DWORD PTR [ebp-0x4c]
c00173c6:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00173ca:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c00173cf:	8b 55 b0             	mov    edx,DWORD PTR [ebp-0x50]
c00173d2:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00173d6:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c00173db:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
c00173de:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00173e2:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c00173e7:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
c00173ea:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c00173ee:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c00173f3:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00173f7:	c7 05 90 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d390,0x0
c0017401:	83 ec 04             	sub    esp,0x4
c0017404:	6a 20                	push   0x20
c0017406:	6a 00                	push   0x0
c0017408:	68 a0 d3 02 c0       	push   0xc002d3a0
c001740d:	e8 de 90 fe ff       	call   c00004f0 <memset>
c0017412:	83 c4 10             	add    esp,0x10
c0017415:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0017418:	0f b7 55 b4          	movzx  edx,WORD PTR [ebp-0x4c]
c001741c:	0f b7 45 b0          	movzx  eax,WORD PTR [ebp-0x50]
c0017420:	83 ec 08             	sub    esp,0x8
c0017423:	52                   	push   edx
c0017424:	50                   	push   eax
c0017425:	e8 69 fc ff ff       	call   c0017093 <Vm::realToLinear(unsigned short, unsigned short)>
c001742a:	83 c4 10             	add    esp,0x10
c001742d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0017430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017433:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0017436:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0017439:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c001743c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001743f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0017442:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0017445:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
c0017448:	89 c6                	mov    esi,eax
c001744a:	89 d7                	mov    edi,edx
c001744c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001744e:	89 c8                	mov    eax,ecx
c0017450:	89 fa                	mov    edx,edi
c0017452:	89 f3                	mov    ebx,esi
c0017454:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
c0017457:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
c001745a:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c001745d:	c6 05 89 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d389,0x0
c0017464:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001746c:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0017471:	85 c0                	test   eax,eax
c0017473:	75 01                	jne    c0017476 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1bc>
c0017475:	fb                   	sti    
c0017476:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c001747b:	83 ec 0c             	sub    esp,0xc
c001747e:	50                   	push   eax
c001747f:	e8 08 f5 ff ff       	call   c001698c <unblockTask(ThreadControlBlock*)>
c0017484:	83 c4 10             	add    esp,0x10
c0017487:	b0 01                	mov    al,0x1
c0017489:	8d 65 f4             	lea    esp,[ebp-0xc]
c001748c:	5b                   	pop    ebx
c001748d:	5e                   	pop    esi
c001748e:	5f                   	pop    edi
c001748f:	5d                   	pop    ebp
c0017490:	c3                   	ret    

c0017491 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017491:	55                   	push   ebp
c0017492:	89 e5                	mov    ebp,esp
c0017494:	56                   	push   esi
c0017495:	53                   	push   ebx
c0017496:	83 ec 40             	sub    esp,0x40
c0017499:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c001749c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001749f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00174a2:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00174a5:	66 89 5d c4          	mov    WORD PTR [ebp-0x3c],bx
c00174a9:	66 89 4d c0          	mov    WORD PTR [ebp-0x40],cx
c00174ad:	66 89 55 bc          	mov    WORD PTR [ebp-0x44],dx
c00174b1:	66 89 45 b8          	mov    WORD PTR [ebp-0x48],ax
c00174b5:	a0 80 d3 02 c0       	mov    al,ds:0xc002d380
c00174ba:	83 f0 01             	xor    eax,0x1
c00174bd:	0f b6 c0             	movzx  eax,al
c00174c0:	85 c0                	test   eax,eax
c00174c2:	0f 84 97 00 00 00    	je     c001755f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xce>
c00174c8:	c7 45 e4 14 01 00 00 	mov    DWORD PTR [ebp-0x1c],0x114
c00174cf:	83 ec 0c             	sub    esp,0xc
c00174d2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00174d5:	e8 8e 81 ff ff       	call   c000f668 <malloc>
c00174da:	83 c4 10             	add    esp,0x10
c00174dd:	89 c3                	mov    ebx,eax
c00174df:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c00174e4:	83 ec 04             	sub    esp,0x4
c00174e7:	50                   	push   eax
c00174e8:	68 d0 52 02 c0       	push   0xc00252d0
c00174ed:	53                   	push   ebx
c00174ee:	e8 95 0c ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00174f3:	83 c4 10             	add    esp,0x10
c00174f6:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00174f9:	83 ec 08             	sub    esp,0x8
c00174fc:	6a 12                	push   0x12
c00174fe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017501:	e8 a0 0c ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0017506:	83 c4 10             	add    esp,0x10
c0017509:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001750d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017510:	8b 00                	mov    eax,DWORD PTR [eax]
c0017512:	83 c0 10             	add    eax,0x10
c0017515:	8b 00                	mov    eax,DWORD PTR [eax]
c0017517:	83 ec 0c             	sub    esp,0xc
c001751a:	8d 55 cc             	lea    edx,[ebp-0x34]
c001751d:	52                   	push   edx
c001751e:	6a 00                	push   0x0
c0017520:	6a 00                	push   0x0
c0017522:	68 00 00 11 00       	push   0x110000
c0017527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001752a:	ff d0                	call   eax
c001752c:	83 c4 20             	add    esp,0x20
c001752f:	83 ec 0c             	sub    esp,0xc
c0017532:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017535:	e8 ca 0c ff ff       	call   c0008204 <File::close()>
c001753a:	83 c4 10             	add    esp,0x10
c001753d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0017541:	74 15                	je     c0017558 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc7>
c0017543:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017546:	8b 00                	mov    eax,DWORD PTR [eax]
c0017548:	83 c0 08             	add    eax,0x8
c001754b:	8b 00                	mov    eax,DWORD PTR [eax]
c001754d:	83 ec 0c             	sub    esp,0xc
c0017550:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017553:	ff d0                	call   eax
c0017555:	83 c4 10             	add    esp,0x10
c0017558:	c6 05 80 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d380,0x1
c001755f:	e8 7c fc ff ff       	call   c00171e0 <Vm::resetConventionalMemory8086()>
c0017564:	83 ec 08             	sub    esp,0x8
c0017567:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001756a:	68 ec 52 02 c0       	push   0xc00252ec
c001756f:	e8 f2 f9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017574:	83 c4 10             	add    esp,0x10
c0017577:	fa                   	cli    
c0017578:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001757d:	83 c0 01             	add    eax,0x1
c0017580:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0017585:	a0 89 d3 02 c0       	mov    al,ds:0xc002d389
c001758a:	0f b6 c0             	movzx  eax,al
c001758d:	85 c0                	test   eax,eax
c001758f:	75 19                	jne    c00175aa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x119>
c0017591:	e8 9e f0 ff ff       	call   c0016634 <schedule()>
c0017596:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001759e:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00175a3:	85 c0                	test   eax,eax
c00175a5:	75 d0                	jne    c0017577 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c00175a7:	fb                   	sti    
c00175a8:	eb cd                	jmp    c0017577 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c00175aa:	90                   	nop
c00175ab:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c00175b0:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00175b3:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00175b7:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c00175bc:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c00175bf:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00175c3:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c00175c8:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00175cb:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00175cf:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c00175d4:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c00175d7:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c00175db:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c00175e0:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00175e4:	c7 05 90 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d390,0x0
c00175ee:	83 ec 04             	sub    esp,0x4
c00175f1:	6a 20                	push   0x20
c00175f3:	6a 00                	push   0x0
c00175f5:	68 a0 d3 02 c0       	push   0xc002d3a0
c00175fa:	e8 f1 8e fe ff       	call   c00004f0 <memset>
c00175ff:	83 c4 10             	add    esp,0x10
c0017602:	c7 45 e0 14 01 00 00 	mov    DWORD PTR [ebp-0x20],0x114
c0017609:	83 ec 0c             	sub    esp,0xc
c001760c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001760f:	e8 54 80 ff ff       	call   c000f668 <malloc>
c0017614:	83 c4 10             	add    esp,0x10
c0017617:	89 c3                	mov    ebx,eax
c0017619:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001761e:	83 ec 04             	sub    esp,0x4
c0017621:	50                   	push   eax
c0017622:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017625:	53                   	push   ebx
c0017626:	e8 5d 0b ff ff       	call   c0008188 <File::File(char const*, Process*)>
c001762b:	83 c4 10             	add    esp,0x10
c001762e:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0017631:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0017635:	75 29                	jne    c0017660 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1cf>
c0017637:	83 ec 0c             	sub    esp,0xc
c001763a:	68 0e 53 02 c0       	push   0xc002530e
c001763f:	e8 78 84 ff ff       	call   c000fabc <KePanic(char const*)>
c0017644:	83 c4 10             	add    esp,0x10
c0017647:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001764f:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0017654:	85 c0                	test   eax,eax
c0017656:	75 01                	jne    c0017659 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1c8>
c0017658:	fb                   	sti    
c0017659:	b0 00                	mov    al,0x0
c001765b:	e9 fb 00 00 00       	jmp    c001775b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2ca>
c0017660:	83 ec 04             	sub    esp,0x4
c0017663:	8d 45 d7             	lea    eax,[ebp-0x29]
c0017666:	50                   	push   eax
c0017667:	8d 45 d8             	lea    eax,[ebp-0x28]
c001766a:	50                   	push   eax
c001766b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001766e:	e8 35 0e ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0017673:	83 c4 10             	add    esp,0x10
c0017676:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0017679:	0f b6 c0             	movzx  eax,al
c001767c:	85 c0                	test   eax,eax
c001767e:	74 29                	je     c00176a9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x218>
c0017680:	83 ec 0c             	sub    esp,0xc
c0017683:	68 22 53 02 c0       	push   0xc0025322
c0017688:	e8 2f 84 ff ff       	call   c000fabc <KePanic(char const*)>
c001768d:	83 c4 10             	add    esp,0x10
c0017690:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c0017698:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001769d:	85 c0                	test   eax,eax
c001769f:	75 01                	jne    c00176a2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x211>
c00176a1:	fb                   	sti    
c00176a2:	b0 00                	mov    al,0x0
c00176a4:	e9 b2 00 00 00       	jmp    c001775b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2ca>
c00176a9:	83 ec 08             	sub    esp,0x8
c00176ac:	6a 01                	push   0x1
c00176ae:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00176b1:	e8 f0 0a ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c00176b6:	83 c4 10             	add    esp,0x10
c00176b9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00176bc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00176c0:	74 26                	je     c00176e8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x257>
c00176c2:	83 ec 0c             	sub    esp,0xc
c00176c5:	68 3b 53 02 c0       	push   0xc002533b
c00176ca:	e8 ed 83 ff ff       	call   c000fabc <KePanic(char const*)>
c00176cf:	83 c4 10             	add    esp,0x10
c00176d2:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c00176da:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c00176df:	85 c0                	test   eax,eax
c00176e1:	75 01                	jne    c00176e4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x253>
c00176e3:	fb                   	sti    
c00176e4:	b0 00                	mov    al,0x0
c00176e6:	eb 73                	jmp    c001775b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2ca>
c00176e8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00176eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00176ed:	83 c0 0c             	add    eax,0xc
c00176f0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00176f2:	0f b7 55 c4          	movzx  edx,WORD PTR [ebp-0x3c]
c00176f6:	0f b7 45 c0          	movzx  eax,WORD PTR [ebp-0x40]
c00176fa:	83 ec 08             	sub    esp,0x8
c00176fd:	52                   	push   edx
c00176fe:	50                   	push   eax
c00176ff:	e8 8f f9 ff ff       	call   c0017093 <Vm::realToLinear(unsigned short, unsigned short)>
c0017704:	83 c4 10             	add    esp,0x10
c0017707:	89 c6                	mov    esi,eax
c0017709:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001770c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001770f:	83 ec 0c             	sub    esp,0xc
c0017712:	8d 4d d0             	lea    ecx,[ebp-0x30]
c0017715:	51                   	push   ecx
c0017716:	56                   	push   esi
c0017717:	52                   	push   edx
c0017718:	50                   	push   eax
c0017719:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001771c:	ff d3                	call   ebx
c001771e:	83 c4 20             	add    esp,0x20
c0017721:	83 ec 0c             	sub    esp,0xc
c0017724:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017727:	e8 d8 0a ff ff       	call   c0008204 <File::close()>
c001772c:	83 c4 10             	add    esp,0x10
c001772f:	c6 05 89 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d389,0x0
c0017736:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001773e:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0017743:	85 c0                	test   eax,eax
c0017745:	75 01                	jne    c0017748 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2b7>
c0017747:	fb                   	sti    
c0017748:	a1 8c d3 02 c0       	mov    eax,ds:0xc002d38c
c001774d:	83 ec 0c             	sub    esp,0xc
c0017750:	50                   	push   eax
c0017751:	e8 36 f2 ff ff       	call   c001698c <unblockTask(ThreadControlBlock*)>
c0017756:	83 c4 10             	add    esp,0x10
c0017759:	b0 01                	mov    al,0x1
c001775b:	8d 65 f8             	lea    esp,[ebp-0x8]
c001775e:	5b                   	pop    ebx
c001775f:	5e                   	pop    esi
c0017760:	5d                   	pop    ebp
c0017761:	c3                   	ret    

c0017762 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017762:	55                   	push   ebp
c0017763:	89 e5                	mov    ebp,esp
c0017765:	83 ec 68             	sub    esp,0x68
c0017768:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001776b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001776e:	66 89 55 9c          	mov    WORD PTR [ebp-0x64],dx
c0017772:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0017776:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c001777d:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
c0017780:	83 e8 06             	sub    eax,0x6
c0017783:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0017787:	0f b7 55 98          	movzx  edx,WORD PTR [ebp-0x68]
c001778b:	0f b7 45 9c          	movzx  eax,WORD PTR [ebp-0x64]
c001778f:	52                   	push   edx
c0017790:	50                   	push   eax
c0017791:	e8 fd f8 ff ff       	call   c0017093 <Vm::realToLinear(unsigned short, unsigned short)>
c0017796:	83 c4 08             	add    esp,0x8
c0017799:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001779c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001779f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00177a2:	83 e8 06             	sub    eax,0x6
c00177a5:	0f b7 d0             	movzx  edx,ax
c00177a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177ab:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00177ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00177b4:	83 c0 02             	add    eax,0x2
c00177b7:	0f b7 c0             	movzx  eax,ax
c00177ba:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00177bd:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c00177c0:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
c00177c4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00177c7:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00177ca:	66 8b 45 da          	mov    ax,WORD PTR [ebp-0x26]
c00177ce:	88 c2                	mov    dl,al
c00177d0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00177d3:	88 10                	mov    BYTE PTR [eax],dl
c00177d5:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
c00177d9:	c1 e8 08             	shr    eax,0x8
c00177dc:	89 c2                	mov    edx,eax
c00177de:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00177e1:	83 c0 01             	add    eax,0x1
c00177e4:	88 10                	mov    BYTE PTR [eax],dl
c00177e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177ec:	0f b7 c0             	movzx  eax,ax
c00177ef:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00177f2:	83 c2 02             	add    edx,0x2
c00177f5:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
c00177f8:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c00177fc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00177ff:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017802:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c0017806:	88 c2                	mov    dl,al
c0017808:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001780b:	88 10                	mov    BYTE PTR [eax],dl
c001780d:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c0017811:	c1 e8 08             	shr    eax,0x8
c0017814:	89 c2                	mov    edx,eax
c0017816:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017819:	83 c0 01             	add    eax,0x1
c001781c:	88 10                	mov    BYTE PTR [eax],dl
c001781e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017821:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017824:	0f b7 c0             	movzx  eax,ax
c0017827:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c001782a:	83 c2 04             	add    edx,0x4
c001782d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017830:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
c0017834:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017837:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001783a:	66 8b 45 f2          	mov    ax,WORD PTR [ebp-0xe]
c001783e:	88 c2                	mov    dl,al
c0017840:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017843:	88 10                	mov    BYTE PTR [eax],dl
c0017845:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
c0017849:	c1 e8 08             	shr    eax,0x8
c001784c:	89 c2                	mov    edx,eax
c001784e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017851:	83 c0 01             	add    eax,0x1
c0017854:	88 10                	mov    BYTE PTR [eax],dl
c0017856:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001785b:	8b 00                	mov    eax,DWORD PTR [eax]
c001785d:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017860:	0f b6 c0             	movzx  eax,al
c0017863:	85 c0                	test   eax,eax
c0017865:	74 5e                	je     c00178c5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x163>
c0017867:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001786a:	83 c0 04             	add    eax,0x4
c001786d:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0017870:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0017873:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0017876:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0017879:	8a 00                	mov    al,BYTE PTR [eax]
c001787b:	0f b6 c0             	movzx  eax,al
c001787e:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0017881:	83 c2 01             	add    edx,0x1
c0017884:	8a 12                	mov    dl,BYTE PTR [edx]
c0017886:	0f b6 d2             	movzx  edx,dl
c0017889:	c1 e2 08             	shl    edx,0x8
c001788c:	09 d0                	or     eax,edx
c001788e:	80 cc 02             	or     ah,0x2
c0017891:	0f b7 c0             	movzx  eax,ax
c0017894:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017897:	83 c2 04             	add    edx,0x4
c001789a:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c001789d:	66 89 45 ce          	mov    WORD PTR [ebp-0x32],ax
c00178a1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00178a4:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00178a7:	66 8b 45 ce          	mov    ax,WORD PTR [ebp-0x32]
c00178ab:	88 c2                	mov    dl,al
c00178ad:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00178b0:	88 10                	mov    BYTE PTR [eax],dl
c00178b2:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
c00178b6:	c1 e8 08             	shr    eax,0x8
c00178b9:	89 c2                	mov    edx,eax
c00178bb:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00178be:	83 c0 01             	add    eax,0x1
c00178c1:	88 10                	mov    BYTE PTR [eax],dl
c00178c3:	eb 5e                	jmp    c0017923 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x1c1>
c00178c5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00178c8:	83 c0 04             	add    eax,0x4
c00178cb:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c00178ce:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c00178d1:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c00178d4:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c00178d7:	8a 00                	mov    al,BYTE PTR [eax]
c00178d9:	0f b6 c0             	movzx  eax,al
c00178dc:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
c00178df:	83 c2 01             	add    edx,0x1
c00178e2:	8a 12                	mov    dl,BYTE PTR [edx]
c00178e4:	0f b6 d2             	movzx  edx,dl
c00178e7:	c1 e2 08             	shl    edx,0x8
c00178ea:	09 d0                	or     eax,edx
c00178ec:	0f b7 c0             	movzx  eax,ax
c00178ef:	25 ff fd 00 00       	and    eax,0xfdff
c00178f4:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00178f7:	83 c2 04             	add    edx,0x4
c00178fa:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
c00178fd:	66 89 45 ba          	mov    WORD PTR [ebp-0x46],ax
c0017901:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0017904:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c0017907:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
c001790b:	88 c2                	mov    dl,al
c001790d:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0017910:	88 10                	mov    BYTE PTR [eax],dl
c0017912:	0f b7 45 ba          	movzx  eax,WORD PTR [ebp-0x46]
c0017916:	c1 e8 08             	shr    eax,0x8
c0017919:	89 c2                	mov    edx,eax
c001791b:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c001791e:	83 c0 01             	add    eax,0x1
c0017921:	88 10                	mov    BYTE PTR [eax],dl
c0017923:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017928:	8b 00                	mov    eax,DWORD PTR [eax]
c001792a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001792e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017931:	c1 e0 02             	shl    eax,0x2
c0017934:	8d 50 02             	lea    edx,[eax+0x2]
c0017937:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001793a:	01 d0                	add    eax,edx
c001793c:	66 8b 00             	mov    ax,WORD PTR [eax]
c001793f:	0f b7 d0             	movzx  edx,ax
c0017942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017945:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0017948:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001794b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017952:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0017955:	01 d0                	add    eax,edx
c0017957:	66 8b 00             	mov    ax,WORD PTR [eax]
c001795a:	0f b7 d0             	movzx  edx,ax
c001795d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017960:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017963:	90                   	nop
c0017964:	c9                   	leave  
c0017965:	c3                   	ret    

c0017966 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017966:	55                   	push   ebp
c0017967:	89 e5                	mov    ebp,esp
c0017969:	83 ec 28             	sub    esp,0x28
c001796c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001796f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017972:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017976:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001797a:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001797e:	c1 e0 04             	shl    eax,0x4
c0017981:	89 c2                	mov    edx,eax
c0017983:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017987:	01 d0                	add    eax,edx
c0017989:	3d ff ff 0f 00       	cmp    eax,0xfffff
c001798e:	7e 10                	jle    c00179a0 <Vm::readByteFromReal(unsigned short, unsigned short)+0x3a>
c0017990:	83 ec 0c             	sub    esp,0xc
c0017993:	68 54 53 02 c0       	push   0xc0025354
c0017998:	e8 1f 81 ff ff       	call   c000fabc <KePanic(char const*)>
c001799d:	83 c4 10             	add    esp,0x10
c00179a0:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00179a4:	c1 e0 04             	shl    eax,0x4
c00179a7:	89 c2                	mov    edx,eax
c00179a9:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00179ad:	01 d0                	add    eax,edx
c00179af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00179b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00179b5:	8a 00                	mov    al,BYTE PTR [eax]
c00179b7:	c9                   	leave  
c00179b8:	c3                   	ret    

c00179b9 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00179b9:	55                   	push   ebp
c00179ba:	89 e5                	mov    ebp,esp
c00179bc:	83 ec 28             	sub    esp,0x28
c00179bf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00179c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00179c5:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00179c9:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00179cd:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00179d1:	c1 e0 04             	shl    eax,0x4
c00179d4:	89 c2                	mov    edx,eax
c00179d6:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00179da:	01 d0                	add    eax,edx
c00179dc:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00179e1:	7e 10                	jle    c00179f3 <Vm::readWordFromReal(unsigned short, unsigned short)+0x3a>
c00179e3:	83 ec 0c             	sub    esp,0xc
c00179e6:	68 54 53 02 c0       	push   0xc0025354
c00179eb:	e8 cc 80 ff ff       	call   c000fabc <KePanic(char const*)>
c00179f0:	83 c4 10             	add    esp,0x10
c00179f3:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00179f7:	c1 e0 04             	shl    eax,0x4
c00179fa:	89 c2                	mov    edx,eax
c00179fc:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017a00:	01 d0                	add    eax,edx
c0017a02:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017a05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017a08:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017a0b:	c9                   	leave  
c0017a0c:	c3                   	ret    

c0017a0d <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017a0d:	55                   	push   ebp
c0017a0e:	89 e5                	mov    ebp,esp
c0017a10:	83 ec 28             	sub    esp,0x28
c0017a13:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017a16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017a19:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017a1d:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017a21:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017a25:	c1 e0 04             	shl    eax,0x4
c0017a28:	89 c2                	mov    edx,eax
c0017a2a:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017a2e:	01 d0                	add    eax,edx
c0017a30:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017a35:	7e 10                	jle    c0017a47 <Vm::readDwordFromReal(unsigned short, unsigned short)+0x3a>
c0017a37:	83 ec 0c             	sub    esp,0xc
c0017a3a:	68 54 53 02 c0       	push   0xc0025354
c0017a3f:	e8 78 80 ff ff       	call   c000fabc <KePanic(char const*)>
c0017a44:	83 c4 10             	add    esp,0x10
c0017a47:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017a4b:	c1 e0 04             	shl    eax,0x4
c0017a4e:	89 c2                	mov    edx,eax
c0017a50:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017a54:	01 d0                	add    eax,edx
c0017a56:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017a59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017a5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a5e:	c9                   	leave  
c0017a5f:	c3                   	ret    

c0017a60 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017a60:	55                   	push   ebp
c0017a61:	89 e5                	mov    ebp,esp
c0017a63:	83 ec 28             	sub    esp,0x28
c0017a66:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017a69:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017a6c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017a6f:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017a73:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017a77:	88 c8                	mov    al,cl
c0017a79:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
c0017a7c:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017a80:	c1 e0 04             	shl    eax,0x4
c0017a83:	89 c2                	mov    edx,eax
c0017a85:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017a89:	01 d0                	add    eax,edx
c0017a8b:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017a90:	7e 10                	jle    c0017aa2 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)+0x42>
c0017a92:	83 ec 0c             	sub    esp,0xc
c0017a95:	68 54 53 02 c0       	push   0xc0025354
c0017a9a:	e8 1d 80 ff ff       	call   c000fabc <KePanic(char const*)>
c0017a9f:	83 c4 10             	add    esp,0x10
c0017aa2:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017aa6:	c1 e0 04             	shl    eax,0x4
c0017aa9:	89 c2                	mov    edx,eax
c0017aab:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017aaf:	01 d0                	add    eax,edx
c0017ab1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017ab4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017ab7:	8a 55 dc             	mov    dl,BYTE PTR [ebp-0x24]
c0017aba:	88 10                	mov    BYTE PTR [eax],dl
c0017abc:	90                   	nop
c0017abd:	c9                   	leave  
c0017abe:	c3                   	ret    

c0017abf <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017abf:	55                   	push   ebp
c0017ac0:	89 e5                	mov    ebp,esp
c0017ac2:	83 ec 28             	sub    esp,0x28
c0017ac5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0017ac8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017acb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017ace:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
c0017ad2:	66 89 55 e0          	mov    WORD PTR [ebp-0x20],dx
c0017ad6:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0017ada:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017ade:	c1 e0 04             	shl    eax,0x4
c0017ae1:	89 c2                	mov    edx,eax
c0017ae3:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017ae7:	01 d0                	add    eax,edx
c0017ae9:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017aee:	7e 10                	jle    c0017b00 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)+0x41>
c0017af0:	83 ec 0c             	sub    esp,0xc
c0017af3:	68 54 53 02 c0       	push   0xc0025354
c0017af8:	e8 bf 7f ff ff       	call   c000fabc <KePanic(char const*)>
c0017afd:	83 c4 10             	add    esp,0x10
c0017b00:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017b04:	c1 e0 04             	shl    eax,0x4
c0017b07:	89 c2                	mov    edx,eax
c0017b09:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017b0d:	01 d0                	add    eax,edx
c0017b0f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017b12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017b15:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0017b18:	66 89 10             	mov    WORD PTR [eax],dx
c0017b1b:	90                   	nop
c0017b1c:	c9                   	leave  
c0017b1d:	c3                   	ret    

c0017b1e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017b1e:	55                   	push   ebp
c0017b1f:	89 e5                	mov    ebp,esp
c0017b21:	83 ec 28             	sub    esp,0x28
c0017b24:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017b27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017b2a:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017b2e:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017b32:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017b36:	c1 e0 04             	shl    eax,0x4
c0017b39:	89 c2                	mov    edx,eax
c0017b3b:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017b3f:	01 d0                	add    eax,edx
c0017b41:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017b46:	7e 10                	jle    c0017b58 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)+0x3a>
c0017b48:	83 ec 0c             	sub    esp,0xc
c0017b4b:	68 54 53 02 c0       	push   0xc0025354
c0017b50:	e8 67 7f ff ff       	call   c000fabc <KePanic(char const*)>
c0017b55:	83 c4 10             	add    esp,0x10
c0017b58:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017b5c:	c1 e0 04             	shl    eax,0x4
c0017b5f:	89 c2                	mov    edx,eax
c0017b61:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017b65:	01 d0                	add    eax,edx
c0017b67:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017b6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017b6d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017b70:	89 10                	mov    DWORD PTR [eax],edx
c0017b72:	90                   	nop
c0017b73:	c9                   	leave  
c0017b74:	c3                   	ret    

c0017b75 <Vm::faultHandler(regs*)>:
c0017b75:	55                   	push   ebp
c0017b76:	89 e5                	mov    ebp,esp
c0017b78:	57                   	push   edi
c0017b79:	56                   	push   esi
c0017b7a:	53                   	push   ebx
c0017b7b:	81 ec ac 00 00 00    	sub    esp,0xac
c0017b81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b84:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017b87:	0f b7 d0             	movzx  edx,ax
c0017b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017b90:	0f b7 c0             	movzx  eax,ax
c0017b93:	52                   	push   edx
c0017b94:	50                   	push   eax
c0017b95:	e8 f9 f4 ff ff       	call   c0017093 <Vm::realToLinear(unsigned short, unsigned short)>
c0017b9a:	83 c4 08             	add    esp,0x8
c0017b9d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0017ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ba3:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017ba6:	0f b7 d0             	movzx  edx,ax
c0017ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bac:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0017baf:	0f b7 c0             	movzx  eax,ax
c0017bb2:	52                   	push   edx
c0017bb3:	50                   	push   eax
c0017bb4:	e8 da f4 ff ff       	call   c0017093 <Vm::realToLinear(unsigned short, unsigned short)>
c0017bb9:	83 c4 08             	add    esp,0x8
c0017bbc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bc2:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017bc5:	0f b7 d0             	movzx  edx,ax
c0017bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bcb:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0017bce:	0f b7 c0             	movzx  eax,ax
c0017bd1:	52                   	push   edx
c0017bd2:	50                   	push   eax
c0017bd3:	e8 bb f4 ff ff       	call   c0017093 <Vm::realToLinear(unsigned short, unsigned short)>
c0017bd8:	83 c4 08             	add    esp,0x8
c0017bdb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0017bde:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0017be5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017be8:	83 c0 02             	add    eax,0x2
c0017beb:	8a 00                	mov    al,BYTE PTR [eax]
c0017bed:	0f b6 f8             	movzx  edi,al
c0017bf0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017bf3:	83 c0 01             	add    eax,0x1
c0017bf6:	8a 00                	mov    al,BYTE PTR [eax]
c0017bf8:	0f b6 f0             	movzx  esi,al
c0017bfb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017bfe:	8a 00                	mov    al,BYTE PTR [eax]
c0017c00:	0f b6 d8             	movzx  ebx,al
c0017c03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c06:	8b 48 38             	mov    ecx,DWORD PTR [eax+0x38]
c0017c09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c0c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0017c0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c12:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c15:	c1 e0 04             	shl    eax,0x4
c0017c18:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0017c1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c21:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017c24:	03 85 54 ff ff ff    	add    eax,DWORD PTR [ebp-0xac]
c0017c2a:	57                   	push   edi
c0017c2b:	56                   	push   esi
c0017c2c:	53                   	push   ebx
c0017c2d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0017c30:	51                   	push   ecx
c0017c31:	52                   	push   edx
c0017c32:	50                   	push   eax
c0017c33:	68 73 53 02 c0       	push   0xc0025373
c0017c38:	e8 29 f3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017c3d:	83 c4 20             	add    esp,0x20
c0017c40:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
c0017c44:	c6 45 e2 00          	mov    BYTE PTR [ebp-0x1e],0x0
c0017c48:	c6 45 e1 06          	mov    BYTE PTR [ebp-0x1f],0x6
c0017c4c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017c4f:	8a 00                	mov    al,BYTE PTR [eax]
c0017c51:	0f b6 c0             	movzx  eax,al
c0017c54:	83 e8 26             	sub    eax,0x26
c0017c57:	3d d5 00 00 00       	cmp    eax,0xd5
c0017c5c:	0f 87 f8 0c 00 00    	ja     c001895a <Vm::faultHandler(regs*)+0xde5>
c0017c62:	8b 04 85 f0 53 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdac10]
c0017c69:	ff e0                	jmp    eax
c0017c6b:	c6 45 e1 02          	mov    BYTE PTR [ebp-0x1f],0x2
c0017c6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c72:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017c75:	8d 50 01             	lea    edx,[eax+0x1]
c0017c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c7b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017c7e:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017c82:	e9 87 0d 00 00       	jmp    c0018a0e <Vm::faultHandler(regs*)+0xe99>
c0017c87:	c6 45 e1 00          	mov    BYTE PTR [ebp-0x1f],0x0
c0017c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c8e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017c91:	8d 50 01             	lea    edx,[eax+0x1]
c0017c94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c97:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017c9a:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017c9e:	e9 6b 0d 00 00       	jmp    c0018a0e <Vm::faultHandler(regs*)+0xe99>
c0017ca3:	c6 45 e1 01          	mov    BYTE PTR [ebp-0x1f],0x1
c0017ca7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017caa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017cad:	8d 50 01             	lea    edx,[eax+0x1]
c0017cb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017cb3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017cb6:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017cba:	e9 4f 0d 00 00       	jmp    c0018a0e <Vm::faultHandler(regs*)+0xe99>
c0017cbf:	c6 45 e1 03          	mov    BYTE PTR [ebp-0x1f],0x3
c0017cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017cc6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017cc9:	8d 50 01             	lea    edx,[eax+0x1]
c0017ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ccf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017cd2:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017cd6:	e9 33 0d 00 00       	jmp    c0018a0e <Vm::faultHandler(regs*)+0xe99>
c0017cdb:	c6 45 e1 04          	mov    BYTE PTR [ebp-0x1f],0x4
c0017cdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ce2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ce5:	8d 50 01             	lea    edx,[eax+0x1]
c0017ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ceb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017cee:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017cf2:	e9 17 0d 00 00       	jmp    c0018a0e <Vm::faultHandler(regs*)+0xe99>
c0017cf7:	c6 45 e1 05          	mov    BYTE PTR [ebp-0x1f],0x5
c0017cfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017cfe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d01:	8d 50 01             	lea    edx,[eax+0x1]
c0017d04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d07:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d0a:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017d0e:	e9 fb 0c 00 00       	jmp    c0018a0e <Vm::faultHandler(regs*)+0xe99>
c0017d13:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0017d17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d1a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d1d:	8d 50 01             	lea    edx,[eax+0x1]
c0017d20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d23:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d26:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017d2a:	e9 df 0c 00 00       	jmp    c0018a0e <Vm::faultHandler(regs*)+0xe99>
c0017d2f:	c6 45 e2 01          	mov    BYTE PTR [ebp-0x1e],0x1
c0017d33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d36:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d39:	8d 50 01             	lea    edx,[eax+0x1]
c0017d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d3f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d42:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017d46:	e9 c3 0c 00 00       	jmp    c0018a0e <Vm::faultHandler(regs*)+0xe99>
c0017d4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d51:	8d 50 01             	lea    edx,[eax+0x1]
c0017d54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d57:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d5a:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017d5e:	e9 ab 0c 00 00       	jmp    c0018a0e <Vm::faultHandler(regs*)+0xe99>
c0017d63:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0017d67:	85 c0                	test   eax,eax
c0017d69:	74 5b                	je     c0017dc6 <Vm::faultHandler(regs*)+0x251>
c0017d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d6e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017d71:	83 e8 04             	sub    eax,0x4
c0017d74:	0f b7 d0             	movzx  edx,ax
c0017d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d7a:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017d7d:	83 6d d0 04          	sub    DWORD PTR [ebp-0x30],0x4
c0017d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d84:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017d87:	25 ff 0d 00 00       	and    eax,0xdff
c0017d8c:	89 c2                	mov    edx,eax
c0017d8e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017d91:	89 10                	mov    DWORD PTR [eax],edx
c0017d93:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d98:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d9a:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017d9d:	0f b6 c0             	movzx  eax,al
c0017da0:	85 c0                	test   eax,eax
c0017da2:	74 11                	je     c0017db5 <Vm::faultHandler(regs*)+0x240>
c0017da4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017da7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017da9:	80 cc 02             	or     ah,0x2
c0017dac:	89 c2                	mov    edx,eax
c0017dae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017db1:	89 10                	mov    DWORD PTR [eax],edx
c0017db3:	eb 6a                	jmp    c0017e1f <Vm::faultHandler(regs*)+0x2aa>
c0017db5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017db8:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dba:	80 e4 fd             	and    ah,0xfd
c0017dbd:	89 c2                	mov    edx,eax
c0017dbf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017dc2:	89 10                	mov    DWORD PTR [eax],edx
c0017dc4:	eb 59                	jmp    c0017e1f <Vm::faultHandler(regs*)+0x2aa>
c0017dc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dc9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017dcc:	83 e8 02             	sub    eax,0x2
c0017dcf:	0f b7 d0             	movzx  edx,ax
c0017dd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dd5:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017dd8:	83 6d d4 02          	sub    DWORD PTR [ebp-0x2c],0x2
c0017ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ddf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017de2:	89 c2                	mov    edx,eax
c0017de4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017de7:	66 89 10             	mov    WORD PTR [eax],dx
c0017dea:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017def:	8b 00                	mov    eax,DWORD PTR [eax]
c0017df1:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017df4:	0f b6 c0             	movzx  eax,al
c0017df7:	85 c0                	test   eax,eax
c0017df9:	74 13                	je     c0017e0e <Vm::faultHandler(regs*)+0x299>
c0017dfb:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017dfe:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017e01:	80 cc 02             	or     ah,0x2
c0017e04:	89 c2                	mov    edx,eax
c0017e06:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017e09:	66 89 10             	mov    WORD PTR [eax],dx
c0017e0c:	eb 11                	jmp    c0017e1f <Vm::faultHandler(regs*)+0x2aa>
c0017e0e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017e14:	80 e4 fd             	and    ah,0xfd
c0017e17:	89 c2                	mov    edx,eax
c0017e19:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017e1c:	66 89 10             	mov    WORD PTR [eax],dx
c0017e1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e22:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e25:	8d 50 01             	lea    edx,[eax+0x1]
c0017e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e2b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017e2e:	b0 01                	mov    al,0x1
c0017e30:	e9 de 0b 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0017e35:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0017e39:	85 c0                	test   eax,eax
c0017e3b:	74 46                	je     c0017e83 <Vm::faultHandler(regs*)+0x30e>
c0017e3d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017e40:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e42:	25 ff 0d 00 00       	and    eax,0xdff
c0017e47:	0d 00 02 02 00       	or     eax,0x20200
c0017e4c:	89 c2                	mov    edx,eax
c0017e4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e51:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0017e54:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017e57:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e59:	25 00 02 00 00       	and    eax,0x200
c0017e5e:	89 c2                	mov    edx,eax
c0017e60:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e65:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e67:	85 d2                	test   edx,edx
c0017e69:	0f 95 c2             	setne  dl
c0017e6c:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0017e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e72:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017e75:	83 c0 04             	add    eax,0x4
c0017e78:	0f b7 d0             	movzx  edx,ax
c0017e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e7e:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017e81:	eb 47                	jmp    c0017eca <Vm::faultHandler(regs*)+0x355>
c0017e83:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017e86:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017e89:	0f b7 c0             	movzx  eax,ax
c0017e8c:	0d 00 02 02 00       	or     eax,0x20200
c0017e91:	89 c2                	mov    edx,eax
c0017e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e96:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0017e99:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017e9c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017e9f:	0f b7 c0             	movzx  eax,ax
c0017ea2:	25 00 02 00 00       	and    eax,0x200
c0017ea7:	89 c2                	mov    edx,eax
c0017ea9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017eae:	8b 00                	mov    eax,DWORD PTR [eax]
c0017eb0:	85 d2                	test   edx,edx
c0017eb2:	0f 95 c2             	setne  dl
c0017eb5:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0017eb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ebb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017ebe:	83 c0 02             	add    eax,0x2
c0017ec1:	0f b7 d0             	movzx  edx,ax
c0017ec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ec7:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ecd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ed0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ed6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017ed9:	b0 01                	mov    al,0x1
c0017edb:	e9 33 0b 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0017ee0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017ee3:	83 c0 01             	add    eax,0x1
c0017ee6:	8a 00                	mov    al,BYTE PTR [eax]
c0017ee8:	0f b6 c0             	movzx  eax,al
c0017eeb:	3d ee 00 00 00       	cmp    eax,0xee
c0017ef0:	75 19                	jne    c0017f0b <Vm::faultHandler(regs*)+0x396>
c0017ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ef5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0017ef8:	83 ec 0c             	sub    esp,0xc
c0017efb:	50                   	push   eax
c0017efc:	e8 5d f2 ff ff       	call   c001715e <Vm::mainloop3(unsigned long)>
c0017f01:	83 c4 10             	add    esp,0x10
c0017f04:	b0 01                	mov    al,0x1
c0017f06:	e9 08 0b 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0017f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f0e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017f11:	0f b7 c8             	movzx  ecx,ax
c0017f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f17:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0017f1a:	0f b7 d0             	movzx  edx,ax
c0017f1d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017f20:	83 c0 01             	add    eax,0x1
c0017f23:	8a 00                	mov    al,BYTE PTR [eax]
c0017f25:	0f b6 c0             	movzx  eax,al
c0017f28:	83 ec 0c             	sub    esp,0xc
c0017f2b:	51                   	push   ecx
c0017f2c:	52                   	push   edx
c0017f2d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0017f30:	50                   	push   eax
c0017f31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017f34:	e8 29 f8 ff ff       	call   c0017762 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017f39:	83 c4 20             	add    esp,0x20
c0017f3c:	b0 01                	mov    al,0x1
c0017f3e:	e9 d0 0a 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0017f43:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017f48:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f4a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f51:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f54:	8d 50 01             	lea    edx,[eax+0x1]
c0017f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f5a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f5d:	b0 01                	mov    al,0x1
c0017f5f:	e9 af 0a 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0017f64:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f6b:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0017f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f72:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f75:	8d 50 01             	lea    edx,[eax+0x1]
c0017f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f7b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f7e:	b0 01                	mov    al,0x1
c0017f80:	e9 8e 0a 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0017f85:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017f88:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c0017f8b:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0017f8e:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
c0017f91:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
c0017f94:	8a 00                	mov    al,BYTE PTR [eax]
c0017f96:	0f b6 c0             	movzx  eax,al
c0017f99:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
c0017f9c:	83 c2 01             	add    edx,0x1
c0017f9f:	8a 12                	mov    dl,BYTE PTR [edx]
c0017fa1:	0f b6 d2             	movzx  edx,dl
c0017fa4:	c1 e2 08             	shl    edx,0x8
c0017fa7:	09 d0                	or     eax,edx
c0017fa9:	0f b7 d0             	movzx  edx,ax
c0017fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017faf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017fb2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017fb5:	83 c0 02             	add    eax,0x2
c0017fb8:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c0017fbb:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0017fbe:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0017fc1:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0017fc4:	8a 00                	mov    al,BYTE PTR [eax]
c0017fc6:	0f b6 c0             	movzx  eax,al
c0017fc9:	8b 55 b0             	mov    edx,DWORD PTR [ebp-0x50]
c0017fcc:	83 c2 01             	add    edx,0x1
c0017fcf:	8a 12                	mov    dl,BYTE PTR [edx]
c0017fd1:	0f b6 d2             	movzx  edx,dl
c0017fd4:	c1 e2 08             	shl    edx,0x8
c0017fd7:	09 d0                	or     eax,edx
c0017fd9:	0f b7 d0             	movzx  edx,ax
c0017fdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fdf:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0017fe2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017fe5:	83 c0 04             	add    eax,0x4
c0017fe8:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
c0017feb:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0017fee:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
c0017ff1:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c0017ff4:	8a 00                	mov    al,BYTE PTR [eax]
c0017ff6:	0f b6 c0             	movzx  eax,al
c0017ff9:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c0017ffc:	83 c2 01             	add    edx,0x1
c0017fff:	8a 12                	mov    dl,BYTE PTR [edx]
c0018001:	0f b6 d2             	movzx  edx,dl
c0018004:	c1 e2 08             	shl    edx,0x8
c0018007:	09 d0                	or     eax,edx
c0018009:	0f b7 c0             	movzx  eax,ax
c001800c:	0d 00 02 02 00       	or     eax,0x20200
c0018011:	89 c2                	mov    edx,eax
c0018013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018016:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018019:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001801c:	83 c0 04             	add    eax,0x4
c001801f:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0018022:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0018025:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0018028:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001802b:	8a 00                	mov    al,BYTE PTR [eax]
c001802d:	0f b6 c0             	movzx  eax,al
c0018030:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0018033:	83 c2 01             	add    edx,0x1
c0018036:	8a 12                	mov    dl,BYTE PTR [edx]
c0018038:	0f b6 d2             	movzx  edx,dl
c001803b:	c1 e2 08             	shl    edx,0x8
c001803e:	09 d0                	or     eax,edx
c0018040:	0f b7 c0             	movzx  eax,ax
c0018043:	25 00 02 00 00       	and    eax,0x200
c0018048:	89 c2                	mov    edx,eax
c001804a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001804f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018051:	85 d2                	test   edx,edx
c0018053:	0f 95 c2             	setne  dl
c0018056:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001805c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001805f:	83 c0 06             	add    eax,0x6
c0018062:	0f b7 d0             	movzx  edx,ax
c0018065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018068:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001806b:	b0 01                	mov    al,0x1
c001806d:	e9 a1 09 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0018072:	66 c7 45 ca 00 00    	mov    WORD PTR [ebp-0x36],0x0
c0018078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001807b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001807e:	66 89 45 ca          	mov    WORD PTR [ebp-0x36],ax
c0018082:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018086:	85 c0                	test   eax,eax
c0018088:	74 7a                	je     c0018104 <Vm::faultHandler(regs*)+0x58f>
c001808a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001808d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018090:	3d ff ff 00 00       	cmp    eax,0xffff
c0018095:	76 6d                	jbe    c0018104 <Vm::faultHandler(regs*)+0x58f>
c0018097:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001809a:	83 c0 05             	add    eax,0x5
c001809d:	8a 00                	mov    al,BYTE PTR [eax]
c001809f:	0f b6 c0             	movzx  eax,al
c00180a2:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c00180a8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00180ab:	83 c0 04             	add    eax,0x4
c00180ae:	8a 00                	mov    al,BYTE PTR [eax]
c00180b0:	0f b6 f8             	movzx  edi,al
c00180b3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00180b6:	83 c0 03             	add    eax,0x3
c00180b9:	8a 00                	mov    al,BYTE PTR [eax]
c00180bb:	0f b6 f0             	movzx  esi,al
c00180be:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00180c1:	83 c0 02             	add    eax,0x2
c00180c4:	8a 00                	mov    al,BYTE PTR [eax]
c00180c6:	0f b6 d8             	movzx  ebx,al
c00180c9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00180cc:	83 c0 01             	add    eax,0x1
c00180cf:	8a 00                	mov    al,BYTE PTR [eax]
c00180d1:	0f b6 c8             	movzx  ecx,al
c00180d4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00180d7:	8a 00                	mov    al,BYTE PTR [eax]
c00180d9:	0f b6 d0             	movzx  edx,al
c00180dc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00180df:	8a 00                	mov    al,BYTE PTR [eax]
c00180e1:	0f b6 c0             	movzx  eax,al
c00180e4:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00180ea:	57                   	push   edi
c00180eb:	56                   	push   esi
c00180ec:	53                   	push   ebx
c00180ed:	51                   	push   ecx
c00180ee:	52                   	push   edx
c00180ef:	50                   	push   eax
c00180f0:	68 90 53 02 c0       	push   0xc0025390
c00180f5:	e8 6c ee fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00180fa:	83 c4 20             	add    esp,0x20
c00180fd:	b0 00                	mov    al,0x0
c00180ff:	e9 0f 09 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0018104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018107:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001810a:	0f b7 c0             	movzx  eax,ax
c001810d:	83 ec 0c             	sub    esp,0xc
c0018110:	50                   	push   eax
c0018111:	e8 df ee ff ff       	call   c0016ff5 <Vm::inbv(unsigned short)>
c0018116:	83 c4 10             	add    esp,0x10
c0018119:	0f b6 c8             	movzx  ecx,al
c001811c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001811f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018122:	0f b7 d0             	movzx  edx,ax
c0018125:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
c0018129:	83 ec 04             	sub    esp,0x4
c001812c:	51                   	push   ecx
c001812d:	52                   	push   edx
c001812e:	50                   	push   eax
c001812f:	e8 2c f9 ff ff       	call   c0017a60 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018134:	83 c4 10             	add    esp,0x10
c0018137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001813a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001813d:	25 00 04 00 00       	and    eax,0x400
c0018142:	85 c0                	test   eax,eax
c0018144:	74 14                	je     c001815a <Vm::faultHandler(regs*)+0x5e5>
c0018146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018149:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001814c:	83 e8 01             	sub    eax,0x1
c001814f:	0f b7 d0             	movzx  edx,ax
c0018152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018155:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018158:	eb 12                	jmp    c001816c <Vm::faultHandler(regs*)+0x5f7>
c001815a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001815d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018160:	83 c0 01             	add    eax,0x1
c0018163:	0f b7 d0             	movzx  edx,ax
c0018166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018169:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001816c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001816f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018172:	8d 50 01             	lea    edx,[eax+0x1]
c0018175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018178:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001817b:	b0 01                	mov    al,0x1
c001817d:	e9 91 08 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0018182:	66 c7 45 c8 00 00    	mov    WORD PTR [ebp-0x38],0x0
c0018188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001818b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001818e:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0018192:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018196:	85 c0                	test   eax,eax
c0018198:	74 7a                	je     c0018214 <Vm::faultHandler(regs*)+0x69f>
c001819a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001819d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181a0:	3d ff ff 00 00       	cmp    eax,0xffff
c00181a5:	76 6d                	jbe    c0018214 <Vm::faultHandler(regs*)+0x69f>
c00181a7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00181aa:	83 c0 05             	add    eax,0x5
c00181ad:	8a 00                	mov    al,BYTE PTR [eax]
c00181af:	0f b6 c0             	movzx  eax,al
c00181b2:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c00181b8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00181bb:	83 c0 04             	add    eax,0x4
c00181be:	8a 00                	mov    al,BYTE PTR [eax]
c00181c0:	0f b6 f8             	movzx  edi,al
c00181c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00181c6:	83 c0 03             	add    eax,0x3
c00181c9:	8a 00                	mov    al,BYTE PTR [eax]
c00181cb:	0f b6 f0             	movzx  esi,al
c00181ce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00181d1:	83 c0 02             	add    eax,0x2
c00181d4:	8a 00                	mov    al,BYTE PTR [eax]
c00181d6:	0f b6 d8             	movzx  ebx,al
c00181d9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00181dc:	83 c0 01             	add    eax,0x1
c00181df:	8a 00                	mov    al,BYTE PTR [eax]
c00181e1:	0f b6 c8             	movzx  ecx,al
c00181e4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00181e7:	8a 00                	mov    al,BYTE PTR [eax]
c00181e9:	0f b6 d0             	movzx  edx,al
c00181ec:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00181ef:	8a 00                	mov    al,BYTE PTR [eax]
c00181f1:	0f b6 c0             	movzx  eax,al
c00181f4:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00181fa:	57                   	push   edi
c00181fb:	56                   	push   esi
c00181fc:	53                   	push   ebx
c00181fd:	51                   	push   ecx
c00181fe:	52                   	push   edx
c00181ff:	50                   	push   eax
c0018200:	68 90 53 02 c0       	push   0xc0025390
c0018205:	e8 5c ed fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001820a:	83 c4 20             	add    esp,0x20
c001820d:	b0 00                	mov    al,0x0
c001820f:	e9 ff 07 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0018214:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018218:	85 c0                	test   eax,eax
c001821a:	74 6f                	je     c001828b <Vm::faultHandler(regs*)+0x716>
c001821c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001821f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018222:	0f b7 c0             	movzx  eax,ax
c0018225:	66 89 45 a6          	mov    WORD PTR [ebp-0x5a],ax
c0018229:	66 8b 45 a6          	mov    ax,WORD PTR [ebp-0x5a]
c001822d:	89 c2                	mov    edx,eax
c001822f:	ed                   	in     eax,dx
c0018230:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
c0018233:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
c0018236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018239:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001823c:	0f b7 d0             	movzx  edx,ax
c001823f:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0018243:	83 ec 04             	sub    esp,0x4
c0018246:	51                   	push   ecx
c0018247:	52                   	push   edx
c0018248:	50                   	push   eax
c0018249:	e8 d0 f8 ff ff       	call   c0017b1e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001824e:	83 c4 10             	add    esp,0x10
c0018251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018254:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018257:	25 00 04 00 00       	and    eax,0x400
c001825c:	85 c0                	test   eax,eax
c001825e:	74 17                	je     c0018277 <Vm::faultHandler(regs*)+0x702>
c0018260:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018263:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018266:	83 e8 04             	sub    eax,0x4
c0018269:	0f b7 d0             	movzx  edx,ax
c001826c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001826f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018272:	e9 83 00 00 00       	jmp    c00182fa <Vm::faultHandler(regs*)+0x785>
c0018277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001827a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001827d:	83 c0 04             	add    eax,0x4
c0018280:	0f b7 d0             	movzx  edx,ax
c0018283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018286:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018289:	eb 6f                	jmp    c00182fa <Vm::faultHandler(regs*)+0x785>
c001828b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001828e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018291:	0f b7 c0             	movzx  eax,ax
c0018294:	66 89 45 9e          	mov    WORD PTR [ebp-0x62],ax
c0018298:	66 8b 45 9e          	mov    ax,WORD PTR [ebp-0x62]
c001829c:	89 c2                	mov    edx,eax
c001829e:	66 ed                	in     ax,dx
c00182a0:	66 89 45 9c          	mov    WORD PTR [ebp-0x64],ax
c00182a4:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
c00182a7:	0f b7 c8             	movzx  ecx,ax
c00182aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182b0:	0f b7 d0             	movzx  edx,ax
c00182b3:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c00182b7:	83 ec 04             	sub    esp,0x4
c00182ba:	51                   	push   ecx
c00182bb:	52                   	push   edx
c00182bc:	50                   	push   eax
c00182bd:	e8 fd f7 ff ff       	call   c0017abf <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00182c2:	83 c4 10             	add    esp,0x10
c00182c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00182cb:	25 00 04 00 00       	and    eax,0x400
c00182d0:	85 c0                	test   eax,eax
c00182d2:	74 14                	je     c00182e8 <Vm::faultHandler(regs*)+0x773>
c00182d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182da:	83 e8 02             	sub    eax,0x2
c00182dd:	0f b7 d0             	movzx  edx,ax
c00182e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00182e6:	eb 12                	jmp    c00182fa <Vm::faultHandler(regs*)+0x785>
c00182e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182ee:	83 c0 02             	add    eax,0x2
c00182f1:	0f b7 d0             	movzx  edx,ax
c00182f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182f7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00182fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182fd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018300:	8d 50 01             	lea    edx,[eax+0x1]
c0018303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018306:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018309:	b0 01                	mov    al,0x1
c001830b:	e9 03 07 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0018310:	66 c7 45 de 00 00    	mov    WORD PTR [ebp-0x22],0x0
c0018316:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c001831a:	83 f8 06             	cmp    eax,0x6
c001831d:	77 4f                	ja     c001836e <Vm::faultHandler(regs*)+0x7f9>
c001831f:	8b 04 85 48 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8b8]
c0018326:	ff e0                	jmp    eax
c0018328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001832b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001832e:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018332:	eb 3a                	jmp    c001836e <Vm::faultHandler(regs*)+0x7f9>
c0018334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018337:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001833a:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c001833e:	eb 2e                	jmp    c001836e <Vm::faultHandler(regs*)+0x7f9>
c0018340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018343:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018346:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c001834a:	eb 22                	jmp    c001836e <Vm::faultHandler(regs*)+0x7f9>
c001834c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001834f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018352:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018356:	eb 16                	jmp    c001836e <Vm::faultHandler(regs*)+0x7f9>
c0018358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001835b:	8b 00                	mov    eax,DWORD PTR [eax]
c001835d:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018361:	eb 0b                	jmp    c001836e <Vm::faultHandler(regs*)+0x7f9>
c0018363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018366:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018369:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c001836d:	90                   	nop
c001836e:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018372:	85 c0                	test   eax,eax
c0018374:	74 7a                	je     c00183f0 <Vm::faultHandler(regs*)+0x87b>
c0018376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018379:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001837c:	3d ff ff 00 00       	cmp    eax,0xffff
c0018381:	76 6d                	jbe    c00183f0 <Vm::faultHandler(regs*)+0x87b>
c0018383:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018386:	83 c0 05             	add    eax,0x5
c0018389:	8a 00                	mov    al,BYTE PTR [eax]
c001838b:	0f b6 c0             	movzx  eax,al
c001838e:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018394:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018397:	83 c0 04             	add    eax,0x4
c001839a:	8a 00                	mov    al,BYTE PTR [eax]
c001839c:	0f b6 f8             	movzx  edi,al
c001839f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183a2:	83 c0 03             	add    eax,0x3
c00183a5:	8a 00                	mov    al,BYTE PTR [eax]
c00183a7:	0f b6 f0             	movzx  esi,al
c00183aa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183ad:	83 c0 02             	add    eax,0x2
c00183b0:	8a 00                	mov    al,BYTE PTR [eax]
c00183b2:	0f b6 d8             	movzx  ebx,al
c00183b5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183b8:	83 c0 01             	add    eax,0x1
c00183bb:	8a 00                	mov    al,BYTE PTR [eax]
c00183bd:	0f b6 c8             	movzx  ecx,al
c00183c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183c3:	8a 00                	mov    al,BYTE PTR [eax]
c00183c5:	0f b6 d0             	movzx  edx,al
c00183c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183cb:	8a 00                	mov    al,BYTE PTR [eax]
c00183cd:	0f b6 c0             	movzx  eax,al
c00183d0:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00183d6:	57                   	push   edi
c00183d7:	56                   	push   esi
c00183d8:	53                   	push   ebx
c00183d9:	51                   	push   ecx
c00183da:	52                   	push   edx
c00183db:	50                   	push   eax
c00183dc:	68 90 53 02 c0       	push   0xc0025390
c00183e1:	e8 80 eb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00183e6:	83 c4 20             	add    esp,0x20
c00183e9:	b0 00                	mov    al,0x0
c00183eb:	e9 23 06 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c00183f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183f3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00183f6:	0f b7 d0             	movzx  edx,ax
c00183f9:	0f b7 45 de          	movzx  eax,WORD PTR [ebp-0x22]
c00183fd:	83 ec 08             	sub    esp,0x8
c0018400:	52                   	push   edx
c0018401:	50                   	push   eax
c0018402:	e8 5f f5 ff ff       	call   c0017966 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018407:	83 c4 10             	add    esp,0x10
c001840a:	0f b6 d0             	movzx  edx,al
c001840d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018410:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018413:	0f b7 c0             	movzx  eax,ax
c0018416:	83 ec 08             	sub    esp,0x8
c0018419:	52                   	push   edx
c001841a:	50                   	push   eax
c001841b:	e8 0c ec ff ff       	call   c001702c <Vm::outbv(unsigned short, unsigned char)>
c0018420:	83 c4 10             	add    esp,0x10
c0018423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018426:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018429:	25 00 04 00 00       	and    eax,0x400
c001842e:	85 c0                	test   eax,eax
c0018430:	74 14                	je     c0018446 <Vm::faultHandler(regs*)+0x8d1>
c0018432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018435:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018438:	83 e8 01             	sub    eax,0x1
c001843b:	0f b7 d0             	movzx  edx,ax
c001843e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018441:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018444:	eb 12                	jmp    c0018458 <Vm::faultHandler(regs*)+0x8e3>
c0018446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018449:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001844c:	83 c0 01             	add    eax,0x1
c001844f:	0f b7 d0             	movzx  edx,ax
c0018452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018455:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001845b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001845e:	8d 50 01             	lea    edx,[eax+0x1]
c0018461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018464:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018467:	b0 01                	mov    al,0x1
c0018469:	e9 a5 05 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c001846e:	66 c7 45 dc 00 00    	mov    WORD PTR [ebp-0x24],0x0
c0018474:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c0018478:	83 f8 06             	cmp    eax,0x6
c001847b:	77 4f                	ja     c00184cc <Vm::faultHandler(regs*)+0x957>
c001847d:	8b 04 85 64 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda89c]
c0018484:	ff e0                	jmp    eax
c0018486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018489:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001848c:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018490:	eb 3a                	jmp    c00184cc <Vm::faultHandler(regs*)+0x957>
c0018492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018495:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018498:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c001849c:	eb 2e                	jmp    c00184cc <Vm::faultHandler(regs*)+0x957>
c001849e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00184a4:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00184a8:	eb 22                	jmp    c00184cc <Vm::faultHandler(regs*)+0x957>
c00184aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00184b0:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00184b4:	eb 16                	jmp    c00184cc <Vm::faultHandler(regs*)+0x957>
c00184b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00184bb:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00184bf:	eb 0b                	jmp    c00184cc <Vm::faultHandler(regs*)+0x957>
c00184c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184c4:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c00184c7:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00184cb:	90                   	nop
c00184cc:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c00184d0:	85 c0                	test   eax,eax
c00184d2:	74 7a                	je     c001854e <Vm::faultHandler(regs*)+0x9d9>
c00184d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184d7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00184da:	3d ff ff 00 00       	cmp    eax,0xffff
c00184df:	76 6d                	jbe    c001854e <Vm::faultHandler(regs*)+0x9d9>
c00184e1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00184e4:	83 c0 05             	add    eax,0x5
c00184e7:	8a 00                	mov    al,BYTE PTR [eax]
c00184e9:	0f b6 c0             	movzx  eax,al
c00184ec:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c00184f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00184f5:	83 c0 04             	add    eax,0x4
c00184f8:	8a 00                	mov    al,BYTE PTR [eax]
c00184fa:	0f b6 f8             	movzx  edi,al
c00184fd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018500:	83 c0 03             	add    eax,0x3
c0018503:	8a 00                	mov    al,BYTE PTR [eax]
c0018505:	0f b6 f0             	movzx  esi,al
c0018508:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001850b:	83 c0 02             	add    eax,0x2
c001850e:	8a 00                	mov    al,BYTE PTR [eax]
c0018510:	0f b6 d8             	movzx  ebx,al
c0018513:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018516:	83 c0 01             	add    eax,0x1
c0018519:	8a 00                	mov    al,BYTE PTR [eax]
c001851b:	0f b6 c8             	movzx  ecx,al
c001851e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018521:	8a 00                	mov    al,BYTE PTR [eax]
c0018523:	0f b6 d0             	movzx  edx,al
c0018526:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018529:	8a 00                	mov    al,BYTE PTR [eax]
c001852b:	0f b6 c0             	movzx  eax,al
c001852e:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018534:	57                   	push   edi
c0018535:	56                   	push   esi
c0018536:	53                   	push   ebx
c0018537:	51                   	push   ecx
c0018538:	52                   	push   edx
c0018539:	50                   	push   eax
c001853a:	68 90 53 02 c0       	push   0xc0025390
c001853f:	e8 22 ea fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018544:	83 c4 20             	add    esp,0x20
c0018547:	b0 00                	mov    al,0x0
c0018549:	e9 c5 04 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c001854e:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018552:	85 c0                	test   eax,eax
c0018554:	74 6c                	je     c00185c2 <Vm::faultHandler(regs*)+0xa4d>
c0018556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018559:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001855c:	0f b7 d0             	movzx  edx,ax
c001855f:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c0018563:	83 ec 08             	sub    esp,0x8
c0018566:	52                   	push   edx
c0018567:	50                   	push   eax
c0018568:	e8 a0 f4 ff ff       	call   c0017a0d <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001856d:	83 c4 10             	add    esp,0x10
c0018570:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018573:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018576:	0f b7 d2             	movzx  edx,dx
c0018579:	66 89 55 9a          	mov    WORD PTR [ebp-0x66],dx
c001857d:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
c0018580:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
c0018583:	66 8b 55 9a          	mov    dx,WORD PTR [ebp-0x66]
c0018587:	ef                   	out    dx,eax
c0018588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001858b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001858e:	25 00 04 00 00       	and    eax,0x400
c0018593:	85 c0                	test   eax,eax
c0018595:	74 17                	je     c00185ae <Vm::faultHandler(regs*)+0xa39>
c0018597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001859a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001859d:	83 e8 04             	sub    eax,0x4
c00185a0:	0f b7 d0             	movzx  edx,ax
c00185a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185a6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00185a9:	e9 80 00 00 00       	jmp    c001862e <Vm::faultHandler(regs*)+0xab9>
c00185ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185b1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00185b4:	83 c0 04             	add    eax,0x4
c00185b7:	0f b7 d0             	movzx  edx,ax
c00185ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185bd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00185c0:	eb 6c                	jmp    c001862e <Vm::faultHandler(regs*)+0xab9>
c00185c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185c5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00185c8:	0f b7 d0             	movzx  edx,ax
c00185cb:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c00185cf:	83 ec 08             	sub    esp,0x8
c00185d2:	52                   	push   edx
c00185d3:	50                   	push   eax
c00185d4:	e8 e0 f3 ff ff       	call   c00179b9 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00185d9:	83 c4 10             	add    esp,0x10
c00185dc:	0f b7 c0             	movzx  eax,ax
c00185df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00185e2:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00185e5:	0f b7 d2             	movzx  edx,dx
c00185e8:	66 89 55 92          	mov    WORD PTR [ebp-0x6e],dx
c00185ec:	66 89 45 90          	mov    WORD PTR [ebp-0x70],ax
c00185f0:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
c00185f3:	66 8b 55 92          	mov    dx,WORD PTR [ebp-0x6e]
c00185f7:	66 ef                	out    dx,ax
c00185f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00185ff:	25 00 04 00 00       	and    eax,0x400
c0018604:	85 c0                	test   eax,eax
c0018606:	74 14                	je     c001861c <Vm::faultHandler(regs*)+0xaa7>
c0018608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001860b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001860e:	83 e8 02             	sub    eax,0x2
c0018611:	0f b7 d0             	movzx  edx,ax
c0018614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018617:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001861a:	eb 12                	jmp    c001862e <Vm::faultHandler(regs*)+0xab9>
c001861c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001861f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018622:	83 c0 02             	add    eax,0x2
c0018625:	0f b7 d0             	movzx  edx,ax
c0018628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001862b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001862e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018631:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018634:	8d 50 01             	lea    edx,[eax+0x1]
c0018637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001863a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001863d:	b0 01                	mov    al,0x1
c001863f:	e9 cf 03 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0018644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018647:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001864a:	b0 00                	mov    al,0x0
c001864c:	89 c2                	mov    edx,eax
c001864e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018651:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018654:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018657:	83 c0 01             	add    eax,0x1
c001865a:	8a 00                	mov    al,BYTE PTR [eax]
c001865c:	0f b6 c0             	movzx  eax,al
c001865f:	83 ec 0c             	sub    esp,0xc
c0018662:	50                   	push   eax
c0018663:	e8 8d e9 ff ff       	call   c0016ff5 <Vm::inbv(unsigned short)>
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	88 c1                	mov    cl,al
c001866d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018670:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018673:	0f b6 c1             	movzx  eax,cl
c0018676:	09 c2                	or     edx,eax
c0018678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001867b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001867e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018681:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018684:	8d 50 02             	lea    edx,[eax+0x2]
c0018687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001868a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001868d:	b0 01                	mov    al,0x1
c001868f:	e9 7f 03 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0018694:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018698:	85 c0                	test   eax,eax
c001869a:	74 24                	je     c00186c0 <Vm::faultHandler(regs*)+0xb4b>
c001869c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001869f:	83 c0 01             	add    eax,0x1
c00186a2:	8a 00                	mov    al,BYTE PTR [eax]
c00186a4:	0f b6 c0             	movzx  eax,al
c00186a7:	66 89 45 8e          	mov    WORD PTR [ebp-0x72],ax
c00186ab:	66 8b 45 8e          	mov    ax,WORD PTR [ebp-0x72]
c00186af:	89 c2                	mov    edx,eax
c00186b1:	ed                   	in     eax,dx
c00186b2:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
c00186b5:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
c00186b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186bb:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00186be:	eb 42                	jmp    c0018702 <Vm::faultHandler(regs*)+0xb8d>
c00186c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186c3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00186c6:	25 00 00 ff ff       	and    eax,0xffff0000
c00186cb:	89 c2                	mov    edx,eax
c00186cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186d0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00186d3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00186d6:	83 c0 01             	add    eax,0x1
c00186d9:	8a 00                	mov    al,BYTE PTR [eax]
c00186db:	0f b6 c0             	movzx  eax,al
c00186de:	66 89 45 86          	mov    WORD PTR [ebp-0x7a],ax
c00186e2:	66 8b 45 86          	mov    ax,WORD PTR [ebp-0x7a]
c00186e6:	89 c2                	mov    edx,eax
c00186e8:	66 ed                	in     ax,dx
c00186ea:	66 89 45 84          	mov    WORD PTR [ebp-0x7c],ax
c00186ee:	8b 4d 84             	mov    ecx,DWORD PTR [ebp-0x7c]
c00186f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186f4:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00186f7:	0f b7 c1             	movzx  eax,cx
c00186fa:	09 c2                	or     edx,eax
c00186fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186ff:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018705:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018708:	8d 50 02             	lea    edx,[eax+0x2]
c001870b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001870e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018711:	b0 01                	mov    al,0x1
c0018713:	e9 fb 02 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0018718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001871b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001871e:	0f b6 d0             	movzx  edx,al
c0018721:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018724:	83 c0 01             	add    eax,0x1
c0018727:	8a 00                	mov    al,BYTE PTR [eax]
c0018729:	0f b6 c0             	movzx  eax,al
c001872c:	83 ec 08             	sub    esp,0x8
c001872f:	52                   	push   edx
c0018730:	50                   	push   eax
c0018731:	e8 f6 e8 ff ff       	call   c001702c <Vm::outbv(unsigned short, unsigned char)>
c0018736:	83 c4 10             	add    esp,0x10
c0018739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001873c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001873f:	8d 50 02             	lea    edx,[eax+0x2]
c0018742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018745:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018748:	b0 01                	mov    al,0x1
c001874a:	e9 c4 02 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c001874f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018753:	85 c0                	test   eax,eax
c0018755:	74 28                	je     c001877f <Vm::faultHandler(regs*)+0xc0a>
c0018757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001875a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001875d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018760:	83 c2 01             	add    edx,0x1
c0018763:	8a 12                	mov    dl,BYTE PTR [edx]
c0018765:	0f b6 d2             	movzx  edx,dl
c0018768:	66 89 55 82          	mov    WORD PTR [ebp-0x7e],dx
c001876c:	89 85 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],eax
c0018772:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [ebp-0x84]
c0018778:	66 8b 55 82          	mov    dx,WORD PTR [ebp-0x7e]
c001877c:	ef                   	out    dx,eax
c001877d:	eb 31                	jmp    c00187b0 <Vm::faultHandler(regs*)+0xc3b>
c001877f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018782:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018785:	0f b7 c0             	movzx  eax,ax
c0018788:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001878b:	83 c2 01             	add    edx,0x1
c001878e:	8a 12                	mov    dl,BYTE PTR [edx]
c0018790:	0f b6 d2             	movzx  edx,dl
c0018793:	66 89 95 7a ff ff ff 	mov    WORD PTR [ebp-0x86],dx
c001879a:	66 89 85 78 ff ff ff 	mov    WORD PTR [ebp-0x88],ax
c00187a1:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [ebp-0x88]
c00187a7:	66 8b 95 7a ff ff ff 	mov    dx,WORD PTR [ebp-0x86]
c00187ae:	66 ef                	out    dx,ax
c00187b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00187b6:	8d 50 02             	lea    edx,[eax+0x2]
c00187b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00187bf:	b0 01                	mov    al,0x1
c00187c1:	e9 4d 02 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c00187c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187c9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00187cc:	b0 00                	mov    al,0x0
c00187ce:	89 c2                	mov    edx,eax
c00187d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187d3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00187d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187d9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00187dc:	0f b7 c0             	movzx  eax,ax
c00187df:	83 ec 0c             	sub    esp,0xc
c00187e2:	50                   	push   eax
c00187e3:	e8 0d e8 ff ff       	call   c0016ff5 <Vm::inbv(unsigned short)>
c00187e8:	83 c4 10             	add    esp,0x10
c00187eb:	88 c1                	mov    cl,al
c00187ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187f0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00187f3:	0f b6 c1             	movzx  eax,cl
c00187f6:	09 c2                	or     edx,eax
c00187f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187fb:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00187fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018801:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018804:	8d 50 01             	lea    edx,[eax+0x1]
c0018807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001880a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001880d:	b0 01                	mov    al,0x1
c001880f:	e9 ff 01 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0018814:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018818:	85 c0                	test   eax,eax
c001881a:	74 2e                	je     c001884a <Vm::faultHandler(regs*)+0xcd5>
c001881c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001881f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018822:	0f b7 c0             	movzx  eax,ax
c0018825:	66 89 85 76 ff ff ff 	mov    WORD PTR [ebp-0x8a],ax
c001882c:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [ebp-0x8a]
c0018833:	89 c2                	mov    edx,eax
c0018835:	ed                   	in     eax,dx
c0018836:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
c001883c:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [ebp-0x90]
c0018842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018845:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018848:	eb 4c                	jmp    c0018896 <Vm::faultHandler(regs*)+0xd21>
c001884a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001884d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018850:	25 00 00 ff ff       	and    eax,0xffff0000
c0018855:	89 c2                	mov    edx,eax
c0018857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001885a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001885d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018860:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018863:	0f b7 c0             	movzx  eax,ax
c0018866:	66 89 85 6e ff ff ff 	mov    WORD PTR [ebp-0x92],ax
c001886d:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [ebp-0x92]
c0018874:	89 c2                	mov    edx,eax
c0018876:	66 ed                	in     ax,dx
c0018878:	66 89 85 6c ff ff ff 	mov    WORD PTR [ebp-0x94],ax
c001887f:	8b 8d 6c ff ff ff    	mov    ecx,DWORD PTR [ebp-0x94]
c0018885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018888:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001888b:	0f b7 c1             	movzx  eax,cx
c001888e:	09 c2                	or     edx,eax
c0018890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018893:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018899:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001889c:	8d 50 01             	lea    edx,[eax+0x1]
c001889f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00188a5:	b0 01                	mov    al,0x1
c00188a7:	e9 67 01 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c00188ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188af:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00188b2:	0f b6 d0             	movzx  edx,al
c00188b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188b8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00188bb:	0f b7 c0             	movzx  eax,ax
c00188be:	83 ec 08             	sub    esp,0x8
c00188c1:	52                   	push   edx
c00188c2:	50                   	push   eax
c00188c3:	e8 64 e7 ff ff       	call   c001702c <Vm::outbv(unsigned short, unsigned char)>
c00188c8:	83 c4 10             	add    esp,0x10
c00188cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188ce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00188d1:	8d 50 01             	lea    edx,[eax+0x1]
c00188d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188d7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00188da:	b0 01                	mov    al,0x1
c00188dc:	e9 32 01 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c00188e1:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00188e5:	85 c0                	test   eax,eax
c00188e7:	74 2c                	je     c0018915 <Vm::faultHandler(regs*)+0xda0>
c00188e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188ec:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00188ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00188f2:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00188f5:	0f b7 d2             	movzx  edx,dx
c00188f8:	66 89 95 6a ff ff ff 	mov    WORD PTR [ebp-0x96],dx
c00188ff:	89 85 64 ff ff ff    	mov    DWORD PTR [ebp-0x9c],eax
c0018905:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
c001890b:	66 8b 95 6a ff ff ff 	mov    dx,WORD PTR [ebp-0x96]
c0018912:	ef                   	out    dx,eax
c0018913:	eb 2f                	jmp    c0018944 <Vm::faultHandler(regs*)+0xdcf>
c0018915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018918:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001891b:	0f b7 c0             	movzx  eax,ax
c001891e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018921:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018924:	0f b7 d2             	movzx  edx,dx
c0018927:	66 89 95 62 ff ff ff 	mov    WORD PTR [ebp-0x9e],dx
c001892e:	66 89 85 60 ff ff ff 	mov    WORD PTR [ebp-0xa0],ax
c0018935:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [ebp-0xa0]
c001893b:	66 8b 95 62 ff ff ff 	mov    dx,WORD PTR [ebp-0x9e]
c0018942:	66 ef                	out    dx,ax
c0018944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018947:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001894a:	8d 50 01             	lea    edx,[eax+0x1]
c001894d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018950:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018953:	b0 01                	mov    al,0x1
c0018955:	e9 b9 00 00 00       	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c001895a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001895d:	83 c0 05             	add    eax,0x5
c0018960:	8a 00                	mov    al,BYTE PTR [eax]
c0018962:	0f b6 c0             	movzx  eax,al
c0018965:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c001896b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001896e:	83 c0 04             	add    eax,0x4
c0018971:	8a 00                	mov    al,BYTE PTR [eax]
c0018973:	0f b6 f8             	movzx  edi,al
c0018976:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018979:	83 c0 03             	add    eax,0x3
c001897c:	8a 00                	mov    al,BYTE PTR [eax]
c001897e:	0f b6 f0             	movzx  esi,al
c0018981:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018984:	83 c0 02             	add    eax,0x2
c0018987:	8a 00                	mov    al,BYTE PTR [eax]
c0018989:	0f b6 d8             	movzx  ebx,al
c001898c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001898f:	83 c0 01             	add    eax,0x1
c0018992:	8a 00                	mov    al,BYTE PTR [eax]
c0018994:	0f b6 c8             	movzx  ecx,al
c0018997:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001899a:	8a 00                	mov    al,BYTE PTR [eax]
c001899c:	0f b6 d0             	movzx  edx,al
c001899f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00189a2:	8a 00                	mov    al,BYTE PTR [eax]
c00189a4:	0f b6 c0             	movzx  eax,al
c00189a7:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00189ad:	57                   	push   edi
c00189ae:	56                   	push   esi
c00189af:	53                   	push   ebx
c00189b0:	51                   	push   ecx
c00189b1:	52                   	push   edx
c00189b2:	50                   	push   eax
c00189b3:	68 c0 53 02 c0       	push   0xc00253c0
c00189b8:	e8 a9 e5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00189bd:	83 c4 20             	add    esp,0x20
c00189c0:	83 ec 0c             	sub    esp,0xc
c00189c3:	6a 60                	push   0x60
c00189c5:	e8 2b e6 ff ff       	call   c0016ff5 <Vm::inbv(unsigned short)>
c00189ca:	83 c4 10             	add    esp,0x10
c00189cd:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00189d0:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c00189d4:	83 f8 1c             	cmp    eax,0x1c
c00189d7:	74 09                	je     c00189e2 <Vm::faultHandler(regs*)+0xe6d>
c00189d9:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c00189dd:	83 f8 5a             	cmp    eax,0x5a
c00189e0:	75 24                	jne    c0018a06 <Vm::faultHandler(regs*)+0xe91>
c00189e2:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c00189e6:	83 f8 1c             	cmp    eax,0x1c
c00189e9:	74 09                	je     c00189f4 <Vm::faultHandler(regs*)+0xe7f>
c00189eb:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c00189ef:	83 f8 5a             	cmp    eax,0x5a
c00189f2:	75 15                	jne    c0018a09 <Vm::faultHandler(regs*)+0xe94>
c00189f4:	83 ec 0c             	sub    esp,0xc
c00189f7:	6a 60                	push   0x60
c00189f9:	e8 f7 e5 ff ff       	call   c0016ff5 <Vm::inbv(unsigned short)>
c00189fe:	83 c4 10             	add    esp,0x10
c0018a01:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0018a04:	eb dc                	jmp    c00189e2 <Vm::faultHandler(regs*)+0xe6d>
c0018a06:	90                   	nop
c0018a07:	eb b7                	jmp    c00189c0 <Vm::faultHandler(regs*)+0xe4b>
c0018a09:	90                   	nop
c0018a0a:	b0 00                	mov    al,0x0
c0018a0c:	eb 05                	jmp    c0018a13 <Vm::faultHandler(regs*)+0xe9e>
c0018a0e:	e9 39 f2 ff ff       	jmp    c0017c4c <Vm::faultHandler(regs*)+0xd7>
c0018a13:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018a16:	5b                   	pop    ebx
c0018a17:	5e                   	pop    esi
c0018a18:	5f                   	pop    edi
c0018a19:	5d                   	pop    ebp
c0018a1a:	c3                   	ret    
c0018a1b:	90                   	nop

c0018a1c <IOAPIC::close(int, int, void*)>:
c0018a1c:	b8 00 00 00 00       	mov    eax,0x0
c0018a21:	c3                   	ret    

c0018a22 <apicGetBase()>:
c0018a22:	55                   	push   ebp
c0018a23:	89 e5                	mov    ebp,esp
c0018a25:	83 ec 18             	sub    esp,0x18
c0018a28:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0018a2d:	83 e0 08             	and    eax,0x8
c0018a30:	0f b6 c0             	movzx  eax,al
c0018a33:	85 c0                	test   eax,eax
c0018a35:	75 07                	jne    c0018a3e <apicGetBase()+0x1c>
c0018a37:	b8 00 00 00 00       	mov    eax,0x0
c0018a3c:	eb 1b                	jmp    c0018a59 <apicGetBase()+0x37>
c0018a3e:	83 ec 0c             	sub    esp,0xc
c0018a41:	6a 1b                	push   0x1b
c0018a43:	e8 63 15 00 00       	call   c0019fab <x86rdmsr(unsigned int)>
c0018a48:	83 c4 10             	add    esp,0x10
c0018a4b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018a4e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0018a51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018a54:	25 00 00 ff ff       	and    eax,0xffff0000
c0018a59:	c9                   	leave  
c0018a5a:	c3                   	ret    
c0018a5b:	90                   	nop

c0018a5c <IOAPIC::IOAPIC()>:
c0018a5c:	83 ec 0c             	sub    esp,0xc
c0018a5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a63:	83 ec 08             	sub    esp,0x8
c0018a66:	68 80 57 02 c0       	push   0xc0025780
c0018a6b:	50                   	push   eax
c0018a6c:	e8 e7 10 ff ff       	call   c0009b58 <Device::Device(char const*)>
c0018a71:	83 c4 10             	add    esp,0x10
c0018a74:	ba a0 57 02 c0       	mov    edx,0xc00257a0
c0018a79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a7d:	89 10                	mov    DWORD PTR [eax],edx
c0018a7f:	90                   	nop
c0018a80:	83 c4 0c             	add    esp,0xc
c0018a83:	c3                   	ret    

c0018a84 <apicOpen()>:
c0018a84:	55                   	push   ebp
c0018a85:	89 e5                	mov    ebp,esp
c0018a87:	53                   	push   ebx
c0018a88:	83 ec 34             	sub    esp,0x34
c0018a8b:	83 ec 0c             	sub    esp,0xc
c0018a8e:	68 88 57 02 c0       	push   0xc0025788
c0018a93:	e8 ce e4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018a98:	83 c4 10             	add    esp,0x10
c0018a9b:	a0 00 d4 02 c0       	mov    al,ds:0xc002d400
c0018aa0:	83 f0 01             	xor    eax,0x1
c0018aa3:	0f b6 c0             	movzx  eax,al
c0018aa6:	85 c0                	test   eax,eax
c0018aa8:	0f 84 a3 00 00 00    	je     c0018b51 <apicOpen()+0xcd>
c0018aae:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0018ab2:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c0018ab7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018abb:	0f b6 c0             	movzx  eax,al
c0018abe:	39 c2                	cmp    edx,eax
c0018ac0:	0f 83 84 00 00 00    	jae    c0018b4a <apicOpen()+0xc6>
c0018ac6:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0018acd:	83 ec 0c             	sub    esp,0xc
c0018ad0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0018ad3:	e8 90 6b ff ff       	call   c000f668 <malloc>
c0018ad8:	83 c4 10             	add    esp,0x10
c0018adb:	89 c3                	mov    ebx,eax
c0018add:	83 ec 0c             	sub    esp,0xc
c0018ae0:	53                   	push   ebx
c0018ae1:	e8 76 ff ff ff       	call   c0018a5c <IOAPIC::IOAPIC()>
c0018ae6:	83 c4 10             	add    esp,0x10
c0018ae9:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0018aec:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0018af0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018af3:	89 14 85 e0 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c20],edx
c0018afa:	a1 c0 d3 02 c0       	mov    eax,ds:0xc002d3c0
c0018aff:	83 c0 01             	add    eax,0x1
c0018b02:	a3 c0 d3 02 c0       	mov    ds:0xc002d3c0,eax
c0018b07:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0018b0c:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018b12:	83 ec 08             	sub    esp,0x8
c0018b15:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018b18:	50                   	push   eax
c0018b19:	e8 d8 0e ff ff       	call   c00099f6 <Device::addChild(Device*)>
c0018b1e:	83 c4 10             	add    esp,0x10
c0018b21:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b26:	83 c0 08             	add    eax,0x8
c0018b29:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b2b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018b2f:	6a 00                	push   0x0
c0018b31:	6a 00                	push   0x0
c0018b33:	52                   	push   edx
c0018b34:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018b37:	ff d0                	call   eax
c0018b39:	83 c4 10             	add    esp,0x10
c0018b3c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0018b3f:	83 c0 01             	add    eax,0x1
c0018b42:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0018b45:	e9 68 ff ff ff       	jmp    c0018ab2 <apicOpen()+0x2e>
c0018b4a:	c6 05 00 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d400,0x1
c0018b51:	e8 cc fe ff ff       	call   c0018a22 <apicGetBase()>
c0018b56:	05 f0 00 00 00       	add    eax,0xf0
c0018b5b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018b5e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b63:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018b66:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0018b6d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0018b74:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018b77:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018b7a:	89 10                	mov    DWORD PTR [eax],edx
c0018b7c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0018b83:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c0018b88:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0018b8b:	7d 7c                	jge    c0018c09 <apicOpen()+0x185>
c0018b8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018b90:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018b97:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0018b9a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018b9d:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018ba4:	c1 e8 08             	shr    eax,0x8
c0018ba7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018bab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018bae:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018bb5:	c1 e8 18             	shr    eax,0x18
c0018bb8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0018bbb:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018bbf:	3d ff 00 00 00       	cmp    eax,0xff
c0018bc4:	75 3a                	jne    c0018c00 <apicOpen()+0x17c>
c0018bc6:	e8 57 fe ff ff       	call   c0018a22 <apicGetBase()>
c0018bcb:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0018bcf:	83 fa 01             	cmp    edx,0x1
c0018bd2:	75 07                	jne    c0018bdb <apicOpen()+0x157>
c0018bd4:	ba 60 03 00 00       	mov    edx,0x360
c0018bd9:	eb 05                	jmp    c0018be0 <apicOpen()+0x15c>
c0018bdb:	ba 50 03 00 00       	mov    edx,0x350
c0018be0:	01 d0                	add    eax,edx
c0018be2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018be5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018be8:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bea:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018bed:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018bf4:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018bf8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018bfb:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018bfe:	89 10                	mov    DWORD PTR [eax],edx
c0018c00:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018c04:	e9 7a ff ff ff       	jmp    c0018b83 <apicOpen()+0xff>
c0018c09:	90                   	nop
c0018c0a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018c0d:	c9                   	leave  
c0018c0e:	c3                   	ret    
c0018c0f:	90                   	nop

c0018c10 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018c10:	55                   	push   ebp
c0018c11:	89 e5                	mov    ebp,esp
c0018c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018c1c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018c1f:	72 1d                	jb     c0018c3e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c24:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0018c2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c2d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018c33:	01 d0                	add    eax,edx
c0018c35:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018c38:	73 04                	jae    c0018c3e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018c3a:	b0 01                	mov    al,0x1
c0018c3c:	eb 02                	jmp    c0018c40 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0018c3e:	b0 00                	mov    al,0x0
c0018c40:	5d                   	pop    ebp
c0018c41:	c3                   	ret    

c0018c42 <IOAPIC::read(int)>:
c0018c42:	55                   	push   ebp
c0018c43:	89 e5                	mov    ebp,esp
c0018c45:	83 ec 10             	sub    esp,0x10
c0018c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c4b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018c51:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018c54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018c57:	0f b6 d0             	movzx  edx,al
c0018c5a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018c5d:	89 10                	mov    DWORD PTR [eax],edx
c0018c5f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018c62:	83 c0 10             	add    eax,0x10
c0018c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c67:	c9                   	leave  
c0018c68:	c3                   	ret    
c0018c69:	90                   	nop

c0018c6a <IOAPIC::open(int, int, void*)>:
c0018c6a:	55                   	push   ebp
c0018c6b:	89 e5                	mov    ebp,esp
c0018c6d:	57                   	push   edi
c0018c6e:	56                   	push   esi
c0018c6f:	53                   	push   ebx
c0018c70:	83 ec 04             	sub    esp,0x4
c0018c73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c76:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018c79:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018c7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c82:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018c88:	8b 14 85 80 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3180]
c0018c8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c92:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0018c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c9b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018ca1:	8b 14 85 00 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3100]
c0018ca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cab:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0018cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cb4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018cba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cbd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018cc3:	0f b6 f0             	movzx  esi,al
c0018cc6:	89 d0                	mov    eax,edx
c0018cc8:	ba 00 00 00 00       	mov    edx,0x0
c0018ccd:	89 c7                	mov    edi,eax
c0018ccf:	83 e7 ff             	and    edi,0xffffffff
c0018cd2:	89 f9                	mov    ecx,edi
c0018cd4:	0f b6 da             	movzx  ebx,dl
c0018cd7:	89 c8                	mov    eax,ecx
c0018cd9:	89 da                	mov    edx,ebx
c0018cdb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0018cde:	8d 5e 08             	lea    ebx,[esi+0x8]
c0018ce1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0018ce5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0018ce9:	83 e0 00             	and    eax,0x0
c0018cec:	09 d0                	or     eax,edx
c0018cee:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0018cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cf5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018cfb:	8d 50 01             	lea    edx,[eax+0x1]
c0018cfe:	88 d1                	mov    cl,dl
c0018d00:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018d03:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0018d09:	0f b6 d0             	movzx  edx,al
c0018d0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d0f:	83 c2 08             	add    edx,0x8
c0018d12:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0018d16:	0f b6 c9             	movzx  ecx,cl
c0018d19:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0018d1f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0018d23:	6a 01                	push   0x1
c0018d25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018d28:	e8 15 ff ff ff       	call   c0018c42 <IOAPIC::read(int)>
c0018d2d:	83 c4 08             	add    esp,0x8
c0018d30:	c1 f8 10             	sar    eax,0x10
c0018d33:	0f b6 c0             	movzx  eax,al
c0018d36:	8d 50 01             	lea    edx,[eax+0x1]
c0018d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d3c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0018d42:	b8 00 00 00 00       	mov    eax,0x0
c0018d47:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018d4a:	5b                   	pop    ebx
c0018d4b:	5e                   	pop    esi
c0018d4c:	5f                   	pop    edi
c0018d4d:	5d                   	pop    ebp
c0018d4e:	c3                   	ret    
c0018d4f:	90                   	nop

c0018d50 <IOAPIC::write(int, int)>:
c0018d50:	55                   	push   ebp
c0018d51:	89 e5                	mov    ebp,esp
c0018d53:	83 ec 10             	sub    esp,0x10
c0018d56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d59:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018d5f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018d62:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018d65:	0f b6 d0             	movzx  edx,al
c0018d68:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018d6b:	89 10                	mov    DWORD PTR [eax],edx
c0018d6d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018d70:	8d 50 10             	lea    edx,[eax+0x10]
c0018d73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018d76:	89 02                	mov    DWORD PTR [edx],eax
c0018d78:	90                   	nop
c0018d79:	c9                   	leave  
c0018d7a:	c3                   	ret    
c0018d7b:	90                   	nop

c0018d7c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0018d7c:	55                   	push   ebp
c0018d7d:	89 e5                	mov    ebp,esp
c0018d7f:	53                   	push   ebx
c0018d80:	83 ec 2c             	sub    esp,0x2c
c0018d83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018d86:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0018d89:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0018d8c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0018d8f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0018d92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018d95:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018d98:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0018d9b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0018d9e:	88 d8                	mov    al,bl
c0018da0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0018da3:	88 c8                	mov    al,cl
c0018da5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0018da8:	88 d0                	mov    al,dl
c0018daa:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0018dad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018db1:	83 c0 08             	add    eax,0x8
c0018db4:	d1 e0                	shl    eax,1
c0018db6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018db9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018dbd:	83 c0 08             	add    eax,0x8
c0018dc0:	d1 e0                	shl    eax,1
c0018dc2:	83 c0 01             	add    eax,0x1
c0018dc5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018dc8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018dcb:	50                   	push   eax
c0018dcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018dcf:	e8 6e fe ff ff       	call   c0018c42 <IOAPIC::read(int)>
c0018dd4:	83 c4 08             	add    esp,0x8
c0018dd7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018dda:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0018de1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018de4:	c1 e0 18             	shl    eax,0x18
c0018de7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0018dea:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0018ded:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018df0:	52                   	push   edx
c0018df1:	50                   	push   eax
c0018df2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018df5:	e8 56 ff ff ff       	call   c0018d50 <IOAPIC::write(int, int)>
c0018dfa:	83 c4 0c             	add    esp,0xc
c0018dfd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018e00:	50                   	push   eax
c0018e01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018e04:	e8 39 fe ff ff       	call   c0018c42 <IOAPIC::read(int)>
c0018e09:	83 c4 08             	add    esp,0x8
c0018e0c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018e0f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0018e16:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0018e1d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0018e24:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0018e28:	85 c0                	test   eax,eax
c0018e2a:	74 09                	je     c0018e35 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0018e2c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0018e33:	eb 07                	jmp    c0018e3c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0018e35:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0018e3c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0018e40:	85 c0                	test   eax,eax
c0018e42:	74 09                	je     c0018e4d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0018e44:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0018e4b:	eb 07                	jmp    c0018e54 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0018e4d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0018e54:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0018e5b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0018e5f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0018e62:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0018e65:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018e68:	52                   	push   edx
c0018e69:	50                   	push   eax
c0018e6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018e6d:	e8 de fe ff ff       	call   c0018d50 <IOAPIC::write(int, int)>
c0018e72:	83 c4 0c             	add    esp,0xc
c0018e75:	90                   	nop
c0018e76:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018e79:	c9                   	leave  
c0018e7a:	c3                   	ret    
c0018e7b:	90                   	nop

c0018e7c <noCopro(unsigned long)>:
c0018e7c:	c3                   	ret    

c0018e7d <HalRestart()>:
c0018e7d:	e4 64                	in     al,0x64
c0018e7f:	a8 02                	test   al,0x2
c0018e81:	75 fa                	jne    c0018e7d <HalRestart()>
c0018e83:	b0 fe                	mov    al,0xfe
c0018e85:	e6 64                	out    0x64,al
c0018e87:	c3                   	ret    

c0018e88 <HalShutdown()>:
c0018e88:	c3                   	ret    

c0018e89 <HalSleep()>:
c0018e89:	c3                   	ret    

c0018e8a <CPU::close(int, int, void*)>:
c0018e8a:	31 c0                	xor    eax,eax
c0018e8c:	c3                   	ret    

c0018e8d <x86ReadCMOS(unsigned char)>:
c0018e8d:	83 ec 14             	sub    esp,0x14
c0018e90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e94:	88 04 24             	mov    BYTE PTR [esp],al
c0018e97:	a0 2c d4 02 c0       	mov    al,ds:0xc002d42c
c0018e9c:	0f b6 c0             	movzx  eax,al
c0018e9f:	85 c0                	test   eax,eax
c0018ea1:	74 04                	je     c0018ea7 <x86ReadCMOS(unsigned char)+0x1a>
c0018ea3:	b2 00                	mov    dl,0x0
c0018ea5:	eb 02                	jmp    c0018ea9 <x86ReadCMOS(unsigned char)+0x1c>
c0018ea7:	b2 80                	mov    dl,0x80
c0018ea9:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018eac:	09 d0                	or     eax,edx
c0018eae:	0f b6 c0             	movzx  eax,al
c0018eb1:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0018eb8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018ebc:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018ec0:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018ec5:	ee                   	out    dx,al
c0018ec6:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018ecd:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018ed2:	89 c2                	mov    edx,eax
c0018ed4:	ec                   	in     al,dx
c0018ed5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018ed9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018edd:	83 c4 14             	add    esp,0x14
c0018ee0:	c3                   	ret    

c0018ee1 <x86WriteCMOS(unsigned char, unsigned char)>:
c0018ee1:	83 ec 18             	sub    esp,0x18
c0018ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ee8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018eec:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018ef0:	88 d0                	mov    al,dl
c0018ef2:	88 04 24             	mov    BYTE PTR [esp],al
c0018ef5:	a0 2c d4 02 c0       	mov    al,ds:0xc002d42c
c0018efa:	0f b6 c0             	movzx  eax,al
c0018efd:	85 c0                	test   eax,eax
c0018eff:	74 04                	je     c0018f05 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018f01:	b2 00                	mov    dl,0x0
c0018f03:	eb 02                	jmp    c0018f07 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0018f05:	b2 80                	mov    dl,0x80
c0018f07:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018f0b:	09 d0                	or     eax,edx
c0018f0d:	0f b6 c0             	movzx  eax,al
c0018f10:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018f17:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f1b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018f1f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018f24:	ee                   	out    dx,al
c0018f25:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018f29:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018f30:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018f34:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0018f38:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018f3d:	ee                   	out    dx,al
c0018f3e:	90                   	nop
c0018f3f:	83 c4 18             	add    esp,0x18
c0018f42:	c3                   	ret    

c0018f43 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018f43:	60                   	pusha  
c0018f44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f4c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018f50:	9c                   	pushf  
c0018f51:	fa                   	cli    
c0018f52:	0f 09                	wbinvd 
c0018f54:	0f 30                	wrmsr  
c0018f56:	9d                   	popf   
c0018f57:	89 c2                	mov    edx,eax
c0018f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f5d:	89 10                	mov    DWORD PTR [eax],edx
c0018f5f:	61                   	popa   
c0018f60:	90                   	nop
c0018f61:	c3                   	ret    

c0018f62 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018f62:	60                   	pusha  
c0018f63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f67:	89 c1                	mov    ecx,eax
c0018f69:	9c                   	pushf  
c0018f6a:	fa                   	cli    
c0018f6b:	0f 09                	wbinvd 
c0018f6d:	31 c0                	xor    eax,eax
c0018f6f:	31 d2                	xor    edx,edx
c0018f71:	0f 32                	rdmsr  
c0018f73:	9d                   	popf   
c0018f74:	89 c2                	mov    edx,eax
c0018f76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f7a:	89 10                	mov    DWORD PTR [eax],edx
c0018f7c:	61                   	popa   
c0018f7d:	90                   	nop
c0018f7e:	c3                   	ret    

c0018f7f <AMD_K6_writeback(int, int, int)>:
c0018f7f:	83 ec 20             	sub    esp,0x20
c0018f82:	a1 70 d1 02 c0       	mov    eax,ds:0xc002d170
c0018f87:	c1 e8 14             	shr    eax,0x14
c0018f8a:	c1 e8 02             	shr    eax,0x2
c0018f8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018f91:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0018f96:	0f 85 9e 00 00 00    	jne    c001903a <AMD_K6_writeback(int, int, int)+0xbb>
c0018f9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fa0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018fa4:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0018fa9:	75 19                	jne    c0018fc4 <AMD_K6_writeback(int, int, int)+0x45>
c0018fab:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018fb0:	7f 0a                	jg     c0018fbc <AMD_K6_writeback(int, int, int)+0x3d>
c0018fb2:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0018fba:	eb 08                	jmp    c0018fc4 <AMD_K6_writeback(int, int, int)+0x45>
c0018fbc:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018fc4:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0018fc9:	7c 6e                	jl     c0019039 <AMD_K6_writeback(int, int, int)+0xba>
c0018fcb:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0018fd0:	7e 09                	jle    c0018fdb <AMD_K6_writeback(int, int, int)+0x5c>
c0018fd2:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0018fd7:	74 36                	je     c001900f <AMD_K6_writeback(int, int, int)+0x90>
c0018fd9:	eb 5e                	jmp    c0019039 <AMD_K6_writeback(int, int, int)+0xba>
c0018fdb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018fdf:	50                   	push   eax
c0018fe0:	68 82 00 00 c0       	push   0xc0000082
c0018fe5:	e8 78 ff ff ff       	call   c0018f62 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018fea:	83 c4 08             	add    esp,0x8
c0018fed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ff1:	d1 e0                	shl    eax,1
c0018ff3:	83 e0 7f             	and    eax,0x7f
c0018ff6:	89 c2                	mov    edx,eax
c0018ff8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018ffc:	50                   	push   eax
c0018ffd:	6a 00                	push   0x0
c0018fff:	52                   	push   edx
c0019000:	68 82 00 00 c0       	push   0xc0000082
c0019005:	e8 39 ff ff ff       	call   c0018f43 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001900a:	83 c4 10             	add    esp,0x10
c001900d:	eb 2b                	jmp    c001903a <AMD_K6_writeback(int, int, int)+0xbb>
c001900f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019013:	50                   	push   eax
c0019014:	68 82 00 00 c0       	push   0xc0000082
c0019019:	e8 44 ff ff ff       	call   c0018f62 <AMD_K6_read_msr(unsigned int, REGS*)>
c001901e:	83 c4 08             	add    esp,0x8
c0019021:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019025:	50                   	push   eax
c0019026:	6a 00                	push   0x0
c0019028:	6a 00                	push   0x0
c001902a:	68 82 00 00 c0       	push   0xc0000082
c001902f:	e8 0f ff ff ff       	call   c0018f43 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019034:	83 c4 10             	add    esp,0x10
c0019037:	eb 01                	jmp    c001903a <AMD_K6_writeback(int, int, int)+0xbb>
c0019039:	90                   	nop
c001903a:	90                   	nop
c001903b:	83 c4 20             	add    esp,0x20
c001903e:	c3                   	ret    

c001903f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001903f:	56                   	push   esi
c0019040:	53                   	push   ebx
c0019041:	a1 60 70 02 c0       	mov    eax,ds:0xc0027060
c0019046:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001904a:	75 32                	jne    c001907e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001904c:	8b 15 20 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d420
c0019052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019056:	89 10                	mov    DWORD PTR [eax],edx
c0019058:	8b 15 1c d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d41c
c001905e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019062:	89 10                	mov    DWORD PTR [eax],edx
c0019064:	8b 15 18 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d418
c001906a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001906e:	89 10                	mov    DWORD PTR [eax],edx
c0019070:	8b 15 14 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d414
c0019076:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001907a:	89 10                	mov    DWORD PTR [eax],edx
c001907c:	eb 5c                	jmp    c00190da <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c001907e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019082:	ba 00 00 00 00       	mov    edx,0x0
c0019087:	89 d1                	mov    ecx,edx
c0019089:	0f a2                	cpuid  
c001908b:	89 c6                	mov    esi,eax
c001908d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019091:	89 30                	mov    DWORD PTR [eax],esi
c0019093:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019097:	89 18                	mov    DWORD PTR [eax],ebx
c0019099:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001909d:	89 08                	mov    DWORD PTR [eax],ecx
c001909f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190a3:	89 10                	mov    DWORD PTR [eax],edx
c00190a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00190a9:	a3 60 70 02 c0       	mov    ds:0xc0027060,eax
c00190ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00190b4:	a3 20 d4 02 c0       	mov    ds:0xc002d420,eax
c00190b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00190bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00190bf:	a3 1c d4 02 c0       	mov    ds:0xc002d41c,eax
c00190c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00190c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00190ca:	a3 18 d4 02 c0       	mov    ds:0xc002d418,eax
c00190cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00190d5:	a3 14 d4 02 c0       	mov    ds:0xc002d414,eax
c00190da:	5b                   	pop    ebx
c00190db:	5e                   	pop    esi
c00190dc:	c3                   	ret    

c00190dd <cpuidCheckEDX(unsigned int)>:
c00190dd:	83 ec 10             	sub    esp,0x10
c00190e0:	89 e0                	mov    eax,esp
c00190e2:	50                   	push   eax
c00190e3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00190e7:	50                   	push   eax
c00190e8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00190ec:	50                   	push   eax
c00190ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190f1:	50                   	push   eax
c00190f2:	6a 01                	push   0x1
c00190f4:	e8 46 ff ff ff       	call   c001903f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190f9:	83 c4 14             	add    esp,0x14
c00190fc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00190ff:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019103:	0f 95 c0             	setne  al
c0019106:	83 c4 10             	add    esp,0x10
c0019109:	c3                   	ret    

c001910a <cpuidCheckECX(unsigned int)>:
c001910a:	83 ec 10             	sub    esp,0x10
c001910d:	89 e0                	mov    eax,esp
c001910f:	50                   	push   eax
c0019110:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019114:	50                   	push   eax
c0019115:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019119:	50                   	push   eax
c001911a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001911e:	50                   	push   eax
c001911f:	6a 01                	push   0x1
c0019121:	e8 19 ff ff ff       	call   c001903f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019126:	83 c4 14             	add    esp,0x14
c0019129:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001912d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019131:	0f 95 c0             	setne  al
c0019134:	83 c4 10             	add    esp,0x10
c0019137:	c3                   	ret    

c0019138 <cpuidCheckExtendedEBX(unsigned int)>:
c0019138:	83 ec 10             	sub    esp,0x10
c001913b:	89 e0                	mov    eax,esp
c001913d:	50                   	push   eax
c001913e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019142:	50                   	push   eax
c0019143:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019147:	50                   	push   eax
c0019148:	8d 44 24 18          	lea    eax,[esp+0x18]
c001914c:	50                   	push   eax
c001914d:	6a 07                	push   0x7
c001914f:	e8 eb fe ff ff       	call   c001903f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019154:	83 c4 14             	add    esp,0x14
c0019157:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001915b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001915f:	0f 95 c0             	setne  al
c0019162:	83 c4 10             	add    esp,0x10
c0019165:	c3                   	ret    

c0019166 <cpuidCheckExtendedECX(unsigned int)>:
c0019166:	83 ec 10             	sub    esp,0x10
c0019169:	89 e0                	mov    eax,esp
c001916b:	50                   	push   eax
c001916c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019170:	50                   	push   eax
c0019171:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019175:	50                   	push   eax
c0019176:	8d 44 24 18          	lea    eax,[esp+0x18]
c001917a:	50                   	push   eax
c001917b:	6a 07                	push   0x7
c001917d:	e8 bd fe ff ff       	call   c001903f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019182:	83 c4 14             	add    esp,0x14
c0019185:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019189:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001918d:	0f 95 c0             	setne  al
c0019190:	83 c4 10             	add    esp,0x10
c0019193:	c3                   	ret    

c0019194 <HalDetectFeatures()>:
c0019194:	57                   	push   edi
c0019195:	56                   	push   esi
c0019196:	53                   	push   ebx
c0019197:	81 ec 90 00 00 00    	sub    esp,0x90
c001919d:	83 ec 04             	sub    esp,0x4
c00191a0:	6a 08                	push   0x8
c00191a2:	6a 00                	push   0x0
c00191a4:	68 4c d4 02 c0       	push   0xc002d44c
c00191a9:	e8 42 73 fe ff       	call   c00004f0 <memset>
c00191ae:	83 c4 10             	add    esp,0x10
c00191b1:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c00191b6:	83 c8 04             	or     eax,0x4
c00191b9:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c00191be:	83 ec 0c             	sub    esp,0xc
c00191c1:	68 c4 57 02 c0       	push   0xc00257c4
c00191c6:	e8 9b dd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00191cb:	83 c4 10             	add    esp,0x10
c00191ce:	e8 26 70 fe ff       	call   c00001f9 <detectCPUID>
c00191d3:	85 c0                	test   eax,eax
c00191d5:	0f 95 c0             	setne  al
c00191d8:	83 e0 01             	and    eax,0x1
c00191db:	83 e0 01             	and    eax,0x1
c00191de:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00191e1:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c00191e6:	83 e0 fd             	and    eax,0xfffffffd
c00191e9:	88 c2                	mov    dl,al
c00191eb:	88 c8                	mov    al,cl
c00191ed:	09 d0                	or     eax,edx
c00191ef:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c00191f4:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c00191f9:	83 e0 02             	and    eax,0x2
c00191fc:	0f b6 c0             	movzx  eax,al
c00191ff:	85 c0                	test   eax,eax
c0019201:	0f 84 84 02 00 00    	je     c001948b <HalDetectFeatures()+0x2f7>
c0019207:	83 ec 0c             	sub    esp,0xc
c001920a:	6a 20                	push   0x20
c001920c:	e8 cc fe ff ff       	call   c00190dd <cpuidCheckEDX(unsigned int)>
c0019211:	83 c4 10             	add    esp,0x10
c0019214:	83 e0 01             	and    eax,0x1
c0019217:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001921e:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019223:	83 e0 f7             	and    eax,0xfffffff7
c0019226:	88 c2                	mov    dl,al
c0019228:	88 c8                	mov    al,cl
c001922a:	09 d0                	or     eax,edx
c001922c:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c0019231:	83 ec 0c             	sub    esp,0xc
c0019234:	68 00 00 00 04       	push   0x4000000
c0019239:	e8 9f fe ff ff       	call   c00190dd <cpuidCheckEDX(unsigned int)>
c001923e:	83 c4 10             	add    esp,0x10
c0019241:	89 c1                	mov    ecx,eax
c0019243:	83 e1 01             	and    ecx,0x1
c0019246:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c001924b:	83 e0 fe             	and    eax,0xfffffffe
c001924e:	88 c2                	mov    dl,al
c0019250:	88 c8                	mov    al,cl
c0019252:	09 d0                	or     eax,edx
c0019254:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c0019259:	83 ec 0c             	sub    esp,0xc
c001925c:	68 80 00 00 00       	push   0x80
c0019261:	e8 77 fe ff ff       	call   c00190dd <cpuidCheckEDX(unsigned int)>
c0019266:	83 c4 10             	add    esp,0x10
c0019269:	89 c1                	mov    ecx,eax
c001926b:	c1 e1 07             	shl    ecx,0x7
c001926e:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c0019273:	83 e0 7f             	and    eax,0x7f
c0019276:	88 c2                	mov    dl,al
c0019278:	88 c8                	mov    al,cl
c001927a:	09 d0                	or     eax,edx
c001927c:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c0019281:	83 ec 0c             	sub    esp,0xc
c0019284:	68 00 00 80 00       	push   0x800000
c0019289:	e8 4f fe ff ff       	call   c00190dd <cpuidCheckEDX(unsigned int)>
c001928e:	83 c4 10             	add    esp,0x10
c0019291:	83 e0 01             	and    eax,0x1
c0019294:	89 c1                	mov    ecx,eax
c0019296:	c1 e1 05             	shl    ecx,0x5
c0019299:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001929e:	83 e0 df             	and    eax,0xffffffdf
c00192a1:	88 c2                	mov    dl,al
c00192a3:	88 c8                	mov    al,cl
c00192a5:	09 d0                	or     eax,edx
c00192a7:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c00192ac:	83 ec 0c             	sub    esp,0xc
c00192af:	6a 01                	push   0x1
c00192b1:	e8 c2 3e ff ff       	call   c000d178 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00192b6:	83 c4 10             	add    esp,0x10
c00192b9:	0f b6 c0             	movzx  eax,al
c00192bc:	85 c0                	test   eax,eax
c00192be:	75 17                	jne    c00192d7 <HalDetectFeatures()+0x143>
c00192c0:	83 ec 0c             	sub    esp,0xc
c00192c3:	68 00 04 00 00       	push   0x400
c00192c8:	e8 ab 3e ff ff       	call   c000d178 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00192cd:	83 c4 10             	add    esp,0x10
c00192d0:	0f b6 c0             	movzx  eax,al
c00192d3:	85 c0                	test   eax,eax
c00192d5:	74 04                	je     c00192db <HalDetectFeatures()+0x147>
c00192d7:	b0 01                	mov    al,0x1
c00192d9:	eb 02                	jmp    c00192dd <HalDetectFeatures()+0x149>
c00192db:	b0 00                	mov    al,0x0
c00192dd:	0f b6 c0             	movzx  eax,al
c00192e0:	85 c0                	test   eax,eax
c00192e2:	74 0f                	je     c00192f3 <HalDetectFeatures()+0x15f>
c00192e4:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c00192e9:	83 e0 fe             	and    eax,0xfffffffe
c00192ec:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c00192f1:	eb 28                	jmp    c001931b <HalDetectFeatures()+0x187>
c00192f3:	83 ec 0c             	sub    esp,0xc
c00192f6:	68 00 02 00 00       	push   0x200
c00192fb:	e8 dd fd ff ff       	call   c00190dd <cpuidCheckEDX(unsigned int)>
c0019300:	83 c4 10             	add    esp,0x10
c0019303:	89 c1                	mov    ecx,eax
c0019305:	83 e1 01             	and    ecx,0x1
c0019308:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001930d:	83 e0 fe             	and    eax,0xfffffffe
c0019310:	88 c2                	mov    dl,al
c0019312:	88 c8                	mov    al,cl
c0019314:	09 d0                	or     eax,edx
c0019316:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c001931b:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019320:	83 e0 01             	and    eax,0x1
c0019323:	0f b6 c0             	movzx  eax,al
c0019326:	85 c0                	test   eax,eax
c0019328:	74 1c                	je     c0019346 <HalDetectFeatures()+0x1b2>
c001932a:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001932f:	83 e0 08             	and    eax,0x8
c0019332:	0f b6 c0             	movzx  eax,al
c0019335:	85 c0                	test   eax,eax
c0019337:	75 0d                	jne    c0019346 <HalDetectFeatures()+0x1b2>
c0019339:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001933e:	83 e0 fe             	and    eax,0xfffffffe
c0019341:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c0019346:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c001934e:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0019356:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c001935e:	85 c0                	test   eax,eax
c0019360:	0f 84 ab 00 00 00    	je     c0019411 <HalDetectFeatures()+0x27d>
c0019366:	83 ec 0c             	sub    esp,0xc
c0019369:	6a 01                	push   0x1
c001936b:	e8 9a fd ff ff       	call   c001910a <cpuidCheckECX(unsigned int)>
c0019370:	83 c4 10             	add    esp,0x10
c0019373:	83 e0 01             	and    eax,0x1
c0019376:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019379:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c001937e:	83 e0 fd             	and    eax,0xfffffffd
c0019381:	88 c2                	mov    dl,al
c0019383:	88 c8                	mov    al,cl
c0019385:	09 d0                	or     eax,edx
c0019387:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c001938c:	83 ec 0c             	sub    esp,0xc
c001938f:	68 00 02 00 00       	push   0x200
c0019394:	e8 71 fd ff ff       	call   c001910a <cpuidCheckECX(unsigned int)>
c0019399:	83 c4 10             	add    esp,0x10
c001939c:	83 e0 01             	and    eax,0x1
c001939f:	89 c1                	mov    ecx,eax
c00193a1:	c1 e1 04             	shl    ecx,0x4
c00193a4:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c00193a9:	83 e0 ef             	and    eax,0xffffffef
c00193ac:	88 c2                	mov    dl,al
c00193ae:	88 c8                	mov    al,cl
c00193b0:	09 d0                	or     eax,edx
c00193b2:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c00193b7:	83 ec 0c             	sub    esp,0xc
c00193ba:	68 00 00 08 00       	push   0x80000
c00193bf:	e8 46 fd ff ff       	call   c001910a <cpuidCheckECX(unsigned int)>
c00193c4:	83 c4 10             	add    esp,0x10
c00193c7:	83 e0 01             	and    eax,0x1
c00193ca:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00193d1:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c00193d6:	83 e0 fb             	and    eax,0xfffffffb
c00193d9:	88 c2                	mov    dl,al
c00193db:	88 c8                	mov    al,cl
c00193dd:	09 d0                	or     eax,edx
c00193df:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c00193e4:	83 ec 0c             	sub    esp,0xc
c00193e7:	68 00 00 10 00       	push   0x100000
c00193ec:	e8 19 fd ff ff       	call   c001910a <cpuidCheckECX(unsigned int)>
c00193f1:	83 c4 10             	add    esp,0x10
c00193f4:	83 e0 01             	and    eax,0x1
c00193f7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00193fe:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c0019403:	83 e0 f7             	and    eax,0xfffffff7
c0019406:	88 c2                	mov    dl,al
c0019408:	88 c8                	mov    al,cl
c001940a:	09 d0                	or     eax,edx
c001940c:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c0019411:	83 ec 0c             	sub    esp,0xc
c0019414:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019418:	50                   	push   eax
c0019419:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001941d:	50                   	push   eax
c001941e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019422:	50                   	push   eax
c0019423:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019427:	50                   	push   eax
c0019428:	68 00 00 00 80       	push   0x80000000
c001942d:	e8 0d fc ff ff       	call   c001903f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019432:	83 c4 20             	add    esp,0x20
c0019435:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019439:	3d 00 00 00 80       	cmp    eax,0x80000000
c001943e:	76 4b                	jbe    c001948b <HalDetectFeatures()+0x2f7>
c0019440:	83 ec 0c             	sub    esp,0xc
c0019443:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019447:	50                   	push   eax
c0019448:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001944c:	50                   	push   eax
c001944d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019451:	50                   	push   eax
c0019452:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019456:	50                   	push   eax
c0019457:	68 01 00 00 80       	push   0x80000001
c001945c:	e8 de fb ff ff       	call   c001903f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019461:	83 c4 20             	add    esp,0x20
c0019464:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019469:	83 e0 bf             	and    eax,0xffffffbf
c001946c:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c0019471:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c0019476:	83 e0 fd             	and    eax,0xfffffffd
c0019479:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c001947e:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c0019483:	83 e0 fe             	and    eax,0xfffffffe
c0019486:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c001948b:	83 ec 0c             	sub    esp,0xc
c001948e:	68 00 04 00 00       	push   0x400
c0019493:	e8 e0 3c ff ff       	call   c000d178 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019498:	83 c4 10             	add    esp,0x10
c001949b:	0f b6 c0             	movzx  eax,al
c001949e:	85 c0                	test   eax,eax
c00194a0:	74 0d                	je     c00194af <HalDetectFeatures()+0x31b>
c00194a2:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c00194a7:	83 e0 fb             	and    eax,0xfffffffb
c00194aa:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c00194af:	c6 05 48 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d448,0x1
c00194b6:	83 ec 04             	sub    esp,0x4
c00194b9:	6a 0d                	push   0xd
c00194bb:	6a 00                	push   0x0
c00194bd:	68 30 d4 02 c0       	push   0xc002d430
c00194c2:	e8 29 70 fe ff       	call   c00004f0 <memset>
c00194c7:	83 c4 10             	add    esp,0x10
c00194ca:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c00194cf:	83 e0 02             	and    eax,0x2
c00194d2:	0f b6 c0             	movzx  eax,al
c00194d5:	85 c0                	test   eax,eax
c00194d7:	0f 84 16 08 00 00    	je     c0019cf3 <HalDetectFeatures()+0xb5f>
c00194dd:	83 ec 0c             	sub    esp,0xc
c00194e0:	6a 10                	push   0x10
c00194e2:	e8 f6 fb ff ff       	call   c00190dd <cpuidCheckEDX(unsigned int)>
c00194e7:	83 c4 10             	add    esp,0x10
c00194ea:	83 e0 01             	and    eax,0x1
c00194ed:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00194f4:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c00194f9:	83 e0 f7             	and    eax,0xfffffff7
c00194fc:	88 c2                	mov    dl,al
c00194fe:	88 c8                	mov    al,cl
c0019500:	09 d0                	or     eax,edx
c0019502:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c0019507:	83 ec 0c             	sub    esp,0xc
c001950a:	6a 40                	push   0x40
c001950c:	e8 cc fb ff ff       	call   c00190dd <cpuidCheckEDX(unsigned int)>
c0019511:	83 c4 10             	add    esp,0x10
c0019514:	83 e0 01             	and    eax,0x1
c0019517:	89 c1                	mov    ecx,eax
c0019519:	c1 e1 04             	shl    ecx,0x4
c001951c:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c0019521:	83 e0 ef             	and    eax,0xffffffef
c0019524:	88 c2                	mov    dl,al
c0019526:	88 c8                	mov    al,cl
c0019528:	09 d0                	or     eax,edx
c001952a:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c001952f:	83 ec 0c             	sub    esp,0xc
c0019532:	6a 08                	push   0x8
c0019534:	e8 a4 fb ff ff       	call   c00190dd <cpuidCheckEDX(unsigned int)>
c0019539:	83 c4 10             	add    esp,0x10
c001953c:	83 e0 01             	and    eax,0x1
c001953f:	89 c1                	mov    ecx,eax
c0019541:	c1 e1 05             	shl    ecx,0x5
c0019544:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c0019549:	83 e0 df             	and    eax,0xffffffdf
c001954c:	88 c2                	mov    dl,al
c001954e:	88 c8                	mov    al,cl
c0019550:	09 d0                	or     eax,edx
c0019552:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c0019557:	83 ec 0c             	sub    esp,0xc
c001955a:	68 00 20 00 00       	push   0x2000
c001955f:	e8 79 fb ff ff       	call   c00190dd <cpuidCheckEDX(unsigned int)>
c0019564:	83 c4 10             	add    esp,0x10
c0019567:	83 e0 01             	and    eax,0x1
c001956a:	89 c1                	mov    ecx,eax
c001956c:	c1 e1 06             	shl    ecx,0x6
c001956f:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c0019574:	83 e0 bf             	and    eax,0xffffffbf
c0019577:	88 c2                	mov    dl,al
c0019579:	88 c8                	mov    al,cl
c001957b:	09 d0                	or     eax,edx
c001957d:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c0019582:	83 ec 0c             	sub    esp,0xc
c0019585:	68 00 00 01 00       	push   0x10000
c001958a:	e8 4e fb ff ff       	call   c00190dd <cpuidCheckEDX(unsigned int)>
c001958f:	83 c4 10             	add    esp,0x10
c0019592:	89 c1                	mov    ecx,eax
c0019594:	c1 e1 07             	shl    ecx,0x7
c0019597:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c001959c:	83 e0 7f             	and    eax,0x7f
c001959f:	88 c2                	mov    dl,al
c00195a1:	88 c8                	mov    al,cl
c00195a3:	09 d0                	or     eax,edx
c00195a5:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c00195aa:	83 ec 0c             	sub    esp,0xc
c00195ad:	6a 01                	push   0x1
c00195af:	e8 29 fb ff ff       	call   c00190dd <cpuidCheckEDX(unsigned int)>
c00195b4:	83 c4 10             	add    esp,0x10
c00195b7:	83 e0 01             	and    eax,0x1
c00195ba:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00195c1:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c00195c6:	83 e0 f7             	and    eax,0xfffffff7
c00195c9:	88 c2                	mov    dl,al
c00195cb:	88 c8                	mov    al,cl
c00195cd:	09 d0                	or     eax,edx
c00195cf:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c00195d4:	83 ec 0c             	sub    esp,0xc
c00195d7:	68 00 08 00 00       	push   0x800
c00195dc:	e8 fc fa ff ff       	call   c00190dd <cpuidCheckEDX(unsigned int)>
c00195e1:	83 c4 10             	add    esp,0x10
c00195e4:	89 c1                	mov    ecx,eax
c00195e6:	83 e1 01             	and    ecx,0x1
c00195e9:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c00195ee:	83 e0 fe             	and    eax,0xfffffffe
c00195f1:	88 c2                	mov    dl,al
c00195f3:	88 c8                	mov    al,cl
c00195f5:	09 d0                	or     eax,edx
c00195f7:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c00195fc:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c0019601:	83 e0 40             	and    eax,0x40
c0019604:	0f b6 c0             	movzx  eax,al
c0019607:	85 c0                	test   eax,eax
c0019609:	74 0a                	je     c0019615 <HalDetectFeatures()+0x481>
c001960b:	c7 05 28 d4 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002d428,0x100
c0019615:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c001961a:	83 e0 80             	and    eax,0xffffff80
c001961d:	0f b6 c0             	movzx  eax,al
c0019620:	85 c0                	test   eax,eax
c0019622:	74 0a                	je     c001962e <HalDetectFeatures()+0x49a>
c0019624:	c7 05 24 d4 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002d424,0x80
c001962e:	83 ec 0c             	sub    esp,0xc
c0019631:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019635:	50                   	push   eax
c0019636:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001963a:	50                   	push   eax
c001963b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001963f:	50                   	push   eax
c0019640:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019644:	50                   	push   eax
c0019645:	6a 00                	push   0x0
c0019647:	e8 f3 f9 ff ff       	call   c001903f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001964c:	83 c4 20             	add    esp,0x20
c001964f:	c7 44 24 48 30 d4 02 c0 	mov    DWORD PTR [esp+0x48],0xc002d430
c0019657:	8d 44 24 10          	lea    eax,[esp+0x10]
c001965b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001965f:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019667:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001966b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001966f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0019673:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0019677:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001967b:	89 c6                	mov    esi,eax
c001967d:	89 d7                	mov    edi,edx
c001967f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019681:	89 c8                	mov    eax,ecx
c0019683:	89 fa                	mov    edx,edi
c0019685:	89 f3                	mov    ebx,esi
c0019687:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001968b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001968f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019693:	b8 34 d4 02 c0       	mov    eax,0xc002d434
c0019698:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001969c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00196a0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00196a4:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00196ac:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00196b0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00196b4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00196b8:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00196bc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00196c0:	89 c6                	mov    esi,eax
c00196c2:	89 d7                	mov    edi,edx
c00196c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00196c6:	89 c8                	mov    eax,ecx
c00196c8:	89 fa                	mov    edx,edi
c00196ca:	89 f3                	mov    ebx,esi
c00196cc:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00196d0:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00196d4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00196d8:	b8 38 d4 02 c0       	mov    eax,0xc002d438
c00196dd:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00196e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00196e8:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00196ec:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00196f4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00196fb:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00196ff:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019703:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001970a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001970e:	89 c6                	mov    esi,eax
c0019710:	89 d7                	mov    edi,edx
c0019712:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019714:	89 c8                	mov    eax,ecx
c0019716:	89 fa                	mov    edx,edi
c0019718:	89 f3                	mov    ebx,esi
c001971a:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001971e:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019722:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019726:	83 ec 08             	sub    esp,0x8
c0019729:	68 d9 57 02 c0       	push   0xc00257d9
c001972e:	68 30 d4 02 c0       	push   0xc002d430
c0019733:	e8 48 70 fe ff       	call   c0000780 <strcmp>
c0019738:	83 c4 10             	add    esp,0x10
c001973b:	85 c0                	test   eax,eax
c001973d:	74 19                	je     c0019758 <HalDetectFeatures()+0x5c4>
c001973f:	83 ec 08             	sub    esp,0x8
c0019742:	68 e6 57 02 c0       	push   0xc00257e6
c0019747:	68 30 d4 02 c0       	push   0xc002d430
c001974c:	e8 2f 70 fe ff       	call   c0000780 <strcmp>
c0019751:	83 c4 10             	add    esp,0x10
c0019754:	85 c0                	test   eax,eax
c0019756:	75 04                	jne    c001975c <HalDetectFeatures()+0x5c8>
c0019758:	b0 01                	mov    al,0x1
c001975a:	eb 02                	jmp    c001975e <HalDetectFeatures()+0x5ca>
c001975c:	b0 00                	mov    al,0x0
c001975e:	0f b6 c0             	movzx  eax,al
c0019761:	85 c0                	test   eax,eax
c0019763:	74 0f                	je     c0019774 <HalDetectFeatures()+0x5e0>
c0019765:	c7 05 44 d4 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x2
c001976f:	e9 0d 03 00 00       	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c0019774:	83 ec 08             	sub    esp,0x8
c0019777:	68 f3 57 02 c0       	push   0xc00257f3
c001977c:	68 30 d4 02 c0       	push   0xc002d430
c0019781:	e8 fa 6f fe ff       	call   c0000780 <strcmp>
c0019786:	83 c4 10             	add    esp,0x10
c0019789:	85 c0                	test   eax,eax
c001978b:	74 19                	je     c00197a6 <HalDetectFeatures()+0x612>
c001978d:	83 ec 08             	sub    esp,0x8
c0019790:	68 00 58 02 c0       	push   0xc0025800
c0019795:	68 30 d4 02 c0       	push   0xc002d430
c001979a:	e8 e1 6f fe ff       	call   c0000780 <strcmp>
c001979f:	83 c4 10             	add    esp,0x10
c00197a2:	85 c0                	test   eax,eax
c00197a4:	75 04                	jne    c00197aa <HalDetectFeatures()+0x616>
c00197a6:	b0 01                	mov    al,0x1
c00197a8:	eb 02                	jmp    c00197ac <HalDetectFeatures()+0x618>
c00197aa:	b0 00                	mov    al,0x0
c00197ac:	0f b6 c0             	movzx  eax,al
c00197af:	85 c0                	test   eax,eax
c00197b1:	74 0f                	je     c00197c2 <HalDetectFeatures()+0x62e>
c00197b3:	c7 05 44 d4 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x4
c00197bd:	e9 bf 02 00 00       	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c00197c2:	83 ec 08             	sub    esp,0x8
c00197c5:	68 0d 58 02 c0       	push   0xc002580d
c00197ca:	68 30 d4 02 c0       	push   0xc002d430
c00197cf:	e8 ac 6f fe ff       	call   c0000780 <strcmp>
c00197d4:	83 c4 10             	add    esp,0x10
c00197d7:	85 c0                	test   eax,eax
c00197d9:	74 19                	je     c00197f4 <HalDetectFeatures()+0x660>
c00197db:	83 ec 08             	sub    esp,0x8
c00197de:	68 1a 58 02 c0       	push   0xc002581a
c00197e3:	68 30 d4 02 c0       	push   0xc002d430
c00197e8:	e8 93 6f fe ff       	call   c0000780 <strcmp>
c00197ed:	83 c4 10             	add    esp,0x10
c00197f0:	85 c0                	test   eax,eax
c00197f2:	75 04                	jne    c00197f8 <HalDetectFeatures()+0x664>
c00197f4:	b0 01                	mov    al,0x1
c00197f6:	eb 02                	jmp    c00197fa <HalDetectFeatures()+0x666>
c00197f8:	b0 00                	mov    al,0x0
c00197fa:	0f b6 c0             	movzx  eax,al
c00197fd:	85 c0                	test   eax,eax
c00197ff:	74 0f                	je     c0019810 <HalDetectFeatures()+0x67c>
c0019801:	c7 05 44 d4 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x5
c001980b:	e9 71 02 00 00       	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c0019810:	83 ec 08             	sub    esp,0x8
c0019813:	68 27 58 02 c0       	push   0xc0025827
c0019818:	68 30 d4 02 c0       	push   0xc002d430
c001981d:	e8 5e 6f fe ff       	call   c0000780 <strcmp>
c0019822:	83 c4 10             	add    esp,0x10
c0019825:	85 c0                	test   eax,eax
c0019827:	0f 94 c0             	sete   al
c001982a:	0f b6 c0             	movzx  eax,al
c001982d:	85 c0                	test   eax,eax
c001982f:	74 0f                	je     c0019840 <HalDetectFeatures()+0x6ac>
c0019831:	c7 05 44 d4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x1
c001983b:	e9 41 02 00 00       	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c0019840:	83 ec 08             	sub    esp,0x8
c0019843:	68 34 58 02 c0       	push   0xc0025834
c0019848:	68 30 d4 02 c0       	push   0xc002d430
c001984d:	e8 2e 6f fe ff       	call   c0000780 <strcmp>
c0019852:	83 c4 10             	add    esp,0x10
c0019855:	85 c0                	test   eax,eax
c0019857:	0f 94 c0             	sete   al
c001985a:	0f b6 c0             	movzx  eax,al
c001985d:	85 c0                	test   eax,eax
c001985f:	74 0f                	je     c0019870 <HalDetectFeatures()+0x6dc>
c0019861:	c7 05 44 d4 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x3
c001986b:	e9 11 02 00 00       	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c0019870:	83 ec 08             	sub    esp,0x8
c0019873:	68 f3 57 02 c0       	push   0xc00257f3
c0019878:	68 30 d4 02 c0       	push   0xc002d430
c001987d:	e8 fe 6e fe ff       	call   c0000780 <strcmp>
c0019882:	83 c4 10             	add    esp,0x10
c0019885:	85 c0                	test   eax,eax
c0019887:	0f 94 c0             	sete   al
c001988a:	0f b6 c0             	movzx  eax,al
c001988d:	85 c0                	test   eax,eax
c001988f:	74 0f                	je     c00198a0 <HalDetectFeatures()+0x70c>
c0019891:	c7 05 44 d4 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x6
c001989b:	e9 e1 01 00 00       	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c00198a0:	83 ec 08             	sub    esp,0x8
c00198a3:	68 41 58 02 c0       	push   0xc0025841
c00198a8:	68 30 d4 02 c0       	push   0xc002d430
c00198ad:	e8 ce 6e fe ff       	call   c0000780 <strcmp>
c00198b2:	83 c4 10             	add    esp,0x10
c00198b5:	85 c0                	test   eax,eax
c00198b7:	0f 94 c0             	sete   al
c00198ba:	0f b6 c0             	movzx  eax,al
c00198bd:	85 c0                	test   eax,eax
c00198bf:	74 0f                	je     c00198d0 <HalDetectFeatures()+0x73c>
c00198c1:	c7 05 44 d4 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x7
c00198cb:	e9 b1 01 00 00       	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c00198d0:	83 ec 08             	sub    esp,0x8
c00198d3:	68 4e 58 02 c0       	push   0xc002584e
c00198d8:	68 30 d4 02 c0       	push   0xc002d430
c00198dd:	e8 9e 6e fe ff       	call   c0000780 <strcmp>
c00198e2:	83 c4 10             	add    esp,0x10
c00198e5:	85 c0                	test   eax,eax
c00198e7:	0f 94 c0             	sete   al
c00198ea:	0f b6 c0             	movzx  eax,al
c00198ed:	85 c0                	test   eax,eax
c00198ef:	74 0f                	je     c0019900 <HalDetectFeatures()+0x76c>
c00198f1:	c7 05 44 d4 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x8
c00198fb:	e9 81 01 00 00       	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c0019900:	83 ec 08             	sub    esp,0x8
c0019903:	68 5b 58 02 c0       	push   0xc002585b
c0019908:	68 30 d4 02 c0       	push   0xc002d430
c001990d:	e8 6e 6e fe ff       	call   c0000780 <strcmp>
c0019912:	83 c4 10             	add    esp,0x10
c0019915:	85 c0                	test   eax,eax
c0019917:	0f 94 c0             	sete   al
c001991a:	0f b6 c0             	movzx  eax,al
c001991d:	85 c0                	test   eax,eax
c001991f:	74 0f                	je     c0019930 <HalDetectFeatures()+0x79c>
c0019921:	c7 05 44 d4 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x9
c001992b:	e9 51 01 00 00       	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c0019930:	83 ec 08             	sub    esp,0x8
c0019933:	68 68 58 02 c0       	push   0xc0025868
c0019938:	68 30 d4 02 c0       	push   0xc002d430
c001993d:	e8 3e 6e fe ff       	call   c0000780 <strcmp>
c0019942:	83 c4 10             	add    esp,0x10
c0019945:	85 c0                	test   eax,eax
c0019947:	0f 94 c0             	sete   al
c001994a:	0f b6 c0             	movzx  eax,al
c001994d:	85 c0                	test   eax,eax
c001994f:	74 0f                	je     c0019960 <HalDetectFeatures()+0x7cc>
c0019951:	c7 05 44 d4 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xa
c001995b:	e9 21 01 00 00       	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c0019960:	83 ec 08             	sub    esp,0x8
c0019963:	68 75 58 02 c0       	push   0xc0025875
c0019968:	68 30 d4 02 c0       	push   0xc002d430
c001996d:	e8 0e 6e fe ff       	call   c0000780 <strcmp>
c0019972:	83 c4 10             	add    esp,0x10
c0019975:	85 c0                	test   eax,eax
c0019977:	0f 94 c0             	sete   al
c001997a:	0f b6 c0             	movzx  eax,al
c001997d:	85 c0                	test   eax,eax
c001997f:	74 0f                	je     c0019990 <HalDetectFeatures()+0x7fc>
c0019981:	c7 05 44 d4 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xb
c001998b:	e9 f1 00 00 00       	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c0019990:	83 ec 08             	sub    esp,0x8
c0019993:	68 82 58 02 c0       	push   0xc0025882
c0019998:	68 30 d4 02 c0       	push   0xc002d430
c001999d:	e8 de 6d fe ff       	call   c0000780 <strcmp>
c00199a2:	83 c4 10             	add    esp,0x10
c00199a5:	85 c0                	test   eax,eax
c00199a7:	0f 94 c0             	sete   al
c00199aa:	0f b6 c0             	movzx  eax,al
c00199ad:	85 c0                	test   eax,eax
c00199af:	74 0f                	je     c00199c0 <HalDetectFeatures()+0x82c>
c00199b1:	c7 05 44 d4 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xc
c00199bb:	e9 c1 00 00 00       	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c00199c0:	83 ec 08             	sub    esp,0x8
c00199c3:	68 8f 58 02 c0       	push   0xc002588f
c00199c8:	68 30 d4 02 c0       	push   0xc002d430
c00199cd:	e8 ae 6d fe ff       	call   c0000780 <strcmp>
c00199d2:	83 c4 10             	add    esp,0x10
c00199d5:	85 c0                	test   eax,eax
c00199d7:	0f 94 c0             	sete   al
c00199da:	0f b6 c0             	movzx  eax,al
c00199dd:	85 c0                	test   eax,eax
c00199df:	74 0f                	je     c00199f0 <HalDetectFeatures()+0x85c>
c00199e1:	c7 05 44 d4 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xd
c00199eb:	e9 91 00 00 00       	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c00199f0:	83 ec 08             	sub    esp,0x8
c00199f3:	68 9c 58 02 c0       	push   0xc002589c
c00199f8:	68 30 d4 02 c0       	push   0xc002d430
c00199fd:	e8 7e 6d fe ff       	call   c0000780 <strcmp>
c0019a02:	83 c4 10             	add    esp,0x10
c0019a05:	85 c0                	test   eax,eax
c0019a07:	0f 94 c0             	sete   al
c0019a0a:	0f b6 c0             	movzx  eax,al
c0019a0d:	85 c0                	test   eax,eax
c0019a0f:	74 0c                	je     c0019a1d <HalDetectFeatures()+0x889>
c0019a11:	c7 05 44 d4 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xd
c0019a1b:	eb 64                	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c0019a1d:	83 ec 08             	sub    esp,0x8
c0019a20:	68 a9 58 02 c0       	push   0xc00258a9
c0019a25:	68 30 d4 02 c0       	push   0xc002d430
c0019a2a:	e8 51 6d fe ff       	call   c0000780 <strcmp>
c0019a2f:	83 c4 10             	add    esp,0x10
c0019a32:	85 c0                	test   eax,eax
c0019a34:	0f 94 c0             	sete   al
c0019a37:	0f b6 c0             	movzx  eax,al
c0019a3a:	85 c0                	test   eax,eax
c0019a3c:	74 0c                	je     c0019a4a <HalDetectFeatures()+0x8b6>
c0019a3e:	c7 05 44 d4 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xd
c0019a48:	eb 37                	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c0019a4a:	83 ec 08             	sub    esp,0x8
c0019a4d:	68 b6 58 02 c0       	push   0xc00258b6
c0019a52:	68 30 d4 02 c0       	push   0xc002d430
c0019a57:	e8 24 6d fe ff       	call   c0000780 <strcmp>
c0019a5c:	83 c4 10             	add    esp,0x10
c0019a5f:	85 c0                	test   eax,eax
c0019a61:	0f 94 c0             	sete   al
c0019a64:	0f b6 c0             	movzx  eax,al
c0019a67:	85 c0                	test   eax,eax
c0019a69:	74 0c                	je     c0019a77 <HalDetectFeatures()+0x8e3>
c0019a6b:	c7 05 44 d4 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d444,0xd
c0019a75:	eb 0a                	jmp    c0019a81 <HalDetectFeatures()+0x8ed>
c0019a77:	c7 05 44 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x0
c0019a81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a85:	83 f8 06             	cmp    eax,0x6
c0019a88:	0f 86 cc 00 00 00    	jbe    c0019b5a <HalDetectFeatures()+0x9c6>
c0019a8e:	83 ec 0c             	sub    esp,0xc
c0019a91:	68 80 00 00 00       	push   0x80
c0019a96:	e8 9d f6 ff ff       	call   c0019138 <cpuidCheckExtendedEBX(unsigned int)>
c0019a9b:	83 c4 10             	add    esp,0x10
c0019a9e:	89 c1                	mov    ecx,eax
c0019aa0:	83 e1 01             	and    ecx,0x1
c0019aa3:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019aa8:	83 e0 fe             	and    eax,0xfffffffe
c0019aab:	88 c2                	mov    dl,al
c0019aad:	88 c8                	mov    al,cl
c0019aaf:	09 d0                	or     eax,edx
c0019ab1:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019ab6:	83 ec 0c             	sub    esp,0xc
c0019ab9:	68 00 00 10 00       	push   0x100000
c0019abe:	e8 75 f6 ff ff       	call   c0019138 <cpuidCheckExtendedEBX(unsigned int)>
c0019ac3:	83 c4 10             	add    esp,0x10
c0019ac6:	83 e0 01             	and    eax,0x1
c0019ac9:	89 c1                	mov    ecx,eax
c0019acb:	c1 e1 06             	shl    ecx,0x6
c0019ace:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019ad3:	83 e0 bf             	and    eax,0xffffffbf
c0019ad6:	88 c2                	mov    dl,al
c0019ad8:	88 c8                	mov    al,cl
c0019ada:	09 d0                	or     eax,edx
c0019adc:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019ae1:	83 ec 0c             	sub    esp,0xc
c0019ae4:	68 00 00 04 00       	push   0x40000
c0019ae9:	e8 4a f6 ff ff       	call   c0019138 <cpuidCheckExtendedEBX(unsigned int)>
c0019aee:	83 c4 10             	add    esp,0x10
c0019af1:	83 e0 01             	and    eax,0x1
c0019af4:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019af7:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019afc:	83 e0 fd             	and    eax,0xfffffffd
c0019aff:	88 c2                	mov    dl,al
c0019b01:	88 c8                	mov    al,cl
c0019b03:	09 d0                	or     eax,edx
c0019b05:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019b0a:	83 ec 0c             	sub    esp,0xc
c0019b0d:	6a 04                	push   0x4
c0019b0f:	e8 52 f6 ff ff       	call   c0019166 <cpuidCheckExtendedECX(unsigned int)>
c0019b14:	83 c4 10             	add    esp,0x10
c0019b17:	83 e0 01             	and    eax,0x1
c0019b1a:	89 c1                	mov    ecx,eax
c0019b1c:	c1 e1 05             	shl    ecx,0x5
c0019b1f:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019b24:	83 e0 df             	and    eax,0xffffffdf
c0019b27:	88 c2                	mov    dl,al
c0019b29:	88 c8                	mov    al,cl
c0019b2b:	09 d0                	or     eax,edx
c0019b2d:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019b32:	83 ec 0c             	sub    esp,0xc
c0019b35:	6a 20                	push   0x20
c0019b37:	e8 2a f6 ff ff       	call   c0019166 <cpuidCheckExtendedECX(unsigned int)>
c0019b3c:	83 c4 10             	add    esp,0x10
c0019b3f:	83 e0 01             	and    eax,0x1
c0019b42:	89 c1                	mov    ecx,eax
c0019b44:	c1 e1 04             	shl    ecx,0x4
c0019b47:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019b4c:	83 e0 ef             	and    eax,0xffffffef
c0019b4f:	88 c2                	mov    dl,al
c0019b51:	88 c8                	mov    al,cl
c0019b53:	09 d0                	or     eax,edx
c0019b55:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c0019b5a:	83 ec 0c             	sub    esp,0xc
c0019b5d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b61:	50                   	push   eax
c0019b62:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019b66:	50                   	push   eax
c0019b67:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b6b:	50                   	push   eax
c0019b6c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b70:	50                   	push   eax
c0019b71:	6a 01                	push   0x1
c0019b73:	e8 c7 f4 ff ff       	call   c001903f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019b78:	83 c4 20             	add    esp,0x20
c0019b7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b7f:	83 e0 0f             	and    eax,0xf
c0019b82:	a2 40 d4 02 c0       	mov    ds:0xc002d440,al
c0019b87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b8b:	c1 e8 04             	shr    eax,0x4
c0019b8e:	83 e0 0f             	and    eax,0xf
c0019b91:	a2 3e d4 02 c0       	mov    ds:0xc002d43e,al
c0019b96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b9a:	c1 e8 08             	shr    eax,0x8
c0019b9d:	83 e0 0f             	and    eax,0xf
c0019ba0:	a2 3d d4 02 c0       	mov    ds:0xc002d43d,al
c0019ba5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ba9:	c1 e8 0c             	shr    eax,0xc
c0019bac:	83 e0 03             	and    eax,0x3
c0019baf:	a2 3f d4 02 c0       	mov    ds:0xc002d43f,al
c0019bb4:	a0 3d d4 02 c0       	mov    al,ds:0xc002d43d
c0019bb9:	0f b6 c0             	movzx  eax,al
c0019bbc:	83 f8 06             	cmp    eax,0x6
c0019bbf:	74 0d                	je     c0019bce <HalDetectFeatures()+0xa3a>
c0019bc1:	a0 3d d4 02 c0       	mov    al,ds:0xc002d43d
c0019bc6:	0f b6 c0             	movzx  eax,al
c0019bc9:	83 f8 0f             	cmp    eax,0xf
c0019bcc:	75 18                	jne    c0019be6 <HalDetectFeatures()+0xa52>
c0019bce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bd2:	c1 e8 10             	shr    eax,0x10
c0019bd5:	c1 e0 04             	shl    eax,0x4
c0019bd8:	88 c2                	mov    dl,al
c0019bda:	a0 3e d4 02 c0       	mov    al,ds:0xc002d43e
c0019bdf:	09 d0                	or     eax,edx
c0019be1:	a2 3e d4 02 c0       	mov    ds:0xc002d43e,al
c0019be6:	a0 3d d4 02 c0       	mov    al,ds:0xc002d43d
c0019beb:	0f b6 c0             	movzx  eax,al
c0019bee:	83 f8 0f             	cmp    eax,0xf
c0019bf1:	75 15                	jne    c0019c08 <HalDetectFeatures()+0xa74>
c0019bf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bf7:	c1 e8 14             	shr    eax,0x14
c0019bfa:	88 c2                	mov    dl,al
c0019bfc:	a0 3d d4 02 c0       	mov    al,ds:0xc002d43d
c0019c01:	01 d0                	add    eax,edx
c0019c03:	a2 3d d4 02 c0       	mov    ds:0xc002d43d,al
c0019c08:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019c10:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019c18:	85 c0                	test   eax,eax
c0019c1a:	74 2d                	je     c0019c49 <HalDetectFeatures()+0xab5>
c0019c1c:	83 ec 0c             	sub    esp,0xc
c0019c1f:	68 00 00 00 40       	push   0x40000000
c0019c24:	e8 e1 f4 ff ff       	call   c001910a <cpuidCheckECX(unsigned int)>
c0019c29:	83 c4 10             	add    esp,0x10
c0019c2c:	83 e0 01             	and    eax,0x1
c0019c2f:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019c36:	a0 4e d4 02 c0       	mov    al,ds:0xc002d44e
c0019c3b:	83 e0 fb             	and    eax,0xfffffffb
c0019c3e:	88 c2                	mov    dl,al
c0019c40:	88 c8                	mov    al,cl
c0019c42:	09 d0                	or     eax,edx
c0019c44:	a2 4e d4 02 c0       	mov    ds:0xc002d44e,al
c0019c49:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019c4e:	83 c8 04             	or     eax,0x4
c0019c51:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019c56:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019c5b:	83 c8 08             	or     eax,0x8
c0019c5e:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019c63:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019c68:	83 c8 10             	or     eax,0x10
c0019c6b:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019c70:	83 ec 0c             	sub    esp,0xc
c0019c73:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c77:	50                   	push   eax
c0019c78:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019c7c:	50                   	push   eax
c0019c7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c81:	50                   	push   eax
c0019c82:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019c86:	50                   	push   eax
c0019c87:	68 00 00 00 80       	push   0x80000000
c0019c8c:	e8 ae f3 ff ff       	call   c001903f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019c91:	83 c4 20             	add    esp,0x20
c0019c94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c98:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019c9d:	0f 86 96 01 00 00    	jbe    c0019e39 <HalDetectFeatures()+0xca5>
c0019ca3:	83 ec 0c             	sub    esp,0xc
c0019ca6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019caa:	50                   	push   eax
c0019cab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019caf:	50                   	push   eax
c0019cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019cb4:	50                   	push   eax
c0019cb5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019cb9:	50                   	push   eax
c0019cba:	68 01 00 00 80       	push   0x80000001
c0019cbf:	e8 7b f3 ff ff       	call   c001903f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019cc4:	83 c4 20             	add    esp,0x20
c0019cc7:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019ccc:	83 e0 7f             	and    eax,0x7f
c0019ccf:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019cd4:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019cd9:	83 e0 fb             	and    eax,0xfffffffb
c0019cdc:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c0019ce1:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019ce6:	83 e0 fd             	and    eax,0xfffffffd
c0019ce9:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c0019cee:	e9 46 01 00 00       	jmp    c0019e39 <HalDetectFeatures()+0xca5>
c0019cf3:	83 ec 08             	sub    esp,0x8
c0019cf6:	68 27 58 02 c0       	push   0xc0025827
c0019cfb:	68 30 d4 02 c0       	push   0xc002d430
c0019d00:	e8 4b 69 fe ff       	call   c0000650 <strcpy>
c0019d05:	83 c4 10             	add    esp,0x10
c0019d08:	c7 05 44 d4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d444,0x1
c0019d12:	e8 ac 64 fe ff       	call   c00001c3 <is486>
c0019d17:	85 c0                	test   eax,eax
c0019d19:	0f 95 c0             	setne  al
c0019d1c:	0f b6 c0             	movzx  eax,al
c0019d1f:	85 c0                	test   eax,eax
c0019d21:	0f 84 8d 00 00 00    	je     c0019db4 <HalDetectFeatures()+0xc20>
c0019d27:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019d2c:	83 c8 04             	or     eax,0x4
c0019d2f:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019d34:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019d39:	83 c8 08             	or     eax,0x8
c0019d3c:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019d41:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019d46:	83 c8 10             	or     eax,0x10
c0019d49:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019d4e:	0f 20 c0             	mov    eax,cr0
c0019d51:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019d55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019d59:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019d60:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019d67:	83 e0 04             	and    eax,0x4
c0019d6a:	74 1e                	je     c0019d8a <HalDetectFeatures()+0xbf6>
c0019d6c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019d73:	83 e0 10             	and    eax,0x10
c0019d76:	75 12                	jne    c0019d8a <HalDetectFeatures()+0xbf6>
c0019d78:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019d7d:	83 e0 f7             	and    eax,0xfffffff7
c0019d80:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c0019d85:	e9 af 00 00 00       	jmp    c0019e39 <HalDetectFeatures()+0xca5>
c0019d8a:	e8 0f 64 fe ff       	call   c000019e <hasLegacyFPU>
c0019d8f:	83 e0 01             	and    eax,0x1
c0019d92:	83 e0 01             	and    eax,0x1
c0019d95:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019d9c:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019da1:	83 e0 f7             	and    eax,0xfffffff7
c0019da4:	88 c2                	mov    dl,al
c0019da6:	88 c8                	mov    al,cl
c0019da8:	09 d0                	or     eax,edx
c0019daa:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c0019daf:	e9 85 00 00 00       	jmp    c0019e39 <HalDetectFeatures()+0xca5>
c0019db4:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019db9:	83 e0 fb             	and    eax,0xfffffffb
c0019dbc:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019dc1:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019dc6:	83 e0 f7             	and    eax,0xfffffff7
c0019dc9:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019dce:	a0 4f d4 02 c0       	mov    al,ds:0xc002d44f
c0019dd3:	83 e0 ef             	and    eax,0xffffffef
c0019dd6:	a2 4f d4 02 c0       	mov    ds:0xc002d44f,al
c0019ddb:	0f 20 c0             	mov    eax,cr0
c0019dde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019de2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019de6:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019ded:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019df4:	83 e0 04             	and    eax,0x4
c0019df7:	74 1b                	je     c0019e14 <HalDetectFeatures()+0xc80>
c0019df9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019e00:	83 e0 10             	and    eax,0x10
c0019e03:	75 0f                	jne    c0019e14 <HalDetectFeatures()+0xc80>
c0019e05:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019e0a:	83 e0 f7             	and    eax,0xfffffff7
c0019e0d:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c0019e12:	eb 25                	jmp    c0019e39 <HalDetectFeatures()+0xca5>
c0019e14:	e8 85 63 fe ff       	call   c000019e <hasLegacyFPU>
c0019e19:	83 e0 01             	and    eax,0x1
c0019e1c:	83 e0 01             	and    eax,0x1
c0019e1f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019e26:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019e2b:	83 e0 f7             	and    eax,0xfffffff7
c0019e2e:	88 c2                	mov    dl,al
c0019e30:	88 c8                	mov    al,cl
c0019e32:	09 d0                	or     eax,edx
c0019e34:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c0019e39:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019e3e:	83 e0 08             	and    eax,0x8
c0019e41:	0f b6 c0             	movzx  eax,al
c0019e44:	85 c0                	test   eax,eax
c0019e46:	75 25                	jne    c0019e6d <HalDetectFeatures()+0xcd9>
c0019e48:	e8 51 63 fe ff       	call   c000019e <hasLegacyFPU>
c0019e4d:	83 e0 01             	and    eax,0x1
c0019e50:	83 e0 01             	and    eax,0x1
c0019e53:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019e5a:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019e5f:	83 e0 f7             	and    eax,0xfffffff7
c0019e62:	88 c2                	mov    dl,al
c0019e64:	88 c8                	mov    al,cl
c0019e66:	09 d0                	or     eax,edx
c0019e68:	a2 50 d4 02 c0       	mov    ds:0xc002d450,al
c0019e6d:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c0019e72:	83 e0 08             	and    eax,0x8
c0019e75:	0f b6 c0             	movzx  eax,al
c0019e78:	85 c0                	test   eax,eax
c0019e7a:	74 0d                	je     c0019e89 <HalDetectFeatures()+0xcf5>
c0019e7c:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019e81:	83 c8 10             	or     eax,0x10
c0019e84:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c0019e89:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019e8e:	83 e0 10             	and    eax,0x10
c0019e91:	0f b6 c0             	movzx  eax,al
c0019e94:	85 c0                	test   eax,eax
c0019e96:	75 23                	jne    c0019ebb <HalDetectFeatures()+0xd27>
c0019e98:	e8 59 7c 00 00       	call   c0021af6 <x87Detect>
c0019e9d:	83 e0 01             	and    eax,0x1
c0019ea0:	83 e0 01             	and    eax,0x1
c0019ea3:	89 c1                	mov    ecx,eax
c0019ea5:	c1 e1 04             	shl    ecx,0x4
c0019ea8:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019ead:	83 e0 ef             	and    eax,0xffffffef
c0019eb0:	88 c2                	mov    dl,al
c0019eb2:	88 c8                	mov    al,cl
c0019eb4:	09 d0                	or     eax,edx
c0019eb6:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c0019ebb:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c0019ec0:	83 e0 01             	and    eax,0x1
c0019ec3:	0f b6 c0             	movzx  eax,al
c0019ec6:	85 c0                	test   eax,eax
c0019ec8:	75 2d                	jne    c0019ef7 <HalDetectFeatures()+0xd63>
c0019eca:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c0019ecf:	83 e0 02             	and    eax,0x2
c0019ed2:	0f b6 c0             	movzx  eax,al
c0019ed5:	85 c0                	test   eax,eax
c0019ed7:	75 1e                	jne    c0019ef7 <HalDetectFeatures()+0xd63>
c0019ed9:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c0019ede:	83 e0 04             	and    eax,0x4
c0019ee1:	0f b6 c0             	movzx  eax,al
c0019ee4:	85 c0                	test   eax,eax
c0019ee6:	75 0f                	jne    c0019ef7 <HalDetectFeatures()+0xd63>
c0019ee8:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c0019eed:	83 e0 08             	and    eax,0x8
c0019ef0:	0f b6 c0             	movzx  eax,al
c0019ef3:	85 c0                	test   eax,eax
c0019ef5:	74 0d                	je     c0019f04 <HalDetectFeatures()+0xd70>
c0019ef7:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019efc:	83 c8 80             	or     eax,0xffffff80
c0019eff:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c0019f04:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019f09:	83 e0 10             	and    eax,0x10
c0019f0c:	0f b6 c0             	movzx  eax,al
c0019f0f:	85 c0                	test   eax,eax
c0019f11:	74 2f                	je     c0019f42 <HalDetectFeatures()+0xdae>
c0019f13:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019f18:	83 e0 80             	and    eax,0xffffff80
c0019f1b:	0f b6 c0             	movzx  eax,al
c0019f1e:	85 c0                	test   eax,eax
c0019f20:	75 20                	jne    c0019f42 <HalDetectFeatures()+0xdae>
c0019f22:	e8 89 7b 00 00       	call   c0021ab0 <sseDetect>
c0019f27:	83 e0 01             	and    eax,0x1
c0019f2a:	89 c1                	mov    ecx,eax
c0019f2c:	c1 e1 07             	shl    ecx,0x7
c0019f2f:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019f34:	83 e0 7f             	and    eax,0x7f
c0019f37:	88 c2                	mov    dl,al
c0019f39:	88 c8                	mov    al,cl
c0019f3b:	09 d0                	or     eax,edx
c0019f3d:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c0019f42:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019f47:	83 e0 80             	and    eax,0xffffff80
c0019f4a:	0f b6 c0             	movzx  eax,al
c0019f4d:	85 c0                	test   eax,eax
c0019f4f:	74 1c                	je     c0019f6d <HalDetectFeatures()+0xdd9>
c0019f51:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c0019f56:	83 e0 20             	and    eax,0x20
c0019f59:	0f b6 c0             	movzx  eax,al
c0019f5c:	85 c0                	test   eax,eax
c0019f5e:	75 0d                	jne    c0019f6d <HalDetectFeatures()+0xdd9>
c0019f60:	a0 4d d4 02 c0       	mov    al,ds:0xc002d44d
c0019f65:	83 e0 df             	and    eax,0xffffffdf
c0019f68:	a2 4d d4 02 c0       	mov    ds:0xc002d44d,al
c0019f6d:	c6 05 48 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d448,0x0
c0019f74:	90                   	nop
c0019f75:	81 c4 90 00 00 00    	add    esp,0x90
c0019f7b:	5b                   	pop    ebx
c0019f7c:	5e                   	pop    esi
c0019f7d:	5f                   	pop    edi
c0019f7e:	c3                   	ret    

c0019f7f <HalEnableNMI()>:
c0019f7f:	c6 05 2c d4 02 c0 01 	mov    BYTE PTR ds:0xc002d42c,0x1
c0019f86:	6a 10                	push   0x10
c0019f88:	e8 00 ef ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c0019f8d:	83 c4 04             	add    esp,0x4
c0019f90:	90                   	nop
c0019f91:	c3                   	ret    

c0019f92 <HalDisableNMI()>:
c0019f92:	c6 05 2c d4 02 c0 00 	mov    BYTE PTR ds:0xc002d42c,0x0
c0019f99:	6a 10                	push   0x10
c0019f9b:	e8 ed ee ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c0019fa0:	83 c4 04             	add    esp,0x4
c0019fa3:	90                   	nop
c0019fa4:	c3                   	ret    

c0019fa5 <HalGetNMIState()>:
c0019fa5:	a0 2c d4 02 c0       	mov    al,ds:0xc002d42c
c0019faa:	c3                   	ret    

c0019fab <x86rdmsr(unsigned int)>:
c0019fab:	83 ec 1c             	sub    esp,0x1c
c0019fae:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c0019fb3:	83 e0 08             	and    eax,0x8
c0019fb6:	0f b6 c0             	movzx  eax,al
c0019fb9:	85 c0                	test   eax,eax
c0019fbb:	75 10                	jne    c0019fcd <x86rdmsr(unsigned int)+0x22>
c0019fbd:	83 ec 0c             	sub    esp,0xc
c0019fc0:	68 c2 58 02 c0       	push   0xc00258c2
c0019fc5:	e8 f2 5a ff ff       	call   c000fabc <KePanic(char const*)>
c0019fca:	83 c4 10             	add    esp,0x10
c0019fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fd1:	89 c1                	mov    ecx,eax
c0019fd3:	0f 32                	rdmsr  
c0019fd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019fdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fe1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019fe5:	83 c4 1c             	add    esp,0x1c
c0019fe8:	c3                   	ret    

c0019fe9 <x86wrmsr(unsigned int, unsigned long long)>:
c0019fe9:	83 ec 1c             	sub    esp,0x1c
c0019fec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019ff0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ff4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ffc:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a001:	83 e0 08             	and    eax,0x8
c001a004:	0f b6 c0             	movzx  eax,al
c001a007:	85 c0                	test   eax,eax
c001a009:	75 10                	jne    c001a01b <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001a00b:	83 ec 0c             	sub    esp,0xc
c001a00e:	68 c8 58 02 c0       	push   0xc00258c8
c001a013:	e8 a4 5a ff ff       	call   c000fabc <KePanic(char const*)>
c001a018:	83 c4 10             	add    esp,0x10
c001a01b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001a01f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a023:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a027:	0f 30                	wrmsr  
c001a029:	90                   	nop
c001a02a:	83 c4 1c             	add    esp,0x1c
c001a02d:	c3                   	ret    

c001a02e <HalHandleGeneralProtectionFault(void*, void*)>:
c001a02e:	83 ec 0c             	sub    esp,0xc
c001a031:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a036:	8b 00                	mov    eax,DWORD PTR [eax]
c001a038:	8a 40 62             	mov    al,BYTE PTR [eax+0x62]
c001a03b:	0f b6 c0             	movzx  eax,al
c001a03e:	85 c0                	test   eax,eax
c001a040:	74 11                	je     c001a053 <HalHandleGeneralProtectionFault(void*, void*)+0x25>
c001a042:	83 ec 0c             	sub    esp,0xc
c001a045:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a049:	e8 27 db ff ff       	call   c0017b75 <Vm::faultHandler(regs*)>
c001a04e:	83 c4 10             	add    esp,0x10
c001a051:	eb 02                	jmp    c001a055 <HalHandleGeneralProtectionFault(void*, void*)+0x27>
c001a053:	b0 00                	mov    al,0x0
c001a055:	83 c4 0c             	add    esp,0xc
c001a058:	c3                   	ret    

c001a059 <HalFindRSDP()>:
c001a059:	83 ec 1c             	sub    esp,0x1c
c001a05c:	a1 7c d1 02 c0       	mov    eax,ds:0xc002d17c
c001a061:	3d ff 07 00 00       	cmp    eax,0x7ff
c001a066:	7e 17                	jle    c001a07f <HalFindRSDP()+0x26>
c001a068:	83 ec 0c             	sub    esp,0xc
c001a06b:	68 00 04 00 00       	push   0x400
c001a070:	e8 03 31 ff ff       	call   c000d178 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a075:	83 c4 10             	add    esp,0x10
c001a078:	0f b6 c0             	movzx  eax,al
c001a07b:	85 c0                	test   eax,eax
c001a07d:	74 04                	je     c001a083 <HalFindRSDP()+0x2a>
c001a07f:	b0 01                	mov    al,0x1
c001a081:	eb 02                	jmp    c001a085 <HalFindRSDP()+0x2c>
c001a083:	b0 00                	mov    al,0x0
c001a085:	0f b6 c0             	movzx  eax,al
c001a088:	85 c0                	test   eax,eax
c001a08a:	74 1d                	je     c001a0a9 <HalFindRSDP()+0x50>
c001a08c:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a091:	83 e0 fb             	and    eax,0xfffffffb
c001a094:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c001a099:	83 ec 0c             	sub    esp,0xc
c001a09c:	68 ce 58 02 c0       	push   0xc00258ce
c001a0a1:	e8 c0 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a0a6:	83 c4 10             	add    esp,0x10
c001a0a9:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a0ae:	83 e0 04             	and    eax,0x4
c001a0b1:	0f b6 c0             	movzx  eax,al
c001a0b4:	85 c0                	test   eax,eax
c001a0b6:	75 17                	jne    c001a0cf <HalFindRSDP()+0x76>
c001a0b8:	83 ec 0c             	sub    esp,0xc
c001a0bb:	68 dd 58 02 c0       	push   0xc00258dd
c001a0c0:	e8 a1 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a0c5:	83 c4 10             	add    esp,0x10
c001a0c8:	b8 00 00 00 00       	mov    eax,0x0
c001a0cd:	eb 63                	jmp    c001a132 <HalFindRSDP()+0xd9>
c001a0cf:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001a0d7:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001a0df:	77 2f                	ja     c001a110 <HalFindRSDP()+0xb7>
c001a0e1:	83 ec 04             	sub    esp,0x4
c001a0e4:	6a 08                	push   0x8
c001a0e6:	68 e7 58 02 c0       	push   0xc00258e7
c001a0eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0ef:	e8 8c 62 fe ff       	call   c0000380 <memcmp>
c001a0f4:	83 c4 10             	add    esp,0x10
c001a0f7:	85 c0                	test   eax,eax
c001a0f9:	0f 94 c0             	sete   al
c001a0fc:	0f b6 c0             	movzx  eax,al
c001a0ff:	85 c0                	test   eax,eax
c001a101:	74 06                	je     c001a109 <HalFindRSDP()+0xb0>
c001a103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a107:	eb 29                	jmp    c001a132 <HalFindRSDP()+0xd9>
c001a109:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001a10e:	eb c7                	jmp    c001a0d7 <HalFindRSDP()+0x7e>
c001a110:	83 ec 0c             	sub    esp,0xc
c001a113:	68 f0 58 02 c0       	push   0xc00258f0
c001a118:	e8 49 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a11d:	83 c4 10             	add    esp,0x10
c001a120:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a125:	83 e0 fb             	and    eax,0xfffffffb
c001a128:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c001a12d:	b8 00 00 00 00       	mov    eax,0x0
c001a132:	83 c4 1c             	add    esp,0x1c
c001a135:	c3                   	ret    

c001a136 <HalHandlePageFault(void*, void*)>:
c001a136:	83 ec 1c             	sub    esp,0x1c
c001a139:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a13e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a140:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a143:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001a149:	0f 20 d2             	mov    edx,cr2
c001a14c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a150:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a154:	83 ec 08             	sub    esp,0x8
c001a157:	52                   	push   edx
c001a158:	50                   	push   eax
c001a159:	e8 74 9c ff ff       	call   c0013dd2 <VAS::tryLoadBackOffDisk(unsigned long)>
c001a15e:	83 c4 10             	add    esp,0x10
c001a161:	83 c4 1c             	add    esp,0x1c
c001a164:	c3                   	ret    

c001a165 <HalHandleOpcodeFault(void*, void*)>:
c001a165:	83 ec 1c             	sub    esp,0x1c
c001a168:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a16c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a170:	a0 48 d4 02 c0       	mov    al,ds:0xc002d448
c001a175:	0f b6 c0             	movzx  eax,al
c001a178:	85 c0                	test   eax,eax
c001a17a:	74 25                	je     c001a1a1 <HalHandleOpcodeFault(void*, void*)+0x3c>
c001a17c:	83 ec 0c             	sub    esp,0xc
c001a17f:	68 e8 5a 02 c0       	push   0xc0025ae8
c001a184:	e8 dd cd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a189:	83 c4 10             	add    esp,0x10
c001a18c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a190:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a193:	8d 50 19             	lea    edx,[eax+0x19]
c001a196:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a19a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a19d:	b0 01                	mov    al,0x1
c001a19f:	eb 02                	jmp    c001a1a3 <HalHandleOpcodeFault(void*, void*)+0x3e>
c001a1a1:	b0 00                	mov    al,0x0
c001a1a3:	83 c4 1c             	add    esp,0x1c
c001a1a6:	c3                   	ret    

c001a1a7 <HalDisplayDebugInfo(void*)>:
c001a1a7:	83 ec 2c             	sub    esp,0x2c
c001a1aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a1ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1b2:	0f 20 c0             	mov    eax,cr0
c001a1b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a1b9:	0f 20 d0             	mov    eax,cr2
c001a1bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a1c0:	0f 20 d8             	mov    eax,cr3
c001a1c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a1c7:	0f 20 e0             	mov    eax,cr4
c001a1ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1d2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a1d5:	83 ec 08             	sub    esp,0x8
c001a1d8:	50                   	push   eax
c001a1d9:	68 0a 59 02 c0       	push   0xc002590a
c001a1de:	e8 83 cd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a1e3:	83 c4 10             	add    esp,0x10
c001a1e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1ea:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001a1ed:	83 ec 08             	sub    esp,0x8
c001a1f0:	50                   	push   eax
c001a1f1:	68 fb 58 02 c0       	push   0xc00258fb
c001a1f6:	e8 6b cd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a1fb:	83 c4 10             	add    esp,0x10
c001a1fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a202:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001a205:	83 ec 08             	sub    esp,0x8
c001a208:	50                   	push   eax
c001a209:	68 06 59 02 c0       	push   0xc0025906
c001a20e:	e8 53 cd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a213:	83 c4 10             	add    esp,0x10
c001a216:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a21a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a21d:	83 ec 08             	sub    esp,0x8
c001a220:	50                   	push   eax
c001a221:	68 15 59 02 c0       	push   0xc0025915
c001a226:	e8 3b cd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a22b:	83 c4 10             	add    esp,0x10
c001a22e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a232:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001a235:	83 ec 08             	sub    esp,0x8
c001a238:	50                   	push   eax
c001a239:	68 20 59 02 c0       	push   0xc0025920
c001a23e:	e8 23 cd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a243:	83 c4 10             	add    esp,0x10
c001a246:	83 ec 08             	sub    esp,0x8
c001a249:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a24d:	68 2b 59 02 c0       	push   0xc002592b
c001a252:	e8 0f cd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a257:	83 c4 10             	add    esp,0x10
c001a25a:	83 ec 08             	sub    esp,0x8
c001a25d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a261:	68 36 59 02 c0       	push   0xc0025936
c001a266:	e8 fb cc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a26b:	83 c4 10             	add    esp,0x10
c001a26e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a272:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a275:	c1 e0 05             	shl    eax,0x5
c001a278:	8d 90 c0 6d 02 c0    	lea    edx,[eax-0x3ffd9240]
c001a27e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a282:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a285:	83 ec 04             	sub    esp,0x4
c001a288:	52                   	push   edx
c001a289:	50                   	push   eax
c001a28a:	68 41 59 02 c0       	push   0xc0025941
c001a28f:	e8 d2 cc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a294:	83 c4 10             	add    esp,0x10
c001a297:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a29c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2a2:	83 ec 0c             	sub    esp,0xc
c001a2a5:	50                   	push   eax
c001a2a6:	e8 10 7e ff ff       	call   c00120bb <setActiveTerminal(VgaText*)>
c001a2ab:	83 c4 10             	add    esp,0x10
c001a2ae:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a2b3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2b9:	83 ec 08             	sub    esp,0x8
c001a2bc:	68 50 59 02 c0       	push   0xc0025950
c001a2c1:	50                   	push   eax
c001a2c2:	e8 31 81 ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a2c7:	83 c4 10             	add    esp,0x10
c001a2ca:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a2cf:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2d9:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001a2dc:	83 ec 08             	sub    esp,0x8
c001a2df:	52                   	push   edx
c001a2e0:	50                   	push   eax
c001a2e1:	e8 cc 80 ff ff       	call   c00123b2 <VgaText::putx(unsigned int)>
c001a2e6:	83 c4 10             	add    esp,0x10
c001a2e9:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a2ee:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2f4:	83 ec 08             	sub    esp,0x8
c001a2f7:	68 5e 59 02 c0       	push   0xc002595e
c001a2fc:	50                   	push   eax
c001a2fd:	e8 f6 80 ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a302:	83 c4 10             	add    esp,0x10
c001a305:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a30a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a310:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001a315:	8b 12                	mov    edx,DWORD PTR [edx]
c001a317:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a31a:	83 c2 0c             	add    edx,0xc
c001a31d:	83 ec 08             	sub    esp,0x8
c001a320:	52                   	push   edx
c001a321:	50                   	push   eax
c001a322:	e8 d1 80 ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a327:	83 c4 10             	add    esp,0x10
c001a32a:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a32f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a335:	83 ec 08             	sub    esp,0x8
c001a338:	68 67 59 02 c0       	push   0xc0025967
c001a33d:	50                   	push   eax
c001a33e:	e8 b5 80 ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a343:	83 c4 10             	add    esp,0x10
c001a346:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a34b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a351:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a355:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001a358:	83 ec 08             	sub    esp,0x8
c001a35b:	52                   	push   edx
c001a35c:	50                   	push   eax
c001a35d:	e8 50 80 ff ff       	call   c00123b2 <VgaText::putx(unsigned int)>
c001a362:	83 c4 10             	add    esp,0x10
c001a365:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a36a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a370:	83 ec 08             	sub    esp,0x8
c001a373:	68 6f 59 02 c0       	push   0xc002596f
c001a378:	50                   	push   eax
c001a379:	e8 7a 80 ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a37e:	83 c4 10             	add    esp,0x10
c001a381:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a386:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a38c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a390:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001a393:	83 ec 08             	sub    esp,0x8
c001a396:	52                   	push   edx
c001a397:	50                   	push   eax
c001a398:	e8 15 80 ff ff       	call   c00123b2 <VgaText::putx(unsigned int)>
c001a39d:	83 c4 10             	add    esp,0x10
c001a3a0:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a3a5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3ab:	83 ec 08             	sub    esp,0x8
c001a3ae:	68 77 59 02 c0       	push   0xc0025977
c001a3b3:	50                   	push   eax
c001a3b4:	e8 3f 80 ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a3b9:	83 c4 10             	add    esp,0x10
c001a3bc:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a3c1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3cb:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001a3ce:	83 ec 08             	sub    esp,0x8
c001a3d1:	52                   	push   edx
c001a3d2:	50                   	push   eax
c001a3d3:	e8 da 7f ff ff       	call   c00123b2 <VgaText::putx(unsigned int)>
c001a3d8:	83 c4 10             	add    esp,0x10
c001a3db:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a3e0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3e6:	83 ec 08             	sub    esp,0x8
c001a3e9:	68 7f 59 02 c0       	push   0xc002597f
c001a3ee:	50                   	push   eax
c001a3ef:	e8 04 80 ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a3f4:	83 c4 10             	add    esp,0x10
c001a3f7:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a3fc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a402:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a406:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a409:	83 ec 08             	sub    esp,0x8
c001a40c:	52                   	push   edx
c001a40d:	50                   	push   eax
c001a40e:	e8 9f 7f ff ff       	call   c00123b2 <VgaText::putx(unsigned int)>
c001a413:	83 c4 10             	add    esp,0x10
c001a416:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a41b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a421:	83 ec 08             	sub    esp,0x8
c001a424:	68 87 59 02 c0       	push   0xc0025987
c001a429:	50                   	push   eax
c001a42a:	e8 c9 7f ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a42f:	83 c4 10             	add    esp,0x10
c001a432:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a437:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a43d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a441:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a444:	83 ec 08             	sub    esp,0x8
c001a447:	52                   	push   edx
c001a448:	50                   	push   eax
c001a449:	e8 64 7f ff ff       	call   c00123b2 <VgaText::putx(unsigned int)>
c001a44e:	83 c4 10             	add    esp,0x10
c001a451:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a456:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a45c:	83 ec 08             	sub    esp,0x8
c001a45f:	68 8f 59 02 c0       	push   0xc002598f
c001a464:	50                   	push   eax
c001a465:	e8 8e 7f ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a46a:	83 c4 10             	add    esp,0x10
c001a46d:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a472:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a478:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a47c:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a47f:	83 ec 08             	sub    esp,0x8
c001a482:	52                   	push   edx
c001a483:	50                   	push   eax
c001a484:	e8 29 7f ff ff       	call   c00123b2 <VgaText::putx(unsigned int)>
c001a489:	83 c4 10             	add    esp,0x10
c001a48c:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a491:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a497:	83 ec 08             	sub    esp,0x8
c001a49a:	68 97 59 02 c0       	push   0xc0025997
c001a49f:	50                   	push   eax
c001a4a0:	e8 53 7f ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a4a5:	83 c4 10             	add    esp,0x10
c001a4a8:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a4ad:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4b3:	83 ec 08             	sub    esp,0x8
c001a4b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a4ba:	50                   	push   eax
c001a4bb:	e8 f2 7e ff ff       	call   c00123b2 <VgaText::putx(unsigned int)>
c001a4c0:	83 c4 10             	add    esp,0x10
c001a4c3:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a4c8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4ce:	83 ec 08             	sub    esp,0x8
c001a4d1:	68 a0 59 02 c0       	push   0xc00259a0
c001a4d6:	50                   	push   eax
c001a4d7:	e8 1c 7f ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a4dc:	83 c4 10             	add    esp,0x10
c001a4df:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a4e4:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4ea:	83 ec 08             	sub    esp,0x8
c001a4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4f1:	50                   	push   eax
c001a4f2:	e8 bb 7e ff ff       	call   c00123b2 <VgaText::putx(unsigned int)>
c001a4f7:	83 c4 10             	add    esp,0x10
c001a4fa:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a4ff:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a505:	83 ec 08             	sub    esp,0x8
c001a508:	68 a8 59 02 c0       	push   0xc00259a8
c001a50d:	50                   	push   eax
c001a50e:	e8 e5 7e ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a513:	83 c4 10             	add    esp,0x10
c001a516:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001a51b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a521:	83 ec 08             	sub    esp,0x8
c001a524:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a528:	50                   	push   eax
c001a529:	e8 84 7e ff ff       	call   c00123b2 <VgaText::putx(unsigned int)>
c001a52e:	83 c4 10             	add    esp,0x10
c001a531:	fa                   	cli    
c001a532:	f4                   	hlt    
c001a533:	eb fe                	jmp    c001a533 <HalDisplayDebugInfo(void*)+0x38c>

c001a535 <HalReceivedNMI()>:
c001a535:	83 ec 1c             	sub    esp,0x1c
c001a538:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a53f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a543:	89 c2                	mov    edx,eax
c001a545:	ec                   	in     al,dx
c001a546:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a54a:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a54e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a552:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a55d:	89 c2                	mov    edx,eax
c001a55f:	ec                   	in     al,dx
c001a560:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a564:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a568:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a56c:	83 ec 0c             	sub    esp,0xc
c001a56f:	68 b0 59 02 c0       	push   0xc00259b0
c001a574:	e8 ed c9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a579:	83 c4 10             	add    esp,0x10
c001a57c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a581:	83 e0 10             	and    eax,0x10
c001a584:	74 10                	je     c001a596 <HalReceivedNMI()+0x61>
c001a586:	83 ec 0c             	sub    esp,0xc
c001a589:	68 c1 59 02 c0       	push   0xc00259c1
c001a58e:	e8 29 55 ff ff       	call   c000fabc <KePanic(char const*)>
c001a593:	83 c4 10             	add    esp,0x10
c001a596:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a59b:	83 e0 40             	and    eax,0x40
c001a59e:	74 10                	je     c001a5b0 <HalReceivedNMI()+0x7b>
c001a5a0:	83 ec 0c             	sub    esp,0xc
c001a5a3:	68 ce 59 02 c0       	push   0xc00259ce
c001a5a8:	e8 0f 55 ff ff       	call   c000fabc <KePanic(char const*)>
c001a5ad:	83 c4 10             	add    esp,0x10
c001a5b0:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a5b4:	0f be c0             	movsx  eax,al
c001a5b7:	85 c0                	test   eax,eax
c001a5b9:	79 10                	jns    c001a5cb <HalReceivedNMI()+0x96>
c001a5bb:	83 ec 0c             	sub    esp,0xc
c001a5be:	68 d8 59 02 c0       	push   0xc00259d8
c001a5c3:	e8 f4 54 ff ff       	call   c000fabc <KePanic(char const*)>
c001a5c8:	83 c4 10             	add    esp,0x10
c001a5cb:	90                   	nop
c001a5cc:	83 c4 1c             	add    esp,0x1c
c001a5cf:	c3                   	ret    

c001a5d0 <HalSystemIdle()>:
c001a5d0:	56                   	push   esi
c001a5d1:	53                   	push   ebx
c001a5d2:	83 ec 14             	sub    esp,0x14
c001a5d5:	a0 50 d4 02 c0       	mov    al,ds:0xc002d450
c001a5da:	83 e0 10             	and    eax,0x10
c001a5dd:	0f b6 c0             	movzx  eax,al
c001a5e0:	85 c0                	test   eax,eax
c001a5e2:	74 43                	je     c001a627 <HalSystemIdle()+0x57>
c001a5e4:	83 ec 0c             	sub    esp,0xc
c001a5e7:	68 e1 00 00 00       	push   0xe1
c001a5ec:	e8 ba f9 ff ff       	call   c0019fab <x86rdmsr(unsigned int)>
c001a5f1:	83 c4 10             	add    esp,0x10
c001a5f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a5f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a5fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a600:	83 e0 02             	and    eax,0x2
c001a603:	89 c3                	mov    ebx,eax
c001a605:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a609:	83 e0 00             	and    eax,0x0
c001a60c:	89 c6                	mov    esi,eax
c001a60e:	83 ec 04             	sub    esp,0x4
c001a611:	56                   	push   esi
c001a612:	53                   	push   ebx
c001a613:	68 e1 00 00 00       	push   0xe1
c001a618:	e8 cc f9 ff ff       	call   c0019fe9 <x86wrmsr(unsigned int, unsigned long long)>
c001a61d:	83 c4 10             	add    esp,0x10
c001a620:	e8 6f 5b fe ff       	call   c0000194 <doTPAUSE>
c001a625:	eb 01                	jmp    c001a628 <HalSystemIdle()+0x58>
c001a627:	f4                   	hlt    
c001a628:	90                   	nop
c001a629:	83 c4 14             	add    esp,0x14
c001a62c:	5b                   	pop    ebx
c001a62d:	5e                   	pop    esi
c001a62e:	c3                   	ret    

c001a62f <i386SaveCoprocessor(void*)>:
c001a62f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a633:	83 c0 3f             	add    eax,0x3f
c001a636:	83 e0 c0             	and    eax,0xffffffc0
c001a639:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a63d:	ff 25 10 d4 02 c0    	jmp    DWORD PTR ds:0xc002d410

c001a643 <i386LoadCoprocessor(void*)>:
c001a643:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a647:	83 c0 3f             	add    eax,0x3f
c001a64a:	83 e0 c0             	and    eax,0xffffffc0
c001a64d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a651:	ff 25 0c d4 02 c0    	jmp    DWORD PTR ds:0xc002d40c

c001a657 <x87EmulHandler(regs*, void*)>:
c001a657:	53                   	push   ebx
c001a658:	83 ec 08             	sub    esp,0x8
c001a65b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a660:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a664:	74 10                	je     c001a676 <x87EmulHandler(regs*, void*)+0x1f>
c001a666:	83 ec 0c             	sub    esp,0xc
c001a669:	68 e5 59 02 c0       	push   0xc00259e5
c001a66e:	e8 49 54 ff ff       	call   c000fabc <KePanic(char const*)>
c001a673:	83 c4 10             	add    esp,0x10
c001a676:	0f 20 c0             	mov    eax,cr0
c001a679:	a8 08                	test   al,0x8
c001a67b:	74 59                	je     c001a6d6 <x87EmulHandler(regs*, void*)+0x7f>
c001a67d:	0f 06                	clts   
c001a67f:	a1 08 d4 02 c0       	mov    eax,ds:0xc002d408
c001a684:	85 c0                	test   eax,eax
c001a686:	74 0e                	je     c001a696 <x87EmulHandler(regs*, void*)+0x3f>
c001a688:	83 ec 0c             	sub    esp,0xc
c001a68b:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a68e:	e8 9c ff ff ff       	call   c001a62f <i386SaveCoprocessor(void*)>
c001a693:	83 c4 10             	add    esp,0x10
c001a696:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a69c:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a6a0:	75 12                	jne    c001a6b4 <x87EmulHandler(regs*, void*)+0x5d>
c001a6a2:	83 ec 0c             	sub    esp,0xc
c001a6a5:	68 40 02 00 00       	push   0x240
c001a6aa:	e8 b9 4f ff ff       	call   c000f668 <malloc>
c001a6af:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a6b2:	eb 10                	jmp    c001a6c4 <x87EmulHandler(regs*, void*)+0x6d>
c001a6b4:	a1 08 d4 02 c0       	mov    eax,ds:0xc002d408
c001a6b9:	83 ec 0c             	sub    esp,0xc
c001a6bc:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a6bf:	e8 7f ff ff ff       	call   c001a643 <i386LoadCoprocessor(void*)>
c001a6c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6c9:	83 c4 10             	add    esp,0x10
c001a6cc:	a3 08 d4 02 c0       	mov    ds:0xc002d408,eax
c001a6d1:	83 c4 08             	add    esp,0x8
c001a6d4:	5b                   	pop    ebx
c001a6d5:	c3                   	ret    
c001a6d6:	83 ec 0c             	sub    esp,0xc
c001a6d9:	68 f9 59 02 c0       	push   0xc00259f9
c001a6de:	e8 83 c8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a6e3:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001a6eb:	83 c4 18             	add    esp,0x18
c001a6ee:	5b                   	pop    ebx
c001a6ef:	e9 34 c7 ff ff       	jmp    c0016e28 <KeTerminateCurrentThread(int)>

c001a6f4 <HalInitialiseCoprocessor()>:
c001a6f4:	83 ec 10             	sub    esp,0x10
c001a6f7:	6a 00                	push   0x0
c001a6f9:	68 57 a6 01 c0       	push   0xc001a657
c001a6fe:	6a 07                	push   0x7
c001a700:	c7 05 08 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d408,0x0
c001a70a:	e8 de 07 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a70f:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a714:	83 c4 10             	add    esp,0x10
c001a717:	a8 80                	test   al,0x80
c001a719:	74 1c                	je     c001a737 <HalInitialiseCoprocessor()+0x43>
c001a71b:	c7 05 10 d4 02 c0 c8 1a 02 c0 	mov    DWORD PTR ds:0xc002d410,0xc0021ac8
c001a725:	c7 05 0c d4 02 c0 d0 1a 02 c0 	mov    DWORD PTR ds:0xc002d40c,0xc0021ad0
c001a72f:	83 c4 0c             	add    esp,0xc
c001a732:	e9 a1 73 00 00       	jmp    c0021ad8 <sseInit>
c001a737:	a8 10                	test   al,0x10
c001a739:	74 1c                	je     c001a757 <HalInitialiseCoprocessor()+0x63>
c001a73b:	c7 05 10 d4 02 c0 17 1b 02 c0 	mov    DWORD PTR ds:0xc002d410,0xc0021b17
c001a745:	c7 05 0c d4 02 c0 1e 1b 02 c0 	mov    DWORD PTR ds:0xc002d40c,0xc0021b1e
c001a74f:	83 c4 0c             	add    esp,0xc
c001a752:	e9 ce 73 00 00       	jmp    c0021b25 <x87Init>
c001a757:	c7 05 10 d4 02 c0 7c 8e 01 c0 	mov    DWORD PTR ds:0xc002d410,0xc0018e7c
c001a761:	c7 05 0c d4 02 c0 7c 8e 01 c0 	mov    DWORD PTR ds:0xc002d40c,0xc0018e7c
c001a76b:	0f 20 c0             	mov    eax,cr0
c001a76e:	83 c8 04             	or     eax,0x4
c001a771:	0f 22 c0             	mov    cr0,eax
c001a774:	83 c4 0c             	add    esp,0xc
c001a777:	c3                   	ret    

c001a778 <HalPanic(char const*)>:
c001a778:	53                   	push   ebx
c001a779:	83 ec 10             	sub    esp,0x10
c001a77c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a780:	fa                   	cli    
c001a781:	53                   	push   ebx
c001a782:	68 0f 5a 02 c0       	push   0xc0025a0f
c001a787:	e8 da c7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a78c:	a1 04 d4 02 c0       	mov    eax,ds:0xc002d404
c001a791:	83 c4 10             	add    esp,0x10
c001a794:	85 c0                	test   eax,eax
c001a796:	74 09                	je     c001a7a1 <HalPanic(char const*)+0x29>
c001a798:	83 ec 0c             	sub    esp,0xc
c001a79b:	53                   	push   ebx
c001a79c:	ff d0                	call   eax
c001a79e:	83 c4 10             	add    esp,0x10
c001a7a1:	a1 f4 d1 02 c0       	mov    eax,ds:0xc002d1f4
c001a7a6:	85 c0                	test   eax,eax
c001a7a8:	0f 84 dc 00 00 00    	je     c001a88a <HalPanic(char const*)+0x112>
c001a7ae:	52                   	push   edx
c001a7af:	6a 01                	push   0x1
c001a7b1:	6a 0f                	push   0xf
c001a7b3:	50                   	push   eax
c001a7b4:	e8 41 77 ff ff       	call   c0011efa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a7b9:	59                   	pop    ecx
c001a7ba:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a7c0:	e8 41 79 ff ff       	call   c0012106 <VgaText::clearScreen()>
c001a7c5:	58                   	pop    eax
c001a7c6:	5a                   	pop    edx
c001a7c7:	68 cd 49 02 c0       	push   0xc00249cd
c001a7cc:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a7d2:	e8 5b 77 ff ff       	call   c0011f32 <VgaText::setTitle(char*)>
c001a7d7:	83 c4 0c             	add    esp,0xc
c001a7da:	6a 01                	push   0x1
c001a7dc:	6a 0f                	push   0xf
c001a7de:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a7e4:	e8 11 77 ff ff       	call   c0011efa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a7e9:	59                   	pop    ecx
c001a7ea:	58                   	pop    eax
c001a7eb:	68 28 5a 02 c0       	push   0xc0025a28
c001a7f0:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a7f6:	e8 fd 7b ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a7fb:	83 c4 0c             	add    esp,0xc
c001a7fe:	6a 0f                	push   0xf
c001a800:	6a 01                	push   0x1
c001a802:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a808:	e8 ed 76 ff ff       	call   c0011efa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a80d:	58                   	pop    eax
c001a80e:	5a                   	pop    edx
c001a80f:	68 31 5a 02 c0       	push   0xc0025a31
c001a814:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a81a:	e8 d9 7b ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a81f:	83 c4 0c             	add    esp,0xc
c001a822:	6a 01                	push   0x1
c001a824:	6a 0f                	push   0xf
c001a826:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a82c:	e8 c9 76 ff ff       	call   c0011efa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a831:	59                   	pop    ecx
c001a832:	58                   	pop    eax
c001a833:	68 75 5a 02 c0       	push   0xc0025a75
c001a838:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a83e:	e8 b5 7b ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a843:	58                   	pop    eax
c001a844:	5a                   	pop    edx
c001a845:	68 3e 5a 02 c0       	push   0xc0025a3e
c001a84a:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a850:	e8 a3 7b ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a855:	59                   	pop    ecx
c001a856:	58                   	pop    eax
c001a857:	68 78 5a 02 c0       	push   0xc0025a78
c001a85c:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a862:	e8 91 7b ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a867:	58                   	pop    eax
c001a868:	5a                   	pop    edx
c001a869:	53                   	push   ebx
c001a86a:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a870:	e8 83 7b ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a875:	59                   	pop    ecx
c001a876:	5b                   	pop    ebx
c001a877:	68 75 5a 02 c0       	push   0xc0025a75
c001a87c:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001a882:	e8 71 7b ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001a887:	83 c4 10             	add    esp,0x10
c001a88a:	eb fe                	jmp    c001a88a <HalPanic(char const*)+0x112>

c001a88c <HalQueryPerformanceCounter()>:
c001a88c:	31 c0                	xor    eax,eax
c001a88e:	31 d2                	xor    edx,edx
c001a890:	f6 05 4e d4 02 c0 08 	test   BYTE PTR ds:0xc002d44e,0x8
c001a897:	75 02                	jne    c001a89b <HalQueryPerformanceCounter()+0xf>
c001a899:	0f 31                	rdtsc  
c001a89b:	c3                   	ret    

c001a89c <HalInitialise()>:
c001a89c:	53                   	push   ebx
c001a89d:	83 ec 08             	sub    esp,0x8
c001a8a0:	e8 ef e8 ff ff       	call   c0019194 <HalDetectFeatures()>
c001a8a5:	83 ec 0c             	sub    esp,0xc
c001a8a8:	68 7d 8e 01 c0       	push   0xc0018e7d
c001a8ad:	e8 44 5b ff ff       	call   c00103f6 <KeRegisterRestartHandler(void (*)())>
c001a8b2:	c7 04 24 88 8e 01 c0 	mov    DWORD PTR [esp],0xc0018e88
c001a8b9:	e8 2e 5b ff ff       	call   c00103ec <KeRegisterShutdownHandler(void (*)())>
c001a8be:	c7 04 24 89 8e 01 c0 	mov    DWORD PTR [esp],0xc0018e89
c001a8c5:	e8 36 5b ff ff       	call   c0010400 <KeRegisterSleepHandler(void (*)())>
c001a8ca:	e8 8d 1a ff ff       	call   c000c35c <scanMADT()>
c001a8cf:	83 c4 10             	add    esp,0x10
c001a8d2:	80 3d 40 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce40,0x0
c001a8d9:	75 0d                	jne    c001a8e8 <HalInitialise()+0x4c>
c001a8db:	a0 4c d4 02 c0       	mov    al,ds:0xc002d44c
c001a8e0:	83 e0 fe             	and    eax,0xfffffffe
c001a8e3:	a2 4c d4 02 c0       	mov    ds:0xc002d44c,al
c001a8e8:	e8 e7 08 00 00       	call   c001b1d4 <picOpen()>
c001a8ed:	f6 05 4c d4 02 c0 01 	test   BYTE PTR ds:0xc002d44c,0x1
c001a8f4:	74 0a                	je     c001a900 <HalInitialise()+0x64>
c001a8f6:	e8 29 08 00 00       	call   c001b124 <picDisable()>
c001a8fb:	e8 84 e1 ff ff       	call   c0018a84 <apicOpen()>
c001a900:	50                   	push   eax
c001a901:	bb 0f 00 00 00       	mov    ebx,0xf
c001a906:	6a 00                	push   0x0
c001a908:	68 90 e7 00 c0       	push   0xc000e790
c001a90d:	6a 02                	push   0x2
c001a90f:	e8 d9 05 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a914:	83 c4 0c             	add    esp,0xc
c001a917:	6a 00                	push   0x0
c001a919:	68 08 e7 00 c0       	push   0xc000e708
c001a91e:	6a 06                	push   0x6
c001a920:	e8 c8 05 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a925:	83 c4 0c             	add    esp,0xc
c001a928:	6a 00                	push   0x0
c001a92a:	68 a0 e7 00 c0       	push   0xc000e7a0
c001a92f:	6a 08                	push   0x8
c001a931:	e8 b7 05 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a936:	83 c4 0c             	add    esp,0xc
c001a939:	6a 00                	push   0x0
c001a93b:	68 60 e6 00 c0       	push   0xc000e660
c001a940:	6a 0d                	push   0xd
c001a942:	e8 a6 05 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a947:	83 c4 0c             	add    esp,0xc
c001a94a:	6a 00                	push   0x0
c001a94c:	68 b4 e6 00 c0       	push   0xc000e6b4
c001a951:	6a 0e                	push   0xe
c001a953:	e8 95 05 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a958:	83 c4 0c             	add    esp,0xc
c001a95b:	6a 00                	push   0x0
c001a95d:	68 5c e7 00 c0       	push   0xc000e75c
c001a962:	6a 00                	push   0x0
c001a964:	e8 84 05 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a969:	83 c4 0c             	add    esp,0xc
c001a96c:	6a 00                	push   0x0
c001a96e:	68 5c e7 00 c0       	push   0xc000e75c
c001a973:	6a 01                	push   0x1
c001a975:	e8 73 05 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a97a:	83 c4 0c             	add    esp,0xc
c001a97d:	6a 00                	push   0x0
c001a97f:	68 5c e7 00 c0       	push   0xc000e75c
c001a984:	6a 03                	push   0x3
c001a986:	e8 62 05 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a98b:	83 c4 0c             	add    esp,0xc
c001a98e:	6a 00                	push   0x0
c001a990:	68 5c e7 00 c0       	push   0xc000e75c
c001a995:	6a 04                	push   0x4
c001a997:	e8 51 05 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a99c:	83 c4 0c             	add    esp,0xc
c001a99f:	6a 00                	push   0x0
c001a9a1:	68 5c e7 00 c0       	push   0xc000e75c
c001a9a6:	6a 05                	push   0x5
c001a9a8:	e8 40 05 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9ad:	83 c4 0c             	add    esp,0xc
c001a9b0:	6a 00                	push   0x0
c001a9b2:	68 5c e7 00 c0       	push   0xc000e75c
c001a9b7:	6a 00                	push   0x0
c001a9b9:	e8 2f 05 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9be:	83 c4 0c             	add    esp,0xc
c001a9c1:	6a 00                	push   0x0
c001a9c3:	68 5c e7 00 c0       	push   0xc000e75c
c001a9c8:	6a 01                	push   0x1
c001a9ca:	e8 1e 05 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9cf:	83 c4 0c             	add    esp,0xc
c001a9d2:	6a 00                	push   0x0
c001a9d4:	68 5c e7 00 c0       	push   0xc000e75c
c001a9d9:	6a 09                	push   0x9
c001a9db:	e8 0d 05 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9e0:	83 c4 0c             	add    esp,0xc
c001a9e3:	6a 00                	push   0x0
c001a9e5:	68 5c e7 00 c0       	push   0xc000e75c
c001a9ea:	6a 0a                	push   0xa
c001a9ec:	e8 fc 04 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9f1:	83 c4 0c             	add    esp,0xc
c001a9f4:	6a 00                	push   0x0
c001a9f6:	68 5c e7 00 c0       	push   0xc000e75c
c001a9fb:	6a 0b                	push   0xb
c001a9fd:	e8 eb 04 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa02:	83 c4 10             	add    esp,0x10
c001aa05:	50                   	push   eax
c001aa06:	6a 00                	push   0x0
c001aa08:	68 5c e7 00 c0       	push   0xc000e75c
c001aa0d:	53                   	push   ebx
c001aa0e:	43                   	inc    ebx
c001aa0f:	e8 d9 04 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa14:	83 c4 10             	add    esp,0x10
c001aa17:	83 fb 1e             	cmp    ebx,0x1e
c001aa1a:	75 e9                	jne    c001aa05 <HalInitialise()+0x169>
c001aa1c:	50                   	push   eax
c001aa1d:	6a 00                	push   0x0
c001aa1f:	68 94 1d 01 c0       	push   0xc0011d94
c001aa24:	6a 60                	push   0x60
c001aa26:	e8 c2 04 00 00       	call   c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa2b:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c001aa30:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001aa3a:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001aa41:	e8 22 4c ff ff       	call   c000f668 <malloc>
c001aa46:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa49:	89 c3                	mov    ebx,eax
c001aa4b:	e8 ec 0e 00 00       	call   c001b93c <RTC::RTC()>
c001aa50:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001aa5a:	5a                   	pop    edx
c001aa5b:	59                   	pop    ecx
c001aa5c:	53                   	push   ebx
c001aa5d:	ff 35 08 d1 02 c0    	push   DWORD PTR ds:0xc002d108
c001aa63:	e8 8e ef fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001aa68:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa6a:	6a 00                	push   0x0
c001aa6c:	6a 00                	push   0x0
c001aa6e:	6a 00                	push   0x0
c001aa70:	53                   	push   ebx
c001aa71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aa74:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c001aa79:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001aa7f:	83 c4 28             	add    esp,0x28
c001aa82:	5b                   	pop    ebx
c001aa83:	c3                   	ret    

c001aa84 <HalMakeBeep(int)>:
c001aa84:	53                   	push   ebx
c001aa85:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001aa89:	85 db                	test   ebx,ebx
c001aa8b:	75 07                	jne    c001aa94 <HalMakeBeep(int)+0x10>
c001aa8d:	e4 61                	in     al,0x61
c001aa8f:	83 e0 fc             	and    eax,0xfffffffc
c001aa92:	eb 26                	jmp    c001aaba <HalMakeBeep(int)+0x36>
c001aa94:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001aa99:	99                   	cdq    
c001aa9a:	f7 fb                	idiv   ebx
c001aa9c:	89 c1                	mov    ecx,eax
c001aa9e:	b0 b6                	mov    al,0xb6
c001aaa0:	e6 43                	out    0x43,al
c001aaa2:	88 c8                	mov    al,cl
c001aaa4:	e6 42                	out    0x42,al
c001aaa6:	89 c8                	mov    eax,ecx
c001aaa8:	c1 e8 08             	shr    eax,0x8
c001aaab:	e6 42                	out    0x42,al
c001aaad:	e4 61                	in     al,0x61
c001aaaf:	89 c2                	mov    edx,eax
c001aab1:	83 ca 03             	or     edx,0x3
c001aab4:	38 d0                	cmp    al,dl
c001aab6:	74 04                	je     c001aabc <HalMakeBeep(int)+0x38>
c001aab8:	88 d0                	mov    al,dl
c001aaba:	e6 61                	out    0x61,al
c001aabc:	5b                   	pop    ebx
c001aabd:	c3                   	ret    

c001aabe <HalGetRand()>:
c001aabe:	31 c0                	xor    eax,eax
c001aac0:	c3                   	ret    

c001aac1 <HalEndOfInterrupt(int)>:
c001aac1:	f6 05 4c d4 02 c0 01 	test   BYTE PTR ds:0xc002d44c,0x1
c001aac8:	74 1d                	je     c001aae7 <HalEndOfInterrupt(int)+0x26>
c001aaca:	83 ec 18             	sub    esp,0x18
c001aacd:	6a 1b                	push   0x1b
c001aacf:	e8 d7 f4 ff ff       	call   c0019fab <x86rdmsr(unsigned int)>
c001aad4:	25 00 f0 ff ff       	and    eax,0xfffff000
c001aad9:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001aae3:	83 c4 1c             	add    esp,0x1c
c001aae6:	c3                   	ret    
c001aae7:	e9 6c 08 00 00       	jmp    c001b358 <picEOI(int)>

c001aaec <CPU::CPU()>:
c001aaec:	83 ec 0c             	sub    esp,0xc
c001aaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaf3:	83 ec 08             	sub    esp,0x8
c001aaf6:	68 16 58 02 c0       	push   0xc0025816
c001aafb:	50                   	push   eax
c001aafc:	e8 57 f0 fe ff       	call   c0009b58 <Device::Device(char const*)>
c001ab01:	83 c4 10             	add    esp,0x10
c001ab04:	ba 14 5b 02 c0       	mov    edx,0xc0025b14
c001ab09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab0d:	89 10                	mov    DWORD PTR [eax],edx
c001ab0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab13:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ab1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab21:	05 64 01 00 00       	add    eax,0x164
c001ab26:	83 ec 0c             	sub    esp,0xc
c001ab29:	50                   	push   eax
c001ab2a:	e8 c3 3c ff ff       	call   c000e7f2 <GDT::GDT()>
c001ab2f:	83 c4 10             	add    esp,0x10
c001ab32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab36:	05 68 09 00 00       	add    eax,0x968
c001ab3b:	83 ec 0c             	sub    esp,0xc
c001ab3e:	50                   	push   eax
c001ab3f:	e8 00 3f ff ff       	call   c000ea44 <IDT::IDT()>
c001ab44:	83 c4 10             	add    esp,0x10
c001ab47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab4b:	05 68 11 00 00       	add    eax,0x1168
c001ab50:	83 ec 0c             	sub    esp,0xc
c001ab53:	50                   	push   eax
c001ab54:	e8 5b 7d ff ff       	call   c00128b4 <TSS::TSS()>
c001ab59:	83 c4 10             	add    esp,0x10
c001ab5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab60:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001ab6a:	90                   	nop
c001ab6b:	83 c4 0c             	add    esp,0xc
c001ab6e:	c3                   	ret    
c001ab6f:	90                   	nop

c001ab70 <CPU::setupSMEP()>:
c001ab70:	0f 20 e0             	mov    eax,cr4
c001ab73:	0d 00 00 10 00       	or     eax,0x100000
c001ab78:	0f 22 e0             	mov    cr4,eax
c001ab7b:	c3                   	ret    

c001ab7c <CPU::setupUMIP()>:
c001ab7c:	0f 20 e0             	mov    eax,cr4
c001ab7f:	80 cc 08             	or     ah,0x8
c001ab82:	0f 22 e0             	mov    cr4,eax
c001ab85:	c3                   	ret    

c001ab86 <CPU::setupTSC()>:
c001ab86:	0f 20 e0             	mov    eax,cr4
c001ab89:	83 c8 04             	or     eax,0x4
c001ab8c:	0f 22 e0             	mov    cr4,eax
c001ab8f:	c3                   	ret    

c001ab90 <CPU::setupLargePages()>:
c001ab90:	0f 20 e0             	mov    eax,cr4
c001ab93:	83 c8 10             	or     eax,0x10
c001ab96:	0f 22 e0             	mov    cr4,eax
c001ab99:	c3                   	ret    

c001ab9a <CPU::setupPAT()>:
c001ab9a:	f6 05 4c d4 02 c0 08 	test   BYTE PTR ds:0xc002d44c,0x8
c001aba1:	74 28                	je     c001abcb <CPU::setupPAT()+0x31>
c001aba3:	53                   	push   ebx
c001aba4:	83 ec 14             	sub    esp,0x14
c001aba7:	68 77 02 00 00       	push   0x277
c001abac:	e8 fa f3 ff ff       	call   c0019fab <x86rdmsr(unsigned int)>
c001abb1:	83 c4 0c             	add    esp,0xc
c001abb4:	83 e2 f8             	and    edx,0xfffffff8
c001abb7:	83 ca 01             	or     edx,0x1
c001abba:	52                   	push   edx
c001abbb:	50                   	push   eax
c001abbc:	68 77 02 00 00       	push   0x277
c001abc1:	e8 23 f4 ff ff       	call   c0019fe9 <x86wrmsr(unsigned int, unsigned long long)>
c001abc6:	83 c4 18             	add    esp,0x18
c001abc9:	5b                   	pop    ebx
c001abca:	c3                   	ret    
c001abcb:	c3                   	ret    

c001abcc <CPU::setupMTRR()>:
c001abcc:	c3                   	ret    
c001abcd:	90                   	nop

c001abce <CPU::setupGlobalPages()>:
c001abce:	0f 20 e0             	mov    eax,cr4
c001abd1:	0c 80                	or     al,0x80
c001abd3:	0f 22 e0             	mov    cr4,eax
c001abd6:	c3                   	ret    
c001abd7:	90                   	nop

c001abd8 <CPU::allowUsermodeDataAccess()>:
c001abd8:	f6 05 4f d4 02 c0 40 	test   BYTE PTR ds:0xc002d44f,0x40
c001abdf:	74 03                	je     c001abe4 <CPU::allowUsermodeDataAccess()+0xc>
c001abe1:	0f 01 cb             	stac   
c001abe4:	c3                   	ret    
c001abe5:	90                   	nop

c001abe6 <CPU::prohibitUsermodeDataAccess()>:
c001abe6:	f6 05 4f d4 02 c0 40 	test   BYTE PTR ds:0xc002d44f,0x40
c001abed:	74 03                	je     c001abf2 <CPU::prohibitUsermodeDataAccess()+0xc>
c001abef:	0f 01 ca             	clac   
c001abf2:	c3                   	ret    
c001abf3:	90                   	nop

c001abf4 <CPU::setupSMAP()>:
c001abf4:	0f 20 e0             	mov    eax,cr4
c001abf7:	0d 00 00 20 00       	or     eax,0x200000
c001abfc:	0f 22 e0             	mov    cr4,eax
c001abff:	eb e5                	jmp    c001abe6 <CPU::prohibitUsermodeDataAccess()>
c001ac01:	90                   	nop

c001ac02 <CPU::setupFeatures()>:
c001ac02:	53                   	push   ebx
c001ac03:	83 ec 08             	sub    esp,0x8
c001ac06:	f6 05 4f d4 02 c0 20 	test   BYTE PTR ds:0xc002d44f,0x20
c001ac0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac11:	74 18                	je     c001ac2b <CPU::setupFeatures()+0x29>
c001ac13:	83 ec 0c             	sub    esp,0xc
c001ac16:	68 83 5a 02 c0       	push   0xc0025a83
c001ac1b:	e8 46 c3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ac20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac23:	e8 54 ff ff ff       	call   c001ab7c <CPU::setupUMIP()>
c001ac28:	83 c4 10             	add    esp,0x10
c001ac2b:	f6 05 4e d4 02 c0 08 	test   BYTE PTR ds:0xc002d44e,0x8
c001ac32:	74 18                	je     c001ac4c <CPU::setupFeatures()+0x4a>
c001ac34:	83 ec 0c             	sub    esp,0xc
c001ac37:	68 8d 5a 02 c0       	push   0xc0025a8d
c001ac3c:	e8 25 c3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ac41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac44:	e8 3d ff ff ff       	call   c001ab86 <CPU::setupTSC()>
c001ac49:	83 c4 10             	add    esp,0x10
c001ac4c:	f6 05 4e d4 02 c0 20 	test   BYTE PTR ds:0xc002d44e,0x20
c001ac53:	74 18                	je     c001ac6d <CPU::setupFeatures()+0x6b>
c001ac55:	83 ec 0c             	sub    esp,0xc
c001ac58:	68 96 5a 02 c0       	push   0xc0025a96
c001ac5d:	e8 04 c3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ac62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac65:	e8 26 ff ff ff       	call   c001ab90 <CPU::setupLargePages()>
c001ac6a:	83 c4 10             	add    esp,0x10
c001ac6d:	f6 05 4e d4 02 c0 40 	test   BYTE PTR ds:0xc002d44e,0x40
c001ac74:	74 18                	je     c001ac8e <CPU::setupFeatures()+0x8c>
c001ac76:	83 ec 0c             	sub    esp,0xc
c001ac79:	68 9f 5a 02 c0       	push   0xc0025a9f
c001ac7e:	e8 e3 c2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ac83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac86:	e8 43 ff ff ff       	call   c001abce <CPU::setupGlobalPages()>
c001ac8b:	83 c4 10             	add    esp,0x10
c001ac8e:	f6 05 4e d4 02 c0 80 	test   BYTE PTR ds:0xc002d44e,0x80
c001ac95:	74 18                	je     c001acaf <CPU::setupFeatures()+0xad>
c001ac97:	83 ec 0c             	sub    esp,0xc
c001ac9a:	68 b1 5a 02 c0       	push   0xc0025ab1
c001ac9f:	e8 c2 c2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aca4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aca7:	e8 ee fe ff ff       	call   c001ab9a <CPU::setupPAT()>
c001acac:	83 c4 10             	add    esp,0x10
c001acaf:	f6 05 50 d4 02 c0 04 	test   BYTE PTR ds:0xc002d450,0x4
c001acb6:	74 11                	je     c001acc9 <CPU::setupFeatures()+0xc7>
c001acb8:	c7 44 24 10 ba 5a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025aba
c001acc0:	83 c4 08             	add    esp,0x8
c001acc3:	5b                   	pop    ebx
c001acc4:	e9 9d c2 fe ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c001acc9:	83 c4 08             	add    esp,0x8
c001accc:	5b                   	pop    ebx
c001accd:	c3                   	ret    

c001acce <CPU::open(int, int, void*)>:
c001acce:	55                   	push   ebp
c001accf:	57                   	push   edi
c001acd0:	56                   	push   esi
c001acd1:	53                   	push   ebx
c001acd2:	83 ec 18             	sub    esp,0x18
c001acd5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001acd9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001acdd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ace1:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001ace7:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001aced:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001acf3:	50                   	push   eax
c001acf4:	e8 5b 3b ff ff       	call   c000e854 <GDT::setup()>
c001acf9:	83 c4 0c             	add    esp,0xc
c001acfc:	6a 00                	push   0x0
c001acfe:	68 ef be ad de       	push   0xdeadbeef
c001ad03:	55                   	push   ebp
c001ad04:	e8 ef 7b ff ff       	call   c00128f8 <TSS::setup(unsigned long, unsigned long)>
c001ad09:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ad0c:	e8 c7 7b ff ff       	call   c00128d8 <TSS::flush()>
c001ad11:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001ad17:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad1a:	e8 9b 3d ff ff       	call   c000eaba <IDT::setup()>
c001ad1f:	b8 00 04 00 00       	mov    eax,0x400
c001ad24:	0f 23 f8             	mov    dr7,eax
c001ad27:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001ad31:	e8 80 4f ff ff       	call   c000fcb6 <Phys::allocatePage()>
c001ad36:	83 c4 10             	add    esp,0x10
c001ad39:	85 f6                	test   esi,esi
c001ad3b:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001ad41:	89 38                	mov    DWORD PTR [eax],edi
c001ad43:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ad49:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001ad4c:	74 10                	je     c001ad5e <CPU::open(int, int, void*)+0x90>
c001ad4e:	50                   	push   eax
c001ad4f:	50                   	push   eax
c001ad50:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ad56:	56                   	push   esi
c001ad57:	e8 3e 85 ff ff       	call   c001329a <VAS::setCPUSpecific(unsigned long)>
c001ad5c:	eb 0d                	jmp    c001ad6b <CPU::open(int, int, void*)+0x9d>
c001ad5e:	83 ec 0c             	sub    esp,0xc
c001ad61:	68 c4 5a 02 c0       	push   0xc0025ac4
c001ad66:	e8 51 4d ff ff       	call   c000fabc <KePanic(char const*)>
c001ad6b:	83 c4 10             	add    esp,0x10
c001ad6e:	83 ec 0c             	sub    esp,0xc
c001ad71:	68 d2 5a 02 c0       	push   0xc0025ad2
c001ad76:	e8 4a 24 ff ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001ad7b:	e8 1c fb ff ff       	call   c001a89c <HalInitialise()>
c001ad80:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001ad87:	e8 ec 23 ff ff       	call   c000d178 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ad8c:	0f b6 c0             	movzx  eax,al
c001ad8f:	83 f8 01             	cmp    eax,0x1
c001ad92:	19 c0                	sbb    eax,eax
c001ad94:	83 e0 46             	and    eax,0x46
c001ad97:	83 c0 1e             	add    eax,0x1e
c001ad9a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad9d:	e8 bb 02 ff ff       	call   c000b05d <setupTimer(int)>
c001ada2:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001ada8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001adaf:	e8 c4 23 ff ff       	call   c000d178 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001adb4:	83 c4 10             	add    esp,0x10
c001adb7:	84 c0                	test   al,al
c001adb9:	74 0c                	je     c001adc7 <CPU::open(int, int, void*)+0xf9>
c001adbb:	83 ec 0c             	sub    esp,0xc
c001adbe:	53                   	push   ebx
c001adbf:	e8 3e fe ff ff       	call   c001ac02 <CPU::setupFeatures()>
c001adc4:	83 c4 10             	add    esp,0x10
c001adc7:	83 c4 0c             	add    esp,0xc
c001adca:	31 c0                	xor    eax,eax
c001adcc:	5b                   	pop    ebx
c001adcd:	5e                   	pop    esi
c001adce:	5f                   	pop    edi
c001adcf:	5d                   	pop    ebp
c001add0:	c3                   	ret    

c001add1 <convertLegacyIRQNumber(int)>:
c001add1:	83 ec 0c             	sub    esp,0xc
c001add4:	f6 05 4c d4 02 c0 01 	test   BYTE PTR ds:0xc002d44c,0x1
c001addb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001addf:	74 0c                	je     c001aded <convertLegacyIRQNumber(int)+0x1c>
c001ade1:	83 f8 0f             	cmp    eax,0xf
c001ade4:	7f 0b                	jg     c001adf1 <convertLegacyIRQNumber(int)+0x20>
c001ade6:	0f b6 80 28 66 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd99d8]
c001aded:	83 c4 0c             	add    esp,0xc
c001adf0:	c3                   	ret    
c001adf1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001adf5:	83 ec 0c             	sub    esp,0xc
c001adf8:	68 38 5b 02 c0       	push   0xc0025b38
c001adfd:	e8 ba 4c ff ff       	call   c000fabc <KePanic(char const*)>
c001ae02:	83 c4 10             	add    esp,0x10
c001ae05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae09:	83 c4 0c             	add    esp,0xc
c001ae0c:	c3                   	ret    

c001ae0d <KeSetupInterrupts()>:
c001ae0d:	31 c0                	xor    eax,eax
c001ae0f:	c7 80 60 e4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1ba0],0x0
c001ae19:	83 c0 10             	add    eax,0x10
c001ae1c:	c7 80 50 d4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2bb0],0x0
c001ae26:	c7 80 54 e4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1bac],0x0
c001ae30:	c7 80 54 d4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2bac],0x0
c001ae3a:	c7 80 58 e4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1ba8],0x0
c001ae44:	c7 80 58 d4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2ba8],0x0
c001ae4e:	c7 80 5c e4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1ba4],0x0
c001ae58:	c7 80 5c d4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2ba4],0x0
c001ae62:	3d 00 10 00 00       	cmp    eax,0x1000
c001ae67:	75 a6                	jne    c001ae0f <KeSetupInterrupts()+0x2>
c001ae69:	c3                   	ret    

c001ae6a <int_handler>:
c001ae6a:	55                   	push   ebp
c001ae6b:	57                   	push   edi
c001ae6c:	56                   	push   esi
c001ae6d:	53                   	push   ebx
c001ae6e:	83 ec 0c             	sub    esp,0xc
c001ae71:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ae75:	eb 02                	jmp    c001ae79 <int_handler+0xf>
c001ae77:	fa                   	cli    
c001ae78:	f4                   	hlt    
c001ae79:	e8 38 4c ff ff       	call   c000fab6 <KeIsKernelInPanic()>
c001ae7e:	84 c0                	test   al,al
c001ae80:	75 f5                	jne    c001ae77 <int_handler+0xd>
c001ae82:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001ae85:	8d 46 e0             	lea    eax,[esi-0x20]
c001ae88:	83 f8 17             	cmp    eax,0x17
c001ae8b:	76 40                	jbe    c001aecd <int_handler+0x63>
c001ae8d:	c1 e6 04             	shl    esi,0x4
c001ae90:	31 db                	xor    ebx,ebx
c001ae92:	8d ae 60 e4 02 c0    	lea    ebp,[esi-0x3ffd1ba0]
c001ae98:	81 c6 60 d4 02 c0    	add    esi,0xc002d460
c001ae9e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001aea2:	85 c0                	test   eax,eax
c001aea4:	74 13                	je     c001aeb9 <int_handler+0x4f>
c001aea6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001aeaa:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001aead:	74 2c                	je     c001aedb <int_handler+0x71>
c001aeaf:	83 ec 08             	sub    esp,0x8
c001aeb2:	52                   	push   edx
c001aeb3:	57                   	push   edi
c001aeb4:	ff d0                	call   eax
c001aeb6:	83 c4 10             	add    esp,0x10
c001aeb9:	83 c3 01             	add    ebx,0x1
c001aebc:	83 fb 04             	cmp    ebx,0x4
c001aebf:	75 dd                	jne    c001ae9e <int_handler+0x34>
c001aec1:	83 c4 0c             	add    esp,0xc
c001aec4:	31 c0                	xor    eax,eax
c001aec6:	5b                   	pop    ebx
c001aec7:	31 d2                	xor    edx,edx
c001aec9:	5e                   	pop    esi
c001aeca:	5f                   	pop    edi
c001aecb:	5d                   	pop    ebp
c001aecc:	c3                   	ret    
c001aecd:	83 ec 0c             	sub    esp,0xc
c001aed0:	50                   	push   eax
c001aed1:	e8 eb fb ff ff       	call   c001aac1 <HalEndOfInterrupt(int)>
c001aed6:	83 c4 10             	add    esp,0x10
c001aed9:	eb b2                	jmp    c001ae8d <int_handler+0x23>
c001aedb:	83 ec 08             	sub    esp,0x8
c001aede:	52                   	push   edx
c001aedf:	57                   	push   edi
c001aee0:	ff d0                	call   eax
c001aee2:	83 c4 10             	add    esp,0x10
c001aee5:	83 c4 0c             	add    esp,0xc
c001aee8:	5b                   	pop    ebx
c001aee9:	5e                   	pop    esi
c001aeea:	5f                   	pop    edi
c001aeeb:	5d                   	pop    ebp
c001aeec:	c3                   	ret    

c001aeed <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001aeed:	56                   	push   esi
c001aeee:	31 c0                	xor    eax,eax
c001aef0:	53                   	push   ebx
c001aef1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001aef5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aef9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aefd:	89 ca                	mov    edx,ecx
c001aeff:	c1 e2 04             	shl    edx,0x4
c001af02:	83 bc 82 60 e4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd1ba0],0x0
c001af0a:	74 17                	je     c001af23 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001af0c:	83 c0 01             	add    eax,0x1
c001af0f:	83 f8 04             	cmp    eax,0x4
c001af12:	75 ee                	jne    c001af02 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001af14:	c7 44 24 0c 99 5b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025b99
c001af1c:	5b                   	pop    ebx
c001af1d:	5e                   	pop    esi
c001af1e:	e9 99 4b ff ff       	jmp    c000fabc <KePanic(char const*)>
c001af23:	8d 04 88             	lea    eax,[eax+ecx*4]
c001af26:	89 1c 85 60 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ba0],ebx
c001af2d:	5b                   	pop    ebx
c001af2e:	89 34 85 60 d4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ba0],esi
c001af35:	5e                   	pop    esi
c001af36:	c3                   	ret    

c001af37 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001af37:	55                   	push   ebp
c001af38:	57                   	push   edi
c001af39:	56                   	push   esi
c001af3a:	53                   	push   ebx
c001af3b:	83 ec 0c             	sub    esp,0xc
c001af3e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001af42:	f6 05 4c d4 02 c0 01 	test   BYTE PTR ds:0xc002d44c,0x1
c001af49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af4d:	8d 6e 20             	lea    ebp,[esi+0x20]
c001af50:	74 57                	je     c001afa9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001af52:	84 c0                	test   al,al
c001af54:	89 c7                	mov    edi,eax
c001af56:	74 1d                	je     c001af75 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001af58:	83 fe 0f             	cmp    esi,0xf
c001af5b:	0f 8f d9 00 00 00    	jg     c001b03a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001af61:	0f b6 b6 28 66 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd99d8]
c001af68:	0f b7 bc 36 20 ce 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd31e0]
c001af70:	d1 ef                	shr    edi,1
c001af72:	83 e7 01             	and    edi,0x1
c001af75:	a1 c0 d3 02 c0       	mov    eax,ds:0xc002d3c0
c001af7a:	83 ec 08             	sub    esp,0x8
c001af7d:	31 db                	xor    ebx,ebx
c001af7f:	50                   	push   eax
c001af80:	68 a6 5b 02 c0       	push   0xc0025ba6
c001af85:	e8 dc bf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001af8a:	a1 c0 d3 02 c0       	mov    eax,ds:0xc002d3c0
c001af8f:	83 c4 10             	add    esp,0x10
c001af92:	85 c0                	test   eax,eax
c001af94:	7f 59                	jg     c001afef <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001af96:	8d 6e 20             	lea    ebp,[esi+0x20]
c001af99:	83 ec 0c             	sub    esp,0xc
c001af9c:	68 bd 5b 02 c0       	push   0xc0025bbd
c001afa1:	e8 16 4b ff ff       	call   c000fabc <KePanic(char const*)>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	89 e8                	mov    eax,ebp
c001afab:	31 d2                	xor    edx,edx
c001afad:	c1 e0 04             	shl    eax,0x4
c001afb0:	8b 8c 90 60 e4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd1ba0]
c001afb7:	85 c9                	test   ecx,ecx
c001afb9:	0f 84 92 00 00 00    	je     c001b051 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001afbf:	83 c2 01             	add    edx,0x1
c001afc2:	83 fa 04             	cmp    edx,0x4
c001afc5:	75 e9                	jne    c001afb0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001afc7:	83 ec 0c             	sub    esp,0xc
c001afca:	68 74 5b 02 c0       	push   0xc0025b74
c001afcf:	e8 e8 4a ff ff       	call   c000fabc <KePanic(char const*)>
c001afd4:	83 c4 10             	add    esp,0x10
c001afd7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001afdc:	83 c4 0c             	add    esp,0xc
c001afdf:	5b                   	pop    ebx
c001afe0:	5e                   	pop    esi
c001afe1:	5f                   	pop    edi
c001afe2:	5d                   	pop    ebp
c001afe3:	c3                   	ret    
c001afe4:	83 c3 01             	add    ebx,0x1
c001afe7:	39 1d c0 d3 02 c0    	cmp    DWORD PTR ds:0xc002d3c0,ebx
c001afed:	7e a7                	jle    c001af96 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001afef:	8b 2c 9d e0 d3 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2c20]
c001aff6:	83 ec 08             	sub    esp,0x8
c001aff9:	56                   	push   esi
c001affa:	55                   	push   ebp
c001affb:	e8 10 dc ff ff       	call   c0018c10 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b000:	83 c4 10             	add    esp,0x10
c001b003:	84 c0                	test   al,al
c001b005:	74 dd                	je     c001afe4 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001b007:	89 f8                	mov    eax,edi
c001b009:	83 ec 04             	sub    esp,0x4
c001b00c:	8b 1c 9d e0 d3 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2c20]
c001b013:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b016:	0f b6 f8             	movzx  edi,al
c001b019:	57                   	push   edi
c001b01a:	89 e8                	mov    eax,ebp
c001b01c:	6a 00                	push   0x0
c001b01e:	0f b6 c0             	movzx  eax,al
c001b021:	50                   	push   eax
c001b022:	89 f0                	mov    eax,esi
c001b024:	6a 00                	push   0x0
c001b026:	0f b6 c0             	movzx  eax,al
c001b029:	6a 00                	push   0x0
c001b02b:	50                   	push   eax
c001b02c:	53                   	push   ebx
c001b02d:	e8 4a dd ff ff       	call   c0018d7c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b032:	83 c4 20             	add    esp,0x20
c001b035:	e9 6f ff ff ff       	jmp    c001afa9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001b03a:	83 ec 0c             	sub    esp,0xc
c001b03d:	31 ff                	xor    edi,edi
c001b03f:	68 38 5b 02 c0       	push   0xc0025b38
c001b044:	e8 73 4a ff ff       	call   c000fabc <KePanic(char const*)>
c001b049:	83 c4 10             	add    esp,0x10
c001b04c:	e9 24 ff ff ff       	jmp    c001af75 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001b051:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001b054:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b058:	89 14 85 60 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ba0],edx
c001b05f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b063:	89 14 85 60 d4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ba0],edx
c001b06a:	83 c4 0c             	add    esp,0xc
c001b06d:	89 f0                	mov    eax,esi
c001b06f:	5b                   	pop    ebx
c001b070:	5e                   	pop    esi
c001b071:	5f                   	pop    edi
c001b072:	5d                   	pop    ebp
c001b073:	c3                   	ret    

c001b074 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001b074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b078:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b07c:	c1 e0 04             	shl    eax,0x4
c001b07f:	8d 50 10             	lea    edx,[eax+0x10]
c001b082:	39 88 60 e4 02 c0    	cmp    DWORD PTR [eax-0x3ffd1ba0],ecx
c001b088:	74 08                	je     c001b092 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b08a:	83 c0 04             	add    eax,0x4
c001b08d:	39 d0                	cmp    eax,edx
c001b08f:	75 f1                	jne    c001b082 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b091:	c3                   	ret    
c001b092:	c7 80 60 e4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1ba0],0x0
c001b09c:	c7 80 60 d4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2ba0],0x0
c001b0a6:	eb e2                	jmp    c001b08a <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b0a8 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b0a8:	56                   	push   esi
c001b0a9:	53                   	push   ebx
c001b0aa:	83 ec 04             	sub    esp,0x4
c001b0ad:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b0b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b0b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0ba:	74 09                	je     c001b0c5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b0bc:	f6 05 4c d4 02 c0 01 	test   BYTE PTR ds:0xc002d44c,0x1
c001b0c3:	75 34                	jne    c001b0f9 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001b0c5:	8d 43 20             	lea    eax,[ebx+0x20]
c001b0c8:	c1 e0 04             	shl    eax,0x4
c001b0cb:	8d 50 10             	lea    edx,[eax+0x10]
c001b0ce:	39 b0 60 e4 02 c0    	cmp    DWORD PTR [eax-0x3ffd1ba0],esi
c001b0d4:	74 0d                	je     c001b0e3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001b0d6:	83 c0 04             	add    eax,0x4
c001b0d9:	39 d0                	cmp    eax,edx
c001b0db:	75 f1                	jne    c001b0ce <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001b0dd:	83 c4 04             	add    esp,0x4
c001b0e0:	5b                   	pop    ebx
c001b0e1:	5e                   	pop    esi
c001b0e2:	c3                   	ret    
c001b0e3:	c7 80 60 e4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1ba0],0x0
c001b0ed:	c7 80 60 d4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2ba0],0x0
c001b0f7:	eb dd                	jmp    c001b0d6 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001b0f9:	83 fb 0f             	cmp    ebx,0xf
c001b0fc:	7f 09                	jg     c001b107 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001b0fe:	0f b6 9b 28 66 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd99d8]
c001b105:	eb be                	jmp    c001b0c5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b107:	83 ec 0c             	sub    esp,0xc
c001b10a:	68 ca 5b 02 c0       	push   0xc0025bca
c001b10f:	e8 a8 49 ff ff       	call   c000fabc <KePanic(char const*)>
c001b114:	83 c4 10             	add    esp,0x10
c001b117:	eb ac                	jmp    c001b0c5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b119:	66 90                	xchg   ax,ax
c001b11b:	90                   	nop

c001b11c <picIoWait()>:
c001b11c:	eb 00                	jmp    c001b11e <picIoWait()+0x2>
c001b11e:	eb 00                	jmp    c001b120 <picIoWait()+0x4>
c001b120:	90                   	nop
c001b121:	c3                   	ret    
c001b122:	66 90                	xchg   ax,ax

c001b124 <picDisable()>:
c001b124:	83 ec 10             	sub    esp,0x10
c001b127:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001b12e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001b133:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b137:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b13c:	ee                   	out    dx,al
c001b13d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001b144:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001b149:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b14d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001b152:	ee                   	out    dx,al
c001b153:	90                   	nop
c001b154:	83 c4 10             	add    esp,0x10
c001b157:	c3                   	ret    

c001b158 <picGetIRQReg(int)>:
c001b158:	83 ec 10             	sub    esp,0x10
c001b15b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b15f:	0f b6 c0             	movzx  eax,al
c001b162:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b169:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001b16d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b171:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b176:	ee                   	out    dx,al
c001b177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b17b:	0f b6 c0             	movzx  eax,al
c001b17e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b185:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b189:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b18d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b192:	ee                   	out    dx,al
c001b193:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001b19a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001b19f:	89 c2                	mov    edx,eax
c001b1a1:	ec                   	in     al,dx
c001b1a2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b1a6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b1aa:	0f b6 c0             	movzx  eax,al
c001b1ad:	c1 e0 08             	shl    eax,0x8
c001b1b0:	89 c1                	mov    ecx,eax
c001b1b2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001b1b9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001b1be:	89 c2                	mov    edx,eax
c001b1c0:	ec                   	in     al,dx
c001b1c1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001b1c5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b1c9:	0f b6 c0             	movzx  eax,al
c001b1cc:	09 c8                	or     eax,ecx
c001b1ce:	83 c4 10             	add    esp,0x10
c001b1d1:	c3                   	ret    
c001b1d2:	66 90                	xchg   ax,ax

c001b1d4 <picOpen()>:
c001b1d4:	83 ec 50             	sub    esp,0x50
c001b1d7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001b1de:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001b1e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b1e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1eb:	ee                   	out    dx,al
c001b1ec:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001b1f3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b1f8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b1fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b200:	ee                   	out    dx,al
c001b201:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001b209:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001b211:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001b218:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b21c:	89 c2                	mov    edx,eax
c001b21e:	ec                   	in     al,dx
c001b21f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001b223:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b227:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001b22b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001b232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b236:	89 c2                	mov    edx,eax
c001b238:	ec                   	in     al,dx
c001b239:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b23d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b241:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001b245:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001b24c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001b251:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001b255:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b259:	ee                   	out    dx,al
c001b25a:	e8 bd fe ff ff       	call   c001b11c <picIoWait()>
c001b25f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001b266:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001b26b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001b26f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b273:	ee                   	out    dx,al
c001b274:	e8 a3 fe ff ff       	call   c001b11c <picIoWait()>
c001b279:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b27d:	0f b6 c0             	movzx  eax,al
c001b280:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001b287:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001b28b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001b28f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b293:	ee                   	out    dx,al
c001b294:	e8 83 fe ff ff       	call   c001b11c <picIoWait()>
c001b299:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b29d:	0f b6 c0             	movzx  eax,al
c001b2a0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001b2a7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b2ab:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b2af:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b2b3:	ee                   	out    dx,al
c001b2b4:	e8 63 fe ff ff       	call   c001b11c <picIoWait()>
c001b2b9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001b2c0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001b2c5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001b2c9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b2cd:	ee                   	out    dx,al
c001b2ce:	e8 49 fe ff ff       	call   c001b11c <picIoWait()>
c001b2d3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001b2da:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001b2df:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001b2e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b2e7:	ee                   	out    dx,al
c001b2e8:	e8 2f fe ff ff       	call   c001b11c <picIoWait()>
c001b2ed:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001b2f4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001b2f9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001b2fd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b301:	ee                   	out    dx,al
c001b302:	e8 15 fe ff ff       	call   c001b11c <picIoWait()>
c001b307:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001b30e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001b313:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001b317:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b31b:	ee                   	out    dx,al
c001b31c:	e8 fb fd ff ff       	call   c001b11c <picIoWait()>
c001b321:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001b326:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001b32d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001b331:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001b335:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001b339:	ee                   	out    dx,al
c001b33a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001b33f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001b346:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b34a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001b34e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001b352:	ee                   	out    dx,al
c001b353:	90                   	nop
c001b354:	83 c4 50             	add    esp,0x50
c001b357:	c3                   	ret    

c001b358 <picEOI(int)>:
c001b358:	83 ec 10             	sub    esp,0x10
c001b35b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b360:	75 1e                	jne    c001b380 <picEOI(int)+0x28>
c001b362:	6a 0b                	push   0xb
c001b364:	e8 ef fd ff ff       	call   c001b158 <picGetIRQReg(int)>
c001b369:	83 c4 04             	add    esp,0x4
c001b36c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001b371:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001b376:	25 80 00 00 00       	and    eax,0x80
c001b37b:	74 73                	je     c001b3f0 <picEOI(int)+0x98>
c001b37d:	8d 76 00             	lea    esi,[esi+0x0]
c001b380:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001b385:	75 31                	jne    c001b3b8 <picEOI(int)+0x60>
c001b387:	6a 0b                	push   0xb
c001b389:	e8 ca fd ff ff       	call   c001b158 <picGetIRQReg(int)>
c001b38e:	83 c4 04             	add    esp,0x4
c001b391:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001b396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b39a:	98                   	cwde   
c001b39b:	85 c0                	test   eax,eax
c001b39d:	78 19                	js     c001b3b8 <picEOI(int)+0x60>
c001b39f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001b3a6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001b3ab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b3af:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b3b4:	ee                   	out    dx,al
c001b3b5:	eb 3d                	jmp    c001b3f4 <picEOI(int)+0x9c>
c001b3b7:	90                   	nop
c001b3b8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b3bd:	7e 19                	jle    c001b3d8 <picEOI(int)+0x80>
c001b3bf:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b3c6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001b3cb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b3cf:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b3d4:	ee                   	out    dx,al
c001b3d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b3d8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b3df:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001b3e4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b3e8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b3ed:	ee                   	out    dx,al
c001b3ee:	eb 04                	jmp    c001b3f4 <picEOI(int)+0x9c>
c001b3f0:	90                   	nop
c001b3f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b3f4:	83 c4 10             	add    esp,0x10
c001b3f7:	c3                   	ret    

c001b3f8 <RTC::open(int, int, void*)>:
c001b3f8:	31 c0                	xor    eax,eax
c001b3fa:	c3                   	ret    
c001b3fb:	90                   	nop

c001b3fc <RTC::close(int, int, void*)>:
c001b3fc:	31 c0                	xor    eax,eax
c001b3fe:	c3                   	ret    
c001b3ff:	90                   	nop

c001b400 <RTC::timeInSecondsUTC()>:
c001b400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b404:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b40a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b410:	c3                   	ret    
c001b411:	90                   	nop

c001b412 <RTC::timeInDatetimeUTC()>:
c001b412:	53                   	push   ebx
c001b413:	83 ec 14             	sub    esp,0x14
c001b416:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b41a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b41e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b420:	50                   	push   eax
c001b421:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b424:	83 c4 0c             	add    esp,0xc
c001b427:	52                   	push   edx
c001b428:	50                   	push   eax
c001b429:	53                   	push   ebx
c001b42a:	e8 e5 e1 fe ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c001b42f:	89 d8                	mov    eax,ebx
c001b431:	83 c4 14             	add    esp,0x14
c001b434:	5b                   	pop    ebx
c001b435:	c2 04 00             	ret    0x4

c001b438 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b438:	56                   	push   esi
c001b439:	53                   	push   ebx
c001b43a:	83 ec 14             	sub    esp,0x14
c001b43d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b441:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b443:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b446:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b44a:	52                   	push   edx
c001b44b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b44f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b453:	50                   	push   eax
c001b454:	e8 bb e1 fe ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c001b459:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b45d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b461:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b465:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b469:	89 f0                	mov    eax,esi
c001b46b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b46f:	83 c4 20             	add    esp,0x20
c001b472:	5b                   	pop    ebx
c001b473:	5e                   	pop    esi
c001b474:	ff e0                	jmp    eax

c001b476 <RTC::~RTC()>:
c001b476:	83 ec 0c             	sub    esp,0xc
c001b479:	ba f4 5b 02 c0       	mov    edx,0xc0025bf4
c001b47e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b482:	89 10                	mov    DWORD PTR [eax],edx
c001b484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b488:	83 ec 0c             	sub    esp,0xc
c001b48b:	50                   	push   eax
c001b48c:	e8 5b dc fe ff       	call   c00090ec <Clock::~Clock()>
c001b491:	83 c4 10             	add    esp,0x10
c001b494:	90                   	nop
c001b495:	83 c4 0c             	add    esp,0xc
c001b498:	c3                   	ret    
c001b499:	90                   	nop

c001b49a <RTC::~RTC()>:
c001b49a:	83 ec 0c             	sub    esp,0xc
c001b49d:	83 ec 0c             	sub    esp,0xc
c001b4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4a4:	e8 cd ff ff ff       	call   c001b476 <RTC::~RTC()>
c001b4a9:	83 c4 10             	add    esp,0x10
c001b4ac:	83 ec 08             	sub    esp,0x8
c001b4af:	68 60 01 00 00       	push   0x160
c001b4b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4b8:	e8 b3 1d ff ff       	call   c000d270 <operator delete(void*, unsigned long)>
c001b4bd:	83 c4 10             	add    esp,0x10
c001b4c0:	83 c4 0c             	add    esp,0xc
c001b4c3:	c3                   	ret    

c001b4c4 <RTC::get_update_in_progress_flag()>:
c001b4c4:	83 ec 18             	sub    esp,0x18
c001b4c7:	6a 0a                	push   0xa
c001b4c9:	e8 bf d9 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b4ce:	83 c4 1c             	add    esp,0x1c
c001b4d1:	0f b6 c0             	movzx  eax,al
c001b4d4:	c1 e8 07             	shr    eax,0x7
c001b4d7:	c3                   	ret    

c001b4d8 <RTC::completeRTCRefresh()>:
c001b4d8:	55                   	push   ebp
c001b4d9:	57                   	push   edi
c001b4da:	56                   	push   esi
c001b4db:	53                   	push   ebx
c001b4dc:	83 ec 3c             	sub    esp,0x3c
c001b4df:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b4e5:	83 ec 0c             	sub    esp,0xc
c001b4e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b4ec:	e8 d3 ff ff ff       	call   c001b4c4 <RTC::get_update_in_progress_flag()>
c001b4f1:	83 c4 10             	add    esp,0x10
c001b4f4:	84 c0                	test   al,al
c001b4f6:	74 0e                	je     c001b506 <RTC::completeRTCRefresh()+0x2e>
c001b4f8:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b4fe:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b504:	73 df                	jae    c001b4e5 <RTC::completeRTCRefresh()+0xd>
c001b506:	83 ec 0c             	sub    esp,0xc
c001b509:	6a 00                	push   0x0
c001b50b:	e8 7d d9 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b510:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b517:	89 c7                	mov    edi,eax
c001b519:	e8 6f d9 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b51e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b525:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b529:	e8 5f d9 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b52e:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b535:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b539:	e8 4f d9 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b53e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b545:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b549:	e8 3f d9 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b54e:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b555:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b559:	e8 2f d9 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b55e:	0f b6 c0             	movzx  eax,al
c001b561:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b565:	83 c4 10             	add    esp,0x10
c001b568:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b56e:	83 ec 0c             	sub    esp,0xc
c001b571:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b575:	e8 4a ff ff ff       	call   c001b4c4 <RTC::get_update_in_progress_flag()>
c001b57a:	83 c4 10             	add    esp,0x10
c001b57d:	84 c0                	test   al,al
c001b57f:	74 0e                	je     c001b58f <RTC::completeRTCRefresh()+0xb7>
c001b581:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b587:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b58d:	73 df                	jae    c001b56e <RTC::completeRTCRefresh()+0x96>
c001b58f:	83 ec 0c             	sub    esp,0xc
c001b592:	6a 00                	push   0x0
c001b594:	e8 f4 d8 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b599:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b5a0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b5a4:	e8 e4 d8 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b5a9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b5b0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b5b4:	e8 d4 d8 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b5b9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b5c0:	88 c3                	mov    bl,al
c001b5c2:	e8 c6 d8 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b5c7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b5ce:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b5d2:	e8 b6 d8 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b5d7:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b5de:	89 c6                	mov    esi,eax
c001b5e0:	e8 a8 d8 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b5e5:	89 f9                	mov    ecx,edi
c001b5e7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b5eb:	83 c4 10             	add    esp,0x10
c001b5ee:	0f b6 e8             	movzx  ebp,al
c001b5f1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5f6:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b5fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b5fe:	74 27                	je     c001b627 <RTC::completeRTCRefresh()+0x14f>
c001b600:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001b604:	89 f0                	mov    eax,esi
c001b606:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001b60a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b60e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b612:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b616:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b61a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b61e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b622:	e9 41 ff ff ff       	jmp    c001b568 <RTC::completeRTCRefresh()+0x90>
c001b627:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b62c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b630:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b634:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001b638:	75 c6                	jne    c001b600 <RTC::completeRTCRefresh()+0x128>
c001b63a:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b63f:	89 f1                	mov    ecx,esi
c001b641:	0f b6 fb             	movzx  edi,bl
c001b644:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b648:	0f b6 c9             	movzx  ecx,cl
c001b64b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b64f:	89 f1                	mov    ecx,esi
c001b651:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b655:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b659:	0f 94 c2             	sete   dl
c001b65c:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b660:	0f 94 c0             	sete   al
c001b663:	21 d0                	and    eax,edx
c001b665:	31 d2                	xor    edx,edx
c001b667:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b66b:	0f 94 c2             	sete   dl
c001b66e:	85 c2                	test   edx,eax
c001b670:	74 8e                	je     c001b600 <RTC::completeRTCRefresh()+0x128>
c001b672:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001b676:	75 88                	jne    c001b600 <RTC::completeRTCRefresh()+0x128>
c001b678:	83 ec 0c             	sub    esp,0xc
c001b67b:	6a 0b                	push   0xb
c001b67d:	e8 0b d8 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b682:	83 c4 10             	add    esp,0x10
c001b685:	a8 04                	test   al,0x4
c001b687:	75 7a                	jne    c001b703 <RTC::completeRTCRefresh()+0x22b>
c001b689:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b68d:	c1 ef 04             	shr    edi,0x4
c001b690:	83 e6 0f             	and    esi,0xf
c001b693:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b697:	c1 ed 04             	shr    ebp,0x4
c001b69a:	6b ed 0a             	imul   ebp,ebp,0xa
c001b69d:	c1 ea 04             	shr    edx,0x4
c001b6a0:	6b d2 0a             	imul   edx,edx,0xa
c001b6a3:	83 e1 0f             	and    ecx,0xf
c001b6a6:	01 d1                	add    ecx,edx
c001b6a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b6ac:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b6b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b6b4:	c1 ea 04             	shr    edx,0x4
c001b6b7:	6b d2 0a             	imul   edx,edx,0xa
c001b6ba:	83 e1 0f             	and    ecx,0xf
c001b6bd:	01 d1                	add    ecx,edx
c001b6bf:	89 fa                	mov    edx,edi
c001b6c1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b6c5:	83 e2 07             	and    edx,0x7
c001b6c8:	89 d9                	mov    ecx,ebx
c001b6ca:	6b d2 0a             	imul   edx,edx,0xa
c001b6cd:	83 e1 0f             	and    ecx,0xf
c001b6d0:	83 e3 80             	and    ebx,0xffffff80
c001b6d3:	01 d1                	add    ecx,edx
c001b6d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b6d9:	09 cb                	or     ebx,ecx
c001b6db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b6df:	c1 ea 04             	shr    edx,0x4
c001b6e2:	6b d2 0a             	imul   edx,edx,0xa
c001b6e5:	83 e1 0f             	and    ecx,0xf
c001b6e8:	01 d1                	add    ecx,edx
c001b6ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b6ee:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b6f2:	c1 ea 04             	shr    edx,0x4
c001b6f5:	6b d2 0a             	imul   edx,edx,0xa
c001b6f8:	01 d6                	add    esi,edx
c001b6fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b6fe:	83 e2 0f             	and    edx,0xf
c001b701:	01 d5                	add    ebp,edx
c001b703:	a8 02                	test   al,0x2
c001b705:	75 15                	jne    c001b71c <RTC::completeRTCRefresh()+0x244>
c001b707:	f6 c3 80             	test   bl,0x80
c001b70a:	74 10                	je     c001b71c <RTC::completeRTCRefresh()+0x244>
c001b70c:	83 e3 7f             	and    ebx,0x7f
c001b70f:	b9 18 00 00 00       	mov    ecx,0x18
c001b714:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b717:	99                   	cdq    
c001b718:	f7 f9                	idiv   ecx
c001b71a:	88 d3                	mov    bl,dl
c001b71c:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001b722:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001b728:	77 06                	ja     c001b730 <RTC::completeRTCRefresh()+0x258>
c001b72a:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001b730:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b735:	31 c9                	xor    ecx,ecx
c001b737:	31 d2                	xor    edx,edx
c001b739:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001b73d:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b741:	89 cd                	mov    ebp,ecx
c001b743:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001b747:	c1 e7 10             	shl    edi,0x10
c001b74a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b750:	c1 e0 10             	shl    eax,0x10
c001b753:	09 c5                	or     ebp,eax
c001b755:	89 e9                	mov    ecx,ebp
c001b757:	0f b7 c2             	movzx  eax,dx
c001b75a:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b75e:	09 f8                	or     eax,edi
c001b760:	89 c2                	mov    edx,eax
c001b762:	50                   	push   eax
c001b763:	50                   	push   eax
c001b764:	88 d9                	mov    cl,bl
c001b766:	51                   	push   ecx
c001b767:	52                   	push   edx
c001b768:	e8 b7 da fe ff       	call   c0009224 <KeDatetimeToSeconds(datetime_t)>
c001b76d:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b771:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b777:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b77d:	83 c4 4c             	add    esp,0x4c
c001b780:	5b                   	pop    ebx
c001b781:	5e                   	pop    esi
c001b782:	5f                   	pop    edi
c001b783:	5d                   	pop    ebp
c001b784:	c3                   	ret    
c001b785:	90                   	nop

c001b786 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b786:	55                   	push   ebp
c001b787:	57                   	push   edi
c001b788:	56                   	push   esi
c001b789:	53                   	push   ebx
c001b78a:	83 ec 34             	sub    esp,0x34
c001b78d:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b791:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b795:	6a 00                	push   0x0
c001b797:	6a 00                	push   0x0
c001b799:	e8 43 d7 ff ff       	call   c0018ee1 <x86WriteCMOS(unsigned char, unsigned char)>
c001b79e:	5d                   	pop    ebp
c001b79f:	89 fb                	mov    ebx,edi
c001b7a1:	58                   	pop    eax
c001b7a2:	6a 00                	push   0x0
c001b7a4:	6a 02                	push   0x2
c001b7a6:	e8 36 d7 ff ff       	call   c0018ee1 <x86WriteCMOS(unsigned char, unsigned char)>
c001b7ab:	89 f8                	mov    eax,edi
c001b7ad:	89 f9                	mov    ecx,edi
c001b7af:	0f b6 c4             	movzx  eax,ah
c001b7b2:	31 d2                	xor    edx,edx
c001b7b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b7b8:	c1 e9 10             	shr    ecx,0x10
c001b7bb:	89 f0                	mov    eax,esi
c001b7bd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b7c1:	89 f0                	mov    eax,esi
c001b7c3:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b7c7:	0f b6 c4             	movzx  eax,ah
c001b7ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b7ce:	89 f0                	mov    eax,esi
c001b7d0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b7d4:	c1 e8 10             	shr    eax,0x10
c001b7d7:	b9 64 00 00 00       	mov    ecx,0x64
c001b7dc:	f7 f1                	div    ecx
c001b7de:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b7e5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b7e9:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b7ed:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b7f1:	e8 97 d6 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b7f6:	83 c4 10             	add    esp,0x10
c001b7f9:	a8 04                	test   al,0x4
c001b7fb:	89 c5                	mov    ebp,eax
c001b7fd:	75 6e                	jne    c001b86d <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b7ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b803:	31 d2                	xor    edx,edx
c001b805:	0f b6 c1             	movzx  eax,cl
c001b808:	b9 0a 00 00 00       	mov    ecx,0xa
c001b80d:	f7 f1                	div    ecx
c001b80f:	c1 e0 04             	shl    eax,0x4
c001b812:	09 d0                	or     eax,edx
c001b814:	31 d2                	xor    edx,edx
c001b816:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b81a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b81f:	f7 f1                	div    ecx
c001b821:	c1 e0 04             	shl    eax,0x4
c001b824:	09 d0                	or     eax,edx
c001b826:	31 d2                	xor    edx,edx
c001b828:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b82c:	0f b6 c3             	movzx  eax,bl
c001b82f:	f7 f1                	div    ecx
c001b831:	c1 e0 04             	shl    eax,0x4
c001b834:	09 d0                	or     eax,edx
c001b836:	31 d2                	xor    edx,edx
c001b838:	89 c3                	mov    ebx,eax
c001b83a:	89 f0                	mov    eax,esi
c001b83c:	0f b6 c0             	movzx  eax,al
c001b83f:	f7 f1                	div    ecx
c001b841:	c1 e0 04             	shl    eax,0x4
c001b844:	09 d0                	or     eax,edx
c001b846:	31 d2                	xor    edx,edx
c001b848:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b84c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b851:	f7 f1                	div    ecx
c001b853:	c1 e0 04             	shl    eax,0x4
c001b856:	09 d0                	or     eax,edx
c001b858:	31 d2                	xor    edx,edx
c001b85a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b85e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b862:	f7 f1                	div    ecx
c001b864:	c1 e0 04             	shl    eax,0x4
c001b867:	09 d0                	or     eax,edx
c001b869:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b86d:	83 e5 02             	and    ebp,0x2
c001b870:	75 1e                	jne    c001b890 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b872:	0f b6 c3             	movzx  eax,bl
c001b875:	83 f8 0b             	cmp    eax,0xb
c001b878:	76 10                	jbe    c001b88a <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b87a:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b87d:	84 d2                	test   dl,dl
c001b87f:	88 d3                	mov    bl,dl
c001b881:	75 02                	jne    c001b885 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b883:	b3 0c                	mov    bl,0xc
c001b885:	83 cb 80             	or     ebx,0xffffff80
c001b888:	eb 06                	jmp    c001b890 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b88a:	85 c0                	test   eax,eax
c001b88c:	75 02                	jne    c001b890 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b88e:	b3 0c                	mov    bl,0xc
c001b890:	50                   	push   eax
c001b891:	0f b6 db             	movzx  ebx,bl
c001b894:	50                   	push   eax
c001b895:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b89a:	52                   	push   edx
c001b89b:	6a 00                	push   0x0
c001b89d:	e8 3f d6 ff ff       	call   c0018ee1 <x86WriteCMOS(unsigned char, unsigned char)>
c001b8a2:	5a                   	pop    edx
c001b8a3:	59                   	pop    ecx
c001b8a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8a9:	50                   	push   eax
c001b8aa:	6a 02                	push   0x2
c001b8ac:	e8 30 d6 ff ff       	call   c0018ee1 <x86WriteCMOS(unsigned char, unsigned char)>
c001b8b1:	5e                   	pop    esi
c001b8b2:	5f                   	pop    edi
c001b8b3:	53                   	push   ebx
c001b8b4:	6a 04                	push   0x4
c001b8b6:	e8 26 d6 ff ff       	call   c0018ee1 <x86WriteCMOS(unsigned char, unsigned char)>
c001b8bb:	5d                   	pop    ebp
c001b8bc:	58                   	pop    eax
c001b8bd:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b8c2:	52                   	push   edx
c001b8c3:	6a 07                	push   0x7
c001b8c5:	e8 17 d6 ff ff       	call   c0018ee1 <x86WriteCMOS(unsigned char, unsigned char)>
c001b8ca:	58                   	pop    eax
c001b8cb:	5a                   	pop    edx
c001b8cc:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b8d1:	50                   	push   eax
c001b8d2:	6a 08                	push   0x8
c001b8d4:	e8 08 d6 ff ff       	call   c0018ee1 <x86WriteCMOS(unsigned char, unsigned char)>
c001b8d9:	59                   	pop    ecx
c001b8da:	5b                   	pop    ebx
c001b8db:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b8e0:	55                   	push   ebp
c001b8e1:	6a 09                	push   0x9
c001b8e3:	e8 f9 d5 ff ff       	call   c0018ee1 <x86WriteCMOS(unsigned char, unsigned char)>
c001b8e8:	5e                   	pop    esi
c001b8e9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b8ed:	e8 e6 fb ff ff       	call   c001b4d8 <RTC::completeRTCRefresh()>
c001b8f2:	83 c4 3c             	add    esp,0x3c
c001b8f5:	b0 01                	mov    al,0x1
c001b8f7:	5b                   	pop    ebx
c001b8f8:	5e                   	pop    esi
c001b8f9:	5f                   	pop    edi
c001b8fa:	5d                   	pop    ebp
c001b8fb:	c3                   	ret    

c001b8fc <rtcIRQHandler(regs*, void*)>:
c001b8fc:	53                   	push   ebx
c001b8fd:	83 ec 14             	sub    esp,0x14
c001b900:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b904:	6a 0c                	push   0xc
c001b906:	e8 82 d5 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b90b:	83 c4 10             	add    esp,0x10
c001b90e:	a8 80                	test   al,0x80
c001b910:	74 24                	je     c001b936 <rtcIRQHandler(regs*, void*)+0x3a>
c001b912:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b919:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b920:	66 ff 05 60 f4 02 c0 	inc    WORD PTR ds:0xc002f460
c001b927:	75 0d                	jne    c001b936 <rtcIRQHandler(regs*, void*)+0x3a>
c001b929:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b92d:	83 c4 08             	add    esp,0x8
c001b930:	5b                   	pop    ebx
c001b931:	e9 a2 fb ff ff       	jmp    c001b4d8 <RTC::completeRTCRefresh()>
c001b936:	83 c4 08             	add    esp,0x8
c001b939:	5b                   	pop    ebx
c001b93a:	c3                   	ret    
c001b93b:	90                   	nop

c001b93c <RTC::RTC()>:
c001b93c:	83 ec 1c             	sub    esp,0x1c
c001b93f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b943:	83 ec 08             	sub    esp,0x8
c001b946:	68 d7 5b 02 c0       	push   0xc0025bd7
c001b94b:	50                   	push   eax
c001b94c:	e8 65 d7 fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001b951:	83 c4 10             	add    esp,0x10
c001b954:	ba f4 5b 02 c0       	mov    edx,0xc0025bf4
c001b959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b95d:	89 10                	mov    DWORD PTR [eax],edx
c001b95f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b963:	83 ec 0c             	sub    esp,0xc
c001b966:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b96a:	6a 01                	push   0x1
c001b96c:	68 fc b8 01 c0       	push   0xc001b8fc
c001b971:	6a 08                	push   0x8
c001b973:	50                   	push   eax
c001b974:	e8 29 e0 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b979:	83 c4 20             	add    esp,0x20
c001b97c:	89 c2                	mov    edx,eax
c001b97e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b982:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b988:	fa                   	cli    
c001b989:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001b98e:	83 c0 01             	add    eax,0x1
c001b991:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c001b996:	83 ec 0c             	sub    esp,0xc
c001b999:	6a 0b                	push   0xb
c001b99b:	e8 ed d4 ff ff       	call   c0018e8d <x86ReadCMOS(unsigned char)>
c001b9a0:	83 c4 10             	add    esp,0x10
c001b9a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b9a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b9ab:	83 c8 10             	or     eax,0x10
c001b9ae:	0f b6 c0             	movzx  eax,al
c001b9b1:	83 ec 08             	sub    esp,0x8
c001b9b4:	50                   	push   eax
c001b9b5:	6a 0b                	push   0xb
c001b9b7:	e8 25 d5 ff ff       	call   c0018ee1 <x86WriteCMOS(unsigned char, unsigned char)>
c001b9bc:	83 c4 10             	add    esp,0x10
c001b9bf:	83 ec 0c             	sub    esp,0xc
c001b9c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b9c6:	e8 0d fb ff ff       	call   c001b4d8 <RTC::completeRTCRefresh()>
c001b9cb:	83 c4 10             	add    esp,0x10
c001b9ce:	f0 83 2d 30 d3 02 c0 01 	lock sub DWORD PTR ds:0xc002d330,0x1
c001b9d6:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c001b9db:	85 c0                	test   eax,eax
c001b9dd:	75 01                	jne    c001b9e0 <RTC::RTC()+0xa4>
c001b9df:	fb                   	sti    
c001b9e0:	90                   	nop
c001b9e1:	83 c4 1c             	add    esp,0x1c
c001b9e4:	c3                   	ret    
c001b9e5:	66 90                	xchg   ax,ax
c001b9e7:	90                   	nop

c001b9e8 <HalConsoleScroll(int, int)>:
c001b9e8:	83 ec 10             	sub    esp,0x10
c001b9eb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b9f3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b9fb:	90                   	nop
c001b9fc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001ba01:	0f 8f e1 00 00 00    	jg     c001bae8 <HalConsoleScroll(int, int)+0x100>
c001ba07:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ba0f:	90                   	nop
c001ba10:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001ba18:	0f 8f be 00 00 00    	jg     c001badc <HalConsoleScroll(int, int)+0xf4>
c001ba1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba22:	89 d0                	mov    eax,edx
c001ba24:	c1 e0 02             	shl    eax,0x2
c001ba27:	01 d0                	add    eax,edx
c001ba29:	c1 e0 05             	shl    eax,0x5
c001ba2c:	89 c2                	mov    edx,eax
c001ba2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba32:	01 d0                	add    eax,edx
c001ba34:	89 c2                	mov    edx,eax
c001ba36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba3a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001ba3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba41:	89 d0                	mov    eax,edx
c001ba43:	c1 e0 02             	shl    eax,0x2
c001ba46:	01 d0                	add    eax,edx
c001ba48:	c1 e0 05             	shl    eax,0x5
c001ba4b:	89 c2                	mov    edx,eax
c001ba4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba51:	01 d0                	add    eax,edx
c001ba53:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001ba59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba5d:	01 d0                	add    eax,edx
c001ba5f:	8a 11                	mov    dl,BYTE PTR [ecx]
c001ba61:	88 10                	mov    BYTE PTR [eax],dl
c001ba63:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001ba68:	75 66                	jne    c001bad0 <HalConsoleScroll(int, int)+0xe8>
c001ba6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba6e:	83 e0 01             	and    eax,0x1
c001ba71:	74 39                	je     c001baac <HalConsoleScroll(int, int)+0xc4>
c001ba73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba77:	83 e0 0f             	and    eax,0xf
c001ba7a:	88 c2                	mov    dl,al
c001ba7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba80:	c1 e0 04             	shl    eax,0x4
c001ba83:	09 d0                	or     eax,edx
c001ba85:	88 c1                	mov    cl,al
c001ba87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba8b:	89 d0                	mov    eax,edx
c001ba8d:	c1 e0 02             	shl    eax,0x2
c001ba90:	01 d0                	add    eax,edx
c001ba92:	c1 e0 05             	shl    eax,0x5
c001ba95:	89 c2                	mov    edx,eax
c001ba97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba9b:	01 d0                	add    eax,edx
c001ba9d:	89 c2                	mov    edx,eax
c001ba9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baa3:	01 d0                	add    eax,edx
c001baa5:	88 ca                	mov    dl,cl
c001baa7:	88 10                	mov    BYTE PTR [eax],dl
c001baa9:	eb 25                	jmp    c001bad0 <HalConsoleScroll(int, int)+0xe8>
c001baab:	90                   	nop
c001baac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bab0:	89 d0                	mov    eax,edx
c001bab2:	c1 e0 02             	shl    eax,0x2
c001bab5:	01 d0                	add    eax,edx
c001bab7:	c1 e0 05             	shl    eax,0x5
c001baba:	89 c2                	mov    edx,eax
c001babc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bac0:	01 d0                	add    eax,edx
c001bac2:	89 c2                	mov    edx,eax
c001bac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bac8:	01 d0                	add    eax,edx
c001baca:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001bacd:	8d 76 00             	lea    esi,[esi+0x0]
c001bad0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001bad5:	e9 36 ff ff ff       	jmp    c001ba10 <HalConsoleScroll(int, int)+0x28>
c001bada:	66 90                	xchg   ax,ax
c001badc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001bae1:	e9 16 ff ff ff       	jmp    c001b9fc <HalConsoleScroll(int, int)+0x14>
c001bae6:	66 90                	xchg   ax,ax
c001bae8:	90                   	nop
c001bae9:	83 c4 10             	add    esp,0x10
c001baec:	c3                   	ret    
c001baed:	8d 76 00             	lea    esi,[esi+0x0]

c001baf0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001baf0:	83 ec 14             	sub    esp,0x14
c001baf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001baf7:	88 04 24             	mov    BYTE PTR [esp],al
c001bafa:	8a 04 24             	mov    al,BYTE PTR [esp]
c001bafd:	0f b6 c0             	movzx  eax,al
c001bb00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb04:	89 d1                	mov    ecx,edx
c001bb06:	83 e1 0f             	and    ecx,0xf
c001bb09:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bb0d:	c1 e2 04             	shl    edx,0x4
c001bb10:	0f b6 d2             	movzx  edx,dl
c001bb13:	09 ca                	or     edx,ecx
c001bb15:	c1 e2 08             	shl    edx,0x8
c001bb18:	09 d0                	or     eax,edx
c001bb1a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001bb1f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001bb27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bb2b:	89 d0                	mov    eax,edx
c001bb2d:	c1 e0 02             	shl    eax,0x2
c001bb30:	01 d0                	add    eax,edx
c001bb32:	c1 e0 04             	shl    eax,0x4
c001bb35:	89 c2                	mov    edx,eax
c001bb37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bb3b:	01 d0                	add    eax,edx
c001bb3d:	d1 e0                	shl    eax,1
c001bb3f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001bb43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb47:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001bb4c:	66 89 10             	mov    WORD PTR [eax],dx
c001bb4f:	90                   	nop
c001bb50:	83 c4 14             	add    esp,0x14
c001bb53:	c3                   	ret    

c001bb54 <HalConsoleCursorUpdate(int, int)>:
c001bb54:	83 ec 20             	sub    esp,0x20
c001bb57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bb5b:	89 c2                	mov    edx,eax
c001bb5d:	c1 e2 02             	shl    edx,0x2
c001bb60:	01 d0                	add    eax,edx
c001bb62:	c1 e0 04             	shl    eax,0x4
c001bb65:	89 c2                	mov    edx,eax
c001bb67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bb6b:	01 d0                	add    eax,edx
c001bb6d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001bb72:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001bb79:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001bb7e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bb82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb86:	ee                   	out    dx,al
c001bb87:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001bb8c:	0f b6 c0             	movzx  eax,al
c001bb8f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001bb96:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001bb9a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001bb9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bba2:	ee                   	out    dx,al
c001bba3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001bbaa:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001bbaf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001bbb3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bbb7:	ee                   	out    dx,al
c001bbb8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001bbbd:	c1 e8 08             	shr    eax,0x8
c001bbc0:	0f b6 c0             	movzx  eax,al
c001bbc3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001bbca:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001bbce:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001bbd2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bbd6:	ee                   	out    dx,al
c001bbd7:	90                   	nop
c001bbd8:	83 c4 20             	add    esp,0x20
c001bbdb:	c3                   	ret    

c001bbdc <FAT::getName()>:
c001bbdc:	b8 28 5c 02 c0       	mov    eax,0xc0025c28
c001bbe1:	c3                   	ret    
c001bbe2:	66 90                	xchg   ax,ax

c001bbe4 <FAT::tell(void*, unsigned long long*)>:
c001bbe4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bbe9:	75 09                	jne    c001bbf4 <FAT::tell(void*, unsigned long long*)+0x10>
c001bbeb:	b8 04 00 00 00       	mov    eax,0x4
c001bbf0:	c3                   	ret    
c001bbf1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbf4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bbf9:	75 09                	jne    c001bc04 <FAT::tell(void*, unsigned long long*)+0x20>
c001bbfb:	b8 04 00 00 00       	mov    eax,0x4
c001bc00:	c3                   	ret    
c001bc01:	8d 76 00             	lea    esi,[esi+0x0]
c001bc04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc08:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bc0b:	ba 00 00 00 00       	mov    edx,0x0
c001bc10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bc14:	89 01                	mov    DWORD PTR [ecx],eax
c001bc16:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bc19:	b8 00 00 00 00       	mov    eax,0x0
c001bc1e:	c3                   	ret    
c001bc1f:	90                   	nop

c001bc20 <FAT::stat(void*, unsigned long long*)>:
c001bc20:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bc25:	75 09                	jne    c001bc30 <FAT::stat(void*, unsigned long long*)+0x10>
c001bc27:	b8 04 00 00 00       	mov    eax,0x4
c001bc2c:	c3                   	ret    
c001bc2d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc30:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bc35:	75 09                	jne    c001bc40 <FAT::stat(void*, unsigned long long*)+0x20>
c001bc37:	b8 04 00 00 00       	mov    eax,0x4
c001bc3c:	c3                   	ret    
c001bc3d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bc47:	ba 00 00 00 00       	mov    edx,0x0
c001bc4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bc50:	89 01                	mov    DWORD PTR [ecx],eax
c001bc52:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bc55:	b8 00 00 00 00       	mov    eax,0x0
c001bc5a:	c3                   	ret    
c001bc5b:	90                   	nop

c001bc5c <FAT::~FAT()>:
c001bc5c:	83 ec 0c             	sub    esp,0xc
c001bc5f:	ba 74 5c 02 c0       	mov    edx,0xc0025c74
c001bc64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc68:	89 10                	mov    DWORD PTR [eax],edx
c001bc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc6e:	83 ec 0c             	sub    esp,0xc
c001bc71:	50                   	push   eax
c001bc72:	e8 5f c1 fe ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c001bc77:	83 c4 10             	add    esp,0x10
c001bc7a:	90                   	nop
c001bc7b:	83 c4 0c             	add    esp,0xc
c001bc7e:	c3                   	ret    
c001bc7f:	90                   	nop

c001bc80 <FAT::~FAT()>:
c001bc80:	83 ec 0c             	sub    esp,0xc
c001bc83:	83 ec 0c             	sub    esp,0xc
c001bc86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc8a:	e8 cd ff ff ff       	call   c001bc5c <FAT::~FAT()>
c001bc8f:	83 c4 10             	add    esp,0x10
c001bc92:	83 ec 08             	sub    esp,0x8
c001bc95:	6a 08                	push   0x8
c001bc97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc9b:	e8 d0 15 ff ff       	call   c000d270 <operator delete(void*, unsigned long)>
c001bca0:	83 c4 10             	add    esp,0x10
c001bca3:	83 c4 0c             	add    esp,0xc
c001bca6:	c3                   	ret    
c001bca7:	90                   	nop

c001bca8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001bca8:	83 ec 1c             	sub    esp,0x1c
c001bcab:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001bcb2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001bcb7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bcbb:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001bcc2:	83 f8 ff             	cmp    eax,0xffffffff
c001bcc5:	75 35                	jne    c001bcfc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001bcc7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bccb:	88 c2                	mov    dl,al
c001bccd:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001bcd2:	01 d0                	add    eax,edx
c001bcd4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bcd8:	8b 15 80 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f480
c001bcde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bce2:	89 14 85 a0 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b60],edx
c001bce9:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001bcee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcf2:	89 14 85 20 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ae0],edx
c001bcf9:	eb 19                	jmp    c001bd14 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001bcfb:	90                   	nop
c001bcfc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bd00:	88 c2                	mov    dl,al
c001bd02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bd06:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001bd0d:	01 d0                	add    eax,edx
c001bd0f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bd13:	90                   	nop
c001bd14:	83 ec 04             	sub    esp,0x4
c001bd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bd1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bd1f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001bd23:	50                   	push   eax
c001bd24:	e8 ab 94 fe ff       	call   c00051d4 <f_getlabel>
c001bd29:	83 c4 10             	add    esp,0x10
c001bd2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd30:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bd35:	75 09                	jne    c001bd40 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001bd37:	b8 00 00 00 00       	mov    eax,0x0
c001bd3c:	eb 0a                	jmp    c001bd48 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001bd3e:	66 90                	xchg   ax,ax
c001bd40:	b8 01 00 00 00       	mov    eax,0x1
c001bd45:	8d 76 00             	lea    esi,[esi+0x0]
c001bd48:	83 c4 1c             	add    esp,0x1c
c001bd4b:	c3                   	ret    

c001bd4c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001bd4c:	53                   	push   ebx
c001bd4d:	83 ec 58             	sub    esp,0x58
c001bd50:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001bd58:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bd5c:	b9 00 00 00 00       	mov    ecx,0x0
c001bd61:	b8 3c 00 00 00       	mov    eax,0x3c
c001bd66:	83 e0 f8             	and    eax,0xfffffff8
c001bd69:	89 c3                	mov    ebx,eax
c001bd6b:	b8 00 00 00 00       	mov    eax,0x0
c001bd70:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001bd74:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001bd78:	83 c0 08             	add    eax,0x8
c001bd7b:	39 d8                	cmp    eax,ebx
c001bd7d:	72 f1                	jb     c001bd70 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001bd7f:	01 c2                	add    edx,eax
c001bd81:	89 0a                	mov    DWORD PTR [edx],ecx
c001bd83:	83 c2 04             	add    edx,0x4
c001bd86:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bd8a:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001bd91:	83 f8 ff             	cmp    eax,0xffffffff
c001bd94:	75 36                	jne    c001bdcc <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001bd96:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bd9a:	88 c2                	mov    dl,al
c001bd9c:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001bda1:	01 d0                	add    eax,edx
c001bda3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bda7:	8b 15 80 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f480
c001bdad:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bdb1:	89 14 85 a0 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b60],edx
c001bdb8:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001bdbd:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001bdc1:	89 14 85 20 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ae0],edx
c001bdc8:	eb 1a                	jmp    c001bde4 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001bdca:	66 90                	xchg   ax,ax
c001bdcc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bdd0:	88 c2                	mov    dl,al
c001bdd2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bdd6:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001bddd:	01 d0                	add    eax,edx
c001bddf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bde3:	90                   	nop
c001bde4:	83 ec 08             	sub    esp,0x8
c001bde7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001bdeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bdef:	50                   	push   eax
c001bdf0:	e8 7b 4a fe ff       	call   c0000870 <strcat>
c001bdf5:	83 c4 10             	add    esp,0x10
c001bdf8:	83 ec 0c             	sub    esp,0xc
c001bdfb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bdff:	50                   	push   eax
c001be00:	e8 23 95 fe ff       	call   c0005328 <f_setlabel>
c001be05:	83 c4 10             	add    esp,0x10
c001be08:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be0c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001be11:	75 09                	jne    c001be1c <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001be13:	b8 00 00 00 00       	mov    eax,0x0
c001be18:	eb 0a                	jmp    c001be24 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001be1a:	66 90                	xchg   ax,ax
c001be1c:	b8 01 00 00 00       	mov    eax,0x1
c001be21:	8d 76 00             	lea    esi,[esi+0x0]
c001be24:	83 c4 58             	add    esp,0x58
c001be27:	5b                   	pop    ebx
c001be28:	c3                   	ret    
c001be29:	90                   	nop
c001be2a:	66 90                	xchg   ax,ax

c001be2c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001be2c:	83 ec 2c             	sub    esp,0x2c
c001be2f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001be37:	83 ec 08             	sub    esp,0x8
c001be3a:	68 4c 5c 02 c0       	push   0xc0025c4c
c001be3f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001be43:	e8 38 49 fe ff       	call   c0000780 <strcmp>
c001be48:	83 c4 10             	add    esp,0x10
c001be4b:	85 c0                	test   eax,eax
c001be4d:	0f 94 c0             	sete   al
c001be50:	0f b6 c0             	movzx  eax,al
c001be53:	85 c0                	test   eax,eax
c001be55:	74 0d                	je     c001be64 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001be57:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001be5f:	e9 c0 00 00 00       	jmp    c001bf24 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001be64:	83 ec 08             	sub    esp,0x8
c001be67:	68 3e 5c 02 c0       	push   0xc0025c3e
c001be6c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001be70:	e8 0b 49 fe ff       	call   c0000780 <strcmp>
c001be75:	83 c4 10             	add    esp,0x10
c001be78:	85 c0                	test   eax,eax
c001be7a:	0f 94 c0             	sete   al
c001be7d:	0f b6 c0             	movzx  eax,al
c001be80:	85 c0                	test   eax,eax
c001be82:	74 10                	je     c001be94 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001be84:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001be8c:	e9 93 00 00 00       	jmp    c001bf24 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001be91:	8d 76 00             	lea    esi,[esi+0x0]
c001be94:	83 ec 08             	sub    esp,0x8
c001be97:	68 44 5c 02 c0       	push   0xc0025c44
c001be9c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bea0:	e8 db 48 fe ff       	call   c0000780 <strcmp>
c001bea5:	83 c4 10             	add    esp,0x10
c001bea8:	85 c0                	test   eax,eax
c001beaa:	0f 94 c0             	sete   al
c001bead:	0f b6 c0             	movzx  eax,al
c001beb0:	85 c0                	test   eax,eax
c001beb2:	74 0c                	je     c001bec0 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001beb4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bebc:	eb 66                	jmp    c001bf24 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bebe:	66 90                	xchg   ax,ax
c001bec0:	83 ec 08             	sub    esp,0x8
c001bec3:	68 3c 2c 02 c0       	push   0xc0022c3c
c001bec8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001becc:	e8 af 48 fe ff       	call   c0000780 <strcmp>
c001bed1:	83 c4 10             	add    esp,0x10
c001bed4:	85 c0                	test   eax,eax
c001bed6:	0f 94 c0             	sete   al
c001bed9:	0f b6 c0             	movzx  eax,al
c001bedc:	85 c0                	test   eax,eax
c001bede:	74 0c                	je     c001beec <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001bee0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001bee8:	eb 3a                	jmp    c001bf24 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001beea:	66 90                	xchg   ax,ax
c001beec:	83 ec 08             	sub    esp,0x8
c001beef:	68 4a 5c 02 c0       	push   0xc0025c4a
c001bef4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bef8:	e8 83 48 fe ff       	call   c0000780 <strcmp>
c001befd:	83 c4 10             	add    esp,0x10
c001bf00:	85 c0                	test   eax,eax
c001bf02:	0f 94 c0             	sete   al
c001bf05:	0f b6 c0             	movzx  eax,al
c001bf08:	85 c0                	test   eax,eax
c001bf0a:	74 0c                	je     c001bf18 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001bf0c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001bf14:	eb 0e                	jmp    c001bf24 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bf16:	66 90                	xchg   ax,ax
c001bf18:	b8 08 00 00 00       	mov    eax,0x8
c001bf1d:	e9 ea 00 00 00       	jmp    c001c00c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bf22:	66 90                	xchg   ax,ax
c001bf24:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001bf2b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001bf30:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf34:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001bf3b:	83 f8 ff             	cmp    eax,0xffffffff
c001bf3e:	75 34                	jne    c001bf74 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001bf40:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bf44:	88 c2                	mov    dl,al
c001bf46:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001bf4b:	01 d0                	add    eax,edx
c001bf4d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bf51:	8b 15 80 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f480
c001bf57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf5b:	89 14 85 a0 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b60],edx
c001bf62:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001bf67:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bf6b:	89 14 85 20 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ae0],edx
c001bf72:	eb 18                	jmp    c001bf8c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001bf74:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bf78:	88 c2                	mov    dl,al
c001bf7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf7e:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001bf85:	01 d0                	add    eax,edx
c001bf87:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bf8b:	90                   	nop
c001bf8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf90:	88 04 24             	mov    BYTE PTR [esp],al
c001bf93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bf97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf9b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bfa3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001bfa8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bfb0:	83 ec 0c             	sub    esp,0xc
c001bfb3:	68 00 20 00 00       	push   0x2000
c001bfb8:	e8 ab 36 ff ff       	call   c000f668 <malloc>
c001bfbd:	83 c4 10             	add    esp,0x10
c001bfc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bfc4:	68 00 20 00 00       	push   0x2000
c001bfc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bfcd:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bfd1:	50                   	push   eax
c001bfd2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001bfd6:	50                   	push   eax
c001bfd7:	e8 49 96 fe ff       	call   c0005625 <f_mkfs>
c001bfdc:	83 c4 10             	add    esp,0x10
c001bfdf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bfe3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bfe8:	75 0a                	jne    c001bff4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001bfea:	b8 00 00 00 00       	mov    eax,0x0
c001bfef:	eb 1b                	jmp    c001c00c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bff1:	8d 76 00             	lea    esi,[esi+0x0]
c001bff4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001bff9:	75 09                	jne    c001c004 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001bffb:	b8 09 00 00 00       	mov    eax,0x9
c001c000:	eb 0a                	jmp    c001c00c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c002:	66 90                	xchg   ax,ax
c001c004:	b8 01 00 00 00       	mov    eax,0x1
c001c009:	8d 76 00             	lea    esi,[esi+0x0]
c001c00c:	83 c4 2c             	add    esp,0x2c
c001c00f:	c3                   	ret    

c001c010 <FAT::tryMount(LogicalDisk*, int)>:
c001c010:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001c016:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001c01b:	83 f8 14             	cmp    eax,0x14
c001c01e:	75 18                	jne    c001c038 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001c020:	83 ec 0c             	sub    esp,0xc
c001c023:	68 50 5c 02 c0       	push   0xc0025c50
c001c028:	e8 8f 3a ff ff       	call   c000fabc <KePanic(char const*)>
c001c02d:	83 c4 10             	add    esp,0x10
c001c030:	b0 00                	mov    al,0x0
c001c032:	e9 ed 01 00 00       	jmp    c001c224 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c037:	90                   	nop
c001c038:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001c03f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c045:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c04b:	3d 00 02 00 00       	cmp    eax,0x200
c001c050:	74 0a                	je     c001c05c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001c052:	b0 00                	mov    al,0x0
c001c054:	e9 cb 01 00 00       	jmp    c001c224 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c059:	8d 76 00             	lea    esi,[esi+0x0]
c001c05c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001c064:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c06b:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001c072:	83 f8 ff             	cmp    eax,0xffffffff
c001c075:	74 09                	je     c001c080 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001c077:	b0 01                	mov    al,0x1
c001c079:	e9 a6 01 00 00       	jmp    c001c224 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c07e:	66 90                	xchg   ax,ax
c001c080:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001c08a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001c092:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001c099:	88 c2                	mov    dl,al
c001c09b:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001c0a0:	01 d0                	add    eax,edx
c001c0a2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001c0a9:	8b 15 80 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f480
c001c0af:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c0b6:	89 14 85 a0 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b60],edx
c001c0bd:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001c0c2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001c0c9:	89 14 85 20 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ae0],edx
c001c0d0:	83 ec 0c             	sub    esp,0xc
c001c0d3:	68 34 02 00 00       	push   0x234
c001c0d8:	e8 8b 35 ff ff       	call   c000f668 <malloc>
c001c0dd:	83 c4 10             	add    esp,0x10
c001c0e0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001c0e7:	83 ec 04             	sub    esp,0x4
c001c0ea:	6a 00                	push   0x0
c001c0ec:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c0f3:	50                   	push   eax
c001c0f4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c0fb:	e8 1f 7d fe ff       	call   c0003e1f <f_mount>
c001c100:	83 c4 10             	add    esp,0x10
c001c103:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c10a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001c112:	74 1c                	je     c001c130 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001c114:	83 ec 0c             	sub    esp,0xc
c001c117:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c11e:	e8 65 35 ff ff       	call   c000f688 <rfree>
c001c123:	83 c4 10             	add    esp,0x10
c001c126:	b0 00                	mov    al,0x0
c001c128:	e9 f7 00 00 00       	jmp    c001c224 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c12d:	8d 76 00             	lea    esi,[esi+0x0]
c001c130:	83 ec 04             	sub    esp,0x4
c001c133:	68 00 01 00 00       	push   0x100
c001c138:	6a 00                	push   0x0
c001c13a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c141:	50                   	push   eax
c001c142:	e8 a9 43 fe ff       	call   c00004f0 <memset>
c001c147:	83 c4 10             	add    esp,0x10
c001c14a:	83 ec 08             	sub    esp,0x8
c001c14d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c154:	50                   	push   eax
c001c155:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c15c:	50                   	push   eax
c001c15d:	e8 0e 47 fe ff       	call   c0000870 <strcat>
c001c162:	83 c4 10             	add    esp,0x10
c001c165:	83 ec 08             	sub    esp,0x8
c001c168:	68 5e 5c 02 c0       	push   0xc0025c5e
c001c16d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c174:	50                   	push   eax
c001c175:	e8 f6 46 fe ff       	call   c0000870 <strcat>
c001c17a:	83 c4 10             	add    esp,0x10
c001c17d:	83 ec 04             	sub    esp,0x4
c001c180:	6a 01                	push   0x1
c001c182:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001c189:	50                   	push   eax
c001c18a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c18e:	50                   	push   eax
c001c18f:	e8 ed 7c fe ff       	call   c0003e81 <f_open>
c001c194:	83 c4 10             	add    esp,0x10
c001c197:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c19e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001c1a5:	85 c0                	test   eax,eax
c001c1a7:	74 0b                	je     c001c1b4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001c1a9:	78 31                	js     c001c1dc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c1ab:	83 e8 04             	sub    eax,0x4
c001c1ae:	83 f8 01             	cmp    eax,0x1
c001c1b1:	77 29                	ja     c001c1dc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c1b3:	90                   	nop
c001c1b4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001c1bc:	83 ec 0c             	sub    esp,0xc
c001c1bf:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1c3:	50                   	push   eax
c001c1c4:	e8 68 84 fe ff       	call   c0004631 <f_close>
c001c1c9:	83 c4 10             	add    esp,0x10
c001c1cc:	90                   	nop
c001c1cd:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001c1d5:	85 c0                	test   eax,eax
c001c1d7:	74 43                	je     c001c21c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001c1d9:	eb 31                	jmp    c001c20c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001c1db:	90                   	nop
c001c1dc:	83 ec 0c             	sub    esp,0xc
c001c1df:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c1e6:	e8 9d 34 ff ff       	call   c000f688 <rfree>
c001c1eb:	83 c4 10             	add    esp,0x10
c001c1ee:	83 ec 04             	sub    esp,0x4
c001c1f1:	6a 00                	push   0x0
c001c1f3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c1fa:	50                   	push   eax
c001c1fb:	6a 00                	push   0x0
c001c1fd:	e8 1d 7c fe ff       	call   c0003e1f <f_mount>
c001c202:	83 c4 10             	add    esp,0x10
c001c205:	b0 00                	mov    al,0x0
c001c207:	eb 1b                	jmp    c001c224 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c209:	8d 76 00             	lea    esi,[esi+0x0]
c001c20c:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c001c211:	83 c0 01             	add    eax,0x1
c001c214:	a3 80 f4 02 c0       	mov    ds:0xc002f480,eax
c001c219:	8d 76 00             	lea    esi,[esi+0x0]
c001c21c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001c223:	90                   	nop
c001c224:	81 c4 4c 03 00 00    	add    esp,0x34c
c001c22a:	c3                   	ret    
c001c22b:	90                   	nop

c001c22c <FAT::allocateSwapfile(char const*, int)>:
c001c22c:	55                   	push   ebp
c001c22d:	57                   	push   edi
c001c22e:	56                   	push   esi
c001c22f:	53                   	push   ebx
c001c230:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001c236:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001c241:	83 ec 0c             	sub    esp,0xc
c001c244:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001c24b:	e8 18 34 ff ff       	call   c000f668 <malloc>
c001c250:	83 c4 10             	add    esp,0x10
c001c253:	89 c7                	mov    edi,eax
c001c255:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001c25a:	83 ec 04             	sub    esp,0x4
c001c25d:	50                   	push   eax
c001c25e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001c265:	57                   	push   edi
c001c266:	e8 1d bf fe ff       	call   c0008188 <File::File(char const*, Process*)>
c001c26b:	83 c4 10             	add    esp,0x10
c001c26e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001c275:	83 ec 04             	sub    esp,0x4
c001c278:	8d 44 24 13          	lea    eax,[esp+0x13]
c001c27c:	50                   	push   eax
c001c27d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c281:	50                   	push   eax
c001c282:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c289:	e8 1a c2 fe ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001c28e:	83 c4 10             	add    esp,0x10
c001c291:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c298:	c1 e0 14             	shl    eax,0x14
c001c29b:	89 c7                	mov    edi,eax
c001c29d:	89 c5                	mov    ebp,eax
c001c29f:	c1 fd 1f             	sar    ebp,0x1f
c001c2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c2aa:	89 f9                	mov    ecx,edi
c001c2ac:	31 c1                	xor    ecx,eax
c001c2ae:	89 cb                	mov    ebx,ecx
c001c2b0:	89 e9                	mov    ecx,ebp
c001c2b2:	31 d1                	xor    ecx,edx
c001c2b4:	89 ce                	mov    esi,ecx
c001c2b6:	89 f0                	mov    eax,esi
c001c2b8:	09 d8                	or     eax,ebx
c001c2ba:	0f 84 9c 00 00 00    	je     c001c35c <FAT::allocateSwapfile(char const*, int)+0x130>
c001c2c0:	83 ec 0c             	sub    esp,0xc
c001c2c3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c2ca:	e8 a5 c0 fe ff       	call   c0008374 <File::unlink()>
c001c2cf:	83 c4 10             	add    esp,0x10
c001c2d2:	83 ec 08             	sub    esp,0x8
c001c2d5:	6a 12                	push   0x12
c001c2d7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c2de:	e8 c3 be fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001c2e3:	83 c4 10             	add    esp,0x10
c001c2e6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c2ed:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c2f3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c2fa:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c301:	c1 e0 14             	shl    eax,0x14
c001c304:	83 ec 04             	sub    esp,0x4
c001c307:	6a 01                	push   0x1
c001c309:	50                   	push   eax
c001c30a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001c311:	e8 a2 91 fe ff       	call   c00054b8 <f_expand>
c001c316:	83 c4 10             	add    esp,0x10
c001c319:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c320:	8b 00                	mov    eax,DWORD PTR [eax]
c001c322:	83 c0 10             	add    eax,0x10
c001c325:	8b 00                	mov    eax,DWORD PTR [eax]
c001c327:	83 ec 0c             	sub    esp,0xc
c001c32a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c32e:	52                   	push   edx
c001c32f:	8d 54 24 30          	lea    edx,[esp+0x30]
c001c333:	52                   	push   edx
c001c334:	6a 00                	push   0x0
c001c336:	68 00 04 00 00       	push   0x400
c001c33b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c342:	ff d0                	call   eax
c001c344:	83 c4 20             	add    esp,0x20
c001c347:	83 ec 0c             	sub    esp,0xc
c001c34a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c351:	e8 ae be fe ff       	call   c0008204 <File::close()>
c001c356:	83 c4 10             	add    esp,0x10
c001c359:	8d 76 00             	lea    esi,[esi+0x0]
c001c35c:	83 ec 08             	sub    esp,0x8
c001c35f:	6a 01                	push   0x1
c001c361:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c368:	e8 39 be fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001c36d:	83 c4 10             	add    esp,0x10
c001c370:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c377:	8b 00                	mov    eax,DWORD PTR [eax]
c001c379:	83 c0 0c             	add    eax,0xc
c001c37c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c37e:	83 ec 0c             	sub    esp,0xc
c001c381:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c385:	52                   	push   edx
c001c386:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001c38a:	52                   	push   edx
c001c38b:	6a 00                	push   0x0
c001c38d:	6a 04                	push   0x4
c001c38f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c396:	ff d0                	call   eax
c001c398:	83 c4 20             	add    esp,0x20
c001c39b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c3a2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c3a8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c3af:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001c3b6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001c3b9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001c3c0:	83 ec 0c             	sub    esp,0xc
c001c3c3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c3ca:	e8 35 be fe ff       	call   c0008204 <File::close()>
c001c3cf:	83 c4 10             	add    esp,0x10
c001c3d2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001c3d9:	ba 00 00 00 00       	mov    edx,0x0
c001c3de:	81 c4 3c 04 00 00    	add    esp,0x43c
c001c3e4:	5b                   	pop    ebx
c001c3e5:	5e                   	pop    esi
c001c3e6:	5f                   	pop    edi
c001c3e7:	5d                   	pop    ebp
c001c3e8:	c3                   	ret    
c001c3e9:	90                   	nop
c001c3ea:	66 90                	xchg   ax,ax

c001c3ec <FAT::readDir(void*, unsigned long, void*, int*)>:
c001c3ec:	57                   	push   edi
c001c3ed:	56                   	push   esi
c001c3ee:	53                   	push   ebx
c001c3ef:	81 ec 50 02 00 00    	sub    esp,0x250
c001c3f5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001c3fd:	74 0d                	je     c001c40c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001c3ff:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001c407:	75 0f                	jne    c001c418 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001c409:	8d 76 00             	lea    esi,[esi+0x0]
c001c40c:	b8 04 00 00 00       	mov    eax,0x4
c001c411:	e9 3a 01 00 00       	jmp    c001c550 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c416:	66 90                	xchg   ax,ax
c001c418:	83 ec 08             	sub    esp,0x8
c001c41b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c422:	50                   	push   eax
c001c423:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c42a:	e8 ce 84 fe ff       	call   c00048fd <f_readdir>
c001c42f:	83 c4 10             	add    esp,0x10
c001c432:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c439:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c440:	83 ec 0c             	sub    esp,0xc
c001c443:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c44a:	83 c0 16             	add    eax,0x16
c001c44d:	50                   	push   eax
c001c44e:	e8 2d 41 fe ff       	call   c0000580 <strlen>
c001c453:	83 c4 10             	add    esp,0x10
c001c456:	ba 00 00 00 00       	mov    edx,0x0
c001c45b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c45f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c463:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c46a:	0f b6 c0             	movzx  eax,al
c001c46d:	83 e0 10             	and    eax,0x10
c001c470:	74 0a                	je     c001c47c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c472:	b8 02 00 00 00       	mov    eax,0x2
c001c477:	eb 0b                	jmp    c001c484 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c479:	8d 76 00             	lea    esi,[esi+0x0]
c001c47c:	b8 01 00 00 00       	mov    eax,0x1
c001c481:	8d 76 00             	lea    esi,[esi+0x0]
c001c484:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c488:	83 ec 08             	sub    esp,0x8
c001c48b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c492:	83 c0 16             	add    eax,0x16
c001c495:	50                   	push   eax
c001c496:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c49a:	83 c0 10             	add    eax,0x10
c001c49d:	50                   	push   eax
c001c49e:	e8 ad 41 fe ff       	call   c0000650 <strcpy>
c001c4a3:	83 c4 10             	add    esp,0x10
c001c4a6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001c4ad:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001c4b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c4b8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001c4bf:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c4c6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c4cd:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c4d4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c4db:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c4e2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c4e9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c4f0:	89 c6                	mov    esi,eax
c001c4f2:	89 d7                	mov    edi,edx
c001c4f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c4f6:	89 c8                	mov    eax,ecx
c001c4f8:	89 fa                	mov    edx,edi
c001c4fa:	89 f3                	mov    ebx,esi
c001c4fc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c503:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c50a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c511:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c518:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c51e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c525:	0f be c0             	movsx  eax,al
c001c528:	85 c0                	test   eax,eax
c001c52a:	75 08                	jne    c001c534 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c52c:	b8 07 00 00 00       	mov    eax,0x7
c001c531:	eb 1d                	jmp    c001c550 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c533:	90                   	nop
c001c534:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c53b:	85 c0                	test   eax,eax
c001c53d:	75 09                	jne    c001c548 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c53f:	b8 00 00 00 00       	mov    eax,0x0
c001c544:	eb 0a                	jmp    c001c550 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c546:	66 90                	xchg   ax,ax
c001c548:	b8 01 00 00 00       	mov    eax,0x1
c001c54d:	8d 76 00             	lea    esi,[esi+0x0]
c001c550:	81 c4 50 02 00 00    	add    esp,0x250
c001c556:	5b                   	pop    ebx
c001c557:	5e                   	pop    esi
c001c558:	5f                   	pop    edi
c001c559:	c3                   	ret    
c001c55a:	66 90                	xchg   ax,ax

c001c55c <FAT::read(void*, unsigned long, void*, int*)>:
c001c55c:	83 ec 1c             	sub    esp,0x1c
c001c55f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c564:	74 0a                	je     c001c570 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c566:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c56b:	75 0b                	jne    c001c578 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c56d:	8d 76 00             	lea    esi,[esi+0x0]
c001c570:	b8 04 00 00 00       	mov    eax,0x4
c001c575:	eb 41                	jmp    c001c5b8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c577:	90                   	nop
c001c578:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c57c:	50                   	push   eax
c001c57d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c581:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c585:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c589:	e8 b6 7b fe ff       	call   c0004144 <f_read>
c001c58e:	83 c4 10             	add    esp,0x10
c001c591:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c599:	89 c2                	mov    edx,eax
c001c59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c59f:	89 10                	mov    DWORD PTR [eax],edx
c001c5a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5a5:	85 c0                	test   eax,eax
c001c5a7:	75 07                	jne    c001c5b0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c5a9:	b8 00 00 00 00       	mov    eax,0x0
c001c5ae:	eb 08                	jmp    c001c5b8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c5b0:	b8 01 00 00 00       	mov    eax,0x1
c001c5b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5b8:	83 c4 1c             	add    esp,0x1c
c001c5bb:	c3                   	ret    

c001c5bc <FAT::write(void*, unsigned long, void*, int*)>:
c001c5bc:	83 ec 1c             	sub    esp,0x1c
c001c5bf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c5c4:	74 0a                	je     c001c5d0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c5c6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c5cb:	75 0b                	jne    c001c5d8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c5cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c5d0:	b8 04 00 00 00       	mov    eax,0x4
c001c5d5:	eb 41                	jmp    c001c618 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c5d7:	90                   	nop
c001c5d8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c5dc:	50                   	push   eax
c001c5dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c5e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c5e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c5e9:	e8 37 7d fe ff       	call   c0004325 <f_write>
c001c5ee:	83 c4 10             	add    esp,0x10
c001c5f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5f9:	89 c2                	mov    edx,eax
c001c5fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c5ff:	89 10                	mov    DWORD PTR [eax],edx
c001c601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c605:	85 c0                	test   eax,eax
c001c607:	75 07                	jne    c001c610 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c609:	b8 00 00 00 00       	mov    eax,0x0
c001c60e:	eb 08                	jmp    c001c618 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c610:	b8 01 00 00 00       	mov    eax,0x1
c001c615:	8d 76 00             	lea    esi,[esi+0x0]
c001c618:	83 c4 1c             	add    esp,0x1c
c001c61b:	c3                   	ret    

c001c61c <FAT::close(void*)>:
c001c61c:	83 ec 1c             	sub    esp,0x1c
c001c61f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c624:	75 0a                	jne    c001c630 <FAT::close(void*)+0x14>
c001c626:	b8 04 00 00 00       	mov    eax,0x4
c001c62b:	eb 3f                	jmp    c001c66c <FAT::close(void*)+0x50>
c001c62d:	8d 76 00             	lea    esi,[esi+0x0]
c001c630:	83 ec 0c             	sub    esp,0xc
c001c633:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c637:	e8 f5 7f fe ff       	call   c0004631 <f_close>
c001c63c:	83 c4 10             	add    esp,0x10
c001c63f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c643:	83 ec 0c             	sub    esp,0xc
c001c646:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c64a:	e8 29 30 ff ff       	call   c000f678 <free>
c001c64f:	83 c4 10             	add    esp,0x10
c001c652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c656:	85 c0                	test   eax,eax
c001c658:	75 0a                	jne    c001c664 <FAT::close(void*)+0x48>
c001c65a:	b8 00 00 00 00       	mov    eax,0x0
c001c65f:	eb 0b                	jmp    c001c66c <FAT::close(void*)+0x50>
c001c661:	8d 76 00             	lea    esi,[esi+0x0]
c001c664:	b8 01 00 00 00       	mov    eax,0x1
c001c669:	8d 76 00             	lea    esi,[esi+0x0]
c001c66c:	83 c4 1c             	add    esp,0x1c
c001c66f:	c3                   	ret    

c001c670 <FAT::closeDir(void*)>:
c001c670:	83 ec 1c             	sub    esp,0x1c
c001c673:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c678:	75 0a                	jne    c001c684 <FAT::closeDir(void*)+0x14>
c001c67a:	b8 04 00 00 00       	mov    eax,0x4
c001c67f:	eb 3f                	jmp    c001c6c0 <FAT::closeDir(void*)+0x50>
c001c681:	8d 76 00             	lea    esi,[esi+0x0]
c001c684:	83 ec 0c             	sub    esp,0xc
c001c687:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c68b:	e8 4b 82 fe ff       	call   c00048db <f_closedir>
c001c690:	83 c4 10             	add    esp,0x10
c001c693:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c697:	83 ec 0c             	sub    esp,0xc
c001c69a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c69e:	e8 d5 2f ff ff       	call   c000f678 <free>
c001c6a3:	83 c4 10             	add    esp,0x10
c001c6a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6aa:	85 c0                	test   eax,eax
c001c6ac:	75 0a                	jne    c001c6b8 <FAT::closeDir(void*)+0x48>
c001c6ae:	b8 00 00 00 00       	mov    eax,0x0
c001c6b3:	eb 0b                	jmp    c001c6c0 <FAT::closeDir(void*)+0x50>
c001c6b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c6b8:	b8 01 00 00 00       	mov    eax,0x1
c001c6bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c6c0:	83 c4 1c             	add    esp,0x1c
c001c6c3:	c3                   	ret    

c001c6c4 <FAT::truncate(void*, unsigned long long)>:
c001c6c4:	83 ec 2c             	sub    esp,0x2c
c001c6c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c6cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c6d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6d7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c6dc:	75 0a                	jne    c001c6e8 <FAT::truncate(void*, unsigned long long)+0x24>
c001c6de:	b8 04 00 00 00       	mov    eax,0x4
c001c6e3:	eb 47                	jmp    c001c72c <FAT::truncate(void*, unsigned long long)+0x68>
c001c6e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c6e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c6ec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c6ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c6f3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c6fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6ff:	83 ec 08             	sub    esp,0x8
c001c702:	50                   	push   eax
c001c703:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c707:	e8 54 7f fe ff       	call   c0004660 <f_lseek>
c001c70c:	83 c4 10             	add    esp,0x10
c001c70f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c713:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c717:	85 c0                	test   eax,eax
c001c719:	75 09                	jne    c001c724 <FAT::truncate(void*, unsigned long long)+0x60>
c001c71b:	b8 00 00 00 00       	mov    eax,0x0
c001c720:	eb 0a                	jmp    c001c72c <FAT::truncate(void*, unsigned long long)+0x68>
c001c722:	66 90                	xchg   ax,ax
c001c724:	b8 01 00 00 00       	mov    eax,0x1
c001c729:	8d 76 00             	lea    esi,[esi+0x0]
c001c72c:	83 c4 2c             	add    esp,0x2c
c001c72f:	c3                   	ret    

c001c730 <FAT::seek(void*, unsigned long long)>:
c001c730:	83 ec 2c             	sub    esp,0x2c
c001c733:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c737:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c73b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c73f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c743:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c748:	75 0a                	jne    c001c754 <FAT::seek(void*, unsigned long long)+0x24>
c001c74a:	b8 04 00 00 00       	mov    eax,0x4
c001c74f:	eb 33                	jmp    c001c784 <FAT::seek(void*, unsigned long long)+0x54>
c001c751:	8d 76 00             	lea    esi,[esi+0x0]
c001c754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c758:	83 ec 08             	sub    esp,0x8
c001c75b:	50                   	push   eax
c001c75c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c760:	e8 fb 7e fe ff       	call   c0004660 <f_lseek>
c001c765:	83 c4 10             	add    esp,0x10
c001c768:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c76c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c770:	85 c0                	test   eax,eax
c001c772:	75 08                	jne    c001c77c <FAT::seek(void*, unsigned long long)+0x4c>
c001c774:	b8 00 00 00 00       	mov    eax,0x0
c001c779:	eb 09                	jmp    c001c784 <FAT::seek(void*, unsigned long long)+0x54>
c001c77b:	90                   	nop
c001c77c:	b8 01 00 00 00       	mov    eax,0x1
c001c781:	8d 76 00             	lea    esi,[esi+0x0]
c001c784:	83 c4 2c             	add    esp,0x2c
c001c787:	c3                   	ret    

c001c788 <fatWrapperReadDisk>:
c001c788:	53                   	push   ebx
c001c789:	83 ec 18             	sub    esp,0x18
c001c78c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c790:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c794:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c799:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c7a0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c7a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7a8:	ba 00 00 00 00       	mov    edx,0x0
c001c7ad:	83 ec 0c             	sub    esp,0xc
c001c7b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c7b4:	53                   	push   ebx
c001c7b5:	52                   	push   edx
c001c7b6:	50                   	push   eax
c001c7b7:	51                   	push   ecx
c001c7b8:	e8 59 e2 fe ff       	call   c000aa16 <LogicalDisk::read(unsigned long long, int, void*)>
c001c7bd:	83 c4 20             	add    esp,0x20
c001c7c0:	83 c4 18             	add    esp,0x18
c001c7c3:	5b                   	pop    ebx
c001c7c4:	c3                   	ret    
c001c7c5:	8d 76 00             	lea    esi,[esi+0x0]

c001c7c8 <fatWrapperWriteDisk>:
c001c7c8:	53                   	push   ebx
c001c7c9:	83 ec 18             	sub    esp,0x18
c001c7cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7d0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c7d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c7d9:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c7e0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c7e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7e8:	ba 00 00 00 00       	mov    edx,0x0
c001c7ed:	83 ec 0c             	sub    esp,0xc
c001c7f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c7f4:	53                   	push   ebx
c001c7f5:	52                   	push   edx
c001c7f6:	50                   	push   eax
c001c7f7:	51                   	push   ecx
c001c7f8:	e8 85 e2 fe ff       	call   c000aa82 <LogicalDisk::write(unsigned long long, int, void*)>
c001c7fd:	83 c4 20             	add    esp,0x20
c001c800:	83 c4 18             	add    esp,0x18
c001c803:	5b                   	pop    ebx
c001c804:	c3                   	ret    
c001c805:	8d 76 00             	lea    esi,[esi+0x0]

c001c808 <fatWrapperIoctl>:
c001c808:	53                   	push   ebx
c001c809:	83 ec 28             	sub    esp,0x28
c001c80c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c810:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c814:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c818:	88 d0                	mov    al,dl
c001c81a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c81e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c823:	83 f8 02             	cmp    eax,0x2
c001c826:	75 34                	jne    c001c85c <fatWrapperIoctl+0x54>
c001c828:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c82c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c830:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c835:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c83c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c842:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c848:	89 c2                	mov    edx,eax
c001c84a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c84e:	66 89 10             	mov    WORD PTR [eax],dx
c001c851:	b8 00 00 00 00       	mov    eax,0x0
c001c856:	e9 c5 00 00 00       	jmp    c001c920 <fatWrapperIoctl+0x118>
c001c85b:	90                   	nop
c001c85c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c861:	83 f8 01             	cmp    eax,0x1
c001c864:	75 6a                	jne    c001c8d0 <fatWrapperIoctl+0xc8>
c001c866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c86a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c86e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c873:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c87a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c880:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c886:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c88c:	89 c8                	mov    eax,ecx
c001c88e:	89 da                	mov    edx,ebx
c001c890:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c894:	c1 e0 0a             	shl    eax,0xa
c001c897:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c89c:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c001c8a3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c8a9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c8af:	89 cb                	mov    ebx,ecx
c001c8b1:	c1 fb 1f             	sar    ebx,0x1f
c001c8b4:	53                   	push   ebx
c001c8b5:	51                   	push   ecx
c001c8b6:	52                   	push   edx
c001c8b7:	50                   	push   eax
c001c8b8:	e8 77 55 00 00       	call   c0021e34 <__udivdi3>
c001c8bd:	83 c4 10             	add    esp,0x10
c001c8c0:	89 c2                	mov    edx,eax
c001c8c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8c6:	89 10                	mov    DWORD PTR [eax],edx
c001c8c8:	b8 00 00 00 00       	mov    eax,0x0
c001c8cd:	eb 51                	jmp    c001c920 <fatWrapperIoctl+0x118>
c001c8cf:	90                   	nop
c001c8d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c8d5:	85 c0                	test   eax,eax
c001c8d7:	75 07                	jne    c001c8e0 <fatWrapperIoctl+0xd8>
c001c8d9:	b8 00 00 00 00       	mov    eax,0x0
c001c8de:	eb 40                	jmp    c001c920 <fatWrapperIoctl+0x118>
c001c8e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c8e5:	83 f8 03             	cmp    eax,0x3
c001c8e8:	75 1a                	jne    c001c904 <fatWrapperIoctl+0xfc>
c001c8ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c8ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c8f6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c8fc:	b8 00 00 00 00       	mov    eax,0x0
c001c901:	eb 1d                	jmp    c001c920 <fatWrapperIoctl+0x118>
c001c903:	90                   	nop
c001c904:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c909:	83 f8 04             	cmp    eax,0x4
c001c90c:	75 0a                	jne    c001c918 <fatWrapperIoctl+0x110>
c001c90e:	b8 00 00 00 00       	mov    eax,0x0
c001c913:	eb 0b                	jmp    c001c920 <fatWrapperIoctl+0x118>
c001c915:	8d 76 00             	lea    esi,[esi+0x0]
c001c918:	b8 04 00 00 00       	mov    eax,0x4
c001c91d:	8d 76 00             	lea    esi,[esi+0x0]
c001c920:	83 c4 28             	add    esp,0x28
c001c923:	5b                   	pop    ebx
c001c924:	c3                   	ret    
c001c925:	90                   	nop
c001c926:	66 90                	xchg   ax,ax

c001c928 <FAT::FAT()>:
c001c928:	83 ec 1c             	sub    esp,0x1c
c001c92b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c92f:	83 ec 0c             	sub    esp,0xc
c001c932:	50                   	push   eax
c001c933:	e8 7a b4 fe ff       	call   c0007db2 <Filesystem::Filesystem()>
c001c938:	83 c4 10             	add    esp,0x10
c001c93b:	ba 74 5c 02 c0       	mov    edx,0xc0025c74
c001c940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c944:	89 10                	mov    DWORD PTR [eax],edx
c001c946:	c7 05 80 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f480,0x0
c001c950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c958:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c95d:	7f 19                	jg     c001c978 <FAT::FAT()+0x50>
c001c95f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c963:	c7 04 85 a0 f4 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0b60],0xffffffff
c001c96e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c973:	eb e3                	jmp    c001c958 <FAT::FAT()+0x30>
c001c975:	8d 76 00             	lea    esi,[esi+0x0]
c001c978:	90                   	nop
c001c979:	83 c4 1c             	add    esp,0x1c
c001c97c:	c3                   	ret    
c001c97d:	90                   	nop
c001c97e:	66 90                	xchg   ax,ax

c001c980 <FAT::fixFilepath(char*)>:
c001c980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c984:	8a 00                	mov    al,BYTE PTR [eax]
c001c986:	0f be c0             	movsx  eax,al
c001c989:	83 f8 40             	cmp    eax,0x40
c001c98c:	7e 2e                	jle    c001c9bc <FAT::fixFilepath(char*)+0x3c>
c001c98e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c992:	8a 00                	mov    al,BYTE PTR [eax]
c001c994:	83 e8 41             	sub    eax,0x41
c001c997:	88 c2                	mov    dl,al
c001c999:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c99d:	88 10                	mov    BYTE PTR [eax],dl
c001c99f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9a3:	8a 00                	mov    al,BYTE PTR [eax]
c001c9a5:	0f be c0             	movsx  eax,al
c001c9a8:	8b 04 85 a0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b60]
c001c9af:	83 c0 30             	add    eax,0x30
c001c9b2:	88 c2                	mov    dl,al
c001c9b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9b8:	88 10                	mov    BYTE PTR [eax],dl
c001c9ba:	66 90                	xchg   ax,ax
c001c9bc:	90                   	nop
c001c9bd:	c3                   	ret    
c001c9be:	66 90                	xchg   ax,ax

c001c9c0 <FAT::open(char const*, void**, FileOpenMode)>:
c001c9c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c9c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c9ce:	74 0c                	je     c001c9dc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c9d0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c9d8:	75 0e                	jne    c001c9e8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c9da:	66 90                	xchg   ax,ax
c001c9dc:	b8 04 00 00 00       	mov    eax,0x4
c001c9e1:	e9 46 01 00 00       	jmp    c001cb2c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c9e6:	66 90                	xchg   ax,ax
c001c9e8:	83 ec 08             	sub    esp,0x8
c001c9eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c9f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c9f6:	50                   	push   eax
c001c9f7:	e8 54 3c fe ff       	call   c0000650 <strcpy>
c001c9fc:	83 c4 10             	add    esp,0x10
c001c9ff:	83 ec 08             	sub    esp,0x8
c001ca02:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ca06:	50                   	push   eax
c001ca07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ca0e:	e8 6d ff ff ff       	call   c001c980 <FAT::fixFilepath(char*)>
c001ca13:	83 c4 10             	add    esp,0x10
c001ca16:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ca1e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ca25:	83 e0 01             	and    eax,0x1
c001ca28:	74 12                	je     c001ca3c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001ca2a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ca31:	83 c8 01             	or     eax,0x1
c001ca34:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ca3b:	90                   	nop
c001ca3c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ca43:	83 e0 04             	and    eax,0x4
c001ca46:	74 24                	je     c001ca6c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001ca48:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ca4f:	83 c8 30             	or     eax,0x30
c001ca52:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ca59:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ca60:	83 c8 02             	or     eax,0x2
c001ca63:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ca6a:	66 90                	xchg   ax,ax
c001ca6c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ca73:	83 e0 02             	and    eax,0x2
c001ca76:	74 14                	je     c001ca8c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001ca78:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ca7f:	83 c8 02             	or     eax,0x2
c001ca82:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001ca89:	8d 76 00             	lea    esi,[esi+0x0]
c001ca8c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ca93:	83 e0 08             	and    eax,0x8
c001ca96:	74 14                	je     c001caac <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001ca98:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001ca9f:	83 c8 04             	or     eax,0x4
c001caa2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001caa9:	8d 76 00             	lea    esi,[esi+0x0]
c001caac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cab3:	83 e0 10             	and    eax,0x10
c001cab6:	74 14                	je     c001cacc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001cab8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cabf:	83 c8 08             	or     eax,0x8
c001cac2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cac9:	8d 76 00             	lea    esi,[esi+0x0]
c001cacc:	83 ec 0c             	sub    esp,0xc
c001cacf:	68 28 02 00 00       	push   0x228
c001cad4:	e8 8f 2b ff ff       	call   c000f668 <malloc>
c001cad9:	83 c4 10             	add    esp,0x10
c001cadc:	89 c2                	mov    edx,eax
c001cade:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cae5:	89 10                	mov    DWORD PTR [eax],edx
c001cae7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001caef:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001caf6:	8b 00                	mov    eax,DWORD PTR [eax]
c001caf8:	83 ec 04             	sub    esp,0x4
c001cafb:	52                   	push   edx
c001cafc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001cb00:	52                   	push   edx
c001cb01:	50                   	push   eax
c001cb02:	e8 7a 73 fe ff       	call   c0003e81 <f_open>
c001cb07:	83 c4 10             	add    esp,0x10
c001cb0a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001cb11:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001cb19:	74 09                	je     c001cb24 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001cb1b:	b8 01 00 00 00       	mov    eax,0x1
c001cb20:	eb 0a                	jmp    c001cb2c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001cb22:	66 90                	xchg   ax,ax
c001cb24:	b8 00 00 00 00       	mov    eax,0x0
c001cb29:	8d 76 00             	lea    esi,[esi+0x0]
c001cb2c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cb32:	c3                   	ret    
c001cb33:	90                   	nop

c001cb34 <FAT::openDir(char const*, void**)>:
c001cb34:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cb3a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cb42:	74 0c                	je     c001cb50 <FAT::openDir(char const*, void**)+0x1c>
c001cb44:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001cb4c:	75 0e                	jne    c001cb5c <FAT::openDir(char const*, void**)+0x28>
c001cb4e:	66 90                	xchg   ax,ax
c001cb50:	b8 04 00 00 00       	mov    eax,0x4
c001cb55:	e9 82 00 00 00       	jmp    c001cbdc <FAT::openDir(char const*, void**)+0xa8>
c001cb5a:	66 90                	xchg   ax,ax
c001cb5c:	83 ec 08             	sub    esp,0x8
c001cb5f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cb66:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb6a:	50                   	push   eax
c001cb6b:	e8 e0 3a fe ff       	call   c0000650 <strcpy>
c001cb70:	83 c4 10             	add    esp,0x10
c001cb73:	83 ec 08             	sub    esp,0x8
c001cb76:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cb7a:	50                   	push   eax
c001cb7b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cb82:	e8 f9 fd ff ff       	call   c001c980 <FAT::fixFilepath(char*)>
c001cb87:	83 c4 10             	add    esp,0x10
c001cb8a:	83 ec 0c             	sub    esp,0xc
c001cb8d:	6a 30                	push   0x30
c001cb8f:	e8 d4 2a ff ff       	call   c000f668 <malloc>
c001cb94:	83 c4 10             	add    esp,0x10
c001cb97:	89 c2                	mov    edx,eax
c001cb99:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cba0:	89 10                	mov    DWORD PTR [eax],edx
c001cba2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cba9:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbab:	83 ec 08             	sub    esp,0x8
c001cbae:	8d 54 24 14          	lea    edx,[esp+0x14]
c001cbb2:	52                   	push   edx
c001cbb3:	50                   	push   eax
c001cbb4:	e8 57 7c fe ff       	call   c0004810 <f_opendir>
c001cbb9:	83 c4 10             	add    esp,0x10
c001cbbc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cbc3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001cbcb:	74 07                	je     c001cbd4 <FAT::openDir(char const*, void**)+0xa0>
c001cbcd:	b8 01 00 00 00       	mov    eax,0x1
c001cbd2:	eb 08                	jmp    c001cbdc <FAT::openDir(char const*, void**)+0xa8>
c001cbd4:	b8 00 00 00 00       	mov    eax,0x0
c001cbd9:	8d 76 00             	lea    esi,[esi+0x0]
c001cbdc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cbe2:	c3                   	ret    
c001cbe3:	90                   	nop

c001cbe4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001cbe4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001cbea:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001cbf2:	75 0c                	jne    c001cc00 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001cbf4:	b8 04 00 00 00       	mov    eax,0x4
c001cbf9:	e9 d6 00 00 00       	jmp    c001ccd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cbfe:	66 90                	xchg   ax,ax
c001cc00:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001cc08:	75 0a                	jne    c001cc14 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001cc0a:	b8 04 00 00 00       	mov    eax,0x4
c001cc0f:	e9 c0 00 00 00       	jmp    c001ccd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cc14:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001cc1c:	75 0a                	jne    c001cc28 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001cc1e:	b8 04 00 00 00       	mov    eax,0x4
c001cc23:	e9 ac 00 00 00       	jmp    c001ccd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cc28:	83 ec 08             	sub    esp,0x8
c001cc2b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cc32:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001cc39:	50                   	push   eax
c001cc3a:	e8 11 3a fe ff       	call   c0000650 <strcpy>
c001cc3f:	83 c4 10             	add    esp,0x10
c001cc42:	83 ec 08             	sub    esp,0x8
c001cc45:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001cc4c:	50                   	push   eax
c001cc4d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cc54:	e8 27 fd ff ff       	call   c001c980 <FAT::fixFilepath(char*)>
c001cc59:	83 c4 10             	add    esp,0x10
c001cc5c:	83 ec 08             	sub    esp,0x8
c001cc5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001cc63:	50                   	push   eax
c001cc64:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001cc6b:	50                   	push   eax
c001cc6c:	e8 1e 7d fe ff       	call   c000498f <f_stat>
c001cc71:	83 c4 10             	add    esp,0x10
c001cc74:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001cc7b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001cc82:	85 c0                	test   eax,eax
c001cc84:	74 0a                	je     c001cc90 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001cc86:	83 f8 04             	cmp    eax,0x4
c001cc89:	74 39                	je     c001ccc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001cc8b:	eb 3f                	jmp    c001cccc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001cc8d:	8d 76 00             	lea    esi,[esi+0x0]
c001cc90:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cc94:	0f b6 c0             	movzx  eax,al
c001cc97:	83 e0 10             	and    eax,0x10
c001cc9a:	0f 95 c2             	setne  dl
c001cc9d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001cca4:	88 10                	mov    BYTE PTR [eax],dl
c001cca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccaa:	ba 00 00 00 00       	mov    edx,0x0
c001ccaf:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ccb6:	89 01                	mov    DWORD PTR [ecx],eax
c001ccb8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ccbb:	b8 00 00 00 00       	mov    eax,0x0
c001ccc0:	eb 12                	jmp    c001ccd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ccc2:	66 90                	xchg   ax,ax
c001ccc4:	b8 02 00 00 00       	mov    eax,0x2
c001ccc9:	eb 09                	jmp    c001ccd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cccb:	90                   	nop
c001cccc:	b8 01 00 00 00       	mov    eax,0x1
c001ccd1:	8d 76 00             	lea    esi,[esi+0x0]
c001ccd4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ccda:	c3                   	ret    
c001ccdb:	90                   	nop

c001ccdc <FAT::unlink(char const*)>:
c001ccdc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cce2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ccea:	75 08                	jne    c001ccf4 <FAT::unlink(char const*)+0x18>
c001ccec:	b8 04 00 00 00       	mov    eax,0x4
c001ccf1:	eb 61                	jmp    c001cd54 <FAT::unlink(char const*)+0x78>
c001ccf3:	90                   	nop
c001ccf4:	83 ec 08             	sub    esp,0x8
c001ccf7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ccfe:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cd02:	50                   	push   eax
c001cd03:	e8 48 39 fe ff       	call   c0000650 <strcpy>
c001cd08:	83 c4 10             	add    esp,0x10
c001cd0b:	83 ec 08             	sub    esp,0x8
c001cd0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cd12:	50                   	push   eax
c001cd13:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cd1a:	e8 61 fc ff ff       	call   c001c980 <FAT::fixFilepath(char*)>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	83 ec 0c             	sub    esp,0xc
c001cd25:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cd29:	50                   	push   eax
c001cd2a:	e8 d2 7e fe ff       	call   c0004c01 <f_unlink>
c001cd2f:	83 c4 10             	add    esp,0x10
c001cd32:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cd39:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cd40:	85 c0                	test   eax,eax
c001cd42:	75 08                	jne    c001cd4c <FAT::unlink(char const*)+0x70>
c001cd44:	b8 00 00 00 00       	mov    eax,0x0
c001cd49:	eb 09                	jmp    c001cd54 <FAT::unlink(char const*)+0x78>
c001cd4b:	90                   	nop
c001cd4c:	b8 01 00 00 00       	mov    eax,0x1
c001cd51:	8d 76 00             	lea    esi,[esi+0x0]
c001cd54:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cd5a:	c3                   	ret    
c001cd5b:	90                   	nop

c001cd5c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001cd5c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cd62:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001cd69:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001cd70:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cd74:	88 d0                	mov    al,dl
c001cd76:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cd7a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001cd82:	75 0c                	jne    c001cd90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001cd84:	b8 04 00 00 00       	mov    eax,0x4
c001cd89:	e9 7e 01 00 00       	jmp    c001cf0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001cd8e:	66 90                	xchg   ax,ax
c001cd90:	83 ec 08             	sub    esp,0x8
c001cd93:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cd9a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cd9e:	50                   	push   eax
c001cd9f:	e8 ac 38 fe ff       	call   c0000650 <strcpy>
c001cda4:	83 c4 10             	add    esp,0x10
c001cda7:	83 ec 08             	sub    esp,0x8
c001cdaa:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cdae:	50                   	push   eax
c001cdaf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cdb6:	e8 c5 fb ff ff       	call   c001c980 <FAT::fixFilepath(char*)>
c001cdbb:	83 c4 10             	add    esp,0x10
c001cdbe:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001cdc6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001cdce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cdd3:	83 e0 01             	and    eax,0x1
c001cdd6:	74 14                	je     c001cdec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001cdd8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cddf:	83 c8 01             	or     eax,0x1
c001cde2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cde9:	8d 76 00             	lea    esi,[esi+0x0]
c001cdec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cdf1:	83 e0 02             	and    eax,0x2
c001cdf4:	74 12                	je     c001ce08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001cdf6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cdfd:	83 c8 20             	or     eax,0x20
c001ce00:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ce07:	90                   	nop
c001ce08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ce0d:	83 e0 04             	and    eax,0x4
c001ce10:	74 12                	je     c001ce24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001ce12:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ce19:	83 c8 04             	or     eax,0x4
c001ce1c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ce23:	90                   	nop
c001ce24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ce29:	83 e0 08             	and    eax,0x8
c001ce2c:	74 12                	je     c001ce40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001ce2e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ce35:	83 c8 02             	or     eax,0x2
c001ce38:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ce3f:	90                   	nop
c001ce40:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ce45:	83 e0 01             	and    eax,0x1
c001ce48:	74 12                	je     c001ce5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001ce4a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ce51:	83 c8 01             	or     eax,0x1
c001ce54:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ce5b:	90                   	nop
c001ce5c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ce61:	83 e0 02             	and    eax,0x2
c001ce64:	74 12                	je     c001ce78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001ce66:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ce6d:	83 c8 20             	or     eax,0x20
c001ce70:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ce77:	90                   	nop
c001ce78:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ce7d:	83 e0 04             	and    eax,0x4
c001ce80:	74 12                	je     c001ce94 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001ce82:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ce89:	83 c8 04             	or     eax,0x4
c001ce8c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ce93:	90                   	nop
c001ce94:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ce99:	83 e0 08             	and    eax,0x8
c001ce9c:	74 12                	je     c001ceb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001ce9e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cea5:	83 c8 02             	or     eax,0x2
c001cea8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ceaf:	90                   	nop
c001ceb0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001ceb7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cebe:	09 d0                	or     eax,edx
c001cec0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cec7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001cecf:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ced7:	83 ec 04             	sub    esp,0x4
c001ceda:	52                   	push   edx
c001cedb:	50                   	push   eax
c001cedc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cee0:	50                   	push   eax
c001cee1:	e8 8e 81 fe ff       	call   c0005074 <f_chmod>
c001cee6:	83 c4 10             	add    esp,0x10
c001cee9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001cef0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001cef7:	85 c0                	test   eax,eax
c001cef9:	75 09                	jne    c001cf04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001cefb:	b8 00 00 00 00       	mov    eax,0x0
c001cf00:	eb 0a                	jmp    c001cf0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001cf02:	66 90                	xchg   ax,ax
c001cf04:	b8 01 00 00 00       	mov    eax,0x1
c001cf09:	8d 76 00             	lea    esi,[esi+0x0]
c001cf0c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cf12:	c3                   	ret    
c001cf13:	90                   	nop

c001cf14 <FAT::rename(char const*, char const*)>:
c001cf14:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cf1a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001cf22:	74 0c                	je     c001cf30 <FAT::rename(char const*, char const*)+0x1c>
c001cf24:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001cf2c:	75 0e                	jne    c001cf3c <FAT::rename(char const*, char const*)+0x28>
c001cf2e:	66 90                	xchg   ax,ax
c001cf30:	b8 04 00 00 00       	mov    eax,0x4
c001cf35:	e9 9e 00 00 00       	jmp    c001cfd8 <FAT::rename(char const*, char const*)+0xc4>
c001cf3a:	66 90                	xchg   ax,ax
c001cf3c:	83 ec 08             	sub    esp,0x8
c001cf3f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cf46:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cf4d:	50                   	push   eax
c001cf4e:	e8 fd 36 fe ff       	call   c0000650 <strcpy>
c001cf53:	83 c4 10             	add    esp,0x10
c001cf56:	83 ec 08             	sub    esp,0x8
c001cf59:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001cf60:	50                   	push   eax
c001cf61:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cf68:	e8 13 fa ff ff       	call   c001c980 <FAT::fixFilepath(char*)>
c001cf6d:	83 c4 10             	add    esp,0x10
c001cf70:	83 ec 08             	sub    esp,0x8
c001cf73:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001cf7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cf7e:	50                   	push   eax
c001cf7f:	e8 cc 36 fe ff       	call   c0000650 <strcpy>
c001cf84:	83 c4 10             	add    esp,0x10
c001cf87:	83 ec 08             	sub    esp,0x8
c001cf8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cf8e:	50                   	push   eax
c001cf8f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cf96:	e8 e5 f9 ff ff       	call   c001c980 <FAT::fixFilepath(char*)>
c001cf9b:	83 c4 10             	add    esp,0x10
c001cf9e:	83 ec 08             	sub    esp,0x8
c001cfa1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cfa5:	50                   	push   eax
c001cfa6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cfad:	50                   	push   eax
c001cfae:	e8 09 7f fe ff       	call   c0004ebc <f_rename>
c001cfb3:	83 c4 10             	add    esp,0x10
c001cfb6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001cfbd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001cfc4:	85 c0                	test   eax,eax
c001cfc6:	75 08                	jne    c001cfd0 <FAT::rename(char const*, char const*)+0xbc>
c001cfc8:	b8 00 00 00 00       	mov    eax,0x0
c001cfcd:	eb 09                	jmp    c001cfd8 <FAT::rename(char const*, char const*)+0xc4>
c001cfcf:	90                   	nop
c001cfd0:	b8 01 00 00 00       	mov    eax,0x1
c001cfd5:	8d 76 00             	lea    esi,[esi+0x0]
c001cfd8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cfde:	c3                   	ret    
c001cfdf:	90                   	nop

c001cfe0 <FAT::mkdir(char const*)>:
c001cfe0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cfe6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cfee:	75 08                	jne    c001cff8 <FAT::mkdir(char const*)+0x18>
c001cff0:	b8 04 00 00 00       	mov    eax,0x4
c001cff5:	eb 61                	jmp    c001d058 <FAT::mkdir(char const*)+0x78>
c001cff7:	90                   	nop
c001cff8:	83 ec 08             	sub    esp,0x8
c001cffb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d002:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d006:	50                   	push   eax
c001d007:	e8 44 36 fe ff       	call   c0000650 <strcpy>
c001d00c:	83 c4 10             	add    esp,0x10
c001d00f:	83 ec 08             	sub    esp,0x8
c001d012:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d016:	50                   	push   eax
c001d017:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d01e:	e8 5d f9 ff ff       	call   c001c980 <FAT::fixFilepath(char*)>
c001d023:	83 c4 10             	add    esp,0x10
c001d026:	83 ec 0c             	sub    esp,0xc
c001d029:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d02d:	50                   	push   eax
c001d02e:	e8 ee 7c fe ff       	call   c0004d21 <f_mkdir>
c001d033:	83 c4 10             	add    esp,0x10
c001d036:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001d03d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001d044:	85 c0                	test   eax,eax
c001d046:	75 08                	jne    c001d050 <FAT::mkdir(char const*)+0x70>
c001d048:	b8 00 00 00 00       	mov    eax,0x0
c001d04d:	eb 09                	jmp    c001d058 <FAT::mkdir(char const*)+0x78>
c001d04f:	90                   	nop
c001d050:	b8 01 00 00 00       	mov    eax,0x1
c001d055:	8d 76 00             	lea    esi,[esi+0x0]
c001d058:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d05e:	c3                   	ret    
c001d05f:	90                   	nop

c001d060 <FAT::exists(char const*)>:
c001d060:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001d066:	83 ec 08             	sub    esp,0x8
c001d069:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d070:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d074:	50                   	push   eax
c001d075:	e8 d6 35 fe ff       	call   c0000650 <strcpy>
c001d07a:	83 c4 10             	add    esp,0x10
c001d07d:	83 ec 08             	sub    esp,0x8
c001d080:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001d084:	50                   	push   eax
c001d085:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d08c:	e8 ef f8 ff ff       	call   c001c980 <FAT::fixFilepath(char*)>
c001d091:	83 c4 10             	add    esp,0x10
c001d094:	83 ec 08             	sub    esp,0x8
c001d097:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001d09e:	50                   	push   eax
c001d09f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d0a3:	50                   	push   eax
c001d0a4:	e8 e6 78 fe ff       	call   c000498f <f_stat>
c001d0a9:	83 c4 10             	add    esp,0x10
c001d0ac:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001d0b3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001d0ba:	85 c0                	test   eax,eax
c001d0bc:	75 06                	jne    c001d0c4 <FAT::exists(char const*)+0x64>
c001d0be:	b0 01                	mov    al,0x1
c001d0c0:	eb 06                	jmp    c001d0c8 <FAT::exists(char const*)+0x68>
c001d0c2:	66 90                	xchg   ax,ax
c001d0c4:	b0 00                	mov    al,0x0
c001d0c6:	66 90                	xchg   ax,ax
c001d0c8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001d0ce:	c3                   	ret    
c001d0cf:	90                   	nop

c001d0d0 <isoReadDiscSectorHelper>:
c001d0d0:	83 ec 2c             	sub    esp,0x2c
c001d0d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d0d7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d0db:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d0e0:	83 e8 41             	sub    eax,0x41
c001d0e3:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001d0ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d0ee:	ba 00 00 00 00       	mov    edx,0x0
c001d0f3:	83 ec 0c             	sub    esp,0xc
c001d0f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d0fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d0fe:	52                   	push   edx
c001d0ff:	50                   	push   eax
c001d100:	51                   	push   ecx
c001d101:	e8 10 d9 fe ff       	call   c000aa16 <LogicalDisk::read(unsigned long long, int, void*)>
c001d106:	83 c4 20             	add    esp,0x20
c001d109:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d10d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001d112:	74 0c                	je     c001d120 <isoReadDiscSectorHelper+0x50>
c001d114:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d118:	c1 e0 0b             	shl    eax,0xb
c001d11b:	eb 0b                	jmp    c001d128 <isoReadDiscSectorHelper+0x58>
c001d11d:	8d 76 00             	lea    esi,[esi+0x0]
c001d120:	b8 00 00 00 00       	mov    eax,0x0
c001d125:	8d 76 00             	lea    esi,[esi+0x0]
c001d128:	83 c4 2c             	add    esp,0x2c
c001d12b:	c3                   	ret    

c001d12c <iso_kprintf>:
c001d12c:	83 ec 0c             	sub    esp,0xc
c001d12f:	83 ec 08             	sub    esp,0x8
c001d132:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d136:	68 4c 59 02 c0       	push   0xc002594c
c001d13b:	e8 26 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d140:	83 c4 10             	add    esp,0x10
c001d143:	90                   	nop
c001d144:	83 c4 0c             	add    esp,0xc
c001d147:	c3                   	ret    

c001d148 <iso_kprintfd>:
c001d148:	83 ec 0c             	sub    esp,0xc
c001d14b:	83 ec 08             	sub    esp,0x8
c001d14e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d152:	68 de 4e 02 c0       	push   0xc0024ede
c001d157:	e8 0a 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d15c:	83 c4 10             	add    esp,0x10
c001d15f:	90                   	nop
c001d160:	83 c4 0c             	add    esp,0xc
c001d163:	c3                   	ret    

c001d164 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001d164:	b8 08 00 00 00       	mov    eax,0x8
c001d169:	c3                   	ret    

c001d16a <ISO9660::truncate(void*, unsigned long long)>:
c001d16a:	b8 01 00 00 00       	mov    eax,0x1
c001d16f:	c3                   	ret    

c001d170 <ISO9660::getName()>:
c001d170:	b8 d8 5c 02 c0       	mov    eax,0xc0025cd8
c001d175:	c3                   	ret    

c001d176 <ISO9660::closeDir(void*)>:
c001d176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d17a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d17c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001d17f:	90                   	nop

c001d180 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001d180:	b8 01 00 00 00       	mov    eax,0x1
c001d185:	c3                   	ret    

c001d186 <ISO9660::unlink(char const*)>:
c001d186:	b8 01 00 00 00       	mov    eax,0x1
c001d18b:	c3                   	ret    

c001d18c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001d18c:	b8 03 00 00 00       	mov    eax,0x3
c001d191:	c3                   	ret    

c001d192 <ISO9660::rename(char const*, char const*)>:
c001d192:	b8 01 00 00 00       	mov    eax,0x1
c001d197:	c3                   	ret    

c001d198 <ISO9660::mkdir(char const*)>:
c001d198:	b8 01 00 00 00       	mov    eax,0x1
c001d19d:	c3                   	ret    

c001d19e <ISO9660::~ISO9660()>:
c001d19e:	83 ec 0c             	sub    esp,0xc
c001d1a1:	ba 18 5e 02 c0       	mov    edx,0xc0025e18
c001d1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1aa:	89 10                	mov    DWORD PTR [eax],edx
c001d1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b0:	83 ec 0c             	sub    esp,0xc
c001d1b3:	50                   	push   eax
c001d1b4:	e8 1d ac fe ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c001d1b9:	83 c4 10             	add    esp,0x10
c001d1bc:	90                   	nop
c001d1bd:	83 c4 0c             	add    esp,0xc
c001d1c0:	c3                   	ret    
c001d1c1:	90                   	nop

c001d1c2 <ISO9660::~ISO9660()>:
c001d1c2:	83 ec 0c             	sub    esp,0xc
c001d1c5:	83 ec 0c             	sub    esp,0xc
c001d1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1cc:	e8 cd ff ff ff       	call   c001d19e <ISO9660::~ISO9660()>
c001d1d1:	83 c4 10             	add    esp,0x10
c001d1d4:	83 ec 08             	sub    esp,0x8
c001d1d7:	6a 08                	push   0x8
c001d1d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1dd:	e8 8e 00 ff ff       	call   c000d270 <operator delete(void*, unsigned long)>
c001d1e2:	83 c4 10             	add    esp,0x10
c001d1e5:	83 c4 0c             	add    esp,0xc
c001d1e8:	c3                   	ret    
c001d1e9:	90                   	nop

c001d1ea <ISO9660::exists(char const*)>:
c001d1ea:	83 ec 18             	sub    esp,0x18
c001d1ed:	68 f3 5c 02 c0       	push   0xc0025cf3
c001d1f2:	e8 c5 28 ff ff       	call   c000fabc <KePanic(char const*)>
c001d1f7:	31 c0                	xor    eax,eax
c001d1f9:	83 c4 1c             	add    esp,0x1c
c001d1fc:	c3                   	ret    
c001d1fd:	90                   	nop

c001d1fe <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d1fe:	56                   	push   esi
c001d1ff:	53                   	push   ebx
c001d200:	53                   	push   ebx
c001d201:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d205:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d209:	85 db                	test   ebx,ebx
c001d20b:	0f 84 ca 00 00 00    	je     c001d2db <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d211:	85 f6                	test   esi,esi
c001d213:	0f 84 c2 00 00 00    	je     c001d2db <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d219:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001d21e:	b8 03 00 00 00       	mov    eax,0x3
c001d223:	0f 85 b7 00 00 00    	jne    c001d2e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d229:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d22b:	38 0d 80 f5 02 c0    	cmp    BYTE PTR ds:0xc002f580,cl
c001d231:	0f be 05 80 f5 02 c0 	movsx  eax,BYTE PTR ds:0xc002f580
c001d238:	74 1b                	je     c001d255 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001d23a:	85 c0                	test   eax,eax
c001d23c:	74 10                	je     c001d24e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001d23e:	83 ec 0c             	sub    esp,0xc
c001d241:	68 11 5d 02 c0       	push   0xc0025d11
c001d246:	e8 71 28 ff ff       	call   c000fabc <KePanic(char const*)>
c001d24b:	83 c4 10             	add    esp,0x10
c001d24e:	8a 03                	mov    al,BYTE PTR [ebx]
c001d250:	a2 80 f5 02 c0       	mov    ds:0xc002f580,al
c001d255:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d258:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d25f:	85 c0                	test   eax,eax
c001d261:	74 09                	je     c001d26c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001d263:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d26a:	74 48                	je     c001d2b4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001d26c:	83 ec 0c             	sub    esp,0xc
c001d26f:	68 21 5d 02 c0       	push   0xc0025d21
c001d274:	e8 ed 9c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d279:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d27c:	83 c4 10             	add    esp,0x10
c001d27f:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d286:	85 c0                	test   eax,eax
c001d288:	74 17                	je     c001d2a1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001d28a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d291:	83 ec 0c             	sub    esp,0xc
c001d294:	68 41 5d 02 c0       	push   0xc0025d41
c001d299:	e8 c8 9c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d29e:	83 c4 10             	add    esp,0x10
c001d2a1:	0f be 05 80 f5 02 c0 	movsx  eax,BYTE PTR ds:0xc002f580
c001d2a8:	83 ec 0c             	sub    esp,0xc
c001d2ab:	50                   	push   eax
c001d2ac:	e8 96 99 fe ff       	call   c0006c47 <init_percd>
c001d2b1:	83 c4 10             	add    esp,0x10
c001d2b4:	51                   	push   ecx
c001d2b5:	83 c3 03             	add    ebx,0x3
c001d2b8:	51                   	push   ecx
c001d2b9:	6a 00                	push   0x0
c001d2bb:	53                   	push   ebx
c001d2bc:	e8 49 94 fe ff       	call   c000670a <iso_open>
c001d2c1:	83 c4 10             	add    esp,0x10
c001d2c4:	89 c2                	mov    edx,eax
c001d2c6:	b8 01 00 00 00       	mov    eax,0x1
c001d2cb:	83 fa ff             	cmp    edx,0xffffffff
c001d2ce:	74 10                	je     c001d2e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d2d0:	83 c2 32             	add    edx,0x32
c001d2d3:	31 c0                	xor    eax,eax
c001d2d5:	01 d2                	add    edx,edx
c001d2d7:	89 16                	mov    DWORD PTR [esi],edx
c001d2d9:	eb 05                	jmp    c001d2e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d2db:	b8 04 00 00 00       	mov    eax,0x4
c001d2e0:	5a                   	pop    edx
c001d2e1:	5b                   	pop    ebx
c001d2e2:	5e                   	pop    esi
c001d2e3:	c3                   	ret    

c001d2e4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001d2e4:	53                   	push   ebx
c001d2e5:	83 ec 08             	sub    esp,0x8
c001d2e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d2ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d2f0:	85 c0                	test   eax,eax
c001d2f2:	74 2d                	je     c001d321 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d2f4:	85 db                	test   ebx,ebx
c001d2f6:	74 29                	je     c001d321 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d2f8:	52                   	push   edx
c001d2f9:	b9 02 00 00 00       	mov    ecx,0x2
c001d2fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d302:	99                   	cdq    
c001d303:	f7 f9                	idiv   ecx
c001d305:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d309:	83 e8 32             	sub    eax,0x32
c001d30c:	50                   	push   eax
c001d30d:	e8 a0 94 fe ff       	call   c00067b2 <iso_read>
c001d312:	83 c4 10             	add    esp,0x10
c001d315:	89 03                	mov    DWORD PTR [ebx],eax
c001d317:	09 d0                	or     eax,edx
c001d319:	0f 94 c0             	sete   al
c001d31c:	0f b6 c0             	movzx  eax,al
c001d31f:	eb 05                	jmp    c001d326 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001d321:	b8 04 00 00 00       	mov    eax,0x4
c001d326:	83 c4 08             	add    esp,0x8
c001d329:	5b                   	pop    ebx
c001d32a:	c3                   	ret    
c001d32b:	90                   	nop

c001d32c <ISO9660::seek(void*, unsigned long long)>:
c001d32c:	57                   	push   edi
c001d32d:	b8 04 00 00 00       	mov    eax,0x4
c001d332:	56                   	push   esi
c001d333:	51                   	push   ecx
c001d334:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d338:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d33c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d340:	85 d2                	test   edx,edx
c001d342:	74 26                	je     c001d36a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001d344:	89 d0                	mov    eax,edx
c001d346:	b9 02 00 00 00       	mov    ecx,0x2
c001d34b:	6a 00                	push   0x0
c001d34d:	99                   	cdq    
c001d34e:	f7 f9                	idiv   ecx
c001d350:	57                   	push   edi
c001d351:	56                   	push   esi
c001d352:	83 e8 32             	sub    eax,0x32
c001d355:	50                   	push   eax
c001d356:	e8 6d 95 fe ff       	call   c00068c8 <iso_seek>
c001d35b:	83 c4 10             	add    esp,0x10
c001d35e:	31 f0                	xor    eax,esi
c001d360:	31 fa                	xor    edx,edi
c001d362:	09 d0                	or     eax,edx
c001d364:	0f 95 c0             	setne  al
c001d367:	0f b6 c0             	movzx  eax,al
c001d36a:	5a                   	pop    edx
c001d36b:	5e                   	pop    esi
c001d36c:	5f                   	pop    edi
c001d36d:	c3                   	ret    

c001d36e <ISO9660::tell(void*, unsigned long long*)>:
c001d36e:	53                   	push   ebx
c001d36f:	83 ec 08             	sub    esp,0x8
c001d372:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d376:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d37a:	85 c0                	test   eax,eax
c001d37c:	74 24                	je     c001d3a2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d37e:	85 db                	test   ebx,ebx
c001d380:	74 20                	je     c001d3a2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d382:	b9 02 00 00 00       	mov    ecx,0x2
c001d387:	99                   	cdq    
c001d388:	f7 f9                	idiv   ecx
c001d38a:	83 ec 0c             	sub    esp,0xc
c001d38d:	83 e8 32             	sub    eax,0x32
c001d390:	50                   	push   eax
c001d391:	e8 b6 95 fe ff       	call   c000694c <iso_tell>
c001d396:	83 c4 10             	add    esp,0x10
c001d399:	89 03                	mov    DWORD PTR [ebx],eax
c001d39b:	31 c0                	xor    eax,eax
c001d39d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001d3a0:	eb 05                	jmp    c001d3a7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001d3a2:	b8 04 00 00 00       	mov    eax,0x4
c001d3a7:	83 c4 08             	add    esp,0x8
c001d3aa:	5b                   	pop    ebx
c001d3ab:	c3                   	ret    

c001d3ac <ISO9660::stat(void*, unsigned long long*)>:
c001d3ac:	56                   	push   esi
c001d3ad:	53                   	push   ebx
c001d3ae:	83 ec 10             	sub    esp,0x10
c001d3b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3b5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d3b9:	68 65 5d 02 c0       	push   0xc0025d65
c001d3be:	e8 a3 9b fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d3c3:	83 c4 10             	add    esp,0x10
c001d3c6:	85 db                	test   ebx,ebx
c001d3c8:	74 2a                	je     c001d3f4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d3ca:	85 f6                	test   esi,esi
c001d3cc:	74 26                	je     c001d3f4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d3ce:	89 d8                	mov    eax,ebx
c001d3d0:	b9 02 00 00 00       	mov    ecx,0x2
c001d3d5:	99                   	cdq    
c001d3d6:	83 ec 0c             	sub    esp,0xc
c001d3d9:	f7 f9                	idiv   ecx
c001d3db:	83 e8 32             	sub    eax,0x32
c001d3de:	50                   	push   eax
c001d3df:	e8 99 95 fe ff       	call   c000697d <iso_total>
c001d3e4:	83 c4 10             	add    esp,0x10
c001d3e7:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001d3ee:	89 06                	mov    DWORD PTR [esi],eax
c001d3f0:	31 c0                	xor    eax,eax
c001d3f2:	eb 05                	jmp    c001d3f9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001d3f4:	b8 04 00 00 00       	mov    eax,0x4
c001d3f9:	5a                   	pop    edx
c001d3fa:	5b                   	pop    ebx
c001d3fb:	5e                   	pop    esi
c001d3fc:	c3                   	ret    
c001d3fd:	90                   	nop

c001d3fe <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d3fe:	55                   	push   ebp
c001d3ff:	57                   	push   edi
c001d400:	56                   	push   esi
c001d401:	53                   	push   ebx
c001d402:	83 ec 18             	sub    esp,0x18
c001d405:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d409:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d40d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d411:	68 6d 5d 02 c0       	push   0xc0025d6d
c001d416:	e8 4b 9b fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d41b:	83 c4 10             	add    esp,0x10
c001d41e:	85 ff                	test   edi,edi
c001d420:	0f 94 c0             	sete   al
c001d423:	85 f6                	test   esi,esi
c001d425:	0f 94 c2             	sete   dl
c001d428:	09 d0                	or     eax,edx
c001d42a:	a8 01                	test   al,0x1
c001d42c:	0f 85 dd 00 00 00    	jne    c001d50f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d432:	85 db                	test   ebx,ebx
c001d434:	0f 84 d5 00 00 00    	je     c001d50f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d43a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d43d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d443:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d44a:	0f be 05 80 f5 02 c0 	movsx  eax,BYTE PTR ds:0xc002f580
c001d451:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d453:	38 0d 80 f5 02 c0    	cmp    BYTE PTR ds:0xc002f580,cl
c001d459:	74 1b                	je     c001d476 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d45b:	85 c0                	test   eax,eax
c001d45d:	74 10                	je     c001d46f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d45f:	83 ec 0c             	sub    esp,0xc
c001d462:	68 11 5d 02 c0       	push   0xc0025d11
c001d467:	e8 50 26 ff ff       	call   c000fabc <KePanic(char const*)>
c001d46c:	83 c4 10             	add    esp,0x10
c001d46f:	8a 03                	mov    al,BYTE PTR [ebx]
c001d471:	a2 80 f5 02 c0       	mov    ds:0xc002f580,al
c001d476:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d479:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d480:	85 c0                	test   eax,eax
c001d482:	74 09                	je     c001d48d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d484:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d48b:	74 51                	je     c001d4de <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d48d:	83 ec 0c             	sub    esp,0xc
c001d490:	68 75 5d 02 c0       	push   0xc0025d75
c001d495:	e8 cc 9a fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d49a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d49d:	83 c4 10             	add    esp,0x10
c001d4a0:	83 3c 85 dc c9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd3624],0x0
c001d4a8:	74 21                	je     c001d4cb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001d4aa:	83 ec 0c             	sub    esp,0xc
c001d4ad:	68 95 5d 02 c0       	push   0xc0025d95
c001d4b2:	e8 af 9a fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d4b7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d4ba:	83 c4 10             	add    esp,0x10
c001d4bd:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d4c4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d4cb:	0f be 05 80 f5 02 c0 	movsx  eax,BYTE PTR ds:0xc002f580
c001d4d2:	83 ec 0c             	sub    esp,0xc
c001d4d5:	50                   	push   eax
c001d4d6:	e8 6c 97 fe ff       	call   c0006c47 <init_percd>
c001d4db:	83 c4 10             	add    esp,0x10
c001d4de:	52                   	push   edx
c001d4df:	83 c3 03             	add    ebx,0x3
c001d4e2:	52                   	push   edx
c001d4e3:	6a 00                	push   0x0
c001d4e5:	53                   	push   ebx
c001d4e6:	e8 1f 92 fe ff       	call   c000670a <iso_open>
c001d4eb:	83 c4 10             	add    esp,0x10
c001d4ee:	83 f8 ff             	cmp    eax,0xffffffff
c001d4f1:	89 c5                	mov    ebp,eax
c001d4f3:	75 21                	jne    c001d516 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d4f5:	50                   	push   eax
c001d4f6:	50                   	push   eax
c001d4f7:	6a 01                	push   0x1
c001d4f9:	53                   	push   ebx
c001d4fa:	e8 0b 92 fe ff       	call   c000670a <iso_open>
c001d4ff:	83 c4 10             	add    esp,0x10
c001d502:	ba 02 00 00 00       	mov    edx,0x2
c001d507:	40                   	inc    eax
c001d508:	74 2b                	je     c001d535 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d50a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d50d:	eb 24                	jmp    c001d533 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d50f:	ba 04 00 00 00       	mov    edx,0x4
c001d514:	eb 1f                	jmp    c001d535 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d516:	83 ec 0c             	sub    esp,0xc
c001d519:	50                   	push   eax
c001d51a:	e8 5e 94 fe ff       	call   c000697d <iso_total>
c001d51f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d526:	89 07                	mov    DWORD PTR [edi],eax
c001d528:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d52b:	e8 64 92 fe ff       	call   c0006794 <iso_close>
c001d530:	83 c4 10             	add    esp,0x10
c001d533:	31 d2                	xor    edx,edx
c001d535:	83 c4 0c             	add    esp,0xc
c001d538:	89 d0                	mov    eax,edx
c001d53a:	5b                   	pop    ebx
c001d53b:	5e                   	pop    esi
c001d53c:	5f                   	pop    edi
c001d53d:	5d                   	pop    ebp
c001d53e:	c3                   	ret    
c001d53f:	90                   	nop

c001d540 <ISO9660::close(void*)>:
c001d540:	83 ec 0c             	sub    esp,0xc
c001d543:	b8 04 00 00 00       	mov    eax,0x4
c001d548:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d54c:	85 d2                	test   edx,edx
c001d54e:	74 1b                	je     c001d56b <ISO9660::close(void*)+0x2b>
c001d550:	89 d0                	mov    eax,edx
c001d552:	b9 02 00 00 00       	mov    ecx,0x2
c001d557:	99                   	cdq    
c001d558:	83 ec 0c             	sub    esp,0xc
c001d55b:	f7 f9                	idiv   ecx
c001d55d:	83 e8 32             	sub    eax,0x32
c001d560:	50                   	push   eax
c001d561:	e8 2e 92 fe ff       	call   c0006794 <iso_close>
c001d566:	83 c4 10             	add    esp,0x10
c001d569:	31 c0                	xor    eax,eax
c001d56b:	83 c4 0c             	add    esp,0xc
c001d56e:	c3                   	ret    
c001d56f:	90                   	nop

c001d570 <ISO9660::openDir(char const*, void**)>:
c001d570:	56                   	push   esi
c001d571:	53                   	push   ebx
c001d572:	50                   	push   eax
c001d573:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d577:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d57b:	85 db                	test   ebx,ebx
c001d57d:	0f 84 bd 00 00 00    	je     c001d640 <ISO9660::openDir(char const*, void**)+0xd0>
c001d583:	85 f6                	test   esi,esi
c001d585:	0f 84 b5 00 00 00    	je     c001d640 <ISO9660::openDir(char const*, void**)+0xd0>
c001d58b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d58d:	38 15 80 f5 02 c0    	cmp    BYTE PTR ds:0xc002f580,dl
c001d593:	0f be 05 80 f5 02 c0 	movsx  eax,BYTE PTR ds:0xc002f580
c001d59a:	74 1b                	je     c001d5b7 <ISO9660::openDir(char const*, void**)+0x47>
c001d59c:	85 c0                	test   eax,eax
c001d59e:	74 10                	je     c001d5b0 <ISO9660::openDir(char const*, void**)+0x40>
c001d5a0:	83 ec 0c             	sub    esp,0xc
c001d5a3:	68 11 5d 02 c0       	push   0xc0025d11
c001d5a8:	e8 0f 25 ff ff       	call   c000fabc <KePanic(char const*)>
c001d5ad:	83 c4 10             	add    esp,0x10
c001d5b0:	8a 03                	mov    al,BYTE PTR [ebx]
c001d5b2:	a2 80 f5 02 c0       	mov    ds:0xc002f580,al
c001d5b7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d5ba:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d5c1:	85 c0                	test   eax,eax
c001d5c3:	74 10                	je     c001d5d5 <ISO9660::openDir(char const*, void**)+0x65>
c001d5c5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d5cc:	74 1a                	je     c001d5e8 <ISO9660::openDir(char const*, void**)+0x78>
c001d5ce:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d5d5:	0f be 05 80 f5 02 c0 	movsx  eax,BYTE PTR ds:0xc002f580
c001d5dc:	83 ec 0c             	sub    esp,0xc
c001d5df:	50                   	push   eax
c001d5e0:	e8 62 96 fe ff       	call   c0006c47 <init_percd>
c001d5e5:	83 c4 10             	add    esp,0x10
c001d5e8:	50                   	push   eax
c001d5e9:	83 c3 03             	add    ebx,0x3
c001d5ec:	50                   	push   eax
c001d5ed:	6a 01                	push   0x1
c001d5ef:	53                   	push   ebx
c001d5f0:	e8 15 91 fe ff       	call   c000670a <iso_open>
c001d5f5:	83 c4 10             	add    esp,0x10
c001d5f8:	83 f8 ff             	cmp    eax,0xffffffff
c001d5fb:	89 c3                	mov    ebx,eax
c001d5fd:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001d602:	75 1c                	jne    c001d620 <ISO9660::openDir(char const*, void**)+0xb0>
c001d604:	53                   	push   ebx
c001d605:	53                   	push   ebx
c001d606:	68 b9 5d 02 c0       	push   0xc0025db9
c001d60b:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d611:	e8 e2 4d ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001d616:	83 c4 10             	add    esp,0x10
c001d619:	b8 01 00 00 00       	mov    eax,0x1
c001d61e:	eb 25                	jmp    c001d645 <ISO9660::openDir(char const*, void**)+0xd5>
c001d620:	51                   	push   ecx
c001d621:	01 db                	add    ebx,ebx
c001d623:	51                   	push   ecx
c001d624:	83 c3 65             	add    ebx,0x65
c001d627:	68 cc 5d 02 c0       	push   0xc0025dcc
c001d62c:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d632:	e8 c1 4d ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001d637:	83 c4 10             	add    esp,0x10
c001d63a:	31 c0                	xor    eax,eax
c001d63c:	89 1e                	mov    DWORD PTR [esi],ebx
c001d63e:	eb 05                	jmp    c001d645 <ISO9660::openDir(char const*, void**)+0xd5>
c001d640:	b8 04 00 00 00       	mov    eax,0x4
c001d645:	5a                   	pop    edx
c001d646:	5b                   	pop    ebx
c001d647:	5e                   	pop    esi
c001d648:	c3                   	ret    
c001d649:	90                   	nop

c001d64a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d64a:	55                   	push   ebp
c001d64b:	57                   	push   edi
c001d64c:	56                   	push   esi
c001d64d:	53                   	push   ebx
c001d64e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d654:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001d65b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d662:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001d669:	85 db                	test   ebx,ebx
c001d66b:	0f 84 e4 00 00 00    	je     c001d755 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001d671:	85 ed                	test   ebp,ebp
c001d673:	0f 84 dc 00 00 00    	je     c001d755 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001d679:	83 ec 0c             	sub    esp,0xc
c001d67c:	68 df 5d 02 c0       	push   0xc0025ddf
c001d681:	e8 e0 98 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d686:	89 d8                	mov    eax,ebx
c001d688:	b9 02 00 00 00       	mov    ecx,0x2
c001d68d:	99                   	cdq    
c001d68e:	f7 f9                	idiv   ecx
c001d690:	83 e8 32             	sub    eax,0x32
c001d693:	89 04 24             	mov    DWORD PTR [esp],eax
c001d696:	e8 34 93 fe ff       	call   c00069cf <iso_readdir>
c001d69b:	83 c4 10             	add    esp,0x10
c001d69e:	85 c0                	test   eax,eax
c001d6a0:	89 c3                	mov    ebx,eax
c001d6a2:	75 38                	jne    c001d6dc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001d6a4:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001d6a9:	53                   	push   ebx
c001d6aa:	53                   	push   ebx
c001d6ab:	68 ea 5d 02 c0       	push   0xc0025dea
c001d6b0:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d6b6:	e8 3d 4d ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001d6bb:	83 c4 0c             	add    esp,0xc
c001d6be:	68 10 01 00 00       	push   0x110
c001d6c3:	6a 00                	push   0x0
c001d6c5:	57                   	push   edi
c001d6c6:	e8 25 2e fe ff       	call   c00004f0 <memset>
c001d6cb:	83 c4 10             	add    esp,0x10
c001d6ce:	b8 01 00 00 00       	mov    eax,0x1
c001d6d3:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001d6da:	eb 7e                	jmp    c001d75a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001d6dc:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d6e2:	8d 70 08             	lea    esi,[eax+0x8]
c001d6e5:	83 ec 0c             	sub    esp,0xc
c001d6e8:	56                   	push   esi
c001d6e9:	e8 92 2e fe ff       	call   c0000580 <strlen>
c001d6ee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d6f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d6fa:	83 c4 10             	add    esp,0x10
c001d6fd:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001d701:	75 0a                	jne    c001d70d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001d703:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001d706:	b8 02 00 00 00       	mov    eax,0x2
c001d70b:	74 05                	je     c001d712 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001d70d:	b8 01 00 00 00       	mov    eax,0x1
c001d712:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d716:	50                   	push   eax
c001d717:	50                   	push   eax
c001d718:	56                   	push   esi
c001d719:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d71d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d721:	50                   	push   eax
c001d722:	e8 29 2f fe ff       	call   c0000650 <strcpy>
c001d727:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d72e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d730:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001d737:	5a                   	pop    edx
c001d738:	a1 58 d3 02 c0       	mov    eax,ds:0xc002d358
c001d73d:	59                   	pop    ecx
c001d73e:	68 fd 5d 02 c0       	push   0xc0025dfd
c001d743:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d749:	e8 aa 4c ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c001d74e:	83 c4 10             	add    esp,0x10
c001d751:	31 c0                	xor    eax,eax
c001d753:	eb 05                	jmp    c001d75a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001d755:	b8 04 00 00 00       	mov    eax,0x4
c001d75a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d760:	5b                   	pop    ebx
c001d761:	5e                   	pop    esi
c001d762:	5f                   	pop    edi
c001d763:	5d                   	pop    ebp
c001d764:	c3                   	ret    

c001d765 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d765:	57                   	push   edi
c001d766:	56                   	push   esi
c001d767:	53                   	push   ebx
c001d768:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d76c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d770:	39 35 84 f5 02 c0    	cmp    DWORD PTR ds:0xc002f584,esi
c001d776:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d77a:	0f be cb             	movsx  ecx,bl
c001d77d:	75 0b                	jne    c001d78a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d77f:	0f be 05 64 70 02 c0 	movsx  eax,BYTE PTR ds:0xc0027064
c001d786:	39 c8                	cmp    eax,ecx
c001d788:	74 47                	je     c001d7d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d78a:	83 ec 0c             	sub    esp,0xc
c001d78d:	31 d2                	xor    edx,edx
c001d78f:	68 a0 f5 02 c0       	push   0xc002f5a0
c001d794:	6a 01                	push   0x1
c001d796:	52                   	push   edx
c001d797:	56                   	push   esi
c001d798:	ff 34 8d dc c9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd3624]
c001d79f:	e8 72 d2 fe ff       	call   c000aa16 <LogicalDisk::read(unsigned long long, int, void*)>
c001d7a4:	83 c4 20             	add    esp,0x20
c001d7a7:	85 c0                	test   eax,eax
c001d7a9:	75 0e                	jne    c001d7b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d7ab:	89 35 84 f5 02 c0    	mov    DWORD PTR ds:0xc002f584,esi
c001d7b1:	88 1d 64 70 02 c0    	mov    BYTE PTR ds:0xc0027064,bl
c001d7b7:	eb 18                	jmp    c001d7d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d7b9:	50                   	push   eax
c001d7ba:	68 00 08 00 00       	push   0x800
c001d7bf:	6a 00                	push   0x0
c001d7c1:	57                   	push   edi
c001d7c2:	e8 29 2d fe ff       	call   c00004f0 <memset>
c001d7c7:	83 c4 10             	add    esp,0x10
c001d7ca:	b8 01 00 00 00       	mov    eax,0x1
c001d7cf:	eb 0e                	jmp    c001d7df <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d7d1:	be a0 f5 02 c0       	mov    esi,0xc002f5a0
c001d7d6:	b9 00 08 00 00       	mov    ecx,0x800
c001d7db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d7dd:	31 c0                	xor    eax,eax
c001d7df:	5b                   	pop    ebx
c001d7e0:	5e                   	pop    esi
c001d7e1:	5f                   	pop    edi
c001d7e2:	c3                   	ret    
c001d7e3:	90                   	nop

c001d7e4 <ISO9660::tryMount(LogicalDisk*, int)>:
c001d7e4:	53                   	push   ebx
c001d7e5:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d7eb:	c7 05 84 f5 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002f584,0xdeadbeef
c001d7f5:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d7fc:	8d 58 41             	lea    ebx,[eax+0x41]
c001d7ff:	0f be db             	movsx  ebx,bl
c001d802:	53                   	push   ebx
c001d803:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d807:	50                   	push   eax
c001d808:	6a 10                	push   0x10
c001d80a:	e8 56 ff ff ff       	call   c001d765 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d80f:	83 c4 10             	add    esp,0x10
c001d812:	31 d2                	xor    edx,edx
c001d814:	85 c0                	test   eax,eax
c001d816:	75 33                	jne    c001d84b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d818:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d81d:	75 2c                	jne    c001d84b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d81f:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d824:	75 25                	jne    c001d84b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d826:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d82b:	75 1e                	jne    c001d84b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d82d:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d832:	75 17                	jne    c001d84b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d834:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d839:	75 10                	jne    c001d84b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d83b:	83 ec 0c             	sub    esp,0xc
c001d83e:	53                   	push   ebx
c001d83f:	e8 03 94 fe ff       	call   c0006c47 <init_percd>
c001d844:	83 c4 10             	add    esp,0x10
c001d847:	40                   	inc    eax
c001d848:	0f 95 c2             	setne  dl
c001d84b:	81 c4 08 08 00 00    	add    esp,0x808
c001d851:	88 d0                	mov    al,dl
c001d853:	5b                   	pop    ebx
c001d854:	c3                   	ret    
c001d855:	90                   	nop

c001d856 <ISO9660::ISO9660()>:
c001d856:	83 ec 0c             	sub    esp,0xc
c001d859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d85d:	83 ec 0c             	sub    esp,0xc
c001d860:	50                   	push   eax
c001d861:	e8 4c a5 fe ff       	call   c0007db2 <Filesystem::Filesystem()>
c001d866:	83 c4 10             	add    esp,0x10
c001d869:	ba 18 5e 02 c0       	mov    edx,0xc0025e18
c001d86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d872:	89 10                	mov    DWORD PTR [eax],edx
c001d874:	e8 e0 94 fe ff       	call   c0006d59 <fs_iso9660_init>
c001d879:	90                   	nop
c001d87a:	83 c4 0c             	add    esp,0xc
c001d87d:	c3                   	ret    

c001d87e <SoundCard::beginPlayback()>:
c001d87e:	c7 44 24 04 7c 5e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025e7c
c001d886:	e9 31 22 ff ff       	jmp    c000fabc <KePanic(char const*)>
c001d88b:	90                   	nop

c001d88c <SoundCard::stopPlayback()>:
c001d88c:	c7 44 24 04 7c 5e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025e7c
c001d894:	e9 23 22 ff ff       	jmp    c000fabc <KePanic(char const*)>
c001d899:	90                   	nop

c001d89a <SoundCard::SoundCard(char const*)>:
c001d89a:	83 ec 1c             	sub    esp,0x1c
c001d89d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8a1:	83 ec 08             	sub    esp,0x8
c001d8a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8a8:	50                   	push   eax
c001d8a9:	e8 aa c2 fe ff       	call   c0009b58 <Device::Device(char const*)>
c001d8ae:	83 c4 10             	add    esp,0x10
c001d8b1:	ba c8 5e 02 c0       	mov    edx,0xc0025ec8
c001d8b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8ba:	89 10                	mov    DWORD PTR [eax],edx
c001d8bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8c0:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d8c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8cb:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d8d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8d9:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d8e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8e7:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d8f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8f5:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d8ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d907:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d90c:	7f 1a                	jg     c001d928 <SoundCard::SoundCard(char const*)+0x8e>
c001d90e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d912:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d916:	83 c2 54             	add    edx,0x54
c001d919:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d921:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d926:	eb df                	jmp    c001d907 <SoundCard::SoundCard(char const*)+0x6d>
c001d928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d92c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d933:	90                   	nop
c001d934:	83 c4 1c             	add    esp,0x1c
c001d937:	c3                   	ret    

c001d938 <SoundCard::~SoundCard()>:
c001d938:	83 ec 0c             	sub    esp,0xc
c001d93b:	ba c8 5e 02 c0       	mov    edx,0xc0025ec8
c001d940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d944:	89 10                	mov    DWORD PTR [eax],edx
c001d946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d94a:	83 ec 0c             	sub    esp,0xc
c001d94d:	50                   	push   eax
c001d94e:	e8 a5 bf fe ff       	call   c00098f8 <Device::~Device()>
c001d953:	83 c4 10             	add    esp,0x10
c001d956:	90                   	nop
c001d957:	83 c4 0c             	add    esp,0xc
c001d95a:	c3                   	ret    
c001d95b:	90                   	nop

c001d95c <SoundCard::~SoundCard()>:
c001d95c:	83 ec 0c             	sub    esp,0xc
c001d95f:	83 ec 0c             	sub    esp,0xc
c001d962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d966:	e8 cd ff ff ff       	call   c001d938 <SoundCard::~SoundCard()>
c001d96b:	83 c4 10             	add    esp,0x10
c001d96e:	83 ec 08             	sub    esp,0x8
c001d971:	68 e8 01 00 00       	push   0x1e8
c001d976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d97a:	e8 f1 f8 fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c001d97f:	83 c4 10             	add    esp,0x10
c001d982:	83 c4 0c             	add    esp,0xc
c001d985:	c3                   	ret    

c001d986 <SoundCard::configureRates(int, int, int)>:
c001d986:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d98a:	31 c0                	xor    eax,eax
c001d98c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d993:	75 20                	jne    c001d9b5 <SoundCard::configureRates(int, int, int)+0x2f>
c001d995:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d999:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d99f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9a3:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d9a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9ad:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d9b3:	b0 01                	mov    al,0x1
c001d9b5:	c3                   	ret    

c001d9b6 <SoundCard::getSamples16(int, short*)>:
c001d9b6:	55                   	push   ebp
c001d9b7:	57                   	push   edi
c001d9b8:	31 ff                	xor    edi,edi
c001d9ba:	56                   	push   esi
c001d9bb:	53                   	push   ebx
c001d9bc:	31 db                	xor    ebx,ebx
c001d9be:	83 ec 10             	sub    esp,0x10
c001d9c1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d9c5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d9c9:	8d 04 36             	lea    eax,[esi+esi*1]
c001d9cc:	50                   	push   eax
c001d9cd:	6a 00                	push   0x0
c001d9cf:	55                   	push   ebp
c001d9d0:	e8 1b 2b fe ff       	call   c00004f0 <memset>
c001d9d5:	83 c4 10             	add    esp,0x10
c001d9d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9dc:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001d9e3:	85 c0                	test   eax,eax
c001d9e5:	74 1a                	je     c001da01 <SoundCard::getSamples16(int, short*)+0x4b>
c001d9e7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d9eb:	75 14                	jne    c001da01 <SoundCard::getSamples16(int, short*)+0x4b>
c001d9ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d9f1:	55                   	push   ebp
c001d9f2:	56                   	push   esi
c001d9f3:	50                   	push   eax
c001d9f4:	e8 8f 03 00 00       	call   c001dd88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d9f9:	83 c4 10             	add    esp,0x10
c001d9fc:	39 c3                	cmp    ebx,eax
c001d9fe:	0f 4c d8             	cmovl  ebx,eax
c001da01:	47                   	inc    edi
c001da02:	83 ff 20             	cmp    edi,0x20
c001da05:	75 d1                	jne    c001d9d8 <SoundCard::getSamples16(int, short*)+0x22>
c001da07:	83 c4 0c             	add    esp,0xc
c001da0a:	89 d8                	mov    eax,ebx
c001da0c:	5b                   	pop    ebx
c001da0d:	5e                   	pop    esi
c001da0e:	5f                   	pop    edi
c001da0f:	5d                   	pop    ebp
c001da10:	c3                   	ret    
c001da11:	90                   	nop

c001da12 <SoundCard::getSamples32(int, int*)>:
c001da12:	55                   	push   ebp
c001da13:	57                   	push   edi
c001da14:	31 ff                	xor    edi,edi
c001da16:	56                   	push   esi
c001da17:	31 f6                	xor    esi,esi
c001da19:	53                   	push   ebx
c001da1a:	83 ec 10             	sub    esp,0x10
c001da1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001da21:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001da25:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001da29:	c1 e0 02             	shl    eax,0x2
c001da2c:	50                   	push   eax
c001da2d:	6a 00                	push   0x0
c001da2f:	55                   	push   ebp
c001da30:	e8 bb 2a fe ff       	call   c00004f0 <memset>
c001da35:	83 c4 10             	add    esp,0x10
c001da38:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001da3f:	85 c0                	test   eax,eax
c001da41:	74 1a                	je     c001da5d <SoundCard::getSamples32(int, int*)+0x4b>
c001da43:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001da47:	75 14                	jne    c001da5d <SoundCard::getSamples32(int, int*)+0x4b>
c001da49:	53                   	push   ebx
c001da4a:	55                   	push   ebp
c001da4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da4f:	50                   	push   eax
c001da50:	e8 03 04 00 00       	call   c001de58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001da55:	83 c4 10             	add    esp,0x10
c001da58:	39 c6                	cmp    esi,eax
c001da5a:	0f 4c f0             	cmovl  esi,eax
c001da5d:	47                   	inc    edi
c001da5e:	83 ff 20             	cmp    edi,0x20
c001da61:	75 d5                	jne    c001da38 <SoundCard::getSamples32(int, int*)+0x26>
c001da63:	85 f6                	test   esi,esi
c001da65:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001da6c:	75 0f                	jne    c001da7d <SoundCard::getSamples32(int, int*)+0x6b>
c001da6e:	85 c0                	test   eax,eax
c001da70:	74 1b                	je     c001da8d <SoundCard::getSamples32(int, int*)+0x7b>
c001da72:	8b 03                	mov    eax,DWORD PTR [ebx]
c001da74:	83 ec 0c             	sub    esp,0xc
c001da77:	53                   	push   ebx
c001da78:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001da7b:	eb 0d                	jmp    c001da8a <SoundCard::getSamples32(int, int*)+0x78>
c001da7d:	85 c0                	test   eax,eax
c001da7f:	75 0c                	jne    c001da8d <SoundCard::getSamples32(int, int*)+0x7b>
c001da81:	8b 03                	mov    eax,DWORD PTR [ebx]
c001da83:	83 ec 0c             	sub    esp,0xc
c001da86:	53                   	push   ebx
c001da87:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001da8a:	83 c4 10             	add    esp,0x10
c001da8d:	83 c4 0c             	add    esp,0xc
c001da90:	89 f0                	mov    eax,esi
c001da92:	5b                   	pop    ebx
c001da93:	5e                   	pop    esi
c001da94:	5f                   	pop    edi
c001da95:	5d                   	pop    ebp
c001da96:	c3                   	ret    
c001da97:	90                   	nop

c001da98 <SoundCard::addChannel(SoundPort*)>:
c001da98:	83 ec 0c             	sub    esp,0xc
c001da9b:	31 c0                	xor    eax,eax
c001da9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001daa1:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001daa9:	74 1b                	je     c001dac6 <SoundCard::addChannel(SoundPort*)+0x2e>
c001daab:	40                   	inc    eax
c001daac:	83 f8 20             	cmp    eax,0x20
c001daaf:	75 f0                	jne    c001daa1 <SoundCard::addChannel(SoundPort*)+0x9>
c001dab1:	83 ec 0c             	sub    esp,0xc
c001dab4:	68 a1 5e 02 c0       	push   0xc0025ea1
c001dab9:	e8 fe 1f ff ff       	call   c000fabc <KePanic(char const*)>
c001dabe:	83 c4 10             	add    esp,0x10
c001dac1:	83 c8 ff             	or     eax,0xffffffff
c001dac4:	eb 0b                	jmp    c001dad1 <SoundCard::addChannel(SoundPort*)+0x39>
c001dac6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001daca:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001dad1:	83 c4 0c             	add    esp,0xc
c001dad4:	c3                   	ret    
c001dad5:	90                   	nop

c001dad6 <SoundCard::removeChannel(int)>:
c001dad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dada:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dade:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001dae9:	c3                   	ret    
c001daea:	66 90                	xchg   ax,ax

c001daec <SoundPort::SoundPort(int, int, int, int)>:
c001daec:	83 ec 0c             	sub    esp,0xc
c001daef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daf3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dafe:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001db02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db0a:	89 10                	mov    DWORD PTR [eax],edx
c001db0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db14:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001db17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db1f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001db22:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001db27:	75 13                	jne    c001db3c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001db29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db2d:	8b 00                	mov    eax,DWORD PTR [eax]
c001db2f:	05 a0 0f 00 00       	add    eax,0xfa0
c001db34:	d1 e0                	shl    eax,1
c001db36:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001db3a:	66 90                	xchg   ax,ax
c001db3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db44:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001db47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db4b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001db52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db56:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001db59:	c1 e0 02             	shl    eax,0x2
c001db5c:	83 ec 0c             	sub    esp,0xc
c001db5f:	50                   	push   eax
c001db60:	e8 03 1b ff ff       	call   c000f668 <malloc>
c001db65:	83 c4 10             	add    esp,0x10
c001db68:	89 c2                	mov    edx,eax
c001db6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db6e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001db71:	90                   	nop
c001db72:	83 c4 0c             	add    esp,0xc
c001db75:	c3                   	ret    
c001db76:	66 90                	xchg   ax,ax

c001db78 <SoundPort::~SoundPort()>:
c001db78:	83 ec 0c             	sub    esp,0xc
c001db7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001db82:	85 c0                	test   eax,eax
c001db84:	74 1e                	je     c001dba4 <SoundPort::~SoundPort()+0x2c>
c001db86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db8a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001db8d:	83 ec 0c             	sub    esp,0xc
c001db90:	50                   	push   eax
c001db91:	e8 e2 1a ff ff       	call   c000f678 <free>
c001db96:	83 c4 10             	add    esp,0x10
c001db99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db9d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dba4:	90                   	nop
c001dba5:	83 c4 0c             	add    esp,0xc
c001dba8:	c3                   	ret    
c001dba9:	90                   	nop
c001dbaa:	66 90                	xchg   ax,ax

c001dbac <SoundPort::unpause()>:
c001dbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbb0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001dbb4:	c3                   	ret    
c001dbb5:	90                   	nop
c001dbb6:	66 90                	xchg   ax,ax

c001dbb8 <SoundPort::pause()>:
c001dbb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbbc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001dbc0:	c3                   	ret    
c001dbc1:	90                   	nop
c001dbc2:	66 90                	xchg   ax,ax

c001dbc4 <SoundPort::getBufferUsed()>:
c001dbc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbc8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001dbcb:	c3                   	ret    

c001dbcc <SoundPort::getBufferSize()>:
c001dbcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dbd3:	c3                   	ret    

c001dbd4 <SoundPort::buffer8(signed char*, int)>:
c001dbd4:	55                   	push   ebp
c001dbd5:	57                   	push   edi
c001dbd6:	56                   	push   esi
c001dbd7:	53                   	push   ebx
c001dbd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dbdc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001dbe0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001dbe3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001dbe6:	74 70                	je     c001dc58 <SoundPort::buffer8(signed char*, int)+0x84>
c001dbe8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dbec:	85 c9                	test   ecx,ecx
c001dbee:	7e 68                	jle    c001dc58 <SoundPort::buffer8(signed char*, int)+0x84>
c001dbf0:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001dbf4:	8d 48 01             	lea    ecx,[eax+0x1]
c001dbf7:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001dbfa:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001dbfd:	89 f1                	mov    ecx,esi
c001dbff:	c1 e1 18             	shl    ecx,0x18
c001dc02:	29 f1                	sub    ecx,esi
c001dc04:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001dc07:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dc0a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dc0d:	74 51                	je     c001dc60 <SoundPort::buffer8(signed char*, int)+0x8c>
c001dc0f:	31 ff                	xor    edi,edi
c001dc11:	eb 25                	jmp    c001dc38 <SoundPort::buffer8(signed char*, int)+0x64>
c001dc13:	90                   	nop
c001dc14:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001dc19:	8d 59 01             	lea    ebx,[ecx+0x1]
c001dc1c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001dc1f:	89 f3                	mov    ebx,esi
c001dc21:	c1 e3 18             	shl    ebx,0x18
c001dc24:	29 f3                	sub    ebx,esi
c001dc26:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001dc29:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001dc2c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dc2f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dc32:	74 1c                	je     c001dc50 <SoundPort::buffer8(signed char*, int)+0x7c>
c001dc34:	89 c7                	mov    edi,eax
c001dc36:	66 90                	xchg   ax,ax
c001dc38:	8d 47 01             	lea    eax,[edi+0x1]
c001dc3b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001dc3f:	75 d3                	jne    c001dc14 <SoundPort::buffer8(signed char*, int)+0x40>
c001dc41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc45:	8d 76 00             	lea    esi,[esi+0x0]
c001dc48:	5b                   	pop    ebx
c001dc49:	5e                   	pop    esi
c001dc4a:	5f                   	pop    edi
c001dc4b:	5d                   	pop    ebp
c001dc4c:	c3                   	ret    
c001dc4d:	8d 76 00             	lea    esi,[esi+0x0]
c001dc50:	5b                   	pop    ebx
c001dc51:	8d 47 02             	lea    eax,[edi+0x2]
c001dc54:	5e                   	pop    esi
c001dc55:	5f                   	pop    edi
c001dc56:	5d                   	pop    ebp
c001dc57:	c3                   	ret    
c001dc58:	5b                   	pop    ebx
c001dc59:	31 c0                	xor    eax,eax
c001dc5b:	5e                   	pop    esi
c001dc5c:	5f                   	pop    edi
c001dc5d:	5d                   	pop    ebp
c001dc5e:	c3                   	ret    
c001dc5f:	90                   	nop
c001dc60:	b8 01 00 00 00       	mov    eax,0x1
c001dc65:	eb e1                	jmp    c001dc48 <SoundPort::buffer8(signed char*, int)+0x74>
c001dc67:	90                   	nop

c001dc68 <SoundPort::buffer16(short*, int)>:
c001dc68:	55                   	push   ebp
c001dc69:	57                   	push   edi
c001dc6a:	56                   	push   esi
c001dc6b:	53                   	push   ebx
c001dc6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc70:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001dc74:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001dc77:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001dc7a:	74 70                	je     c001dcec <SoundPort::buffer16(short*, int)+0x84>
c001dc7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dc80:	85 c9                	test   ecx,ecx
c001dc82:	7e 68                	jle    c001dcec <SoundPort::buffer16(short*, int)+0x84>
c001dc84:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001dc88:	8d 48 01             	lea    ecx,[eax+0x1]
c001dc8b:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001dc8e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001dc91:	89 f1                	mov    ecx,esi
c001dc93:	c1 e1 10             	shl    ecx,0x10
c001dc96:	29 f1                	sub    ecx,esi
c001dc98:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001dc9b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dc9e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dca1:	74 51                	je     c001dcf4 <SoundPort::buffer16(short*, int)+0x8c>
c001dca3:	31 ff                	xor    edi,edi
c001dca5:	eb 25                	jmp    c001dccc <SoundPort::buffer16(short*, int)+0x64>
c001dca7:	90                   	nop
c001dca8:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001dcad:	8d 59 01             	lea    ebx,[ecx+0x1]
c001dcb0:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001dcb3:	89 f3                	mov    ebx,esi
c001dcb5:	c1 e3 10             	shl    ebx,0x10
c001dcb8:	29 f3                	sub    ebx,esi
c001dcba:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001dcbd:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001dcc0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dcc3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dcc6:	74 1c                	je     c001dce4 <SoundPort::buffer16(short*, int)+0x7c>
c001dcc8:	89 c7                	mov    edi,eax
c001dcca:	66 90                	xchg   ax,ax
c001dccc:	8d 47 01             	lea    eax,[edi+0x1]
c001dccf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001dcd3:	75 d3                	jne    c001dca8 <SoundPort::buffer16(short*, int)+0x40>
c001dcd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcd9:	8d 76 00             	lea    esi,[esi+0x0]
c001dcdc:	5b                   	pop    ebx
c001dcdd:	5e                   	pop    esi
c001dcde:	5f                   	pop    edi
c001dcdf:	5d                   	pop    ebp
c001dce0:	c3                   	ret    
c001dce1:	8d 76 00             	lea    esi,[esi+0x0]
c001dce4:	5b                   	pop    ebx
c001dce5:	8d 47 02             	lea    eax,[edi+0x2]
c001dce8:	5e                   	pop    esi
c001dce9:	5f                   	pop    edi
c001dcea:	5d                   	pop    ebp
c001dceb:	c3                   	ret    
c001dcec:	5b                   	pop    ebx
c001dced:	31 c0                	xor    eax,eax
c001dcef:	5e                   	pop    esi
c001dcf0:	5f                   	pop    edi
c001dcf1:	5d                   	pop    ebp
c001dcf2:	c3                   	ret    
c001dcf3:	90                   	nop
c001dcf4:	b8 01 00 00 00       	mov    eax,0x1
c001dcf9:	eb e1                	jmp    c001dcdc <SoundPort::buffer16(short*, int)+0x74>
c001dcfb:	90                   	nop

c001dcfc <SoundPort::buffer32(int*, int)>:
c001dcfc:	55                   	push   ebp
c001dcfd:	57                   	push   edi
c001dcfe:	56                   	push   esi
c001dcff:	53                   	push   ebx
c001dd00:	83 ec 04             	sub    esp,0x4
c001dd03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd0b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dd0f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dd12:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dd15:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd18:	74 5a                	je     c001dd74 <SoundPort::buffer32(int*, int)+0x78>
c001dd1a:	85 c0                	test   eax,eax
c001dd1c:	7e 56                	jle    c001dd74 <SoundPort::buffer32(int*, int)+0x78>
c001dd1e:	8d 71 01             	lea    esi,[ecx+0x1]
c001dd21:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001dd24:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001dd27:	8b 37                	mov    esi,DWORD PTR [edi]
c001dd29:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001dd2c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dd2f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dd32:	74 4c                	je     c001dd80 <SoundPort::buffer32(int*, int)+0x84>
c001dd34:	31 f6                	xor    esi,esi
c001dd36:	eb 1c                	jmp    c001dd54 <SoundPort::buffer32(int*, int)+0x58>
c001dd38:	8d 69 01             	lea    ebp,[ecx+0x1]
c001dd3b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001dd3e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001dd41:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dd44:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001dd48:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dd4b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dd4e:	74 18                	je     c001dd68 <SoundPort::buffer32(int*, int)+0x6c>
c001dd50:	89 de                	mov    esi,ebx
c001dd52:	66 90                	xchg   ax,ax
c001dd54:	8d 5e 01             	lea    ebx,[esi+0x1]
c001dd57:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001dd5a:	75 dc                	jne    c001dd38 <SoundPort::buffer32(int*, int)+0x3c>
c001dd5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dd5f:	90                   	nop
c001dd60:	83 c4 04             	add    esp,0x4
c001dd63:	5b                   	pop    ebx
c001dd64:	5e                   	pop    esi
c001dd65:	5f                   	pop    edi
c001dd66:	5d                   	pop    ebp
c001dd67:	c3                   	ret    
c001dd68:	8d 46 02             	lea    eax,[esi+0x2]
c001dd6b:	83 c4 04             	add    esp,0x4
c001dd6e:	5b                   	pop    ebx
c001dd6f:	5e                   	pop    esi
c001dd70:	5f                   	pop    edi
c001dd71:	5d                   	pop    ebp
c001dd72:	c3                   	ret    
c001dd73:	90                   	nop
c001dd74:	83 c4 04             	add    esp,0x4
c001dd77:	31 c0                	xor    eax,eax
c001dd79:	5b                   	pop    ebx
c001dd7a:	5e                   	pop    esi
c001dd7b:	5f                   	pop    edi
c001dd7c:	5d                   	pop    ebp
c001dd7d:	c3                   	ret    
c001dd7e:	66 90                	xchg   ax,ax
c001dd80:	b8 01 00 00 00       	mov    eax,0x1
c001dd85:	eb d9                	jmp    c001dd60 <SoundPort::buffer32(int*, int)+0x64>
c001dd87:	90                   	nop

c001dd88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001dd88:	55                   	push   ebp
c001dd89:	57                   	push   edi
c001dd8a:	56                   	push   esi
c001dd8b:	53                   	push   ebx
c001dd8c:	83 ec 0c             	sub    esp,0xc
c001dd8f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001dd93:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dd97:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001dd9b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001dd9f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001dda5:	39 03                	cmp    DWORD PTR [ebx],eax
c001dda7:	74 13                	je     c001ddbc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001dda9:	83 ec 0c             	sub    esp,0xc
c001ddac:	68 f4 5e 02 c0       	push   0xc0025ef4
c001ddb1:	e8 06 1d ff ff       	call   c000fabc <KePanic(char const*)>
c001ddb6:	83 c4 10             	add    esp,0x10
c001ddb9:	8d 76 00             	lea    esi,[esi+0x0]
c001ddbc:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ddc2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ddc5:	74 11                	je     c001ddd8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001ddc7:	83 ec 0c             	sub    esp,0xc
c001ddca:	68 33 5f 02 c0       	push   0xc0025f33
c001ddcf:	e8 e8 1c ff ff       	call   c000fabc <KePanic(char const*)>
c001ddd4:	83 c4 10             	add    esp,0x10
c001ddd7:	90                   	nop
c001ddd8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ddde:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001dde1:	74 11                	je     c001ddf4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001dde3:	83 ec 0c             	sub    esp,0xc
c001dde6:	68 33 5f 02 c0       	push   0xc0025f33
c001ddeb:	e8 cc 1c ff ff       	call   c000fabc <KePanic(char const*)>
c001ddf0:	83 c4 10             	add    esp,0x10
c001ddf3:	90                   	nop
c001ddf4:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001ddf7:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001ddfb:	85 f6                	test   esi,esi
c001ddfd:	7e 2d                	jle    c001de2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ddff:	31 c0                	xor    eax,eax
c001de01:	8d 76 00             	lea    esi,[esi+0x0]
c001de04:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001de07:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001de0a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001de10:	85 c9                	test   ecx,ecx
c001de12:	0f 49 d1             	cmovns edx,ecx
c001de15:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001de19:	c1 fa 0f             	sar    edx,0xf
c001de1c:	01 d1                	add    ecx,edx
c001de1e:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001de22:	83 c0 01             	add    eax,0x1
c001de25:	39 f0                	cmp    eax,esi
c001de27:	75 db                	jne    c001de04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001de29:	8d 76 00             	lea    esi,[esi+0x0]
c001de2c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001de2f:	83 ec 04             	sub    esp,0x4
c001de32:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001de35:	29 f0                	sub    eax,esi
c001de37:	c1 e0 02             	shl    eax,0x2
c001de3a:	50                   	push   eax
c001de3b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001de3e:	50                   	push   eax
c001de3f:	52                   	push   edx
c001de40:	e8 8b 25 fe ff       	call   c00003d0 <memmove>
c001de45:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001de48:	29 f0                	sub    eax,esi
c001de4a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001de4d:	83 c4 1c             	add    esp,0x1c
c001de50:	89 f0                	mov    eax,esi
c001de52:	5b                   	pop    ebx
c001de53:	5e                   	pop    esi
c001de54:	5f                   	pop    edi
c001de55:	5d                   	pop    ebp
c001de56:	c3                   	ret    
c001de57:	90                   	nop

c001de58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001de58:	55                   	push   ebp
c001de59:	57                   	push   edi
c001de5a:	56                   	push   esi
c001de5b:	53                   	push   ebx
c001de5c:	83 ec 0c             	sub    esp,0xc
c001de5f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001de63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001de67:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001de6b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001de6f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001de75:	39 03                	cmp    DWORD PTR [ebx],eax
c001de77:	74 13                	je     c001de8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001de79:	83 ec 0c             	sub    esp,0xc
c001de7c:	68 14 5f 02 c0       	push   0xc0025f14
c001de81:	e8 36 1c ff ff       	call   c000fabc <KePanic(char const*)>
c001de86:	83 c4 10             	add    esp,0x10
c001de89:	8d 76 00             	lea    esi,[esi+0x0]
c001de8c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001de92:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001de95:	74 11                	je     c001dea8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001de97:	83 ec 0c             	sub    esp,0xc
c001de9a:	68 4f 5f 02 c0       	push   0xc0025f4f
c001de9f:	e8 18 1c ff ff       	call   c000fabc <KePanic(char const*)>
c001dea4:	83 c4 10             	add    esp,0x10
c001dea7:	90                   	nop
c001dea8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001deae:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001deb1:	74 11                	je     c001dec4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001deb3:	83 ec 0c             	sub    esp,0xc
c001deb6:	68 4f 5f 02 c0       	push   0xc0025f4f
c001debb:	e8 fc 1b ff ff       	call   c000fabc <KePanic(char const*)>
c001dec0:	83 c4 10             	add    esp,0x10
c001dec3:	90                   	nop
c001dec4:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001dec7:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001decb:	85 ff                	test   edi,edi
c001decd:	7e 21                	jle    c001def0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001decf:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ded6:	31 c0                	xor    eax,eax
c001ded8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dedb:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001dede:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001dee1:	01 d5                	add    ebp,edx
c001dee3:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001dee6:	83 c0 04             	add    eax,0x4
c001dee9:	39 c1                	cmp    ecx,eax
c001deeb:	75 eb                	jne    c001ded8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001deed:	8d 76 00             	lea    esi,[esi+0x0]
c001def0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001def3:	83 ec 04             	sub    esp,0x4
c001def6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001def9:	29 f8                	sub    eax,edi
c001defb:	c1 e0 02             	shl    eax,0x2
c001defe:	50                   	push   eax
c001deff:	8d 04 ba             	lea    eax,[edx+edi*4]
c001df02:	50                   	push   eax
c001df03:	52                   	push   edx
c001df04:	e8 c7 24 fe ff       	call   c00003d0 <memmove>
c001df09:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001df0c:	29 f8                	sub    eax,edi
c001df0e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001df11:	83 c4 1c             	add    esp,0x1c
c001df14:	89 f8                	mov    eax,edi
c001df16:	5b                   	pop    ebx
c001df17:	5e                   	pop    esi
c001df18:	5f                   	pop    edi
c001df19:	5d                   	pop    ebp
c001df1a:	c3                   	ret    
c001df1b:	90                   	nop

c001df1c <PCI::open(int, int, void*)>:
c001df1c:	83 ec 18             	sub    esp,0x18
c001df1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001df27:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001df2d:	8b 10                	mov    edx,DWORD PTR [eax]
c001df2f:	50                   	push   eax
c001df30:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001df33:	31 c0                	xor    eax,eax
c001df35:	83 c4 1c             	add    esp,0x1c
c001df38:	c3                   	ret    
c001df39:	90                   	nop

c001df3a <PCI::close(int, int, void*)>:
c001df3a:	31 c0                	xor    eax,eax
c001df3c:	c3                   	ret    
c001df3d:	90                   	nop

c001df3e <PCI::PCI()>:
c001df3e:	83 ec 0c             	sub    esp,0xc
c001df41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df45:	83 ec 08             	sub    esp,0x8
c001df48:	68 6b 5f 02 c0       	push   0xc0025f6b
c001df4d:	50                   	push   eax
c001df4e:	e8 11 aa fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001df53:	83 c4 10             	add    esp,0x10
c001df56:	ba 78 60 02 c0       	mov    edx,0xc0026078
c001df5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df5f:	89 10                	mov    DWORD PTR [eax],edx
c001df61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df65:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001df6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df73:	a3 a0 fd 02 c0       	mov    ds:0xc002fda0,eax
c001df78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df82:	0f b6 d0             	movzx  edx,al
c001df85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df89:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001df90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df94:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df9a:	0f b6 d0             	movzx  edx,al
c001df9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfa1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001dfa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfaa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dfb0:	8d 50 01             	lea    edx,[eax+0x1]
c001dfb3:	88 d1                	mov    cl,dl
c001dfb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dfb9:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001dfbf:	0f b6 d0             	movzx  edx,al
c001dfc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfc6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dfca:	83 c9 c0             	or     ecx,0xffffffc0
c001dfcd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dfd1:	90                   	nop
c001dfd2:	83 c4 0c             	add    esp,0xc
c001dfd5:	c3                   	ret    

c001dfd6 <PCI::readBAR8(unsigned int, int)>:
c001dfd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dfda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfde:	f6 c2 01             	test   dl,0x1
c001dfe1:	74 07                	je     c001dfea <PCI::readBAR8(unsigned int, int)+0x14>
c001dfe3:	83 e2 fc             	and    edx,0xfffffffc
c001dfe6:	01 c2                	add    edx,eax
c001dfe8:	ec                   	in     al,dx
c001dfe9:	c3                   	ret    
c001dfea:	83 e2 f0             	and    edx,0xfffffff0
c001dfed:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001dff0:	c3                   	ret    
c001dff1:	90                   	nop

c001dff2 <PCI::readBAR16(unsigned int, int)>:
c001dff2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dff6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dffa:	f6 c2 01             	test   dl,0x1
c001dffd:	74 08                	je     c001e007 <PCI::readBAR16(unsigned int, int)+0x15>
c001dfff:	83 e2 fc             	and    edx,0xfffffffc
c001e002:	01 c2                	add    edx,eax
c001e004:	66 ed                	in     ax,dx
c001e006:	c3                   	ret    
c001e007:	83 e2 f0             	and    edx,0xfffffff0
c001e00a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001e00e:	c3                   	ret    
c001e00f:	90                   	nop

c001e010 <PCI::readBAR32(unsigned int, int)>:
c001e010:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e014:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e018:	f6 c2 01             	test   dl,0x1
c001e01b:	74 07                	je     c001e024 <PCI::readBAR32(unsigned int, int)+0x14>
c001e01d:	83 e2 fc             	and    edx,0xfffffffc
c001e020:	01 c2                	add    edx,eax
c001e022:	ed                   	in     eax,dx
c001e023:	c3                   	ret    
c001e024:	83 e2 f0             	and    edx,0xfffffff0
c001e027:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001e02a:	c3                   	ret    
c001e02b:	90                   	nop

c001e02c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001e02c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e030:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e034:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e038:	f6 c2 01             	test   dl,0x1
c001e03b:	74 07                	je     c001e044 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001e03d:	83 e2 fc             	and    edx,0xfffffffc
c001e040:	01 ca                	add    edx,ecx
c001e042:	ee                   	out    dx,al
c001e043:	c3                   	ret    
c001e044:	83 e2 f0             	and    edx,0xfffffff0
c001e047:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001e04a:	c3                   	ret    
c001e04b:	90                   	nop

c001e04c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001e04c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e050:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e054:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e058:	f6 c2 01             	test   dl,0x1
c001e05b:	74 08                	je     c001e065 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001e05d:	83 e2 fc             	and    edx,0xfffffffc
c001e060:	01 ca                	add    edx,ecx
c001e062:	66 ef                	out    dx,ax
c001e064:	c3                   	ret    
c001e065:	83 e2 f0             	and    edx,0xfffffff0
c001e068:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001e06c:	c3                   	ret    
c001e06d:	90                   	nop

c001e06e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001e06e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e072:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e076:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e07a:	f6 c2 01             	test   dl,0x1
c001e07d:	74 07                	je     c001e086 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001e07f:	83 e2 fc             	and    edx,0xfffffffc
c001e082:	01 ca                	add    edx,ecx
c001e084:	ef                   	out    dx,eax
c001e085:	c3                   	ret    
c001e086:	83 e2 f0             	and    edx,0xfffffff0
c001e089:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001e08c:	c3                   	ret    
c001e08d:	90                   	nop

c001e08e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e08e:	55                   	push   ebp
c001e08f:	57                   	push   edi
c001e090:	56                   	push   esi
c001e091:	53                   	push   ebx
c001e092:	83 ec 0c             	sub    esp,0xc
c001e095:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001e09a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001e09e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001e0a2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e0a6:	83 fe 07             	cmp    esi,0x7
c001e0a9:	76 10                	jbe    c001e0bb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001e0ab:	83 ec 0c             	sub    esp,0xc
c001e0ae:	68 73 5f 02 c0       	push   0xc0025f73
c001e0b3:	e8 04 1a ff ff       	call   c000fabc <KePanic(char const*)>
c001e0b8:	83 c4 10             	add    esp,0x10
c001e0bb:	0f b6 db             	movzx  ebx,bl
c001e0be:	83 fb 0f             	cmp    ebx,0xf
c001e0c1:	76 10                	jbe    c001e0d3 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001e0c3:	83 ec 0c             	sub    esp,0xc
c001e0c6:	68 a3 5f 02 c0       	push   0xc0025fa3
c001e0cb:	e8 ec 19 ff ff       	call   c000fabc <KePanic(char const*)>
c001e0d0:	83 c4 10             	add    esp,0x10
c001e0d3:	8d 04 36             	lea    eax,[esi+esi*1]
c001e0d6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e0db:	83 c8 f0             	or     eax,0xfffffff0
c001e0de:	ee                   	out    dx,al
c001e0df:	ba fa 0c 00 00       	mov    edx,0xcfa
c001e0e4:	89 e8                	mov    eax,ebp
c001e0e6:	ee                   	out    dx,al
c001e0e7:	89 f9                	mov    ecx,edi
c001e0e9:	89 d8                	mov    eax,ebx
c001e0eb:	0f b6 d9             	movzx  ebx,cl
c001e0ee:	83 c4 0c             	add    esp,0xc
c001e0f1:	c1 e0 08             	shl    eax,0x8
c001e0f4:	83 e3 fc             	and    ebx,0xfffffffc
c001e0f7:	09 d8                	or     eax,ebx
c001e0f9:	5b                   	pop    ebx
c001e0fa:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001e0ff:	5e                   	pop    esi
c001e100:	5f                   	pop    edi
c001e101:	5d                   	pop    ebp
c001e102:	c3                   	ret    
c001e103:	90                   	nop

c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e104:	57                   	push   edi
c001e105:	56                   	push   esi
c001e106:	53                   	push   ebx
c001e107:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e10b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e10f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e113:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e117:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001e11d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e121:	83 ff 01             	cmp    edi,0x1
c001e124:	75 3f                	jne    c001e165 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001e126:	89 de                	mov    esi,ebx
c001e128:	0f b6 c0             	movzx  eax,al
c001e12b:	c1 e0 10             	shl    eax,0x10
c001e12e:	81 e6 fc 00 00 00    	and    esi,0xfc
c001e134:	0f b6 c9             	movzx  ecx,cl
c001e137:	09 f0                	or     eax,esi
c001e139:	c1 e1 08             	shl    ecx,0x8
c001e13c:	0f b6 d2             	movzx  edx,dl
c001e13f:	c1 e2 0b             	shl    edx,0xb
c001e142:	09 c8                	or     eax,ecx
c001e144:	09 d0                	or     eax,edx
c001e146:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e14b:	0d 00 00 00 80       	or     eax,0x80000000
c001e150:	ef                   	out    dx,eax
c001e151:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e156:	ed                   	in     eax,dx
c001e157:	83 e3 02             	and    ebx,0x2
c001e15a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e161:	d3 e8                	shr    eax,cl
c001e163:	eb 44                	jmp    c001e1a9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e165:	83 ff 02             	cmp    edi,0x2
c001e168:	75 2d                	jne    c001e197 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001e16a:	83 ec 0c             	sub    esp,0xc
c001e16d:	0f b6 fb             	movzx  edi,bl
c001e170:	57                   	push   edi
c001e171:	0f b6 c9             	movzx  ecx,cl
c001e174:	51                   	push   ecx
c001e175:	0f b6 d2             	movzx  edx,dl
c001e178:	52                   	push   edx
c001e179:	0f b6 c0             	movzx  eax,al
c001e17c:	50                   	push   eax
c001e17d:	56                   	push   esi
c001e17e:	e8 0b ff ff ff       	call   c001e08e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e183:	89 c2                	mov    edx,eax
c001e185:	ed                   	in     eax,dx
c001e186:	83 e3 02             	and    ebx,0x2
c001e189:	83 c4 20             	add    esp,0x20
c001e18c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e193:	d3 e8                	shr    eax,cl
c001e195:	eb 12                	jmp    c001e1a9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e197:	83 ec 0c             	sub    esp,0xc
c001e19a:	68 d3 5f 02 c0       	push   0xc0025fd3
c001e19f:	e8 18 19 ff ff       	call   c000fabc <KePanic(char const*)>
c001e1a4:	83 c4 10             	add    esp,0x10
c001e1a7:	31 c0                	xor    eax,eax
c001e1a9:	5b                   	pop    ebx
c001e1aa:	5e                   	pop    esi
c001e1ab:	5f                   	pop    edi
c001e1ac:	c3                   	ret    
c001e1ad:	90                   	nop

c001e1ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001e1ae:	83 ec 18             	sub    esp,0x18
c001e1b1:	6a 00                	push   0x0
c001e1b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1b8:	50                   	push   eax
c001e1b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1be:	50                   	push   eax
c001e1bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1c4:	50                   	push   eax
c001e1c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1c9:	e8 36 ff ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1ce:	83 c4 2c             	add    esp,0x2c
c001e1d1:	c3                   	ret    

c001e1d2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001e1d2:	83 ec 18             	sub    esp,0x18
c001e1d5:	6a 0e                	push   0xe
c001e1d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1dc:	50                   	push   eax
c001e1dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1e2:	50                   	push   eax
c001e1e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1e8:	50                   	push   eax
c001e1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1ed:	e8 12 ff ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1f2:	83 c4 2c             	add    esp,0x2c
c001e1f5:	0f b6 c0             	movzx  eax,al
c001e1f8:	c3                   	ret    
c001e1f9:	90                   	nop

c001e1fa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001e1fa:	55                   	push   ebp
c001e1fb:	57                   	push   edi
c001e1fc:	56                   	push   esi
c001e1fd:	53                   	push   ebx
c001e1fe:	83 ec 18             	sub    esp,0x18
c001e201:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001e206:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001e20b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001e210:	6a 0a                	push   0xa
c001e212:	56                   	push   esi
c001e213:	55                   	push   ebp
c001e214:	57                   	push   edi
c001e215:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e219:	e8 e6 fe ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e21e:	83 c4 14             	add    esp,0x14
c001e221:	6a 0a                	push   0xa
c001e223:	56                   	push   esi
c001e224:	55                   	push   ebp
c001e225:	57                   	push   edi
c001e226:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e22a:	89 c3                	mov    ebx,eax
c001e22c:	0f b6 db             	movzx  ebx,bl
c001e22f:	e8 d0 fe ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e234:	83 c4 2c             	add    esp,0x2c
c001e237:	25 00 ff 00 00       	and    eax,0xff00
c001e23c:	09 d8                	or     eax,ebx
c001e23e:	5b                   	pop    ebx
c001e23f:	5e                   	pop    esi
c001e240:	5f                   	pop    edi
c001e241:	5d                   	pop    ebp
c001e242:	c3                   	ret    
c001e243:	90                   	nop

c001e244 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001e244:	83 ec 18             	sub    esp,0x18
c001e247:	6a 08                	push   0x8
c001e249:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e24e:	50                   	push   eax
c001e24f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e254:	50                   	push   eax
c001e255:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e25a:	50                   	push   eax
c001e25b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e25f:	e8 a0 fe ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e264:	83 c4 2c             	add    esp,0x2c
c001e267:	0f b6 c4             	movzx  eax,ah
c001e26a:	c3                   	ret    
c001e26b:	90                   	nop

c001e26c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001e26c:	83 ec 18             	sub    esp,0x18
c001e26f:	6a 08                	push   0x8
c001e271:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e276:	50                   	push   eax
c001e277:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e27c:	50                   	push   eax
c001e27d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e282:	50                   	push   eax
c001e283:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e287:	e8 78 fe ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e28c:	83 c4 2c             	add    esp,0x2c
c001e28f:	c3                   	ret    

c001e290 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001e290:	83 ec 18             	sub    esp,0x18
c001e293:	6a 3c                	push   0x3c
c001e295:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e29a:	50                   	push   eax
c001e29b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2a0:	50                   	push   eax
c001e2a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2a6:	50                   	push   eax
c001e2a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e2ab:	e8 54 fe ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e2b0:	83 c4 2c             	add    esp,0x2c
c001e2b3:	c3                   	ret    

c001e2b4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001e2b4:	83 ec 18             	sub    esp,0x18
c001e2b7:	6a 18                	push   0x18
c001e2b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2be:	50                   	push   eax
c001e2bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2c4:	50                   	push   eax
c001e2c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e2ca:	50                   	push   eax
c001e2cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e2cf:	e8 30 fe ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e2d4:	83 c4 2c             	add    esp,0x2c
c001e2d7:	0f b6 c4             	movzx  eax,ah
c001e2da:	c3                   	ret    
c001e2db:	90                   	nop

c001e2dc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e2dc:	55                   	push   ebp
c001e2dd:	57                   	push   edi
c001e2de:	56                   	push   esi
c001e2df:	53                   	push   ebx
c001e2e0:	83 ec 28             	sub    esp,0x28
c001e2e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e2e7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001e2ec:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001e2f1:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001e2f6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001e2fd:	8d 43 12             	lea    eax,[ebx+0x12]
c001e300:	83 c3 10             	add    ebx,0x10
c001e303:	0f b6 c0             	movzx  eax,al
c001e306:	0f b6 db             	movzx  ebx,bl
c001e309:	50                   	push   eax
c001e30a:	51                   	push   ecx
c001e30b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001e30f:	57                   	push   edi
c001e310:	55                   	push   ebp
c001e311:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e315:	e8 ea fd ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e31a:	83 c4 14             	add    esp,0x14
c001e31d:	53                   	push   ebx
c001e31e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e322:	51                   	push   ecx
c001e323:	89 c6                	mov    esi,eax
c001e325:	57                   	push   edi
c001e326:	55                   	push   ebp
c001e327:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e32b:	c1 e6 10             	shl    esi,0x10
c001e32e:	e8 d1 fd ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e333:	83 c4 3c             	add    esp,0x3c
c001e336:	5b                   	pop    ebx
c001e337:	0f b7 c0             	movzx  eax,ax
c001e33a:	09 f0                	or     eax,esi
c001e33c:	5e                   	pop    esi
c001e33d:	5f                   	pop    edi
c001e33e:	5d                   	pop    ebp
c001e33f:	c3                   	ret    

c001e340 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001e340:	55                   	push   ebp
c001e341:	57                   	push   edi
c001e342:	56                   	push   esi
c001e343:	53                   	push   ebx
c001e344:	83 ec 0c             	sub    esp,0xc
c001e347:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e34b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e34f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e353:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001e357:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001e35d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e361:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e365:	83 f9 01             	cmp    ecx,0x1
c001e368:	75 5d                	jne    c001e3c7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001e36a:	0f b6 c8             	movzx  ecx,al
c001e36d:	89 f0                	mov    eax,esi
c001e36f:	25 fc 00 00 00       	and    eax,0xfc
c001e374:	0f b6 d2             	movzx  edx,dl
c001e377:	c1 e1 10             	shl    ecx,0x10
c001e37a:	c1 e2 0b             	shl    edx,0xb
c001e37d:	09 c1                	or     ecx,eax
c001e37f:	89 f8                	mov    eax,edi
c001e381:	0f b6 f8             	movzx  edi,al
c001e384:	c1 e7 08             	shl    edi,0x8
c001e387:	09 f9                	or     ecx,edi
c001e389:	09 d1                	or     ecx,edx
c001e38b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e390:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e396:	89 c8                	mov    eax,ecx
c001e398:	ef                   	out    dx,eax
c001e399:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e39e:	ed                   	in     eax,dx
c001e39f:	83 e6 02             	and    esi,0x2
c001e3a2:	0f b7 db             	movzx  ebx,bx
c001e3a5:	74 0a                	je     c001e3b1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001e3a7:	c1 e3 10             	shl    ebx,0x10
c001e3aa:	0f b7 d0             	movzx  edx,ax
c001e3ad:	09 d3                	or     ebx,edx
c001e3af:	eb 05                	jmp    c001e3b6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001e3b1:	66 31 c0             	xor    ax,ax
c001e3b4:	09 c3                	or     ebx,eax
c001e3b6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e3bb:	89 c8                	mov    eax,ecx
c001e3bd:	ef                   	out    dx,eax
c001e3be:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e3c3:	89 d8                	mov    eax,ebx
c001e3c5:	eb 41                	jmp    c001e408 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001e3c7:	83 f9 02             	cmp    ecx,0x2
c001e3ca:	75 45                	jne    c001e411 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001e3cc:	89 f1                	mov    ecx,esi
c001e3ce:	83 ec 0c             	sub    esp,0xc
c001e3d1:	0f b6 f1             	movzx  esi,cl
c001e3d4:	89 f9                	mov    ecx,edi
c001e3d6:	56                   	push   esi
c001e3d7:	0f b6 f9             	movzx  edi,cl
c001e3da:	57                   	push   edi
c001e3db:	0f b6 d2             	movzx  edx,dl
c001e3de:	52                   	push   edx
c001e3df:	0f b6 c0             	movzx  eax,al
c001e3e2:	50                   	push   eax
c001e3e3:	55                   	push   ebp
c001e3e4:	e8 a5 fc ff ff       	call   c001e08e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e3e9:	89 c2                	mov    edx,eax
c001e3eb:	ed                   	in     eax,dx
c001e3ec:	83 c4 20             	add    esp,0x20
c001e3ef:	f6 c2 02             	test   dl,0x2
c001e3f2:	0f b7 db             	movzx  ebx,bx
c001e3f5:	74 0c                	je     c001e403 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001e3f7:	0f b7 c8             	movzx  ecx,ax
c001e3fa:	89 d8                	mov    eax,ebx
c001e3fc:	c1 e0 10             	shl    eax,0x10
c001e3ff:	09 c8                	or     eax,ecx
c001e401:	eb 05                	jmp    c001e408 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001e403:	66 31 c0             	xor    ax,ax
c001e406:	09 d8                	or     eax,ebx
c001e408:	ef                   	out    dx,eax
c001e409:	83 c4 0c             	add    esp,0xc
c001e40c:	5b                   	pop    ebx
c001e40d:	5e                   	pop    esi
c001e40e:	5f                   	pop    edi
c001e40f:	5d                   	pop    ebp
c001e410:	c3                   	ret    
c001e411:	c7 44 24 20 d3 5f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025fd3
c001e419:	83 c4 0c             	add    esp,0xc
c001e41c:	5b                   	pop    ebx
c001e41d:	5e                   	pop    esi
c001e41e:	5f                   	pop    edi
c001e41f:	5d                   	pop    ebp
c001e420:	e9 97 16 ff ff       	jmp    c000fabc <KePanic(char const*)>
c001e425:	90                   	nop

c001e426 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e426:	55                   	push   ebp
c001e427:	57                   	push   edi
c001e428:	56                   	push   esi
c001e429:	53                   	push   ebx
c001e42a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e430:	80 3d ac fd 02 c0 00 	cmp    BYTE PTR ds:0xc002fdac,0x0
c001e437:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001e43e:	0f 85 bd 00 00 00    	jne    c001e501 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e444:	83 ec 0c             	sub    esp,0xc
c001e447:	68 14 01 00 00       	push   0x114
c001e44c:	e8 17 12 ff ff       	call   c000f668 <malloc>
c001e451:	83 c4 0c             	add    esp,0xc
c001e454:	ff 35 58 d3 02 c0    	push   DWORD PTR ds:0xc002d358
c001e45a:	68 d9 5f 02 c0       	push   0xc0025fd9
c001e45f:	50                   	push   eax
c001e460:	89 c3                	mov    ebx,eax
c001e462:	e8 21 9d fe ff       	call   c0008188 <File::File(char const*, Process*)>
c001e467:	83 c4 10             	add    esp,0x10
c001e46a:	85 db                	test   ebx,ebx
c001e46c:	0f 84 6b 02 00 00    	je     c001e6dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e472:	57                   	push   edi
c001e473:	57                   	push   edi
c001e474:	6a 01                	push   0x1
c001e476:	53                   	push   ebx
c001e477:	e8 2a 9d fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001e47c:	83 c4 10             	add    esp,0x10
c001e47f:	85 c0                	test   eax,eax
c001e481:	0f 85 56 02 00 00    	jne    c001e6dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e487:	52                   	push   edx
c001e488:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e48c:	50                   	push   eax
c001e48d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e491:	50                   	push   eax
c001e492:	53                   	push   ebx
c001e493:	e8 10 a0 fe ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001e498:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e49c:	40                   	inc    eax
c001e49d:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4a0:	e8 c3 11 ff ff       	call   c000f668 <malloc>
c001e4a5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001e4a9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e4ad:	59                   	pop    ecx
c001e4ae:	a3 a8 fd 02 c0       	mov    ds:0xc002fda8,eax
c001e4b3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e4b5:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001e4b9:	51                   	push   ecx
c001e4ba:	50                   	push   eax
c001e4bb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e4bf:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e4c3:	53                   	push   ebx
c001e4c4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e4c7:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e4cb:	83 c4 20             	add    esp,0x20
c001e4ce:	89 c8                	mov    eax,ecx
c001e4d0:	99                   	cdq    
c001e4d1:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e4d5:	0f 85 02 02 00 00    	jne    c001e6dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e4db:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e4df:	0f 85 f8 01 00 00    	jne    c001e6dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e4e5:	83 ec 0c             	sub    esp,0xc
c001e4e8:	53                   	push   ebx
c001e4e9:	e8 16 9d fe ff       	call   c0008204 <File::close()>
c001e4ee:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e4f2:	83 c4 10             	add    esp,0x10
c001e4f5:	c6 05 ac fd 02 c0 01 	mov    BYTE PTR ds:0xc002fdac,0x1
c001e4fc:	a3 a4 fd 02 c0       	mov    ds:0xc002fda4,eax
c001e501:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e509:	31 c9                	xor    ecx,ecx
c001e50b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001e512:	8b 2d a4 fd 02 c0    	mov    ebp,DWORD PTR ds:0xc002fda4
c001e518:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e51f:	8b 15 a8 fd 02 c0    	mov    edx,DWORD PTR ds:0xc002fda8
c001e525:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e52a:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e532:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e537:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e53f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e543:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e54b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e54f:	39 cd                	cmp    ebp,ecx
c001e551:	0f 8e 86 01 00 00    	jle    c001e6dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e557:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001e55a:	d4 40                	aam    0x40
c001e55c:	d5 39                	aad    0x39
c001e55e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e562:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001e566:	d4 40                	aam    0x40
c001e568:	d5 39                	aad    0x39
c001e56a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e56e:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001e572:	d4 40                	aam    0x40
c001e574:	d5 39                	aad    0x39
c001e576:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e57a:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001e57e:	d4 40                	aam    0x40
c001e580:	d5 39                	aad    0x39
c001e582:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e586:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001e58a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e58e:	3c 56                	cmp    al,0x56
c001e590:	74 47                	je     c001e5d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001e592:	d4 40                	aam    0x40
c001e594:	d5 39                	aad    0x39
c001e596:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e599:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001e59d:	0f b6 db             	movzx  ebx,bl
c001e5a0:	c1 e3 04             	shl    ebx,0x4
c001e5a3:	d4 40                	aam    0x40
c001e5a5:	d5 39                	aad    0x39
c001e5a7:	83 e8 30             	sub    eax,0x30
c001e5aa:	0f b6 c0             	movzx  eax,al
c001e5ad:	09 c3                	or     ebx,eax
c001e5af:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001e5b3:	c1 e3 04             	shl    ebx,0x4
c001e5b6:	d4 40                	aam    0x40
c001e5b8:	d5 39                	aad    0x39
c001e5ba:	83 e8 30             	sub    eax,0x30
c001e5bd:	0f b6 c0             	movzx  eax,al
c001e5c0:	09 c3                	or     ebx,eax
c001e5c2:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001e5c6:	c1 e3 04             	shl    ebx,0x4
c001e5c9:	d4 40                	aam    0x40
c001e5cb:	d5 39                	aad    0x39
c001e5cd:	83 e8 30             	sub    eax,0x30
c001e5d0:	0f b6 c0             	movzx  eax,al
c001e5d3:	09 c3                	or     ebx,eax
c001e5d5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e5d9:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001e5dd:	80 fb 58             	cmp    bl,0x58
c001e5e0:	74 49                	je     c001e62b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001e5e2:	88 d8                	mov    al,bl
c001e5e4:	d4 40                	aam    0x40
c001e5e6:	d5 39                	aad    0x39
c001e5e8:	83 e8 30             	sub    eax,0x30
c001e5eb:	0f b6 f8             	movzx  edi,al
c001e5ee:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001e5f2:	c1 e7 04             	shl    edi,0x4
c001e5f5:	d4 40                	aam    0x40
c001e5f7:	d5 39                	aad    0x39
c001e5f9:	83 e8 30             	sub    eax,0x30
c001e5fc:	0f b6 c0             	movzx  eax,al
c001e5ff:	09 c7                	or     edi,eax
c001e601:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001e605:	c1 e7 04             	shl    edi,0x4
c001e608:	d4 40                	aam    0x40
c001e60a:	d5 39                	aad    0x39
c001e60c:	83 e8 30             	sub    eax,0x30
c001e60f:	0f b6 c0             	movzx  eax,al
c001e612:	09 c7                	or     edi,eax
c001e614:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001e618:	c1 e7 04             	shl    edi,0x4
c001e61b:	d4 40                	aam    0x40
c001e61d:	d5 39                	aad    0x39
c001e61f:	83 e8 30             	sub    eax,0x30
c001e622:	0f b6 c0             	movzx  eax,al
c001e625:	09 c7                	or     edi,eax
c001e627:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001e62b:	8d 41 10             	lea    eax,[ecx+0x10]
c001e62e:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e632:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001e636:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e63a:	83 f9 0a             	cmp    ecx,0xa
c001e63d:	74 07                	je     c001e646 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001e63f:	47                   	inc    edi
c001e640:	39 c5                	cmp    ebp,eax
c001e642:	75 16                	jne    c001e65a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001e644:	89 e8                	mov    eax,ebp
c001e646:	83 f9 0a             	cmp    ecx,0xa
c001e649:	0f 94 c1             	sete   cl
c001e64c:	0f b6 c9             	movzx  ecx,cl
c001e64f:	01 c1                	add    ecx,eax
c001e651:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e656:	75 0f                	jne    c001e667 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001e658:	eb 1c                	jmp    c001e676 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001e65a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e65d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001e661:	40                   	inc    eax
c001e662:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001e665:	eb cb                	jmp    c001e632 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001e667:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e66b:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e670:	0f 85 d9 fe ff ff    	jne    c001e54f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e676:	80 fb 58             	cmp    bl,0x58
c001e679:	74 10                	je     c001e68b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001e67b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e680:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001e685:	0f 85 c4 fe ff ff    	jne    c001e54f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e68b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e68f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e693:	83 e8 30             	sub    eax,0x30
c001e696:	c1 e0 04             	shl    eax,0x4
c001e699:	83 eb 30             	sub    ebx,0x30
c001e69c:	09 d8                	or     eax,ebx
c001e69e:	0f b6 c0             	movzx  eax,al
c001e6a1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e6a5:	0f 85 a4 fe ff ff    	jne    c001e54f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e6ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6af:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001e6b3:	83 e8 30             	sub    eax,0x30
c001e6b6:	c1 e0 04             	shl    eax,0x4
c001e6b9:	83 eb 30             	sub    ebx,0x30
c001e6bc:	09 d8                	or     eax,ebx
c001e6be:	0f b6 c0             	movzx  eax,al
c001e6c1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e6c5:	0f 85 84 fe ff ff    	jne    c001e54f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e6cb:	50                   	push   eax
c001e6cc:	50                   	push   eax
c001e6cd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e6d1:	50                   	push   eax
c001e6d2:	56                   	push   esi
c001e6d3:	e8 78 1f fe ff       	call   c0000650 <strcpy>
c001e6d8:	83 c4 10             	add    esp,0x10
c001e6db:	eb 05                	jmp    c001e6e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001e6dd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001e6e0:	31 f6                	xor    esi,esi
c001e6e2:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e6e8:	89 f0                	mov    eax,esi
c001e6ea:	5b                   	pop    ebx
c001e6eb:	5e                   	pop    esi
c001e6ec:	5f                   	pop    edi
c001e6ed:	5d                   	pop    ebp
c001e6ee:	c3                   	ret    
c001e6ef:	90                   	nop

c001e6f0 <PCI::checkBus(unsigned char)>:
c001e6f0:	56                   	push   esi
c001e6f1:	53                   	push   ebx
c001e6f2:	31 db                	xor    ebx,ebx
c001e6f4:	51                   	push   ecx
c001e6f5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e6fa:	52                   	push   edx
c001e6fb:	53                   	push   ebx
c001e6fc:	43                   	inc    ebx
c001e6fd:	56                   	push   esi
c001e6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e702:	e8 6f 03 00 00       	call   c001ea76 <PCI::checkDevice(unsigned char, unsigned char)>
c001e707:	83 c4 10             	add    esp,0x10
c001e70a:	83 fb 20             	cmp    ebx,0x20
c001e70d:	75 eb                	jne    c001e6fa <PCI::checkBus(unsigned char)+0xa>
c001e70f:	58                   	pop    eax
c001e710:	5b                   	pop    ebx
c001e711:	5e                   	pop    esi
c001e712:	c3                   	ret    
c001e713:	90                   	nop

c001e714 <PCI::foundDevice(PCIDeviceInfo)>:
c001e714:	55                   	push   ebp
c001e715:	57                   	push   edi
c001e716:	56                   	push   esi
c001e717:	53                   	push   ebx
c001e718:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e71e:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e726:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001e72d:	3d ff ff 00 00       	cmp    eax,0xffff
c001e732:	0f 84 b6 01 00 00    	je     c001e8ee <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e738:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001e740:	66 81 fd 06 04       	cmp    bp,0x406
c001e745:	75 32                	jne    c001e779 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e747:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e74f:	50                   	push   eax
c001e750:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e758:	50                   	push   eax
c001e759:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e761:	50                   	push   eax
c001e762:	53                   	push   ebx
c001e763:	e8 4c fb ff ff       	call   c001e2b4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e768:	59                   	pop    ecx
c001e769:	5e                   	pop    esi
c001e76a:	0f b6 c0             	movzx  eax,al
c001e76d:	50                   	push   eax
c001e76e:	53                   	push   ebx
c001e76f:	e8 7c ff ff ff       	call   c001e6f0 <PCI::checkBus(unsigned char)>
c001e774:	e9 15 01 00 00       	jmp    c001e88e <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001e779:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001e781:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e787:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001e78e:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e795:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e799:	85 c0                	test   eax,eax
c001e79b:	74 34                	je     c001e7d1 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001e79d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e7a0:	85 d2                	test   edx,edx
c001e7a2:	74 29                	je     c001e7cd <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e7a4:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e7aa:	31 cf                	xor    edi,ecx
c001e7ac:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e7b2:	75 19                	jne    c001e7cd <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e7b4:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e7ba:	75 11                	jne    c001e7cd <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e7bc:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e7c3:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001e7c7:	0f 84 21 01 00 00    	je     c001e8ee <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e7cd:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7cf:	eb c8                	jmp    c001e799 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e7d1:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e7d5:	be 0c 60 02 c0       	mov    esi,0xc002600c
c001e7da:	b9 07 00 00 00       	mov    ecx,0x7
c001e7df:	fc                   	cld    
c001e7e0:	31 d2                	xor    edx,edx
c001e7e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e7e4:	b9 12 00 00 00       	mov    ecx,0x12
c001e7e9:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e7f0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e7f4:	83 ec 0c             	sub    esp,0xc
c001e7f7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e7f9:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e801:	b9 0a 00 00 00       	mov    ecx,0xa
c001e806:	f7 f1                	div    ecx
c001e808:	83 c0 30             	add    eax,0x30
c001e80b:	83 c2 30             	add    edx,0x30
c001e80e:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e812:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e81a:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e81e:	31 d2                	xor    edx,edx
c001e820:	f7 f1                	div    ecx
c001e822:	83 c0 30             	add    eax,0x30
c001e825:	83 c2 30             	add    edx,0x30
c001e828:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e82c:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e830:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e834:	50                   	push   eax
c001e835:	e8 8b e9 fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001e83a:	83 c4 10             	add    esp,0x10
c001e83d:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001e843:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e84a:	75 47                	jne    c001e893 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001e84c:	83 ec 0c             	sub    esp,0xc
c001e84f:	68 64 01 00 00       	push   0x164
c001e854:	e8 0f 0e ff ff       	call   c000f668 <malloc>
c001e859:	89 04 24             	mov    DWORD PTR [esp],eax
c001e85c:	89 c5                	mov    ebp,eax
c001e85e:	e8 37 11 00 00       	call   c001f99a <SATABus::SATABus()>
c001e863:	58                   	pop    eax
c001e864:	5a                   	pop    edx
c001e865:	55                   	push   ebp
c001e866:	53                   	push   ebx
c001e867:	e8 8a b1 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001e86c:	83 ec 1c             	sub    esp,0x1c
c001e86f:	b9 09 00 00 00       	mov    ecx,0x9
c001e874:	89 e7                	mov    edi,esp
c001e876:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e878:	55                   	push   ebp
c001e879:	e8 be b0 fe ff       	call   c000993c <Device::preOpenPCI(PCIDeviceInfo)>
c001e87e:	83 c4 30             	add    esp,0x30
c001e881:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e884:	6a 00                	push   0x0
c001e886:	6a 00                	push   0x0
c001e888:	6a 00                	push   0x0
c001e88a:	55                   	push   ebp
c001e88b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e88e:	83 c4 10             	add    esp,0x10
c001e891:	eb 5b                	jmp    c001e8ee <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e893:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001e899:	75 19                	jne    c001e8b4 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001e89b:	83 ec 0c             	sub    esp,0xc
c001e89e:	68 70 02 00 00       	push   0x270
c001e8a3:	e8 c0 0d ff ff       	call   c000f668 <malloc>
c001e8a8:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8ab:	89 c5                	mov    ebp,eax
c001e8ad:	e8 94 02 00 00       	call   c001eb46 <IDE::IDE()>
c001e8b2:	eb af                	jmp    c001e863 <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001e8b4:	83 ec 0c             	sub    esp,0xc
c001e8b7:	68 58 01 00 00       	push   0x158
c001e8bc:	e8 a7 0d ff ff       	call   c000f668 <malloc>
c001e8c1:	89 c5                	mov    ebp,eax
c001e8c3:	58                   	pop    eax
c001e8c4:	5a                   	pop    edx
c001e8c5:	68 f2 5f 02 c0       	push   0xc0025ff2
c001e8ca:	55                   	push   ebp
c001e8cb:	e8 da b3 fe ff       	call   c0009caa <DriverlessDevice::DriverlessDevice(char const*)>
c001e8d0:	59                   	pop    ecx
c001e8d1:	5f                   	pop    edi
c001e8d2:	55                   	push   ebp
c001e8d3:	53                   	push   ebx
c001e8d4:	e8 1d b1 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001e8d9:	83 ec 1c             	sub    esp,0x1c
c001e8dc:	b9 09 00 00 00       	mov    ecx,0x9
c001e8e1:	89 e7                	mov    edi,esp
c001e8e3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e8e5:	55                   	push   ebp
c001e8e6:	e8 51 b0 fe ff       	call   c000993c <Device::preOpenPCI(PCIDeviceInfo)>
c001e8eb:	83 c4 30             	add    esp,0x30
c001e8ee:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e8f4:	5b                   	pop    ebx
c001e8f5:	5e                   	pop    esi
c001e8f6:	5f                   	pop    edi
c001e8f7:	5d                   	pop    ebp
c001e8f8:	c3                   	ret    
c001e8f9:	90                   	nop

c001e8fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e8fa:	55                   	push   ebp
c001e8fb:	57                   	push   edi
c001e8fc:	56                   	push   esi
c001e8fd:	53                   	push   ebx
c001e8fe:	83 ec 68             	sub    esp,0x68
c001e901:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e908:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e90c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e910:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e917:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e91c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e920:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e927:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e92c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e930:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e935:	6a 0c                	push   0xc
c001e937:	57                   	push   edi
c001e938:	53                   	push   ebx
c001e939:	56                   	push   esi
c001e93a:	55                   	push   ebp
c001e93b:	e8 c4 f7 ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e940:	83 c4 20             	add    esp,0x20
c001e943:	57                   	push   edi
c001e944:	53                   	push   ebx
c001e945:	56                   	push   esi
c001e946:	55                   	push   ebp
c001e947:	e8 ae f8 ff ff       	call   c001e1fa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e94c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e951:	57                   	push   edi
c001e952:	53                   	push   ebx
c001e953:	56                   	push   esi
c001e954:	55                   	push   ebp
c001e955:	e8 36 f9 ff ff       	call   c001e290 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e95a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e95e:	83 c4 14             	add    esp,0x14
c001e961:	6a 3c                	push   0x3c
c001e963:	57                   	push   edi
c001e964:	53                   	push   ebx
c001e965:	56                   	push   esi
c001e966:	55                   	push   ebp
c001e967:	e8 98 f7 ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e96c:	0f b6 c4             	movzx  eax,ah
c001e96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e973:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e977:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e97b:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c001e980:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001e986:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e98c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e990:	83 c4 20             	add    esp,0x20
c001e993:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e998:	74 30                	je     c001e9ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e99a:	31 c0                	xor    eax,eax
c001e99c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e9a0:	7e 28                	jle    c001e9ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e9a2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e9aa:	39 cb                	cmp    ebx,ecx
c001e9ac:	75 19                	jne    c001e9c7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e9ae:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e9b6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e9ba:	75 0b                	jne    c001e9c7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e9bc:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e9c3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e9c7:	40                   	inc    eax
c001e9c8:	eb d2                	jmp    c001e99c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e9ca:	31 d2                	xor    edx,edx
c001e9cc:	83 ec 0c             	sub    esp,0xc
c001e9cf:	57                   	push   edi
c001e9d0:	53                   	push   ebx
c001e9d1:	56                   	push   esi
c001e9d2:	52                   	push   edx
c001e9d3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e9d7:	55                   	push   ebp
c001e9d8:	e8 ff f8 ff ff       	call   c001e2dc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e9dd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9e1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e9e5:	42                   	inc    edx
c001e9e6:	83 c4 20             	add    esp,0x20
c001e9e9:	83 fa 06             	cmp    edx,0x6
c001e9ec:	75 de                	jne    c001e9cc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e9ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e9f2:	83 ec 0c             	sub    esp,0xc
c001e9f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e9f9:	c1 e2 08             	shl    edx,0x8
c001e9fc:	0f b6 c4             	movzx  eax,ah
c001e9ff:	09 d0                	or     eax,edx
c001ea01:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001ea06:	6a 02                	push   0x2
c001ea08:	57                   	push   edi
c001ea09:	53                   	push   ebx
c001ea0a:	56                   	push   esi
c001ea0b:	55                   	push   ebp
c001ea0c:	e8 f3 f6 ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea11:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ea16:	83 c4 20             	add    esp,0x20
c001ea19:	57                   	push   edi
c001ea1a:	53                   	push   ebx
c001ea1b:	56                   	push   esi
c001ea1c:	55                   	push   ebp
c001ea1d:	e8 22 f8 ff ff       	call   c001e244 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ea22:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ea26:	57                   	push   edi
c001ea27:	53                   	push   ebx
c001ea28:	56                   	push   esi
c001ea29:	55                   	push   ebp
c001ea2a:	e8 7f f7 ff ff       	call   c001e1ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ea2f:	b9 09 00 00 00       	mov    ecx,0x9
c001ea34:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ea39:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ea3d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ea41:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ea45:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ea49:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ea4d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001ea51:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ea55:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001ea59:	83 ec 0c             	sub    esp,0xc
c001ea5c:	fc                   	cld    
c001ea5d:	8d 74 24 58          	lea    esi,[esp+0x58]
c001ea61:	89 e7                	mov    edi,esp
c001ea63:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ea65:	55                   	push   ebp
c001ea66:	e8 a9 fc ff ff       	call   c001e714 <PCI::foundDevice(PCIDeviceInfo)>
c001ea6b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ea71:	5b                   	pop    ebx
c001ea72:	5e                   	pop    esi
c001ea73:	5f                   	pop    edi
c001ea74:	5d                   	pop    ebp
c001ea75:	c3                   	ret    

c001ea76 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ea76:	55                   	push   ebp
c001ea77:	57                   	push   edi
c001ea78:	56                   	push   esi
c001ea79:	53                   	push   ebx
c001ea7a:	83 ec 0c             	sub    esp,0xc
c001ea7d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ea82:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ea87:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ea8b:	6a 00                	push   0x0
c001ea8d:	56                   	push   esi
c001ea8e:	57                   	push   edi
c001ea8f:	55                   	push   ebp
c001ea90:	e8 19 f7 ff ff       	call   c001e1ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ea95:	6a 00                	push   0x0
c001ea97:	56                   	push   esi
c001ea98:	57                   	push   edi
c001ea99:	55                   	push   ebp
c001ea9a:	e8 5b fe ff ff       	call   c001e8fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ea9f:	83 c4 20             	add    esp,0x20
c001eaa2:	6a 00                	push   0x0
c001eaa4:	56                   	push   esi
c001eaa5:	57                   	push   edi
c001eaa6:	55                   	push   ebp
c001eaa7:	e8 26 f7 ff ff       	call   c001e1d2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001eaac:	83 c4 10             	add    esp,0x10
c001eaaf:	a8 80                	test   al,0x80
c001eab1:	74 2d                	je     c001eae0 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001eab3:	bb 01 00 00 00       	mov    ebx,0x1
c001eab8:	53                   	push   ebx
c001eab9:	56                   	push   esi
c001eaba:	57                   	push   edi
c001eabb:	55                   	push   ebp
c001eabc:	e8 ed f6 ff ff       	call   c001e1ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eac1:	83 c4 10             	add    esp,0x10
c001eac4:	0f b7 c0             	movzx  eax,ax
c001eac7:	3d ff ff 00 00       	cmp    eax,0xffff
c001eacc:	74 0c                	je     c001eada <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001eace:	53                   	push   ebx
c001eacf:	56                   	push   esi
c001ead0:	57                   	push   edi
c001ead1:	55                   	push   ebp
c001ead2:	e8 23 fe ff ff       	call   c001e8fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ead7:	83 c4 10             	add    esp,0x10
c001eada:	43                   	inc    ebx
c001eadb:	83 fb 08             	cmp    ebx,0x8
c001eade:	75 d8                	jne    c001eab8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001eae0:	83 c4 0c             	add    esp,0xc
c001eae3:	5b                   	pop    ebx
c001eae4:	5e                   	pop    esi
c001eae5:	5f                   	pop    edi
c001eae6:	5d                   	pop    ebp
c001eae7:	c3                   	ret    

c001eae8 <PCI::detect()>:
c001eae8:	56                   	push   esi
c001eae9:	53                   	push   ebx
c001eaea:	53                   	push   ebx
c001eaeb:	31 db                	xor    ebx,ebx
c001eaed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eaf1:	6a 00                	push   0x0
c001eaf3:	6a 00                	push   0x0
c001eaf5:	6a 00                	push   0x0
c001eaf7:	56                   	push   esi
c001eaf8:	e8 d5 f6 ff ff       	call   c001e1d2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001eafd:	83 c4 10             	add    esp,0x10
c001eb00:	a8 80                	test   al,0x80
c001eb02:	75 21                	jne    c001eb25 <PCI::detect()+0x3d>
c001eb04:	51                   	push   ecx
c001eb05:	51                   	push   ecx
c001eb06:	6a 00                	push   0x0
c001eb08:	56                   	push   esi
c001eb09:	e8 e2 fb ff ff       	call   c001e6f0 <PCI::checkBus(unsigned char)>
c001eb0e:	83 c4 10             	add    esp,0x10
c001eb11:	eb 2a                	jmp    c001eb3d <PCI::detect()+0x55>
c001eb13:	52                   	push   edx
c001eb14:	52                   	push   edx
c001eb15:	53                   	push   ebx
c001eb16:	43                   	inc    ebx
c001eb17:	56                   	push   esi
c001eb18:	e8 d3 fb ff ff       	call   c001e6f0 <PCI::checkBus(unsigned char)>
c001eb1d:	83 c4 10             	add    esp,0x10
c001eb20:	83 fb 08             	cmp    ebx,0x8
c001eb23:	74 18                	je     c001eb3d <PCI::detect()+0x55>
c001eb25:	53                   	push   ebx
c001eb26:	6a 00                	push   0x0
c001eb28:	6a 00                	push   0x0
c001eb2a:	56                   	push   esi
c001eb2b:	e8 7e f6 ff ff       	call   c001e1ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eb30:	83 c4 10             	add    esp,0x10
c001eb33:	0f b7 c0             	movzx  eax,ax
c001eb36:	3d ff ff 00 00       	cmp    eax,0xffff
c001eb3b:	74 d6                	je     c001eb13 <PCI::detect()+0x2b>
c001eb3d:	58                   	pop    eax
c001eb3e:	5b                   	pop    ebx
c001eb3f:	5e                   	pop    esi
c001eb40:	c3                   	ret    
c001eb41:	90                   	nop

c001eb42 <IDE::close(int, int, void*)>:
c001eb42:	83 c8 ff             	or     eax,0xffffffff
c001eb45:	c3                   	ret    

c001eb46 <IDE::IDE()>:
c001eb46:	83 ec 0c             	sub    esp,0xc
c001eb49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4d:	83 ec 08             	sub    esp,0x8
c001eb50:	68 9c 60 02 c0       	push   0xc002609c
c001eb55:	50                   	push   eax
c001eb56:	e8 f5 b1 fe ff       	call   c0009d50 <HardDiskController::HardDiskController(char const*)>
c001eb5b:	83 c4 10             	add    esp,0x10
c001eb5e:	ba c8 61 02 c0       	mov    edx,0xc00261c8
c001eb63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb67:	89 10                	mov    DWORD PTR [eax],edx
c001eb69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001eb74:	90                   	nop
c001eb75:	83 c4 0c             	add    esp,0xc
c001eb78:	c3                   	ret    
c001eb79:	90                   	nop

c001eb7a <IDE::prepareInterrupt(unsigned char)>:
c001eb7a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb7f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb83:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001eb8b:	c3                   	ret    

c001eb8c <selectDrive(unsigned char, unsigned char)>:
c001eb8c:	c3                   	ret    
c001eb8d:	90                   	nop

c001eb8e <IDE::getBase(unsigned char)>:
c001eb8e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001eb93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb97:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001eb9f:	c3                   	ret    

c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001eba0:	55                   	push   ebp
c001eba1:	57                   	push   edi
c001eba2:	56                   	push   esi
c001eba3:	53                   	push   ebx
c001eba4:	83 ec 1c             	sub    esp,0x1c
c001eba7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ebab:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ebaf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ebb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ebb7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ebba:	80 f9 03             	cmp    cl,0x3
c001ebbd:	77 4f                	ja     c001ec0e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ebbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ebc3:	0f b6 f2             	movzx  esi,dl
c001ebc6:	0f b6 db             	movzx  ebx,bl
c001ebc9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ebcc:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ebd1:	80 ca 80             	or     dl,0x80
c001ebd4:	52                   	push   edx
c001ebd5:	6a 0c                	push   0xc
c001ebd7:	56                   	push   esi
c001ebd8:	57                   	push   edi
c001ebd9:	e8 c2 ff ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebde:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ebe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ebe7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ebeb:	ee                   	out    dx,al
c001ebec:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ebf1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ebf5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ebf9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ec01:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ec05:	83 c4 2c             	add    esp,0x2c
c001ec08:	5b                   	pop    ebx
c001ec09:	5e                   	pop    esi
c001ec0a:	5f                   	pop    edi
c001ec0b:	5d                   	pop    ebp
c001ec0c:	eb 92                	jmp    c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec0e:	0f b6 cb             	movzx  ecx,bl
c001ec11:	83 f9 07             	cmp    ecx,0x7
c001ec14:	77 12                	ja     c001ec28 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ec16:	0f b6 d2             	movzx  edx,dl
c001ec19:	0f b6 db             	movzx  ebx,bl
c001ec1c:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001ec24:	01 da                	add    edx,ebx
c001ec26:	eb 2f                	jmp    c001ec57 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ec28:	83 f9 0d             	cmp    ecx,0xd
c001ec2b:	77 13                	ja     c001ec40 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ec2d:	0f b6 d2             	movzx  edx,dl
c001ec30:	0f b6 db             	movzx  ebx,bl
c001ec33:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ec3a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ec3e:	eb 17                	jmp    c001ec57 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ec40:	83 f9 15             	cmp    ecx,0x15
c001ec43:	77 13                	ja     c001ec58 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ec45:	0f b6 d2             	movzx  edx,dl
c001ec48:	0f b6 db             	movzx  ebx,bl
c001ec4b:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ec53:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ec57:	ee                   	out    dx,al
c001ec58:	83 c4 1c             	add    esp,0x1c
c001ec5b:	5b                   	pop    ebx
c001ec5c:	5e                   	pop    esi
c001ec5d:	5f                   	pop    edi
c001ec5e:	5d                   	pop    ebp
c001ec5f:	c3                   	ret    

c001ec60 <IDE::read(unsigned char, unsigned char)>:
c001ec60:	57                   	push   edi
c001ec61:	56                   	push   esi
c001ec62:	53                   	push   ebx
c001ec63:	83 ec 10             	sub    esp,0x10
c001ec66:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ec6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ec6e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ec72:	8d 42 f8             	lea    eax,[edx-0x8]
c001ec75:	3c 03                	cmp    al,0x3
c001ec77:	77 48                	ja     c001ecc1 <IDE::read(unsigned char, unsigned char)+0x61>
c001ec79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ec7d:	0f b6 f1             	movzx  esi,cl
c001ec80:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001ec83:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001ec88:	0c 80                	or     al,0x80
c001ec8a:	50                   	push   eax
c001ec8b:	6a 0c                	push   0xc
c001ec8d:	56                   	push   esi
c001ec8e:	53                   	push   ebx
c001ec8f:	e8 0c ff ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ec98:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001ec9d:	0f b6 d2             	movzx  edx,dl
c001eca0:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001eca4:	ec                   	in     al,dx
c001eca5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001eca9:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001ecae:	52                   	push   edx
c001ecaf:	6a 0c                	push   0xc
c001ecb1:	56                   	push   esi
c001ecb2:	53                   	push   ebx
c001ecb3:	e8 e8 fe ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecb8:	83 c4 20             	add    esp,0x20
c001ecbb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ecbf:	eb 4c                	jmp    c001ed0d <IDE::read(unsigned char, unsigned char)+0xad>
c001ecc1:	0f b6 f2             	movzx  esi,dl
c001ecc4:	83 fe 07             	cmp    esi,0x7
c001ecc7:	77 12                	ja     c001ecdb <IDE::read(unsigned char, unsigned char)+0x7b>
c001ecc9:	0f b6 c9             	movzx  ecx,cl
c001eccc:	0f b6 d2             	movzx  edx,dl
c001eccf:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001ecd7:	01 c2                	add    edx,eax
c001ecd9:	eb 31                	jmp    c001ed0c <IDE::read(unsigned char, unsigned char)+0xac>
c001ecdb:	83 fe 0d             	cmp    esi,0xd
c001ecde:	77 13                	ja     c001ecf3 <IDE::read(unsigned char, unsigned char)+0x93>
c001ece0:	0f b6 c9             	movzx  ecx,cl
c001ece3:	0f b6 d2             	movzx  edx,dl
c001ece6:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001eced:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ecf1:	eb 19                	jmp    c001ed0c <IDE::read(unsigned char, unsigned char)+0xac>
c001ecf3:	31 c0                	xor    eax,eax
c001ecf5:	83 fe 15             	cmp    esi,0x15
c001ecf8:	77 13                	ja     c001ed0d <IDE::read(unsigned char, unsigned char)+0xad>
c001ecfa:	0f b6 c9             	movzx  ecx,cl
c001ecfd:	0f b6 d2             	movzx  edx,dl
c001ed00:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001ed08:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ed0c:	ec                   	in     al,dx
c001ed0d:	83 c4 10             	add    esp,0x10
c001ed10:	5b                   	pop    ebx
c001ed11:	5e                   	pop    esi
c001ed12:	5f                   	pop    edi
c001ed13:	c3                   	ret    

c001ed14 <IDE::waitInterrupt(unsigned char)>:
c001ed14:	55                   	push   ebp
c001ed15:	57                   	push   edi
c001ed16:	56                   	push   esi
c001ed17:	53                   	push   ebx
c001ed18:	31 db                	xor    ebx,ebx
c001ed1a:	83 ec 0c             	sub    esp,0xc
c001ed1d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ed21:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ed26:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ed2e:	89 e8                	mov    eax,ebp
c001ed30:	84 c0                	test   al,al
c001ed32:	75 31                	jne    c001ed65 <IDE::waitInterrupt(unsigned char)+0x51>
c001ed34:	52                   	push   edx
c001ed35:	6a 0c                	push   0xc
c001ed37:	56                   	push   esi
c001ed38:	57                   	push   edi
c001ed39:	e8 22 ff ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001ed3e:	83 c4 10             	add    esp,0x10
c001ed41:	a8 01                	test   al,0x1
c001ed43:	75 28                	jne    c001ed6d <IDE::waitInterrupt(unsigned char)+0x59>
c001ed45:	f6 c3 04             	test   bl,0x4
c001ed48:	75 13                	jne    c001ed5d <IDE::waitInterrupt(unsigned char)+0x49>
c001ed4a:	83 fb 32             	cmp    ebx,0x32
c001ed4d:	7e 0e                	jle    c001ed5d <IDE::waitInterrupt(unsigned char)+0x49>
c001ed4f:	50                   	push   eax
c001ed50:	50                   	push   eax
c001ed51:	6a 00                	push   0x0
c001ed53:	6a 64                	push   0x64
c001ed55:	e8 ce 7a ff ff       	call   c0016828 <milliTenthSleep(unsigned long long)>
c001ed5a:	83 c4 10             	add    esp,0x10
c001ed5d:	83 fb 3c             	cmp    ebx,0x3c
c001ed60:	74 0b                	je     c001ed6d <IDE::waitInterrupt(unsigned char)+0x59>
c001ed62:	43                   	inc    ebx
c001ed63:	eb c1                	jmp    c001ed26 <IDE::waitInterrupt(unsigned char)+0x12>
c001ed65:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ed6d:	83 c4 0c             	add    esp,0xc
c001ed70:	89 e8                	mov    eax,ebp
c001ed72:	5b                   	pop    ebx
c001ed73:	5e                   	pop    esi
c001ed74:	5f                   	pop    edi
c001ed75:	5d                   	pop    ebp
c001ed76:	c3                   	ret    

c001ed77 <ideChannel0IRQHandler(regs*, void*)>:
c001ed77:	83 ec 10             	sub    esp,0x10
c001ed7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed7e:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ed85:	6a 07                	push   0x7
c001ed87:	6a 00                	push   0x0
c001ed89:	50                   	push   eax
c001ed8a:	e8 d1 fe ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001ed8f:	83 c4 1c             	add    esp,0x1c
c001ed92:	c3                   	ret    

c001ed93 <ideChannel1IRQHandler(regs*, void*)>:
c001ed93:	83 ec 10             	sub    esp,0x10
c001ed96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed9a:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001eda1:	6a 07                	push   0x7
c001eda3:	6a 01                	push   0x1
c001eda5:	50                   	push   eax
c001eda6:	e8 b5 fe ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001edab:	83 c4 1c             	add    esp,0x1c
c001edae:	c3                   	ret    
c001edaf:	90                   	nop

c001edb0 <IDE::enableIRQs(unsigned char, bool)>:
c001edb0:	57                   	push   edi
c001edb1:	b8 02 00 00 00       	mov    eax,0x2
c001edb6:	56                   	push   esi
c001edb7:	53                   	push   ebx
c001edb8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001edbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001edc1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001edc5:	74 02                	je     c001edc9 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001edc7:	31 c0                	xor    eax,eax
c001edc9:	0f b6 db             	movzx  ebx,bl
c001edcc:	bf 04 00 00 00       	mov    edi,0x4
c001edd1:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001edd8:	50                   	push   eax
c001edd9:	6a 0c                	push   0xc
c001eddb:	53                   	push   ebx
c001eddc:	56                   	push   esi
c001eddd:	e8 be fd ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ede2:	83 c4 10             	add    esp,0x10
c001ede5:	50                   	push   eax
c001ede6:	6a 0c                	push   0xc
c001ede8:	53                   	push   ebx
c001ede9:	56                   	push   esi
c001edea:	e8 71 fe ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001edef:	83 c4 10             	add    esp,0x10
c001edf2:	4f                   	dec    edi
c001edf3:	75 f0                	jne    c001ede5 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001edf5:	5b                   	pop    ebx
c001edf6:	5e                   	pop    esi
c001edf7:	5f                   	pop    edi
c001edf8:	c3                   	ret    
c001edf9:	90                   	nop

c001edfa <IDE::open(int, int, void*)>:
c001edfa:	55                   	push   ebp
c001edfb:	57                   	push   edi
c001edfc:	56                   	push   esi
c001edfd:	53                   	push   ebx
c001edfe:	83 ec 1c             	sub    esp,0x1c
c001ee01:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ee05:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ee0c:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ee15:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ee1e:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ee25:	0f 85 80 02 00 00    	jne    c001f0ab <IDE::open(int, int, void*)+0x2b1>
c001ee2b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ee31:	a8 70                	test   al,0x70
c001ee33:	75 44                	jne    c001ee79 <IDE::open(int, int, void*)+0x7f>
c001ee35:	ba 20 84 00 00       	mov    edx,0x8420
c001ee3a:	0f a3 c2             	bt     edx,eax
c001ee3d:	73 3a                	jae    c001ee79 <IDE::open(int, int, void*)+0x7f>
c001ee3f:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ee45:	83 ec 0c             	sub    esp,0xc
c001ee48:	83 e0 fc             	and    eax,0xfffffffc
c001ee4b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ee52:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ee58:	83 e0 fc             	and    eax,0xfffffffc
c001ee5b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ee62:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ee68:	83 e0 fc             	and    eax,0xfffffffc
c001ee6b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ee72:	68 1d 37 02 c0       	push   0xc002371d
c001ee77:	eb 60                	jmp    c001eed9 <IDE::open(int, int, void*)+0xdf>
c001ee79:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ee83:	be 64 00 00 00       	mov    esi,0x64
c001ee88:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ee92:	57                   	push   edi
c001ee93:	57                   	push   edi
c001ee94:	68 b4 60 02 c0       	push   0xc00260b4
c001ee99:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001ee9d:	57                   	push   edi
c001ee9e:	e8 ad 17 fe ff       	call   c0000650 <strcpy>
c001eea3:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001eeaa:	31 d2                	xor    edx,edx
c001eeac:	89 3c 24             	mov    DWORD PTR [esp],edi
c001eeaf:	89 c8                	mov    eax,ecx
c001eeb1:	f7 f6                	div    esi
c001eeb3:	be 0a 00 00 00       	mov    esi,0xa
c001eeb8:	31 d2                	xor    edx,edx
c001eeba:	83 c0 30             	add    eax,0x30
c001eebd:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001eec1:	89 c8                	mov    eax,ecx
c001eec3:	f7 f6                	div    esi
c001eec5:	89 d1                	mov    ecx,edx
c001eec7:	31 d2                	xor    edx,edx
c001eec9:	f7 f6                	div    esi
c001eecb:	83 c1 30             	add    ecx,0x30
c001eece:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001eed2:	83 c2 30             	add    edx,0x30
c001eed5:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001eed9:	e8 e7 e2 fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001eede:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001eee5:	bf f8 0c 00 00       	mov    edi,0xcf8
c001eeea:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eef1:	83 c4 10             	add    esp,0x10
c001eef4:	89 fa                	mov    edx,edi
c001eef6:	c1 e1 10             	shl    ecx,0x10
c001eef9:	c1 e0 0b             	shl    eax,0xb
c001eefc:	09 c1                	or     ecx,eax
c001eefe:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ef05:	c1 e0 08             	shl    eax,0x8
c001ef08:	09 c1                	or     ecx,eax
c001ef0a:	89 c8                	mov    eax,ecx
c001ef0c:	0d 08 00 00 80       	or     eax,0x80000008
c001ef11:	ef                   	out    dx,eax
c001ef12:	be fc 0c 00 00       	mov    esi,0xcfc
c001ef17:	89 f2                	mov    edx,esi
c001ef19:	ed                   	in     eax,dx
c001ef1a:	c1 e8 10             	shr    eax,0x10
c001ef1d:	3d ff ff 00 00       	cmp    eax,0xffff
c001ef22:	0f 84 e1 00 00 00    	je     c001f009 <IDE::open(int, int, void*)+0x20f>
c001ef28:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ef2e:	89 fa                	mov    edx,edi
c001ef30:	89 c8                	mov    eax,ecx
c001ef32:	ef                   	out    dx,eax
c001ef33:	b0 fe                	mov    al,0xfe
c001ef35:	89 f2                	mov    edx,esi
c001ef37:	ee                   	out    dx,al
c001ef38:	89 c8                	mov    eax,ecx
c001ef3a:	89 fa                	mov    edx,edi
c001ef3c:	ef                   	out    dx,eax
c001ef3d:	89 f2                	mov    edx,esi
c001ef3f:	ed                   	in     eax,dx
c001ef40:	3c fe                	cmp    al,0xfe
c001ef42:	0f 85 83 00 00 00    	jne    c001efcb <IDE::open(int, int, void*)+0x1d1>
c001ef48:	83 ec 0c             	sub    esp,0xc
c001ef4b:	68 53 37 02 c0       	push   0xc0023753
c001ef50:	e8 70 e2 fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001ef55:	c7 04 24 ba 60 02 c0 	mov    DWORD PTR [esp],0xc00260ba
c001ef5c:	e8 05 80 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ef61:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ef6b:	c7 04 24 48 3a 02 c0 	mov    DWORD PTR [esp],0xc0023a48
c001ef72:	e8 4e e2 fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001ef77:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ef7e:	89 fa                	mov    edx,edi
c001ef80:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ef87:	c1 e1 10             	shl    ecx,0x10
c001ef8a:	c1 e0 08             	shl    eax,0x8
c001ef8d:	09 c1                	or     ecx,eax
c001ef8f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ef96:	c1 e0 0b             	shl    eax,0xb
c001ef99:	09 c1                	or     ecx,eax
c001ef9b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001efa1:	89 c8                	mov    eax,ecx
c001efa3:	ef                   	out    dx,eax
c001efa4:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001efaa:	89 f2                	mov    edx,esi
c001efac:	89 e8                	mov    eax,ebp
c001efae:	ee                   	out    dx,al
c001efaf:	89 c8                	mov    eax,ecx
c001efb1:	89 fa                	mov    edx,edi
c001efb3:	ef                   	out    dx,eax
c001efb4:	89 f2                	mov    edx,esi
c001efb6:	ed                   	in     eax,dx
c001efb7:	0f b6 c0             	movzx  eax,al
c001efba:	83 c4 10             	add    esp,0x10
c001efbd:	39 e8                	cmp    eax,ebp
c001efbf:	74 58                	je     c001f019 <IDE::open(int, int, void*)+0x21f>
c001efc1:	83 ec 0c             	sub    esp,0xc
c001efc4:	68 cf 60 02 c0       	push   0xc00260cf
c001efc9:	eb 46                	jmp    c001f011 <IDE::open(int, int, void*)+0x217>
c001efcb:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001efd4:	75 29                	jne    c001efff <IDE::open(int, int, void*)+0x205>
c001efd6:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001efdd:	3d 8a 00 00 00       	cmp    eax,0x8a
c001efe2:	74 05                	je     c001efe9 <IDE::open(int, int, void*)+0x1ef>
c001efe4:	83 c0 80             	add    eax,0xffffff80
c001efe7:	75 16                	jne    c001efff <IDE::open(int, int, void*)+0x205>
c001efe9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001eff0:	83 ec 0c             	sub    esp,0xc
c001eff3:	68 a3 49 02 c0       	push   0xc00249a3
c001eff8:	e8 c8 e1 fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001effd:	eb 17                	jmp    c001f016 <IDE::open(int, int, void*)+0x21c>
c001efff:	83 ec 0c             	sub    esp,0xc
c001f002:	68 d7 60 02 c0       	push   0xc00260d7
c001f007:	eb 08                	jmp    c001f011 <IDE::open(int, int, void*)+0x217>
c001f009:	83 ec 0c             	sub    esp,0xc
c001f00c:	68 08 61 02 c0       	push   0xc0026108
c001f011:	e8 a6 0a ff ff       	call   c000fabc <KePanic(char const*)>
c001f016:	83 c4 10             	add    esp,0x10
c001f019:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001f020:	0f 84 bf 00 00 00    	je     c001f0e5 <IDE::open(int, int, void*)+0x2eb>
c001f026:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001f02c:	83 ec 0c             	sub    esp,0xc
c001f02f:	83 e0 fc             	and    eax,0xfffffffc
c001f032:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001f039:	83 c0 08             	add    eax,0x8
c001f03c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001f043:	68 32 61 02 c0       	push   0xc0026132
c001f048:	e8 19 7f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f04d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f054:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f05b:	50                   	push   eax
c001f05c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f063:	50                   	push   eax
c001f064:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f06b:	50                   	push   eax
c001f06c:	ff 35 a0 fd 02 c0    	push   DWORD PTR ds:0xc002fda0
c001f072:	e8 8d f0 ff ff       	call   c001e104 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f077:	83 c4 18             	add    esp,0x18
c001f07a:	83 c8 07             	or     eax,0x7
c001f07d:	0f b7 c0             	movzx  eax,ax
c001f080:	50                   	push   eax
c001f081:	6a 04                	push   0x4
c001f083:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f08a:	50                   	push   eax
c001f08b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f092:	50                   	push   eax
c001f093:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f09a:	50                   	push   eax
c001f09b:	ff 35 a0 fd 02 c0    	push   DWORD PTR ds:0xc002fda0
c001f0a1:	e8 9a f2 ff ff       	call   c001e340 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001f0a6:	83 c4 20             	add    esp,0x20
c001f0a9:	eb 3a                	jmp    c001f0e5 <IDE::open(int, int, void*)+0x2eb>
c001f0ab:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f0b2:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f0b8:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f0bf:	05 06 02 00 00       	add    eax,0x206
c001f0c4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f0cb:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f0d2:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f0d9:	05 06 02 00 00       	add    eax,0x206
c001f0de:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f0e5:	83 ec 0c             	sub    esp,0xc
c001f0e8:	68 00 40 02 c0       	push   0xc0024000
c001f0ed:	e8 d3 e0 fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f0f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f0f8:	83 c4 10             	add    esp,0x10
c001f0fb:	89 c2                	mov    edx,eax
c001f0fd:	83 e2 0f             	and    edx,0xf
c001f100:	83 fa 08             	cmp    edx,0x8
c001f103:	75 0a                	jne    c001f10f <IDE::open(int, int, void*)+0x315>
c001f105:	83 e8 02             	sub    eax,0x2
c001f108:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f10f:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f115:	89 c2                	mov    edx,eax
c001f117:	83 e2 0f             	and    edx,0xf
c001f11a:	83 fa 08             	cmp    edx,0x8
c001f11d:	75 0a                	jne    c001f129 <IDE::open(int, int, void*)+0x32f>
c001f11f:	83 e8 02             	sub    eax,0x2
c001f122:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f129:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f130:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f137:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f13a:	89 d0                	mov    eax,edx
c001f13c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f140:	8d 7a 01             	lea    edi,[edx+0x1]
c001f143:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f147:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f14b:	83 e1 3f             	and    ecx,0x3f
c001f14e:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f152:	89 f9                	mov    ecx,edi
c001f154:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f15b:	8d 78 02             	lea    edi,[eax+0x2]
c001f15e:	0f b6 c9             	movzx  ecx,cl
c001f161:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f164:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f168:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f16c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f170:	83 e2 3f             	and    edx,0x3f
c001f173:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f177:	89 f9                	mov    ecx,edi
c001f179:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f17f:	8d 78 03             	lea    edi,[eax+0x3]
c001f182:	0f b6 d1             	movzx  edx,cl
c001f185:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f188:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f18c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f190:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f194:	83 e1 3f             	and    ecx,0x3f
c001f197:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f19b:	89 fa                	mov    edx,edi
c001f19d:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f1a3:	8d 78 04             	lea    edi,[eax+0x4]
c001f1a6:	0f b6 ca             	movzx  ecx,dl
c001f1a9:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f1ac:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f1b0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f1b4:	89 fa                	mov    edx,edi
c001f1b6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f1bc:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f1c0:	83 e2 3f             	and    edx,0x3f
c001f1c3:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f1c7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f1ce:	66 85 f6             	test   si,si
c001f1d1:	74 24                	je     c001f1f7 <IDE::open(int, int, void*)+0x3fd>
c001f1d3:	89 f9                	mov    ecx,edi
c001f1d5:	83 c0 05             	add    eax,0x5
c001f1d8:	0f b6 d1             	movzx  edx,cl
c001f1db:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f1de:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f1e2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f1e6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f1ec:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001f1f0:	83 e0 3f             	and    eax,0x3f
c001f1f3:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001f1f7:	83 ec 0c             	sub    esp,0xc
c001f1fa:	68 4a 61 02 c0       	push   0xc002614a
c001f1ff:	e8 c1 df fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f204:	58                   	pop    eax
c001f205:	5a                   	pop    edx
c001f206:	6a 00                	push   0x0
c001f208:	53                   	push   ebx
c001f209:	e8 6c f9 ff ff       	call   c001eb7a <IDE::prepareInterrupt(unsigned char)>
c001f20e:	59                   	pop    ecx
c001f20f:	5e                   	pop    esi
c001f210:	6a 01                	push   0x1
c001f212:	53                   	push   ebx
c001f213:	e8 62 f9 ff ff       	call   c001eb7a <IDE::prepareInterrupt(unsigned char)>
c001f218:	c7 04 24 cc 59 02 c0 	mov    DWORD PTR [esp],0xc00259cc
c001f21f:	e8 a1 df fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f224:	83 c4 0c             	add    esp,0xc
c001f227:	6a 00                	push   0x0
c001f229:	6a 00                	push   0x0
c001f22b:	53                   	push   ebx
c001f22c:	e8 7f fb ff ff       	call   c001edb0 <IDE::enableIRQs(unsigned char, bool)>
c001f231:	83 c4 0c             	add    esp,0xc
c001f234:	6a 00                	push   0x0
c001f236:	6a 01                	push   0x1
c001f238:	53                   	push   ebx
c001f239:	e8 72 fb ff ff       	call   c001edb0 <IDE::enableIRQs(unsigned char, bool)>
c001f23e:	c7 04 24 4c 61 02 c0 	mov    DWORD PTR [esp],0xc002614c
c001f245:	e8 7b df fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f24a:	83 c4 10             	add    esp,0x10
c001f24d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f254:	74 3c                	je     c001f292 <IDE::open(int, int, void*)+0x498>
c001f256:	83 ec 0c             	sub    esp,0xc
c001f259:	53                   	push   ebx
c001f25a:	6a 01                	push   0x1
c001f25c:	68 77 ed 01 c0       	push   0xc001ed77
c001f261:	6a 0e                	push   0xe
c001f263:	53                   	push   ebx
c001f264:	e8 39 a7 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f269:	83 c4 14             	add    esp,0x14
c001f26c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f272:	53                   	push   ebx
c001f273:	6a 01                	push   0x1
c001f275:	68 93 ed 01 c0       	push   0xc001ed93
c001f27a:	6a 0f                	push   0xf
c001f27c:	53                   	push   ebx
c001f27d:	e8 20 a7 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f282:	83 c4 14             	add    esp,0x14
c001f285:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f28b:	68 4e 3c 02 c0       	push   0xc0023c4e
c001f290:	eb 40                	jmp    c001f2d2 <IDE::open(int, int, void*)+0x4d8>
c001f292:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f29c:	83 ec 0c             	sub    esp,0xc
c001f29f:	53                   	push   ebx
c001f2a0:	6a 00                	push   0x0
c001f2a2:	68 77 ed 01 c0       	push   0xc001ed77
c001f2a7:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f2ad:	53                   	push   ebx
c001f2ae:	e8 ef a6 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f2b3:	83 c4 14             	add    esp,0x14
c001f2b6:	53                   	push   ebx
c001f2b7:	6a 00                	push   0x0
c001f2b9:	68 93 ed 01 c0       	push   0xc001ed93
c001f2be:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f2c4:	53                   	push   ebx
c001f2c5:	e8 d8 a6 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f2ca:	83 c4 14             	add    esp,0x14
c001f2cd:	68 92 49 02 c0       	push   0xc0024992
c001f2d2:	e8 ee de fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f2d7:	83 c4 10             	add    esp,0x10
c001f2da:	83 ec 0c             	sub    esp,0xc
c001f2dd:	68 4e 61 02 c0       	push   0xc002614e
c001f2e2:	e8 de de fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f2e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f2e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f2ec:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f2ef:	c7 04 24 15 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e15
c001f2f6:	e8 ca de fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f2fb:	83 c4 0c             	add    esp,0xc
c001f2fe:	6a 07                	push   0x7
c001f300:	6a 00                	push   0x0
c001f302:	53                   	push   ebx
c001f303:	e8 58 f9 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f308:	83 c4 0c             	add    esp,0xc
c001f30b:	6a 07                	push   0x7
c001f30d:	6a 01                	push   0x1
c001f30f:	53                   	push   ebx
c001f310:	e8 4b f9 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f315:	c7 04 24 9c 46 02 c0 	mov    DWORD PTR [esp],0xc002469c
c001f31c:	e8 a4 de fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f321:	83 c4 0c             	add    esp,0xc
c001f324:	6a 01                	push   0x1
c001f326:	6a 00                	push   0x0
c001f328:	53                   	push   ebx
c001f329:	e8 82 fa ff ff       	call   c001edb0 <IDE::enableIRQs(unsigned char, bool)>
c001f32e:	83 c4 0c             	add    esp,0xc
c001f331:	6a 01                	push   0x1
c001f333:	6a 01                	push   0x1
c001f335:	53                   	push   ebx
c001f336:	e8 75 fa ff ff       	call   c001edb0 <IDE::enableIRQs(unsigned char, bool)>
c001f33b:	c7 04 24 51 61 02 c0 	mov    DWORD PTR [esp],0xc0026151
c001f342:	e8 7e de fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f347:	83 c4 2c             	add    esp,0x2c
c001f34a:	31 c0                	xor    eax,eax
c001f34c:	5b                   	pop    ebx
c001f34d:	5e                   	pop    esi
c001f34e:	5f                   	pop    edi
c001f34f:	5d                   	pop    ebp
c001f350:	c3                   	ret    
c001f351:	90                   	nop

c001f352 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f352:	55                   	push   ebp
c001f353:	57                   	push   edi
c001f354:	56                   	push   esi
c001f355:	53                   	push   ebx
c001f356:	83 ec 1c             	sub    esp,0x1c
c001f359:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f35d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f361:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f365:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f369:	8d 42 f8             	lea    eax,[edx-0x8]
c001f36c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f370:	3c 03                	cmp    al,0x3
c001f372:	77 5a                	ja     c001f3ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001f374:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f378:	0f b6 db             	movzx  ebx,bl
c001f37b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f37f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f382:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f387:	0c 80                	or     al,0x80
c001f389:	50                   	push   eax
c001f38a:	6a 0c                	push   0xc
c001f38c:	53                   	push   ebx
c001f38d:	56                   	push   esi
c001f38e:	e8 0d f8 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f393:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f397:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001f39c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f3a0:	0f b6 d2             	movzx  edx,dl
c001f3a3:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f3a7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f3a9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f3ae:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f3b2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f3b6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f3be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f3c2:	83 c4 2c             	add    esp,0x2c
c001f3c5:	5b                   	pop    ebx
c001f3c6:	5e                   	pop    esi
c001f3c7:	5f                   	pop    edi
c001f3c8:	5d                   	pop    ebp
c001f3c9:	e9 d2 f7 ff ff       	jmp    c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3ce:	0f b6 c2             	movzx  eax,dl
c001f3d1:	83 f8 07             	cmp    eax,0x7
c001f3d4:	77 12                	ja     c001f3e8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001f3d6:	0f b6 db             	movzx  ebx,bl
c001f3d9:	0f b6 c2             	movzx  eax,dl
c001f3dc:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001f3e4:	01 c2                	add    edx,eax
c001f3e6:	eb 2f                	jmp    c001f417 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f3e8:	83 f8 0d             	cmp    eax,0xd
c001f3eb:	77 13                	ja     c001f400 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001f3ed:	0f b6 db             	movzx  ebx,bl
c001f3f0:	0f b6 d2             	movzx  edx,dl
c001f3f3:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001f3fa:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f3fe:	eb 17                	jmp    c001f417 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f400:	83 f8 15             	cmp    eax,0x15
c001f403:	77 14                	ja     c001f419 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001f405:	0f b6 db             	movzx  ebx,bl
c001f408:	0f b6 d2             	movzx  edx,dl
c001f40b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001f413:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f417:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f419:	83 c4 1c             	add    esp,0x1c
c001f41c:	5b                   	pop    ebx
c001f41d:	5e                   	pop    esi
c001f41e:	5f                   	pop    edi
c001f41f:	5d                   	pop    ebp
c001f420:	c3                   	ret    
c001f421:	90                   	nop

c001f422 <IDE::detect()>:
c001f422:	55                   	push   ebp
c001f423:	57                   	push   edi
c001f424:	56                   	push   esi
c001f425:	53                   	push   ebx
c001f426:	81 ec 28 02 00 00    	sub    esp,0x228
c001f42c:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f433:	68 53 61 02 c0       	push   0xc0026153
c001f438:	e8 88 dd fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f43d:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f443:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f447:	83 c4 10             	add    esp,0x10
c001f44a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f44f:	0f 85 26 04 00 00    	jne    c001f87b <IDE::detect()+0x459>
c001f455:	83 ec 0c             	sub    esp,0xc
c001f458:	31 f6                	xor    esi,esi
c001f45a:	68 56 61 02 c0       	push   0xc0026156
c001f45f:	31 ff                	xor    edi,edi
c001f461:	e8 5f dd fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f466:	83 c4 10             	add    esp,0x10
c001f469:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f470:	83 ec 0c             	sub    esp,0xc
c001f473:	68 59 61 02 c0       	push   0xc0026159
c001f478:	e8 48 dd fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f47d:	83 c4 10             	add    esp,0x10
c001f480:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f487:	83 ec 0c             	sub    esp,0xc
c001f48a:	31 ed                	xor    ebp,ebp
c001f48c:	68 5c 61 02 c0       	push   0xc002615c
c001f491:	e8 2f dd fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f496:	89 f8                	mov    eax,edi
c001f498:	c1 e0 06             	shl    eax,0x6
c001f49b:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f4a3:	c7 04 24 5f 61 02 c0 	mov    DWORD PTR [esp],0xc002615f
c001f4aa:	e8 16 dd fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f4af:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f4b3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f4b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4bb:	c1 e0 04             	shl    eax,0x4
c001f4be:	83 c8 a0             	or     eax,0xffffffa0
c001f4c1:	0f b6 c0             	movzx  eax,al
c001f4c4:	50                   	push   eax
c001f4c5:	6a 06                	push   0x6
c001f4c7:	56                   	push   esi
c001f4c8:	53                   	push   ebx
c001f4c9:	e8 d2 f6 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4ce:	83 c4 1c             	add    esp,0x1c
c001f4d1:	6a 0c                	push   0xc
c001f4d3:	56                   	push   esi
c001f4d4:	53                   	push   ebx
c001f4d5:	e8 86 f7 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f4da:	83 c4 0c             	add    esp,0xc
c001f4dd:	6a 0c                	push   0xc
c001f4df:	56                   	push   esi
c001f4e0:	53                   	push   ebx
c001f4e1:	e8 7a f7 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f4e6:	83 c4 0c             	add    esp,0xc
c001f4e9:	6a 0c                	push   0xc
c001f4eb:	56                   	push   esi
c001f4ec:	53                   	push   ebx
c001f4ed:	e8 6e f7 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f4f2:	83 c4 0c             	add    esp,0xc
c001f4f5:	6a 0c                	push   0xc
c001f4f7:	56                   	push   esi
c001f4f8:	53                   	push   ebx
c001f4f9:	e8 62 f7 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f4fe:	c7 04 24 62 61 02 c0 	mov    DWORD PTR [esp],0xc0026162
c001f505:	e8 bb dc fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f50a:	68 ec 00 00 00       	push   0xec
c001f50f:	6a 07                	push   0x7
c001f511:	56                   	push   esi
c001f512:	53                   	push   ebx
c001f513:	e8 88 f6 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f518:	83 c4 1c             	add    esp,0x1c
c001f51b:	6a 0c                	push   0xc
c001f51d:	56                   	push   esi
c001f51e:	53                   	push   ebx
c001f51f:	e8 3c f7 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f524:	83 c4 0c             	add    esp,0xc
c001f527:	6a 0c                	push   0xc
c001f529:	56                   	push   esi
c001f52a:	53                   	push   ebx
c001f52b:	e8 30 f7 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f530:	83 c4 0c             	add    esp,0xc
c001f533:	6a 0c                	push   0xc
c001f535:	56                   	push   esi
c001f536:	53                   	push   ebx
c001f537:	e8 24 f7 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f53c:	83 c4 0c             	add    esp,0xc
c001f53f:	6a 0c                	push   0xc
c001f541:	56                   	push   esi
c001f542:	53                   	push   ebx
c001f543:	e8 18 f7 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f548:	c7 04 24 65 61 02 c0 	mov    DWORD PTR [esp],0xc0026165
c001f54f:	e8 71 dc fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f554:	83 c4 0c             	add    esp,0xc
c001f557:	6a 0c                	push   0xc
c001f559:	56                   	push   esi
c001f55a:	53                   	push   ebx
c001f55b:	e8 00 f7 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f560:	83 c4 10             	add    esp,0x10
c001f563:	84 c0                	test   al,al
c001f565:	75 1f                	jne    c001f586 <IDE::detect()+0x164>
c001f567:	83 ec 0c             	sub    esp,0xc
c001f56a:	68 68 61 02 c0       	push   0xc0026168
c001f56f:	e8 51 dc fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f574:	e9 e0 02 00 00       	jmp    c001f859 <IDE::detect()+0x437>
c001f579:	a8 80                	test   al,0x80
c001f57b:	74 21                	je     c001f59e <IDE::detect()+0x17c>
c001f57d:	45                   	inc    ebp
c001f57e:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f584:	7f 1e                	jg     c001f5a4 <IDE::detect()+0x182>
c001f586:	50                   	push   eax
c001f587:	6a 0c                	push   0xc
c001f589:	56                   	push   esi
c001f58a:	53                   	push   ebx
c001f58b:	e8 d0 f6 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f590:	83 c4 10             	add    esp,0x10
c001f593:	a8 01                	test   al,0x1
c001f595:	74 e2                	je     c001f579 <IDE::detect()+0x157>
c001f597:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f59c:	eb 23                	jmp    c001f5c1 <IDE::detect()+0x19f>
c001f59e:	a8 08                	test   al,0x8
c001f5a0:	74 db                	je     c001f57d <IDE::detect()+0x15b>
c001f5a2:	eb 18                	jmp    c001f5bc <IDE::detect()+0x19a>
c001f5a4:	50                   	push   eax
c001f5a5:	50                   	push   eax
c001f5a6:	6a 00                	push   0x0
c001f5a8:	6a 32                	push   0x32
c001f5aa:	e8 79 72 ff ff       	call   c0016828 <milliTenthSleep(unsigned long long)>
c001f5af:	83 c4 10             	add    esp,0x10
c001f5b2:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f5b8:	75 cc                	jne    c001f586 <IDE::detect()+0x164>
c001f5ba:	eb db                	jmp    c001f597 <IDE::detect()+0x175>
c001f5bc:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f5c1:	83 ec 0c             	sub    esp,0xc
c001f5c4:	68 6b 61 02 c0       	push   0xc002616b
c001f5c9:	e8 f7 db fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f5ce:	83 c4 10             	add    esp,0x10
c001f5d1:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f5d6:	74 56                	je     c001f62e <IDE::detect()+0x20c>
c001f5d8:	51                   	push   ecx
c001f5d9:	6a 04                	push   0x4
c001f5db:	56                   	push   esi
c001f5dc:	53                   	push   ebx
c001f5dd:	e8 7e f6 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f5e2:	83 c4 0c             	add    esp,0xc
c001f5e5:	6a 05                	push   0x5
c001f5e7:	56                   	push   esi
c001f5e8:	53                   	push   ebx
c001f5e9:	89 c5                	mov    ebp,eax
c001f5eb:	e8 70 f6 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f5f0:	89 e9                	mov    ecx,ebp
c001f5f2:	83 c4 10             	add    esp,0x10
c001f5f5:	0f b6 e9             	movzx  ebp,cl
c001f5f8:	83 fd 14             	cmp    ebp,0x14
c001f5fb:	75 04                	jne    c001f601 <IDE::detect()+0x1df>
c001f5fd:	3c eb                	cmp    al,0xeb
c001f5ff:	74 11                	je     c001f612 <IDE::detect()+0x1f0>
c001f601:	83 fd 69             	cmp    ebp,0x69
c001f604:	0f 85 52 02 00 00    	jne    c001f85c <IDE::detect()+0x43a>
c001f60a:	3c 96                	cmp    al,0x96
c001f60c:	0f 85 4a 02 00 00    	jne    c001f85c <IDE::detect()+0x43a>
c001f612:	68 a1 00 00 00       	push   0xa1
c001f617:	6a 07                	push   0x7
c001f619:	56                   	push   esi
c001f61a:	53                   	push   ebx
c001f61b:	e8 80 f5 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f620:	58                   	pop    eax
c001f621:	5a                   	pop    edx
c001f622:	6a 00                	push   0x0
c001f624:	6a 0a                	push   0xa
c001f626:	e8 fd 71 ff ff       	call   c0016828 <milliTenthSleep(unsigned long long)>
c001f62b:	83 c4 10             	add    esp,0x10
c001f62e:	83 ec 0c             	sub    esp,0xc
c001f631:	89 fd                	mov    ebp,edi
c001f633:	68 6e 61 02 c0       	push   0xc002616e
c001f638:	e8 88 db fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f63d:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f641:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f648:	c1 e5 06             	shl    ebp,0x6
c001f64b:	52                   	push   edx
c001f64c:	01 dd                	add    ebp,ebx
c001f64e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f652:	6a 00                	push   0x0
c001f654:	56                   	push   esi
c001f655:	53                   	push   ebx
c001f656:	e8 f7 fc ff ff       	call   c001f352 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f65b:	83 c4 14             	add    esp,0x14
c001f65e:	68 72 61 02 c0       	push   0xc0026172
c001f663:	e8 5d db fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f668:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f66d:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f674:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f67b:	89 f0                	mov    eax,esi
c001f67d:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f683:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f687:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f68d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f691:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f698:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f6a0:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f6a7:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f6af:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f6b5:	c7 04 24 76 61 02 c0 	mov    DWORD PTR [esp],0xc0026176
c001f6bc:	e8 04 db fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f6c1:	83 c4 10             	add    esp,0x10
c001f6c4:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f6cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f6cf:	74 09                	je     c001f6da <IDE::detect()+0x2b8>
c001f6d1:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f6d8:	eb 07                	jmp    c001f6e1 <IDE::detect()+0x2bf>
c001f6da:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f6e1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f6e5:	89 f8                	mov    eax,edi
c001f6e7:	83 ec 0c             	sub    esp,0xc
c001f6ea:	c1 e0 06             	shl    eax,0x6
c001f6ed:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f6f0:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f6f6:	68 7a 61 02 c0       	push   0xc002617a
c001f6fb:	e8 c5 da fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f700:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f704:	89 e8                	mov    eax,ebp
c001f706:	83 c4 10             	add    esp,0x10
c001f709:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f70c:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f70f:	83 c2 02             	add    edx,0x2
c001f712:	83 c0 02             	add    eax,0x2
c001f715:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f71b:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f71e:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f724:	39 d5                	cmp    ebp,edx
c001f726:	75 e4                	jne    c001f70c <IDE::detect()+0x2ea>
c001f728:	89 f8                	mov    eax,edi
c001f72a:	c1 e0 06             	shl    eax,0x6
c001f72d:	01 d8                	add    eax,ebx
c001f72f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f736:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f73d:	c1 ea 09             	shr    edx,0x9
c001f740:	83 e2 01             	and    edx,0x1
c001f743:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f74a:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f750:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f754:	74 0c                	je     c001f762 <IDE::detect()+0x340>
c001f756:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f75f:	0f 95 c2             	setne  dl
c001f762:	89 fd                	mov    ebp,edi
c001f764:	83 ec 0c             	sub    esp,0xc
c001f767:	c1 e5 06             	shl    ebp,0x6
c001f76a:	01 dd                	add    ebp,ebx
c001f76c:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f772:	68 7e 61 02 c0       	push   0xc002617e
c001f777:	e8 49 da fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f77c:	83 c4 10             	add    esp,0x10
c001f77f:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f784:	75 66                	jne    c001f7ec <IDE::detect()+0x3ca>
c001f786:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f78d:	0f 84 b8 00 00 00    	je     c001f84b <IDE::detect()+0x429>
c001f793:	83 ec 0c             	sub    esp,0xc
c001f796:	68 82 61 02 c0       	push   0xc0026182
c001f79b:	e8 25 da fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f7a0:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f7a7:	e8 bc fe fe ff       	call   c000f668 <malloc>
c001f7ac:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7af:	89 c5                	mov    ebp,eax
c001f7b1:	e8 44 05 00 00       	call   c001fcfa <ATA::ATA()>
c001f7b6:	c7 04 24 86 61 02 c0 	mov    DWORD PTR [esp],0xc0026186
c001f7bd:	e8 03 da fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f7c2:	59                   	pop    ecx
c001f7c3:	58                   	pop    eax
c001f7c4:	55                   	push   ebp
c001f7c5:	53                   	push   ebx
c001f7c6:	e8 2b a2 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f7cb:	c7 04 24 8b 61 02 c0 	mov    DWORD PTR [esp],0xc002618b
c001f7d2:	e8 ee d9 fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f7d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f7da:	53                   	push   ebx
c001f7db:	57                   	push   edi
c001f7dc:	6a 00                	push   0x0
c001f7de:	55                   	push   ebp
c001f7df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f7e2:	83 c4 14             	add    esp,0x14
c001f7e5:	68 90 61 02 c0       	push   0xc0026190
c001f7ea:	eb 57                	jmp    c001f843 <IDE::detect()+0x421>
c001f7ec:	83 ec 0c             	sub    esp,0xc
c001f7ef:	68 95 61 02 c0       	push   0xc0026195
c001f7f4:	e8 cc d9 fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f7f9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f800:	e8 63 fe fe ff       	call   c000f668 <malloc>
c001f805:	89 04 24             	mov    DWORD PTR [esp],eax
c001f808:	89 c5                	mov    ebp,eax
c001f80a:	e8 b1 0c 00 00       	call   c00204c0 <ATAPI::ATAPI()>
c001f80f:	c7 04 24 9b 61 02 c0 	mov    DWORD PTR [esp],0xc002619b
c001f816:	e8 aa d9 fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f81b:	58                   	pop    eax
c001f81c:	5a                   	pop    edx
c001f81d:	55                   	push   ebp
c001f81e:	53                   	push   ebx
c001f81f:	e8 d2 a1 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f824:	c7 04 24 a2 61 02 c0 	mov    DWORD PTR [esp],0xc00261a2
c001f82b:	e8 95 d9 fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f830:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f833:	53                   	push   ebx
c001f834:	57                   	push   edi
c001f835:	6a 00                	push   0x0
c001f837:	55                   	push   ebp
c001f838:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f83b:	83 c4 14             	add    esp,0x14
c001f83e:	68 a9 61 02 c0       	push   0xc00261a9
c001f843:	e8 7d d9 fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f848:	83 c4 10             	add    esp,0x10
c001f84b:	83 ec 0c             	sub    esp,0xc
c001f84e:	47                   	inc    edi
c001f84f:	68 b0 61 02 c0       	push   0xc00261b0
c001f854:	e8 6c d9 fe ff       	call   c000d1c5 <KeSetBootMessage(char const*)>
c001f859:	83 c4 10             	add    esp,0x10
c001f85c:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f860:	74 0c                	je     c001f86e <IDE::detect()+0x44c>
c001f862:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f869:	e9 19 fc ff ff       	jmp    c001f487 <IDE::detect()+0x65>
c001f86e:	4e                   	dec    esi
c001f86f:	74 0a                	je     c001f87b <IDE::detect()+0x459>
c001f871:	be 01 00 00 00       	mov    esi,0x1
c001f876:	e9 f5 fb ff ff       	jmp    c001f470 <IDE::detect()+0x4e>
c001f87b:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f881:	5b                   	pop    ebx
c001f882:	5e                   	pop    esi
c001f883:	5f                   	pop    edi
c001f884:	5d                   	pop    ebp
c001f885:	c3                   	ret    

c001f886 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f886:	55                   	push   ebp
c001f887:	57                   	push   edi
c001f888:	56                   	push   esi
c001f889:	53                   	push   ebx
c001f88a:	83 ec 1c             	sub    esp,0x1c
c001f88d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f891:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f895:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f899:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f89d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f8a1:	88 c3                	mov    bl,al
c001f8a3:	25 ff 00 00 00       	and    eax,0xff
c001f8a8:	0f 84 88 00 00 00    	je     c001f936 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f8ae:	83 ec 0c             	sub    esp,0xc
c001f8b1:	89 c7                	mov    edi,eax
c001f8b3:	68 b4 61 02 c0       	push   0xc00261b4
c001f8b8:	e8 a9 76 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f8bd:	83 c4 10             	add    esp,0x10
c001f8c0:	83 ff 01             	cmp    edi,0x1
c001f8c3:	74 6b                	je     c001f930 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f8c5:	83 ff 02             	cmp    edi,0x2
c001f8c8:	75 58                	jne    c001f922 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f8ca:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f8cf:	50                   	push   eax
c001f8d0:	6a 01                	push   0x1
c001f8d2:	01 ff                	add    edi,edi
c001f8d4:	09 fe                	or     esi,edi
c001f8d6:	89 f0                	mov    eax,esi
c001f8d8:	0f b6 f0             	movzx  esi,al
c001f8db:	c1 e6 06             	shl    esi,0x6
c001f8de:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f8e6:	50                   	push   eax
c001f8e7:	55                   	push   ebp
c001f8e8:	e8 73 f3 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f8ed:	83 c4 10             	add    esp,0x10
c001f8f0:	a8 01                	test   al,0x1
c001f8f2:	74 02                	je     c001f8f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f8f4:	b3 07                	mov    bl,0x7
c001f8f6:	a8 02                	test   al,0x2
c001f8f8:	74 02                	je     c001f8fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f8fa:	b3 03                	mov    bl,0x3
c001f8fc:	a8 04                	test   al,0x4
c001f8fe:	74 02                	je     c001f902 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f900:	b3 14                	mov    bl,0x14
c001f902:	a8 08                	test   al,0x8
c001f904:	74 02                	je     c001f908 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f906:	b3 03                	mov    bl,0x3
c001f908:	a8 10                	test   al,0x10
c001f90a:	74 02                	je     c001f90e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f90c:	b3 15                	mov    bl,0x15
c001f90e:	a8 20                	test   al,0x20
c001f910:	74 02                	je     c001f914 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f912:	b3 03                	mov    bl,0x3
c001f914:	a8 40                	test   al,0x40
c001f916:	74 02                	je     c001f91a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f918:	b3 16                	mov    bl,0x16
c001f91a:	a8 80                	test   al,0x80
c001f91c:	74 18                	je     c001f936 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f91e:	b3 0d                	mov    bl,0xd
c001f920:	eb 14                	jmp    c001f936 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f922:	83 ff 03             	cmp    edi,0x3
c001f925:	74 0d                	je     c001f934 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f927:	83 ff 04             	cmp    edi,0x4
c001f92a:	75 0a                	jne    c001f936 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f92c:	b3 08                	mov    bl,0x8
c001f92e:	eb 06                	jmp    c001f936 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f930:	b3 13                	mov    bl,0x13
c001f932:	eb 02                	jmp    c001f936 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f934:	b3 17                	mov    bl,0x17
c001f936:	83 c4 1c             	add    esp,0x1c
c001f939:	88 d8                	mov    al,bl
c001f93b:	5b                   	pop    ebx
c001f93c:	5e                   	pop    esi
c001f93d:	5f                   	pop    edi
c001f93e:	5d                   	pop    ebp
c001f93f:	c3                   	ret    

c001f940 <IDE::polling(unsigned char, unsigned int)>:
c001f940:	57                   	push   edi
c001f941:	56                   	push   esi
c001f942:	53                   	push   ebx
c001f943:	bb 04 00 00 00       	mov    ebx,0x4
c001f948:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f94c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f951:	52                   	push   edx
c001f952:	6a 0c                	push   0xc
c001f954:	56                   	push   esi
c001f955:	57                   	push   edi
c001f956:	e8 05 f3 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f95b:	83 c4 10             	add    esp,0x10
c001f95e:	4b                   	dec    ebx
c001f95f:	75 f0                	jne    c001f951 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f961:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f966:	50                   	push   eax
c001f967:	6a 0c                	push   0xc
c001f969:	56                   	push   esi
c001f96a:	57                   	push   edi
c001f96b:	e8 f0 f2 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001f970:	83 c4 10             	add    esp,0x10
c001f973:	a8 01                	test   al,0x1
c001f975:	75 17                	jne    c001f98e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f977:	a8 20                	test   al,0x20
c001f979:	75 0f                	jne    c001f98a <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f97b:	4b                   	dec    ebx
c001f97c:	74 10                	je     c001f98e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f97e:	a8 80                	test   al,0x80
c001f980:	75 e4                	jne    c001f966 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f982:	a8 08                	test   al,0x8
c001f984:	74 e0                	je     c001f966 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f986:	31 c0                	xor    eax,eax
c001f988:	eb 06                	jmp    c001f990 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f98a:	b0 01                	mov    al,0x1
c001f98c:	eb 02                	jmp    c001f990 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f98e:	b0 02                	mov    al,0x2
c001f990:	5b                   	pop    ebx
c001f991:	5e                   	pop    esi
c001f992:	5f                   	pop    edi
c001f993:	c3                   	ret    

c001f994 <SATABus::close(int, int, void*)>:
c001f994:	31 c0                	xor    eax,eax
c001f996:	c3                   	ret    
c001f997:	90                   	nop

c001f998 <SATABus::detect()>:
c001f998:	c3                   	ret    
c001f999:	90                   	nop

c001f99a <SATABus::SATABus()>:
c001f99a:	83 ec 0c             	sub    esp,0xc
c001f99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a1:	83 ec 08             	sub    esp,0x8
c001f9a4:	68 ec 61 02 c0       	push   0xc00261ec
c001f9a9:	50                   	push   eax
c001f9aa:	e8 a1 a3 fe ff       	call   c0009d50 <HardDiskController::HardDiskController(char const*)>
c001f9af:	83 c4 10             	add    esp,0x10
c001f9b2:	ba 18 62 02 c0       	mov    edx,0xc0026218
c001f9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9bb:	89 10                	mov    DWORD PTR [eax],edx
c001f9bd:	83 ec 0c             	sub    esp,0xc
c001f9c0:	6a 50                	push   0x50
c001f9c2:	e8 d6 03 ff ff       	call   c000fd9d <Phys::allocateContiguousPages(int)>
c001f9c7:	83 c4 10             	add    esp,0x10
c001f9ca:	89 c2                	mov    edx,eax
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f9d6:	83 ec 0c             	sub    esp,0xc
c001f9d9:	6a 50                	push   0x50
c001f9db:	e8 23 36 ff ff       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c001f9e0:	83 c4 10             	add    esp,0x10
c001f9e3:	89 c2                	mov    edx,eax
c001f9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f9ef:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c001f9f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9f8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f9fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa02:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001fa08:	83 ec 0c             	sub    esp,0xc
c001fa0b:	6a 03                	push   0x3
c001fa0d:	6a 50                	push   0x50
c001fa0f:	51                   	push   ecx
c001fa10:	52                   	push   edx
c001fa11:	50                   	push   eax
c001fa12:	e8 bf 3e ff ff       	call   c00138d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001fa17:	83 c4 20             	add    esp,0x20
c001fa1a:	90                   	nop
c001fa1b:	83 c4 0c             	add    esp,0xc
c001fa1e:	c3                   	ret    
c001fa1f:	90                   	nop

c001fa20 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001fa20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa24:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001fa27:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001fa2a:	09 c2                	or     edx,eax
c001fa2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001fa36:	8b 08                	mov    ecx,DWORD PTR [eax]
c001fa38:	31 c0                	xor    eax,eax
c001fa3a:	c1 e9 08             	shr    ecx,0x8
c001fa3d:	83 e1 0f             	and    ecx,0xf
c001fa40:	39 c8                	cmp    eax,ecx
c001fa42:	74 0a                	je     c001fa4e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001fa44:	f6 c2 01             	test   dl,0x1
c001fa47:	74 08                	je     c001fa51 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001fa49:	d1 ea                	shr    edx,1
c001fa4b:	40                   	inc    eax
c001fa4c:	eb f2                	jmp    c001fa40 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001fa4e:	83 c8 ff             	or     eax,0xffffffff
c001fa51:	c3                   	ret    

c001fa52 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001fa52:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa56:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001fa59:	89 c2                	mov    edx,eax
c001fa5b:	c1 ea 08             	shr    edx,0x8
c001fa5e:	83 e2 0f             	and    edx,0xf
c001fa61:	4a                   	dec    edx
c001fa62:	75 32                	jne    c001fa96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001fa64:	83 e0 0f             	and    eax,0xf
c001fa67:	83 f8 03             	cmp    eax,0x3
c001fa6a:	75 2a                	jne    c001fa96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001fa6c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001fa6f:	b8 02 00 00 00       	mov    eax,0x2
c001fa74:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001fa7a:	74 1c                	je     c001fa98 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001fa7c:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001fa82:	b8 04 00 00 00       	mov    eax,0x4
c001fa87:	74 0f                	je     c001fa98 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001fa89:	31 c0                	xor    eax,eax
c001fa8b:	83 fa 03             	cmp    edx,0x3
c001fa8e:	0f 94 c0             	sete   al
c001fa91:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001fa95:	c3                   	ret    
c001fa96:	31 c0                	xor    eax,eax
c001fa98:	c3                   	ret    
c001fa99:	90                   	nop

c001fa9a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001fa9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa9e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001faa1:	0f ba e2 0f          	bt     edx,0xf
c001faa5:	72 f7                	jb     c001fa9e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001faa7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001faaa:	83 ca 10             	or     edx,0x10
c001faad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fab0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fab3:	83 ca 01             	or     edx,0x1
c001fab6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fab9:	c3                   	ret    

c001faba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001faba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fabe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fac1:	83 e2 fe             	and    edx,0xfffffffe
c001fac4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fac7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001faca:	83 e2 ef             	and    edx,0xffffffef
c001facd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fad0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fad3:	0f ba e2 0e          	bt     edx,0xe
c001fad7:	72 f7                	jb     c001fad0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fad9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fadc:	0f ba e2 0f          	bt     edx,0xf
c001fae0:	72 ee                	jb     c001fad0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fae2:	c3                   	ret    
c001fae3:	90                   	nop

c001fae4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001fae4:	55                   	push   ebp
c001fae5:	57                   	push   edi
c001fae6:	56                   	push   esi
c001fae7:	53                   	push   ebx
c001fae8:	83 ec 1c             	sub    esp,0x1c
c001faeb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001faef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001faf3:	53                   	push   ebx
c001faf4:	57                   	push   edi
c001faf5:	e8 c0 ff ff ff       	call   c001faba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001fafa:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001fafe:	83 ec 0c             	sub    esp,0xc
c001fb01:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001fb07:	c1 e5 0a             	shl    ebp,0xa
c001fb0a:	01 e8                	add    eax,ebp
c001fb0c:	89 03                	mov    DWORD PTR [ebx],eax
c001fb0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fb10:	68 00 04 00 00       	push   0x400
c001fb15:	6a 00                	push   0x0
c001fb17:	50                   	push   eax
c001fb18:	e8 d3 09 fe ff       	call   c00004f0 <memset>
c001fb1d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001fb23:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001fb27:	83 c4 1c             	add    esp,0x1c
c001fb2a:	01 e8                	add    eax,ebp
c001fb2c:	89 03                	mov    DWORD PTR [ebx],eax
c001fb2e:	c1 e6 08             	shl    esi,0x8
c001fb31:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fb38:	81 c6 00 80 00 00    	add    esi,0x8000
c001fb3e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001fb44:	01 f0                	add    eax,esi
c001fb46:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fb49:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001fb4c:	68 00 01 00 00       	push   0x100
c001fb51:	6a 00                	push   0x0
c001fb53:	50                   	push   eax
c001fb54:	e8 97 09 fe ff       	call   c00004f0 <memset>
c001fb59:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001fb5f:	31 d2                	xor    edx,edx
c001fb61:	01 f0                	add    eax,esi
c001fb63:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fb66:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fb6d:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001fb73:	01 ee                	add    esi,ebp
c001fb75:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001fb79:	83 c4 10             	add    esp,0x10
c001fb7c:	c1 e5 0d             	shl    ebp,0xd
c001fb7f:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001fb85:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001fb8b:	83 c6 20             	add    esi,0x20
c001fb8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fb92:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001fb98:	01 e8                	add    eax,ebp
c001fb9a:	01 d0                	add    eax,edx
c001fb9c:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001fb9f:	52                   	push   edx
c001fba0:	68 00 01 00 00       	push   0x100
c001fba5:	6a 00                	push   0x0
c001fba7:	50                   	push   eax
c001fba8:	e8 43 09 fe ff       	call   c00004f0 <memset>
c001fbad:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001fbb3:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001fbba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fbbe:	83 c4 10             	add    esp,0x10
c001fbc1:	01 e8                	add    eax,ebp
c001fbc3:	01 d0                	add    eax,edx
c001fbc5:	81 c2 00 01 00 00    	add    edx,0x100
c001fbcb:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001fbce:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001fbd4:	75 af                	jne    c001fb85 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001fbd6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001fbdd:	50                   	push   eax
c001fbde:	50                   	push   eax
c001fbdf:	53                   	push   ebx
c001fbe0:	57                   	push   edi
c001fbe1:	e8 b4 fe ff ff       	call   c001fa9a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001fbe6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001fbed:	83 c4 2c             	add    esp,0x2c
c001fbf0:	5b                   	pop    ebx
c001fbf1:	5e                   	pop    esi
c001fbf2:	5f                   	pop    edi
c001fbf3:	5d                   	pop    ebp
c001fbf4:	c3                   	ret    
c001fbf5:	90                   	nop

c001fbf6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001fbf6:	55                   	push   ebp
c001fbf7:	57                   	push   edi
c001fbf8:	56                   	push   esi
c001fbf9:	53                   	push   ebx
c001fbfa:	31 db                	xor    ebx,ebx
c001fbfc:	83 ec 0c             	sub    esp,0xc
c001fbff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fc03:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fc07:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001fc0a:	f7 c7 01 00 00 00    	test   edi,0x1
c001fc10:	74 7a                	je     c001fc8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fc12:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001fc16:	89 d8                	mov    eax,ebx
c001fc18:	c1 e0 07             	shl    eax,0x7
c001fc1b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001fc22:	55                   	push   ebp
c001fc23:	56                   	push   esi
c001fc24:	e8 29 fe ff ff       	call   c001fa52 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001fc29:	5a                   	pop    edx
c001fc2a:	59                   	pop    ecx
c001fc2b:	83 f8 01             	cmp    eax,0x1
c001fc2e:	75 21                	jne    c001fc51 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001fc30:	50                   	push   eax
c001fc31:	53                   	push   ebx
c001fc32:	55                   	push   ebp
c001fc33:	56                   	push   esi
c001fc34:	e8 ab fe ff ff       	call   c001fae4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fc39:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001fc40:	e8 23 fa fe ff       	call   c000f668 <malloc>
c001fc45:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc48:	89 c5                	mov    ebp,eax
c001fc4a:	e8 37 0f 00 00       	call   c0020b86 <SATA::SATA()>
c001fc4f:	eb 24                	jmp    c001fc75 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001fc51:	83 f8 04             	cmp    eax,0x4
c001fc54:	75 36                	jne    c001fc8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fc56:	51                   	push   ecx
c001fc57:	53                   	push   ebx
c001fc58:	55                   	push   ebp
c001fc59:	56                   	push   esi
c001fc5a:	e8 85 fe ff ff       	call   c001fae4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fc5f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fc66:	e8 fd f9 fe ff       	call   c000f668 <malloc>
c001fc6b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc6e:	89 c5                	mov    ebp,eax
c001fc70:	e8 a7 12 00 00       	call   c0020f1c <SATAPI::SATAPI()>
c001fc75:	58                   	pop    eax
c001fc76:	5a                   	pop    edx
c001fc77:	55                   	push   ebp
c001fc78:	56                   	push   esi
c001fc79:	e8 78 9d fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001fc7e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fc81:	56                   	push   esi
c001fc82:	6a 00                	push   0x0
c001fc84:	53                   	push   ebx
c001fc85:	55                   	push   ebp
c001fc86:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001fc89:	83 c4 20             	add    esp,0x20
c001fc8c:	d1 ef                	shr    edi,1
c001fc8e:	43                   	inc    ebx
c001fc8f:	83 fb 20             	cmp    ebx,0x20
c001fc92:	0f 85 72 ff ff ff    	jne    c001fc0a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001fc98:	83 c4 0c             	add    esp,0xc
c001fc9b:	5b                   	pop    ebx
c001fc9c:	5e                   	pop    esi
c001fc9d:	5f                   	pop    edi
c001fc9e:	5d                   	pop    ebp
c001fc9f:	c3                   	ret    

c001fca0 <SATABus::open(int, int, void*)>:
c001fca0:	53                   	push   ebx
c001fca1:	83 ec 08             	sub    esp,0x8
c001fca4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fca8:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001fcae:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fcb4:	e8 7f 66 ff ff       	call   c0016338 <KeDisablePreemption()>
c001fcb9:	52                   	push   edx
c001fcba:	52                   	push   edx
c001fcbb:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001fcc1:	53                   	push   ebx
c001fcc2:	e8 2f ff ff ff       	call   c001fbf6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fcc7:	e8 94 66 ff ff       	call   c0016360 <KeRestorePreemption()>
c001fccc:	83 c4 18             	add    esp,0x18
c001fccf:	31 c0                	xor    eax,eax
c001fcd1:	5b                   	pop    ebx
c001fcd2:	c3                   	ret    
c001fcd3:	90                   	nop

c001fcd4 <ATA::close(int, int, void*)>:
c001fcd4:	83 ec 0c             	sub    esp,0xc
c001fcd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcdb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fce1:	85 c0                	test   eax,eax
c001fce3:	74 0c                	je     c001fcf1 <ATA::close(int, int, void*)+0x1d>
c001fce5:	8b 10                	mov    edx,DWORD PTR [eax]
c001fce7:	83 ec 0c             	sub    esp,0xc
c001fcea:	50                   	push   eax
c001fceb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fcee:	83 c4 10             	add    esp,0x10
c001fcf1:	31 c0                	xor    eax,eax
c001fcf3:	83 c4 0c             	add    esp,0xc
c001fcf6:	c3                   	ret    
c001fcf7:	90                   	nop

c001fcf8 <ATA::powerSaving(PowerSavingLevel)>:
c001fcf8:	c3                   	ret    
c001fcf9:	90                   	nop

c001fcfa <ATA::ATA()>:
c001fcfa:	83 ec 0c             	sub    esp,0xc
c001fcfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd01:	83 ec 04             	sub    esp,0x4
c001fd04:	68 00 02 00 00       	push   0x200
c001fd09:	68 99 63 02 c0       	push   0xc0026399
c001fd0e:	50                   	push   eax
c001fd0f:	e8 c6 a0 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fd14:	83 c4 10             	add    esp,0x10
c001fd17:	ba 00 63 02 c0       	mov    edx,0xc0026300
c001fd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd20:	89 10                	mov    DWORD PTR [eax],edx
c001fd22:	90                   	nop
c001fd23:	83 c4 0c             	add    esp,0xc
c001fd26:	c3                   	ret    
c001fd27:	90                   	nop

c001fd28 <ATA::flush(bool)>:
c001fd28:	53                   	push   ebx
c001fd29:	83 ec 08             	sub    esp,0x8
c001fd2c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001fd31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fd35:	83 f8 01             	cmp    eax,0x1
c001fd38:	19 c0                	sbb    eax,eax
c001fd3a:	83 e0 fd             	and    eax,0xfffffffd
c001fd3d:	05 ea 00 00 00       	add    eax,0xea
c001fd42:	50                   	push   eax
c001fd43:	6a 07                	push   0x7
c001fd45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd4c:	50                   	push   eax
c001fd4d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd53:	e8 48 ee ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd58:	83 c4 0c             	add    esp,0xc
c001fd5b:	6a 00                	push   0x0
c001fd5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd64:	50                   	push   eax
c001fd65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd6b:	e8 d0 fb ff ff       	call   c001f940 <IDE::polling(unsigned char, unsigned int)>
c001fd70:	83 c4 18             	add    esp,0x18
c001fd73:	5b                   	pop    ebx
c001fd74:	c3                   	ret    
c001fd75:	90                   	nop

c001fd76 <ATA::readyForCommand()>:
c001fd76:	56                   	push   esi
c001fd77:	53                   	push   ebx
c001fd78:	31 db                	xor    ebx,ebx
c001fd7a:	50                   	push   eax
c001fd7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd7f:	50                   	push   eax
c001fd80:	6a 0c                	push   0xc
c001fd82:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fd89:	50                   	push   eax
c001fd8a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fd90:	e8 cb ee ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c001fd95:	83 c4 10             	add    esp,0x10
c001fd98:	a8 88                	test   al,0x88
c001fd9a:	74 20                	je     c001fdbc <ATA::readyForCommand()+0x46>
c001fd9c:	43                   	inc    ebx
c001fd9d:	83 fb 63             	cmp    ebx,0x63
c001fda0:	7e dd                	jle    c001fd7f <ATA::readyForCommand()+0x9>
c001fda2:	51                   	push   ecx
c001fda3:	51                   	push   ecx
c001fda4:	6a 00                	push   0x0
c001fda6:	6a 0a                	push   0xa
c001fda8:	e8 7b 6a ff ff       	call   c0016828 <milliTenthSleep(unsigned long long)>
c001fdad:	83 c4 10             	add    esp,0x10
c001fdb0:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fdb6:	75 c7                	jne    c001fd7f <ATA::readyForCommand()+0x9>
c001fdb8:	31 c0                	xor    eax,eax
c001fdba:	eb 02                	jmp    c001fdbe <ATA::readyForCommand()+0x48>
c001fdbc:	b0 01                	mov    al,0x1
c001fdbe:	5a                   	pop    edx
c001fdbf:	5b                   	pop    ebx
c001fdc0:	5e                   	pop    esi
c001fdc1:	c3                   	ret    

c001fdc2 <ATA::access(unsigned long long, int, void*, bool)>:
c001fdc2:	55                   	push   ebp
c001fdc3:	57                   	push   edi
c001fdc4:	56                   	push   esi
c001fdc5:	53                   	push   ebx
c001fdc6:	83 ec 2c             	sub    esp,0x2c
c001fdc9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fdcd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001fdd1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fdd5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001fdd9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fddd:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001fde1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001fde5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fdeb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fdef:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fdf5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fdf9:	c1 e0 06             	shl    eax,0x6
c001fdfc:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fe04:	74 5b                	je     c001fe61 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001fe06:	89 fa                	mov    edx,edi
c001fe08:	89 f0                	mov    eax,esi
c001fe0a:	c1 ea 1c             	shr    edx,0x1c
c001fe0d:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001fe11:	89 d1                	mov    ecx,edx
c001fe13:	09 c1                	or     ecx,eax
c001fe15:	74 25                	je     c001fe3c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001fe17:	31 ed                	xor    ebp,ebp
c001fe19:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fe20:	89 fa                	mov    edx,edi
c001fe22:	89 f0                	mov    eax,esi
c001fe24:	0f ad d0             	shrd   eax,edx,cl
c001fe27:	d3 ea                	shr    edx,cl
c001fe29:	f6 c1 20             	test   cl,0x20
c001fe2c:	74 02                	je     c001fe30 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001fe2e:	89 d0                	mov    eax,edx
c001fe30:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fe34:	45                   	inc    ebp
c001fe35:	83 fd 06             	cmp    ebp,0x6
c001fe38:	75 df                	jne    c001fe19 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001fe3a:	eb 71                	jmp    c001fead <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001fe3c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fe41:	89 f0                	mov    eax,esi
c001fe43:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fe4a:	0f ac f8 10          	shrd   eax,edi,0x10
c001fe4e:	bf 01 00 00 00       	mov    edi,0x1
c001fe53:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fe57:	c1 ee 18             	shr    esi,0x18
c001fe5a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fe5f:	eb 53                	jmp    c001feb4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001fe61:	6a 00                	push   0x0
c001fe63:	6a 3f                	push   0x3f
c001fe65:	57                   	push   edi
c001fe66:	56                   	push   esi
c001fe67:	e8 c8 20 00 00       	call   c0021f34 <__umoddi3>
c001fe6c:	83 c4 10             	add    esp,0x10
c001fe6f:	40                   	inc    eax
c001fe70:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fe74:	6a 00                	push   0x0
c001fe76:	68 f0 03 00 00       	push   0x3f0
c001fe7b:	57                   	push   edi
c001fe7c:	56                   	push   esi
c001fe7d:	e8 b2 1f 00 00       	call   c0021e34 <__udivdi3>
c001fe82:	83 c4 10             	add    esp,0x10
c001fe85:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fe8a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fe91:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fe96:	6a 00                	push   0x0
c001fe98:	6a 3f                	push   0x3f
c001fe9a:	57                   	push   edi
c001fe9b:	31 ff                	xor    edi,edi
c001fe9d:	56                   	push   esi
c001fe9e:	e8 91 1f 00 00       	call   c0021e34 <__udivdi3>
c001fea3:	83 c4 10             	add    esp,0x10
c001fea6:	83 e0 0f             	and    eax,0xf
c001fea9:	89 c6                	mov    esi,eax
c001feab:	eb 07                	jmp    c001feb4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001fead:	31 f6                	xor    esi,esi
c001feaf:	bf 02 00 00 00       	mov    edi,0x2
c001feb4:	55                   	push   ebp
c001feb5:	6a 00                	push   0x0
c001feb7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001febe:	50                   	push   eax
c001febf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fec3:	e8 e8 ee ff ff       	call   c001edb0 <IDE::enableIRQs(unsigned char, bool)>
c001fec8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fecb:	e8 a6 fe ff ff       	call   c001fd76 <ATA::readyForCommand()>
c001fed0:	83 c4 10             	add    esp,0x10
c001fed3:	84 c0                	test   al,al
c001fed5:	75 0a                	jne    c001fee1 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001fed7:	be 01 00 00 00       	mov    esi,0x1
c001fedc:	e9 df 02 00 00       	jmp    c00201c0 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001fee1:	fa                   	cli    
c001fee2:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c001fee8:	f7 c7 03 00 00 00    	test   edi,0x3
c001feee:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001fef4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fefa:	75 0a                	jne    c001ff06 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001fefc:	c1 e0 04             	shl    eax,0x4
c001feff:	09 c6                	or     esi,eax
c001ff01:	83 ce a0             	or     esi,0xffffffa0
c001ff04:	eb 08                	jmp    c001ff0e <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001ff06:	c1 e0 04             	shl    eax,0x4
c001ff09:	09 c6                	or     esi,eax
c001ff0b:	83 ce e0             	or     esi,0xffffffe0
c001ff0e:	89 f0                	mov    eax,esi
c001ff10:	0f b6 d2             	movzx  edx,dl
c001ff13:	0f b6 f0             	movzx  esi,al
c001ff16:	56                   	push   esi
c001ff17:	6a 06                	push   0x6
c001ff19:	52                   	push   edx
c001ff1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff20:	e8 7b ec ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff25:	83 c4 10             	add    esp,0x10
c001ff28:	6a 00                	push   0x0
c001ff2a:	6a 01                	push   0x1
c001ff2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff33:	50                   	push   eax
c001ff34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff3a:	e8 61 ec ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff3f:	89 f8                	mov    eax,edi
c001ff41:	83 c4 10             	add    esp,0x10
c001ff44:	0f b6 f0             	movzx  esi,al
c001ff47:	83 fe 02             	cmp    esi,0x2
c001ff4a:	75 6e                	jne    c001ffba <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001ff4c:	6a 00                	push   0x0
c001ff4e:	6a 08                	push   0x8
c001ff50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff57:	50                   	push   eax
c001ff58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff5e:	e8 3d ec ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff63:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ff68:	50                   	push   eax
c001ff69:	6a 09                	push   0x9
c001ff6b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff72:	50                   	push   eax
c001ff73:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff79:	e8 22 ec ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff7e:	83 c4 20             	add    esp,0x20
c001ff81:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ff86:	50                   	push   eax
c001ff87:	6a 0a                	push   0xa
c001ff89:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff90:	50                   	push   eax
c001ff91:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff97:	e8 04 ec ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff9c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ffa1:	50                   	push   eax
c001ffa2:	6a 0b                	push   0xb
c001ffa4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffab:	50                   	push   eax
c001ffac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffb2:	e8 e9 eb ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffb7:	83 c4 20             	add    esp,0x20
c001ffba:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ffbf:	50                   	push   eax
c001ffc0:	6a 02                	push   0x2
c001ffc2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffc9:	50                   	push   eax
c001ffca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffd0:	e8 cb eb ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffd5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ffda:	50                   	push   eax
c001ffdb:	6a 03                	push   0x3
c001ffdd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffe4:	50                   	push   eax
c001ffe5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffeb:	e8 b0 eb ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fff0:	83 c4 20             	add    esp,0x20
c001fff3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fff8:	50                   	push   eax
c001fff9:	6a 04                	push   0x4
c001fffb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020002:	50                   	push   eax
c0020003:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020009:	e8 92 eb ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002000e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020013:	50                   	push   eax
c0020014:	6a 05                	push   0x5
c0020016:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002001d:	50                   	push   eax
c002001e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020024:	e8 77 eb ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020029:	83 c4 20             	add    esp,0x20
c002002c:	83 fe 02             	cmp    esi,0x2
c002002f:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c0020034:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0020039:	85 c9                	test   ecx,ecx
c002003b:	74 07                	je     c0020044 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c002003d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020042:	75 45                	jne    c0020089 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c0020044:	89 f8                	mov    eax,edi
c0020046:	0f b6 f8             	movzx  edi,al
c0020049:	31 c0                	xor    eax,eax
c002004b:	4f                   	dec    edi
c002004c:	0f 94 c0             	sete   al
c002004f:	89 c6                	mov    esi,eax
c0020051:	75 0c                	jne    c002005f <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c0020053:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020058:	b8 30 00 00 00       	mov    eax,0x30
c002005d:	75 2f                	jne    c002008e <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c002005f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020063:	83 f2 01             	xor    edx,0x1
c0020066:	85 c9                	test   ecx,ecx
c0020068:	74 09                	je     c0020073 <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c002006a:	84 d2                	test   dl,dl
c002006c:	b8 24 00 00 00       	mov    eax,0x24
c0020071:	75 1b                	jne    c002008e <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c0020073:	85 f6                	test   esi,esi
c0020075:	0f 84 5c fe ff ff    	je     c001fed7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002007b:	84 d2                	test   dl,dl
c002007d:	b8 20 00 00 00       	mov    eax,0x20
c0020082:	75 0a                	jne    c002008e <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c0020084:	e9 4e fe ff ff       	jmp    c001fed7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c0020089:	b8 34 00 00 00       	mov    eax,0x34
c002008e:	50                   	push   eax
c002008f:	6a 07                	push   0x7
c0020091:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020098:	50                   	push   eax
c0020099:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002009f:	e8 fc ea ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200a4:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c00200ab:	83 c4 10             	add    esp,0x10
c00200ae:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c00200b5:	75 01                	jne    c00200b8 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c00200b7:	fb                   	sti    
c00200b8:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00200bc:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c00200c1:	85 f6                	test   esi,esi
c00200c3:	0f 84 dd 00 00 00    	je     c00201a6 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c00200c9:	57                   	push   edi
c00200ca:	6a 01                	push   0x1
c00200cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200d3:	50                   	push   eax
c00200d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200da:	e8 61 f8 ff ff       	call   c001f940 <IDE::polling(unsigned char, unsigned int)>
c00200df:	83 c4 10             	add    esp,0x10
c00200e2:	0f b6 c0             	movzx  eax,al
c00200e5:	85 c0                	test   eax,eax
c00200e7:	74 23                	je     c002010c <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c00200e9:	50                   	push   eax
c00200ea:	89 c6                	mov    esi,eax
c00200ec:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00200f3:	50                   	push   eax
c00200f4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200fb:	50                   	push   eax
c00200fc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020102:	e8 7f f7 ff ff       	call   c001f886 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020107:	e9 b1 00 00 00       	jmp    c00201bd <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c002010c:	85 ed                	test   ebp,ebp
c002010e:	74 49                	je     c0020159 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c0020110:	fa                   	cli    
c0020111:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c0020117:	31 ff                	xor    edi,edi
c0020119:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002011d:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c0020121:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0020126:	51                   	push   ecx
c0020127:	51                   	push   ecx
c0020128:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002012f:	50                   	push   eax
c0020130:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020136:	e8 53 ea ff ff       	call   c001eb8e <IDE::getBase(unsigned char)>
c002013b:	89 c2                	mov    edx,eax
c002013d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020142:	66 ef                	out    dx,ax
c0020144:	47                   	inc    edi
c0020145:	83 c4 10             	add    esp,0x10
c0020148:	81 ff 00 01 00 00    	cmp    edi,0x100
c002014e:	75 c9                	jne    c0020119 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c0020150:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c0020157:	eb 35                	jmp    c002018e <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c0020159:	fa                   	cli    
c002015a:	52                   	push   edx
c002015b:	52                   	push   edx
c002015c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020163:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c0020169:	50                   	push   eax
c002016a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020170:	e8 19 ea ff ff       	call   c001eb8e <IDE::getBase(unsigned char)>
c0020175:	b9 00 01 00 00       	mov    ecx,0x100
c002017a:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002017e:	89 c2                	mov    edx,eax
c0020180:	fc                   	cld    
c0020181:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0020184:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c002018b:	83 c4 10             	add    esp,0x10
c002018e:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c0020195:	75 01                	jne    c0020198 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c0020197:	fb                   	sti    
c0020198:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00201a0:	4e                   	dec    esi
c00201a1:	e9 1b ff ff ff       	jmp    c00200c1 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c00201a6:	31 f6                	xor    esi,esi
c00201a8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00201ad:	74 11                	je     c00201c0 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c00201af:	50                   	push   eax
c00201b0:	50                   	push   eax
c00201b1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00201b6:	50                   	push   eax
c00201b7:	53                   	push   ebx
c00201b8:	e8 6b fb ff ff       	call   c001fd28 <ATA::flush(bool)>
c00201bd:	83 c4 10             	add    esp,0x10
c00201c0:	83 c4 2c             	add    esp,0x2c
c00201c3:	89 f0                	mov    eax,esi
c00201c5:	5b                   	pop    ebx
c00201c6:	5e                   	pop    esi
c00201c7:	5f                   	pop    edi
c00201c8:	5d                   	pop    ebp
c00201c9:	c3                   	ret    

c00201ca <ATA::read(unsigned long long, int, void*)>:
c00201ca:	57                   	push   edi
c00201cb:	b8 04 00 00 00       	mov    eax,0x4
c00201d0:	56                   	push   esi
c00201d1:	53                   	push   ebx
c00201d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00201d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00201da:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00201de:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00201e2:	8d 7a ff             	lea    edi,[edx-0x1]
c00201e5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00201eb:	77 25                	ja     c0020212 <ATA::read(unsigned long long, int, void*)+0x48>
c00201ed:	85 f6                	test   esi,esi
c00201ef:	b8 06 00 00 00       	mov    eax,0x6
c00201f4:	74 1c                	je     c0020212 <ATA::read(unsigned long long, int, void*)+0x48>
c00201f6:	50                   	push   eax
c00201f7:	50                   	push   eax
c00201f8:	6a 00                	push   0x0
c00201fa:	56                   	push   esi
c00201fb:	52                   	push   edx
c00201fc:	53                   	push   ebx
c00201fd:	51                   	push   ecx
c00201fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020202:	e8 bb fb ff ff       	call   c001fdc2 <ATA::access(unsigned long long, int, void*, bool)>
c0020207:	83 c4 20             	add    esp,0x20
c002020a:	85 c0                	test   eax,eax
c002020c:	0f 95 c0             	setne  al
c002020f:	0f b6 c0             	movzx  eax,al
c0020212:	5b                   	pop    ebx
c0020213:	5e                   	pop    esi
c0020214:	5f                   	pop    edi
c0020215:	c3                   	ret    

c0020216 <ATA::write(unsigned long long, int, void*)>:
c0020216:	57                   	push   edi
c0020217:	b8 04 00 00 00       	mov    eax,0x4
c002021c:	56                   	push   esi
c002021d:	53                   	push   ebx
c002021e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020222:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020226:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002022a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002022e:	8d 7a ff             	lea    edi,[edx-0x1]
c0020231:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020237:	77 25                	ja     c002025e <ATA::write(unsigned long long, int, void*)+0x48>
c0020239:	85 f6                	test   esi,esi
c002023b:	b8 06 00 00 00       	mov    eax,0x6
c0020240:	74 1c                	je     c002025e <ATA::write(unsigned long long, int, void*)+0x48>
c0020242:	50                   	push   eax
c0020243:	50                   	push   eax
c0020244:	6a 01                	push   0x1
c0020246:	56                   	push   esi
c0020247:	52                   	push   edx
c0020248:	53                   	push   ebx
c0020249:	51                   	push   ecx
c002024a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002024e:	e8 6f fb ff ff       	call   c001fdc2 <ATA::access(unsigned long long, int, void*, bool)>
c0020253:	83 c4 20             	add    esp,0x20
c0020256:	85 c0                	test   eax,eax
c0020258:	0f 95 c0             	setne  al
c002025b:	0f b6 c0             	movzx  eax,al
c002025e:	5b                   	pop    ebx
c002025f:	5e                   	pop    esi
c0020260:	5f                   	pop    edi
c0020261:	c3                   	ret    

c0020262 <ATA::detectCHS()>:
c0020262:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020266:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002026c:	c1 e0 06             	shl    eax,0x6
c002026f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0020275:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002027f:	c7 44 24 04 3c 62 02 c0 	mov    DWORD PTR [esp+0x4],0xc002623c
c0020287:	e9 30 f8 fe ff       	jmp    c000fabc <KePanic(char const*)>

c002028c <ATA::open(int, int, void*)>:
c002028c:	53                   	push   ebx
c002028d:	83 ec 08             	sub    esp,0x8
c0020290:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020294:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020298:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002029c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00202a2:	c1 e0 06             	shl    eax,0x6
c00202a5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00202ab:	01 d0                	add    eax,edx
c00202ad:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00202b4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00202ba:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00202c1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00202cb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00202d2:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00202d8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00202df:	75 0c                	jne    c00202ed <ATA::open(int, int, void*)+0x61>
c00202e1:	83 ec 0c             	sub    esp,0xc
c00202e4:	53                   	push   ebx
c00202e5:	e8 78 ff ff ff       	call   c0020262 <ATA::detectCHS()>
c00202ea:	83 c4 10             	add    esp,0x10
c00202ed:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00202f3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00202f9:	c1 e0 06             	shl    eax,0x6
c00202fc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0020303:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002030d:	d1 e8                	shr    eax,1
c002030f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020315:	6a 04                	push   0x4
c0020317:	6a 0c                	push   0xc
c0020319:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020320:	50                   	push   eax
c0020321:	52                   	push   edx
c0020322:	e8 79 e8 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020327:	90                   	nop
c0020328:	90                   	nop
c0020329:	6a 00                	push   0x0
c002032b:	6a 0c                	push   0xc
c002032d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020334:	50                   	push   eax
c0020335:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002033b:	e8 60 e8 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020340:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020346:	83 c4 20             	add    esp,0x20
c0020349:	c1 e0 06             	shl    eax,0x6
c002034c:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c0020352:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c0020359:	0f 84 00 01 00 00    	je     c002045f <ATA::open(int, int, void*)+0x1d3>
c002035f:	83 ec 0c             	sub    esp,0xc
c0020362:	6a 08                	push   0x8
c0020364:	e8 34 fa fe ff       	call   c000fd9d <Phys::allocateContiguousPages(int)>
c0020369:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002036f:	c7 04 24 4e 62 02 c0 	mov    DWORD PTR [esp],0xc002624e
c0020376:	e8 eb 6b fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002037b:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0020382:	e8 7c 2c ff ff       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c0020387:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002038d:	6a 03                	push   0x3
c002038f:	50                   	push   eax
c0020390:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020396:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c002039c:	e8 3b 33 ff ff       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c00203a1:	83 c4 20             	add    esp,0x20
c00203a4:	e8 0d f9 fe ff       	call   c000fcb6 <Phys::allocatePage()>
c00203a9:	83 ec 0c             	sub    esp,0xc
c00203ac:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c00203b2:	6a 01                	push   0x1
c00203b4:	e8 4a 2c ff ff       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c00203b9:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c00203bf:	6a 03                	push   0x3
c00203c1:	50                   	push   eax
c00203c2:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c00203c8:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c00203ce:	e8 09 33 ff ff       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c00203d3:	83 c4 14             	add    esp,0x14
c00203d6:	68 87 62 02 c0       	push   0xc0026287
c00203db:	e8 86 6b fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00203e0:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c00203e7:	50                   	push   eax
c00203e8:	6a 12                	push   0x12
c00203ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00203f1:	50                   	push   eax
c00203f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00203f8:	e8 a3 e7 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203fd:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c0020403:	83 c4 20             	add    esp,0x20
c0020406:	0f b6 c4             	movzx  eax,ah
c0020409:	50                   	push   eax
c002040a:	6a 13                	push   0x13
c002040c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020413:	50                   	push   eax
c0020414:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002041a:	e8 81 e7 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002041f:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c0020426:	50                   	push   eax
c0020427:	6a 14                	push   0x14
c0020429:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020430:	50                   	push   eax
c0020431:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020437:	e8 64 e7 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002043c:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c0020443:	83 c4 20             	add    esp,0x20
c0020446:	50                   	push   eax
c0020447:	6a 15                	push   0x15
c0020449:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020450:	50                   	push   eax
c0020451:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020457:	e8 44 e7 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002045c:	83 c4 10             	add    esp,0x10
c002045f:	83 ec 0c             	sub    esp,0xc
c0020462:	53                   	push   ebx
c0020463:	e8 da 99 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c0020468:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002046b:	e8 3e a8 fe ff       	call   c000acae <createPartitionsForDisk(PhysicalDisk*)>
c0020470:	83 c4 18             	add    esp,0x18
c0020473:	31 c0                	xor    eax,eax
c0020475:	5b                   	pop    ebx
c0020476:	c3                   	ret    

c0020477 <combineCharAndColour(char, unsigned char)>:
c0020477:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002047c:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c0020482:	c1 e0 08             	shl    eax,0x8
c0020485:	09 d0                	or     eax,edx
c0020487:	c3                   	ret    

c0020488 <combineColours(unsigned char, unsigned char)>:
c0020488:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002048d:	c1 e0 04             	shl    eax,0x4
c0020490:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0020494:	c3                   	ret    
c0020495:	90                   	nop

c0020496 <ATAPI::write(unsigned long long, int, void*)>:
c0020496:	b8 03 00 00 00       	mov    eax,0x3
c002049b:	c3                   	ret    

c002049c <ATAPI::close(int, int, void*)>:
c002049c:	83 ec 0c             	sub    esp,0xc
c002049f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00204a9:	85 c0                	test   eax,eax
c00204ab:	74 0c                	je     c00204b9 <ATAPI::close(int, int, void*)+0x1d>
c00204ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00204af:	83 ec 0c             	sub    esp,0xc
c00204b2:	50                   	push   eax
c00204b3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00204b6:	83 c4 10             	add    esp,0x10
c00204b9:	31 c0                	xor    eax,eax
c00204bb:	83 c4 0c             	add    esp,0xc
c00204be:	c3                   	ret    
c00204bf:	90                   	nop

c00204c0 <ATAPI::ATAPI()>:
c00204c0:	83 ec 0c             	sub    esp,0xc
c00204c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c7:	83 ec 04             	sub    esp,0x4
c00204ca:	68 00 08 00 00       	push   0x800
c00204cf:	68 39 64 02 c0       	push   0xc0026439
c00204d4:	50                   	push   eax
c00204d5:	e8 00 99 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c00204da:	83 c4 10             	add    esp,0x10
c00204dd:	ba 48 63 02 c0       	mov    edx,0xc0026348
c00204e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e6:	89 10                	mov    DWORD PTR [eax],edx
c00204e8:	90                   	nop
c00204e9:	83 c4 0c             	add    esp,0xc
c00204ec:	c3                   	ret    
c00204ed:	90                   	nop

c00204ee <ATAPI::readyForCommand()>:
c00204ee:	56                   	push   esi
c00204ef:	53                   	push   ebx
c00204f0:	31 db                	xor    ebx,ebx
c00204f2:	50                   	push   eax
c00204f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00204f7:	50                   	push   eax
c00204f8:	6a 0c                	push   0xc
c00204fa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0020501:	50                   	push   eax
c0020502:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020508:	e8 53 e7 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c002050d:	83 c4 10             	add    esp,0x10
c0020510:	a8 88                	test   al,0x88
c0020512:	74 26                	je     c002053a <ATAPI::readyForCommand()+0x4c>
c0020514:	43                   	inc    ebx
c0020515:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002051b:	7e da                	jle    c00204f7 <ATAPI::readyForCommand()+0x9>
c002051d:	51                   	push   ecx
c002051e:	51                   	push   ecx
c002051f:	6a 00                	push   0x0
c0020521:	68 5e 01 00 00       	push   0x15e
c0020526:	e8 fd 62 ff ff       	call   c0016828 <milliTenthSleep(unsigned long long)>
c002052b:	83 c4 10             	add    esp,0x10
c002052e:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0020534:	75 c1                	jne    c00204f7 <ATAPI::readyForCommand()+0x9>
c0020536:	31 c0                	xor    eax,eax
c0020538:	eb 02                	jmp    c002053c <ATAPI::readyForCommand()+0x4e>
c002053a:	b0 01                	mov    al,0x1
c002053c:	5a                   	pop    edx
c002053d:	5b                   	pop    ebx
c002053e:	5e                   	pop    esi
c002053f:	c3                   	ret    

c0020540 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020540:	55                   	push   ebp
c0020541:	57                   	push   edi
c0020542:	56                   	push   esi
c0020543:	53                   	push   ebx
c0020544:	83 ec 20             	sub    esp,0x20
c0020547:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002054b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002054f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0020553:	6a 01                	push   0x1
c0020555:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002055c:	50                   	push   eax
c002055d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020563:	e8 48 e8 ff ff       	call   c001edb0 <IDE::enableIRQs(unsigned char, bool)>
c0020568:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002056f:	59                   	pop    ecx
c0020570:	5e                   	pop    esi
c0020571:	50                   	push   eax
c0020572:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020578:	e8 fd e5 ff ff       	call   c001eb7a <IDE::prepareInterrupt(unsigned char)>
c002057d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020580:	e8 69 ff ff ff       	call   c00204ee <ATAPI::readyForCommand()>
c0020585:	83 c4 10             	add    esp,0x10
c0020588:	84 c0                	test   al,al
c002058a:	75 0a                	jne    c0020596 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c002058c:	bb 01 00 00 00       	mov    ebx,0x1
c0020591:	e9 5f 02 00 00       	jmp    c00207f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020596:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002059c:	c1 e0 04             	shl    eax,0x4
c002059f:	0f b6 c0             	movzx  eax,al
c00205a2:	50                   	push   eax
c00205a3:	6a 06                	push   0x6
c00205a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205ac:	50                   	push   eax
c00205ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205b3:	e8 e8 e5 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00205b8:	6a 00                	push   0x0
c00205ba:	6a 01                	push   0x1
c00205bc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205c3:	50                   	push   eax
c00205c4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205ca:	e8 d1 e5 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00205cf:	83 c4 20             	add    esp,0x20
c00205d2:	0f b6 c3             	movzx  eax,bl
c00205d5:	50                   	push   eax
c00205d6:	0f b6 df             	movzx  ebx,bh
c00205d9:	6a 04                	push   0x4
c00205db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205e2:	50                   	push   eax
c00205e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205e9:	e8 b2 e5 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00205ee:	53                   	push   ebx
c00205ef:	6a 05                	push   0x5
c00205f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205f8:	50                   	push   eax
c00205f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205ff:	e8 9c e5 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020604:	83 c4 20             	add    esp,0x20
c0020607:	68 a0 00 00 00       	push   0xa0
c002060c:	6a 07                	push   0x7
c002060e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020615:	50                   	push   eax
c0020616:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002061c:	e8 7f e5 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020621:	83 c4 0c             	add    esp,0xc
c0020624:	6a 01                	push   0x1
c0020626:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002062d:	50                   	push   eax
c002062e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020634:	e8 07 f3 ff ff       	call   c001f940 <IDE::polling(unsigned char, unsigned int)>
c0020639:	83 c4 10             	add    esp,0x10
c002063c:	0f b6 d8             	movzx  ebx,al
c002063f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c0020645:	85 db                	test   ebx,ebx
c0020647:	74 20                	je     c0020669 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c0020649:	53                   	push   ebx
c002064a:	0f b6 c0             	movzx  eax,al
c002064d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c0020654:	52                   	push   edx
c0020655:	50                   	push   eax
c0020656:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002065c:	e8 25 f2 ff ff       	call   c001f886 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020661:	83 c4 10             	add    esp,0x10
c0020664:	e9 8c 01 00 00       	jmp    c00207f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020669:	52                   	push   edx
c002066a:	0f b6 c0             	movzx  eax,al
c002066d:	52                   	push   edx
c002066e:	50                   	push   eax
c002066f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020675:	e8 14 e5 ff ff       	call   c001eb8e <IDE::getBase(unsigned char)>
c002067a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002067e:	b9 06 00 00 00       	mov    ecx,0x6
c0020683:	89 c2                	mov    edx,eax
c0020685:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020688:	89 e8                	mov    eax,ebp
c002068a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002068e:	83 c4 10             	add    esp,0x10
c0020691:	0f b6 c0             	movzx  eax,al
c0020694:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020698:	85 db                	test   ebx,ebx
c002069a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00206a0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00206a7:	0f 84 eb 00 00 00    	je     c0020798 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00206ad:	55                   	push   ebp
c00206ae:	55                   	push   ebp
c00206af:	52                   	push   edx
c00206b0:	50                   	push   eax
c00206b1:	e8 5e e6 ff ff       	call   c001ed14 <IDE::waitInterrupt(unsigned char)>
c00206b6:	83 c4 10             	add    esp,0x10
c00206b9:	84 c0                	test   al,al
c00206bb:	0f 84 cb fe ff ff    	je     c002058c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c00206c1:	56                   	push   esi
c00206c2:	56                   	push   esi
c00206c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00206ca:	50                   	push   eax
c00206cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00206d1:	e8 a4 e4 ff ff       	call   c001eb7a <IDE::prepareInterrupt(unsigned char)>
c00206d6:	83 c4 0c             	add    esp,0xc
c00206d9:	6a 04                	push   0x4
c00206db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00206e2:	50                   	push   eax
c00206e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00206e9:	e8 72 e5 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c00206ee:	83 c4 0c             	add    esp,0xc
c00206f1:	6a 05                	push   0x5
c00206f3:	89 c6                	mov    esi,eax
c00206f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00206fc:	50                   	push   eax
c00206fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020703:	e8 58 e5 ff ff       	call   c001ec60 <IDE::read(unsigned char, unsigned char)>
c0020708:	83 c4 10             	add    esp,0x10
c002070b:	0f b6 e8             	movzx  ebp,al
c002070e:	89 f0                	mov    eax,esi
c0020710:	c1 e5 08             	shl    ebp,0x8
c0020713:	0f b6 f0             	movzx  esi,al
c0020716:	09 f5                	or     ebp,esi
c0020718:	31 f6                	xor    esi,esi
c002071a:	d1 fd                	sar    ebp,1
c002071c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020721:	74 5c                	je     c002077f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c0020723:	39 ee                	cmp    esi,ebp
c0020725:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002072b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020732:	75 0d                	jne    c0020741 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c0020734:	8d 0c 36             	lea    ecx,[esi+esi*1]
c0020737:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c002073b:	4b                   	dec    ebx
c002073c:	e9 57 ff ff ff       	jmp    c0020698 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c0020741:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020745:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c0020749:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c002074e:	51                   	push   ecx
c002074f:	51                   	push   ecx
c0020750:	52                   	push   edx
c0020751:	50                   	push   eax
c0020752:	e8 37 e4 ff ff       	call   c001eb8e <IDE::getBase(unsigned char)>
c0020757:	89 c2                	mov    edx,eax
c0020759:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002075e:	66 ef                	out    dx,ax
c0020760:	46                   	inc    esi
c0020761:	83 c4 10             	add    esp,0x10
c0020764:	eb bd                	jmp    c0020723 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c0020766:	51                   	push   ecx
c0020767:	51                   	push   ecx
c0020768:	52                   	push   edx
c0020769:	50                   	push   eax
c002076a:	e8 1f e4 ff ff       	call   c001eb8e <IDE::getBase(unsigned char)>
c002076f:	89 c2                	mov    edx,eax
c0020771:	66 ed                	in     ax,dx
c0020773:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0020777:	83 c4 10             	add    esp,0x10
c002077a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c002077e:	46                   	inc    esi
c002077f:	39 ee                	cmp    esi,ebp
c0020781:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020787:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002078e:	75 d6                	jne    c0020766 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c0020790:	01 f6                	add    esi,esi
c0020792:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c0020796:	eb a3                	jmp    c002073b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c0020798:	51                   	push   ecx
c0020799:	51                   	push   ecx
c002079a:	52                   	push   edx
c002079b:	50                   	push   eax
c002079c:	e8 73 e5 ff ff       	call   c001ed14 <IDE::waitInterrupt(unsigned char)>
c00207a1:	83 c4 10             	add    esp,0x10
c00207a4:	84 c0                	test   al,al
c00207a6:	0f 84 e0 fd ff ff    	je     c002058c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c00207ac:	52                   	push   edx
c00207ad:	bb a0 86 01 00       	mov    ebx,0x186a0
c00207b2:	52                   	push   edx
c00207b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00207ba:	50                   	push   eax
c00207bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00207c1:	e8 b4 e3 ff ff       	call   c001eb7a <IDE::prepareInterrupt(unsigned char)>
c00207c6:	83 c4 10             	add    esp,0x10
c00207c9:	50                   	push   eax
c00207ca:	50                   	push   eax
c00207cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00207d2:	50                   	push   eax
c00207d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00207d9:	e8 b0 e3 ff ff       	call   c001eb8e <IDE::getBase(unsigned char)>
c00207de:	8d 50 07             	lea    edx,[eax+0x7]
c00207e1:	ec                   	in     al,dx
c00207e2:	83 c4 10             	add    esp,0x10
c00207e5:	a8 88                	test   al,0x88
c00207e7:	74 0a                	je     c00207f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00207e9:	4b                   	dec    ebx
c00207ea:	75 dd                	jne    c00207c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00207ec:	bb 02 00 00 00       	mov    ebx,0x2
c00207f1:	eb 02                	jmp    c00207f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00207f3:	31 db                	xor    ebx,ebx
c00207f5:	83 c4 1c             	add    esp,0x1c
c00207f8:	89 d8                	mov    eax,ebx
c00207fa:	5b                   	pop    ebx
c00207fb:	5e                   	pop    esi
c00207fc:	5f                   	pop    edi
c00207fd:	5d                   	pop    ebp
c00207fe:	c3                   	ret    
c00207ff:	90                   	nop

c0020800 <ATAPI::diskRemoved()>:
c0020800:	53                   	push   ebx
c0020801:	83 ec 14             	sub    esp,0x14
c0020804:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020808:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002080f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020815:	e8 82 a1 fe ff       	call   c000a99c <LogicalDisk::unmount()>
c002081a:	58                   	pop    eax
c002081b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020821:	e8 6e ab fe ff       	call   c000b394 <VCache::writeWriteBuffer()>
c0020826:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002082c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020830:	83 c4 18             	add    esp,0x18
c0020833:	5b                   	pop    ebx
c0020834:	e9 4b ab fe ff       	jmp    c000b384 <VCache::invalidateReadBuffer()>
c0020839:	90                   	nop

c002083a <ATAPI::eject()>:
c002083a:	57                   	push   edi
c002083b:	b9 03 00 00 00       	mov    ecx,0x3
c0020840:	53                   	push   ebx
c0020841:	83 ec 14             	sub    esp,0x14
c0020844:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020848:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002084c:	fc                   	cld    
c002084d:	31 c0                	xor    eax,eax
c002084f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020851:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020856:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002085b:	50                   	push   eax
c002085c:	50                   	push   eax
c002085d:	6a 00                	push   0x0
c002085f:	6a 00                	push   0x0
c0020861:	6a 00                	push   0x0
c0020863:	6a 02                	push   0x2
c0020865:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020869:	50                   	push   eax
c002086a:	53                   	push   ebx
c002086b:	e8 d0 fc ff ff       	call   c0020540 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020870:	83 c4 14             	add    esp,0x14
c0020873:	53                   	push   ebx
c0020874:	e8 87 ff ff ff       	call   c0020800 <ATAPI::diskRemoved()>
c0020879:	83 c4 24             	add    esp,0x24
c002087c:	31 c0                	xor    eax,eax
c002087e:	5b                   	pop    ebx
c002087f:	5f                   	pop    edi
c0020880:	c3                   	ret    
c0020881:	90                   	nop

c0020882 <ATAPI::diskInserted()>:
c0020882:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020886:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002088d:	c3                   	ret    

c002088e <ATAPI::detectMedia()>:
c002088e:	56                   	push   esi
c002088f:	53                   	push   ebx
c0020890:	83 ec 28             	sub    esp,0x28
c0020893:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020897:	6a 0c                	push   0xc
c0020899:	6a 00                	push   0x0
c002089b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002089f:	56                   	push   esi
c00208a0:	e8 4b fc fd ff       	call   c00004f0 <memset>
c00208a5:	58                   	pop    eax
c00208a6:	5a                   	pop    edx
c00208a7:	6a 00                	push   0x0
c00208a9:	6a 00                	push   0x0
c00208ab:	6a 00                	push   0x0
c00208ad:	6a 00                	push   0x0
c00208af:	56                   	push   esi
c00208b0:	53                   	push   ebx
c00208b1:	e8 8a fc ff ff       	call   c0020540 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00208b6:	83 c4 1c             	add    esp,0x1c
c00208b9:	6a 0c                	push   0xc
c00208bb:	6a 00                	push   0x0
c00208bd:	56                   	push   esi
c00208be:	e8 2d fc fd ff       	call   c00004f0 <memset>
c00208c3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00208c8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00208cd:	59                   	pop    ecx
c00208ce:	58                   	pop    eax
c00208cf:	6a 01                	push   0x1
c00208d1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00208d5:	50                   	push   eax
c00208d6:	6a 00                	push   0x0
c00208d8:	6a 12                	push   0x12
c00208da:	56                   	push   esi
c00208db:	53                   	push   ebx
c00208dc:	e8 5f fc ff ff       	call   c0020540 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00208e1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00208e5:	83 c4 20             	add    esp,0x20
c00208e8:	83 e0 7f             	and    eax,0x7f
c00208eb:	83 f8 70             	cmp    eax,0x70
c00208ee:	74 15                	je     c0020905 <ATAPI::detectMedia()+0x77>
c00208f0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00208f7:	75 0c                	jne    c0020905 <ATAPI::detectMedia()+0x77>
c00208f9:	83 ec 0c             	sub    esp,0xc
c00208fc:	53                   	push   ebx
c00208fd:	e8 80 ff ff ff       	call   c0020882 <ATAPI::diskInserted()>
c0020902:	83 c4 10             	add    esp,0x10
c0020905:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020909:	83 e0 0f             	and    eax,0xf
c002090c:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020911:	0f b6 c0             	movzx  eax,al
c0020914:	75 19                	jne    c002092f <ATAPI::detectMedia()+0xa1>
c0020916:	83 f8 02             	cmp    eax,0x2
c0020919:	75 14                	jne    c002092f <ATAPI::detectMedia()+0xa1>
c002091b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020922:	74 24                	je     c0020948 <ATAPI::detectMedia()+0xba>
c0020924:	83 ec 0c             	sub    esp,0xc
c0020927:	53                   	push   ebx
c0020928:	e8 d3 fe ff ff       	call   c0020800 <ATAPI::diskRemoved()>
c002092d:	eb 16                	jmp    c0020945 <ATAPI::detectMedia()+0xb7>
c002092f:	85 c0                	test   eax,eax
c0020931:	75 15                	jne    c0020948 <ATAPI::detectMedia()+0xba>
c0020933:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002093a:	75 0c                	jne    c0020948 <ATAPI::detectMedia()+0xba>
c002093c:	83 ec 0c             	sub    esp,0xc
c002093f:	53                   	push   ebx
c0020940:	e8 3d ff ff ff       	call   c0020882 <ATAPI::diskInserted()>
c0020945:	83 c4 10             	add    esp,0x10
c0020948:	83 c4 24             	add    esp,0x24
c002094b:	5b                   	pop    ebx
c002094c:	5e                   	pop    esi
c002094d:	c3                   	ret    

c002094e <ATAPI::open(int, int, void*)>:
c002094e:	56                   	push   esi
c002094f:	53                   	push   ebx
c0020950:	50                   	push   eax
c0020951:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020955:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020959:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002095d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020963:	c1 e0 06             	shl    eax,0x6
c0020966:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002096c:	01 d0                	add    eax,edx
c002096e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0020975:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002097b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020982:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002098c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020993:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020999:	6a 04                	push   0x4
c002099b:	6a 0c                	push   0xc
c002099d:	51                   	push   ecx
c002099e:	52                   	push   edx
c002099f:	e8 fc e1 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00209a4:	90                   	nop
c00209a5:	90                   	nop
c00209a6:	6a 00                	push   0x0
c00209a8:	6a 0c                	push   0xc
c00209aa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00209b1:	50                   	push   eax
c00209b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00209b8:	e8 e3 e1 ff ff       	call   c001eba0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00209bd:	83 c4 14             	add    esp,0x14
c00209c0:	68 78 01 00 00       	push   0x178
c00209c5:	e8 9e ec fe ff       	call   c000f668 <malloc>
c00209ca:	83 c4 0c             	add    esp,0xc
c00209cd:	6a 00                	push   0x0
c00209cf:	68 ff ff ff 7f       	push   0x7fffffff
c00209d4:	6a 00                	push   0x0
c00209d6:	6a 00                	push   0x0
c00209d8:	53                   	push   ebx
c00209d9:	68 eb 64 02 c0       	push   0xc00264eb
c00209de:	89 c6                	mov    esi,eax
c00209e0:	50                   	push   eax
c00209e1:	e8 f4 9d fe ff       	call   c000a7da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00209e6:	83 c4 14             	add    esp,0x14
c00209e9:	56                   	push   esi
c00209ea:	e8 ab 9e fe ff       	call   c000a89a <LogicalDisk::assignDriveLetter()>
c00209ef:	5a                   	pop    edx
c00209f0:	59                   	pop    ecx
c00209f1:	0f be c0             	movsx  eax,al
c00209f4:	50                   	push   eax
c00209f5:	68 30 63 02 c0       	push   0xc0026330
c00209fa:	e8 67 65 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00209ff:	58                   	pop    eax
c0020a00:	5a                   	pop    edx
c0020a01:	56                   	push   esi
c0020a02:	53                   	push   ebx
c0020a03:	e8 ee 8f fe ff       	call   c00099f6 <Device::addChild(Device*)>
c0020a08:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020a0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020a11:	e8 2c 94 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c0020a16:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020a1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020a20:	e8 69 fe ff ff       	call   c002088e <ATAPI::detectMedia()>
c0020a25:	83 c4 14             	add    esp,0x14
c0020a28:	31 c0                	xor    eax,eax
c0020a2a:	5b                   	pop    ebx
c0020a2b:	5e                   	pop    esi
c0020a2c:	c3                   	ret    
c0020a2d:	90                   	nop

c0020a2e <ATAPI::read(unsigned long long, int, void*)>:
c0020a2e:	55                   	push   ebp
c0020a2f:	57                   	push   edi
c0020a30:	56                   	push   esi
c0020a31:	53                   	push   ebx
c0020a32:	83 ec 1c             	sub    esp,0x1c
c0020a35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020a39:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020a3d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020a41:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020a48:	74 3c                	je     c0020a86 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0020a4a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020a4e:	b9 03 00 00 00       	mov    ecx,0x3
c0020a53:	fc                   	cld    
c0020a54:	31 c0                	xor    eax,eax
c0020a56:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020a58:	89 e8                	mov    eax,ebp
c0020a5a:	0f ce                	bswap  esi
c0020a5c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020a60:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020a65:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020a69:	50                   	push   eax
c0020a6a:	50                   	push   eax
c0020a6b:	55                   	push   ebp
c0020a6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020a70:	c1 e5 0b             	shl    ebp,0xb
c0020a73:	6a 00                	push   0x0
c0020a75:	55                   	push   ebp
c0020a76:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020a7a:	50                   	push   eax
c0020a7b:	53                   	push   ebx
c0020a7c:	e8 bf fa ff ff       	call   c0020540 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020a81:	83 c4 20             	add    esp,0x20
c0020a84:	eb 1a                	jmp    c0020aa0 <ATAPI::read(unsigned long long, int, void*)+0x72>
c0020a86:	83 ec 0c             	sub    esp,0xc
c0020a89:	53                   	push   ebx
c0020a8a:	e8 ff fd ff ff       	call   c002088e <ATAPI::detectMedia()>
c0020a8f:	83 c4 10             	add    esp,0x10
c0020a92:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020a99:	75 af                	jne    c0020a4a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020a9b:	b8 02 00 00 00       	mov    eax,0x2
c0020aa0:	83 c4 1c             	add    esp,0x1c
c0020aa3:	5b                   	pop    ebx
c0020aa4:	5e                   	pop    esi
c0020aa5:	5f                   	pop    edi
c0020aa6:	5d                   	pop    ebp
c0020aa7:	c3                   	ret    

c0020aa8 <SATA::close(int, int, void*)>:
c0020aa8:	83 ec 0c             	sub    esp,0xc
c0020aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aaf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020ab5:	85 c0                	test   eax,eax
c0020ab7:	74 0c                	je     c0020ac5 <SATA::close(int, int, void*)+0x1d>
c0020ab9:	8b 10                	mov    edx,DWORD PTR [eax]
c0020abb:	83 ec 0c             	sub    esp,0xc
c0020abe:	50                   	push   eax
c0020abf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020ac2:	83 c4 10             	add    esp,0x10
c0020ac5:	31 c0                	xor    eax,eax
c0020ac7:	83 c4 0c             	add    esp,0xc
c0020aca:	c3                   	ret    
c0020acb:	90                   	nop

c0020acc <SATA::powerSaving(PowerSavingLevel)>:
c0020acc:	c3                   	ret    
c0020acd:	90                   	nop

c0020ace <SATA::open(int, int, void*)>:
c0020ace:	56                   	push   esi
c0020acf:	53                   	push   ebx
c0020ad0:	83 ec 10             	sub    esp,0x10
c0020ad3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020ad7:	68 78 63 02 c0       	push   0xc0026378
c0020adc:	e8 85 64 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020ae1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ae5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020aef:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020af9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020aff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020b03:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020b0d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020b14:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020b1a:	e8 97 f1 fe ff       	call   c000fcb6 <Phys::allocatePage()>
c0020b1f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020b25:	89 c6                	mov    esi,eax
c0020b27:	e8 8a f1 fe ff       	call   c000fcb6 <Phys::allocatePage()>
c0020b2c:	81 c6 00 10 00 00    	add    esi,0x1000
c0020b32:	83 c4 10             	add    esp,0x10
c0020b35:	39 c6                	cmp    esi,eax
c0020b37:	74 10                	je     c0020b49 <SATA::open(int, int, void*)+0x7b>
c0020b39:	83 ec 0c             	sub    esp,0xc
c0020b3c:	68 84 63 02 c0       	push   0xc0026384
c0020b41:	e8 76 ef fe ff       	call   c000fabc <KePanic(char const*)>
c0020b46:	83 c4 10             	add    esp,0x10
c0020b49:	83 ec 0c             	sub    esp,0xc
c0020b4c:	6a 02                	push   0x2
c0020b4e:	e8 b0 24 ff ff       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c0020b53:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020b59:	6a 03                	push   0x3
c0020b5b:	50                   	push   eax
c0020b5c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020b62:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0020b68:	e8 6f 2b ff ff       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0020b6d:	83 c4 14             	add    esp,0x14
c0020b70:	53                   	push   ebx
c0020b71:	e8 cc 92 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c0020b76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020b79:	e8 30 a1 fe ff       	call   c000acae <createPartitionsForDisk(PhysicalDisk*)>
c0020b7e:	83 c4 14             	add    esp,0x14
c0020b81:	31 c0                	xor    eax,eax
c0020b83:	5b                   	pop    ebx
c0020b84:	5e                   	pop    esi
c0020b85:	c3                   	ret    

c0020b86 <SATA::SATA()>:
c0020b86:	83 ec 0c             	sub    esp,0xc
c0020b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b8d:	83 ec 04             	sub    esp,0x4
c0020b90:	68 00 02 00 00       	push   0x200
c0020b95:	68 98 63 02 c0       	push   0xc0026398
c0020b9a:	50                   	push   eax
c0020b9b:	e8 3a 92 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020ba0:	83 c4 10             	add    esp,0x10
c0020ba3:	ba 08 64 02 c0       	mov    edx,0xc0026408
c0020ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bac:	89 10                	mov    DWORD PTR [eax],edx
c0020bae:	90                   	nop
c0020baf:	83 c4 0c             	add    esp,0xc
c0020bb2:	c3                   	ret    
c0020bb3:	90                   	nop

c0020bb4 <SATA::access(unsigned long long, int, void*, bool)>:
c0020bb4:	55                   	push   ebp
c0020bb5:	57                   	push   edi
c0020bb6:	56                   	push   esi
c0020bb7:	53                   	push   ebx
c0020bb8:	83 ec 2c             	sub    esp,0x2c
c0020bbb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020bbf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020bc3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020bc7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020bcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020bcf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020bd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020bd7:	fa                   	cli    
c0020bd8:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c0020bde:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020be3:	7e 10                	jle    c0020bf5 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c0020be5:	83 ec 0c             	sub    esp,0xc
c0020be8:	68 a8 63 02 c0       	push   0xc00263a8
c0020bed:	e8 ca ee fe ff       	call   c000fabc <KePanic(char const*)>
c0020bf2:	83 c4 10             	add    esp,0x10
c0020bf5:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020bfb:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020c01:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020c07:	89 e8                	mov    eax,ebp
c0020c09:	c1 e0 07             	shl    eax,0x7
c0020c0c:	01 d0                	add    eax,edx
c0020c0e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020c18:	8d 45 02             	lea    eax,[ebp+0x2]
c0020c1b:	51                   	push   ecx
c0020c1c:	c1 e0 07             	shl    eax,0x7
c0020c1f:	51                   	push   ecx
c0020c20:	01 d0                	add    eax,edx
c0020c22:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0020c26:	50                   	push   eax
c0020c27:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020c2d:	e8 ee ed ff ff       	call   c001fa20 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020c32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c36:	83 c4 10             	add    esp,0x10
c0020c39:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0020c3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020c42:	0f 84 a6 01 00 00    	je     c0020dee <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c0020c48:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020c4c:	c1 e0 09             	shl    eax,0x9
c0020c4f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020c54:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020c58:	74 0e                	je     c0020c68 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c0020c5a:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020c60:	89 c1                	mov    ecx,eax
c0020c62:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020c66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020c68:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020c6c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020c72:	8d 45 02             	lea    eax,[ebp+0x2]
c0020c75:	c1 e0 07             	shl    eax,0x7
c0020c78:	01 d0                	add    eax,edx
c0020c7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c7c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020c82:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020c88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020c8c:	c1 e1 05             	shl    ecx,0x5
c0020c8f:	01 c8                	add    eax,ecx
c0020c91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020c95:	83 e1 01             	and    ecx,0x1
c0020c98:	89 ce                	mov    esi,ecx
c0020c9a:	8a 08                	mov    cl,BYTE PTR [eax]
c0020c9c:	c1 e6 06             	shl    esi,0x6
c0020c9f:	83 e1 bf             	and    ecx,0xffffffbf
c0020ca2:	09 f1                	or     ecx,esi
c0020ca4:	88 08                	mov    BYTE PTR [eax],cl
c0020ca6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020ca8:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0020cae:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020cb4:	89 08                	mov    DWORD PTR [eax],ecx
c0020cb6:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020cbc:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0020cc2:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020cc8:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020ccb:	50                   	push   eax
c0020ccc:	68 90 00 00 00       	push   0x90
c0020cd1:	6a 00                	push   0x0
c0020cd3:	56                   	push   esi
c0020cd4:	e8 17 f8 fd ff       	call   c00004f0 <memset>
c0020cd9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020cdf:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020ce5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ce9:	83 c4 10             	add    esp,0x10
c0020cec:	48                   	dec    eax
c0020ced:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020cf2:	89 c1                	mov    ecx,eax
c0020cf4:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020cfa:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020cff:	09 c8                	or     eax,ecx
c0020d01:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020d07:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020d0d:	83 c8 80             	or     eax,0xffffff80
c0020d10:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0020d16:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020d19:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d1d:	25 00 7f 00 00       	and    eax,0x7f00
c0020d22:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020d27:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020d2c:	66 89 06             	mov    WORD PTR [esi],ax
c0020d2f:	b0 35                	mov    al,0x35
c0020d31:	75 02                	jne    c0020d35 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c0020d33:	b0 25                	mov    al,0x25
c0020d35:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020d38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d3c:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020d40:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020d44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d48:	c1 e8 10             	shr    eax,0x10
c0020d4b:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020d4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d52:	c1 e8 18             	shr    eax,0x18
c0020d55:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020d58:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020d5c:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020d5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020d63:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020d66:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020d6a:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020d6e:	89 ee                	mov    esi,ebp
c0020d70:	31 c0                	xor    eax,eax
c0020d72:	c1 e6 07             	shl    esi,0x7
c0020d75:	01 d6                	add    esi,edx
c0020d77:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0020d7d:	80 e1 88             	and    cl,0x88
c0020d80:	74 0a                	je     c0020d8c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0020d82:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020d87:	74 0a                	je     c0020d93 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0020d89:	40                   	inc    eax
c0020d8a:	eb eb                	jmp    c0020d77 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0020d8c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020d91:	75 0a                	jne    c0020d9d <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020d93:	83 ec 0c             	sub    esp,0xc
c0020d96:	68 e1 63 02 c0       	push   0xc00263e1
c0020d9b:	eb 34                	jmp    c0020dd1 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020d9d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0020da1:	c1 e5 07             	shl    ebp,0x7
c0020da4:	b8 01 00 00 00       	mov    eax,0x1
c0020da9:	01 ea                	add    edx,ebp
c0020dab:	d3 e0                	shl    eax,cl
c0020dad:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0020db3:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020db9:	85 c8                	test   eax,ecx
c0020dbb:	74 25                	je     c0020de2 <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c0020dbd:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020dc3:	0f ba e1 1e          	bt     ecx,0x1e
c0020dc7:	73 ea                	jae    c0020db3 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c0020dc9:	83 ec 0c             	sub    esp,0xc
c0020dcc:	68 ef 63 02 c0       	push   0xc00263ef
c0020dd1:	e8 90 61 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020dd6:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c0020ddd:	83 c4 10             	add    esp,0x10
c0020de0:	eb 13                	jmp    c0020df5 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c0020de2:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020de8:	0f ba e0 1e          	bt     eax,0x1e
c0020dec:	73 18                	jae    c0020e06 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c0020dee:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c0020df5:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c0020dfc:	75 01                	jne    c0020dff <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c0020dfe:	fb                   	sti    
c0020dff:	b8 01 00 00 00       	mov    eax,0x1
c0020e04:	eb 2c                	jmp    c0020e32 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020e06:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020e0b:	75 10                	jne    c0020e1d <SATA::access(unsigned long long, int, void*, bool)+0x269>
c0020e0d:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020e13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020e17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e1d:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c0020e24:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0020e29:	85 c0                	test   eax,eax
c0020e2b:	75 03                	jne    c0020e30 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020e2d:	fb                   	sti    
c0020e2e:	eb 02                	jmp    c0020e32 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020e30:	31 c0                	xor    eax,eax
c0020e32:	83 c4 2c             	add    esp,0x2c
c0020e35:	5b                   	pop    ebx
c0020e36:	5e                   	pop    esi
c0020e37:	5f                   	pop    edi
c0020e38:	5d                   	pop    ebp
c0020e39:	c3                   	ret    

c0020e3a <SATA::read(unsigned long long, int, void*)>:
c0020e3a:	57                   	push   edi
c0020e3b:	b8 04 00 00 00       	mov    eax,0x4
c0020e40:	56                   	push   esi
c0020e41:	53                   	push   ebx
c0020e42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e46:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020e4a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020e4e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020e52:	8d 7a ff             	lea    edi,[edx-0x1]
c0020e55:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020e5b:	77 25                	ja     c0020e82 <SATA::read(unsigned long long, int, void*)+0x48>
c0020e5d:	85 f6                	test   esi,esi
c0020e5f:	b8 06 00 00 00       	mov    eax,0x6
c0020e64:	74 1c                	je     c0020e82 <SATA::read(unsigned long long, int, void*)+0x48>
c0020e66:	50                   	push   eax
c0020e67:	50                   	push   eax
c0020e68:	6a 00                	push   0x0
c0020e6a:	56                   	push   esi
c0020e6b:	52                   	push   edx
c0020e6c:	53                   	push   ebx
c0020e6d:	51                   	push   ecx
c0020e6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020e72:	e8 3d fd ff ff       	call   c0020bb4 <SATA::access(unsigned long long, int, void*, bool)>
c0020e77:	83 c4 20             	add    esp,0x20
c0020e7a:	85 c0                	test   eax,eax
c0020e7c:	0f 95 c0             	setne  al
c0020e7f:	0f b6 c0             	movzx  eax,al
c0020e82:	5b                   	pop    ebx
c0020e83:	5e                   	pop    esi
c0020e84:	5f                   	pop    edi
c0020e85:	c3                   	ret    

c0020e86 <SATA::write(unsigned long long, int, void*)>:
c0020e86:	55                   	push   ebp
c0020e87:	b8 04 00 00 00       	mov    eax,0x4
c0020e8c:	57                   	push   edi
c0020e8d:	56                   	push   esi
c0020e8e:	53                   	push   ebx
c0020e8f:	83 ec 0c             	sub    esp,0xc
c0020e92:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020e96:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020e9a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020e9e:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020ea2:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020ea5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020eab:	77 3d                	ja     c0020eea <SATA::write(unsigned long long, int, void*)+0x64>
c0020ead:	85 ed                	test   ebp,ebp
c0020eaf:	b8 06 00 00 00       	mov    eax,0x6
c0020eb4:	74 34                	je     c0020eea <SATA::write(unsigned long long, int, void*)+0x64>
c0020eb6:	c1 e3 09             	shl    ebx,0x9
c0020eb9:	01 eb                	add    ebx,ebp
c0020ebb:	50                   	push   eax
c0020ebc:	89 d6                	mov    esi,edx
c0020ebe:	50                   	push   eax
c0020ebf:	83 c6 01             	add    esi,0x1
c0020ec2:	6a 01                	push   0x1
c0020ec4:	89 cf                	mov    edi,ecx
c0020ec6:	55                   	push   ebp
c0020ec7:	83 d7 00             	adc    edi,0x0
c0020eca:	6a 01                	push   0x1
c0020ecc:	81 c5 00 02 00 00    	add    ebp,0x200
c0020ed2:	51                   	push   ecx
c0020ed3:	52                   	push   edx
c0020ed4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020ed8:	e8 d7 fc ff ff       	call   c0020bb4 <SATA::access(unsigned long long, int, void*, bool)>
c0020edd:	83 c4 20             	add    esp,0x20
c0020ee0:	39 dd                	cmp    ebp,ebx
c0020ee2:	89 f2                	mov    edx,esi
c0020ee4:	89 f9                	mov    ecx,edi
c0020ee6:	75 d3                	jne    c0020ebb <SATA::write(unsigned long long, int, void*)+0x35>
c0020ee8:	31 c0                	xor    eax,eax
c0020eea:	83 c4 0c             	add    esp,0xc
c0020eed:	5b                   	pop    ebx
c0020eee:	5e                   	pop    esi
c0020eef:	5f                   	pop    edi
c0020ef0:	5d                   	pop    ebp
c0020ef1:	c3                   	ret    

c0020ef2 <SATAPI::write(unsigned long long, int, void*)>:
c0020ef2:	b8 03 00 00 00       	mov    eax,0x3
c0020ef7:	c3                   	ret    

c0020ef8 <SATAPI::close(int, int, void*)>:
c0020ef8:	83 ec 0c             	sub    esp,0xc
c0020efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020f05:	85 c0                	test   eax,eax
c0020f07:	74 0c                	je     c0020f15 <SATAPI::close(int, int, void*)+0x1d>
c0020f09:	8b 10                	mov    edx,DWORD PTR [eax]
c0020f0b:	83 ec 0c             	sub    esp,0xc
c0020f0e:	50                   	push   eax
c0020f0f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020f12:	83 c4 10             	add    esp,0x10
c0020f15:	31 c0                	xor    eax,eax
c0020f17:	83 c4 0c             	add    esp,0xc
c0020f1a:	c3                   	ret    
c0020f1b:	90                   	nop

c0020f1c <SATAPI::SATAPI()>:
c0020f1c:	83 ec 0c             	sub    esp,0xc
c0020f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f23:	83 ec 04             	sub    esp,0x4
c0020f26:	68 00 08 00 00       	push   0x800
c0020f2b:	68 38 64 02 c0       	push   0xc0026438
c0020f30:	50                   	push   eax
c0020f31:	e8 a4 8e fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020f36:	83 c4 10             	add    esp,0x10
c0020f39:	ba 2c 65 02 c0       	mov    edx,0xc002652c
c0020f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f42:	89 10                	mov    DWORD PTR [eax],edx
c0020f44:	90                   	nop
c0020f45:	83 c4 0c             	add    esp,0xc
c0020f48:	c3                   	ret    
c0020f49:	90                   	nop

c0020f4a <SATAPI::diskRemoved()>:
c0020f4a:	c3                   	ret    
c0020f4b:	90                   	nop

c0020f4c <SATAPI::diskInserted()>:
c0020f4c:	83 ec 18             	sub    esp,0x18
c0020f4f:	68 44 64 02 c0       	push   0xc0026444
c0020f54:	e8 0d 60 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f5d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020f64:	83 c4 1c             	add    esp,0x1c
c0020f67:	c3                   	ret    

c0020f68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020f68:	55                   	push   ebp
c0020f69:	57                   	push   edi
c0020f6a:	56                   	push   esi
c0020f6b:	53                   	push   ebx
c0020f6c:	83 ec 34             	sub    esp,0x34
c0020f6f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020f73:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020f77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f7b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020f7f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020f83:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020f89:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020f8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020f93:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020f99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f9d:	83 c0 02             	add    eax,0x2
c0020fa0:	c1 e0 07             	shl    eax,0x7
c0020fa3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020fa7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020fab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020faf:	c1 e0 07             	shl    eax,0x7
c0020fb2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020fb6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020fba:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020fc4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020fc8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020fce:	e8 4d ea ff ff       	call   c001fa20 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020fd3:	83 c4 10             	add    esp,0x10
c0020fd6:	89 c2                	mov    edx,eax
c0020fd8:	b8 01 00 00 00       	mov    eax,0x1
c0020fdd:	83 fa ff             	cmp    edx,0xffffffff
c0020fe0:	0f 84 63 02 00 00    	je     c0021249 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0020fe6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020fea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fee:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020ff4:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ff6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020ffc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0021002:	89 d1                	mov    ecx,edx
c0021004:	c1 e1 05             	shl    ecx,0x5
c0021007:	01 c8                	add    eax,ecx
c0021009:	8b 08                	mov    ecx,DWORD PTR [eax]
c002100b:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0021011:	81 c9 25 00 01 00    	or     ecx,0x10025
c0021017:	89 08                	mov    DWORD PTR [eax],ecx
c0021019:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002101f:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0021025:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002102b:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002102e:	50                   	push   eax
c002102f:	68 90 00 00 00       	push   0x90
c0021034:	6a 00                	push   0x0
c0021036:	53                   	push   ebx
c0021037:	e8 b4 f4 fd ff       	call   c00004f0 <memset>
c002103c:	8d 7b 40             	lea    edi,[ebx+0x40]
c002103f:	b9 0c 00 00 00       	mov    ecx,0xc
c0021044:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0021048:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002104a:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0021050:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0021054:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0021058:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002105e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021062:	48                   	dec    eax
c0021063:	25 ff ff 3f 00       	and    eax,0x3fffff
c0021068:	89 c1                	mov    ecx,eax
c002106a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0021070:	25 00 00 c0 ff       	and    eax,0xffc00000
c0021075:	09 c8                	or     eax,ecx
c0021077:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002107d:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0021083:	83 c8 80             	or     eax,0xffffff80
c0021086:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002108c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002108f:	25 00 7f 00 00       	and    eax,0x7f00
c0021094:	0d 27 80 ff ff       	or     eax,0xffff8027
c0021099:	66 89 03             	mov    WORD PTR [ebx],ax
c002109c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00210a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210a8:	c1 e8 10             	shr    eax,0x10
c00210ab:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00210ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210b2:	c1 e8 18             	shr    eax,0x18
c00210b5:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00210b8:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00210bc:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00210bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00210c3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00210c6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00210ca:	83 c4 10             	add    esp,0x10
c00210cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00210d1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00210d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00210d9:	31 c0                	xor    eax,eax
c00210db:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c00210e1:	80 e1 88             	and    cl,0x88
c00210e4:	74 0a                	je     c00210f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c00210e6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00210eb:	74 0a                	je     c00210f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c00210ed:	40                   	inc    eax
c00210ee:	eb eb                	jmp    c00210db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c00210f0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00210f5:	75 43                	jne    c002113a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c00210f7:	83 ec 0c             	sub    esp,0xc
c00210fa:	68 5c 64 02 c0       	push   0xc002645c
c00210ff:	e8 62 5e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021104:	58                   	pop    eax
c0021105:	5a                   	pop    edx
c0021106:	68 71 64 02 c0       	push   0xc0026471
c002110b:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c0021111:	e8 e2 12 ff ff       	call   c00123f8 <VgaText::puts(char const*)>
c0021116:	59                   	pop    ecx
c0021117:	5b                   	pop    ebx
c0021118:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002111c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021122:	e8 93 e9 ff ff       	call   c001faba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0021127:	5e                   	pop    esi
c0021128:	5f                   	pop    edi
c0021129:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002112d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021133:	e8 62 e9 ff ff       	call   c001fa9a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0021138:	eb 48                	jmp    c0021182 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c002113a:	b8 01 00 00 00       	mov    eax,0x1
c002113f:	88 d1                	mov    cl,dl
c0021141:	d3 e0                	shl    eax,cl
c0021143:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c0021148:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c002114e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021152:	89 c7                	mov    edi,eax
c0021154:	c1 e3 07             	shl    ebx,0x7
c0021157:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002115b:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0021161:	85 c7                	test   edi,eax
c0021163:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0021169:	0f 84 a7 00 00 00    	je     c0021216 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ae>
c002116f:	0f ba e0 1e          	bt     eax,0x1e
c0021173:	73 1a                	jae    c002118f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c0021175:	83 ec 0c             	sub    esp,0xc
c0021178:	68 83 64 02 c0       	push   0xc0026483
c002117d:	e8 e4 5d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021182:	83 c4 10             	add    esp,0x10
c0021185:	b8 01 00 00 00       	mov    eax,0x1
c002118a:	e9 ba 00 00 00       	jmp    c0021249 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c002118f:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c0021195:	83 f8 0d             	cmp    eax,0xd
c0021198:	77 0b                	ja     c00211a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23d>
c002119a:	50                   	push   eax
c002119b:	50                   	push   eax
c002119c:	6a 00                	push   0x0
c002119e:	68 c8 00 00 00       	push   0xc8
c00211a3:	eb 2a                	jmp    c00211cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c00211a5:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c00211ab:	83 f8 0d             	cmp    eax,0xd
c00211ae:	77 0b                	ja     c00211bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c00211b0:	51                   	push   ecx
c00211b1:	51                   	push   ecx
c00211b2:	6a 00                	push   0x0
c00211b4:	68 58 02 00 00       	push   0x258
c00211b9:	eb 14                	jmp    c00211cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c00211bb:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c00211c1:	83 f8 06             	cmp    eax,0x6
c00211c4:	77 11                	ja     c00211d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26f>
c00211c6:	52                   	push   edx
c00211c7:	52                   	push   edx
c00211c8:	6a 00                	push   0x0
c00211ca:	68 dc 05 00 00       	push   0x5dc
c00211cf:	e8 54 56 ff ff       	call   c0016828 <milliTenthSleep(unsigned long long)>
c00211d4:	83 c4 10             	add    esp,0x10
c00211d7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00211db:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c00211de:	75 06                	jne    c00211e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c00211e0:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c00211e4:	74 16                	je     c00211fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c00211e6:	83 fe 06             	cmp    esi,0x6
c00211e9:	77 11                	ja     c00211fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c00211eb:	50                   	push   eax
c00211ec:	50                   	push   eax
c00211ed:	6a 00                	push   0x0
c00211ef:	68 c4 09 00 00       	push   0x9c4
c00211f4:	e8 2f 56 ff ff       	call   c0016828 <milliTenthSleep(unsigned long long)>
c00211f9:	83 c4 10             	add    esp,0x10
c00211fc:	46                   	inc    esi
c00211fd:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c0021203:	0f 85 52 ff ff ff    	jne    c002115b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c0021209:	83 ec 0c             	sub    esp,0xc
c002120c:	68 96 64 02 c0       	push   0xc0026496
c0021211:	e9 67 ff ff ff       	jmp    c002117d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0021216:	0f ba e0 1e          	bt     eax,0x1e
c002121a:	73 0d                	jae    c0021229 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c1>
c002121c:	83 ec 0c             	sub    esp,0xc
c002121f:	68 aa 64 02 c0       	push   0xc00264aa
c0021224:	e9 54 ff ff ff       	jmp    c002117d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0021229:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002122e:	74 17                	je     c0021247 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0021230:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021235:	74 10                	je     c0021247 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0021237:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002123d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021241:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0021245:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021247:	31 c0                	xor    eax,eax
c0021249:	83 c4 2c             	add    esp,0x2c
c002124c:	5b                   	pop    ebx
c002124d:	5e                   	pop    esi
c002124e:	5f                   	pop    edi
c002124f:	5d                   	pop    ebp
c0021250:	c3                   	ret    
c0021251:	90                   	nop

c0021252 <SATAPI::eject()>:
c0021252:	57                   	push   edi
c0021253:	b9 03 00 00 00       	mov    ecx,0x3
c0021258:	83 ec 18             	sub    esp,0x18
c002125b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002125f:	fc                   	cld    
c0021260:	31 c0                	xor    eax,eax
c0021262:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021264:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021269:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002126e:	50                   	push   eax
c002126f:	6a 00                	push   0x0
c0021271:	6a 00                	push   0x0
c0021273:	6a 00                	push   0x0
c0021275:	6a 00                	push   0x0
c0021277:	6a 02                	push   0x2
c0021279:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002127d:	50                   	push   eax
c002127e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021282:	e8 e1 fc ff ff       	call   c0020f68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021287:	83 c4 38             	add    esp,0x38
c002128a:	31 c0                	xor    eax,eax
c002128c:	5f                   	pop    edi
c002128d:	c3                   	ret    

c002128e <SATAPI::detectMedia()>:
c002128e:	53                   	push   ebx
c002128f:	83 ec 14             	sub    esp,0x14
c0021292:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021296:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002129c:	e8 f3 a0 fe ff       	call   c000b394 <VCache::writeWriteBuffer()>
c00212a1:	59                   	pop    ecx
c00212a2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00212a8:	e8 d7 a0 fe ff       	call   c000b384 <VCache::invalidateReadBuffer()>
c00212ad:	c7 04 24 bf 64 02 c0 	mov    DWORD PTR [esp],0xc00264bf
c00212b4:	e8 ad 5c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00212b9:	83 c4 10             	add    esp,0x10
c00212bc:	31 c0                	xor    eax,eax
c00212be:	8b 14 85 e0 ca 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3520]
c00212c5:	85 d2                	test   edx,edx
c00212c7:	74 0f                	je     c00212d8 <SATAPI::detectMedia()+0x4a>
c00212c9:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c00212cf:	75 07                	jne    c00212d8 <SATAPI::detectMedia()+0x4a>
c00212d1:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c00212d8:	40                   	inc    eax
c00212d9:	83 f8 1a             	cmp    eax,0x1a
c00212dc:	75 e0                	jne    c00212be <SATAPI::detectMedia()+0x30>
c00212de:	83 c4 08             	add    esp,0x8
c00212e1:	5b                   	pop    ebx
c00212e2:	c3                   	ret    
c00212e3:	90                   	nop

c00212e4 <SATAPI::open(int, int, void*)>:
c00212e4:	56                   	push   esi
c00212e5:	53                   	push   ebx
c00212e6:	51                   	push   ecx
c00212e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00212eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00212ef:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00212f9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00212ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021303:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002130d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021317:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002131e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021324:	e8 8d e9 fe ff       	call   c000fcb6 <Phys::allocatePage()>
c0021329:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002132f:	89 c6                	mov    esi,eax
c0021331:	e8 80 e9 fe ff       	call   c000fcb6 <Phys::allocatePage()>
c0021336:	81 c6 00 10 00 00    	add    esi,0x1000
c002133c:	39 c6                	cmp    esi,eax
c002133e:	74 10                	je     c0021350 <SATAPI::open(int, int, void*)+0x6c>
c0021340:	83 ec 0c             	sub    esp,0xc
c0021343:	68 d4 64 02 c0       	push   0xc00264d4
c0021348:	e8 6f e7 fe ff       	call   c000fabc <KePanic(char const*)>
c002134d:	83 c4 10             	add    esp,0x10
c0021350:	83 ec 0c             	sub    esp,0xc
c0021353:	6a 02                	push   0x2
c0021355:	e8 a9 1c ff ff       	call   c0013003 <Virt::allocateKernelVirtualPages(int)>
c002135a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021360:	6a 03                	push   0x3
c0021362:	50                   	push   eax
c0021363:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021369:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c002136f:	e8 68 23 ff ff       	call   c00136dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0021374:	83 c4 14             	add    esp,0x14
c0021377:	68 78 01 00 00       	push   0x178
c002137c:	e8 e7 e2 fe ff       	call   c000f668 <malloc>
c0021381:	83 c4 0c             	add    esp,0xc
c0021384:	6a 00                	push   0x0
c0021386:	68 ff ff ff 7f       	push   0x7fffffff
c002138b:	6a 00                	push   0x0
c002138d:	6a 00                	push   0x0
c002138f:	53                   	push   ebx
c0021390:	68 ea 64 02 c0       	push   0xc00264ea
c0021395:	89 c6                	mov    esi,eax
c0021397:	50                   	push   eax
c0021398:	e8 3d 94 fe ff       	call   c000a7da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002139d:	83 c4 14             	add    esp,0x14
c00213a0:	56                   	push   esi
c00213a1:	e8 f4 94 fe ff       	call   c000a89a <LogicalDisk::assignDriveLetter()>
c00213a6:	5a                   	pop    edx
c00213a7:	59                   	pop    ecx
c00213a8:	0f be c0             	movsx  eax,al
c00213ab:	50                   	push   eax
c00213ac:	68 30 63 02 c0       	push   0xc0026330
c00213b1:	e8 b0 5b fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00213b6:	58                   	pop    eax
c00213b7:	5a                   	pop    edx
c00213b8:	56                   	push   esi
c00213b9:	53                   	push   ebx
c00213ba:	e8 37 86 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c00213bf:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00213c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00213c8:	e8 75 8a fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c00213cd:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00213d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00213d7:	e8 b2 fe ff ff       	call   c002128e <SATAPI::detectMedia()>
c00213dc:	83 c4 14             	add    esp,0x14
c00213df:	31 c0                	xor    eax,eax
c00213e1:	5b                   	pop    ebx
c00213e2:	5e                   	pop    esi
c00213e3:	c3                   	ret    

c00213e4 <SATAPI::read(unsigned long long, int, void*)>:
c00213e4:	55                   	push   ebp
c00213e5:	57                   	push   edi
c00213e6:	56                   	push   esi
c00213e7:	53                   	push   ebx
c00213e8:	83 ec 3c             	sub    esp,0x3c
c00213eb:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c00213ef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00213f3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00213f7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00213fb:	83 fd 04             	cmp    ebp,0x4
c00213fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021402:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021406:	7e 10                	jle    c0021418 <SATAPI::read(unsigned long long, int, void*)+0x34>
c0021408:	83 ec 0c             	sub    esp,0xc
c002140b:	68 f8 64 02 c0       	push   0xc00264f8
c0021410:	e8 a7 e6 fe ff       	call   c000fabc <KePanic(char const*)>
c0021415:	83 c4 10             	add    esp,0x10
c0021418:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002141e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0021424:	51                   	push   ecx
c0021425:	50                   	push   eax
c0021426:	83 c0 02             	add    eax,0x2
c0021429:	c1 e0 07             	shl    eax,0x7
c002142c:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0021432:	50                   	push   eax
c0021433:	52                   	push   edx
c0021434:	e8 ab e6 ff ff       	call   c001fae4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0021439:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002143d:	b9 03 00 00 00       	mov    ecx,0x3
c0021442:	fc                   	cld    
c0021443:	31 c0                	xor    eax,eax
c0021445:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021447:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002144c:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0021451:	83 c4 0c             	add    esp,0xc
c0021454:	6a 00                	push   0x0
c0021456:	6a 00                	push   0x0
c0021458:	6a 00                	push   0x0
c002145a:	6a 00                	push   0x0
c002145c:	6a 02                	push   0x2
c002145e:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021462:	50                   	push   eax
c0021463:	53                   	push   ebx
c0021464:	e8 ff fa ff ff       	call   c0020f68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021469:	83 c4 20             	add    esp,0x20
c002146c:	85 c0                	test   eax,eax
c002146e:	89 c6                	mov    esi,eax
c0021470:	75 46                	jne    c00214b8 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c0021472:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021476:	b9 03 00 00 00       	mov    ecx,0x3
c002147b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002147d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021481:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0021486:	0f c8                	bswap  eax
c0021488:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002148c:	89 e8                	mov    eax,ebp
c002148e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021492:	50                   	push   eax
c0021493:	55                   	push   ebp
c0021494:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0021498:	c1 e5 0b             	shl    ebp,0xb
c002149b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002149f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00214a3:	55                   	push   ebp
c00214a4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00214a8:	50                   	push   eax
c00214a9:	53                   	push   ebx
c00214aa:	e8 b9 fa ff ff       	call   c0020f68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00214af:	83 c4 20             	add    esp,0x20
c00214b2:	85 c0                	test   eax,eax
c00214b4:	89 c6                	mov    esi,eax
c00214b6:	74 0c                	je     c00214c4 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c00214b8:	83 ec 0c             	sub    esp,0xc
c00214bb:	53                   	push   ebx
c00214bc:	e8 cd fd ff ff       	call   c002128e <SATAPI::detectMedia()>
c00214c1:	83 c4 10             	add    esp,0x10
c00214c4:	83 c4 3c             	add    esp,0x3c
c00214c7:	89 f0                	mov    eax,esi
c00214c9:	5b                   	pop    ebx
c00214ca:	5e                   	pop    esi
c00214cb:	5f                   	pop    edi
c00214cc:	5d                   	pop    ebp
c00214cd:	c3                   	ret    
c00214ce:	66 90                	xchg   ax,ax

c00214d0 <APICTimer::close(int, int, void*)>:
c00214d0:	b8 00 00 00 00       	mov    eax,0x0
c00214d5:	c3                   	ret    
c00214d6:	66 90                	xchg   ax,ax

c00214d8 <apicTimerHandler(regs*, void*)>:
c00214d8:	83 ec 0c             	sub    esp,0xc
c00214db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214df:	8b 08                	mov    ecx,DWORD PTR [eax]
c00214e1:	b8 10 27 00 00       	mov    eax,0x2710
c00214e6:	ba 00 00 00 00       	mov    edx,0x0
c00214eb:	f7 f1                	div    ecx
c00214ed:	83 ec 0c             	sub    esp,0xc
c00214f0:	50                   	push   eax
c00214f1:	e8 a2 9b fe ff       	call   c000b098 <timerHandler(unsigned int)>
c00214f6:	83 c4 10             	add    esp,0x10
c00214f9:	90                   	nop
c00214fa:	83 c4 0c             	add    esp,0xc
c00214fd:	c3                   	ret    
c00214fe:	66 90                	xchg   ax,ax

c0021500 <APICTimer::open(int, int, void*)>:
c0021500:	83 ec 0c             	sub    esp,0xc
c0021503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021507:	8b 00                	mov    eax,DWORD PTR [eax]
c0021509:	83 c0 24             	add    eax,0x24
c002150c:	8b 00                	mov    eax,DWORD PTR [eax]
c002150e:	83 ec 08             	sub    esp,0x8
c0021511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021515:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021519:	ff d0                	call   eax
c002151b:	83 c4 10             	add    esp,0x10
c002151e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021522:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021526:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002152c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021530:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021534:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002153a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002153e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021544:	83 ec 0c             	sub    esp,0xc
c0021547:	51                   	push   ecx
c0021548:	6a 01                	push   0x1
c002154a:	68 d8 14 02 c0       	push   0xc00214d8
c002154f:	52                   	push   edx
c0021550:	50                   	push   eax
c0021551:	e8 4c 84 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021556:	83 c4 20             	add    esp,0x20
c0021559:	89 c2                	mov    edx,eax
c002155b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002155f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021565:	b8 00 00 00 00       	mov    eax,0x0
c002156a:	83 c4 0c             	add    esp,0xc
c002156d:	c3                   	ret    
c002156e:	66 90                	xchg   ax,ax

c0021570 <APICTimer::write(int)>:
c0021570:	83 ec 0c             	sub    esp,0xc
c0021573:	83 ec 0c             	sub    esp,0xc
c0021576:	68 5c 65 02 c0       	push   0xc002655c
c002157b:	e8 3c e5 fe ff       	call   c000fabc <KePanic(char const*)>
c0021580:	83 c4 10             	add    esp,0x10
c0021583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021587:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002158b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021591:	90                   	nop
c0021592:	83 c4 0c             	add    esp,0xc
c0021595:	c3                   	ret    
c0021596:	66 90                	xchg   ax,ax

c0021598 <APICTimer::APICTimer()>:
c0021598:	83 ec 0c             	sub    esp,0xc
c002159b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002159f:	83 ec 08             	sub    esp,0x8
c00215a2:	68 6c 65 02 c0       	push   0xc002656c
c00215a7:	50                   	push   eax
c00215a8:	e8 1f 9a fe ff       	call   c000afcc <Timer::Timer(char const*)>
c00215ad:	83 c4 10             	add    esp,0x10
c00215b0:	ba 80 65 02 c0       	mov    edx,0xc0026580
c00215b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215b9:	89 10                	mov    DWORD PTR [eax],edx
c00215bb:	90                   	nop
c00215bc:	83 c4 0c             	add    esp,0xc
c00215bf:	c3                   	ret    

c00215c0 <PIT::write(int)>:
c00215c0:	83 ec 10             	sub    esp,0x10
c00215c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00215c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00215cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00215d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00215d5:	a3 b8 fd 02 c0       	mov    ds:0xc002fdb8,eax
c00215da:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00215df:	89 c2                	mov    edx,eax
c00215e1:	c1 fa 1f             	sar    edx,0x1f
c00215e4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00215e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215ec:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00215f3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00215f8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00215fc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0021601:	ee                   	out    dx,al
c0021602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021606:	0f b6 c0             	movzx  eax,al
c0021609:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021610:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021614:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021618:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002161d:	ee                   	out    dx,al
c002161e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021622:	c1 f8 08             	sar    eax,0x8
c0021625:	0f b6 c0             	movzx  eax,al
c0021628:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002162f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021633:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021637:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002163c:	ee                   	out    dx,al
c002163d:	90                   	nop
c002163e:	83 c4 10             	add    esp,0x10
c0021641:	c3                   	ret    
c0021642:	66 90                	xchg   ax,ax

c0021644 <pitHandler(regs*, void*)>:
c0021644:	83 ec 0c             	sub    esp,0xc
c0021647:	8b 0d b8 fd 02 c0    	mov    ecx,DWORD PTR ds:0xc002fdb8
c002164d:	b8 10 27 00 00       	mov    eax,0x2710
c0021652:	89 c2                	mov    edx,eax
c0021654:	c1 fa 1f             	sar    edx,0x1f
c0021657:	f7 f9                	idiv   ecx
c0021659:	83 ec 0c             	sub    esp,0xc
c002165c:	50                   	push   eax
c002165d:	e8 36 9a fe ff       	call   c000b098 <timerHandler(unsigned int)>
c0021662:	83 c4 10             	add    esp,0x10
c0021665:	90                   	nop
c0021666:	83 c4 0c             	add    esp,0xc
c0021669:	c3                   	ret    
c002166a:	66 90                	xchg   ax,ax

c002166c <PIT::open(int, int, void*)>:
c002166c:	83 ec 0c             	sub    esp,0xc
c002166f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021673:	8b 00                	mov    eax,DWORD PTR [eax]
c0021675:	83 c0 24             	add    eax,0x24
c0021678:	8b 00                	mov    eax,DWORD PTR [eax]
c002167a:	83 ec 08             	sub    esp,0x8
c002167d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021681:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021685:	ff d0                	call   eax
c0021687:	83 c4 10             	add    esp,0x10
c002168a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002168e:	83 ec 0c             	sub    esp,0xc
c0021691:	6a 00                	push   0x0
c0021693:	6a 01                	push   0x1
c0021695:	68 44 16 02 c0       	push   0xc0021644
c002169a:	6a 00                	push   0x0
c002169c:	50                   	push   eax
c002169d:	e8 00 83 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00216a2:	83 c4 20             	add    esp,0x20
c00216a5:	89 c2                	mov    edx,eax
c00216a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ab:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00216b1:	b8 00 00 00 00       	mov    eax,0x0
c00216b6:	83 c4 0c             	add    esp,0xc
c00216b9:	c3                   	ret    
c00216ba:	66 90                	xchg   ax,ax

c00216bc <PIT::close(int, int, void*)>:
c00216bc:	83 ec 0c             	sub    esp,0xc
c00216bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216c3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00216cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216d1:	6a 01                	push   0x1
c00216d3:	68 44 16 02 c0       	push   0xc0021644
c00216d8:	6a 00                	push   0x0
c00216da:	50                   	push   eax
c00216db:	e8 f8 82 fe ff       	call   c00099d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00216e0:	83 c4 10             	add    esp,0x10
c00216e3:	b8 00 00 00 00       	mov    eax,0x0
c00216e8:	83 c4 0c             	add    esp,0xc
c00216eb:	c3                   	ret    

c00216ec <PIT::PIT()>:
c00216ec:	83 ec 0c             	sub    esp,0xc
c00216ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216f3:	83 ec 08             	sub    esp,0x8
c00216f6:	68 a8 65 02 c0       	push   0xc00265a8
c00216fb:	50                   	push   eax
c00216fc:	e8 cb 98 fe ff       	call   c000afcc <Timer::Timer(char const*)>
c0021701:	83 c4 10             	add    esp,0x10
c0021704:	ba d0 65 02 c0       	mov    edx,0xc00265d0
c0021709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002170d:	89 10                	mov    DWORD PTR [eax],edx
c002170f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021713:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021719:	0f b6 d0             	movzx  edx,al
c002171c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021720:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0021727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002172b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021731:	0f b6 d0             	movzx  edx,al
c0021734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021738:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002173d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021741:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021747:	8d 50 01             	lea    edx,[eax+0x1]
c002174a:	88 d1                	mov    cl,dl
c002174c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021750:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0021756:	0f b6 d0             	movzx  edx,al
c0021759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002175d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021761:	83 e1 3f             	and    ecx,0x3f
c0021764:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021768:	90                   	nop
c0021769:	83 c4 0c             	add    esp,0xc
c002176c:	c3                   	ret    
c002176d:	66 90                	xchg   ax,ax
c002176f:	90                   	nop

c0021770 <avxDetect>:
c0021770:	b8 01 00 00 00       	mov    eax,0x1
c0021775:	0f a2                	cpuid  
c0021777:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002177d:	74 15                	je     c0021794 <avxDetect.noAVX>
c002177f:	b8 01 00 00 00       	mov    eax,0x1
c0021784:	0f a2                	cpuid  
c0021786:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002178c:	74 06                	je     c0021794 <avxDetect.noAVX>
c002178e:	b8 01 00 00 00       	mov    eax,0x1
c0021793:	c3                   	ret    

c0021794 <avxDetect.noAVX>:
c0021794:	b8 00 00 00 00       	mov    eax,0x0
c0021799:	c3                   	ret    

c002179a <avxSave>:
c002179a:	53                   	push   ebx
c002179b:	52                   	push   edx
c002179c:	31 c0                	xor    eax,eax
c002179e:	48                   	dec    eax
c002179f:	89 c2                	mov    edx,eax
c00217a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00217a5:	0f ae 23             	xsave  [ebx]
c00217a8:	5a                   	pop    edx
c00217a9:	5b                   	pop    ebx
c00217aa:	c3                   	ret    

c00217ab <avxLoad>:
c00217ab:	53                   	push   ebx
c00217ac:	52                   	push   edx
c00217ad:	31 c0                	xor    eax,eax
c00217af:	48                   	dec    eax
c00217b0:	89 c2                	mov    edx,eax
c00217b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00217b6:	0f ae 2b             	xrstor [ebx]
c00217b9:	5a                   	pop    edx
c00217ba:	5b                   	pop    ebx
c00217bb:	c3                   	ret    

c00217bc <avxInit>:
c00217bc:	e8 17 03 00 00       	call   c0021ad8 <sseInit>
c00217c1:	50                   	push   eax
c00217c2:	51                   	push   ecx
c00217c3:	0f 20 e0             	mov    eax,cr4
c00217c6:	0d 00 00 04 00       	or     eax,0x40000
c00217cb:	0f 22 e0             	mov    cr4,eax
c00217ce:	31 c9                	xor    ecx,ecx
c00217d0:	0f 01 d0             	xgetbv 
c00217d3:	0d 07 00 00 00       	or     eax,0x7
c00217d8:	0f 01 d1             	xsetbv 
c00217db:	59                   	pop    ecx
c00217dc:	58                   	pop    eax
c00217dd:	c3                   	ret    

c00217de <avxClose>:
c00217de:	c3                   	ret    
c00217df:	90                   	nop

c00217e0 <isr0>:
c00217e0:	fa                   	cli    
c00217e1:	68 00 00 00 00       	push   0x0
c00217e6:	68 00 00 00 00       	push   0x0
c00217eb:	e9 56 01 00 00       	jmp    c0021946 <int_common_stub>

c00217f0 <isr1>:
c00217f0:	fa                   	cli    
c00217f1:	6a 00                	push   0x0
c00217f3:	6a 01                	push   0x1
c00217f5:	e9 4c 01 00 00       	jmp    c0021946 <int_common_stub>

c00217fa <isr2>:
c00217fa:	fa                   	cli    
c00217fb:	6a 00                	push   0x0
c00217fd:	6a 02                	push   0x2
c00217ff:	e9 42 01 00 00       	jmp    c0021946 <int_common_stub>

c0021804 <isr3>:
c0021804:	fa                   	cli    
c0021805:	6a 00                	push   0x0
c0021807:	6a 03                	push   0x3
c0021809:	e9 38 01 00 00       	jmp    c0021946 <int_common_stub>

c002180e <isr4>:
c002180e:	fa                   	cli    
c002180f:	6a 00                	push   0x0
c0021811:	6a 04                	push   0x4
c0021813:	e9 2e 01 00 00       	jmp    c0021946 <int_common_stub>

c0021818 <isr5>:
c0021818:	fa                   	cli    
c0021819:	6a 00                	push   0x0
c002181b:	6a 05                	push   0x5
c002181d:	e9 24 01 00 00       	jmp    c0021946 <int_common_stub>

c0021822 <isr6>:
c0021822:	fa                   	cli    
c0021823:	6a 00                	push   0x0
c0021825:	6a 06                	push   0x6
c0021827:	e9 1a 01 00 00       	jmp    c0021946 <int_common_stub>

c002182c <isr7>:
c002182c:	fa                   	cli    
c002182d:	6a 00                	push   0x0
c002182f:	6a 07                	push   0x7
c0021831:	e9 10 01 00 00       	jmp    c0021946 <int_common_stub>

c0021836 <isr8>:
c0021836:	fa                   	cli    
c0021837:	6a 08                	push   0x8
c0021839:	e9 08 01 00 00       	jmp    c0021946 <int_common_stub>

c002183e <isr9>:
c002183e:	fa                   	cli    
c002183f:	6a 00                	push   0x0
c0021841:	6a 09                	push   0x9
c0021843:	e9 fe 00 00 00       	jmp    c0021946 <int_common_stub>

c0021848 <isr10>:
c0021848:	fa                   	cli    
c0021849:	6a 0a                	push   0xa
c002184b:	e9 f6 00 00 00       	jmp    c0021946 <int_common_stub>

c0021850 <isr11>:
c0021850:	fa                   	cli    
c0021851:	6a 0b                	push   0xb
c0021853:	e9 ee 00 00 00       	jmp    c0021946 <int_common_stub>

c0021858 <isr12>:
c0021858:	fa                   	cli    
c0021859:	6a 0c                	push   0xc
c002185b:	e9 e6 00 00 00       	jmp    c0021946 <int_common_stub>

c0021860 <isr13>:
c0021860:	fa                   	cli    
c0021861:	6a 0d                	push   0xd
c0021863:	53                   	push   ebx
c0021864:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021868:	81 fb 0b 1a 02 c0    	cmp    ebx,0xc0021a0b
c002186e:	5b                   	pop    ebx
c002186f:	0f 84 98 01 00 00    	je     c0021a0d <finishSignal2>
c0021875:	e9 cc 00 00 00       	jmp    c0021946 <int_common_stub>

c002187a <isr14>:
c002187a:	fa                   	cli    
c002187b:	6a 0e                	push   0xe
c002187d:	e9 c4 00 00 00       	jmp    c0021946 <int_common_stub>

c0021882 <isr15>:
c0021882:	fa                   	cli    
c0021883:	6a 00                	push   0x0
c0021885:	6a 0f                	push   0xf
c0021887:	e9 ba 00 00 00       	jmp    c0021946 <int_common_stub>

c002188c <isr16>:
c002188c:	fa                   	cli    
c002188d:	6a 00                	push   0x0
c002188f:	6a 10                	push   0x10
c0021891:	e9 b0 00 00 00       	jmp    c0021946 <int_common_stub>

c0021896 <isr17>:
c0021896:	fa                   	cli    
c0021897:	6a 00                	push   0x0
c0021899:	6a 11                	push   0x11
c002189b:	e9 a6 00 00 00       	jmp    c0021946 <int_common_stub>

c00218a0 <isr18>:
c00218a0:	fa                   	cli    
c00218a1:	6a 00                	push   0x0
c00218a3:	6a 12                	push   0x12
c00218a5:	e9 9c 00 00 00       	jmp    c0021946 <int_common_stub>

c00218aa <irq3>:
c00218aa:	fa                   	cli    
c00218ab:	6a 00                	push   0x0
c00218ad:	6a 23                	push   0x23
c00218af:	e9 92 00 00 00       	jmp    c0021946 <int_common_stub>

c00218b4 <irq4>:
c00218b4:	fa                   	cli    
c00218b5:	6a 00                	push   0x0
c00218b7:	6a 24                	push   0x24
c00218b9:	e9 88 00 00 00       	jmp    c0021946 <int_common_stub>

c00218be <irq5>:
c00218be:	fa                   	cli    
c00218bf:	6a 00                	push   0x0
c00218c1:	6a 25                	push   0x25
c00218c3:	e9 7e 00 00 00       	jmp    c0021946 <int_common_stub>

c00218c8 <irq6>:
c00218c8:	fa                   	cli    
c00218c9:	6a 00                	push   0x0
c00218cb:	6a 26                	push   0x26
c00218cd:	e9 74 00 00 00       	jmp    c0021946 <int_common_stub>

c00218d2 <irq7>:
c00218d2:	fa                   	cli    
c00218d3:	6a 00                	push   0x0
c00218d5:	6a 27                	push   0x27
c00218d7:	e9 6a 00 00 00       	jmp    c0021946 <int_common_stub>

c00218dc <irq8>:
c00218dc:	fa                   	cli    
c00218dd:	6a 00                	push   0x0
c00218df:	6a 28                	push   0x28
c00218e1:	e9 60 00 00 00       	jmp    c0021946 <int_common_stub>

c00218e6 <irq9>:
c00218e6:	fa                   	cli    
c00218e7:	6a 00                	push   0x0
c00218e9:	6a 29                	push   0x29
c00218eb:	e9 56 00 00 00       	jmp    c0021946 <int_common_stub>

c00218f0 <irq10>:
c00218f0:	fa                   	cli    
c00218f1:	6a 00                	push   0x0
c00218f3:	6a 2a                	push   0x2a
c00218f5:	e9 4c 00 00 00       	jmp    c0021946 <int_common_stub>

c00218fa <irq11>:
c00218fa:	fa                   	cli    
c00218fb:	6a 00                	push   0x0
c00218fd:	6a 2b                	push   0x2b
c00218ff:	e9 42 00 00 00       	jmp    c0021946 <int_common_stub>

c0021904 <irq12>:
c0021904:	fa                   	cli    
c0021905:	6a 00                	push   0x0
c0021907:	6a 2c                	push   0x2c
c0021909:	e9 38 00 00 00       	jmp    c0021946 <int_common_stub>

c002190e <irq13>:
c002190e:	fa                   	cli    
c002190f:	6a 00                	push   0x0
c0021911:	6a 2d                	push   0x2d
c0021913:	e9 2e 00 00 00       	jmp    c0021946 <int_common_stub>

c0021918 <irq14>:
c0021918:	fa                   	cli    
c0021919:	6a 00                	push   0x0
c002191b:	6a 2e                	push   0x2e
c002191d:	e9 24 00 00 00       	jmp    c0021946 <int_common_stub>

c0021922 <irq15>:
c0021922:	fa                   	cli    
c0021923:	6a 00                	push   0x0
c0021925:	6a 2f                	push   0x2f
c0021927:	e9 1a 00 00 00       	jmp    c0021946 <int_common_stub>

c002192c <irq1>:
c002192c:	fa                   	cli    
c002192d:	6a 00                	push   0x0
c002192f:	6a 21                	push   0x21
c0021931:	eb 13                	jmp    c0021946 <int_common_stub>

c0021933 <irq2>:
c0021933:	fa                   	cli    
c0021934:	6a 00                	push   0x0
c0021936:	6a 22                	push   0x22
c0021938:	eb 0c                	jmp    c0021946 <int_common_stub>

c002193a <isr96>:
c002193a:	6a 00                	push   0x0
c002193c:	6a 60                	push   0x60
c002193e:	fb                   	sti    
c002193f:	eb 05                	jmp    c0021946 <int_common_stub>

c0021941 <irq0>:
c0021941:	fa                   	cli    
c0021942:	6a 00                	push   0x0
c0021944:	6a 20                	push   0x20

c0021946 <int_common_stub>:
c0021946:	60                   	pusha  
c0021947:	1e                   	push   ds
c0021948:	06                   	push   es
c0021949:	0f a0                	push   fs
c002194b:	0f a8                	push   gs
c002194d:	66 b8 10 00          	mov    ax,0x10
c0021951:	66 8e d8             	mov    ds,ax
c0021954:	66 8e c0             	mov    es,ax
c0021957:	66 8e e0             	mov    fs,ax
c002195a:	66 8e e8             	mov    gs,ax
c002195d:	54                   	push   esp
c002195e:	fc                   	cld    
c002195f:	e8 06 95 ff ff       	call   c001ae6a <int_handler>
c0021964:	81 c4 04 00 00 00    	add    esp,0x4
c002196a:	e8 0c f5 fe ff       	call   c0010e7b <KiCheckSignalZ>
c002196f:	85 c0                	test   eax,eax
c0021971:	75 0e                	jne    c0021981 <doSignals>
c0021973:	0f a9                	pop    gs
c0021975:	0f a1                	pop    fs
c0021977:	07                   	pop    es
c0021978:	1f                   	pop    ds
c0021979:	61                   	popa   
c002197a:	81 c4 08 00 00 00    	add    esp,0x8
c0021980:	cf                   	iret   

c0021981 <doSignals>:
c0021981:	0f a9                	pop    gs
c0021983:	0f a1                	pop    fs
c0021985:	07                   	pop    es
c0021986:	1f                   	pop    ds
c0021987:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002198c:	61                   	popa   
c002198d:	53                   	push   ebx
c002198e:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c0021994:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021997:	5b                   	pop    ebx
c0021998:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002199d:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c00219a0:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c00219a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00219a6:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c00219a9:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c00219ac:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c00219af:	81 c4 08 00 00 00    	add    esp,0x8
c00219b5:	5e                   	pop    esi
c00219b6:	5b                   	pop    ebx
c00219b7:	59                   	pop    ecx
c00219b8:	5a                   	pop    edx
c00219b9:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c00219bc:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c00219bf:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00219c2:	52                   	push   edx
c00219c3:	51                   	push   ecx
c00219c4:	53                   	push   ebx
c00219c5:	56                   	push   esi
c00219c6:	81 ec 08 00 00 00    	sub    esp,0x8
c00219cc:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00219cf:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00219d2:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c00219d5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00219d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00219db:	60                   	pusha  
c00219dc:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c00219e2:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c00219e5:	89 e3                	mov    ebx,esp
c00219e7:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c00219ea:	52                   	push   edx
c00219eb:	68 0b 1a 02 c0       	push   0xc0021a0b
c00219f0:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c00219f3:	89 dc                	mov    esp,ebx
c00219f5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00219f8:	68 23 00 00 00       	push   0x23
c00219fd:	51                   	push   ecx
c00219fe:	68 02 02 00 00       	push   0x202
c0021a03:	68 1b 00 00 00       	push   0x1b
c0021a08:	ff 36                	push   DWORD PTR [esi]
c0021a0a:	cf                   	iret   

c0021a0b <finishSignal>:
c0021a0b:	cd 0f                	int    0xf

c0021a0d <finishSignal2>:
c0021a0d:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c0021a13:	e8 ef f4 fe ff       	call   c0010f07 <KiFinishSignalZ>
c0021a18:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021a1e:	68 23 00 00 00       	push   0x23
c0021a23:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021a26:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021a29:	68 1b 00 00 00       	push   0x1b
c0021a2e:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c0021a31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a34:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021a37:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021a3a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021a3d:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c0021a40:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0021a43:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021a46:	cf                   	iret   
c0021a47:	90                   	nop

c0021a48 <irq16>:
c0021a48:	fa                   	cli    
c0021a49:	6a 00                	push   0x0
c0021a4b:	6a 30                	push   0x30
c0021a4d:	e9 f4 fe ff ff       	jmp    c0021946 <int_common_stub>

c0021a52 <irq17>:
c0021a52:	fa                   	cli    
c0021a53:	6a 00                	push   0x0
c0021a55:	6a 31                	push   0x31
c0021a57:	e9 ea fe ff ff       	jmp    c0021946 <int_common_stub>

c0021a5c <irq18>:
c0021a5c:	fa                   	cli    
c0021a5d:	6a 00                	push   0x0
c0021a5f:	6a 32                	push   0x32
c0021a61:	e9 e0 fe ff ff       	jmp    c0021946 <int_common_stub>

c0021a66 <irq19>:
c0021a66:	fa                   	cli    
c0021a67:	6a 00                	push   0x0
c0021a69:	6a 33                	push   0x33
c0021a6b:	e9 d6 fe ff ff       	jmp    c0021946 <int_common_stub>

c0021a70 <irq20>:
c0021a70:	fa                   	cli    
c0021a71:	6a 00                	push   0x0
c0021a73:	6a 34                	push   0x34
c0021a75:	e9 cc fe ff ff       	jmp    c0021946 <int_common_stub>

c0021a7a <irq21>:
c0021a7a:	fa                   	cli    
c0021a7b:	6a 00                	push   0x0
c0021a7d:	6a 35                	push   0x35
c0021a7f:	e9 c2 fe ff ff       	jmp    c0021946 <int_common_stub>

c0021a84 <irq22>:
c0021a84:	fa                   	cli    
c0021a85:	6a 00                	push   0x0
c0021a87:	6a 36                	push   0x36
c0021a89:	e9 b8 fe ff ff       	jmp    c0021946 <int_common_stub>

c0021a8e <irq23>:
c0021a8e:	fa                   	cli    
c0021a8f:	6a 00                	push   0x0
c0021a91:	6a 37                	push   0x37
c0021a93:	e9 ae fe ff ff       	jmp    c0021946 <int_common_stub>
c0021a98:	66 90                	xchg   ax,ax
c0021a9a:	66 90                	xchg   ax,ax
c0021a9c:	66 90                	xchg   ax,ax
c0021a9e:	66 90                	xchg   ax,ax

c0021aa0 <i386GetRDRAND>:
c0021aa0:	b9 64 00 00 00       	mov    ecx,0x64

c0021aa5 <retry>:
c0021aa5:	0f c7 f0             	rdrand eax
c0021aa8:	72 05                	jb     c0021aaf <retry.done>
c0021aaa:	e2 f9                	loop   c0021aa5 <retry>

c0021aac <retry.fail>:
c0021aac:	31 c0                	xor    eax,eax
c0021aae:	c3                   	ret    

c0021aaf <retry.done>:
c0021aaf:	c3                   	ret    

c0021ab0 <sseDetect>:
c0021ab0:	b8 01 00 00 00       	mov    eax,0x1
c0021ab5:	0f a2                	cpuid  
c0021ab7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0021abd:	74 06                	je     c0021ac5 <sseDetect.noSSE>
c0021abf:	b8 01 00 00 00       	mov    eax,0x1
c0021ac4:	c3                   	ret    

c0021ac5 <sseDetect.noSSE>:
c0021ac5:	31 c0                	xor    eax,eax
c0021ac7:	c3                   	ret    

c0021ac8 <sseSave>:
c0021ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021acc:	0f ae 00             	fxsave [eax]
c0021acf:	c3                   	ret    

c0021ad0 <sseLoad>:
c0021ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ad4:	0f ae 08             	fxrstor [eax]
c0021ad7:	c3                   	ret    

c0021ad8 <sseInit>:
c0021ad8:	e8 48 00 00 00       	call   c0021b25 <x87Init>
c0021add:	0f 20 e0             	mov    eax,cr4
c0021ae0:	66 0d 00 06          	or     ax,0x600
c0021ae4:	0f 22 e0             	mov    cr4,eax
c0021ae7:	c3                   	ret    

c0021ae8 <sseClose>:
c0021ae8:	c3                   	ret    
c0021ae9:	66 90                	xchg   ax,ax
c0021aeb:	66 90                	xchg   ax,ax
c0021aed:	66 90                	xchg   ax,ax
c0021aef:	90                   	nop

c0021af0 <value_37F>:
c0021af0:	7f 03                	jg     c0021af5 <value_37A+0x1>

c0021af2 <value_37E>:
c0021af2:	7e 03                	jle    c0021af7 <x87Detect+0x1>

c0021af4 <value_37A>:
c0021af4:	7a 03                	jp     c0021af9 <x87Detect+0x3>

c0021af6 <x87Detect>:
c0021af6:	53                   	push   ebx
c0021af7:	51                   	push   ecx
c0021af8:	52                   	push   edx
c0021af9:	b8 01 00 00 00       	mov    eax,0x1
c0021afe:	0f a2                	cpuid  
c0021b00:	f7 c2 01 00 00 00    	test   edx,0x1
c0021b06:	74 06                	je     c0021b0e <x87Detect.nox87>
c0021b08:	b8 01 00 00 00       	mov    eax,0x1
c0021b0d:	c3                   	ret    

c0021b0e <x87Detect.nox87>:
c0021b0e:	b8 00 00 00 00       	mov    eax,0x0
c0021b13:	5a                   	pop    edx
c0021b14:	59                   	pop    ecx
c0021b15:	5b                   	pop    ebx
c0021b16:	c3                   	ret    

c0021b17 <x87Save>:
c0021b17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b1b:	dd 30                	fnsave [eax]
c0021b1d:	c3                   	ret    

c0021b1e <x87Load>:
c0021b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b22:	dd 20                	frstor [eax]
c0021b24:	c3                   	ret    

c0021b25 <x87Init>:
c0021b25:	0f 20 c0             	mov    eax,cr0
c0021b28:	66 25 fb ff          	and    ax,0xfffb
c0021b2c:	66 0d 22 00          	or     ax,0x22
c0021b30:	0f 22 c0             	mov    cr0,eax
c0021b33:	db e3                	fninit 
c0021b35:	0f 06                	clts   
c0021b37:	d9 2d f4 1a 02 c0    	fldcw  WORD PTR ds:0xc0021af4
c0021b3d:	c3                   	ret    

c0021b3e <x87Close>:
c0021b3e:	c3                   	ret    
c0021b3f:	90                   	nop

c0021b40 <__do_global_ctors_aux>:
c0021b40:	a1 f4 2a 02 c0       	mov    eax,ds:0xc0022af4
c0021b45:	83 f8 ff             	cmp    eax,0xffffffff
c0021b48:	74 1a                	je     c0021b64 <__do_global_ctors_aux+0x24>
c0021b4a:	55                   	push   ebp
c0021b4b:	89 e5                	mov    ebp,esp
c0021b4d:	53                   	push   ebx
c0021b4e:	52                   	push   edx
c0021b4f:	bb f4 2a 02 c0       	mov    ebx,0xc0022af4
c0021b54:	ff d0                	call   eax
c0021b56:	83 eb 04             	sub    ebx,0x4
c0021b59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021b5b:	83 f8 ff             	cmp    eax,0xffffffff
c0021b5e:	75 f4                	jne    c0021b54 <__do_global_ctors_aux+0x14>
c0021b60:	58                   	pop    eax
c0021b61:	5b                   	pop    ebx
c0021b62:	5d                   	pop    ebp
c0021b63:	c3                   	ret    
c0021b64:	c3                   	ret    
c0021b65:	66 90                	xchg   ax,ax
c0021b67:	90                   	nop

c0021b68 <__divdi3>:
c0021b68:	55                   	push   ebp
c0021b69:	57                   	push   edi
c0021b6a:	56                   	push   esi
c0021b6b:	53                   	push   ebx
c0021b6c:	83 ec 1c             	sub    esp,0x1c
c0021b6f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021b73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021b77:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021b7a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021b7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021b82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021b86:	85 db                	test   ebx,ebx
c0021b88:	0f 88 8e 00 00 00    	js     c0021c1c <__divdi3+0xb4>
c0021b8e:	89 dd                	mov    ebp,ebx
c0021b90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021b98:	89 d3                	mov    ebx,edx
c0021b9a:	85 d2                	test   edx,edx
c0021b9c:	79 0d                	jns    c0021bab <__divdi3+0x43>
c0021b9e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021ba2:	f7 d8                	neg    eax
c0021ba4:	83 d2 00             	adc    edx,0x0
c0021ba7:	f7 da                	neg    edx
c0021ba9:	89 d3                	mov    ebx,edx
c0021bab:	89 c7                	mov    edi,eax
c0021bad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021bb0:	85 db                	test   ebx,ebx
c0021bb2:	75 48                	jne    c0021bfc <__divdi3+0x94>
c0021bb4:	39 ef                	cmp    edi,ebp
c0021bb6:	76 24                	jbe    c0021bdc <__divdi3+0x74>
c0021bb8:	89 ea                	mov    edx,ebp
c0021bba:	f7 f7                	div    edi
c0021bbc:	89 c1                	mov    ecx,eax
c0021bbe:	31 f6                	xor    esi,esi
c0021bc0:	89 c8                	mov    eax,ecx
c0021bc2:	89 f2                	mov    edx,esi
c0021bc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021bc8:	85 c9                	test   ecx,ecx
c0021bca:	74 07                	je     c0021bd3 <__divdi3+0x6b>
c0021bcc:	f7 d8                	neg    eax
c0021bce:	83 d2 00             	adc    edx,0x0
c0021bd1:	f7 da                	neg    edx
c0021bd3:	83 c4 1c             	add    esp,0x1c
c0021bd6:	5b                   	pop    ebx
c0021bd7:	5e                   	pop    esi
c0021bd8:	5f                   	pop    edi
c0021bd9:	5d                   	pop    ebp
c0021bda:	c3                   	ret    
c0021bdb:	90                   	nop
c0021bdc:	85 ff                	test   edi,edi
c0021bde:	75 0b                	jne    c0021beb <__divdi3+0x83>
c0021be0:	b8 01 00 00 00       	mov    eax,0x1
c0021be5:	31 d2                	xor    edx,edx
c0021be7:	f7 f3                	div    ebx
c0021be9:	89 c7                	mov    edi,eax
c0021beb:	31 d2                	xor    edx,edx
c0021bed:	89 e8                	mov    eax,ebp
c0021bef:	f7 f7                	div    edi
c0021bf1:	89 c6                	mov    esi,eax
c0021bf3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021bf6:	f7 f7                	div    edi
c0021bf8:	89 c1                	mov    ecx,eax
c0021bfa:	eb c4                	jmp    c0021bc0 <__divdi3+0x58>
c0021bfc:	39 eb                	cmp    ebx,ebp
c0021bfe:	77 3c                	ja     c0021c3c <__divdi3+0xd4>
c0021c00:	0f bd f3             	bsr    esi,ebx
c0021c03:	83 f6 1f             	xor    esi,0x1f
c0021c06:	75 40                	jne    c0021c48 <__divdi3+0xe0>
c0021c08:	39 eb                	cmp    ebx,ebp
c0021c0a:	72 09                	jb     c0021c15 <__divdi3+0xad>
c0021c0c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021c0f:	0f 87 97 00 00 00    	ja     c0021cac <__divdi3+0x144>
c0021c15:	b9 01 00 00 00       	mov    ecx,0x1
c0021c1a:	eb a4                	jmp    c0021bc0 <__divdi3+0x58>
c0021c1c:	f7 d9                	neg    ecx
c0021c1e:	83 d3 00             	adc    ebx,0x0
c0021c21:	f7 db                	neg    ebx
c0021c23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021c26:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021c2a:	89 dd                	mov    ebp,ebx
c0021c2c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021c34:	e9 5f ff ff ff       	jmp    c0021b98 <__divdi3+0x30>
c0021c39:	8d 76 00             	lea    esi,[esi+0x0]
c0021c3c:	31 f6                	xor    esi,esi
c0021c3e:	31 c9                	xor    ecx,ecx
c0021c40:	e9 7b ff ff ff       	jmp    c0021bc0 <__divdi3+0x58>
c0021c45:	8d 76 00             	lea    esi,[esi+0x0]
c0021c48:	b8 20 00 00 00       	mov    eax,0x20
c0021c4d:	29 f0                	sub    eax,esi
c0021c4f:	89 f1                	mov    ecx,esi
c0021c51:	d3 e3                	shl    ebx,cl
c0021c53:	89 fa                	mov    edx,edi
c0021c55:	88 c1                	mov    cl,al
c0021c57:	d3 ea                	shr    edx,cl
c0021c59:	09 da                	or     edx,ebx
c0021c5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021c5f:	89 f1                	mov    ecx,esi
c0021c61:	d3 e7                	shl    edi,cl
c0021c63:	89 eb                	mov    ebx,ebp
c0021c65:	88 c1                	mov    cl,al
c0021c67:	d3 eb                	shr    ebx,cl
c0021c69:	89 f1                	mov    ecx,esi
c0021c6b:	d3 e5                	shl    ebp,cl
c0021c6d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021c70:	88 c1                	mov    cl,al
c0021c72:	d3 ea                	shr    edx,cl
c0021c74:	09 d5                	or     ebp,edx
c0021c76:	89 e8                	mov    eax,ebp
c0021c78:	89 da                	mov    edx,ebx
c0021c7a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0021c7e:	89 d3                	mov    ebx,edx
c0021c80:	89 c5                	mov    ebp,eax
c0021c82:	f7 e7                	mul    edi
c0021c84:	39 d3                	cmp    ebx,edx
c0021c86:	72 18                	jb     c0021ca0 <__divdi3+0x138>
c0021c88:	74 0a                	je     c0021c94 <__divdi3+0x12c>
c0021c8a:	89 e9                	mov    ecx,ebp
c0021c8c:	31 f6                	xor    esi,esi
c0021c8e:	e9 2d ff ff ff       	jmp    c0021bc0 <__divdi3+0x58>
c0021c93:	90                   	nop
c0021c94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021c97:	89 f1                	mov    ecx,esi
c0021c99:	d3 e7                	shl    edi,cl
c0021c9b:	39 c7                	cmp    edi,eax
c0021c9d:	73 eb                	jae    c0021c8a <__divdi3+0x122>
c0021c9f:	90                   	nop
c0021ca0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021ca3:	31 f6                	xor    esi,esi
c0021ca5:	e9 16 ff ff ff       	jmp    c0021bc0 <__divdi3+0x58>
c0021caa:	66 90                	xchg   ax,ax
c0021cac:	31 c9                	xor    ecx,ecx
c0021cae:	e9 0d ff ff ff       	jmp    c0021bc0 <__divdi3+0x58>
c0021cb3:	90                   	nop

c0021cb4 <__moddi3>:
c0021cb4:	55                   	push   ebp
c0021cb5:	57                   	push   edi
c0021cb6:	56                   	push   esi
c0021cb7:	53                   	push   ebx
c0021cb8:	83 ec 2c             	sub    esp,0x2c
c0021cbb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021cbf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021cc3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021cc7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021ccb:	85 db                	test   ebx,ebx
c0021ccd:	0f 88 85 00 00 00    	js     c0021d58 <__moddi3+0xa4>
c0021cd3:	89 de                	mov    esi,ebx
c0021cd5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021cdd:	89 d7                	mov    edi,edx
c0021cdf:	85 d2                	test   edx,edx
c0021ce1:	79 09                	jns    c0021cec <__moddi3+0x38>
c0021ce3:	f7 d8                	neg    eax
c0021ce5:	83 d2 00             	adc    edx,0x0
c0021ce8:	f7 da                	neg    edx
c0021cea:	89 d7                	mov    edi,edx
c0021cec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021cf0:	89 cd                	mov    ebp,ecx
c0021cf2:	85 ff                	test   edi,edi
c0021cf4:	75 52                	jne    c0021d48 <__moddi3+0x94>
c0021cf6:	89 c3                	mov    ebx,eax
c0021cf8:	39 f0                	cmp    eax,esi
c0021cfa:	76 24                	jbe    c0021d20 <__moddi3+0x6c>
c0021cfc:	89 c8                	mov    eax,ecx
c0021cfe:	89 f2                	mov    edx,esi
c0021d00:	f7 f3                	div    ebx
c0021d02:	89 d6                	mov    esi,edx
c0021d04:	89 f0                	mov    eax,esi
c0021d06:	31 d2                	xor    edx,edx
c0021d08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021d0c:	85 c9                	test   ecx,ecx
c0021d0e:	74 07                	je     c0021d17 <__moddi3+0x63>
c0021d10:	f7 d8                	neg    eax
c0021d12:	83 d2 00             	adc    edx,0x0
c0021d15:	f7 da                	neg    edx
c0021d17:	83 c4 2c             	add    esp,0x2c
c0021d1a:	5b                   	pop    ebx
c0021d1b:	5e                   	pop    esi
c0021d1c:	5f                   	pop    edi
c0021d1d:	5d                   	pop    ebp
c0021d1e:	c3                   	ret    
c0021d1f:	90                   	nop
c0021d20:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021d24:	85 db                	test   ebx,ebx
c0021d26:	75 0d                	jne    c0021d35 <__moddi3+0x81>
c0021d28:	b8 01 00 00 00       	mov    eax,0x1
c0021d2d:	31 d2                	xor    edx,edx
c0021d2f:	f7 f7                	div    edi
c0021d31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021d35:	89 f0                	mov    eax,esi
c0021d37:	31 d2                	xor    edx,edx
c0021d39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021d3d:	f7 f7                	div    edi
c0021d3f:	89 e8                	mov    eax,ebp
c0021d41:	f7 f7                	div    edi
c0021d43:	89 d6                	mov    esi,edx
c0021d45:	eb bd                	jmp    c0021d04 <__moddi3+0x50>
c0021d47:	90                   	nop
c0021d48:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021d4c:	39 f7                	cmp    edi,esi
c0021d4e:	76 20                	jbe    c0021d70 <__moddi3+0xbc>
c0021d50:	89 c8                	mov    eax,ecx
c0021d52:	89 f2                	mov    edx,esi
c0021d54:	eb b2                	jmp    c0021d08 <__moddi3+0x54>
c0021d56:	66 90                	xchg   ax,ax
c0021d58:	f7 d9                	neg    ecx
c0021d5a:	83 d3 00             	adc    ebx,0x0
c0021d5d:	f7 db                	neg    ebx
c0021d5f:	89 de                	mov    esi,ebx
c0021d61:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021d69:	e9 6f ff ff ff       	jmp    c0021cdd <__moddi3+0x29>
c0021d6e:	66 90                	xchg   ax,ax
c0021d70:	0f bd c7             	bsr    eax,edi
c0021d73:	83 f0 1f             	xor    eax,0x1f
c0021d76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d7a:	75 24                	jne    c0021da0 <__moddi3+0xec>
c0021d7c:	39 f7                	cmp    edi,esi
c0021d7e:	72 06                	jb     c0021d86 <__moddi3+0xd2>
c0021d80:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021d84:	77 0c                	ja     c0021d92 <__moddi3+0xde>
c0021d86:	89 e9                	mov    ecx,ebp
c0021d88:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021d8c:	19 fe                	sbb    esi,edi
c0021d8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021d92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021d96:	89 f2                	mov    edx,esi
c0021d98:	e9 6b ff ff ff       	jmp    c0021d08 <__moddi3+0x54>
c0021d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0021da0:	b8 20 00 00 00       	mov    eax,0x20
c0021da5:	89 c2                	mov    edx,eax
c0021da7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021dab:	29 da                	sub    edx,ebx
c0021dad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021db1:	88 d9                	mov    cl,bl
c0021db3:	d3 e7                	shl    edi,cl
c0021db5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021db9:	88 d1                	mov    cl,dl
c0021dbb:	d3 e8                	shr    eax,cl
c0021dbd:	09 c7                	or     edi,eax
c0021dbf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021dc3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021dc7:	89 d8                	mov    eax,ebx
c0021dc9:	88 d9                	mov    cl,bl
c0021dcb:	d3 e7                	shl    edi,cl
c0021dcd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021dd1:	89 f3                	mov    ebx,esi
c0021dd3:	88 d1                	mov    cl,dl
c0021dd5:	d3 eb                	shr    ebx,cl
c0021dd7:	89 c7                	mov    edi,eax
c0021dd9:	88 c1                	mov    cl,al
c0021ddb:	d3 e6                	shl    esi,cl
c0021ddd:	89 e8                	mov    eax,ebp
c0021ddf:	88 d1                	mov    cl,dl
c0021de1:	d3 e8                	shr    eax,cl
c0021de3:	09 f0                	or     eax,esi
c0021de5:	89 f9                	mov    ecx,edi
c0021de7:	d3 e5                	shl    ebp,cl
c0021de9:	89 da                	mov    edx,ebx
c0021deb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0021def:	89 d3                	mov    ebx,edx
c0021df1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021df5:	89 c6                	mov    esi,eax
c0021df7:	89 d1                	mov    ecx,edx
c0021df9:	39 d3                	cmp    ebx,edx
c0021dfb:	72 27                	jb     c0021e24 <__moddi3+0x170>
c0021dfd:	74 21                	je     c0021e20 <__moddi3+0x16c>
c0021dff:	29 f5                	sub    ebp,esi
c0021e01:	19 cb                	sbb    ebx,ecx
c0021e03:	89 de                	mov    esi,ebx
c0021e05:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021e09:	d3 e6                	shl    esi,cl
c0021e0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021e0f:	89 f9                	mov    ecx,edi
c0021e11:	d3 ed                	shr    ebp,cl
c0021e13:	09 ee                	or     esi,ebp
c0021e15:	89 f0                	mov    eax,esi
c0021e17:	d3 eb                	shr    ebx,cl
c0021e19:	89 da                	mov    edx,ebx
c0021e1b:	e9 e8 fe ff ff       	jmp    c0021d08 <__moddi3+0x54>
c0021e20:	39 c5                	cmp    ebp,eax
c0021e22:	73 db                	jae    c0021dff <__moddi3+0x14b>
c0021e24:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021e28:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021e2c:	89 d1                	mov    ecx,edx
c0021e2e:	89 c6                	mov    esi,eax
c0021e30:	eb cd                	jmp    c0021dff <__moddi3+0x14b>
c0021e32:	66 90                	xchg   ax,ax

c0021e34 <__udivdi3>:
c0021e34:	55                   	push   ebp
c0021e35:	57                   	push   edi
c0021e36:	56                   	push   esi
c0021e37:	53                   	push   ebx
c0021e38:	83 ec 1c             	sub    esp,0x1c
c0021e3b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021e3f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021e43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021e47:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021e4b:	85 d2                	test   edx,edx
c0021e4d:	75 41                	jne    c0021e90 <__udivdi3+0x5c>
c0021e4f:	39 f7                	cmp    edi,esi
c0021e51:	76 15                	jbe    c0021e68 <__udivdi3+0x34>
c0021e53:	89 e8                	mov    eax,ebp
c0021e55:	89 f2                	mov    edx,esi
c0021e57:	f7 f7                	div    edi
c0021e59:	31 db                	xor    ebx,ebx
c0021e5b:	89 da                	mov    edx,ebx
c0021e5d:	83 c4 1c             	add    esp,0x1c
c0021e60:	5b                   	pop    ebx
c0021e61:	5e                   	pop    esi
c0021e62:	5f                   	pop    edi
c0021e63:	5d                   	pop    ebp
c0021e64:	c3                   	ret    
c0021e65:	8d 76 00             	lea    esi,[esi+0x0]
c0021e68:	89 f9                	mov    ecx,edi
c0021e6a:	85 ff                	test   edi,edi
c0021e6c:	75 0b                	jne    c0021e79 <__udivdi3+0x45>
c0021e6e:	b8 01 00 00 00       	mov    eax,0x1
c0021e73:	31 d2                	xor    edx,edx
c0021e75:	f7 f7                	div    edi
c0021e77:	89 c1                	mov    ecx,eax
c0021e79:	31 d2                	xor    edx,edx
c0021e7b:	89 f0                	mov    eax,esi
c0021e7d:	f7 f1                	div    ecx
c0021e7f:	89 c3                	mov    ebx,eax
c0021e81:	89 e8                	mov    eax,ebp
c0021e83:	f7 f1                	div    ecx
c0021e85:	89 da                	mov    edx,ebx
c0021e87:	83 c4 1c             	add    esp,0x1c
c0021e8a:	5b                   	pop    ebx
c0021e8b:	5e                   	pop    esi
c0021e8c:	5f                   	pop    edi
c0021e8d:	5d                   	pop    ebp
c0021e8e:	c3                   	ret    
c0021e8f:	90                   	nop
c0021e90:	39 f2                	cmp    edx,esi
c0021e92:	77 1c                	ja     c0021eb0 <__udivdi3+0x7c>
c0021e94:	0f bd da             	bsr    ebx,edx
c0021e97:	83 f3 1f             	xor    ebx,0x1f
c0021e9a:	75 24                	jne    c0021ec0 <__udivdi3+0x8c>
c0021e9c:	39 f2                	cmp    edx,esi
c0021e9e:	72 08                	jb     c0021ea8 <__udivdi3+0x74>
c0021ea0:	39 ef                	cmp    edi,ebp
c0021ea2:	0f 87 84 00 00 00    	ja     c0021f2c <__udivdi3+0xf8>
c0021ea8:	b8 01 00 00 00       	mov    eax,0x1
c0021ead:	eb ac                	jmp    c0021e5b <__udivdi3+0x27>
c0021eaf:	90                   	nop
c0021eb0:	31 db                	xor    ebx,ebx
c0021eb2:	31 c0                	xor    eax,eax
c0021eb4:	89 da                	mov    edx,ebx
c0021eb6:	83 c4 1c             	add    esp,0x1c
c0021eb9:	5b                   	pop    ebx
c0021eba:	5e                   	pop    esi
c0021ebb:	5f                   	pop    edi
c0021ebc:	5d                   	pop    ebp
c0021ebd:	c3                   	ret    
c0021ebe:	66 90                	xchg   ax,ax
c0021ec0:	b8 20 00 00 00       	mov    eax,0x20
c0021ec5:	29 d8                	sub    eax,ebx
c0021ec7:	88 d9                	mov    cl,bl
c0021ec9:	d3 e2                	shl    edx,cl
c0021ecb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021ecf:	89 fa                	mov    edx,edi
c0021ed1:	88 c1                	mov    cl,al
c0021ed3:	d3 ea                	shr    edx,cl
c0021ed5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ed9:	09 d1                	or     ecx,edx
c0021edb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021edf:	88 d9                	mov    cl,bl
c0021ee1:	d3 e7                	shl    edi,cl
c0021ee3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021ee7:	89 f7                	mov    edi,esi
c0021ee9:	88 c1                	mov    cl,al
c0021eeb:	d3 ef                	shr    edi,cl
c0021eed:	88 d9                	mov    cl,bl
c0021eef:	d3 e6                	shl    esi,cl
c0021ef1:	89 ea                	mov    edx,ebp
c0021ef3:	88 c1                	mov    cl,al
c0021ef5:	d3 ea                	shr    edx,cl
c0021ef7:	09 d6                	or     esi,edx
c0021ef9:	89 f0                	mov    eax,esi
c0021efb:	89 fa                	mov    edx,edi
c0021efd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021f01:	89 d7                	mov    edi,edx
c0021f03:	89 c6                	mov    esi,eax
c0021f05:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021f09:	39 d7                	cmp    edi,edx
c0021f0b:	72 13                	jb     c0021f20 <__udivdi3+0xec>
c0021f0d:	74 09                	je     c0021f18 <__udivdi3+0xe4>
c0021f0f:	89 f0                	mov    eax,esi
c0021f11:	31 db                	xor    ebx,ebx
c0021f13:	e9 43 ff ff ff       	jmp    c0021e5b <__udivdi3+0x27>
c0021f18:	88 d9                	mov    cl,bl
c0021f1a:	d3 e5                	shl    ebp,cl
c0021f1c:	39 c5                	cmp    ebp,eax
c0021f1e:	73 ef                	jae    c0021f0f <__udivdi3+0xdb>
c0021f20:	8d 46 ff             	lea    eax,[esi-0x1]
c0021f23:	31 db                	xor    ebx,ebx
c0021f25:	e9 31 ff ff ff       	jmp    c0021e5b <__udivdi3+0x27>
c0021f2a:	66 90                	xchg   ax,ax
c0021f2c:	31 c0                	xor    eax,eax
c0021f2e:	e9 28 ff ff ff       	jmp    c0021e5b <__udivdi3+0x27>
c0021f33:	90                   	nop

c0021f34 <__umoddi3>:
c0021f34:	55                   	push   ebp
c0021f35:	57                   	push   edi
c0021f36:	56                   	push   esi
c0021f37:	53                   	push   ebx
c0021f38:	83 ec 1c             	sub    esp,0x1c
c0021f3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021f3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021f43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021f47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021f4b:	89 da                	mov    edx,ebx
c0021f4d:	85 c0                	test   eax,eax
c0021f4f:	75 37                	jne    c0021f88 <__umoddi3+0x54>
c0021f51:	39 df                	cmp    edi,ebx
c0021f53:	76 13                	jbe    c0021f68 <__umoddi3+0x34>
c0021f55:	89 f0                	mov    eax,esi
c0021f57:	f7 f7                	div    edi
c0021f59:	89 d0                	mov    eax,edx
c0021f5b:	31 d2                	xor    edx,edx
c0021f5d:	83 c4 1c             	add    esp,0x1c
c0021f60:	5b                   	pop    ebx
c0021f61:	5e                   	pop    esi
c0021f62:	5f                   	pop    edi
c0021f63:	5d                   	pop    ebp
c0021f64:	c3                   	ret    
c0021f65:	8d 76 00             	lea    esi,[esi+0x0]
c0021f68:	89 fd                	mov    ebp,edi
c0021f6a:	85 ff                	test   edi,edi
c0021f6c:	75 0b                	jne    c0021f79 <__umoddi3+0x45>
c0021f6e:	b8 01 00 00 00       	mov    eax,0x1
c0021f73:	31 d2                	xor    edx,edx
c0021f75:	f7 f7                	div    edi
c0021f77:	89 c5                	mov    ebp,eax
c0021f79:	89 d8                	mov    eax,ebx
c0021f7b:	31 d2                	xor    edx,edx
c0021f7d:	f7 f5                	div    ebp
c0021f7f:	89 f0                	mov    eax,esi
c0021f81:	f7 f5                	div    ebp
c0021f83:	89 d0                	mov    eax,edx
c0021f85:	eb d4                	jmp    c0021f5b <__umoddi3+0x27>
c0021f87:	90                   	nop
c0021f88:	89 f1                	mov    ecx,esi
c0021f8a:	39 d8                	cmp    eax,ebx
c0021f8c:	76 0a                	jbe    c0021f98 <__umoddi3+0x64>
c0021f8e:	89 f0                	mov    eax,esi
c0021f90:	83 c4 1c             	add    esp,0x1c
c0021f93:	5b                   	pop    ebx
c0021f94:	5e                   	pop    esi
c0021f95:	5f                   	pop    edi
c0021f96:	5d                   	pop    ebp
c0021f97:	c3                   	ret    
c0021f98:	0f bd e8             	bsr    ebp,eax
c0021f9b:	83 f5 1f             	xor    ebp,0x1f
c0021f9e:	75 1c                	jne    c0021fbc <__umoddi3+0x88>
c0021fa0:	39 d8                	cmp    eax,ebx
c0021fa2:	72 04                	jb     c0021fa8 <__umoddi3+0x74>
c0021fa4:	39 f7                	cmp    edi,esi
c0021fa6:	77 08                	ja     c0021fb0 <__umoddi3+0x7c>
c0021fa8:	89 da                	mov    edx,ebx
c0021faa:	29 fe                	sub    esi,edi
c0021fac:	19 c2                	sbb    edx,eax
c0021fae:	89 f1                	mov    ecx,esi
c0021fb0:	89 c8                	mov    eax,ecx
c0021fb2:	83 c4 1c             	add    esp,0x1c
c0021fb5:	5b                   	pop    ebx
c0021fb6:	5e                   	pop    esi
c0021fb7:	5f                   	pop    edi
c0021fb8:	5d                   	pop    ebp
c0021fb9:	c3                   	ret    
c0021fba:	66 90                	xchg   ax,ax
c0021fbc:	ba 20 00 00 00       	mov    edx,0x20
c0021fc1:	29 ea                	sub    edx,ebp
c0021fc3:	89 e9                	mov    ecx,ebp
c0021fc5:	d3 e0                	shl    eax,cl
c0021fc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fcb:	89 f8                	mov    eax,edi
c0021fcd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021fd1:	88 d1                	mov    cl,dl
c0021fd3:	d3 e8                	shr    eax,cl
c0021fd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021fd9:	09 c1                	or     ecx,eax
c0021fdb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021fdf:	89 e9                	mov    ecx,ebp
c0021fe1:	d3 e7                	shl    edi,cl
c0021fe3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021fe7:	89 d8                	mov    eax,ebx
c0021fe9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021fed:	88 d1                	mov    cl,dl
c0021fef:	d3 e8                	shr    eax,cl
c0021ff1:	89 c7                	mov    edi,eax
c0021ff3:	89 e9                	mov    ecx,ebp
c0021ff5:	d3 e3                	shl    ebx,cl
c0021ff7:	89 f0                	mov    eax,esi
c0021ff9:	88 d1                	mov    cl,dl
c0021ffb:	d3 e8                	shr    eax,cl
c0021ffd:	09 d8                	or     eax,ebx
c0021fff:	89 e9                	mov    ecx,ebp
c0022001:	d3 e6                	shl    esi,cl
c0022003:	89 f3                	mov    ebx,esi
c0022005:	89 fa                	mov    edx,edi
c0022007:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002200b:	89 d1                	mov    ecx,edx
c002200d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022011:	89 c6                	mov    esi,eax
c0022013:	89 d7                	mov    edi,edx
c0022015:	39 d1                	cmp    ecx,edx
c0022017:	72 27                	jb     c0022040 <__umoddi3+0x10c>
c0022019:	74 21                	je     c002203c <__umoddi3+0x108>
c002201b:	89 ca                	mov    edx,ecx
c002201d:	29 f3                	sub    ebx,esi
c002201f:	19 fa                	sbb    edx,edi
c0022021:	89 d0                	mov    eax,edx
c0022023:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022027:	d3 e0                	shl    eax,cl
c0022029:	89 e9                	mov    ecx,ebp
c002202b:	d3 eb                	shr    ebx,cl
c002202d:	09 d8                	or     eax,ebx
c002202f:	d3 ea                	shr    edx,cl
c0022031:	83 c4 1c             	add    esp,0x1c
c0022034:	5b                   	pop    ebx
c0022035:	5e                   	pop    esi
c0022036:	5f                   	pop    edi
c0022037:	5d                   	pop    ebp
c0022038:	c3                   	ret    
c0022039:	8d 76 00             	lea    esi,[esi+0x0]
c002203c:	39 c3                	cmp    ebx,eax
c002203e:	73 db                	jae    c002201b <__umoddi3+0xe7>
c0022040:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022044:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022048:	89 d7                	mov    edi,edx
c002204a:	89 c6                	mov    esi,eax
c002204c:	eb cd                	jmp    c002201b <__umoddi3+0xe7>

Disassembly of section .init:

c002204e <_init>:
c002204e:	55                   	push   ebp
c002204f:	89 e5                	mov    ebp,esp
c0022051:	e8 9e e0 fd ff       	call   c00000f4 <frame_dummy>
c0022056:	e8 e5 fa ff ff       	call   c0021b40 <__do_global_ctors_aux>
c002205b:	5d                   	pop    ebp
c002205c:	c3                   	ret    

Disassembly of section .fini:

c002205d <_fini>:
c002205d:	55                   	push   ebp
c002205e:	89 e5                	mov    ebp,esp
c0022060:	e8 1f e0 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0022065:	5d                   	pop    ebp
c0022066:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022068 <DriverlessDevice::~DriverlessDevice()>:
c0022068:	ba fc 3a 02 c0       	mov    edx,0xc0023afc
c002206d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022071:	89 10                	mov    DWORD PTR [eax],edx
c0022073:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022077:	50                   	push   eax
c0022078:	e8 7b 78 fe ff       	call   c00098f8 <Device::~Device()>
c002207d:	83 c4 04             	add    esp,0x4
c0022080:	90                   	nop
c0022081:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022082 <DriverlessDevice::~DriverlessDevice()>:
c0022082:	83 ec 0c             	sub    esp,0xc
c0022085:	83 ec 0c             	sub    esp,0xc
c0022088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002208c:	e8 d7 ff ff ff       	call   c0022068 <DriverlessDevice::~DriverlessDevice()>
c0022091:	83 c4 10             	add    esp,0x10
c0022094:	83 ec 08             	sub    esp,0x8
c0022097:	68 58 01 00 00       	push   0x158
c002209c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220a0:	e8 cb b1 fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c00220a5:	83 c4 10             	add    esp,0x10
c00220a8:	83 c4 0c             	add    esp,0xc
c00220ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00220ac <LinkedList<Device>::addElement(Device*)>:
c00220ac:	83 ec 0c             	sub    esp,0xc
c00220af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00220b4:	75 10                	jne    c00220c6 <LinkedList<Device>::addElement(Device*)+0x1a>
c00220b6:	83 ec 0c             	sub    esp,0xc
c00220b9:	68 90 3a 02 c0       	push   0xc0023a90
c00220be:	e8 f9 d9 fe ff       	call   c000fabc <KePanic(char const*)>
c00220c3:	83 c4 10             	add    esp,0x10
c00220c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00220cc:	85 c0                	test   eax,eax
c00220ce:	74 3a                	je     c002210a <LinkedList<Device>::addElement(Device*)+0x5e>
c00220d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220d7:	85 c0                	test   eax,eax
c00220d9:	74 2f                	je     c002210a <LinkedList<Device>::addElement(Device*)+0x5e>
c00220db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220e6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00220ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00220f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220fe:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022108:	eb 68                	jmp    c0022172 <LinkedList<Device>::addElement(Device*)+0xc6>
c002210a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002210e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022110:	85 c0                	test   eax,eax
c0022112:	75 4e                	jne    c0022162 <LinkedList<Device>::addElement(Device*)+0xb6>
c0022114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022118:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002211b:	85 c0                	test   eax,eax
c002211d:	75 43                	jne    c0022162 <LinkedList<Device>::addElement(Device*)+0xb6>
c002211f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022123:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022127:	89 10                	mov    DWORD PTR [eax],edx
c0022129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002212d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022131:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022138:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002213b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022149:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002214c:	85 c0                	test   eax,eax
c002214e:	74 22                	je     c0022172 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022150:	83 ec 0c             	sub    esp,0xc
c0022153:	68 b2 3a 02 c0       	push   0xc0023ab2
c0022158:	e8 5f d9 fe ff       	call   c000fabc <KePanic(char const*)>
c002215d:	83 c4 10             	add    esp,0x10
c0022160:	eb 10                	jmp    c0022172 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022162:	83 ec 0c             	sub    esp,0xc
c0022165:	68 bc 3a 02 c0       	push   0xc0023abc
c002216a:	e8 4d d9 fe ff       	call   c000fabc <KePanic(char const*)>
c002216f:	83 c4 10             	add    esp,0x10
c0022172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022176:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022179:	8d 50 01             	lea    edx,[eax+0x1]
c002217c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022180:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022183:	90                   	nop
c0022184:	83 c4 0c             	add    esp,0xc
c0022187:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022188 <LinkedList<Device>::LinkedList()>:
c0022188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002218c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022196:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002219d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221a1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00221a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00221b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00221bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00221c8:	90                   	nop
c00221c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00221cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00221cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00221d2:	85 c0                	test   eax,eax
c00221d4:	75 0e                	jne    c00221e4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00221d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221dd:	85 c0                	test   eax,eax
c00221df:	75 03                	jne    c00221e4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00221e1:	b0 01                	mov    al,0x1
c00221e3:	c3                   	ret    
c00221e4:	b0 00                	mov    al,0x0
c00221e6:	90                   	nop
c00221e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00221e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00221e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00221ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00221f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00221f0:	83 ec 0c             	sub    esp,0xc
c00221f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00221f9:	85 c0                	test   eax,eax
c00221fb:	75 17                	jne    c0022214 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00221fd:	83 ec 0c             	sub    esp,0xc
c0022200:	68 2c 3d 02 c0       	push   0xc0023d2c
c0022205:	e8 b2 d8 fe ff       	call   c000fabc <KePanic(char const*)>
c002220a:	83 c4 10             	add    esp,0x10
c002220d:	e9 96 00 00 00       	jmp    c00222a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0022212:	66 90                	xchg   ax,ax
c0022214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022218:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002221b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002221e:	85 c0                	test   eax,eax
c0022220:	0f 95 c0             	setne  al
c0022223:	0f b6 c0             	movzx  eax,al
c0022226:	85 c0                	test   eax,eax
c0022228:	74 12                	je     c002223c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002222a:	83 ec 0c             	sub    esp,0xc
c002222d:	68 77 3d 02 c0       	push   0xc0023d77
c0022232:	e8 85 d8 fe ff       	call   c000fabc <KePanic(char const*)>
c0022237:	83 c4 10             	add    esp,0x10
c002223a:	66 90                	xchg   ax,ax
c002223c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022240:	8b 00                	mov    eax,DWORD PTR [eax]
c0022242:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022245:	85 c0                	test   eax,eax
c0022247:	0f 94 c0             	sete   al
c002224a:	0f b6 c0             	movzx  eax,al
c002224d:	85 c0                	test   eax,eax
c002224f:	74 33                	je     c0022284 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0022251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022255:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002225b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002225f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002226d:	83 f8 01             	cmp    eax,0x1
c0022270:	74 22                	je     c0022294 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0022272:	83 ec 0c             	sub    esp,0xc
c0022275:	68 50 3d 02 c0       	push   0xc0023d50
c002227a:	e8 3d d8 fe ff       	call   c000fabc <KePanic(char const*)>
c002227f:	83 c4 10             	add    esp,0x10
c0022282:	eb 10                	jmp    c0022294 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0022284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022288:	8b 00                	mov    eax,DWORD PTR [eax]
c002228a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002228d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022291:	89 10                	mov    DWORD PTR [eax],edx
c0022293:	90                   	nop
c0022294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022298:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002229b:	8d 50 ff             	lea    edx,[eax-0x1]
c002229e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222a5:	8d 76 00             	lea    esi,[esi+0x0]
c00222a8:	83 c4 0c             	add    esp,0xc
c00222ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00222ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00222ac:	83 ec 0c             	sub    esp,0xc
c00222af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00222b4:	75 12                	jne    c00222c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00222b6:	83 ec 0c             	sub    esp,0xc
c00222b9:	68 90 3a 02 c0       	push   0xc0023a90
c00222be:	e8 f9 d7 fe ff       	call   c000fabc <KePanic(char const*)>
c00222c3:	83 c4 10             	add    esp,0x10
c00222c6:	66 90                	xchg   ax,ax
c00222c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00222ce:	85 c0                	test   eax,eax
c00222d0:	74 36                	je     c0022308 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00222d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222d9:	85 c0                	test   eax,eax
c00222db:	74 2b                	je     c0022308 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00222dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222e8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00222eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022304:	eb 6a                	jmp    c0022370 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022306:	66 90                	xchg   ax,ax
c0022308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002230c:	8b 00                	mov    eax,DWORD PTR [eax]
c002230e:	85 c0                	test   eax,eax
c0022310:	75 4e                	jne    c0022360 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022316:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022319:	85 c0                	test   eax,eax
c002231b:	75 43                	jne    c0022360 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002231d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022321:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022325:	89 10                	mov    DWORD PTR [eax],edx
c0022327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002232b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002232f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022336:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022339:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022344:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022347:	85 c0                	test   eax,eax
c0022349:	74 25                	je     c0022370 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002234b:	83 ec 0c             	sub    esp,0xc
c002234e:	68 b2 3a 02 c0       	push   0xc0023ab2
c0022353:	e8 64 d7 fe ff       	call   c000fabc <KePanic(char const*)>
c0022358:	83 c4 10             	add    esp,0x10
c002235b:	eb 13                	jmp    c0022370 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002235d:	8d 76 00             	lea    esi,[esi+0x0]
c0022360:	83 ec 0c             	sub    esp,0xc
c0022363:	68 bc 3a 02 c0       	push   0xc0023abc
c0022368:	e8 4f d7 fe ff       	call   c000fabc <KePanic(char const*)>
c002236d:	83 c4 10             	add    esp,0x10
c0022370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022374:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022377:	8d 50 01             	lea    edx,[eax+0x1]
c002237a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022381:	90                   	nop
c0022382:	83 c4 0c             	add    esp,0xc
c0022385:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022388 <ACPI::~ACPI()>:
c0022388:	83 ec 0c             	sub    esp,0xc
c002238b:	ba ac 41 02 c0       	mov    edx,0xc00241ac
c0022390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022394:	89 10                	mov    DWORD PTR [eax],edx
c0022396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239a:	83 ec 0c             	sub    esp,0xc
c002239d:	50                   	push   eax
c002239e:	e8 55 75 fe ff       	call   c00098f8 <Device::~Device()>
c00223a3:	83 c4 10             	add    esp,0x10
c00223a6:	90                   	nop
c00223a7:	83 c4 0c             	add    esp,0xc
c00223aa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00223ac <ACPI::~ACPI()>:
c00223ac:	83 ec 0c             	sub    esp,0xc
c00223af:	83 ec 0c             	sub    esp,0xc
c00223b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223b6:	e8 cd ff ff ff       	call   c0022388 <ACPI::~ACPI()>
c00223bb:	83 c4 10             	add    esp,0x10
c00223be:	83 ec 08             	sub    esp,0x8
c00223c1:	68 64 12 00 00       	push   0x1264
c00223c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223ca:	e8 a1 ae fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c00223cf:	83 c4 10             	add    esp,0x10
c00223d2:	83 c4 0c             	add    esp,0xc
c00223d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00223d8 <LinkedList<Device>::~LinkedList()>:
c00223d8:	90                   	nop
c00223d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00223dc <LinkedList<Device>::isEmpty()>:
c00223dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00223e2:	85 c0                	test   eax,eax
c00223e4:	75 0e                	jne    c00223f4 <LinkedList<Device>::isEmpty()+0x18>
c00223e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223ed:	85 c0                	test   eax,eax
c00223ef:	75 03                	jne    c00223f4 <LinkedList<Device>::isEmpty()+0x18>
c00223f1:	b0 01                	mov    al,0x1
c00223f3:	c3                   	ret    
c00223f4:	b0 00                	mov    al,0x0
c00223f6:	90                   	nop
c00223f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00223f8 <LinkedList<Device>::getFirstElement()>:
c00223f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00223fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022400 <LinkedList<Device>::removeFirst()>:
c0022400:	83 ec 0c             	sub    esp,0xc
c0022403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022407:	8b 00                	mov    eax,DWORD PTR [eax]
c0022409:	85 c0                	test   eax,eax
c002240b:	75 17                	jne    c0022424 <LinkedList<Device>::removeFirst()+0x24>
c002240d:	83 ec 0c             	sub    esp,0xc
c0022410:	68 2c 3d 02 c0       	push   0xc0023d2c
c0022415:	e8 a2 d6 fe ff       	call   c000fabc <KePanic(char const*)>
c002241a:	83 c4 10             	add    esp,0x10
c002241d:	e9 92 00 00 00       	jmp    c00224b4 <LinkedList<Device>::removeFirst()+0xb4>
c0022422:	66 90                	xchg   ax,ax
c0022424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022428:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002242b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022431:	85 c0                	test   eax,eax
c0022433:	74 13                	je     c0022448 <LinkedList<Device>::removeFirst()+0x48>
c0022435:	83 ec 0c             	sub    esp,0xc
c0022438:	68 77 3d 02 c0       	push   0xc0023d77
c002243d:	e8 7a d6 fe ff       	call   c000fabc <KePanic(char const*)>
c0022442:	83 c4 10             	add    esp,0x10
c0022445:	8d 76 00             	lea    esi,[esi+0x0]
c0022448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002244c:	8b 00                	mov    eax,DWORD PTR [eax]
c002244e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022454:	85 c0                	test   eax,eax
c0022456:	75 34                	jne    c002248c <LinkedList<Device>::removeFirst()+0x8c>
c0022458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002245c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022466:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002246d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022471:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022474:	83 f8 01             	cmp    eax,0x1
c0022477:	74 27                	je     c00224a0 <LinkedList<Device>::removeFirst()+0xa0>
c0022479:	83 ec 0c             	sub    esp,0xc
c002247c:	68 50 3d 02 c0       	push   0xc0023d50
c0022481:	e8 36 d6 fe ff       	call   c000fabc <KePanic(char const*)>
c0022486:	83 c4 10             	add    esp,0x10
c0022489:	eb 15                	jmp    c00224a0 <LinkedList<Device>::removeFirst()+0xa0>
c002248b:	90                   	nop
c002248c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022490:	8b 00                	mov    eax,DWORD PTR [eax]
c0022492:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002249c:	89 10                	mov    DWORD PTR [eax],edx
c002249e:	66 90                	xchg   ax,ax
c00224a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00224a7:	8d 50 ff             	lea    edx,[eax-0x1]
c00224aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00224b1:	8d 76 00             	lea    esi,[esi+0x0]
c00224b4:	83 c4 0c             	add    esp,0xc
c00224b7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00224b8 <Computer::~Computer()>:
c00224b8:	83 ec 0c             	sub    esp,0xc
c00224bb:	ba 24 43 02 c0       	mov    edx,0xc0024324
c00224c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224c4:	89 10                	mov    DWORD PTR [eax],edx
c00224c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ca:	83 ec 0c             	sub    esp,0xc
c00224cd:	50                   	push   eax
c00224ce:	e8 25 74 fe ff       	call   c00098f8 <Device::~Device()>
c00224d3:	83 c4 10             	add    esp,0x10
c00224d6:	90                   	nop
c00224d7:	83 c4 0c             	add    esp,0xc
c00224da:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00224dc <Computer::~Computer()>:
c00224dc:	83 ec 0c             	sub    esp,0xc
c00224df:	83 ec 0c             	sub    esp,0xc
c00224e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224e6:	e8 cd ff ff ff       	call   c00224b8 <Computer::~Computer()>
c00224eb:	83 c4 10             	add    esp,0x10
c00224ee:	83 ec 08             	sub    esp,0x8
c00224f1:	68 68 01 00 00       	push   0x168
c00224f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224fa:	e8 71 ad fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c00224ff:	83 c4 10             	add    esp,0x10
c0022502:	83 c4 0c             	add    esp,0xc
c0022505:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022506 <idleCommon()>:
c0022506:	83 ec 0c             	sub    esp,0xc
c0022509:	fa                   	cli    
c002250a:	ff 05 30 d3 02 c0    	inc    DWORD PTR ds:0xc002d330
c0022510:	e8 1f 41 ff ff       	call   c0016634 <schedule()>
c0022515:	f0 ff 0d 30 d3 02 c0 	lock dec DWORD PTR ds:0xc002d330
c002251c:	83 3d 30 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d330,0x0
c0022523:	75 01                	jne    c0022526 <idleCommon()+0x20>
c0022525:	fb                   	sti    
c0022526:	83 c4 0c             	add    esp,0xc
c0022529:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002252a <LinkedList<UnixFile>::~LinkedList()>:
c002252a:	90                   	nop
c002252b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002252c <LinkedList<UnixFile>::LinkedList()>:
c002252c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022530:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002253a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022545:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002254c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022550:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002255a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022565:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002256c:	90                   	nop
c002256d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002256e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002256e:	83 ec 0c             	sub    esp,0xc
c0022571:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022576:	75 10                	jne    c0022588 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022578:	83 ec 0c             	sub    esp,0xc
c002257b:	68 90 3a 02 c0       	push   0xc0023a90
c0022580:	e8 37 d5 fe ff       	call   c000fabc <KePanic(char const*)>
c0022585:	83 c4 10             	add    esp,0x10
c0022588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002258c:	8b 00                	mov    eax,DWORD PTR [eax]
c002258e:	85 c0                	test   eax,eax
c0022590:	74 34                	je     c00225c6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022596:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022599:	85 c0                	test   eax,eax
c002259b:	74 29                	je     c00225c6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002259d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00225a8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00225ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00225b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00225b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00225c4:	eb 65                	jmp    c002262b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00225c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00225cc:	85 c0                	test   eax,eax
c00225ce:	75 4b                	jne    c002261b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00225d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225d7:	85 c0                	test   eax,eax
c00225d9:	75 40                	jne    c002261b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00225db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00225e3:	89 10                	mov    DWORD PTR [eax],edx
c00225e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00225ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00225f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00225fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022602:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022605:	85 c0                	test   eax,eax
c0022607:	74 22                	je     c002262b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022609:	83 ec 0c             	sub    esp,0xc
c002260c:	68 b2 3a 02 c0       	push   0xc0023ab2
c0022611:	e8 a6 d4 fe ff       	call   c000fabc <KePanic(char const*)>
c0022616:	83 c4 10             	add    esp,0x10
c0022619:	eb 10                	jmp    c002262b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002261b:	83 ec 0c             	sub    esp,0xc
c002261e:	68 bc 3a 02 c0       	push   0xc0023abc
c0022623:	e8 94 d4 fe ff       	call   c000fabc <KePanic(char const*)>
c0022628:	83 c4 10             	add    esp,0x10
c002262b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002262f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022632:	8d 50 01             	lea    edx,[eax+0x1]
c0022635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022639:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002263c:	90                   	nop
c002263d:	83 c4 0c             	add    esp,0xc
c0022640:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022642 <LinkedList<UnixFile>::getFirstElement()>:
c0022642:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022646:	8b 00                	mov    eax,DWORD PTR [eax]
c0022648:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002264a <LinkedList<UnixFile>::removeFirst()>:
c002264a:	83 ec 0c             	sub    esp,0xc
c002264d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022651:	8b 00                	mov    eax,DWORD PTR [eax]
c0022653:	85 c0                	test   eax,eax
c0022655:	75 12                	jne    c0022669 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022657:	83 ec 0c             	sub    esp,0xc
c002265a:	68 2c 3d 02 c0       	push   0xc0023d2c
c002265f:	e8 58 d4 fe ff       	call   c000fabc <KePanic(char const*)>
c0022664:	83 c4 10             	add    esp,0x10
c0022667:	eb 7e                	jmp    c00226e7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002266d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022670:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022673:	85 c0                	test   eax,eax
c0022675:	74 10                	je     c0022687 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022677:	83 ec 0c             	sub    esp,0xc
c002267a:	68 77 3d 02 c0       	push   0xc0023d77
c002267f:	e8 38 d4 fe ff       	call   c000fabc <KePanic(char const*)>
c0022684:	83 c4 10             	add    esp,0x10
c0022687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002268b:	8b 00                	mov    eax,DWORD PTR [eax]
c002268d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022690:	85 c0                	test   eax,eax
c0022692:	75 33                	jne    c00226c7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022698:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002269e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00226a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00226b0:	83 f8 01             	cmp    eax,0x1
c00226b3:	74 21                	je     c00226d6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00226b5:	83 ec 0c             	sub    esp,0xc
c00226b8:	68 50 3d 02 c0       	push   0xc0023d50
c00226bd:	e8 fa d3 fe ff       	call   c000fabc <KePanic(char const*)>
c00226c2:	83 c4 10             	add    esp,0x10
c00226c5:	eb 0f                	jmp    c00226d6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00226c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00226cd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00226d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226d4:	89 10                	mov    DWORD PTR [eax],edx
c00226d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00226dd:	8d 50 ff             	lea    edx,[eax-0x1]
c00226e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226e4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00226e7:	83 c4 0c             	add    esp,0xc
c00226ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00226ec <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00226ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00226f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00226f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00226f4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00226f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00226f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00226fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00226fc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00226fc:	90                   	nop
c00226fd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022700 <ThreadControlBlock::ThreadControlBlock()>:
c0022700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022704:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002270b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002270f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002271a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022725:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002272c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022730:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0022737:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002273b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002273f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022743:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0022747:	90                   	nop
c0022748:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002274c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002274c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022750:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002275a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022765:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002276c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022770:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002277a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022785:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002278c:	90                   	nop
c002278d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002278e <IOAPIC::~IOAPIC()>:
c002278e:	83 ec 0c             	sub    esp,0xc
c0022791:	ba a0 57 02 c0       	mov    edx,0xc00257a0
c0022796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002279a:	89 10                	mov    DWORD PTR [eax],edx
c002279c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227a0:	83 ec 0c             	sub    esp,0xc
c00227a3:	50                   	push   eax
c00227a4:	e8 4f 71 fe ff       	call   c00098f8 <Device::~Device()>
c00227a9:	83 c4 10             	add    esp,0x10
c00227ac:	90                   	nop
c00227ad:	83 c4 0c             	add    esp,0xc
c00227b0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00227b2 <IOAPIC::~IOAPIC()>:
c00227b2:	83 ec 0c             	sub    esp,0xc
c00227b5:	83 ec 0c             	sub    esp,0xc
c00227b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227bc:	e8 cd ff ff ff       	call   c002278e <IOAPIC::~IOAPIC()>
c00227c1:	83 c4 10             	add    esp,0x10
c00227c4:	83 ec 08             	sub    esp,0x8
c00227c7:	68 68 01 00 00       	push   0x168
c00227cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227d0:	e8 9b aa fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c00227d5:	83 c4 10             	add    esp,0x10
c00227d8:	83 c4 0c             	add    esp,0xc
c00227db:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00227dc <CPU::~CPU()>:
c00227dc:	83 ec 0c             	sub    esp,0xc
c00227df:	ba 14 5b 02 c0       	mov    edx,0xc0025b14
c00227e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e8:	89 10                	mov    DWORD PTR [eax],edx
c00227ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227ee:	83 ec 0c             	sub    esp,0xc
c00227f1:	50                   	push   eax
c00227f2:	e8 01 71 fe ff       	call   c00098f8 <Device::~Device()>
c00227f7:	83 c4 10             	add    esp,0x10
c00227fa:	90                   	nop
c00227fb:	83 c4 0c             	add    esp,0xc
c00227fe:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022800 <CPU::~CPU()>:
c0022800:	83 ec 0c             	sub    esp,0xc
c0022803:	83 ec 0c             	sub    esp,0xc
c0022806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002280a:	e8 cd ff ff ff       	call   c00227dc <CPU::~CPU()>
c002280f:	83 c4 10             	add    esp,0x10
c0022812:	83 ec 08             	sub    esp,0x8
c0022815:	68 78 11 00 00       	push   0x1178
c002281a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002281e:	e8 4d aa fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c0022823:	83 c4 10             	add    esp,0x10
c0022826:	83 c4 0c             	add    esp,0xc
c0022829:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002282a <PCI::~PCI()>:
c002282a:	83 ec 0c             	sub    esp,0xc
c002282d:	ba 78 60 02 c0       	mov    edx,0xc0026078
c0022832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022836:	89 10                	mov    DWORD PTR [eax],edx
c0022838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002283c:	83 ec 0c             	sub    esp,0xc
c002283f:	50                   	push   eax
c0022840:	e8 57 61 fe ff       	call   c000899c <Bus::~Bus()>
c0022845:	83 c4 10             	add    esp,0x10
c0022848:	90                   	nop
c0022849:	83 c4 0c             	add    esp,0xc
c002284c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002284e <PCI::~PCI()>:
c002284e:	83 ec 0c             	sub    esp,0xc
c0022851:	83 ec 0c             	sub    esp,0xc
c0022854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022858:	e8 cd ff ff ff       	call   c002282a <PCI::~PCI()>
c002285d:	83 c4 10             	add    esp,0x10
c0022860:	83 ec 08             	sub    esp,0x8
c0022863:	68 5c 01 00 00       	push   0x15c
c0022868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002286c:	e8 ff a9 fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c0022871:	83 c4 10             	add    esp,0x10
c0022874:	83 c4 0c             	add    esp,0xc
c0022877:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022878 <IDE::~IDE()>:
c0022878:	83 ec 0c             	sub    esp,0xc
c002287b:	ba c8 61 02 c0       	mov    edx,0xc00261c8
c0022880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022884:	89 10                	mov    DWORD PTR [eax],edx
c0022886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002288a:	83 ec 0c             	sub    esp,0xc
c002288d:	50                   	push   eax
c002288e:	e8 f5 74 fe ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0022893:	83 c4 10             	add    esp,0x10
c0022896:	90                   	nop
c0022897:	83 c4 0c             	add    esp,0xc
c002289a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002289c <IDE::~IDE()>:
c002289c:	83 ec 0c             	sub    esp,0xc
c002289f:	83 ec 0c             	sub    esp,0xc
c00228a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228a6:	e8 cd ff ff ff       	call   c0022878 <IDE::~IDE()>
c00228ab:	83 c4 10             	add    esp,0x10
c00228ae:	83 ec 08             	sub    esp,0x8
c00228b1:	68 70 02 00 00       	push   0x270
c00228b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228ba:	e8 b1 a9 fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c00228bf:	83 c4 10             	add    esp,0x10
c00228c2:	83 c4 0c             	add    esp,0xc
c00228c5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00228c6 <SATABus::~SATABus()>:
c00228c6:	83 ec 0c             	sub    esp,0xc
c00228c9:	ba 18 62 02 c0       	mov    edx,0xc0026218
c00228ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d2:	89 10                	mov    DWORD PTR [eax],edx
c00228d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d8:	83 ec 0c             	sub    esp,0xc
c00228db:	50                   	push   eax
c00228dc:	e8 a7 74 fe ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c00228e1:	83 c4 10             	add    esp,0x10
c00228e4:	90                   	nop
c00228e5:	83 c4 0c             	add    esp,0xc
c00228e8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00228ea <SATABus::~SATABus()>:
c00228ea:	83 ec 0c             	sub    esp,0xc
c00228ed:	83 ec 0c             	sub    esp,0xc
c00228f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228f4:	e8 cd ff ff ff       	call   c00228c6 <SATABus::~SATABus()>
c00228f9:	83 c4 10             	add    esp,0x10
c00228fc:	83 ec 08             	sub    esp,0x8
c00228ff:	68 64 01 00 00       	push   0x164
c0022904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022908:	e8 63 a9 fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c002290d:	83 c4 10             	add    esp,0x10
c0022910:	83 c4 0c             	add    esp,0xc
c0022913:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022914 <ATA::~ATA()>:
c0022914:	83 ec 0c             	sub    esp,0xc
c0022917:	ba 00 63 02 c0       	mov    edx,0xc0026300
c002291c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022920:	89 10                	mov    DWORD PTR [eax],edx
c0022922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022926:	83 ec 0c             	sub    esp,0xc
c0022929:	50                   	push   eax
c002292a:	e8 3b 75 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c002292f:	83 c4 10             	add    esp,0x10
c0022932:	90                   	nop
c0022933:	83 c4 0c             	add    esp,0xc
c0022936:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022938 <ATA::~ATA()>:
c0022938:	83 ec 0c             	sub    esp,0xc
c002293b:	83 ec 0c             	sub    esp,0xc
c002293e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022942:	e8 cd ff ff ff       	call   c0022914 <ATA::~ATA()>
c0022947:	83 c4 10             	add    esp,0x10
c002294a:	83 ec 08             	sub    esp,0x8
c002294d:	68 8c 01 00 00       	push   0x18c
c0022952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022956:	e8 15 a9 fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c002295b:	83 c4 10             	add    esp,0x10
c002295e:	83 c4 0c             	add    esp,0xc
c0022961:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022962 <ATAPI::~ATAPI()>:
c0022962:	83 ec 0c             	sub    esp,0xc
c0022965:	ba 48 63 02 c0       	mov    edx,0xc0026348
c002296a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296e:	89 10                	mov    DWORD PTR [eax],edx
c0022970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022974:	83 ec 0c             	sub    esp,0xc
c0022977:	50                   	push   eax
c0022978:	e8 ed 74 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c002297d:	83 c4 10             	add    esp,0x10
c0022980:	90                   	nop
c0022981:	83 c4 0c             	add    esp,0xc
c0022984:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022986 <ATAPI::~ATAPI()>:
c0022986:	83 ec 0c             	sub    esp,0xc
c0022989:	83 ec 0c             	sub    esp,0xc
c002298c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022990:	e8 cd ff ff ff       	call   c0022962 <ATAPI::~ATAPI()>
c0022995:	83 c4 10             	add    esp,0x10
c0022998:	83 ec 08             	sub    esp,0x8
c002299b:	68 84 01 00 00       	push   0x184
c00229a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229a4:	e8 c7 a8 fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c00229a9:	83 c4 10             	add    esp,0x10
c00229ac:	83 c4 0c             	add    esp,0xc
c00229af:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00229b0 <SATA::~SATA()>:
c00229b0:	83 ec 0c             	sub    esp,0xc
c00229b3:	ba 08 64 02 c0       	mov    edx,0xc0026408
c00229b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229bc:	89 10                	mov    DWORD PTR [eax],edx
c00229be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c2:	83 ec 0c             	sub    esp,0xc
c00229c5:	50                   	push   eax
c00229c6:	e8 9f 74 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c00229cb:	83 c4 10             	add    esp,0x10
c00229ce:	90                   	nop
c00229cf:	83 c4 0c             	add    esp,0xc
c00229d2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00229d4 <SATA::~SATA()>:
c00229d4:	83 ec 0c             	sub    esp,0xc
c00229d7:	83 ec 0c             	sub    esp,0xc
c00229da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229de:	e8 cd ff ff ff       	call   c00229b0 <SATA::~SATA()>
c00229e3:	83 c4 10             	add    esp,0x10
c00229e6:	83 ec 08             	sub    esp,0x8
c00229e9:	68 7c 01 00 00       	push   0x17c
c00229ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229f2:	e8 79 a8 fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c00229f7:	83 c4 10             	add    esp,0x10
c00229fa:	83 c4 0c             	add    esp,0xc
c00229fd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00229fe <SATAPI::~SATAPI()>:
c00229fe:	83 ec 0c             	sub    esp,0xc
c0022a01:	ba 2c 65 02 c0       	mov    edx,0xc002652c
c0022a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0a:	89 10                	mov    DWORD PTR [eax],edx
c0022a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a10:	83 ec 0c             	sub    esp,0xc
c0022a13:	50                   	push   eax
c0022a14:	e8 51 74 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c0022a19:	83 c4 10             	add    esp,0x10
c0022a1c:	90                   	nop
c0022a1d:	83 c4 0c             	add    esp,0xc
c0022a20:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022a22 <SATAPI::~SATAPI()>:
c0022a22:	83 ec 0c             	sub    esp,0xc
c0022a25:	83 ec 0c             	sub    esp,0xc
c0022a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a2c:	e8 cd ff ff ff       	call   c00229fe <SATAPI::~SATAPI()>
c0022a31:	83 c4 10             	add    esp,0x10
c0022a34:	83 ec 08             	sub    esp,0x8
c0022a37:	68 84 01 00 00       	push   0x184
c0022a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a40:	e8 2b a8 fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c0022a45:	83 c4 10             	add    esp,0x10
c0022a48:	83 c4 0c             	add    esp,0xc
c0022a4b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0022a4c <APICTimer::~APICTimer()>:
c0022a4c:	83 ec 0c             	sub    esp,0xc
c0022a4f:	ba 80 65 02 c0       	mov    edx,0xc0026580
c0022a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a58:	89 10                	mov    DWORD PTR [eax],edx
c0022a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a5e:	83 ec 0c             	sub    esp,0xc
c0022a61:	50                   	push   eax
c0022a62:	e8 9d 85 fe ff       	call   c000b004 <Timer::~Timer()>
c0022a67:	83 c4 10             	add    esp,0x10
c0022a6a:	90                   	nop
c0022a6b:	83 c4 0c             	add    esp,0xc
c0022a6e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022a70 <APICTimer::~APICTimer()>:
c0022a70:	83 ec 0c             	sub    esp,0xc
c0022a73:	83 ec 0c             	sub    esp,0xc
c0022a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a7a:	e8 cd ff ff ff       	call   c0022a4c <APICTimer::~APICTimer()>
c0022a7f:	83 c4 10             	add    esp,0x10
c0022a82:	83 ec 08             	sub    esp,0x8
c0022a85:	68 60 01 00 00       	push   0x160
c0022a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a8e:	e8 dd a7 fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c0022a93:	83 c4 10             	add    esp,0x10
c0022a96:	83 c4 0c             	add    esp,0xc
c0022a99:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0022a9c <PIT::~PIT()>:
c0022a9c:	83 ec 0c             	sub    esp,0xc
c0022a9f:	ba d0 65 02 c0       	mov    edx,0xc00265d0
c0022aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa8:	89 10                	mov    DWORD PTR [eax],edx
c0022aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aae:	83 ec 0c             	sub    esp,0xc
c0022ab1:	50                   	push   eax
c0022ab2:	e8 4d 85 fe ff       	call   c000b004 <Timer::~Timer()>
c0022ab7:	83 c4 10             	add    esp,0x10
c0022aba:	90                   	nop
c0022abb:	83 c4 0c             	add    esp,0xc
c0022abe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022ac0 <PIT::~PIT()>:
c0022ac0:	83 ec 0c             	sub    esp,0xc
c0022ac3:	83 ec 0c             	sub    esp,0xc
c0022ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022aca:	e8 cd ff ff ff       	call   c0022a9c <PIT::~PIT()>
c0022acf:	83 c4 10             	add    esp,0x10
c0022ad2:	83 ec 08             	sub    esp,0x8
c0022ad5:	68 5c 01 00 00       	push   0x15c
c0022ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ade:	e8 8d a7 fe ff       	call   c000d270 <operator delete(void*, unsigned long)>
c0022ae3:	83 c4 10             	add    esp,0x10
c0022ae6:	83 c4 0c             	add    esp,0xc
c0022ae9:	c3                   	ret    

Disassembly of section userkernel:

c0028000 <KiDefaultSignalHandlerAbort(int)>:
c0028000:	57                   	push   edi
c0028001:	b9 07 00 00 00       	mov    ecx,0x7
c0028006:	56                   	push   esi
c0028007:	be 0b 48 02 c0       	mov    esi,0xc002480b
c002800c:	83 ec 24             	sub    esp,0x24
c002800f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0028013:	fc                   	cld    
c0028014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002801a:	50                   	push   eax
c002801b:	6a 00                	push   0x0
c002801d:	6a 38                	push   0x38
c002801f:	6a 01                	push   0x1
c0028021:	e8 2c 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0028026:	83 c4 34             	add    esp,0x34
c0028029:	5e                   	pop    esi
c002802a:	5f                   	pop    edi
c002802b:	c3                   	ret    

c002802c <KiDefaultSignalHandlerTerminate(int)>:
c002802c:	57                   	push   edi
c002802d:	b9 08 00 00 00       	mov    ecx,0x8
c0028032:	56                   	push   esi
c0028033:	be 27 48 02 c0       	mov    esi,0xc0024827
c0028038:	83 ec 24             	sub    esp,0x24
c002803b:	89 e7                	mov    edi,esp
c002803d:	fc                   	cld    
c002803e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028040:	54                   	push   esp
c0028041:	6a 00                	push   0x0
c0028043:	6a 37                	push   0x37
c0028045:	6a 01                	push   0x1
c0028047:	e8 06 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002804c:	83 c4 34             	add    esp,0x34
c002804f:	5e                   	pop    esi
c0028050:	5f                   	pop    edi
c0028051:	c3                   	ret    

c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0028052:	53                   	push   ebx
c0028053:	83 ec 10             	sub    esp,0x10
c0028056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002805a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002805e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0028062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0028066:	cd 60                	int    0x60
c0028068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002806c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028078:	83 c4 10             	add    esp,0x10
c002807b:	5b                   	pop    ebx
c002807c:	c3                   	ret    

Disassembly of section align_previous:

c0029000 <DO_NOT_DELETE()>:
c0029000:	c3                   	ret    
