
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 a2 fa 00 00       	call   c000fac2 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 08 6c 02 c0       	mov    eax,0xc0026c08
c0000025:	3d 08 6c 02 c0       	cmp    eax,0xc0026c08
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 08 6c 02 c0       	push   0xc0026c08
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 08 6c 02 c0       	mov    eax,0xc0026c08
c0000051:	2d 08 6c 02 c0       	sub    eax,0xc0026c08
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 08 6c 02 c0       	push   0xc0026c08
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 40 26 02 c0       	mov    ebx,0xc0022640
c0000097:	81 eb 3c 26 02 c0    	sub    ebx,0xc002263c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 3c 26 02 c0       	mov    esi,0xc002263c
c00000a6:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 08 6c 02 c0       	push   0xc0026c08
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 80 02 c0       	push   0xc00280c8
c0000108:	68 08 6c 02 c0       	push   0xc0026c08
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 fb 61 01 00       	call   c00164a8 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 0c 41 01 00       	call   c00143d1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 d9 61 01 00       	call   c00164a8 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 3a 67 01 00       	call   c0016a28 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 91 6c 01 00       	call   c0016f88 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 c1 02 c0 	lgdtd  ds:0xc002c118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 46 ec 00 00       	jmp    c000efc5 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 80 02 c0       	mov    ds:0xc00280e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 60 26 02 c0 02 	test   BYTE PTR [edx-0x3ffdd9a0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 60 26 02 c0 01 	test   BYTE PTR [edx-0x3ffdd9a0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 60 26 02 c0 08 	test   BYTE PTR [edx-0x3ffdd9a0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 60 26 02 c0 08 	test   BYTE PTR [edx-0x3ffdd9a0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 60 26 02 c0 04 	test   BYTE PTR [ecx-0x3ffdd9a0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 60 26 02 c0 01 	test   BYTE PTR [edx-0x3ffdd9a0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 81 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 81 02 c0    	mov    ecx,DWORD PTR ds:0xc002813c
c0000e2a:	c7 42 0c 34 81 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 81 02 c0 02 	test   BYTE PTR ds:0xc0028100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 84 02 c0    	dec    DWORD PTR ds:0xc0028450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 84 02 c0    	sub    DWORD PTR ds:0xc0028464,eax
c0000e8e:	e8 73 e8 00 00       	call   c000f706 <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 80 e7 00 00       	call   c000f6a8 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 5b e6 00 00       	call   c000f672 <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 56 e6 00 00       	call   c000f6a8 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 4c e5 00 00       	call   c000f672 <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 67 e4 00 00       	call   c000f672 <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 51 e4 00 00       	call   c000f672 <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 81 02 c0    	mov    edi,DWORD PTR ds:0xc0028100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 81 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 81 02 c0 	lea    edx,[eax*8-0x3ffd7ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028140
c0001313:	81 fb 34 81 02 c0    	cmp    ebx,0xc0028134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 81 02 c0       	cmp    eax,0xc0028134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 81 02 c0    	cmp    DWORD PTR ds:0xc0028130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 81 02 c0       	mov    ds:0xc002813c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 81 02 c0       	mov    ds:0xc0028130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000136a:	c7 40 0c 34 81 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 80 02 c0 	lea    ebp,[edx*4-0x3ffd7f08]
c00013b3:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 81 02 c0 	lea    ecx,[edx*4-0x3ffd7f00]
c00013ce:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 84 02 c0 	or     DWORD PTR [edi*4-0x3ffd7bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 81 02 c0 	lea    eax,[eax*8-0x3ffd7ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,ecx
c0001488:	89 0d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,ecx
c000148e:	c7 41 08 34 81 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028134
c0001495:	c7 41 0c 34 81 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 81 02 c0 	lea    edx,[ecx*8-0x3ffd7ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 81 02 c0 	lea    edx,[eax*4-0x3ffd7ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 84 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edi
c000155b:	89 3d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edi
c0001561:	c7 47 08 34 81 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028134
c0001568:	c7 47 0c 34 81 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 81 02 c0    	mov    DWORD PTR ds:0xc0028130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 81 02 c0       	mov    edx,0xc0028100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028454
c00016b6:	c7 05 54 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 84 02 c0    	push   DWORD PTR ds:0xc002845c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 84 02 c0       	mov    eax,ds:0xc002845c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 81 02 c0 00 	cmp    DWORD PTR ds:0xc002812c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 81 02 c0       	mov    eax,0xc0028134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 84 02 c0       	cmp    eax,0xc002842c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 84 02 c0       	mov    eax,ds:0xc0028468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 64 27 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd89c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 81 02 c0       	mov    ds:0xc0028100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 84 02 c0    	mov    DWORD PTR ds:0xc0028444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 84 02 c0    	mov    DWORD PTR ds:0xc0028448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 60 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd13a0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 09 a3 01 00       	jmp    c001c2c4 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 60 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd13a0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 33 a3 01 00       	jmp    c001c304 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 60 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd13a0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 54 a3 01 00       	jmp    c001c344 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 c0 28 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd740]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 c0 28 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd740]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba dc 57 02 c0       	mov    edx,0xc00257dc
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 7c 27 02 c0       	mov    edx,0xc002277c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 84 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 84 02 c0    	mov    ax,ds:0xc0028480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 84 02 c0    	mov    ds:0xc0028480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 82 27 02 c0       	mov    eax,0xc0022782
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 40 28 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd7c0]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 8b 27 02 c0       	mov    eax,0xc002278b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 c0 28 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdd740]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 84 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 10 28 02 c0       	mov    eax,0xc0022810
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 00 28 02 c0       	mov    ebx,0xc0022800
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 e0 27 02 c0       	mov    eax,0xc00227e0
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 f0 27 02 c0       	mov    eax,0xc00227f0
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 92 27 02 c0       	mov    edx,0xc0022792
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 9e 27 02 c0       	mov    edx,0xc002279e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba b2 27 02 c0       	mov    edx,0xc00227b2
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 45 99 00 00       	call   c000f788 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 3d 99 00 00       	call   c000f798 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c e0 2b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022be0
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 e0 2b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022be0
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 20 29 02 c0       	mov    eax,0xc0022920
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 e0 2c 02 c0       	push   0xc0022ce0
c0006327:	e8 3c 69 01 00       	call   c001cc68 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 ee 2c 02 c0       	push   0xc0022cee
c000635f:	e8 04 69 01 00       	call   c001cc68 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 85 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd7a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 6d 68 01 00       	call   c001cc0c <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 80 02 c0       	mov    eax,0xc0028080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 80 02 c0       	mov    eax,0xc0028020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 fd 2c 02 c0       	push   0xc0022cfd
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 8e 02 c0       	mov    ecx,0xc0028e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 85 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd7ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd7ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7abc],esi
c000675b:	c7 87 48 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7ab8],0x0
c0006765:	89 87 40 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7a30],0x0
c000677d:	89 87 4c 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 85 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd7a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c00067f6:	8b 9d 4c 85 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd7ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 85 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd7ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 80 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7fe0]
c000688d:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 85 02 c0    	add    DWORD PTR [ebp-0x3ffd7ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00068ef:	8d 8d 40 85 02 c0    	lea    ecx,[ebp-0x3ffd7ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 85 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd7ab4]
c000692c:	05 40 85 02 c0       	add    eax,0xc0028540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 85 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd7ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 85 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd7ac0],0x0
c00069ec:	8d b8 40 85 02 c0    	lea    edi,[eax-0x3ffd7ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 00 2d 02 c0       	push   0xc0022d00
c0006a0f:	e8 54 62 01 00       	call   c001cc68 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 62 62 01 00       	call   c001cc84 <iso_kprintfd>
c0006a22:	c7 04 24 05 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d05
c0006a29:	e8 3a 62 01 00       	call   c001cc68 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7ac0]
c0006a35:	e8 4a 62 01 00       	call   c001cc84 <iso_kprintfd>
c0006a3a:	c7 04 24 0b 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d0b
c0006a41:	e8 22 62 01 00       	call   c001cc68 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7abc]
c0006a4d:	e8 32 62 01 00       	call   c001cc84 <iso_kprintfd>
c0006a52:	c7 04 24 11 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d11
c0006a59:	e8 0a 62 01 00       	call   c001cc68 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7a30]
c0006a65:	e8 1a 62 01 00       	call   c001cc84 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 85 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd7ab8]
c0006acb:	81 c2 40 85 02 c0    	add    edx,0xc0028540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 85 02 c0    	lea    ebp,[edi-0x3ffd7aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 85 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd7aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 fd 2c 02 c0       	push   0xc0022cfd
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 85 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd7aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7ab0],eax
c0006c0a:	89 93 54 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7aac],edx
c0006c10:	81 c3 40 85 02 c0    	add    ebx,0xc0028540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 85 02 c0    	lea    eax,[edi-0x3ffd7ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 1a 2d 02 c0       	push   0xc0022d1a
c0006c32:	e8 31 60 01 00       	call   c001cc68 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 80 02 c0       	mov    ds:0xc0028060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb4,0x0
c0006c67:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 25 2d 02 c0       	push   0xc0022d25
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 8e 02 c0       	mov    ds:0xc0028eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 2c 2d 02 c0       	push   0xc0022d2c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 80 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd7f80]
c0006d05:	bf 80 8e 02 c0       	mov    edi,0xc0028e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 8e 02 c0       	mov    eax,0xc0028e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 8e 02 c0       	mov    ds:0xc0028ea8,eax
c0006d28:	b8 8a 8e 02 c0       	mov    eax,0xc0028e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 33 2d 02 c0       	push   0xc0022d33
c0006d49:	e8 1a 5f 01 00       	call   c001cc68 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 3e 2d 02 c0       	push   0xc0022d3e
c0006d64:	e8 ff 5e 01 00       	call   c001cc68 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 85 02 c0       	push   0xc0028540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0028540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 f5 89 00 00       	call   c000f788 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 8e 02 c0       	mov    ds:0xc0028eb0,eax
c0006d9f:	e8 e4 89 00 00       	call   c000f788 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 85 02 c0       	mov    ds:0xc0028520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 cf 89 00 00       	call   c000f788 <malloc>
c0006db9:	89 04 9d 80 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 b6 89 00 00       	call   c000f788 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7f80]
c0006dff:	e8 94 89 00 00       	call   c000f798 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 86 89 00 00       	call   c000f798 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 8e 02 c0       	mov    eax,ds:0xc0028eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 6c 89 00 00       	call   c000f798 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 57 89 00 00       	call   c000f798 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	53                   	push   ebx
c0006ed1:	83 ec 14             	sub    esp,0x14
c0006ed4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ed8:	6a 10                	push   0x10
c0006eda:	e8 e5 62 00 00       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006edf:	83 c4 10             	add    esp,0x10
c0006ee2:	84 c0                	test   al,al
c0006ee4:	75 12                	jne    c0006ef8 <Dbg::logc(char)+0x28>
c0006ee6:	ba fd 03 00 00       	mov    edx,0x3fd
c0006eeb:	ec                   	in     al,dx
c0006eec:	a8 20                	test   al,0x20
c0006eee:	74 fb                	je     c0006eeb <Dbg::logc(char)+0x1b>
c0006ef0:	ba f8 03 00 00       	mov    edx,0x3f8
c0006ef5:	88 d8                	mov    al,bl
c0006ef7:	ee                   	out    dx,al
c0006ef8:	83 c4 08             	add    esp,0x8
c0006efb:	5b                   	pop    ebx
c0006efc:	c3                   	ret    

c0006efd <Dbg::logs(char*)>:
c0006efd:	53                   	push   ebx
c0006efe:	83 ec 08             	sub    esp,0x8
c0006f01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	74 16                	je     c0006f22 <Dbg::logs(char*)+0x25>
c0006f0c:	83 ec 0c             	sub    esp,0xc
c0006f0f:	83 c3 01             	add    ebx,0x1
c0006f12:	50                   	push   eax
c0006f13:	e8 b8 ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f18:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1b:	83 c4 10             	add    esp,0x10
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	75 ea                	jne    c0006f0c <Dbg::logs(char*)+0xf>
c0006f22:	83 c4 08             	add    esp,0x8
c0006f25:	5b                   	pop    ebx
c0006f26:	c3                   	ret    

c0006f27 <Dbg::logWriteInt(unsigned int)>:
c0006f27:	83 ec 1c             	sub    esp,0x1c
c0006f2a:	6a 0a                	push   0xa
c0006f2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f30:	50                   	push   eax
c0006f31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f35:	50                   	push   eax
c0006f36:	e8 24 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f3b:	50                   	push   eax
c0006f3c:	e8 bc ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f41:	83 c4 2c             	add    esp,0x2c
c0006f44:	c3                   	ret    

c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f45:	83 ec 1c             	sub    esp,0x1c
c0006f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f4c:	50                   	push   eax
c0006f4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f51:	50                   	push   eax
c0006f52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f56:	52                   	push   edx
c0006f57:	e8 03 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5c:	50                   	push   eax
c0006f5d:	e8 9b ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f62:	83 c4 2c             	add    esp,0x2c
c0006f65:	c3                   	ret    

c0006f66 <Dbg::kprintf(char const*, ...)>:
c0006f66:	55                   	push   ebp
c0006f67:	57                   	push   edi
c0006f68:	56                   	push   esi
c0006f69:	53                   	push   ebx
c0006f6a:	83 ec 1c             	sub    esp,0x1c
c0006f6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f71:	85 db                	test   ebx,ebx
c0006f73:	0f 84 4c 01 00 00    	je     c00070c5 <Dbg::kprintf(char const*, ...)+0x15f>
c0006f79:	83 ec 0c             	sub    esp,0xc
c0006f7c:	6a 10                	push   0x10
c0006f7e:	e8 41 62 00 00       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f83:	83 c4 10             	add    esp,0x10
c0006f86:	84 c0                	test   al,al
c0006f88:	74 08                	je     c0006f92 <Dbg::kprintf(char const*, ...)+0x2c>
c0006f8a:	83 c4 1c             	add    esp,0x1c
c0006f8d:	5b                   	pop    ebx
c0006f8e:	5e                   	pop    esi
c0006f8f:	5f                   	pop    edi
c0006f90:	5d                   	pop    ebp
c0006f91:	c3                   	ret    
c0006f92:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006f96:	31 ff                	xor    edi,edi
c0006f98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f9c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f9f:	85 c0                	test   eax,eax
c0006fa1:	74 e7                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fa3:	8d 77 01             	lea    esi,[edi+0x1]
c0006fa6:	83 f8 25             	cmp    eax,0x25
c0006fa9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fac:	75 4c                	jne    c0006ffa <Dbg::kprintf(char const*, ...)+0x94>
c0006fae:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fb1:	83 c7 02             	add    edi,0x2
c0006fb4:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fb7:	83 e8 25             	sub    eax,0x25
c0006fba:	0f b6 c0             	movzx  eax,al
c0006fbd:	83 f8 53             	cmp    eax,0x53
c0006fc0:	0f 87 e1 00 00 00    	ja     c00070a7 <Dbg::kprintf(char const*, ...)+0x141>
c0006fc6:	ff 24 85 88 2d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd278]
c0006fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fd1:	83 ec 0c             	sub    esp,0xc
c0006fd4:	89 c8                	mov    eax,ecx
c0006fd6:	83 c1 04             	add    ecx,0x4
c0006fd9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fdf:	50                   	push   eax
c0006fe0:	e8 42 ff ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0006fe5:	83 c4 10             	add    esp,0x10
c0006fe8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006feb:	85 c0                	test   eax,eax
c0006fed:	74 9b                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fef:	8d 77 01             	lea    esi,[edi+0x1]
c0006ff2:	83 f8 25             	cmp    eax,0x25
c0006ff5:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006ff8:	74 b4                	je     c0006fae <Dbg::kprintf(char const*, ...)+0x48>
c0006ffa:	83 ec 0c             	sub    esp,0xc
c0006ffd:	89 f7                	mov    edi,esi
c0006fff:	50                   	push   eax
c0007000:	89 ee                	mov    esi,ebp
c0007002:	e8 c9 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007007:	83 c4 10             	add    esp,0x10
c000700a:	eb dc                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c000700c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 c8                	mov    eax,ecx
c0007015:	83 c1 04             	add    ecx,0x4
c0007018:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000701c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000701e:	55                   	push   ebp
c000701f:	e8 d9 fe ff ff       	call   c0006efd <Dbg::logs(char*)>
c0007024:	83 c4 10             	add    esp,0x10
c0007027:	eb bf                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007029:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000702d:	83 ec 0c             	sub    esp,0xc
c0007030:	89 d0                	mov    eax,edx
c0007032:	83 c2 04             	add    edx,0x4
c0007035:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007039:	8b 08                	mov    ecx,DWORD PTR [eax]
c000703b:	51                   	push   ecx
c000703c:	e8 e6 fe ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0007041:	83 c4 10             	add    esp,0x10
c0007044:	eb a2                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007046:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000704a:	83 ec 0c             	sub    esp,0xc
c000704d:	89 d0                	mov    eax,edx
c000704f:	83 c2 04             	add    edx,0x4
c0007052:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007056:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0007059:	50                   	push   eax
c000705a:	e8 71 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000705f:	83 c4 10             	add    esp,0x10
c0007062:	eb 84                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007064:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007068:	89 c8                	mov    eax,ecx
c000706a:	83 c1 04             	add    ecx,0x4
c000706d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007071:	83 ec 08             	sub    esp,0x8
c0007074:	6a 10                	push   0x10
c0007076:	8b 10                	mov    edx,DWORD PTR [eax]
c0007078:	52                   	push   edx
c0007079:	e8 c7 fe ff ff       	call   c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>
c000707e:	83 c4 10             	add    esp,0x10
c0007081:	e9 62 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000708a:	89 d0                	mov    eax,edx
c000708c:	83 c2 08             	add    edx,0x8
c000708f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007093:	eb dc                	jmp    c0007071 <Dbg::kprintf(char const*, ...)+0x10b>
c0007095:	83 ec 0c             	sub    esp,0xc
c0007098:	6a 25                	push   0x25
c000709a:	e8 31 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000709f:	83 c4 10             	add    esp,0x10
c00070a2:	e9 41 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070a7:	83 ec 0c             	sub    esp,0xc
c00070aa:	6a 25                	push   0x25
c00070ac:	e8 1f fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070b1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00070b8:	e8 13 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	e9 23 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 50 2d 02 c0       	push   0xc0022d50
c00070cd:	e8 94 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	83 c4 1c             	add    esp,0x1c
c00070d8:	5b                   	pop    ebx
c00070d9:	5e                   	pop    esi
c00070da:	5f                   	pop    edi
c00070db:	5d                   	pop    ebp
c00070dc:	c3                   	ret    
c00070dd:	66 90                	xchg   ax,ax
c00070df:	90                   	nop

c00070e0 <KiUbsanPrintDetails(char const*, void*)>:
c00070e0:	83 ec 1c             	sub    esp,0x1c
c00070e3:	83 ec 08             	sub    esp,0x8
c00070e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070ea:	68 d8 2e 02 c0       	push   0xc0022ed8
c00070ef:	e8 72 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070f4:	83 c4 10             	add    esp,0x10
c00070f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007103:	8b 00                	mov    eax,DWORD PTR [eax]
c0007105:	83 ec 08             	sub    esp,0x8
c0007108:	50                   	push   eax
c0007109:	68 ec 2e 02 c0       	push   0xc0022eec
c000710e:	e8 53 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007113:	83 c4 10             	add    esp,0x10
c0007116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000711a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000711d:	83 ec 08             	sub    esp,0x8
c0007120:	50                   	push   eax
c0007121:	68 f6 2e 02 c0       	push   0xc0022ef6
c0007126:	e8 3b fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007132:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007135:	83 ec 08             	sub    esp,0x8
c0007138:	50                   	push   eax
c0007139:	68 00 2f 02 c0       	push   0xc0022f00
c000713e:	e8 23 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007143:	83 c4 10             	add    esp,0x10
c0007146:	90                   	nop
c0007147:	83 c4 1c             	add    esp,0x1c
c000714a:	c3                   	ret    
c000714b:	90                   	nop

c000714c <__ubsan_handle_type_mismatch_v1>:
c000714c:	83 ec 0c             	sub    esp,0xc
c000714f:	83 ec 08             	sub    esp,0x8
c0007152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007156:	68 44 30 02 c0       	push   0xc0023044
c000715b:	e8 80 ff ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007160:	83 c4 10             	add    esp,0x10
c0007163:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007168:	75 16                	jne    c0007180 <__ubsan_handle_type_mismatch_v1+0x34>
c000716a:	83 ec 0c             	sub    esp,0xc
c000716d:	68 0a 2f 02 c0       	push   0xc0022f0a
c0007172:	e8 ef fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007177:	83 c4 10             	add    esp,0x10
c000717a:	e9 91 00 00 00       	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c000717f:	90                   	nop
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007187:	85 c0                	test   eax,eax
c0007189:	74 29                	je     c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000718b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000718f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007192:	83 e8 01             	sub    eax,0x1
c0007195:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007199:	75 19                	jne    c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000719b:	83 ec 08             	sub    esp,0x8
c000719e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071a2:	68 64 30 02 c0       	push   0xc0023064
c00071a7:	e8 ba fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071ac:	83 c4 10             	add    esp,0x10
c00071af:	eb 5f                	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071b1:	8d 76 00             	lea    esi,[esi+0x0]
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 1f 2f 02 c0       	push   0xc0022f1f
c00071bc:	e8 a5 fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071c8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071cb:	0f b6 c0             	movzx  eax,al
c00071ce:	83 ec 08             	sub    esp,0x8
c00071d1:	50                   	push   eax
c00071d2:	68 39 2f 02 c0       	push   0xc0022f39
c00071d7:	e8 8a fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071dc:	83 c4 10             	add    esp,0x10
c00071df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071e6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f1:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071f4:	0f b6 c0             	movzx  eax,al
c00071f7:	8b 04 85 a0 61 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9e60]
c00071fe:	51                   	push   ecx
c00071ff:	52                   	push   edx
c0007200:	50                   	push   eax
c0007201:	68 8c 30 02 c0       	push   0xc002308c
c0007206:	e8 5b fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000720b:	83 c4 10             	add    esp,0x10
c000720e:	66 90                	xchg   ax,ax
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	68 44 30 02 c0       	push   0xc0023044
c0007218:	e8 c7 89 00 00       	call   c000fbe4 <KePanic(char const*)>
c000721d:	83 c4 10             	add    esp,0x10
c0007220:	90                   	nop
c0007221:	83 c4 0c             	add    esp,0xc
c0007224:	c3                   	ret    
c0007225:	8d 76 00             	lea    esi,[esi+0x0]

c0007228 <__ubsan_handle_pointer_overflow>:
c0007228:	83 ec 0c             	sub    esp,0xc
c000722b:	83 ec 08             	sub    esp,0x8
c000722e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007232:	68 d4 30 02 c0       	push   0xc00230d4
c0007237:	e8 a4 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000723c:	83 c4 10             	add    esp,0x10
c000723f:	83 ec 0c             	sub    esp,0xc
c0007242:	68 d4 30 02 c0       	push   0xc00230d4
c0007247:	e8 98 89 00 00       	call   c000fbe4 <KePanic(char const*)>
c000724c:	83 c4 10             	add    esp,0x10
c000724f:	90                   	nop
c0007250:	83 c4 0c             	add    esp,0xc
c0007253:	c3                   	ret    

c0007254 <__ubsan_handle_out_of_bounds>:
c0007254:	83 ec 0c             	sub    esp,0xc
c0007257:	83 ec 08             	sub    esp,0x8
c000725a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725e:	68 44 2f 02 c0       	push   0xc0022f44
c0007263:	e8 78 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	83 ec 0c             	sub    esp,0xc
c000726e:	68 44 2f 02 c0       	push   0xc0022f44
c0007273:	e8 6c 89 00 00       	call   c000fbe4 <KePanic(char const*)>
c0007278:	83 c4 10             	add    esp,0x10
c000727b:	90                   	nop
c000727c:	83 c4 0c             	add    esp,0xc
c000727f:	c3                   	ret    

c0007280 <__ubsan_handle_add_overflow>:
c0007280:	83 ec 0c             	sub    esp,0xc
c0007283:	83 ec 08             	sub    esp,0x8
c0007286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000728a:	68 61 2f 02 c0       	push   0xc0022f61
c000728f:	e8 4c fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007294:	83 c4 10             	add    esp,0x10
c0007297:	83 ec 0c             	sub    esp,0xc
c000729a:	68 61 2f 02 c0       	push   0xc0022f61
c000729f:	e8 40 89 00 00       	call   c000fbe4 <KePanic(char const*)>
c00072a4:	83 c4 10             	add    esp,0x10
c00072a7:	90                   	nop
c00072a8:	83 c4 0c             	add    esp,0xc
c00072ab:	c3                   	ret    

c00072ac <__ubsan_handle_load_invalid_value>:
c00072ac:	83 ec 0c             	sub    esp,0xc
c00072af:	83 ec 08             	sub    esp,0x8
c00072b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b6:	68 f4 30 02 c0       	push   0xc00230f4
c00072bb:	e8 20 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072c0:	83 c4 10             	add    esp,0x10
c00072c3:	83 ec 0c             	sub    esp,0xc
c00072c6:	68 f4 30 02 c0       	push   0xc00230f4
c00072cb:	e8 14 89 00 00       	call   c000fbe4 <KePanic(char const*)>
c00072d0:	83 c4 10             	add    esp,0x10
c00072d3:	90                   	nop
c00072d4:	83 c4 0c             	add    esp,0xc
c00072d7:	c3                   	ret    

c00072d8 <__ubsan_handle_divrem_overflow>:
c00072d8:	83 ec 0c             	sub    esp,0xc
c00072db:	83 ec 08             	sub    esp,0x8
c00072de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072e2:	68 18 31 02 c0       	push   0xc0023118
c00072e7:	e8 f4 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072ec:	83 c4 10             	add    esp,0x10
c00072ef:	83 ec 0c             	sub    esp,0xc
c00072f2:	68 18 31 02 c0       	push   0xc0023118
c00072f7:	e8 e8 88 00 00       	call   c000fbe4 <KePanic(char const*)>
c00072fc:	83 c4 10             	add    esp,0x10
c00072ff:	90                   	nop
c0007300:	83 c4 0c             	add    esp,0xc
c0007303:	c3                   	ret    

c0007304 <__ubsan_handle_mul_overflow>:
c0007304:	83 ec 0c             	sub    esp,0xc
c0007307:	83 ec 08             	sub    esp,0x8
c000730a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730e:	68 7d 2f 02 c0       	push   0xc0022f7d
c0007313:	e8 c8 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007318:	83 c4 10             	add    esp,0x10
c000731b:	83 ec 0c             	sub    esp,0xc
c000731e:	68 7d 2f 02 c0       	push   0xc0022f7d
c0007323:	e8 bc 88 00 00       	call   c000fbe4 <KePanic(char const*)>
c0007328:	83 c4 10             	add    esp,0x10
c000732b:	90                   	nop
c000732c:	83 c4 0c             	add    esp,0xc
c000732f:	c3                   	ret    

c0007330 <__ubsan_handle_sub_overflow>:
c0007330:	83 ec 0c             	sub    esp,0xc
c0007333:	83 ec 08             	sub    esp,0x8
c0007336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000733a:	68 99 2f 02 c0       	push   0xc0022f99
c000733f:	e8 9c fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007344:	83 c4 10             	add    esp,0x10
c0007347:	83 ec 0c             	sub    esp,0xc
c000734a:	68 99 2f 02 c0       	push   0xc0022f99
c000734f:	e8 90 88 00 00       	call   c000fbe4 <KePanic(char const*)>
c0007354:	83 c4 10             	add    esp,0x10
c0007357:	90                   	nop
c0007358:	83 c4 0c             	add    esp,0xc
c000735b:	c3                   	ret    

c000735c <__ubsan_handle_shift_out_of_bounds>:
c000735c:	83 ec 0c             	sub    esp,0xc
c000735f:	83 ec 08             	sub    esp,0x8
c0007362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007366:	68 38 31 02 c0       	push   0xc0023138
c000736b:	e8 70 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007370:	83 c4 10             	add    esp,0x10
c0007373:	83 ec 0c             	sub    esp,0xc
c0007376:	68 38 31 02 c0       	push   0xc0023138
c000737b:	e8 64 88 00 00       	call   c000fbe4 <KePanic(char const*)>
c0007380:	83 c4 10             	add    esp,0x10
c0007383:	90                   	nop
c0007384:	83 c4 0c             	add    esp,0xc
c0007387:	c3                   	ret    

c0007388 <__ubsan_handle_negate_overflow>:
c0007388:	83 ec 0c             	sub    esp,0xc
c000738b:	83 ec 08             	sub    esp,0x8
c000738e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007392:	68 5c 31 02 c0       	push   0xc002315c
c0007397:	e8 44 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000739c:	83 c4 10             	add    esp,0x10
c000739f:	83 ec 0c             	sub    esp,0xc
c00073a2:	68 5c 31 02 c0       	push   0xc002315c
c00073a7:	e8 38 88 00 00       	call   c000fbe4 <KePanic(char const*)>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	90                   	nop
c00073b0:	83 c4 0c             	add    esp,0xc
c00073b3:	c3                   	ret    

c00073b4 <KiIsHashInTable(unsigned short)>:
c00073b4:	0f b7 d0             	movzx  edx,ax
c00073b7:	83 e0 07             	and    eax,0x7
c00073ba:	c1 fa 03             	sar    edx,0x3
c00073bd:	88 c1                	mov    cl,al
c00073bf:	0f b6 92 00 93 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd6d00]
c00073c6:	d3 fa                	sar    edx,cl
c00073c8:	89 d0                	mov    eax,edx
c00073ca:	83 e0 01             	and    eax,0x1
c00073cd:	c3                   	ret    

c00073ce <KiSetHashInTable(unsigned short, bool)>:
c00073ce:	56                   	push   esi
c00073cf:	53                   	push   ebx
c00073d0:	0f b7 d8             	movzx  ebx,ax
c00073d3:	c1 fb 03             	sar    ebx,0x3
c00073d6:	83 e0 07             	and    eax,0x7
c00073d9:	89 c1                	mov    ecx,eax
c00073db:	b8 01 00 00 00       	mov    eax,0x1
c00073e0:	0f b6 b3 00 93 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd6d00]
c00073e7:	d3 e0                	shl    eax,cl
c00073e9:	84 d2                	test   dl,dl
c00073eb:	74 04                	je     c00073f1 <KiSetHashInTable(unsigned short, bool)+0x23>
c00073ed:	09 f0                	or     eax,esi
c00073ef:	eb 04                	jmp    c00073f5 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073f1:	f7 d0                	not    eax
c00073f3:	21 f0                	and    eax,esi
c00073f5:	88 83 00 93 02 c0    	mov    BYTE PTR [ebx-0x3ffd6d00],al
c00073fb:	5b                   	pop    ebx
c00073fc:	5e                   	pop    esi
c00073fd:	c3                   	ret    

c00073fe <KiFlushSymlinkChanges()>:
c00073fe:	57                   	push   edi
c00073ff:	56                   	push   esi
c0007400:	53                   	push   ebx
c0007401:	83 ec 1c             	sub    esp,0x1c
c0007404:	68 14 01 00 00       	push   0x114
c0007409:	e8 7a 83 00 00       	call   c000f788 <malloc>
c000740e:	83 c4 0c             	add    esp,0xc
c0007411:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0007417:	68 7b 31 02 c0       	push   0xc002317b
c000741c:	50                   	push   eax
c000741d:	89 c3                	mov    ebx,eax
c000741f:	e8 64 0d 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007424:	83 c4 10             	add    esp,0x10
c0007427:	85 db                	test   ebx,ebx
c0007429:	75 10                	jne    c000743b <KiFlushSymlinkChanges()+0x3d>
c000742b:	83 ec 0c             	sub    esp,0xc
c000742e:	68 99 31 02 c0       	push   0xc0023199
c0007433:	e8 ac 87 00 00       	call   c000fbe4 <KePanic(char const*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	50                   	push   eax
c000743c:	50                   	push   eax
c000743d:	6a 06                	push   0x6
c000743f:	53                   	push   ebx
c0007440:	e8 61 0d 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007445:	83 c4 10             	add    esp,0x10
c0007448:	85 c0                	test   eax,eax
c000744a:	74 10                	je     c000745c <KiFlushSymlinkChanges()+0x5e>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	68 b3 31 02 c0       	push   0xc00231b3
c0007454:	e8 8b 87 00 00       	call   c000fbe4 <KePanic(char const*)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	31 f6                	xor    esi,esi
c000745e:	39 35 c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,esi
c0007464:	7e 70                	jle    c00074d6 <KiFlushSymlinkChanges()+0xd8>
c0007466:	83 ec 0c             	sub    esp,0xc
c0007469:	89 f0                	mov    eax,esi
c000746b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000746d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007471:	c1 e0 08             	shl    eax,0x8
c0007474:	57                   	push   edi
c0007475:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000747a:	50                   	push   eax
c000747b:	6a 00                	push   0x0
c000747d:	68 00 01 00 00       	push   0x100
c0007482:	53                   	push   ebx
c0007483:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007486:	83 c4 20             	add    esp,0x20
c0007489:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007491:	74 10                	je     c00074a3 <KiFlushSymlinkChanges()+0xa5>
c0007493:	83 ec 0c             	sub    esp,0xc
c0007496:	68 cd 31 02 c0       	push   0xc00231cd
c000749b:	e8 44 87 00 00       	call   c000fbe4 <KePanic(char const*)>
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a5:	8d 14 f5 e0 8e 02 c0 	lea    edx,[esi*8-0x3ffd7120]
c00074ac:	83 ec 0c             	sub    esp,0xc
c00074af:	57                   	push   edi
c00074b0:	52                   	push   edx
c00074b1:	6a 00                	push   0x0
c00074b3:	6a 08                	push   0x8
c00074b5:	53                   	push   ebx
c00074b6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074b9:	83 c4 20             	add    esp,0x20
c00074bc:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074c1:	74 10                	je     c00074d3 <KiFlushSymlinkChanges()+0xd5>
c00074c3:	83 ec 0c             	sub    esp,0xc
c00074c6:	68 e7 31 02 c0       	push   0xc00231e7
c00074cb:	e8 14 87 00 00       	call   c000fbe4 <KePanic(char const*)>
c00074d0:	83 c4 10             	add    esp,0x10
c00074d3:	46                   	inc    esi
c00074d4:	eb 88                	jmp    c000745e <KiFlushSymlinkChanges()+0x60>
c00074d6:	83 ec 0c             	sub    esp,0xc
c00074d9:	53                   	push   ebx
c00074da:	e8 25 0d 00 00       	call   c0008204 <File::close()>
c00074df:	83 c4 10             	add    esp,0x10
c00074e2:	85 db                	test   ebx,ebx
c00074e4:	74 0c                	je     c00074f2 <KiFlushSymlinkChanges()+0xf4>
c00074e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074e8:	83 ec 0c             	sub    esp,0xc
c00074eb:	53                   	push   ebx
c00074ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ef:	83 c4 10             	add    esp,0x10
c00074f2:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00074fc:	83 c4 10             	add    esp,0x10
c00074ff:	5b                   	pop    ebx
c0007500:	5e                   	pop    esi
c0007501:	5f                   	pop    edi
c0007502:	c3                   	ret    

c0007503 <KiDeinitialiseSymlinks(void*)>:
c0007503:	e9 f6 fe ff ff       	jmp    c00073fe <KiFlushSymlinkChanges()>

c0007508 <KiGetSymlinkHash(char const*)>:
c0007508:	53                   	push   ebx
c0007509:	89 c3                	mov    ebx,eax
c000750b:	83 ec 14             	sub    esp,0x14
c000750e:	50                   	push   eax
c000750f:	e8 6c 90 ff ff       	call   c0000580 <strlen>
c0007514:	5a                   	pop    edx
c0007515:	59                   	pop    ecx
c0007516:	50                   	push   eax
c0007517:	53                   	push   ebx
c0007518:	e8 28 6c 00 00       	call   c000e145 <KeCalculateCRC32(unsigned char*, int)>
c000751d:	83 c4 18             	add    esp,0x18
c0007520:	5b                   	pop    ebx
c0007521:	89 c2                	mov    edx,eax
c0007523:	c1 ea 10             	shr    edx,0x10
c0007526:	31 d0                	xor    eax,edx
c0007528:	c3                   	ret    

c0007529 <KiCreateSymlinkID()>:
c0007529:	55                   	push   ebp
c000752a:	57                   	push   edi
c000752b:	56                   	push   esi
c000752c:	53                   	push   ebx
c000752d:	31 db                	xor    ebx,ebx
c000752f:	83 ec 1c             	sub    esp,0x1c
c0007532:	e8 33 91 00 00       	call   c001066a <KeRand()>
c0007537:	8b 2d 00 b3 02 c0    	mov    ebp,DWORD PTR ds:0xc002b300
c000753d:	31 d2                	xor    edx,edx
c000753f:	43                   	inc    ebx
c0007540:	31 ff                	xor    edi,edi
c0007542:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007545:	89 ee                	mov    esi,ebp
c0007547:	89 0d 00 b3 02 c0    	mov    DWORD PTR ds:0xc002b300,ecx
c000754d:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007551:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007555:	c1 e0 1f             	shl    eax,0x1f
c0007558:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000755e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007562:	75 10                	jne    c0007574 <KiCreateSymlinkID()+0x4b>
c0007564:	83 ec 0c             	sub    esp,0xc
c0007567:	68 01 32 02 c0       	push   0xc0023201
c000756c:	e8 73 86 00 00       	call   c000fbe4 <KePanic(char const*)>
c0007571:	83 c4 10             	add    esp,0x10
c0007574:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0007578:	75 06                	jne    c0007580 <KiCreateSymlinkID()+0x57>
c000757a:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000757e:	74 b2                	je     c0007532 <KiCreateSymlinkID()+0x9>
c0007580:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007584:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007588:	83 c4 1c             	add    esp,0x1c
c000758b:	5b                   	pop    ebx
c000758c:	31 f0                	xor    eax,esi
c000758e:	5e                   	pop    esi
c000758f:	31 fa                	xor    edx,edi
c0007591:	5f                   	pop    edi
c0007592:	5d                   	pop    ebp
c0007593:	c3                   	ret    

c0007594 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007594:	53                   	push   ebx
c0007595:	83 ec 0c             	sub    esp,0xc
c0007598:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000759c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075a0:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075a9:	68 00 01 00 00       	push   0x100
c00075ae:	6a 00                	push   0x0
c00075b0:	89 0c c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],ecx
c00075b7:	89 14 c5 e0 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7120],edx
c00075be:	c1 e0 08             	shl    eax,0x8
c00075c1:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00075c6:	50                   	push   eax
c00075c7:	e8 24 8f ff ff       	call   c00004f0 <memset>
c00075cc:	58                   	pop    eax
c00075cd:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075d2:	5a                   	pop    edx
c00075d3:	c1 e0 08             	shl    eax,0x8
c00075d6:	53                   	push   ebx
c00075d7:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00075dc:	50                   	push   eax
c00075dd:	e8 6e 90 ff ff       	call   c0000650 <strcpy>
c00075e2:	89 d8                	mov    eax,ebx
c00075e4:	e8 1f ff ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c00075e9:	ba 01 00 00 00       	mov    edx,0x1
c00075ee:	0f b7 c0             	movzx  eax,ax
c00075f1:	e8 d8 fd ff ff       	call   c00073ce <KiSetHashInTable(unsigned short, bool)>
c00075f6:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075fb:	83 c4 10             	add    esp,0x10
c00075fe:	40                   	inc    eax
c00075ff:	a3 c0 8e 02 c0       	mov    ds:0xc0028ec0,eax
c0007604:	83 f8 03             	cmp    eax,0x3
c0007607:	7e 09                	jle    c0007612 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c0007609:	83 c4 08             	add    esp,0x8
c000760c:	5b                   	pop    ebx
c000760d:	e9 ec fd ff ff       	jmp    c00073fe <KiFlushSymlinkChanges()>
c0007612:	83 c4 08             	add    esp,0x8
c0007615:	5b                   	pop    ebx
c0007616:	c3                   	ret    

c0007617 <KeInitialiseSymlinks()>:
c0007617:	57                   	push   edi
c0007618:	56                   	push   esi
c0007619:	53                   	push   ebx
c000761a:	81 ec 14 01 00 00    	sub    esp,0x114
c0007620:	68 00 20 00 00       	push   0x2000
c0007625:	6a 00                	push   0x0
c0007627:	68 00 93 02 c0       	push   0xc0029300
c000762c:	c7 05 00 b3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b300,0x0
c0007636:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c0007640:	e8 ab 8e ff ff       	call   c00004f0 <memset>
c0007645:	59                   	pop    ecx
c0007646:	5b                   	pop    ebx
c0007647:	6a 00                	push   0x0
c0007649:	68 03 75 00 c0       	push   0xc0007503
c000764e:	e8 01 5b 00 00       	call   c000d154 <KeRegisterAtexit(void (*)(void*), void*)>
c0007653:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000765a:	e8 29 81 00 00       	call   c000f788 <malloc>
c000765f:	83 c4 0c             	add    esp,0xc
c0007662:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0007668:	68 7b 31 02 c0       	push   0xc002317b
c000766d:	50                   	push   eax
c000766e:	89 c3                	mov    ebx,eax
c0007670:	e8 13 0b 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007675:	83 c4 10             	add    esp,0x10
c0007678:	85 db                	test   ebx,ebx
c000767a:	75 10                	jne    c000768c <KeInitialiseSymlinks()+0x75>
c000767c:	83 ec 0c             	sub    esp,0xc
c000767f:	68 0a 32 02 c0       	push   0xc002320a
c0007684:	e8 5b 85 00 00       	call   c000fbe4 <KePanic(char const*)>
c0007689:	83 c4 10             	add    esp,0x10
c000768c:	83 ec 0c             	sub    esp,0xc
c000768f:	53                   	push   ebx
c0007690:	e8 d5 0d 00 00       	call   c000846a <File::exists()>
c0007695:	83 c4 10             	add    esp,0x10
c0007698:	84 c0                	test   al,al
c000769a:	75 3a                	jne    c00076d6 <KeInitialiseSymlinks()+0xbf>
c000769c:	52                   	push   edx
c000769d:	52                   	push   edx
c000769e:	6a 12                	push   0x12
c00076a0:	53                   	push   ebx
c00076a1:	e8 00 0b 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c00076a6:	83 c4 10             	add    esp,0x10
c00076a9:	85 c0                	test   eax,eax
c00076ab:	74 10                	je     c00076bd <KeInitialiseSymlinks()+0xa6>
c00076ad:	83 ec 0c             	sub    esp,0xc
c00076b0:	68 27 32 02 c0       	push   0xc0023227
c00076b5:	e8 2a 85 00 00       	call   c000fbe4 <KePanic(char const*)>
c00076ba:	83 c4 10             	add    esp,0x10
c00076bd:	83 ec 0c             	sub    esp,0xc
c00076c0:	53                   	push   ebx
c00076c1:	e8 3e 0b 00 00       	call   c0008204 <File::close()>
c00076c6:	83 c4 10             	add    esp,0x10
c00076c9:	85 db                	test   ebx,ebx
c00076cb:	0f 84 9e 00 00 00    	je     c000776f <KeInitialiseSymlinks()+0x158>
c00076d1:	e9 8d 00 00 00       	jmp    c0007763 <KeInitialiseSymlinks()+0x14c>
c00076d6:	50                   	push   eax
c00076d7:	50                   	push   eax
c00076d8:	6a 01                	push   0x1
c00076da:	53                   	push   ebx
c00076db:	e8 c6 0a 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c00076e0:	83 c4 10             	add    esp,0x10
c00076e3:	85 c0                	test   eax,eax
c00076e5:	74 10                	je     c00076f7 <KeInitialiseSymlinks()+0xe0>
c00076e7:	83 ec 0c             	sub    esp,0xc
c00076ea:	68 44 32 02 c0       	push   0xc0023244
c00076ef:	e8 f0 84 00 00       	call   c000fbe4 <KePanic(char const*)>
c00076f4:	83 c4 10             	add    esp,0x10
c00076f7:	ff 05 00 b3 02 c0    	inc    DWORD PTR ds:0xc002b300
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0007704:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007706:	57                   	push   edi
c0007707:	8d 74 24 20          	lea    esi,[esp+0x20]
c000770b:	56                   	push   esi
c000770c:	6a 00                	push   0x0
c000770e:	68 00 01 00 00       	push   0x100
c0007713:	53                   	push   ebx
c0007714:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007717:	83 c4 20             	add    esp,0x20
c000771a:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007722:	75 33                	jne    c0007757 <KeInitialiseSymlinks()+0x140>
c0007724:	83 ec 0c             	sub    esp,0xc
c0007727:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007729:	57                   	push   edi
c000772a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000772e:	52                   	push   edx
c000772f:	6a 00                	push   0x0
c0007731:	6a 08                	push   0x8
c0007733:	53                   	push   ebx
c0007734:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007737:	83 c4 20             	add    esp,0x20
c000773a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000773f:	75 16                	jne    c0007757 <KeInitialiseSymlinks()+0x140>
c0007741:	89 f0                	mov    eax,esi
c0007743:	e8 c0 fd ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c0007748:	ba 01 00 00 00       	mov    edx,0x1
c000774d:	0f b7 c0             	movzx  eax,ax
c0007750:	e8 79 fc ff ff       	call   c00073ce <KiSetHashInTable(unsigned short, bool)>
c0007755:	eb a0                	jmp    c00076f7 <KeInitialiseSymlinks()+0xe0>
c0007757:	83 ec 0c             	sub    esp,0xc
c000775a:	53                   	push   ebx
c000775b:	e8 a4 0a 00 00       	call   c0008204 <File::close()>
c0007760:	83 c4 10             	add    esp,0x10
c0007763:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007765:	83 ec 0c             	sub    esp,0xc
c0007768:	53                   	push   ebx
c0007769:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000776c:	83 c4 10             	add    esp,0x10
c000776f:	81 c4 10 01 00 00    	add    esp,0x110
c0007775:	5b                   	pop    ebx
c0007776:	5e                   	pop    esi
c0007777:	5f                   	pop    edi
c0007778:	c3                   	ret    

c0007779 <KiIsSymlinkRegistered(char const*)>:
c0007779:	55                   	push   ebp
c000777a:	57                   	push   edi
c000777b:	56                   	push   esi
c000777c:	53                   	push   ebx
c000777d:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007783:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000778a:	89 f0                	mov    eax,esi
c000778c:	e8 77 fd ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c0007791:	0f b7 c0             	movzx  eax,ax
c0007794:	e8 1b fc ff ff       	call   c00073b4 <KiIsHashInTable(unsigned short)>
c0007799:	31 d2                	xor    edx,edx
c000779b:	88 c1                	mov    cl,al
c000779d:	31 c0                	xor    eax,eax
c000779f:	84 c9                	test   cl,cl
c00077a1:	0f 84 31 01 00 00    	je     c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00077a7:	31 db                	xor    ebx,ebx
c00077a9:	39 1d c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,ebx
c00077af:	7e 30                	jle    c00077e1 <KiIsSymlinkRegistered(char const*)+0x68>
c00077b1:	89 d8                	mov    eax,ebx
c00077b3:	c1 e0 08             	shl    eax,0x8
c00077b6:	51                   	push   ecx
c00077b7:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00077bc:	51                   	push   ecx
c00077bd:	50                   	push   eax
c00077be:	56                   	push   esi
c00077bf:	e8 bc 8f ff ff       	call   c0000780 <strcmp>
c00077c4:	83 c4 10             	add    esp,0x10
c00077c7:	85 c0                	test   eax,eax
c00077c9:	75 13                	jne    c00077de <KiIsSymlinkRegistered(char const*)+0x65>
c00077cb:	8b 04 dd e0 8e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd7120]
c00077d2:	8b 14 dd e4 8e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd711c]
c00077d9:	e9 fa 00 00 00       	jmp    c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00077de:	43                   	inc    ebx
c00077df:	eb c8                	jmp    c00077a9 <KiIsSymlinkRegistered(char const*)+0x30>
c00077e1:	83 ec 0c             	sub    esp,0xc
c00077e4:	68 14 01 00 00       	push   0x114
c00077e9:	e8 9a 7f 00 00       	call   c000f788 <malloc>
c00077ee:	83 c4 0c             	add    esp,0xc
c00077f1:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c00077f7:	68 7b 31 02 c0       	push   0xc002317b
c00077fc:	50                   	push   eax
c00077fd:	89 c3                	mov    ebx,eax
c00077ff:	e8 84 09 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007804:	83 c4 10             	add    esp,0x10
c0007807:	85 db                	test   ebx,ebx
c0007809:	75 12                	jne    c000781d <KiIsSymlinkRegistered(char const*)+0xa4>
c000780b:	83 ec 0c             	sub    esp,0xc
c000780e:	68 5f 32 02 c0       	push   0xc002325f
c0007813:	e8 cc 83 00 00       	call   c000fbe4 <KePanic(char const*)>
c0007818:	83 c4 10             	add    esp,0x10
c000781b:	eb 10                	jmp    c000782d <KiIsSymlinkRegistered(char const*)+0xb4>
c000781d:	83 ec 0c             	sub    esp,0xc
c0007820:	53                   	push   ebx
c0007821:	e8 44 0c 00 00       	call   c000846a <File::exists()>
c0007826:	83 c4 10             	add    esp,0x10
c0007829:	84 c0                	test   al,al
c000782b:	74 de                	je     c000780b <KiIsSymlinkRegistered(char const*)+0x92>
c000782d:	52                   	push   edx
c000782e:	52                   	push   edx
c000782f:	6a 01                	push   0x1
c0007831:	53                   	push   ebx
c0007832:	e8 6f 09 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007837:	83 c4 10             	add    esp,0x10
c000783a:	85 c0                	test   eax,eax
c000783c:	74 10                	je     c000784e <KiIsSymlinkRegistered(char const*)+0xd5>
c000783e:	83 ec 0c             	sub    esp,0xc
c0007841:	68 7a 32 02 c0       	push   0xc002327a
c0007846:	e8 99 83 00 00       	call   c000fbe4 <KePanic(char const*)>
c000784b:	83 c4 10             	add    esp,0x10
c000784e:	83 ec 0c             	sub    esp,0xc
c0007851:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007853:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007857:	55                   	push   ebp
c0007858:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000785c:	57                   	push   edi
c000785d:	6a 00                	push   0x0
c000785f:	68 00 01 00 00       	push   0x100
c0007864:	53                   	push   ebx
c0007865:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007868:	83 c4 20             	add    esp,0x20
c000786b:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007873:	75 4b                	jne    c00078c0 <KiIsSymlinkRegistered(char const*)+0x147>
c0007875:	83 ec 0c             	sub    esp,0xc
c0007878:	8b 03                	mov    eax,DWORD PTR [ebx]
c000787a:	55                   	push   ebp
c000787b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000787f:	52                   	push   edx
c0007880:	6a 00                	push   0x0
c0007882:	6a 08                	push   0x8
c0007884:	53                   	push   ebx
c0007885:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007888:	83 c4 20             	add    esp,0x20
c000788b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007890:	75 2e                	jne    c00078c0 <KiIsSymlinkRegistered(char const*)+0x147>
c0007892:	50                   	push   eax
c0007893:	50                   	push   eax
c0007894:	57                   	push   edi
c0007895:	56                   	push   esi
c0007896:	e8 e5 8e ff ff       	call   c0000780 <strcmp>
c000789b:	83 c4 10             	add    esp,0x10
c000789e:	85 c0                	test   eax,eax
c00078a0:	75 ac                	jne    c000784e <KiIsSymlinkRegistered(char const*)+0xd5>
c00078a2:	83 ec 0c             	sub    esp,0xc
c00078a5:	53                   	push   ebx
c00078a6:	e8 59 09 00 00       	call   c0008204 <File::close()>
c00078ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078bb:	83 c4 10             	add    esp,0x10
c00078be:	eb 18                	jmp    c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00078c0:	83 ec 0c             	sub    esp,0xc
c00078c3:	53                   	push   ebx
c00078c4:	e8 3b 09 00 00       	call   c0008204 <File::close()>
c00078c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	31 d2                	xor    edx,edx
c00078d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078de:	5b                   	pop    ebx
c00078df:	5e                   	pop    esi
c00078e0:	5f                   	pop    edi
c00078e1:	5d                   	pop    ebp
c00078e2:	c3                   	ret    

c00078e3 <KeDereferenceSymlink(char const*, char*)>:
c00078e3:	55                   	push   ebp
c00078e4:	57                   	push   edi
c00078e5:	56                   	push   esi
c00078e6:	53                   	push   ebx
c00078e7:	83 ec 48             	sub    esp,0x48
c00078ea:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ee:	56                   	push   esi
c00078ef:	e8 85 fe ff ff       	call   c0007779 <KiIsSymlinkRegistered(char const*)>
c00078f4:	83 c4 10             	add    esp,0x10
c00078f7:	89 c7                	mov    edi,eax
c00078f9:	89 d0                	mov    eax,edx
c00078fb:	09 f8                	or     eax,edi
c00078fd:	75 07                	jne    c0007906 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078ff:	31 c0                	xor    eax,eax
c0007901:	e9 7c 01 00 00       	jmp    c0007a82 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007906:	83 ec 0c             	sub    esp,0xc
c0007909:	89 d5                	mov    ebp,edx
c000790b:	68 14 01 00 00       	push   0x114
c0007910:	e8 73 7e 00 00       	call   c000f788 <malloc>
c0007915:	83 c4 0c             	add    esp,0xc
c0007918:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000791e:	56                   	push   esi
c000791f:	50                   	push   eax
c0007920:	89 c3                	mov    ebx,eax
c0007922:	e8 61 08 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007927:	83 c4 10             	add    esp,0x10
c000792a:	85 db                	test   ebx,ebx
c000792c:	0f 84 32 01 00 00    	je     c0007a64 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007932:	56                   	push   esi
c0007933:	56                   	push   esi
c0007934:	6a 01                	push   0x1
c0007936:	53                   	push   ebx
c0007937:	e8 6a 08 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c000793c:	83 c4 10             	add    esp,0x10
c000793f:	85 c0                	test   eax,eax
c0007941:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007943:	74 09                	je     c000794e <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007945:	83 ec 0c             	sub    esp,0xc
c0007948:	53                   	push   ebx
c0007949:	e9 10 01 00 00       	jmp    c0007a5e <KeDereferenceSymlink(char const*, char*)+0x17b>
c000794e:	83 ec 0c             	sub    esp,0xc
c0007951:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007955:	56                   	push   esi
c0007956:	8d 54 24 37          	lea    edx,[esp+0x37]
c000795a:	52                   	push   edx
c000795b:	6a 00                	push   0x0
c000795d:	6a 08                	push   0x8
c000795f:	53                   	push   ebx
c0007960:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007963:	83 c4 20             	add    esp,0x20
c0007966:	85 c0                	test   eax,eax
c0007968:	0f 85 e2 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000796e:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007973:	0f 85 d7 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007979:	83 ec 0c             	sub    esp,0xc
c000797c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000797e:	56                   	push   esi
c000797f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007983:	52                   	push   edx
c0007984:	6a 00                	push   0x0
c0007986:	6a 08                	push   0x8
c0007988:	53                   	push   ebx
c0007989:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000798c:	83 c4 20             	add    esp,0x20
c000798f:	85 c0                	test   eax,eax
c0007991:	0f 85 b9 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007997:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000799c:	0f 85 ae 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079a2:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079a6:	0f 85 53 ff ff ff    	jne    c00078ff <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079ac:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079b0:	0f 85 49 ff ff ff    	jne    c00078ff <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079be:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079c6:	51                   	push   ecx
c00079c7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079cb:	50                   	push   eax
c00079cc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079d0:	50                   	push   eax
c00079d1:	53                   	push   ebx
c00079d2:	e8 d1 0a 00 00       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079df:	75 6f                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079e5:	31 c9                	xor    ecx,ecx
c00079e7:	bf 0f 00 00 00       	mov    edi,0xf
c00079ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079f0:	39 c7                	cmp    edi,eax
c00079f2:	89 cf                	mov    edi,ecx
c00079f4:	19 d7                	sbb    edi,edx
c00079f6:	73 58                	jae    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f8:	83 c0 f0             	add    eax,0xfffffff0
c00079fb:	bf ff 00 00 00       	mov    edi,0xff
c0007a00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a04:	83 d2 ff             	adc    edx,0xffffffff
c0007a07:	39 c7                	cmp    edi,eax
c0007a09:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a0d:	19 d1                	sbb    ecx,edx
c0007a0f:	72 53                	jb     c0007a64 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a11:	40                   	inc    eax
c0007a12:	52                   	push   edx
c0007a13:	50                   	push   eax
c0007a14:	6a 00                	push   0x0
c0007a16:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a1a:	e8 d1 8a ff ff       	call   c00004f0 <memset>
c0007a1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a21:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a30:	53                   	push   ebx
c0007a31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a34:	83 c4 20             	add    esp,0x20
c0007a37:	85 c0                	test   eax,eax
c0007a39:	75 15                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a3f:	89 c7                	mov    edi,eax
c0007a41:	c1 ff 1f             	sar    edi,0x1f
c0007a44:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a48:	75 06                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a4a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a4e:	74 19                	je     c0007a69 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a50:	83 ec 0c             	sub    esp,0xc
c0007a53:	53                   	push   ebx
c0007a54:	e8 ab 07 00 00       	call   c0008204 <File::close()>
c0007a59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a61:	83 c4 10             	add    esp,0x10
c0007a64:	83 c8 ff             	or     eax,0xffffffff
c0007a67:	eb 19                	jmp    c0007a82 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a69:	83 ec 0c             	sub    esp,0xc
c0007a6c:	53                   	push   ebx
c0007a6d:	e8 92 07 00 00       	call   c0008204 <File::close()>
c0007a72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a7a:	83 c4 10             	add    esp,0x10
c0007a7d:	b8 01 00 00 00       	mov    eax,0x1
c0007a82:	83 c4 3c             	add    esp,0x3c
c0007a85:	5b                   	pop    ebx
c0007a86:	5e                   	pop    esi
c0007a87:	5f                   	pop    edi
c0007a88:	5d                   	pop    ebp
c0007a89:	c3                   	ret    

c0007a8a <KeCreateSymlink(char const*, char const*)>:
c0007a8a:	55                   	push   ebp
c0007a8b:	57                   	push   edi
c0007a8c:	56                   	push   esi
c0007a8d:	53                   	push   ebx
c0007a8e:	83 ec 38             	sub    esp,0x38
c0007a91:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a95:	68 14 01 00 00       	push   0x114
c0007a9a:	e8 e9 7c 00 00       	call   c000f788 <malloc>
c0007a9f:	6a 00                	push   0x0
c0007aa1:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0007aa7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007aab:	89 c3                	mov    ebx,eax
c0007aad:	50                   	push   eax
c0007aae:	e8 d7 05 00 00       	call   c000808a <File::File(char const*, Process*, bool)>
c0007ab3:	83 c4 20             	add    esp,0x20
c0007ab6:	85 db                	test   ebx,ebx
c0007ab8:	b8 01 00 00 00       	mov    eax,0x1
c0007abd:	0f 84 fb 00 00 00    	je     c0007bbe <KeCreateSymlink(char const*, char const*)+0x134>
c0007ac3:	52                   	push   edx
c0007ac4:	52                   	push   edx
c0007ac5:	6a 12                	push   0x12
c0007ac7:	53                   	push   ebx
c0007ac8:	e8 d9 06 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007acd:	83 c4 10             	add    esp,0x10
c0007ad0:	85 c0                	test   eax,eax
c0007ad2:	74 0b                	je     c0007adf <KeCreateSymlink(char const*, char const*)+0x55>
c0007ad4:	83 ec 0c             	sub    esp,0xc
c0007ad7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad9:	53                   	push   ebx
c0007ada:	e9 d4 00 00 00       	jmp    c0007bb3 <KeCreateSymlink(char const*, char const*)+0x129>
c0007adf:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007ae3:	be 95 32 02 c0       	mov    esi,0xc0023295
c0007ae8:	b9 09 00 00 00       	mov    ecx,0x9
c0007aed:	fc                   	cld    
c0007aee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007af0:	83 ec 0c             	sub    esp,0xc
c0007af3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007af7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af9:	56                   	push   esi
c0007afa:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007afe:	52                   	push   edx
c0007aff:	6a 00                	push   0x0
c0007b01:	6a 08                	push   0x8
c0007b03:	53                   	push   ebx
c0007b04:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b07:	83 c4 20             	add    esp,0x20
c0007b0a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b0f:	0f 85 90 00 00 00    	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b15:	85 c0                	test   eax,eax
c0007b17:	0f 85 88 00 00 00    	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1d:	e8 07 fa ff ff       	call   c0007529 <KiCreateSymlinkID()>
c0007b22:	83 ec 0c             	sub    esp,0xc
c0007b25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b29:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b2f:	56                   	push   esi
c0007b30:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b34:	52                   	push   edx
c0007b35:	6a 00                	push   0x0
c0007b37:	6a 08                	push   0x8
c0007b39:	53                   	push   ebx
c0007b3a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b3d:	83 c4 20             	add    esp,0x20
c0007b40:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b45:	75 5e                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b47:	85 c0                	test   eax,eax
c0007b49:	75 5a                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b4d:	83 ec 0c             	sub    esp,0xc
c0007b50:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b53:	55                   	push   ebp
c0007b54:	e8 27 8a ff ff       	call   c0000580 <strlen>
c0007b59:	31 d2                	xor    edx,edx
c0007b5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b5e:	55                   	push   ebp
c0007b5f:	52                   	push   edx
c0007b60:	50                   	push   eax
c0007b61:	53                   	push   ebx
c0007b62:	ff d7                	call   edi
c0007b64:	83 c4 14             	add    esp,0x14
c0007b67:	55                   	push   ebp
c0007b68:	89 c6                	mov    esi,eax
c0007b6a:	e8 11 8a ff ff       	call   c0000580 <strlen>
c0007b6f:	83 c4 10             	add    esp,0x10
c0007b72:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b76:	75 2d                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b78:	85 f6                	test   esi,esi
c0007b7a:	75 29                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b7c:	50                   	push   eax
c0007b7d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b85:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b89:	e8 06 fa ff ff       	call   c0007594 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b91:	e8 6e 06 00 00       	call   c0008204 <File::close()>
c0007b96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b9e:	83 c4 10             	add    esp,0x10
c0007ba1:	31 c0                	xor    eax,eax
c0007ba3:	eb 19                	jmp    c0007bbe <KeCreateSymlink(char const*, char const*)+0x134>
c0007ba5:	83 ec 0c             	sub    esp,0xc
c0007ba8:	53                   	push   ebx
c0007ba9:	e8 56 06 00 00       	call   c0008204 <File::close()>
c0007bae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb6:	83 c4 10             	add    esp,0x10
c0007bb9:	b8 01 00 00 00       	mov    eax,0x1
c0007bbe:	83 c4 2c             	add    esp,0x2c
c0007bc1:	5b                   	pop    ebx
c0007bc2:	5e                   	pop    esi
c0007bc3:	5f                   	pop    edi
c0007bc4:	5d                   	pop    ebp
c0007bc5:	c3                   	ret    

c0007bc6 <File::read(unsigned long long, void*, int*)>:
c0007bc6:	53                   	push   ebx
c0007bc7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bcb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd6:	83 f8 19             	cmp    eax,0x19
c0007bd9:	77 35                	ja     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bdb:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007be2:	85 c0                	test   eax,eax
c0007be4:	74 2a                	je     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007be6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007bec:	85 c0                	test   eax,eax
c0007bee:	74 20                	je     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf4:	74 21                	je     c0007c17 <File::read(unsigned long long, void*, int*)+0x51>
c0007bf6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bfc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c0a:	5b                   	pop    ebx
c0007c0b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c0e:	ff e0                	jmp    eax
c0007c10:	b8 0b 00 00 00       	mov    eax,0xb
c0007c15:	eb 05                	jmp    c0007c1c <File::read(unsigned long long, void*, int*)+0x56>
c0007c17:	b8 05 00 00 00       	mov    eax,0x5
c0007c1c:	5b                   	pop    ebx
c0007c1d:	c3                   	ret    

c0007c1e <File::write(unsigned long long, void*, int*)>:
c0007c1e:	53                   	push   ebx
c0007c1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c27:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2e:	83 f8 19             	cmp    eax,0x19
c0007c31:	77 35                	ja     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c33:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c3a:	85 c0                	test   eax,eax
c0007c3c:	74 2a                	je     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c3e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c44:	85 c0                	test   eax,eax
c0007c46:	74 20                	je     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c48:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c4c:	74 21                	je     c0007c6f <File::write(unsigned long long, void*, int*)+0x51>
c0007c4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c50:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c54:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c62:	5b                   	pop    ebx
c0007c63:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c66:	ff e0                	jmp    eax
c0007c68:	b8 0b 00 00 00       	mov    eax,0xb
c0007c6d:	eb 05                	jmp    c0007c74 <File::write(unsigned long long, void*, int*)+0x56>
c0007c6f:	b8 05 00 00 00       	mov    eax,0x5
c0007c74:	5b                   	pop    ebx
c0007c75:	c3                   	ret    

c0007c76 <Directory::read(unsigned long long, void*, int*)>:
c0007c76:	53                   	push   ebx
c0007c77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c7f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c86:	83 f8 19             	cmp    eax,0x19
c0007c89:	77 35                	ja     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c8b:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c92:	85 c0                	test   eax,eax
c0007c94:	74 2a                	je     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c96:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c9c:	85 c0                	test   eax,eax
c0007c9e:	74 20                	je     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007ca4:	74 21                	je     c0007cc7 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007ca6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007ca8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cac:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007cb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cba:	5b                   	pop    ebx
c0007cbb:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cbe:	ff e0                	jmp    eax
c0007cc0:	b8 0b 00 00 00       	mov    eax,0xb
c0007cc5:	eb 05                	jmp    c0007ccc <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cc7:	b8 05 00 00 00       	mov    eax,0x5
c0007ccc:	5b                   	pop    ebx
c0007ccd:	c3                   	ret    

c0007cce <Directory::write(unsigned long long, void*, int*)>:
c0007cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cd9:	b8 0b 00 00 00       	mov    eax,0xb
c0007cde:	83 fa 19             	cmp    edx,0x19
c0007ce1:	77 18                	ja     c0007cfb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ce3:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0007cea:	85 d2                	test   edx,edx
c0007cec:	74 0d                	je     c0007cfb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cee:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cf5:	19 c0                	sbb    eax,eax
c0007cf7:	83 e0 0a             	and    eax,0xa
c0007cfa:	40                   	inc    eax
c0007cfb:	c3                   	ret    

c0007cfc <File::isAtty()>:
c0007cfc:	31 c0                	xor    eax,eax
c0007cfe:	c3                   	ret    
c0007cff:	90                   	nop

c0007d00 <Directory::isAtty()>:
c0007d00:	31 c0                	xor    eax,eax
c0007d02:	c3                   	ret    
c0007d03:	90                   	nop

c0007d04 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d04:	b8 0a 00 00 00       	mov    eax,0xa
c0007d09:	c3                   	ret    

c0007d0a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d0a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d0f:	c3                   	ret    

c0007d10 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d10:	31 c0                	xor    eax,eax
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <File::~File()>:
c0007d16:	83 ec 0c             	sub    esp,0xc
c0007d19:	ba 6c 33 02 c0       	mov    edx,0xc002336c
c0007d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d22:	89 10                	mov    DWORD PTR [eax],edx
c0007d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d28:	83 ec 0c             	sub    esp,0xc
c0007d2b:	50                   	push   eax
c0007d2c:	e8 3d b2 00 00       	call   c0012f6e <UnixFile::~UnixFile()>
c0007d31:	83 c4 10             	add    esp,0x10
c0007d34:	90                   	nop
c0007d35:	83 c4 0c             	add    esp,0xc
c0007d38:	c3                   	ret    
c0007d39:	90                   	nop

c0007d3a <File::~File()>:
c0007d3a:	83 ec 0c             	sub    esp,0xc
c0007d3d:	83 ec 0c             	sub    esp,0xc
c0007d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d44:	e8 cd ff ff ff       	call   c0007d16 <File::~File()>
c0007d49:	83 c4 10             	add    esp,0x10
c0007d4c:	83 ec 08             	sub    esp,0x8
c0007d4f:	68 14 01 00 00       	push   0x114
c0007d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d58:	e8 5f 55 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0007d5d:	83 c4 10             	add    esp,0x10
c0007d60:	83 c4 0c             	add    esp,0xc
c0007d63:	c3                   	ret    

c0007d64 <Directory::~Directory()>:
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	ba 88 33 02 c0       	mov    edx,0xc0023388
c0007d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d70:	89 10                	mov    DWORD PTR [eax],edx
c0007d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d76:	83 ec 0c             	sub    esp,0xc
c0007d79:	50                   	push   eax
c0007d7a:	e8 ef b1 00 00       	call   c0012f6e <UnixFile::~UnixFile()>
c0007d7f:	83 c4 10             	add    esp,0x10
c0007d82:	90                   	nop
c0007d83:	83 c4 0c             	add    esp,0xc
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Directory::~Directory()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	83 ec 0c             	sub    esp,0xc
c0007d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d92:	e8 cd ff ff ff       	call   c0007d64 <Directory::~Directory()>
c0007d97:	83 c4 10             	add    esp,0x10
c0007d9a:	83 ec 08             	sub    esp,0x8
c0007d9d:	68 14 01 00 00       	push   0x114
c0007da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da6:	e8 11 55 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	83 c4 0c             	add    esp,0xc
c0007db1:	c3                   	ret    

c0007db2 <Filesystem::Filesystem()>:
c0007db2:	ba 00 33 02 c0       	mov    edx,0xc0023300
c0007db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dbb:	89 10                	mov    DWORD PTR [eax],edx
c0007dbd:	8b 15 04 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b304
c0007dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dce:	a3 04 b3 02 c0       	mov    ds:0xc002b304,eax
c0007dd3:	90                   	nop
c0007dd4:	c3                   	ret    
c0007dd5:	90                   	nop

c0007dd6 <Filesystem::~Filesystem()>:
c0007dd6:	ba 00 33 02 c0       	mov    edx,0xc0023300
c0007ddb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddf:	89 10                	mov    DWORD PTR [eax],edx
c0007de1:	90                   	nop
c0007de2:	c3                   	ret    
c0007de3:	90                   	nop

c0007de4 <Filesystem::~Filesystem()>:
c0007de4:	83 ec 0c             	sub    esp,0xc
c0007de7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007deb:	e8 e6 ff ff ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c0007df0:	83 c4 04             	add    esp,0x4
c0007df3:	83 ec 08             	sub    esp,0x8
c0007df6:	6a 08                	push   0x8
c0007df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dfc:	e8 bb 54 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0007e01:	83 c4 10             	add    esp,0x10
c0007e04:	83 c4 0c             	add    esp,0xc
c0007e07:	c3                   	ret    

c0007e08 <Fs::getcwd(Process*, char*, int)>:
c0007e08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e0c:	31 c0                	xor    eax,eax
c0007e0e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e12:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e15:	7d 15                	jge    c0007e2c <Fs::getcwd(Process*, char*, int)+0x24>
c0007e17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e1b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e22:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e25:	84 c9                	test   cl,cl
c0007e27:	74 06                	je     c0007e2f <Fs::getcwd(Process*, char*, int)+0x27>
c0007e29:	40                   	inc    eax
c0007e2a:	eb e2                	jmp    c0007e0e <Fs::getcwd(Process*, char*, int)+0x6>
c0007e2c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e2f:	31 c0                	xor    eax,eax
c0007e31:	c3                   	ret    

c0007e32 <Fs::initVFS()>:
c0007e32:	83 ec 18             	sub    esp,0x18
c0007e35:	6a 08                	push   0x8
c0007e37:	e8 4c 79 00 00       	call   c000f788 <malloc>
c0007e3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e3f:	e8 20 46 01 00       	call   c001c464 <FAT::FAT()>
c0007e44:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e4b:	e8 38 79 00 00       	call   c000f788 <malloc>
c0007e50:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e53:	e8 3a 55 01 00       	call   c001d392 <ISO9660::ISO9660()>
c0007e58:	83 c4 1c             	add    esp,0x1c
c0007e5b:	c3                   	ret    

c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e5c:	55                   	push   ebp
c0007e5d:	57                   	push   edi
c0007e5e:	56                   	push   esi
c0007e5f:	53                   	push   ebx
c0007e60:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e66:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e6d:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e74:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e7b:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e82:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e86:	68 00 04 00 00       	push   0x400
c0007e8b:	6a 00                	push   0x0
c0007e8d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e91:	57                   	push   edi
c0007e92:	e8 59 86 ff ff       	call   c00004f0 <memset>
c0007e97:	83 c4 10             	add    esp,0x10
c0007e9a:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e9e:	75 0b                	jne    c0007eab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007ea0:	50                   	push   eax
c0007ea1:	50                   	push   eax
c0007ea2:	56                   	push   esi
c0007ea3:	57                   	push   edi
c0007ea4:	e8 a7 87 ff ff       	call   c0000650 <strcpy>
c0007ea9:	eb 45                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007eab:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007eae:	83 f8 2f             	cmp    eax,0x2f
c0007eb1:	74 05                	je     c0007eb8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007eb3:	83 f8 5c             	cmp    eax,0x5c
c0007eb6:	75 19                	jne    c0007ed1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007eb8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007ebb:	3c 60                	cmp    al,0x60
c0007ebd:	7e 03                	jle    c0007ec2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007ebf:	83 e8 20             	sub    eax,0x20
c0007ec2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ec6:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007ecd:	50                   	push   eax
c0007ece:	50                   	push   eax
c0007ecf:	eb 18                	jmp    c0007ee9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007ed1:	50                   	push   eax
c0007ed2:	50                   	push   eax
c0007ed3:	55                   	push   ebp
c0007ed4:	57                   	push   edi
c0007ed5:	e8 76 87 ff ff       	call   c0000650 <strcpy>
c0007eda:	58                   	pop    eax
c0007edb:	5a                   	pop    edx
c0007edc:	68 49 4d 02 c0       	push   0xc0024d49
c0007ee1:	57                   	push   edi
c0007ee2:	e8 89 89 ff ff       	call   c0000870 <strcat>
c0007ee7:	59                   	pop    ecx
c0007ee8:	5d                   	pop    ebp
c0007ee9:	56                   	push   esi
c0007eea:	57                   	push   edi
c0007eeb:	e8 80 89 ff ff       	call   c0000870 <strcat>
c0007ef0:	83 c4 10             	add    esp,0x10
c0007ef3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007ef7:	3c 60                	cmp    al,0x60
c0007ef9:	7e 03                	jle    c0007efe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007efb:	83 e8 20             	sub    eax,0x20
c0007efe:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007f02:	be 03 00 00 00       	mov    esi,0x3
c0007f07:	88 03                	mov    BYTE PTR [ebx],al
c0007f09:	b8 03 00 00 00       	mov    eax,0x3
c0007f0e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007f15:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007f1b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007f1f:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007f24:	89 fa                	mov    edx,edi
c0007f26:	0f be ea             	movsx  ebp,dl
c0007f29:	85 ed                	test   ebp,ebp
c0007f2b:	0f 84 a1 00 00 00    	je     c0007fd2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007f31:	8d 56 01             	lea    edx,[esi+0x1]
c0007f34:	83 fd 2f             	cmp    ebp,0x2f
c0007f37:	74 05                	je     c0007f3e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007f39:	83 fd 5c             	cmp    ebp,0x5c
c0007f3c:	75 12                	jne    c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f3e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f43:	89 c5                	mov    ebp,eax
c0007f45:	74 09                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f47:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007f4b:	40                   	inc    eax
c0007f4c:	89 d6                	mov    esi,edx
c0007f4e:	eb cf                	jmp    c0007f1f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f50:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007f55:	89 f9                	mov    ecx,edi
c0007f57:	0f be e9             	movsx  ebp,cl
c0007f5a:	75 61                	jne    c0007fbd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f5c:	83 fd 2e             	cmp    ebp,0x2e
c0007f5f:	75 5c                	jne    c0007fbd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f61:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f66:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f6b:	74 19                	je     c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f6d:	83 fd 2e             	cmp    ebp,0x2e
c0007f70:	74 55                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f72:	89 f2                	mov    edx,esi
c0007f74:	42                   	inc    edx
c0007f75:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f7a:	83 f9 2f             	cmp    ecx,0x2f
c0007f7d:	74 f5                	je     c0007f74 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f7f:	83 f9 5c             	cmp    ecx,0x5c
c0007f82:	74 f0                	je     c0007f74 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f84:	eb c6                	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f86:	83 fd 2e             	cmp    ebp,0x2e
c0007f89:	74 3c                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f8b:	83 f8 03             	cmp    eax,0x3
c0007f8e:	74 bc                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f90:	42                   	inc    edx
c0007f91:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f96:	83 f9 2f             	cmp    ecx,0x2f
c0007f99:	74 f5                	je     c0007f90 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f9b:	83 f9 5c             	cmp    ecx,0x5c
c0007f9e:	74 f0                	je     c0007f90 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007fa0:	48                   	dec    eax
c0007fa1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007fa5:	75 06                	jne    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007fa7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fab:	eb f3                	jmp    c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007fad:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007fb1:	74 07                	je     c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007fb3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fb7:	48                   	dec    eax
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007fba:	40                   	inc    eax
c0007fbb:	eb 8f                	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fbd:	83 fd 2f             	cmp    ebp,0x2f
c0007fc0:	74 8a                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fc2:	83 fd 5c             	cmp    ebp,0x5c
c0007fc5:	74 85                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fc7:	89 f9                	mov    ecx,edi
c0007fc9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007fcc:	40                   	inc    eax
c0007fcd:	e9 7a ff ff ff       	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fd6:	83 ec 0c             	sub    esp,0xc
c0007fd9:	53                   	push   ebx
c0007fda:	e8 a1 85 ff ff       	call   c0000580 <strlen>
c0007fdf:	83 c4 10             	add    esp,0x10
c0007fe2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007fe7:	74 1c                	je     c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fe9:	83 ec 0c             	sub    esp,0xc
c0007fec:	53                   	push   ebx
c0007fed:	e8 8e 85 ff ff       	call   c0000580 <strlen>
c0007ff2:	83 c4 10             	add    esp,0x10
c0007ff5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ffa:	74 09                	je     c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007ffc:	31 ff                	xor    edi,edi
c0007ffe:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0008003:	eb 5c                	jmp    c0008061 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008005:	83 ec 0c             	sub    esp,0xc
c0008008:	53                   	push   ebx
c0008009:	e8 72 85 ff ff       	call   c0000580 <strlen>
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0008016:	74 e4                	je     c0007ffc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0008018:	83 ec 0c             	sub    esp,0xc
c000801b:	53                   	push   ebx
c000801c:	e8 5f 85 ff ff       	call   c0000580 <strlen>
c0008021:	83 c4 10             	add    esp,0x10
c0008024:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0008029:	eb ab                	jmp    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000802b:	52                   	push   edx
c000802c:	52                   	push   edx
c000802d:	53                   	push   ebx
c000802e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0008032:	55                   	push   ebp
c0008033:	e8 18 86 ff ff       	call   c0000650 <strcpy>
c0008038:	59                   	pop    ecx
c0008039:	58                   	pop    eax
c000803a:	53                   	push   ebx
c000803b:	55                   	push   ebp
c000803c:	e8 a2 f8 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c0008041:	83 c4 10             	add    esp,0x10
c0008044:	48                   	dec    eax
c0008045:	75 37                	jne    c000807e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008047:	50                   	push   eax
c0008048:	53                   	push   ebx
c0008049:	55                   	push   ebp
c000804a:	68 9e 32 02 c0       	push   0xc002329e
c000804f:	e8 12 ef ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008054:	8d 47 01             	lea    eax,[edi+0x1]
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	83 ff 14             	cmp    edi,0x14
c000805d:	74 08                	je     c0008067 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000805f:	89 c7                	mov    edi,eax
c0008061:	85 f6                	test   esi,esi
c0008063:	75 c6                	jne    c000802b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008065:	eb 17                	jmp    c000807e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008067:	83 ec 0c             	sub    esp,0xc
c000806a:	bf 15 00 00 00       	mov    edi,0x15
c000806f:	68 b9 32 02 c0       	push   0xc00232b9
c0008074:	e8 6b 7b 00 00       	call   c000fbe4 <KePanic(char const*)>
c0008079:	83 c4 10             	add    esp,0x10
c000807c:	eb e3                	jmp    c0008061 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000807e:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008084:	5b                   	pop    ebx
c0008085:	5e                   	pop    esi
c0008086:	5f                   	pop    edi
c0008087:	5d                   	pop    ebp
c0008088:	c3                   	ret    
c0008089:	90                   	nop

c000808a <File::File(char const*, Process*, bool)>:
c000808a:	83 ec 1c             	sub    esp,0x1c
c000808d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008091:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008099:	83 ec 08             	sub    esp,0x8
c000809c:	6a 00                	push   0x0
c000809e:	50                   	push   eax
c000809f:	e8 e4 ac 00 00       	call   c0012d88 <UnixFile::UnixFile(int)>
c00080a4:	83 c4 10             	add    esp,0x10
c00080a7:	ba 6c 33 02 c0       	mov    edx,0xc002336c
c00080ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b0:	89 10                	mov    DWORD PTR [eax],edx
c00080b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b7:	85 c0                	test   eax,eax
c00080b9:	74 0f                	je     c00080ca <File::File(char const*, Process*, bool)+0x40>
c00080bb:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c00080c0:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c4:	74 04                	je     c00080ca <File::File(char const*, Process*, bool)+0x40>
c00080c6:	b0 01                	mov    al,0x1
c00080c8:	eb 02                	jmp    c00080cc <File::File(char const*, Process*, bool)+0x42>
c00080ca:	b0 00                	mov    al,0x0
c00080cc:	0f b6 c0             	movzx  eax,al
c00080cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080dd:	83 c2 0d             	add    edx,0xd
c00080e0:	50                   	push   eax
c00080e1:	51                   	push   ecx
c00080e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e6:	52                   	push   edx
c00080e7:	e8 70 fd ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ec:	83 c4 10             	add    esp,0x10
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fa:	83 c2 0d             	add    edx,0xd
c00080fd:	83 ec 04             	sub    esp,0x4
c0008100:	50                   	push   eax
c0008101:	52                   	push   edx
c0008102:	68 df 32 02 c0       	push   0xc00232df
c0008107:	e8 5a ee ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008113:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008116:	83 e8 41             	sub    eax,0x41
c0008119:	88 c2                	mov    dl,al
c000811b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000811f:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008129:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008131:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008137:	0f b6 c0             	movzx  eax,al
c000813a:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008141:	85 c0                	test   eax,eax
c0008143:	74 3e                	je     c0008183 <File::File(char const*, Process*, bool)+0xf9>
c0008145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008149:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000814f:	0f b6 c0             	movzx  eax,al
c0008152:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008159:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000815f:	85 c0                	test   eax,eax
c0008161:	75 20                	jne    c0008183 <File::File(char const*, Process*, bool)+0xf9>
c0008163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008167:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816d:	0f b6 c0             	movzx  eax,al
c0008170:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008177:	83 ec 0c             	sub    esp,0xc
c000817a:	50                   	push   eax
c000817b:	e8 0a 28 00 00       	call   c000a98a <LogicalDisk::mount()>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	90                   	nop
c0008184:	83 c4 1c             	add    esp,0x1c
c0008187:	c3                   	ret    

c0008188 <File::File(char const*, Process*)>:
c0008188:	83 ec 0c             	sub    esp,0xc
c000818b:	6a 01                	push   0x1
c000818d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008199:	e8 ec fe ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	90                   	nop
c00081a2:	83 c4 0c             	add    esp,0xc
c00081a5:	c3                   	ret    

c00081a6 <File::open(FileOpenMode)>:
c00081a6:	53                   	push   ebx
c00081a7:	b8 0b 00 00 00       	mov    eax,0xb
c00081ac:	83 ec 08             	sub    esp,0x8
c00081af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081ba:	83 fa 19             	cmp    edx,0x19
c00081bd:	77 40                	ja     c00081ff <File::open(FileOpenMode)+0x59>
c00081bf:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00081c6:	85 d2                	test   edx,edx
c00081c8:	74 35                	je     c00081ff <File::open(FileOpenMode)+0x59>
c00081ca:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d0:	85 d2                	test   edx,edx
c00081d2:	74 2b                	je     c00081ff <File::open(FileOpenMode)+0x59>
c00081d4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081d8:	b8 06 00 00 00       	mov    eax,0x6
c00081dd:	75 20                	jne    c00081ff <File::open(FileOpenMode)+0x59>
c00081df:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081eb:	51                   	push   ecx
c00081ec:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081ef:	51                   	push   ecx
c00081f0:	52                   	push   edx
c00081f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f4:	83 c4 10             	add    esp,0x10
c00081f7:	85 c0                	test   eax,eax
c00081f9:	75 04                	jne    c00081ff <File::open(FileOpenMode)+0x59>
c00081fb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081ff:	83 c4 08             	add    esp,0x8
c0008202:	5b                   	pop    ebx
c0008203:	c3                   	ret    

c0008204 <File::close()>:
c0008204:	53                   	push   ebx
c0008205:	b8 0b 00 00 00       	mov    eax,0xb
c000820a:	83 ec 08             	sub    esp,0x8
c000820d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008211:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008218:	83 f9 19             	cmp    ecx,0x19
c000821b:	77 41                	ja     c000825e <File::close()+0x5a>
c000821d:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c0008224:	85 db                	test   ebx,ebx
c0008226:	74 36                	je     c000825e <File::close()+0x5a>
c0008228:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000822f:	74 2d                	je     c000825e <File::close()+0x5a>
c0008231:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008235:	b8 05 00 00 00       	mov    eax,0x5
c000823a:	74 22                	je     c000825e <File::close()+0x5a>
c000823c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008240:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c0008247:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824d:	53                   	push   ebx
c000824e:	53                   	push   ebx
c000824f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008251:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008257:	50                   	push   eax
c0008258:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	83 c4 08             	add    esp,0x8
c0008261:	5b                   	pop    ebx
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::seek(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	b8 0b 00 00 00       	mov    eax,0xb
c000826a:	53                   	push   ebx
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008278:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::seek(unsigned long long)+0x51>
c0008284:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c0008299:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000829d:	b8 05 00 00 00       	mov    eax,0x5
c00082a2:	74 11                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::truncate(unsigned long long)>:
c00082ba:	56                   	push   esi
c00082bb:	b8 0b 00 00 00       	mov    eax,0xb
c00082c0:	53                   	push   ebx
c00082c1:	51                   	push   ecx
c00082c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082ce:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d5:	83 fa 19             	cmp    edx,0x19
c00082d8:	77 31                	ja     c000830b <File::truncate(unsigned long long)+0x51>
c00082da:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00082e1:	85 d2                	test   edx,edx
c00082e3:	74 26                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082e5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082eb:	85 d2                	test   edx,edx
c00082ed:	74 1c                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082ef:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082f3:	b8 05 00 00 00       	mov    eax,0x5
c00082f8:	74 11                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fc:	53                   	push   ebx
c00082fd:	51                   	push   ecx
c00082fe:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008304:	52                   	push   edx
c0008305:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008308:	83 c4 10             	add    esp,0x10
c000830b:	5a                   	pop    edx
c000830c:	5b                   	pop    ebx
c000830d:	5e                   	pop    esi
c000830e:	c3                   	ret    
c000830f:	90                   	nop

c0008310 <File::tell(unsigned long long*)>:
c0008310:	83 ec 0c             	sub    esp,0xc
c0008313:	b8 0b 00 00 00       	mov    eax,0xb
c0008318:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008323:	83 fa 19             	cmp    edx,0x19
c0008326:	77 34                	ja     c000835c <File::tell(unsigned long long*)+0x4c>
c0008328:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000832f:	85 d2                	test   edx,edx
c0008331:	74 29                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c0008333:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008339:	85 d2                	test   edx,edx
c000833b:	74 1f                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c000833d:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008341:	b8 05 00 00 00       	mov    eax,0x5
c0008346:	74 14                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c0008348:	50                   	push   eax
c0008349:	8b 02                	mov    eax,DWORD PTR [edx]
c000834b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000834f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008355:	52                   	push   edx
c0008356:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008359:	83 c4 10             	add    esp,0x10
c000835c:	83 c4 0c             	add    esp,0xc
c000835f:	c3                   	ret    

c0008360 <File::rewind()>:
c0008360:	83 ec 10             	sub    esp,0x10
c0008363:	6a 00                	push   0x0
c0008365:	6a 00                	push   0x0
c0008367:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836b:	e8 f4 fe ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0008370:	83 c4 1c             	add    esp,0x1c
c0008373:	c3                   	ret    

c0008374 <File::unlink()>:
c0008374:	83 ec 0c             	sub    esp,0xc
c0008377:	b8 0b 00 00 00       	mov    eax,0xb
c000837c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008380:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008387:	83 f9 19             	cmp    ecx,0x19
c000838a:	77 2f                	ja     c00083bb <File::unlink()+0x47>
c000838c:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 24                	je     c00083bb <File::unlink()+0x47>
c0008397:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839d:	85 c9                	test   ecx,ecx
c000839f:	74 1a                	je     c00083bb <File::unlink()+0x47>
c00083a1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a5:	b8 06 00 00 00       	mov    eax,0x6
c00083aa:	75 0f                	jne    c00083bb <File::unlink()+0x47>
c00083ac:	50                   	push   eax
c00083ad:	83 c2 0d             	add    edx,0xd
c00083b0:	50                   	push   eax
c00083b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b3:	52                   	push   edx
c00083b4:	51                   	push   ecx
c00083b5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083b8:	83 c4 10             	add    esp,0x10
c00083bb:	83 c4 0c             	add    esp,0xc
c00083be:	c3                   	ret    
c00083bf:	90                   	nop

c00083c0 <File::rename(char const*)>:
c00083c0:	83 ec 0c             	sub    esp,0xc
c00083c3:	b8 0b 00 00 00       	mov    eax,0xb
c00083c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 32                	ja     c000840a <File::rename(char const*)+0x4a>
c00083d8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 27                	je     c000840a <File::rename(char const*)+0x4a>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 1d                	je     c000840a <File::rename(char const*)+0x4a>
c00083ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f1:	b8 06 00 00 00       	mov    eax,0x6
c00083f6:	75 12                	jne    c000840a <File::rename(char const*)+0x4a>
c00083f8:	50                   	push   eax
c00083f9:	83 c2 0d             	add    edx,0xd
c00083fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008402:	52                   	push   edx
c0008403:	51                   	push   ecx
c0008404:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008407:	83 c4 10             	add    esp,0x10
c000840a:	83 c4 0c             	add    esp,0xc
c000840d:	c3                   	ret    

c000840e <File::chfatattr(unsigned char, unsigned char)>:
c000840e:	57                   	push   edi
c000840f:	b8 0b 00 00 00       	mov    eax,0xb
c0008414:	56                   	push   esi
c0008415:	53                   	push   ebx
c0008416:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000841e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008422:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008429:	83 f9 19             	cmp    ecx,0x19
c000842c:	77 37                	ja     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000842e:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008435:	85 c9                	test   ecx,ecx
c0008437:	74 2c                	je     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008439:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843f:	85 c9                	test   ecx,ecx
c0008441:	74 22                	je     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008443:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008447:	b8 06 00 00 00       	mov    eax,0x6
c000844c:	75 17                	jne    c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000844e:	89 f0                	mov    eax,esi
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	0f b6 db             	movzx  ebx,bl
c0008455:	0f b6 f0             	movzx  esi,al
c0008458:	83 c2 0d             	add    edx,0xd
c000845b:	56                   	push   esi
c000845c:	53                   	push   ebx
c000845d:	52                   	push   edx
c000845e:	51                   	push   ecx
c000845f:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008462:	83 c4 10             	add    esp,0x10
c0008465:	5b                   	pop    ebx
c0008466:	5e                   	pop    esi
c0008467:	5f                   	pop    edi
c0008468:	c3                   	ret    
c0008469:	90                   	nop

c000846a <File::exists()>:
c000846a:	83 ec 0c             	sub    esp,0xc
c000846d:	31 c0                	xor    eax,eax
c000846f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008473:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847a:	83 f9 19             	cmp    ecx,0x19
c000847d:	77 24                	ja     c00084a3 <File::exists()+0x39>
c000847f:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008486:	85 c9                	test   ecx,ecx
c0008488:	74 19                	je     c00084a3 <File::exists()+0x39>
c000848a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008490:	85 c9                	test   ecx,ecx
c0008492:	74 0f                	je     c00084a3 <File::exists()+0x39>
c0008494:	50                   	push   eax
c0008495:	83 c2 0d             	add    edx,0xd
c0008498:	50                   	push   eax
c0008499:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849b:	52                   	push   edx
c000849c:	51                   	push   ecx
c000849d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a0:	83 c4 10             	add    esp,0x10
c00084a3:	83 c4 0c             	add    esp,0xc
c00084a6:	c3                   	ret    
c00084a7:	90                   	nop

c00084a8 <File::stat(unsigned long long*, bool*)>:
c00084a8:	56                   	push   esi
c00084a9:	53                   	push   ebx
c00084aa:	50                   	push   eax
c00084ab:	b8 0b 00 00 00       	mov    eax,0xb
c00084b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084bc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c3:	83 f9 19             	cmp    ecx,0x19
c00084c6:	77 3d                	ja     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084c8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00084cf:	85 c9                	test   ecx,ecx
c00084d1:	74 32                	je     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084d9:	85 c9                	test   ecx,ecx
c00084db:	74 28                	je     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084dd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e3:	74 13                	je     c00084f8 <File::stat(unsigned long long*, bool*)+0x50>
c00084e5:	83 ec 04             	sub    esp,0x4
c00084e8:	56                   	push   esi
c00084e9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084ef:	51                   	push   ecx
c00084f0:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f6:	eb 0a                	jmp    c0008502 <File::stat(unsigned long long*, bool*)+0x5a>
c00084f8:	53                   	push   ebx
c00084f9:	83 c2 0d             	add    edx,0xd
c00084fc:	56                   	push   esi
c00084fd:	52                   	push   edx
c00084fe:	51                   	push   ecx
c00084ff:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008502:	83 c4 10             	add    esp,0x10
c0008505:	5a                   	pop    edx
c0008506:	5b                   	pop    ebx
c0008507:	5e                   	pop    esi
c0008508:	c3                   	ret    

c0008509 <Fs::setcwd(Process*, char*)>:
c0008509:	55                   	push   ebp
c000850a:	57                   	push   edi
c000850b:	56                   	push   esi
c000850c:	53                   	push   ebx
c000850d:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008513:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851a:	6a 00                	push   0x0
c000851c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008522:	57                   	push   edi
c0008523:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000852e:	56                   	push   esi
c000852f:	e8 28 f9 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008534:	89 34 24             	mov    DWORD PTR [esp],esi
c0008537:	e8 44 80 ff ff       	call   c0000580 <strlen>
c000853c:	83 c4 10             	add    esp,0x10
c000853f:	83 f8 02             	cmp    eax,0x2
c0008542:	77 15                	ja     c0008559 <Fs::setcwd(Process*, char*)+0x50>
c0008544:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008549:	83 eb 41             	sub    ebx,0x41
c000854c:	8b 04 9d e0 ba 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4520]
c0008553:	85 c0                	test   eax,eax
c0008555:	75 1c                	jne    c0008573 <Fs::setcwd(Process*, char*)+0x6a>
c0008557:	eb 2f                	jmp    c0008588 <Fs::setcwd(Process*, char*)+0x7f>
c0008559:	83 ec 0c             	sub    esp,0xc
c000855c:	56                   	push   esi
c000855d:	e8 1e 80 ff ff       	call   c0000580 <strlen>
c0008562:	83 c4 10             	add    esp,0x10
c0008565:	83 f8 03             	cmp    eax,0x3
c0008568:	75 57                	jne    c00085c1 <Fs::setcwd(Process*, char*)+0xb8>
c000856a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000856f:	75 50                	jne    c00085c1 <Fs::setcwd(Process*, char*)+0xb8>
c0008571:	eb d1                	jmp    c0008544 <Fs::setcwd(Process*, char*)+0x3b>
c0008573:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857a:	75 0c                	jne    c0008588 <Fs::setcwd(Process*, char*)+0x7f>
c000857c:	83 ec 0c             	sub    esp,0xc
c000857f:	50                   	push   eax
c0008580:	e8 05 24 00 00       	call   c000a98a <LogicalDisk::mount()>
c0008585:	83 c4 10             	add    esp,0x10
c0008588:	83 fb 19             	cmp    ebx,0x19
c000858b:	b8 03 00 00 00       	mov    eax,0x3
c0008590:	0f 87 c6 00 00 00    	ja     c000865c <Fs::setcwd(Process*, char*)+0x153>
c0008596:	8b 14 9d e0 ba 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4520]
c000859d:	b8 05 00 00 00       	mov    eax,0x5
c00085a2:	85 d2                	test   edx,edx
c00085a4:	0f 84 b2 00 00 00    	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c00085aa:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b1:	b8 06 00 00 00       	mov    eax,0x6
c00085b6:	0f 85 92 00 00 00    	jne    c000864e <Fs::setcwd(Process*, char*)+0x145>
c00085bc:	e9 9b 00 00 00       	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c00085c1:	83 ec 0c             	sub    esp,0xc
c00085c4:	68 14 01 00 00       	push   0x114
c00085c9:	e8 ba 71 00 00       	call   c000f788 <malloc>
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	55                   	push   ebp
c00085d2:	56                   	push   esi
c00085d3:	50                   	push   eax
c00085d4:	89 c3                	mov    ebx,eax
c00085d6:	e8 ad fb ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00085db:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e0:	83 c4 0c             	add    esp,0xc
c00085e3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e7:	50                   	push   eax
c00085e8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ec:	50                   	push   eax
c00085ed:	53                   	push   ebx
c00085ee:	e8 b5 fe ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00085f3:	83 c4 10             	add    esp,0x10
c00085f6:	83 f8 02             	cmp    eax,0x2
c00085f9:	74 27                	je     c0008622 <Fs::setcwd(Process*, char*)+0x119>
c00085fb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008600:	75 1c                	jne    c000861e <Fs::setcwd(Process*, char*)+0x115>
c0008602:	85 db                	test   ebx,ebx
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	74 51                	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c000860b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	53                   	push   ebx
c0008611:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008614:	83 c4 10             	add    esp,0x10
c0008617:	b8 02 00 00 00       	mov    eax,0x2
c000861c:	eb 3e                	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c000861e:	85 c0                	test   eax,eax
c0008620:	74 1c                	je     c000863e <Fs::setcwd(Process*, char*)+0x135>
c0008622:	85 db                	test   ebx,ebx
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	74 31                	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c000862b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	53                   	push   ebx
c0008631:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008634:	83 c4 10             	add    esp,0x10
c0008637:	b8 01 00 00 00       	mov    eax,0x1
c000863c:	eb 1e                	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c000863e:	85 db                	test   ebx,ebx
c0008640:	74 0c                	je     c000864e <Fs::setcwd(Process*, char*)+0x145>
c0008642:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	53                   	push   ebx
c0008648:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864b:	83 c4 10             	add    esp,0x10
c000864e:	50                   	push   eax
c000864f:	50                   	push   eax
c0008650:	56                   	push   esi
c0008651:	57                   	push   edi
c0008652:	e8 f9 7f ff ff       	call   c0000650 <strcpy>
c0008657:	83 c4 10             	add    esp,0x10
c000865a:	31 c0                	xor    eax,eax
c000865c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008662:	5b                   	pop    ebx
c0008663:	5e                   	pop    esi
c0008664:	5f                   	pop    edi
c0008665:	5d                   	pop    ebp
c0008666:	c3                   	ret    
c0008667:	90                   	nop

c0008668 <Directory::Directory(char const*, Process*)>:
c0008668:	83 ec 0c             	sub    esp,0xc
c000866b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866f:	83 ec 08             	sub    esp,0x8
c0008672:	6a 00                	push   0x0
c0008674:	50                   	push   eax
c0008675:	e8 0e a7 00 00       	call   c0012d88 <UnixFile::UnixFile(int)>
c000867a:	83 c4 10             	add    esp,0x10
c000867d:	ba 88 33 02 c0       	mov    edx,0xc0023388
c0008682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008686:	89 10                	mov    DWORD PTR [eax],edx
c0008688:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000868d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008691:	0f 95 c0             	setne  al
c0008694:	0f b6 c0             	movzx  eax,al
c0008697:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a5:	83 c2 0d             	add    edx,0xd
c00086a8:	50                   	push   eax
c00086a9:	51                   	push   ecx
c00086aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086ae:	52                   	push   edx
c00086af:	e8 a8 f7 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b4:	83 c4 10             	add    esp,0x10
c00086b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bb:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086be:	83 e8 41             	sub    eax,0x41
c00086c1:	88 c2                	mov    dl,al
c00086c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c7:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d1:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086df:	0f b6 c0             	movzx  eax,al
c00086e2:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086e9:	85 c0                	test   eax,eax
c00086eb:	74 3e                	je     c000872b <Directory::Directory(char const*, Process*)+0xc3>
c00086ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f7:	0f b6 c0             	movzx  eax,al
c00086fa:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008701:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008707:	85 c0                	test   eax,eax
c0008709:	75 20                	jne    c000872b <Directory::Directory(char const*, Process*)+0xc3>
c000870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000870f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008715:	0f b6 c0             	movzx  eax,al
c0008718:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c000871f:	83 ec 0c             	sub    esp,0xc
c0008722:	50                   	push   eax
c0008723:	e8 62 22 00 00       	call   c000a98a <LogicalDisk::mount()>
c0008728:	83 c4 10             	add    esp,0x10
c000872b:	90                   	nop
c000872c:	83 c4 0c             	add    esp,0xc
c000872f:	c3                   	ret    

c0008730 <Directory::open()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008744:	83 fa 19             	cmp    edx,0x19
c0008747:	77 3d                	ja     c0008786 <Directory::open()+0x56>
c0008749:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008750:	85 d2                	test   edx,edx
c0008752:	74 32                	je     c0008786 <Directory::open()+0x56>
c0008754:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875a:	85 d2                	test   edx,edx
c000875c:	74 28                	je     c0008786 <Directory::open()+0x56>
c000875e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008762:	b8 06 00 00 00       	mov    eax,0x6
c0008767:	75 1d                	jne    c0008786 <Directory::open()+0x56>
c0008769:	50                   	push   eax
c000876a:	8b 02                	mov    eax,DWORD PTR [edx]
c000876c:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008772:	51                   	push   ecx
c0008773:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008776:	51                   	push   ecx
c0008777:	52                   	push   edx
c0008778:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877b:	83 c4 10             	add    esp,0x10
c000877e:	85 c0                	test   eax,eax
c0008780:	75 04                	jne    c0008786 <Directory::open()+0x56>
c0008782:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008786:	83 c4 08             	add    esp,0x8
c0008789:	5b                   	pop    ebx
c000878a:	c3                   	ret    
c000878b:	90                   	nop

c000878c <Directory::close()>:
c000878c:	53                   	push   ebx
c000878d:	b8 0b 00 00 00       	mov    eax,0xb
c0008792:	83 ec 08             	sub    esp,0x8
c0008795:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008799:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a0:	83 f9 19             	cmp    ecx,0x19
c00087a3:	77 41                	ja     c00087e6 <Directory::close()+0x5a>
c00087a5:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c00087ac:	85 db                	test   ebx,ebx
c00087ae:	74 36                	je     c00087e6 <Directory::close()+0x5a>
c00087b0:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b7:	74 2d                	je     c00087e6 <Directory::close()+0x5a>
c00087b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087bd:	b8 05 00 00 00       	mov    eax,0x5
c00087c2:	74 22                	je     c00087e6 <Directory::close()+0x5a>
c00087c4:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087c8:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c00087cf:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d5:	53                   	push   ebx
c00087d6:	53                   	push   ebx
c00087d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087d9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087df:	50                   	push   eax
c00087e0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e3:	83 c4 10             	add    esp,0x10
c00087e6:	83 c4 08             	add    esp,0x8
c00087e9:	5b                   	pop    ebx
c00087ea:	c3                   	ret    
c00087eb:	90                   	nop

c00087ec <Directory::unlink()>:
c00087ec:	83 ec 0c             	sub    esp,0xc
c00087ef:	b8 0b 00 00 00       	mov    eax,0xb
c00087f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ff:	83 f9 19             	cmp    ecx,0x19
c0008802:	77 2f                	ja     c0008833 <Directory::unlink()+0x47>
c0008804:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 24                	je     c0008833 <Directory::unlink()+0x47>
c000880f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008815:	85 c9                	test   ecx,ecx
c0008817:	74 1a                	je     c0008833 <Directory::unlink()+0x47>
c0008819:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000881d:	b8 06 00 00 00       	mov    eax,0x6
c0008822:	75 0f                	jne    c0008833 <Directory::unlink()+0x47>
c0008824:	50                   	push   eax
c0008825:	83 c2 0d             	add    edx,0xd
c0008828:	50                   	push   eax
c0008829:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882b:	52                   	push   edx
c000882c:	51                   	push   ecx
c000882d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008830:	83 c4 10             	add    esp,0x10
c0008833:	83 c4 0c             	add    esp,0xc
c0008836:	c3                   	ret    
c0008837:	90                   	nop

c0008838 <Directory::rename(char const*)>:
c0008838:	83 ec 0c             	sub    esp,0xc
c000883b:	b8 0b 00 00 00       	mov    eax,0xb
c0008840:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008844:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884b:	83 f9 19             	cmp    ecx,0x19
c000884e:	77 32                	ja     c0008882 <Directory::rename(char const*)+0x4a>
c0008850:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008857:	85 c9                	test   ecx,ecx
c0008859:	74 27                	je     c0008882 <Directory::rename(char const*)+0x4a>
c000885b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008861:	85 c9                	test   ecx,ecx
c0008863:	74 1d                	je     c0008882 <Directory::rename(char const*)+0x4a>
c0008865:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008869:	b8 06 00 00 00       	mov    eax,0x6
c000886e:	75 12                	jne    c0008882 <Directory::rename(char const*)+0x4a>
c0008870:	50                   	push   eax
c0008871:	83 c2 0d             	add    edx,0xd
c0008874:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008876:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887a:	52                   	push   edx
c000887b:	51                   	push   ecx
c000887c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000887f:	83 c4 10             	add    esp,0x10
c0008882:	83 c4 0c             	add    esp,0xc
c0008885:	c3                   	ret    

c0008886 <Directory::exists()>:
c0008886:	83 ec 0c             	sub    esp,0xc
c0008889:	31 c0                	xor    eax,eax
c000888b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000888f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008896:	83 f9 19             	cmp    ecx,0x19
c0008899:	77 24                	ja     c00088bf <Directory::exists()+0x39>
c000889b:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088a2:	85 c9                	test   ecx,ecx
c00088a4:	74 19                	je     c00088bf <Directory::exists()+0x39>
c00088a6:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ac:	85 c9                	test   ecx,ecx
c00088ae:	74 0f                	je     c00088bf <Directory::exists()+0x39>
c00088b0:	50                   	push   eax
c00088b1:	83 c2 0d             	add    edx,0xd
c00088b4:	50                   	push   eax
c00088b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b7:	52                   	push   edx
c00088b8:	51                   	push   ecx
c00088b9:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 c4 0c             	add    esp,0xc
c00088c2:	c3                   	ret    
c00088c3:	90                   	nop

c00088c4 <Directory::read(dirent*)>:
c00088c4:	83 ec 1c             	sub    esp,0x1c
c00088c7:	b8 0b 00 00 00       	mov    eax,0xb
c00088cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d7:	83 f9 19             	cmp    ecx,0x19
c00088da:	77 30                	ja     c000890c <Directory::read(dirent*)+0x48>
c00088dc:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 25                	je     c000890c <Directory::read(dirent*)+0x48>
c00088e7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088ee:	74 1c                	je     c000890c <Directory::read(dirent*)+0x48>
c00088f0:	83 ec 0c             	sub    esp,0xc
c00088f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088f9:	51                   	push   ecx
c00088fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088fe:	6a 00                	push   0x0
c0008900:	68 10 01 00 00       	push   0x110
c0008905:	52                   	push   edx
c0008906:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008909:	83 c4 20             	add    esp,0x20
c000890c:	83 c4 1c             	add    esp,0x1c
c000890f:	c3                   	ret    

c0008910 <Directory::create()>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	b8 0b 00 00 00       	mov    eax,0xb
c0008918:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008923:	83 f9 19             	cmp    ecx,0x19
c0008926:	77 2f                	ja     c0008957 <Directory::create()+0x47>
c0008928:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000892f:	85 c9                	test   ecx,ecx
c0008931:	74 24                	je     c0008957 <Directory::create()+0x47>
c0008933:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008939:	85 c9                	test   ecx,ecx
c000893b:	74 1a                	je     c0008957 <Directory::create()+0x47>
c000893d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008941:	b8 06 00 00 00       	mov    eax,0x6
c0008946:	75 0f                	jne    c0008957 <Directory::create()+0x47>
c0008948:	50                   	push   eax
c0008949:	83 c2 0d             	add    edx,0xd
c000894c:	50                   	push   eax
c000894d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000894f:	52                   	push   edx
c0008950:	51                   	push   ecx
c0008951:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008954:	83 c4 10             	add    esp,0x10
c0008957:	83 c4 0c             	add    esp,0xc
c000895a:	c3                   	ret    
c000895b:	90                   	nop

c000895c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895c:	b8 0a 00 00 00       	mov    eax,0xa
c0008961:	c3                   	ret    
c0008962:	66 90                	xchg   ax,ax

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 e0 11 00 00       	call   c0009b58 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba a4 33 02 c0       	mov    edx,0xc00233a4
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba a4 33 02 c0       	mov    edx,0xc00233a4
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 41 0f 00 00       	call   c00098f8 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 d9 48 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00089f8:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 09 e5 00 00       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 a4 1b 01 00       	call   c001a5bf <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 b9 e3 00 00       	jmp    c0016de4 <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 7e 1b 01 00       	call   c001a5bf <HalMakeBeep(int)>
c0008a41:	89 f0                	mov    eax,esi
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 c1 e4 00 00       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 56 1b 01 00       	jmp    c001a5bf <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0008a7a:	e8 fd df 00 00       	call   c0016a7c <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 e2 6c 00 00       	call   c000f788 <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 e0 33 02 c0       	push   0xc00233e0
c0008ab9:	53                   	push   ebx
c0008aba:	e8 c9 f6 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 ff 33 02 c0       	push   0xc00233ff
c0008ad3:	e8 0c 71 00 00       	call   c000fbe4 <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 be f6 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 aa f9 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 15 34 02 c0       	push   0xc0023415
c0008b10:	e8 51 e4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 5e 6c 00 00       	call   c000f788 <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 25 34 02 c0       	push   0xc0023425
c0008b77:	e8 ea e3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7a f6 ff ff       	call   c0008204 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 bf 6b 00 00       	call   c000f788 <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 2e 34 02 c0       	push   0xc002342e
c0008bea:	50                   	push   eax
c0008beb:	e8 60 7a ff ff       	call   c0000650 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 3a 79 ff ff       	call   c0000580 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 2e 34 02 c0       	push   0xc002342e
c0008c6c:	50                   	push   eax
c0008c6d:	e8 fe 7b ff ff       	call   c0000870 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 e7 78 ff ff       	call   c0000580 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 2e 34 02 c0       	push   0xc002342e
c0008cbb:	50                   	push   eax
c0008cbc:	e8 af 7b ff ff       	call   c0000870 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 b3 02 c0       	mov    ds:0xc002b324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 30 34 02 c0       	push   0xc0023430
c0008cf7:	e8 6a e2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 45 34 02 c0       	push   0xc0023445
c0008d0d:	e8 54 e2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 4c 78 ff ff       	call   c0000580 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 15 7b ff ff       	call   c0000870 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 0a 78 ff ff       	call   c0000580 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 49 34 02 c0       	push   0xc0023449
c0008d9c:	50                   	push   eax
c0008d9d:	e8 ce 7a ff ff       	call   c0000870 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 4e 34 02 c0       	push   0xc002344e
c0008de3:	e8 7e e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 5c 34 02 c0       	push   0xc002345c
c0008e01:	e8 60 e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 65 34 02 c0       	push   0xc0023465
c0008e26:	e8 3b e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 83 34 02 c0       	push   0xc0023483
c0008e4a:	e8 17 e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 94 34 02 c0       	push   0xc0023494
c0008e63:	e8 fe e0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 a7 34 02 c0       	push   0xc00234a7
c0008e9b:	e8 c6 e0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 b6 02 c0       	mov    ds:0xc002b661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	d1 e0                	shl    eax,1
c0008f57:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008f98:	c6 05 61 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b661,0x0
c0008f9f:	c7 05 64 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 b4 34 02 c0       	push   0xc00234b4
c0008fba:	e8 51 43 00 00       	call   c000d310 <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 d9 34 02 c0       	push   0xc00234d9
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 36 4f 00 00       	call   c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 fb 47 00 00       	call   c000d7e2 <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 39 44 00 00       	call   c000d42e <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 b4 34 02 c0       	push   0xc00234b4
c0009054:	e8 b7 42 00 00       	call   c000d310 <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 d9 34 02 c0       	push   0xc00234d9
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 9c 4e 00 00       	call   c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 f0 43 00 00       	call   c000d480 <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 90 43 00 00       	call   c000d42e <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 8e 0a 00 00       	call   c0009b58 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba 38 35 02 c0       	mov    edx,0xc0023538
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba 38 35 02 c0       	mov    edx,0xc0023538
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 f1 07 00 00       	call   c00098f8 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 89 41 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009167:	01 d0                	add    eax,edx
c0009169:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000916f:	89 c2                	mov    edx,eax
c0009171:	c1 fa 1f             	sar    edx,0x1f
c0009174:	01 c1                	add    ecx,eax
c0009176:	11 d3                	adc    ebx,edx
c0009178:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000917d:	0f b6 c0             	movzx  eax,al
c0009180:	85 c0                	test   eax,eax
c0009182:	74 0c                	je     c0009190 <Clock::timeInSecondsLocal()+0x56>
c0009184:	b8 08 07 00 00       	mov    eax,0x708
c0009189:	ba 00 00 00 00       	mov    edx,0x0
c000918e:	eb 0a                	jmp    c000919a <Clock::timeInSecondsLocal()+0x60>
c0009190:	b8 00 00 00 00       	mov    eax,0x0
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	01 c8                	add    eax,ecx
c000919c:	11 da                	adc    edx,ebx
c000919e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091a1:	c9                   	leave  
c00091a2:	c3                   	ret    
c00091a3:	90                   	nop

c00091a4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091a4:	55                   	push   ebp
c00091a5:	89 e5                	mov    ebp,esp
c00091a7:	56                   	push   esi
c00091a8:	53                   	push   ebx
c00091a9:	83 ec 10             	sub    esp,0x10
c00091ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091af:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00091bd:	83 c0 2c             	add    eax,0x2c
c00091c0:	8b 30                	mov    esi,DWORD PTR [eax]
c00091c2:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c00091c7:	0f b6 d0             	movzx  edx,al
c00091ca:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c00091cf:	01 d0                	add    eax,edx
c00091d1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00091d7:	89 c2                	mov    edx,eax
c00091d9:	c1 fa 1f             	sar    edx,0x1f
c00091dc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091df:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091e2:	29 c1                	sub    ecx,eax
c00091e4:	19 d3                	sbb    ebx,edx
c00091e6:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c00091eb:	0f b6 c0             	movzx  eax,al
c00091ee:	85 c0                	test   eax,eax
c00091f0:	74 0c                	je     c00091fe <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c00091f2:	b8 08 07 00 00       	mov    eax,0x708
c00091f7:	ba 00 00 00 00       	mov    edx,0x0
c00091fc:	eb 0a                	jmp    c0009208 <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c00091fe:	b8 00 00 00 00       	mov    eax,0x0
c0009203:	ba 00 00 00 00       	mov    edx,0x0
c0009208:	29 c1                	sub    ecx,eax
c000920a:	19 d3                	sbb    ebx,edx
c000920c:	89 c8                	mov    eax,ecx
c000920e:	89 da                	mov    edx,ebx
c0009210:	83 ec 04             	sub    esp,0x4
c0009213:	52                   	push   edx
c0009214:	50                   	push   eax
c0009215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009218:	ff d6                	call   esi
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009220:	5b                   	pop    ebx
c0009221:	5e                   	pop    esi
c0009222:	5d                   	pop    ebp
c0009223:	c3                   	ret    

c0009224 <KeDatetimeToSeconds(datetime_t)>:
c0009224:	55                   	push   ebp
c0009225:	89 e5                	mov    ebp,esp
c0009227:	53                   	push   ebx
c0009228:	83 ec 24             	sub    esp,0x24
c000922b:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000922f:	2d 6c 07 00 00       	sub    eax,0x76c
c0009234:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009238:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000923b:	83 e8 01             	sub    eax,0x1
c000923e:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009241:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009248:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000924f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009256:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000925d:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009260:	0f b6 c8             	movzx  ecx,al
c0009263:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009266:	0f b6 d0             	movzx  edx,al
c0009269:	89 d0                	mov    eax,edx
c000926b:	c1 e0 04             	shl    eax,0x4
c000926e:	29 d0                	sub    eax,edx
c0009270:	c1 e0 02             	shl    eax,0x2
c0009273:	8d 14 01             	lea    edx,[ecx+eax*1]
c0009276:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009279:	0f b6 c0             	movzx  eax,al
c000927c:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009282:	01 d0                	add    eax,edx
c0009284:	89 c2                	mov    edx,eax
c0009286:	c1 fa 1f             	sar    edx,0x1f
c0009289:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000928c:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c000928f:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009292:	0f b6 c0             	movzx  eax,al
c0009295:	83 e8 01             	sub    eax,0x1
c0009298:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000929b:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000929e:	0f b6 c0             	movzx  eax,al
c00092a1:	8b 04 85 00 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcb00]
c00092a8:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092ab:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092ae:	0f b6 c0             	movzx  eax,al
c00092b1:	83 f8 01             	cmp    eax,0x1
c00092b4:	76 7c                	jbe    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092b6:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092ba:	0f b7 c0             	movzx  eax,ax
c00092bd:	83 e0 03             	and    eax,0x3
c00092c0:	85 c0                	test   eax,eax
c00092c2:	75 6e                	jne    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092c4:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092c8:	0f b7 c8             	movzx  ecx,ax
c00092cb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092d0:	89 c8                	mov    eax,ecx
c00092d2:	f7 e2                	mul    edx
c00092d4:	c1 ea 05             	shr    edx,0x5
c00092d7:	89 d0                	mov    eax,edx
c00092d9:	c1 e0 02             	shl    eax,0x2
c00092dc:	01 d0                	add    eax,edx
c00092de:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092e5:	01 d0                	add    eax,edx
c00092e7:	c1 e0 02             	shl    eax,0x2
c00092ea:	29 c1                	sub    ecx,eax
c00092ec:	89 c8                	mov    eax,ecx
c00092ee:	0f b7 c0             	movzx  eax,ax
c00092f1:	85 c0                	test   eax,eax
c00092f3:	75 39                	jne    c000932e <KeDatetimeToSeconds(datetime_t)+0x10a>
c00092f5:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f9:	0f b7 c0             	movzx  eax,ax
c00092fc:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009302:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009307:	f7 e9                	imul   ecx
c0009309:	c1 fa 07             	sar    edx,0x7
c000930c:	89 c8                	mov    eax,ecx
c000930e:	c1 f8 1f             	sar    eax,0x1f
c0009311:	29 c2                	sub    edx,eax
c0009313:	89 d0                	mov    eax,edx
c0009315:	c1 e0 02             	shl    eax,0x2
c0009318:	01 d0                	add    eax,edx
c000931a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009321:	01 d0                	add    eax,edx
c0009323:	c1 e0 04             	shl    eax,0x4
c0009326:	29 c1                	sub    ecx,eax
c0009328:	89 ca                	mov    edx,ecx
c000932a:	85 d2                	test   edx,edx
c000932c:	75 04                	jne    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c000932e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009332:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009336:	0f b7 c0             	movzx  eax,ax
c0009339:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000933c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000933f:	83 f8 46             	cmp    eax,0x46
c0009342:	0f 9f c0             	setg   al
c0009345:	0f b6 c0             	movzx  eax,al
c0009348:	85 c0                	test   eax,eax
c000934a:	0f 84 a4 00 00 00    	je     c00093f4 <KeDatetimeToSeconds(datetime_t)+0x1d0>
c0009350:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009357:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000935b:	0f b7 d0             	movzx  edx,ax
c000935e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009361:	39 c2                	cmp    edx,eax
c0009363:	0f 8e b8 01 00 00    	jle    c0009521 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009369:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936c:	83 e0 03             	and    eax,0x3
c000936f:	85 c0                	test   eax,eax
c0009371:	75 6b                	jne    c00093de <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009373:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009376:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000937b:	f7 e9                	imul   ecx
c000937d:	c1 fa 05             	sar    edx,0x5
c0009380:	89 c8                	mov    eax,ecx
c0009382:	c1 f8 1f             	sar    eax,0x1f
c0009385:	29 c2                	sub    edx,eax
c0009387:	89 d0                	mov    eax,edx
c0009389:	c1 e0 02             	shl    eax,0x2
c000938c:	01 d0                	add    eax,edx
c000938e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009395:	01 d0                	add    eax,edx
c0009397:	c1 e0 02             	shl    eax,0x2
c000939a:	29 c1                	sub    ecx,eax
c000939c:	89 ca                	mov    edx,ecx
c000939e:	85 d2                	test   edx,edx
c00093a0:	75 35                	jne    c00093d7 <KeDatetimeToSeconds(datetime_t)+0x1b3>
c00093a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093a5:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093ab:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093b0:	f7 e9                	imul   ecx
c00093b2:	c1 fa 07             	sar    edx,0x7
c00093b5:	89 c8                	mov    eax,ecx
c00093b7:	c1 f8 1f             	sar    eax,0x1f
c00093ba:	29 c2                	sub    edx,eax
c00093bc:	89 d0                	mov    eax,edx
c00093be:	c1 e0 02             	shl    eax,0x2
c00093c1:	01 d0                	add    eax,edx
c00093c3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093ca:	01 d0                	add    eax,edx
c00093cc:	c1 e0 04             	shl    eax,0x4
c00093cf:	29 c1                	sub    ecx,eax
c00093d1:	89 ca                	mov    edx,ecx
c00093d3:	85 d2                	test   edx,edx
c00093d5:	75 07                	jne    c00093de <KeDatetimeToSeconds(datetime_t)+0x1ba>
c00093d7:	b8 6e 01 00 00       	mov    eax,0x16e
c00093dc:	eb 05                	jmp    c00093e3 <KeDatetimeToSeconds(datetime_t)+0x1bf>
c00093de:	b8 6d 01 00 00       	mov    eax,0x16d
c00093e3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00093e6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093e9:	83 c0 01             	add    eax,0x1
c00093ec:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00093ef:	e9 63 ff ff ff       	jmp    c0009357 <KeDatetimeToSeconds(datetime_t)+0x133>
c00093f4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093f7:	83 f8 45             	cmp    eax,0x45
c00093fa:	0f 8f 21 01 00 00    	jg     c0009521 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009400:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009407:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000940b:	0f b7 d0             	movzx  edx,ax
c000940e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009411:	39 c2                	cmp    edx,eax
c0009413:	0f 8d 8b 00 00 00    	jge    c00094a4 <KeDatetimeToSeconds(datetime_t)+0x280>
c0009419:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000941c:	83 e0 03             	and    eax,0x3
c000941f:	85 c0                	test   eax,eax
c0009421:	75 6b                	jne    c000948e <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009423:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009426:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000942b:	f7 e9                	imul   ecx
c000942d:	c1 fa 05             	sar    edx,0x5
c0009430:	89 c8                	mov    eax,ecx
c0009432:	c1 f8 1f             	sar    eax,0x1f
c0009435:	29 c2                	sub    edx,eax
c0009437:	89 d0                	mov    eax,edx
c0009439:	c1 e0 02             	shl    eax,0x2
c000943c:	01 d0                	add    eax,edx
c000943e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009445:	01 d0                	add    eax,edx
c0009447:	c1 e0 02             	shl    eax,0x2
c000944a:	29 c1                	sub    ecx,eax
c000944c:	89 ca                	mov    edx,ecx
c000944e:	85 d2                	test   edx,edx
c0009450:	75 35                	jne    c0009487 <KeDatetimeToSeconds(datetime_t)+0x263>
c0009452:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009455:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000945b:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009460:	f7 e9                	imul   ecx
c0009462:	c1 fa 07             	sar    edx,0x7
c0009465:	89 c8                	mov    eax,ecx
c0009467:	c1 f8 1f             	sar    eax,0x1f
c000946a:	29 c2                	sub    edx,eax
c000946c:	89 d0                	mov    eax,edx
c000946e:	c1 e0 02             	shl    eax,0x2
c0009471:	01 d0                	add    eax,edx
c0009473:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000947a:	01 d0                	add    eax,edx
c000947c:	c1 e0 04             	shl    eax,0x4
c000947f:	29 c1                	sub    ecx,eax
c0009481:	89 ca                	mov    edx,ecx
c0009483:	85 d2                	test   edx,edx
c0009485:	75 07                	jne    c000948e <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009487:	b8 6e 01 00 00       	mov    eax,0x16e
c000948c:	eb 05                	jmp    c0009493 <KeDatetimeToSeconds(datetime_t)+0x26f>
c000948e:	b8 6d 01 00 00       	mov    eax,0x16d
c0009493:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009496:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009499:	83 e8 01             	sub    eax,0x1
c000949c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000949f:	e9 63 ff ff ff       	jmp    c0009407 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c00094a4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094a7:	83 e0 03             	and    eax,0x3
c00094aa:	85 c0                	test   eax,eax
c00094ac:	75 6b                	jne    c0009519 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c00094ae:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094b1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094b6:	f7 e9                	imul   ecx
c00094b8:	c1 fa 05             	sar    edx,0x5
c00094bb:	89 c8                	mov    eax,ecx
c00094bd:	c1 f8 1f             	sar    eax,0x1f
c00094c0:	29 c2                	sub    edx,eax
c00094c2:	89 d0                	mov    eax,edx
c00094c4:	c1 e0 02             	shl    eax,0x2
c00094c7:	01 d0                	add    eax,edx
c00094c9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094d0:	01 d0                	add    eax,edx
c00094d2:	c1 e0 02             	shl    eax,0x2
c00094d5:	29 c1                	sub    ecx,eax
c00094d7:	89 ca                	mov    edx,ecx
c00094d9:	85 d2                	test   edx,edx
c00094db:	75 35                	jne    c0009512 <KeDatetimeToSeconds(datetime_t)+0x2ee>
c00094dd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094e0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00094e6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094eb:	f7 e9                	imul   ecx
c00094ed:	c1 fa 07             	sar    edx,0x7
c00094f0:	89 c8                	mov    eax,ecx
c00094f2:	c1 f8 1f             	sar    eax,0x1f
c00094f5:	29 c2                	sub    edx,eax
c00094f7:	89 d0                	mov    eax,edx
c00094f9:	c1 e0 02             	shl    eax,0x2
c00094fc:	01 d0                	add    eax,edx
c00094fe:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009505:	01 d0                	add    eax,edx
c0009507:	c1 e0 04             	shl    eax,0x4
c000950a:	29 c1                	sub    ecx,eax
c000950c:	89 ca                	mov    edx,ecx
c000950e:	85 d2                	test   edx,edx
c0009510:	75 07                	jne    c0009519 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009512:	b8 6e 01 00 00       	mov    eax,0x16e
c0009517:	eb 05                	jmp    c000951e <KeDatetimeToSeconds(datetime_t)+0x2fa>
c0009519:	b8 6d 01 00 00       	mov    eax,0x16d
c000951e:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009521:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009524:	89 c2                	mov    edx,eax
c0009526:	c1 fa 1f             	sar    edx,0x1f
c0009529:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000952f:	6b c8 00             	imul   ecx,eax,0x0
c0009532:	01 d9                	add    ecx,ebx
c0009534:	bb 80 51 01 00       	mov    ebx,0x15180
c0009539:	f7 e3                	mul    ebx
c000953b:	01 d1                	add    ecx,edx
c000953d:	89 ca                	mov    edx,ecx
c000953f:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009542:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009545:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009548:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000954b:	83 c4 24             	add    esp,0x24
c000954e:	5b                   	pop    ebx
c000954f:	5d                   	pop    ebp
c0009550:	c3                   	ret    
c0009551:	90                   	nop

c0009552 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009552:	55                   	push   ebp
c0009553:	89 e5                	mov    ebp,esp
c0009555:	56                   	push   esi
c0009556:	53                   	push   ebx
c0009557:	83 ec 20             	sub    esp,0x20
c000955a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c000955d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009560:	e8 bf fc ff ff       	call   c0009224 <KeDatetimeToSeconds(datetime_t)>
c0009565:	83 c4 08             	add    esp,0x8
c0009568:	89 c3                	mov    ebx,eax
c000956a:	89 d6                	mov    esi,edx
c000956c:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009571:	0f b6 d0             	movzx  edx,al
c0009574:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009579:	01 d0                	add    eax,edx
c000957b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009581:	89 c2                	mov    edx,eax
c0009583:	c1 fa 1f             	sar    edx,0x1f
c0009586:	29 c3                	sub    ebx,eax
c0009588:	19 d6                	sbb    esi,edx
c000958a:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000958f:	0f b6 c0             	movzx  eax,al
c0009592:	85 c0                	test   eax,eax
c0009594:	74 0c                	je     c00095a2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c0009596:	b8 08 07 00 00       	mov    eax,0x708
c000959b:	ba 00 00 00 00       	mov    edx,0x0
c00095a0:	eb 0a                	jmp    c00095ac <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c00095a2:	b8 00 00 00 00       	mov    eax,0x0
c00095a7:	ba 00 00 00 00       	mov    edx,0x0
c00095ac:	29 c3                	sub    ebx,eax
c00095ae:	19 d6                	sbb    esi,edx
c00095b0:	89 d8                	mov    eax,ebx
c00095b2:	89 f2                	mov    edx,esi
c00095b4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095b7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095bd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095c0:	89 d0                	mov    eax,edx
c00095c2:	31 d2                	xor    edx,edx
c00095c4:	89 c3                	mov    ebx,eax
c00095c6:	89 d6                	mov    esi,edx
c00095c8:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00095cb:	80 e5 ff             	and    ch,0xff
c00095ce:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00095d1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00095d4:	83 e1 00             	and    ecx,0x0
c00095d7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00095da:	83 ec 0c             	sub    esp,0xc
c00095dd:	56                   	push   esi
c00095de:	53                   	push   ebx
c00095df:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095e2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00095e5:	68 ee 34 02 c0       	push   0xc00234ee
c00095ea:	e8 77 d9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00095ef:	83 c4 20             	add    esp,0x20
c00095f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00095f7:	83 c0 2c             	add    eax,0x2c
c00095fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00095fc:	83 ec 04             	sub    esp,0x4
c00095ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009602:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009605:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009608:	ff d0                	call   eax
c000960a:	83 c4 10             	add    esp,0x10
c000960d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009610:	5b                   	pop    ebx
c0009611:	5e                   	pop    esi
c0009612:	5d                   	pop    ebp
c0009613:	c3                   	ret    

c0009614 <KeSecondsToDatetime(unsigned long long)>:
c0009614:	55                   	push   ebp
c0009615:	89 e5                	mov    ebp,esp
c0009617:	83 ec 48             	sub    esp,0x48
c000961a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000961d:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009620:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009623:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009626:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009629:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000962c:	6a 00                	push   0x0
c000962e:	68 80 51 01 00       	push   0x15180
c0009633:	52                   	push   edx
c0009634:	50                   	push   eax
c0009635:	e8 3a 83 01 00       	call   c0021974 <__udivdi3>
c000963a:	83 c4 10             	add    esp,0x10
c000963d:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009642:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009645:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009648:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000964b:	6a 00                	push   0x0
c000964d:	68 80 51 01 00       	push   0x15180
c0009652:	52                   	push   edx
c0009653:	50                   	push   eax
c0009654:	e8 1b 84 01 00       	call   c0021a74 <__umoddi3>
c0009659:	83 c4 10             	add    esp,0x10
c000965c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000965f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009663:	79 0b                	jns    c0009670 <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009665:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000966c:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009670:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009673:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009678:	89 c8                	mov    eax,ecx
c000967a:	f7 ea                	imul   edx
c000967c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000967f:	c1 f8 0b             	sar    eax,0xb
c0009682:	89 c2                	mov    edx,eax
c0009684:	89 c8                	mov    eax,ecx
c0009686:	c1 f8 1f             	sar    eax,0x1f
c0009689:	29 c2                	sub    edx,eax
c000968b:	89 d0                	mov    eax,edx
c000968d:	88 c2                	mov    dl,al
c000968f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009692:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009695:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009698:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000969d:	89 c8                	mov    eax,ecx
c000969f:	f7 ea                	imul   edx
c00096a1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096a4:	c1 f8 0b             	sar    eax,0xb
c00096a7:	89 c2                	mov    edx,eax
c00096a9:	89 c8                	mov    eax,ecx
c00096ab:	c1 f8 1f             	sar    eax,0x1f
c00096ae:	29 c2                	sub    edx,eax
c00096b0:	89 d0                	mov    eax,edx
c00096b2:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00096b8:	29 c1                	sub    ecx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096bf:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096c2:	ba 89 88 88 88       	mov    edx,0x88888889
c00096c7:	89 c8                	mov    eax,ecx
c00096c9:	f7 ea                	imul   edx
c00096cb:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096ce:	c1 f8 05             	sar    eax,0x5
c00096d1:	89 c2                	mov    edx,eax
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	c1 f8 1f             	sar    eax,0x1f
c00096d8:	29 c2                	sub    edx,eax
c00096da:	89 d0                	mov    eax,edx
c00096dc:	88 c2                	mov    dl,al
c00096de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096e1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00096e4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096e7:	ba 89 88 88 88       	mov    edx,0x88888889
c00096ec:	89 c8                	mov    eax,ecx
c00096ee:	f7 ea                	imul   edx
c00096f0:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096f3:	c1 f8 05             	sar    eax,0x5
c00096f6:	89 c2                	mov    edx,eax
c00096f8:	89 c8                	mov    eax,ecx
c00096fa:	c1 f8 1f             	sar    eax,0x1f
c00096fd:	29 c2                	sub    edx,eax
c00096ff:	89 d0                	mov    eax,edx
c0009701:	c1 e0 04             	shl    eax,0x4
c0009704:	29 d0                	sub    eax,edx
c0009706:	c1 e0 02             	shl    eax,0x2
c0009709:	29 c1                	sub    ecx,eax
c000970b:	89 ca                	mov    edx,ecx
c000970d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009710:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009713:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009717:	79 20                	jns    c0009739 <KeSecondsToDatetime(unsigned long long)+0x125>
c0009719:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000971c:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009722:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009727:	89 c8                	mov    eax,ecx
c0009729:	f7 ea                	imul   edx
c000972b:	c1 fa 0f             	sar    edx,0xf
c000972e:	89 c8                	mov    eax,ecx
c0009730:	c1 f8 1f             	sar    eax,0x1f
c0009733:	29 c2                	sub    edx,eax
c0009735:	89 d0                	mov    eax,edx
c0009737:	eb 18                	jmp    c0009751 <KeSecondsToDatetime(unsigned long long)+0x13d>
c0009739:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000973c:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009741:	89 c8                	mov    eax,ecx
c0009743:	f7 ea                	imul   edx
c0009745:	c1 fa 0f             	sar    edx,0xf
c0009748:	89 c8                	mov    eax,ecx
c000974a:	c1 f8 1f             	sar    eax,0x1f
c000974d:	29 c2                	sub    edx,eax
c000974f:	89 d0                	mov    eax,edx
c0009751:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009754:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009757:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c000975d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009760:	01 d0                	add    eax,edx
c0009762:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009765:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009768:	c1 e8 02             	shr    eax,0x2
c000976b:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009770:	f7 e2                	mul    edx
c0009772:	c1 ea 07             	shr    edx,0x7
c0009775:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009778:	29 d0                	sub    eax,edx
c000977a:	89 c1                	mov    ecx,eax
c000977c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000977f:	c1 e8 02             	shr    eax,0x2
c0009782:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c0009787:	f7 e2                	mul    edx
c0009789:	89 d0                	mov    eax,edx
c000978b:	c1 e8 0b             	shr    eax,0xb
c000978e:	01 c1                	add    ecx,eax
c0009790:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009793:	c1 e8 04             	shr    eax,0x4
c0009796:	ba 41 d6 72 00       	mov    edx,0x72d641
c000979b:	f7 e2                	mul    edx
c000979d:	89 d0                	mov    eax,edx
c000979f:	c1 e8 04             	shr    eax,0x4
c00097a2:	29 c1                	sub    ecx,eax
c00097a4:	ba 61 f3 19 67       	mov    edx,0x6719f361
c00097a9:	89 c8                	mov    eax,ecx
c00097ab:	f7 e2                	mul    edx
c00097ad:	89 c8                	mov    eax,ecx
c00097af:	29 d0                	sub    eax,edx
c00097b1:	d1 e8                	shr    eax,1
c00097b3:	01 d0                	add    eax,edx
c00097b5:	c1 e8 08             	shr    eax,0x8
c00097b8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00097bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097be:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00097c3:	f7 e2                	mul    edx
c00097c5:	89 d1                	mov    ecx,edx
c00097c7:	c1 e9 05             	shr    ecx,0x5
c00097ca:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00097cd:	89 d0                	mov    eax,edx
c00097cf:	c1 e0 03             	shl    eax,0x3
c00097d2:	01 d0                	add    eax,edx
c00097d4:	c1 e0 03             	shl    eax,0x3
c00097d7:	01 d0                	add    eax,edx
c00097d9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097e0:	01 c2                	add    edx,eax
c00097e2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097e5:	c1 e8 02             	shr    eax,0x2
c00097e8:	01 d0                	add    eax,edx
c00097ea:	29 c1                	sub    ecx,eax
c00097ec:	89 ca                	mov    edx,ecx
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	01 d0                	add    eax,edx
c00097f3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00097f6:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00097f9:	89 d0                	mov    eax,edx
c00097fb:	c1 e0 02             	shl    eax,0x2
c00097fe:	01 d0                	add    eax,edx
c0009800:	83 c0 02             	add    eax,0x2
c0009803:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009808:	f7 e2                	mul    edx
c000980a:	89 d0                	mov    eax,edx
c000980c:	c1 e8 07             	shr    eax,0x7
c000980f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009812:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009815:	89 d0                	mov    eax,edx
c0009817:	c1 e0 03             	shl    eax,0x3
c000981a:	01 d0                	add    eax,edx
c000981c:	89 c2                	mov    edx,eax
c000981e:	c1 e2 04             	shl    edx,0x4
c0009821:	01 d0                	add    eax,edx
c0009823:	83 c0 02             	add    eax,0x2
c0009826:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000982b:	f7 e2                	mul    edx
c000982d:	c1 ea 02             	shr    edx,0x2
c0009830:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009833:	29 d0                	sub    eax,edx
c0009835:	83 c0 01             	add    eax,0x1
c0009838:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000983b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000983f:	77 07                	ja     c0009848 <KeSecondsToDatetime(unsigned long long)+0x234>
c0009841:	b8 02 00 00 00       	mov    eax,0x2
c0009846:	eb 05                	jmp    c000984d <KeSecondsToDatetime(unsigned long long)+0x239>
c0009848:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c000984d:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c0009850:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009853:	89 d0                	mov    eax,edx
c0009855:	c1 e0 02             	shl    eax,0x2
c0009858:	01 d0                	add    eax,edx
c000985a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009861:	01 d0                	add    eax,edx
c0009863:	c1 e0 04             	shl    eax,0x4
c0009866:	89 c2                	mov    edx,eax
c0009868:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000986b:	01 c2                	add    edx,eax
c000986d:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009871:	0f 96 c0             	setbe  al
c0009874:	0f b6 c0             	movzx  eax,al
c0009877:	01 d0                	add    eax,edx
c0009879:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c000987c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000987f:	89 c2                	mov    edx,eax
c0009881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009884:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0009888:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000988b:	83 c0 01             	add    eax,0x1
c000988e:	88 c2                	mov    dl,al
c0009890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009893:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009896:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0009899:	88 c2                	mov    dl,al
c000989b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000989e:	88 10                	mov    BYTE PTR [eax],dl
c00098a0:	90                   	nop
c00098a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a4:	c9                   	leave  
c00098a5:	c2 04 00             	ret    0x4

c00098a8 <Clock::timeInDatetimeLocal()>:
c00098a8:	55                   	push   ebp
c00098a9:	89 e5                	mov    ebp,esp
c00098ab:	83 ec 08             	sub    esp,0x8
c00098ae:	83 ec 0c             	sub    esp,0xc
c00098b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00098b4:	e8 81 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c00098b9:	83 c4 10             	add    esp,0x10
c00098bc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00098bf:	83 ec 04             	sub    esp,0x4
c00098c2:	52                   	push   edx
c00098c3:	50                   	push   eax
c00098c4:	51                   	push   ecx
c00098c5:	e8 4a fd ff ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c00098ca:	83 c4 0c             	add    esp,0xc
c00098cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d0:	c9                   	leave  
c00098d1:	c2 04 00             	ret    0x4

c00098d4 <Device::hibernate()>:
c00098d4:	c3                   	ret    
c00098d5:	90                   	nop

c00098d6 <Device::wake()>:
c00098d6:	c3                   	ret    
c00098d7:	90                   	nop

c00098d8 <Device::detect()>:
c00098d8:	c3                   	ret    
c00098d9:	90                   	nop

c00098da <Device::disableLegacy()>:
c00098da:	c3                   	ret    
c00098db:	90                   	nop

c00098dc <Device::powerSaving(PowerSavingLevel)>:
c00098dc:	c3                   	ret    
c00098dd:	90                   	nop

c00098de <DriverlessDevice::close(int, int, void*)>:
c00098de:	31 c0                	xor    eax,eax
c00098e0:	c3                   	ret    
c00098e1:	90                   	nop

c00098e2 <DriverlessDevice::detect()>:
c00098e2:	c3                   	ret    
c00098e3:	90                   	nop

c00098e4 <DriverlessDevice::open(int, int, void*)>:
c00098e4:	83 ec 18             	sub    esp,0x18
c00098e7:	68 6c 35 02 c0       	push   0xc002356c
c00098ec:	e8 f3 62 00 00       	call   c000fbe4 <KePanic(char const*)>
c00098f1:	83 c8 ff             	or     eax,0xffffffff
c00098f4:	83 c4 1c             	add    esp,0x1c
c00098f7:	c3                   	ret    

c00098f8 <Device::~Device()>:
c00098f8:	ba 10 36 02 c0       	mov    edx,0xc0023610
c00098fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009901:	89 10                	mov    DWORD PTR [eax],edx
c0009903:	90                   	nop
c0009904:	c3                   	ret    
c0009905:	90                   	nop

c0009906 <Device::~Device()>:
c0009906:	83 ec 0c             	sub    esp,0xc
c0009909:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000990d:	e8 e6 ff ff ff       	call   c00098f8 <Device::~Device()>
c0009912:	83 c4 04             	add    esp,0x4
c0009915:	83 ec 08             	sub    esp,0x8
c0009918:	68 58 01 00 00       	push   0x158
c000991d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009921:	e8 96 39 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0009926:	83 c4 10             	add    esp,0x10
c0009929:	83 c4 0c             	add    esp,0xc
c000992c:	c3                   	ret    
c000992d:	90                   	nop

c000992e <Device::findAndLoadDriver()>:
c000992e:	c7 44 24 04 8a 35 02 c0 	mov    DWORD PTR [esp+0x4],0xc002358a
c0009936:	e9 2b d6 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000993b:	90                   	nop

c000993c <Device::preOpenPCI(PCIDeviceInfo)>:
c000993c:	57                   	push   edi
c000993d:	b9 09 00 00 00       	mov    ecx,0x9
c0009942:	56                   	push   esi
c0009943:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009947:	8d 74 24 10          	lea    esi,[esp+0x10]
c000994b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0009955:	81 c7 18 01 00 00    	add    edi,0x118
c000995b:	fc                   	cld    
c000995c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000995e:	5e                   	pop    esi
c000995f:	5f                   	pop    edi
c0009960:	c3                   	ret    
c0009961:	90                   	nop

c0009962 <Device::preOpenACPI(void*, char*, char*)>:
c0009962:	57                   	push   edi
c0009963:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009968:	56                   	push   esi
c0009969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000996d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009971:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009975:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000997f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009985:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000998b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000998d:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009993:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009997:	b9 0e 00 00 00       	mov    ecx,0xe
c000999c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000999e:	5e                   	pop    esi
c000999f:	5f                   	pop    edi
c00099a0:	c3                   	ret    
c00099a1:	90                   	nop

c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00099a2:	53                   	push   ebx
c00099a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00099af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00099b3:	0f b6 c0             	movzx  eax,al
c00099b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099be:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00099c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099c6:	5b                   	pop    ebx
c00099c7:	e9 a7 10 01 00       	jmp    c001aa73 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c00099cc <Device::getParent()>:
c00099cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099d0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00099d6:	c3                   	ret    
c00099d7:	90                   	nop

c00099d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00099d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099e0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00099e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099e9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099f1:	e9 ee 11 01 00       	jmp    c001abe4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c00099f6 <Device::addChild(Device*)>:
c00099f6:	53                   	push   ebx
c00099f7:	83 ec 08             	sub    esp,0x8
c00099fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a02:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a08:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a0e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a10:	85 d2                	test   edx,edx
c0009a12:	74 04                	je     c0009a18 <Device::addChild(Device*)+0x22>
c0009a14:	89 d3                	mov    ebx,edx
c0009a16:	eb f6                	jmp    c0009a0e <Device::addChild(Device*)+0x18>
c0009a18:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a1b:	83 ec 0c             	sub    esp,0xc
c0009a1e:	6a 08                	push   0x8
c0009a20:	e8 63 5d 00 00       	call   c000f788 <malloc>
c0009a25:	89 03                	mov    DWORD PTR [ebx],eax
c0009a27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a34:	83 c4 18             	add    esp,0x18
c0009a37:	5b                   	pop    ebx
c0009a38:	c3                   	ret    
c0009a39:	90                   	nop

c0009a3a <Device::removeAllChildren()>:
c0009a3a:	56                   	push   esi
c0009a3b:	53                   	push   ebx
c0009a3c:	52                   	push   edx
c0009a3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a41:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009a47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a4a:	74 17                	je     c0009a63 <Device::removeAllChildren()+0x29>
c0009a4c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009a4f:	85 c0                	test   eax,eax
c0009a51:	74 0c                	je     c0009a5f <Device::removeAllChildren()+0x25>
c0009a53:	8b 10                	mov    edx,DWORD PTR [eax]
c0009a55:	83 ec 0c             	sub    esp,0xc
c0009a58:	50                   	push   eax
c0009a59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a5c:	83 c4 10             	add    esp,0x10
c0009a5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a61:	eb e4                	jmp    c0009a47 <Device::removeAllChildren()+0xd>
c0009a63:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a7c:	58                   	pop    eax
c0009a7d:	5b                   	pop    ebx
c0009a7e:	5e                   	pop    esi
c0009a7f:	c3                   	ret    

c0009a80 <Device::hibernateAll()>:
c0009a80:	53                   	push   ebx
c0009a81:	83 ec 14             	sub    esp,0x14
c0009a84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a8a:	53                   	push   ebx
c0009a8b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a94:	83 c4 10             	add    esp,0x10
c0009a97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a9a:	74 0f                	je     c0009aab <Device::hibernateAll()+0x2b>
c0009a9c:	83 ec 0c             	sub    esp,0xc
c0009a9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aa2:	e8 d9 ff ff ff       	call   c0009a80 <Device::hibernateAll()>
c0009aa7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009aa9:	eb e9                	jmp    c0009a94 <Device::hibernateAll()+0x14>
c0009aab:	83 c4 08             	add    esp,0x8
c0009aae:	5b                   	pop    ebx
c0009aaf:	c3                   	ret    

c0009ab0 <Device::wakeAll()>:
c0009ab0:	53                   	push   ebx
c0009ab1:	83 ec 14             	sub    esp,0x14
c0009ab4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aba:	53                   	push   ebx
c0009abb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009abe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ac4:	83 c4 10             	add    esp,0x10
c0009ac7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aca:	74 0f                	je     c0009adb <Device::wakeAll()+0x2b>
c0009acc:	83 ec 0c             	sub    esp,0xc
c0009acf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ad2:	e8 d9 ff ff ff       	call   c0009ab0 <Device::wakeAll()>
c0009ad7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ad9:	eb e9                	jmp    c0009ac4 <Device::wakeAll()+0x14>
c0009adb:	83 c4 08             	add    esp,0x8
c0009ade:	5b                   	pop    ebx
c0009adf:	c3                   	ret    

c0009ae0 <Device::detectAll()>:
c0009ae0:	53                   	push   ebx
c0009ae1:	83 ec 14             	sub    esp,0x14
c0009ae4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aea:	53                   	push   ebx
c0009aeb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009aee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009afa:	74 0f                	je     c0009b0b <Device::detectAll()+0x2b>
c0009afc:	83 ec 0c             	sub    esp,0xc
c0009aff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b02:	e8 d9 ff ff ff       	call   c0009ae0 <Device::detectAll()>
c0009b07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b09:	eb e9                	jmp    c0009af4 <Device::detectAll()+0x14>
c0009b0b:	83 c4 08             	add    esp,0x8
c0009b0e:	5b                   	pop    ebx
c0009b0f:	c3                   	ret    

c0009b10 <Device::disableLegacyAll()>:
c0009b10:	c3                   	ret    
c0009b11:	90                   	nop

c0009b12 <Device::loadDriversForAll()>:
c0009b12:	c3                   	ret    
c0009b13:	90                   	nop

c0009b14 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b14:	56                   	push   esi
c0009b15:	53                   	push   ebx
c0009b16:	83 ec 0c             	sub    esp,0xc
c0009b19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b23:	56                   	push   esi
c0009b24:	53                   	push   ebx
c0009b25:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b2e:	83 c4 10             	add    esp,0x10
c0009b31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b34:	74 0f                	je     c0009b45 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b36:	52                   	push   edx
c0009b37:	52                   	push   edx
c0009b38:	56                   	push   esi
c0009b39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b3c:	e8 d3 ff ff ff       	call   c0009b14 <Device::powerSavingAll(PowerSavingLevel)>
c0009b41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b43:	eb e9                	jmp    c0009b2e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009b45:	58                   	pop    eax
c0009b46:	5b                   	pop    ebx
c0009b47:	5e                   	pop    esi
c0009b48:	c3                   	ret    
c0009b49:	90                   	nop

c0009b4a <Device::setName(char const*)>:
c0009b4a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009b52:	e9 f9 6a ff ff       	jmp    c0000650 <strcpy>
c0009b57:	90                   	nop

c0009b58 <Device::Device(char const*)>:
c0009b58:	83 ec 1c             	sub    esp,0x1c
c0009b5b:	ba 10 36 02 c0       	mov    edx,0xc0023610
c0009b60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b64:	89 10                	mov    DWORD PTR [eax],edx
c0009b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b6a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b78:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b86:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b94:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009b9e:	83 ec 08             	sub    esp,0x8
c0009ba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ba9:	e8 9c ff ff ff       	call   c0009b4a <Device::setName(char const*)>
c0009bae:	83 c4 10             	add    esp,0x10
c0009bb1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009bb9:	83 ec 0c             	sub    esp,0xc
c0009bbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009bc0:	e8 c3 5b 00 00       	call   c000f788 <malloc>
c0009bc5:	83 c4 10             	add    esp,0x10
c0009bc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009bd5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009bd9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009be9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c04:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c0f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c1a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c28:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c36:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c44:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009c4e:	90                   	nop
c0009c4f:	83 c4 1c             	add    esp,0x1c
c0009c52:	c3                   	ret    
c0009c53:	90                   	nop

c0009c54 <Device::getName()>:
c0009c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c58:	05 d0 00 00 00       	add    eax,0xd0
c0009c5d:	c3                   	ret    

c0009c5e <Device::closeAll()>:
c0009c5e:	53                   	push   ebx
c0009c5f:	83 ec 08             	sub    esp,0x8
c0009c62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c66:	53                   	push   ebx
c0009c67:	e8 e8 ff ff ff       	call   c0009c54 <Device::getName()>
c0009c6c:	52                   	push   edx
c0009c6d:	50                   	push   eax
c0009c6e:	68 c4 35 02 c0       	push   0xc00235c4
c0009c73:	e8 ee d2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009c78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c7a:	6a 00                	push   0x0
c0009c7c:	6a 00                	push   0x0
c0009c7e:	6a 00                	push   0x0
c0009c80:	53                   	push   ebx
c0009c81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c84:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c8a:	83 c4 20             	add    esp,0x20
c0009c8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c90:	74 12                	je     c0009ca4 <Device::closeAll()+0x46>
c0009c92:	83 ec 0c             	sub    esp,0xc
c0009c95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c98:	e8 c1 ff ff ff       	call   c0009c5e <Device::closeAll()>
c0009c9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009c9f:	83 c4 10             	add    esp,0x10
c0009ca2:	eb e9                	jmp    c0009c8d <Device::closeAll()+0x2f>
c0009ca4:	83 c4 08             	add    esp,0x8
c0009ca7:	5b                   	pop    ebx
c0009ca8:	c3                   	ret    
c0009ca9:	90                   	nop

c0009caa <DriverlessDevice::DriverlessDevice(char const*)>:
c0009caa:	83 ec 0c             	sub    esp,0xc
c0009cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb1:	83 ec 08             	sub    esp,0x8
c0009cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cb8:	50                   	push   eax
c0009cb9:	e8 9a fe ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009cbe:	83 c4 10             	add    esp,0x10
c0009cc1:	ba 3c 36 02 c0       	mov    edx,0xc002363c
c0009cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cca:	89 10                	mov    DWORD PTR [eax],edx
c0009ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009cda:	90                   	nop
c0009cdb:	83 c4 0c             	add    esp,0xc
c0009cde:	c3                   	ret    
c0009cdf:	90                   	nop

c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009ce0:	57                   	push   edi
c0009ce1:	56                   	push   esi
c0009ce2:	53                   	push   ebx
c0009ce3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009ce7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009ceb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009cef:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009cf5:	75 0c                	jne    c0009d03 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009cf7:	52                   	push   edx
c0009cf8:	52                   	push   edx
c0009cf9:	53                   	push   ebx
c0009cfa:	56                   	push   esi
c0009cfb:	e8 ec 7e 01 00       	call   c0021bec <LinkedList<Device>::addElement(Device*)>
c0009d00:	83 c4 10             	add    esp,0x10
c0009d03:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d0c:	74 12                	je     c0009d20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d0e:	50                   	push   eax
c0009d0f:	57                   	push   edi
c0009d10:	56                   	push   esi
c0009d11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d14:	e8 c7 ff ff ff       	call   c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	eb e9                	jmp    c0009d09 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d20:	5b                   	pop    ebx
c0009d21:	5e                   	pop    esi
c0009d22:	5f                   	pop    edi
c0009d23:	c3                   	ret    

c0009d24 <getDevicesOfType(DeviceType)>:
c0009d24:	53                   	push   ebx
c0009d25:	83 ec 14             	sub    esp,0x14
c0009d28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d2c:	53                   	push   ebx
c0009d2d:	e8 96 7f 01 00       	call   c0021cc8 <LinkedList<Device>::LinkedList()>
c0009d32:	83 c4 0c             	add    esp,0xc
c0009d35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d39:	53                   	push   ebx
c0009d3a:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c0009d40:	e8 9b ff ff ff       	call   c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d45:	83 c4 18             	add    esp,0x18
c0009d48:	89 d8                	mov    eax,ebx
c0009d4a:	5b                   	pop    ebx
c0009d4b:	c2 04 00             	ret    0x4
c0009d4e:	66 90                	xchg   ax,ax

c0009d50 <HardDiskController::HardDiskController(char const*)>:
c0009d50:	83 ec 0c             	sub    esp,0xc
c0009d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d57:	83 ec 08             	sub    esp,0x8
c0009d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d5e:	50                   	push   eax
c0009d5f:	e8 f4 fd ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009d64:	83 c4 10             	add    esp,0x10
c0009d67:	ba 68 36 02 c0       	mov    edx,0xc0023668
c0009d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d70:	89 10                	mov    DWORD PTR [eax],edx
c0009d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d76:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d80:	90                   	nop
c0009d81:	83 c4 0c             	add    esp,0xc
c0009d84:	c3                   	ret    
c0009d85:	90                   	nop
c0009d86:	66 90                	xchg   ax,ax

c0009d88 <HardDiskController::~HardDiskController()>:
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	ba 68 36 02 c0       	mov    edx,0xc0023668
c0009d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d94:	89 10                	mov    DWORD PTR [eax],edx
c0009d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9a:	83 ec 0c             	sub    esp,0xc
c0009d9d:	50                   	push   eax
c0009d9e:	e8 55 fb ff ff       	call   c00098f8 <Device::~Device()>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	90                   	nop
c0009da7:	83 c4 0c             	add    esp,0xc
c0009daa:	c3                   	ret    
c0009dab:	90                   	nop

c0009dac <HardDiskController::~HardDiskController()>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	83 ec 0c             	sub    esp,0xc
c0009db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009db6:	e8 cd ff ff ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0009dbb:	83 c4 10             	add    esp,0x10
c0009dbe:	83 ec 08             	sub    esp,0x8
c0009dc1:	68 58 01 00 00       	push   0x158
c0009dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dca:	e8 ed 34 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	83 c4 0c             	add    esp,0xc
c0009dd5:	c3                   	ret    

c0009dd6 <PhysicalDisk::eject()>:
c0009dd6:	83 c8 ff             	or     eax,0xffffffff
c0009dd9:	c3                   	ret    

c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009dda:	83 ec 0c             	sub    esp,0xc
c0009ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de1:	83 ec 08             	sub    esp,0x8
c0009de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009de8:	50                   	push   eax
c0009de9:	e8 6a fd ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009dee:	83 c4 10             	add    esp,0x10
c0009df1:	ba 94 36 02 c0       	mov    edx,0xc0023694
c0009df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dfa:	89 10                	mov    DWORD PTR [eax],edx
c0009dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e00:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e0b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e16:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e28:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e32:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e3c:	90                   	nop
c0009e3d:	83 c4 0c             	add    esp,0xc
c0009e40:	c3                   	ret    
c0009e41:	90                   	nop

c0009e42 <PhysicalDisk::startCache()>:
c0009e42:	56                   	push   esi
c0009e43:	53                   	push   ebx
c0009e44:	83 ec 10             	sub    esp,0x10
c0009e47:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e4b:	6a 44                	push   0x44
c0009e4d:	e8 36 59 00 00       	call   c000f788 <malloc>
c0009e52:	89 c6                	mov    esi,eax
c0009e54:	58                   	pop    eax
c0009e55:	5a                   	pop    edx
c0009e56:	53                   	push   ebx
c0009e57:	56                   	push   esi
c0009e58:	e8 d3 13 00 00       	call   c000b230 <VCache::VCache(PhysicalDisk*)>
c0009e5d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e63:	83 c4 14             	add    esp,0x14
c0009e66:	5b                   	pop    ebx
c0009e67:	5e                   	pop    esi
c0009e68:	c3                   	ret    
c0009e69:	90                   	nop

c0009e6a <PhysicalDisk::~PhysicalDisk()>:
c0009e6a:	83 ec 0c             	sub    esp,0xc
c0009e6d:	ba 94 36 02 c0       	mov    edx,0xc0023694
c0009e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e76:	89 10                	mov    DWORD PTR [eax],edx
c0009e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e7c:	83 ec 0c             	sub    esp,0xc
c0009e7f:	50                   	push   eax
c0009e80:	e8 73 fa ff ff       	call   c00098f8 <Device::~Device()>
c0009e85:	83 c4 10             	add    esp,0x10
c0009e88:	90                   	nop
c0009e89:	83 c4 0c             	add    esp,0xc
c0009e8c:	c3                   	ret    
c0009e8d:	90                   	nop

c0009e8e <PhysicalDisk::~PhysicalDisk()>:
c0009e8e:	83 ec 0c             	sub    esp,0xc
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e98:	e8 cd ff ff ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c0009e9d:	83 c4 10             	add    esp,0x10
c0009ea0:	83 ec 08             	sub    esp,0x8
c0009ea3:	68 6c 01 00 00       	push   0x16c
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	e8 0b 34 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c0009eb1:	83 c4 10             	add    esp,0x10
c0009eb4:	83 c4 0c             	add    esp,0xc
c0009eb7:	c3                   	ret    

c0009eb8 <startGUI(void*)>:
c0009eb8:	55                   	push   ebp
c0009eb9:	89 e5                	mov    ebp,esp
c0009ebb:	53                   	push   ebx
c0009ebc:	83 ec 04             	sub    esp,0x4
c0009ebf:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0009ec7:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0009ecc:	85 c0                	test   eax,eax
c0009ece:	75 01                	jne    c0009ed1 <startGUI(void*)+0x19>
c0009ed0:	fb                   	sti    
c0009ed1:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009ed7:	83 ec 08             	sub    esp,0x8
c0009eda:	6a 01                	push   0x1
c0009edc:	68 c4 36 02 c0       	push   0xc00236c4
c0009ee1:	e8 a1 c2 00 00       	call   c0016187 <Thr::loadDLL(char const*, bool)>
c0009ee6:	83 c4 10             	add    esp,0x10
c0009ee9:	83 ec 08             	sub    esp,0x8
c0009eec:	53                   	push   ebx
c0009eed:	50                   	push   eax
c0009eee:	e8 f5 c4 00 00       	call   c00163e8 <Thr::executeDLL(unsigned long, void*)>
c0009ef3:	83 c4 10             	add    esp,0x10
c0009ef6:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009efc:	83 ec 08             	sub    esp,0x8
c0009eff:	6a 01                	push   0x1
c0009f01:	68 de 36 02 c0       	push   0xc00236de
c0009f06:	e8 7c c2 00 00       	call   c0016187 <Thr::loadDLL(char const*, bool)>
c0009f0b:	83 c4 10             	add    esp,0x10
c0009f0e:	83 ec 08             	sub    esp,0x8
c0009f11:	53                   	push   ebx
c0009f12:	50                   	push   eax
c0009f13:	e8 d0 c4 00 00       	call   c00163e8 <Thr::executeDLL(unsigned long, void*)>
c0009f18:	83 c4 10             	add    esp,0x10
c0009f1b:	eb fe                	jmp    c0009f1b <startGUI(void*)+0x63>

c0009f1d <startGUIVESA(void*)>:
c0009f1d:	55                   	push   ebp
c0009f1e:	89 e5                	mov    ebp,esp
c0009f20:	53                   	push   ebx
c0009f21:	83 ec 04             	sub    esp,0x4
c0009f24:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0009f2c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0009f31:	85 c0                	test   eax,eax
c0009f33:	75 01                	jne    c0009f36 <startGUIVESA(void*)+0x19>
c0009f35:	fb                   	sti    
c0009f36:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009f3c:	83 ec 08             	sub    esp,0x8
c0009f3f:	6a 01                	push   0x1
c0009f41:	68 fc 36 02 c0       	push   0xc00236fc
c0009f46:	e8 3c c2 00 00       	call   c0016187 <Thr::loadDLL(char const*, bool)>
c0009f4b:	83 c4 10             	add    esp,0x10
c0009f4e:	83 ec 08             	sub    esp,0x8
c0009f51:	53                   	push   ebx
c0009f52:	50                   	push   eax
c0009f53:	e8 90 c4 00 00       	call   c00163e8 <Thr::executeDLL(unsigned long, void*)>
c0009f58:	83 c4 10             	add    esp,0x10
c0009f5b:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009f61:	83 ec 08             	sub    esp,0x8
c0009f64:	6a 01                	push   0x1
c0009f66:	68 de 36 02 c0       	push   0xc00236de
c0009f6b:	e8 17 c2 00 00       	call   c0016187 <Thr::loadDLL(char const*, bool)>
c0009f70:	83 c4 10             	add    esp,0x10
c0009f73:	83 ec 08             	sub    esp,0x8
c0009f76:	53                   	push   ebx
c0009f77:	50                   	push   eax
c0009f78:	e8 6b c4 00 00       	call   c00163e8 <Thr::executeDLL(unsigned long, void*)>
c0009f7d:	83 c4 10             	add    esp,0x10
c0009f80:	eb fe                	jmp    c0009f80 <startGUIVESA(void*)+0x63>

c0009f82 <sendKeyToTerminal(unsigned char)>:
c0009f82:	55                   	push   ebp
c0009f83:	89 e5                	mov    ebp,esp
c0009f85:	83 ec 28             	sub    esp,0x28
c0009f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f8b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f8e:	a1 f4 c1 02 c0       	mov    eax,ds:0xc002c1f4
c0009f93:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f97:	83 ec 08             	sub    esp,0x8
c0009f9a:	52                   	push   edx
c0009f9b:	50                   	push   eax
c0009f9c:	e8 7b 89 00 00       	call   c001291c <VgaText::receiveKey(unsigned char)>
c0009fa1:	83 c4 10             	add    esp,0x10
c0009fa4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fa8:	83 f8 0a             	cmp    eax,0xa
c0009fab:	74 16                	je     c0009fc3 <sendKeyToTerminal(unsigned char)+0x41>
c0009fad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fb1:	83 f8 03             	cmp    eax,0x3
c0009fb4:	74 0d                	je     c0009fc3 <sendKeyToTerminal(unsigned char)+0x41>
c0009fb6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fba:	83 f8 1c             	cmp    eax,0x1c
c0009fbd:	0f 85 92 00 00 00    	jne    c000a055 <sendKeyToTerminal(unsigned char)+0xd3>
c0009fc3:	fa                   	cli    
c0009fc4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0009fc9:	83 c0 01             	add    eax,0x1
c0009fcc:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0009fd1:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0009fd6:	83 c0 01             	add    eax,0x1
c0009fd9:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0009fde:	a1 80 b6 02 c0       	mov    eax,ds:0xc002b680
c0009fe3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fe6:	c7 05 80 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b680,0x0
c0009ff0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009ff4:	74 1f                	je     c000a015 <sendKeyToTerminal(unsigned char)+0x93>
c0009ff6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009ff9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009ffc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009fff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a002:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a005:	83 ec 0c             	sub    esp,0xc
c000a008:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a00b:	e8 6c d0 00 00       	call   c001707c <unblockTask(ThreadControlBlock*)>
c000a010:	83 c4 10             	add    esp,0x10
c000a013:	eb db                	jmp    c0009ff0 <sendKeyToTerminal(unsigned char)+0x6e>
c000a015:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000a01a:	83 e8 01             	sub    eax,0x1
c000a01d:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c000a022:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000a027:	85 c0                	test   eax,eax
c000a029:	75 18                	jne    c000a043 <sendKeyToTerminal(unsigned char)+0xc1>
c000a02b:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c000a030:	85 c0                	test   eax,eax
c000a032:	74 0f                	je     c000a043 <sendKeyToTerminal(unsigned char)+0xc1>
c000a034:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c000a03e:	e8 e1 cc 00 00       	call   c0016d24 <schedule()>
c000a043:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000a04b:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a050:	85 c0                	test   eax,eax
c000a052:	75 01                	jne    c000a055 <sendKeyToTerminal(unsigned char)+0xd3>
c000a054:	fb                   	sti    
c000a055:	90                   	nop
c000a056:	c9                   	leave  
c000a057:	c3                   	ret    

c000a058 <sendKeyboardToken(KeyboardToken)>:
c000a058:	55                   	push   ebp
c000a059:	89 e5                	mov    ebp,esp
c000a05b:	83 ec 18             	sub    esp,0x18
c000a05e:	e8 ac 64 00 00       	call   c001050f <KeUserIOReceived()>
c000a063:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a069:	0f b7 c0             	movzx  eax,ax
c000a06c:	83 f2 01             	xor    edx,0x1
c000a06f:	88 90 a0 b6 02 c0    	mov    BYTE PTR [eax-0x3ffd4960],dl
c000a075:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a07a:	85 c0                	test   eax,eax
c000a07c:	74 24                	je     c000a0a2 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a07e:	8b 15 88 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b688
c000a084:	83 ec 04             	sub    esp,0x4
c000a087:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a08c:	83 ec 08             	sub    esp,0x8
c000a08f:	89 e0                	mov    eax,esp
c000a091:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a094:	89 08                	mov    DWORD PTR [eax],ecx
c000a096:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a099:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a09d:	ff d2                	call   edx
c000a09f:	83 c4 10             	add    esp,0x10
c000a0a2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a0a6:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a0a9:	0f b6 c0             	movzx  eax,al
c000a0ac:	85 c0                	test   eax,eax
c000a0ae:	0f 84 da 00 00 00    	je     c000a18e <sendKeyboardToken(KeyboardToken)+0x136>
c000a0b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0b7:	0f b7 c0             	movzx  eax,ax
c000a0ba:	3d 18 03 00 00       	cmp    eax,0x318
c000a0bf:	75 06                	jne    c000a0c7 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a0c1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a0c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ca:	0f b7 c0             	movzx  eax,ax
c000a0cd:	3d 19 03 00 00       	cmp    eax,0x319
c000a0d2:	75 06                	jne    c000a0da <sendKeyboardToken(KeyboardToken)+0x82>
c000a0d4:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a0da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0dd:	0f b7 c0             	movzx  eax,ax
c000a0e0:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a0e5:	75 06                	jne    c000a0ed <sendKeyboardToken(KeyboardToken)+0x95>
c000a0e7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f0:	0f b7 c0             	movzx  eax,ax
c000a0f3:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a0f8:	75 06                	jne    c000a100 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a0fa:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a103:	0f b7 c0             	movzx  eax,ax
c000a106:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a10b:	75 06                	jne    c000a113 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a10d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a116:	0f b7 c0             	movzx  eax,ax
c000a119:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a11e:	75 06                	jne    c000a126 <sendKeyboardToken(KeyboardToken)+0xce>
c000a120:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a129:	0f b7 c0             	movzx  eax,ax
c000a12c:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a131:	75 06                	jne    c000a139 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a133:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a13c:	0f b7 c0             	movzx  eax,ax
c000a13f:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a144:	75 06                	jne    c000a14c <sendKeyboardToken(KeyboardToken)+0xf4>
c000a146:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a14c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14f:	0f b7 c0             	movzx  eax,ax
c000a152:	3d 20 03 00 00       	cmp    eax,0x320
c000a157:	75 06                	jne    c000a15f <sendKeyboardToken(KeyboardToken)+0x107>
c000a159:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a15f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a162:	0f b7 c0             	movzx  eax,ax
c000a165:	3d 21 03 00 00       	cmp    eax,0x321
c000a16a:	75 06                	jne    c000a172 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a16c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a175:	0f b7 c0             	movzx  eax,ax
c000a178:	3d 22 03 00 00       	cmp    eax,0x322
c000a17d:	0f 85 f1 00 00 00    	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a183:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a189:	e9 e6 00 00 00       	jmp    c000a274 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a18e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a191:	0f b7 c0             	movzx  eax,ax
c000a194:	3d 18 03 00 00       	cmp    eax,0x318
c000a199:	75 0a                	jne    c000a1a5 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a19b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1a8:	0f b7 c0             	movzx  eax,ax
c000a1ab:	3d 19 03 00 00       	cmp    eax,0x319
c000a1b0:	75 0a                	jne    c000a1bc <sendKeyboardToken(KeyboardToken)+0x164>
c000a1b2:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a1b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1bf:	0f b7 c0             	movzx  eax,ax
c000a1c2:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a1c7:	75 0a                	jne    c000a1d3 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a1c9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a1cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1d6:	0f b7 c0             	movzx  eax,ax
c000a1d9:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a1de:	75 0a                	jne    c000a1ea <sendKeyboardToken(KeyboardToken)+0x192>
c000a1e0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a1e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ed:	0f b7 c0             	movzx  eax,ax
c000a1f0:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a1f5:	75 0a                	jne    c000a201 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a1f7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a1fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a204:	0f b7 c0             	movzx  eax,ax
c000a207:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a20c:	75 0a                	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a20e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a214:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21b:	0f b7 c0             	movzx  eax,ax
c000a21e:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a223:	75 0a                	jne    c000a22f <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a225:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a22b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a232:	0f b7 c0             	movzx  eax,ax
c000a235:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a23a:	75 0a                	jne    c000a246 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a23c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a242:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a249:	0f b7 c0             	movzx  eax,ax
c000a24c:	3d 20 03 00 00       	cmp    eax,0x320
c000a251:	75 0a                	jne    c000a25d <sendKeyboardToken(KeyboardToken)+0x205>
c000a253:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a259:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a260:	0f b7 c0             	movzx  eax,ax
c000a263:	3d 21 03 00 00       	cmp    eax,0x321
c000a268:	75 0a                	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a26a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a270:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a277:	0f b7 c0             	movzx  eax,ax
c000a27a:	3d 00 02 00 00       	cmp    eax,0x200
c000a27f:	75 2f                	jne    c000a2b0 <sendKeyboardToken(KeyboardToken)+0x258>
c000a281:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a286:	83 f0 01             	xor    eax,0x1
c000a289:	0f b6 c0             	movzx  eax,al
c000a28c:	85 c0                	test   eax,eax
c000a28e:	74 20                	je     c000a2b0 <sendKeyboardToken(KeyboardToken)+0x258>
c000a290:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000a295:	6a 01                	push   0x1
c000a297:	6a 00                	push   0x0
c000a299:	68 b8 9e 00 c0       	push   0xc0009eb8
c000a29e:	50                   	push   eax
c000a29f:	e8 d8 c7 00 00       	call   c0016a7c <Process::createThread(void (*)(void*), void*, int)>
c000a2a4:	83 c4 10             	add    esp,0x10
c000a2a7:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2ae:	eb 3a                	jmp    c000a2ea <sendKeyboardToken(KeyboardToken)+0x292>
c000a2b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2b3:	0f b7 c0             	movzx  eax,ax
c000a2b6:	3d 01 02 00 00       	cmp    eax,0x201
c000a2bb:	75 2d                	jne    c000a2ea <sendKeyboardToken(KeyboardToken)+0x292>
c000a2bd:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a2c2:	83 f0 01             	xor    eax,0x1
c000a2c5:	0f b6 c0             	movzx  eax,al
c000a2c8:	85 c0                	test   eax,eax
c000a2ca:	74 1e                	je     c000a2ea <sendKeyboardToken(KeyboardToken)+0x292>
c000a2cc:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000a2d1:	6a 01                	push   0x1
c000a2d3:	6a 00                	push   0x0
c000a2d5:	68 1d 9f 00 c0       	push   0xc0009f1d
c000a2da:	50                   	push   eax
c000a2db:	e8 9c c7 00 00       	call   c0016a7c <Process::createThread(void (*)(void*), void*, int)>
c000a2e0:	83 c4 10             	add    esp,0x10
c000a2e3:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2ed:	0f b7 c0             	movzx  eax,ax
c000a2f0:	3d 25 03 00 00       	cmp    eax,0x325
c000a2f5:	75 06                	jne    c000a2fd <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a2f7:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a2fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a300:	0f b7 c0             	movzx  eax,ax
c000a303:	3d 24 03 00 00       	cmp    eax,0x324
c000a308:	75 06                	jne    c000a310 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a30a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a313:	0f b7 c0             	movzx  eax,ax
c000a316:	3d 23 03 00 00       	cmp    eax,0x323
c000a31b:	75 06                	jne    c000a323 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a31d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a326:	0f b7 c0             	movzx  eax,ax
c000a329:	3d 26 03 00 00       	cmp    eax,0x326
c000a32e:	75 06                	jne    c000a336 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a330:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a339:	0f b7 c0             	movzx  eax,ax
c000a33c:	3d 27 03 00 00       	cmp    eax,0x327
c000a341:	75 06                	jne    c000a349 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a343:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a34c:	0f b7 c0             	movzx  eax,ax
c000a34f:	3d 22 03 00 00       	cmp    eax,0x322
c000a354:	75 06                	jne    c000a35c <sendKeyboardToken(KeyboardToken)+0x304>
c000a356:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a35c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a360:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a363:	83 f0 01             	xor    eax,0x1
c000a366:	0f b6 c0             	movzx  eax,al
c000a369:	85 c0                	test   eax,eax
c000a36b:	74 7c                	je     c000a3e9 <sendKeyboardToken(KeyboardToken)+0x391>
c000a36d:	a0 a1 b7 02 c0       	mov    al,ds:0xc002b7a1
c000a372:	0f b6 c0             	movzx  eax,al
c000a375:	85 c0                	test   eax,eax
c000a377:	74 43                	je     c000a3bc <sendKeyboardToken(KeyboardToken)+0x364>
c000a379:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a37d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a381:	85 c0                	test   eax,eax
c000a383:	74 2b                	je     c000a3b0 <sendKeyboardToken(KeyboardToken)+0x358>
c000a385:	8b 15 a4 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002baa4
c000a38b:	89 d0                	mov    eax,edx
c000a38d:	c1 e0 02             	shl    eax,0x2
c000a390:	01 d0                	add    eax,edx
c000a392:	d1 e0                	shl    eax,1
c000a394:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a39c:	0f b7 c0             	movzx  eax,ax
c000a39f:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3a2:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3a7:	01 d0                	add    eax,edx
c000a3a9:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a3ae:	eb 71                	jmp    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3b0:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3ba:	eb 65                	jmp    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3bc:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3c1:	85 c0                	test   eax,eax
c000a3c3:	74 18                	je     c000a3dd <sendKeyboardToken(KeyboardToken)+0x385>
c000a3c5:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ca:	0f b6 c0             	movzx  eax,al
c000a3cd:	83 ec 0c             	sub    esp,0xc
c000a3d0:	50                   	push   eax
c000a3d1:	e8 ac fb ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a3d6:	83 c4 10             	add    esp,0x10
c000a3d9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3dd:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3e7:	eb 38                	jmp    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3ec:	0f b7 c0             	movzx  eax,ax
c000a3ef:	3d 01 01 00 00       	cmp    eax,0x101
c000a3f4:	75 2b                	jne    c000a421 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3f6:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3fb:	85 c0                	test   eax,eax
c000a3fd:	74 18                	je     c000a417 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a3ff:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a404:	0f b6 c0             	movzx  eax,al
c000a407:	83 ec 0c             	sub    esp,0xc
c000a40a:	50                   	push   eax
c000a40b:	e8 72 fb ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a410:	83 c4 10             	add    esp,0x10
c000a413:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a417:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a421:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a424:	83 f0 01             	xor    eax,0x1
c000a427:	0f b6 c0             	movzx  eax,al
c000a42a:	85 c0                	test   eax,eax
c000a42c:	74 5a                	je     c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a42e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a431:	83 f0 01             	xor    eax,0x1
c000a434:	0f b6 c0             	movzx  eax,al
c000a437:	85 c0                	test   eax,eax
c000a439:	74 4d                	je     c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a43b:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a440:	83 f0 01             	xor    eax,0x1
c000a443:	0f b6 c0             	movzx  eax,al
c000a446:	85 c0                	test   eax,eax
c000a448:	74 3e                	je     c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a44a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a44d:	0f b7 c0             	movzx  eax,ax
c000a450:	83 f8 1f             	cmp    eax,0x1f
c000a453:	76 0b                	jbe    c000a460 <sendKeyboardToken(KeyboardToken)+0x408>
c000a455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a458:	0f b7 c0             	movzx  eax,ax
c000a45b:	83 f8 7e             	cmp    eax,0x7e
c000a45e:	76 16                	jbe    c000a476 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a463:	0f b7 c0             	movzx  eax,ax
c000a466:	83 f8 0a             	cmp    eax,0xa
c000a469:	74 0b                	je     c000a476 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a46b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a46e:	0f b7 c0             	movzx  eax,ax
c000a471:	83 f8 08             	cmp    eax,0x8
c000a474:	75 12                	jne    c000a488 <sendKeyboardToken(KeyboardToken)+0x430>
c000a476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a479:	0f b6 c0             	movzx  eax,al
c000a47c:	83 ec 0c             	sub    esp,0xc
c000a47f:	50                   	push   eax
c000a480:	e8 fd fa ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a485:	83 c4 10             	add    esp,0x10
c000a488:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a48b:	83 f0 01             	xor    eax,0x1
c000a48e:	0f b6 c0             	movzx  eax,al
c000a491:	85 c0                	test   eax,eax
c000a493:	74 5d                	je     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a495:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a498:	83 f0 01             	xor    eax,0x1
c000a49b:	0f b6 c0             	movzx  eax,al
c000a49e:	85 c0                	test   eax,eax
c000a4a0:	74 50                	je     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4a2:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a4a7:	0f b6 c0             	movzx  eax,al
c000a4aa:	85 c0                	test   eax,eax
c000a4ac:	74 44                	je     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b1:	0f b7 c0             	movzx  eax,ax
c000a4b4:	83 f8 3f             	cmp    eax,0x3f
c000a4b7:	76 39                	jbe    c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4bc:	0f b7 c0             	movzx  eax,ax
c000a4bf:	83 f8 7f             	cmp    eax,0x7f
c000a4c2:	77 2e                	ja     c000a4f2 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4c7:	88 c2                	mov    dl,al
c000a4c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4cc:	0f b7 c0             	movzx  eax,ax
c000a4cf:	83 f8 5f             	cmp    eax,0x5f
c000a4d2:	76 04                	jbe    c000a4d8 <sendKeyboardToken(KeyboardToken)+0x480>
c000a4d4:	b0 20                	mov    al,0x20
c000a4d6:	eb 02                	jmp    c000a4da <sendKeyboardToken(KeyboardToken)+0x482>
c000a4d8:	b0 00                	mov    al,0x0
c000a4da:	89 d1                	mov    ecx,edx
c000a4dc:	29 c1                	sub    ecx,eax
c000a4de:	89 c8                	mov    eax,ecx
c000a4e0:	83 e8 40             	sub    eax,0x40
c000a4e3:	0f b6 c0             	movzx  eax,al
c000a4e6:	83 ec 0c             	sub    esp,0xc
c000a4e9:	50                   	push   eax
c000a4ea:	e8 93 fa ff ff       	call   c0009f82 <sendKeyToTerminal(unsigned char)>
c000a4ef:	83 c4 10             	add    esp,0x10
c000a4f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4f5:	0f b7 c0             	movzx  eax,ax
c000a4f8:	3d 00 03 00 00       	cmp    eax,0x300
c000a4fd:	75 12                	jne    c000a511 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4ff:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a502:	83 f0 01             	xor    eax,0x1
c000a505:	0f b6 c0             	movzx  eax,al
c000a508:	85 c0                	test   eax,eax
c000a50a:	74 05                	je     c000a511 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a50c:	e8 10 7b 00 00       	call   c0012021 <doTerminalCycle()>
c000a511:	90                   	nop
c000a512:	c9                   	leave  
c000a513:	c3                   	ret    

c000a514 <clearInternalKeybuffer(VgaText*)>:
c000a514:	55                   	push   ebp
c000a515:	89 e5                	mov    ebp,esp
c000a517:	83 ec 08             	sub    esp,0x8
c000a51a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a51d:	05 02 01 00 00       	add    eax,0x102
c000a522:	83 ec 0c             	sub    esp,0xc
c000a525:	50                   	push   eax
c000a526:	e8 55 60 ff ff       	call   c0000580 <strlen>
c000a52b:	83 c4 10             	add    esp,0x10
c000a52e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a531:	81 c2 02 01 00 00    	add    edx,0x102
c000a537:	83 ec 04             	sub    esp,0x4
c000a53a:	50                   	push   eax
c000a53b:	6a 00                	push   0x0
c000a53d:	52                   	push   edx
c000a53e:	e8 ad 5f ff ff       	call   c00004f0 <memset>
c000a543:	83 c4 10             	add    esp,0x10
c000a546:	90                   	nop
c000a547:	c9                   	leave  
c000a548:	c3                   	ret    

c000a549 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a549:	55                   	push   ebp
c000a54a:	89 e5                	mov    ebp,esp
c000a54c:	83 ec 18             	sub    esp,0x18
c000a54f:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a554:	85 c0                	test   eax,eax
c000a556:	74 2a                	je     c000a582 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a558:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a55e:	8b 15 88 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b688
c000a564:	83 ec 04             	sub    esp,0x4
c000a567:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a56c:	83 ec 08             	sub    esp,0x8
c000a56f:	89 e0                	mov    eax,esp
c000a571:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000a574:	89 08                	mov    DWORD PTR [eax],ecx
c000a576:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a579:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a57d:	ff d2                	call   edx
c000a57f:	83 c4 10             	add    esp,0x10
c000a582:	fb                   	sti    
c000a583:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a58a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a58e:	0f 84 08 01 00 00    	je     c000a69c <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a597:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a59d:	0f be c0             	movsx  eax,al
c000a5a0:	85 c0                	test   eax,eax
c000a5a2:	75 27                	jne    c000a5cb <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a5a4:	fa                   	cli    
c000a5a5:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a5aa:	83 c0 01             	add    eax,0x1
c000a5ad:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000a5b2:	e8 6d c7 00 00       	call   c0016d24 <schedule()>
c000a5b7:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000a5bf:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a5c4:	85 c0                	test   eax,eax
c000a5c6:	75 cc                	jne    c000a594 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5c8:	fb                   	sti    
c000a5c9:	eb c9                	jmp    c000a594 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a5ce:	8d 50 01             	lea    edx,[eax+0x1]
c000a5d1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a5d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5d7:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a5dd:	88 10                	mov    BYTE PTR [eax],dl
c000a5df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5e2:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5e8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a5eb:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5ef:	83 f8 03             	cmp    eax,0x3
c000a5f2:	75 1e                	jne    c000a612 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a5f4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a5fe:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a604:	83 ec 08             	sub    esp,0x8
c000a607:	6a 02                	push   0x2
c000a609:	50                   	push   eax
c000a60a:	e8 94 68 00 00       	call   c0010ea3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a60f:	83 c4 10             	add    esp,0x10
c000a612:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a616:	83 f8 1c             	cmp    eax,0x1c
c000a619:	75 1e                	jne    c000a639 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a61b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a620:	8b 00                	mov    eax,DWORD PTR [eax]
c000a622:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a625:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a62b:	83 ec 08             	sub    esp,0x8
c000a62e:	6a 09                	push   0x9
c000a630:	50                   	push   eax
c000a631:	e8 6d 68 00 00       	call   c0010ea3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a636:	83 c4 10             	add    esp,0x10
c000a639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a63c:	05 02 01 00 00       	add    eax,0x102
c000a641:	83 ec 0c             	sub    esp,0xc
c000a644:	50                   	push   eax
c000a645:	e8 36 5f ff ff       	call   c0000580 <strlen>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a650:	81 c2 02 01 00 00    	add    edx,0x102
c000a656:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a659:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a65c:	81 c2 02 01 00 00    	add    edx,0x102
c000a662:	83 ec 04             	sub    esp,0x4
c000a665:	50                   	push   eax
c000a666:	51                   	push   ecx
c000a667:	52                   	push   edx
c000a668:	e8 63 5d ff ff       	call   c00003d0 <memmove>
c000a66d:	83 c4 10             	add    esp,0x10
c000a670:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a674:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a678:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a67c:	83 f8 0a             	cmp    eax,0xa
c000a67f:	74 16                	je     c000a697 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a681:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a685:	83 f8 03             	cmp    eax,0x3
c000a688:	74 0d                	je     c000a697 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a68a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a68e:	83 f8 1c             	cmp    eax,0x1c
c000a691:	0f 85 f3 fe ff ff    	jne    c000a58a <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a697:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a69a:	eb 03                	jmp    c000a69f <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a69c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a69f:	c9                   	leave  
c000a6a0:	c3                   	ret    
c000a6a1:	90                   	nop

c000a6a2 <Keyboard::Keyboard(char const*)>:
c000a6a2:	83 ec 0c             	sub    esp,0xc
c000a6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a9:	83 ec 08             	sub    esp,0x8
c000a6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6b0:	50                   	push   eax
c000a6b1:	e8 a2 f4 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	ba 20 37 02 c0       	mov    edx,0xc0023720
c000a6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c2:	89 10                	mov    DWORD PTR [eax],edx
c000a6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a6d2:	c6 05 84 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b684,0x1
c000a6d9:	90                   	nop
c000a6da:	83 c4 0c             	add    esp,0xc
c000a6dd:	c3                   	ret    

c000a6de <Keyboard::~Keyboard()>:
c000a6de:	83 ec 0c             	sub    esp,0xc
c000a6e1:	ba 20 37 02 c0       	mov    edx,0xc0023720
c000a6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ea:	89 10                	mov    DWORD PTR [eax],edx
c000a6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f0:	83 ec 0c             	sub    esp,0xc
c000a6f3:	50                   	push   eax
c000a6f4:	e8 ff f1 ff ff       	call   c00098f8 <Device::~Device()>
c000a6f9:	83 c4 10             	add    esp,0x10
c000a6fc:	90                   	nop
c000a6fd:	83 c4 0c             	add    esp,0xc
c000a700:	c3                   	ret    
c000a701:	90                   	nop

c000a702 <Keyboard::~Keyboard()>:
c000a702:	83 ec 0c             	sub    esp,0xc
c000a705:	83 ec 0c             	sub    esp,0xc
c000a708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70c:	e8 cd ff ff ff       	call   c000a6de <Keyboard::~Keyboard()>
c000a711:	83 c4 10             	add    esp,0x10
c000a714:	83 ec 08             	sub    esp,0x8
c000a717:	68 5c 01 00 00       	push   0x15c
c000a71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a720:	e8 97 2b 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000a725:	83 c4 10             	add    esp,0x10
c000a728:	83 c4 0c             	add    esp,0xc
c000a72b:	c3                   	ret    

c000a72c <LogicalDisk::close(int, int, void*)>:
c000a72c:	83 c8 ff             	or     eax,0xffffffff
c000a72f:	c3                   	ret    

c000a730 <LogicalDisk::~LogicalDisk()>:
c000a730:	83 ec 0c             	sub    esp,0xc
c000a733:	ba 98 37 02 c0       	mov    edx,0xc0023798
c000a738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73c:	89 10                	mov    DWORD PTR [eax],edx
c000a73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	50                   	push   eax
c000a746:	e8 ad f1 ff ff       	call   c00098f8 <Device::~Device()>
c000a74b:	83 c4 10             	add    esp,0x10
c000a74e:	90                   	nop
c000a74f:	83 c4 0c             	add    esp,0xc
c000a752:	c3                   	ret    
c000a753:	90                   	nop

c000a754 <LogicalDisk::~LogicalDisk()>:
c000a754:	83 ec 0c             	sub    esp,0xc
c000a757:	83 ec 0c             	sub    esp,0xc
c000a75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a75e:	e8 cd ff ff ff       	call   c000a730 <LogicalDisk::~LogicalDisk()>
c000a763:	83 c4 10             	add    esp,0x10
c000a766:	83 ec 08             	sub    esp,0x8
c000a769:	68 78 01 00 00       	push   0x178
c000a76e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a772:	e8 45 2b 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000a777:	83 c4 10             	add    esp,0x10
c000a77a:	83 c4 0c             	add    esp,0xc
c000a77d:	c3                   	ret    

c000a77e <LogicalDisk::open(int, int, void*)>:
c000a77e:	83 ec 18             	sub    esp,0x18
c000a781:	68 4c 37 02 c0       	push   0xc002374c
c000a786:	e8 59 54 00 00       	call   c000fbe4 <KePanic(char const*)>
c000a78b:	83 c8 ff             	or     eax,0xffffffff
c000a78e:	83 c4 1c             	add    esp,0x1c
c000a791:	c3                   	ret    

c000a792 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a792:	53                   	push   ebx
c000a793:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a797:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a79b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a79f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a7a5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a7ab:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a7b1:	77 10                	ja     c000a7c3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a7b3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a7b9:	89 d3                	mov    ebx,edx
c000a7bb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a7c1:	72 05                	jb     c000a7c8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a7c3:	83 c8 ff             	or     eax,0xffffffff
c000a7c6:	89 c2                	mov    edx,eax
c000a7c8:	5b                   	pop    ebx
c000a7c9:	c3                   	ret    

c000a7ca <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a7ca:	56                   	push   esi
c000a7cb:	83 c8 ff             	or     eax,0xffffffff
c000a7ce:	53                   	push   ebx
c000a7cf:	89 c2                	mov    edx,eax
c000a7d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a7d5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a7d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7dd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a7e3:	77 27                	ja     c000a80c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7e5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a7eb:	89 d8                	mov    eax,ebx
c000a7ed:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a7f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a7f8:	89 c2                	mov    edx,eax
c000a7fa:	73 10                	jae    c000a80c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7fc:	89 c8                	mov    eax,ecx
c000a7fe:	89 da                	mov    edx,ebx
c000a800:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a806:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a80c:	5b                   	pop    ebx
c000a80d:	5e                   	pop    esi
c000a80e:	c3                   	ret    
c000a80f:	90                   	nop

c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a810:	83 ec 1c             	sub    esp,0x1c
c000a813:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a817:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a81b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a81f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a823:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a827:	89 04 24             	mov    DWORD PTR [esp],eax
c000a82a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a82e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a836:	83 ec 08             	sub    esp,0x8
c000a839:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a83d:	50                   	push   eax
c000a83e:	e8 15 f3 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	ba 98 37 02 c0       	mov    edx,0xc0023798
c000a84b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a84f:	89 10                	mov    DWORD PTR [eax],edx
c000a851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a855:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a85c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a860:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a86b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a876:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a880:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a888:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a88c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a892:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a898:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a89c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a89f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a3:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a8a9:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a8b7:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a8bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c1:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a8cb:	90                   	nop
c000a8cc:	83 c4 1c             	add    esp,0x1c
c000a8cf:	c3                   	ret    

c000a8d0 <LogicalDisk::assignDriveLetter()>:
c000a8d0:	55                   	push   ebp
c000a8d1:	57                   	push   edi
c000a8d2:	56                   	push   esi
c000a8d3:	53                   	push   ebx
c000a8d4:	83 ec 14             	sub    esp,0x14
c000a8d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a8db:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a8e1:	b0 41                	mov    al,0x41
c000a8e3:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a8e9:	84 d2                	test   dl,dl
c000a8eb:	75 02                	jne    c000a8ef <LogicalDisk::assignDriveLetter()+0x1f>
c000a8ed:	b0 43                	mov    al,0x43
c000a8ef:	8b 3d c0 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac0
c000a8f5:	0f b6 ca             	movzx  ecx,dl
c000a8f8:	0f be e8             	movsx  ebp,al
c000a8fb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a8ff:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a903:	8b 3d c4 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac4
c000a909:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a90d:	3c 43                	cmp    al,0x43
c000a90f:	75 10                	jne    c000a921 <LogicalDisk::assignDriveLetter()+0x51>
c000a911:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a918:	75 5a                	jne    c000a974 <LogicalDisk::assignDriveLetter()+0xa4>
c000a91a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a91f:	75 53                	jne    c000a974 <LogicalDisk::assignDriveLetter()+0xa4>
c000a921:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a924:	ba 01 00 00 00       	mov    edx,0x1
c000a929:	89 34 24             	mov    DWORD PTR [esp],esi
c000a92c:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a92f:	d3 e2                	shl    edx,cl
c000a931:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a935:	89 d7                	mov    edi,edx
c000a937:	89 d6                	mov    esi,edx
c000a939:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a93d:	c1 ff 1f             	sar    edi,0x1f
c000a940:	21 f9                	and    ecx,edi
c000a942:	09 d1                	or     ecx,edx
c000a944:	75 2e                	jne    c000a974 <LogicalDisk::assignDriveLetter()+0xa4>
c000a946:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a94a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a94e:	09 f2                	or     edx,esi
c000a950:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a953:	89 15 c0 ba 02 c0    	mov    DWORD PTR ds:0xc002bac0,edx
c000a959:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a95d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a963:	89 1c b5 e0 ba 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4520],ebx
c000a96a:	09 fa                	or     edx,edi
c000a96c:	89 15 c4 ba 02 c0    	mov    DWORD PTR ds:0xc002bac4,edx
c000a972:	eb 0d                	jmp    c000a981 <LogicalDisk::assignDriveLetter()+0xb1>
c000a974:	8d 50 01             	lea    edx,[eax+0x1]
c000a977:	45                   	inc    ebp
c000a978:	80 fa 5b             	cmp    dl,0x5b
c000a97b:	88 d0                	mov    al,dl
c000a97d:	75 8e                	jne    c000a90d <LogicalDisk::assignDriveLetter()+0x3d>
c000a97f:	31 c0                	xor    eax,eax
c000a981:	83 c4 14             	add    esp,0x14
c000a984:	5b                   	pop    ebx
c000a985:	5e                   	pop    esi
c000a986:	5f                   	pop    edi
c000a987:	5d                   	pop    ebp
c000a988:	c3                   	ret    
c000a989:	90                   	nop

c000a98a <LogicalDisk::mount()>:
c000a98a:	56                   	push   esi
c000a98b:	53                   	push   ebx
c000a98c:	53                   	push   ebx
c000a98d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a991:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c000a997:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9a1:	85 db                	test   ebx,ebx
c000a9a3:	74 27                	je     c000a9cc <LogicalDisk::mount()+0x42>
c000a9a5:	51                   	push   ecx
c000a9a6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a9ad:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a9af:	83 e8 41             	sub    eax,0x41
c000a9b2:	50                   	push   eax
c000a9b3:	56                   	push   esi
c000a9b4:	53                   	push   ebx
c000a9b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a9b8:	83 c4 10             	add    esp,0x10
c000a9bb:	84 c0                	test   al,al
c000a9bd:	74 08                	je     c000a9c7 <LogicalDisk::mount()+0x3d>
c000a9bf:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a9c5:	eb 07                	jmp    c000a9ce <LogicalDisk::mount()+0x44>
c000a9c7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a9ca:	eb d5                	jmp    c000a9a1 <LogicalDisk::mount()+0x17>
c000a9cc:	31 c0                	xor    eax,eax
c000a9ce:	5a                   	pop    edx
c000a9cf:	5b                   	pop    ebx
c000a9d0:	5e                   	pop    esi
c000a9d1:	c3                   	ret    

c000a9d2 <LogicalDisk::unmount()>:
c000a9d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9d6:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a9e0:	c3                   	ret    
c000a9e1:	90                   	nop

c000a9e2 <LogicalDisk::eject()>:
c000a9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9e6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a9ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a9f5:	90                   	nop

c000a9f6 <LogicalDisk::unassignDriveLetter()>:
c000a9f6:	57                   	push   edi
c000a9f7:	56                   	push   esi
c000a9f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a9fc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa03:	85 c9                	test   ecx,ecx
c000aa05:	75 0f                	jne    c000aa16 <LogicalDisk::unassignDriveLetter()+0x20>
c000aa07:	c7 44 24 0c 70 37 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023770
c000aa0f:	5e                   	pop    esi
c000aa10:	5f                   	pop    edi
c000aa11:	e9 ce 51 00 00       	jmp    c000fbe4 <KePanic(char const*)>
c000aa16:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa1d:	83 e9 41             	sub    ecx,0x41
c000aa20:	b8 01 00 00 00       	mov    eax,0x1
c000aa25:	c7 04 8d e0 ba 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4520],0x0
c000aa30:	d3 e0                	shl    eax,cl
c000aa32:	89 c7                	mov    edi,eax
c000aa34:	f7 d0                	not    eax
c000aa36:	c1 ff 1f             	sar    edi,0x1f
c000aa39:	21 05 c0 ba 02 c0    	and    DWORD PTR ds:0xc002bac0,eax
c000aa3f:	89 fe                	mov    esi,edi
c000aa41:	f7 d6                	not    esi
c000aa43:	21 35 c4 ba 02 c0    	and    DWORD PTR ds:0xc002bac4,esi
c000aa49:	5e                   	pop    esi
c000aa4a:	5f                   	pop    edi
c000aa4b:	c3                   	ret    

c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa4c:	57                   	push   edi
c000aa4d:	56                   	push   esi
c000aa4e:	53                   	push   ebx
c000aa4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa57:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa5f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa65:	77 41                	ja     c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa67:	99                   	cdq    
c000aa68:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa6e:	01 c8                	add    eax,ecx
c000aa70:	11 da                	adc    edx,ebx
c000aa72:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa78:	19 d7                	sbb    edi,edx
c000aa7a:	72 33                	jb     c000aaaf <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa7c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa82:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa88:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa8c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa90:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa96:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aa9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaa0:	5b                   	pop    ebx
c000aaa1:	5e                   	pop    esi
c000aaa2:	5f                   	pop    edi
c000aaa3:	e9 a2 0b 00 00       	jmp    c000b64a <VCache::read(unsigned long long, int, void*)>
c000aaa8:	b8 05 00 00 00       	mov    eax,0x5
c000aaad:	eb 05                	jmp    c000aab4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aaaf:	b8 07 00 00 00       	mov    eax,0x7
c000aab4:	5b                   	pop    ebx
c000aab5:	5e                   	pop    esi
c000aab6:	5f                   	pop    edi
c000aab7:	c3                   	ret    

c000aab8 <LogicalDisk::write(unsigned long long, int, void*)>:
c000aab8:	57                   	push   edi
c000aab9:	56                   	push   esi
c000aaba:	53                   	push   ebx
c000aabb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aabf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aac3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aacb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aad1:	77 41                	ja     c000ab14 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aad3:	99                   	cdq    
c000aad4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aada:	01 c8                	add    eax,ecx
c000aadc:	11 da                	adc    edx,ebx
c000aade:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aae4:	19 d7                	sbb    edi,edx
c000aae6:	72 33                	jb     c000ab1b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aae8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aaee:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aaf4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aaf8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aafc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab02:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab0c:	5b                   	pop    ebx
c000ab0d:	5e                   	pop    esi
c000ab0e:	5f                   	pop    edi
c000ab0f:	e9 68 09 00 00       	jmp    c000b47c <VCache::write(unsigned long long, int, void*)>
c000ab14:	b8 05 00 00 00       	mov    eax,0x5
c000ab19:	eb 05                	jmp    c000ab20 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab1b:	b8 07 00 00 00       	mov    eax,0x7
c000ab20:	5b                   	pop    ebx
c000ab21:	5e                   	pop    esi
c000ab22:	5f                   	pop    edi
c000ab23:	c3                   	ret    

c000ab24 <Mouse::Mouse(char const*)>:
c000ab24:	83 ec 0c             	sub    esp,0xc
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	83 ec 08             	sub    esp,0x8
c000ab2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab32:	50                   	push   eax
c000ab33:	e8 20 f0 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000ab38:	83 c4 10             	add    esp,0x10
c000ab3b:	ba c4 37 02 c0       	mov    edx,0xc00237c4
c000ab40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab44:	89 10                	mov    DWORD PTR [eax],edx
c000ab46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab54:	90                   	nop
c000ab55:	83 c4 0c             	add    esp,0xc
c000ab58:	c3                   	ret    
c000ab59:	90                   	nop
c000ab5a:	66 90                	xchg   ax,ax

c000ab5c <Mouse::~Mouse()>:
c000ab5c:	83 ec 0c             	sub    esp,0xc
c000ab5f:	ba c4 37 02 c0       	mov    edx,0xc00237c4
c000ab64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab68:	89 10                	mov    DWORD PTR [eax],edx
c000ab6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6e:	83 ec 0c             	sub    esp,0xc
c000ab71:	50                   	push   eax
c000ab72:	e8 81 ed ff ff       	call   c00098f8 <Device::~Device()>
c000ab77:	83 c4 10             	add    esp,0x10
c000ab7a:	90                   	nop
c000ab7b:	83 c4 0c             	add    esp,0xc
c000ab7e:	c3                   	ret    
c000ab7f:	90                   	nop

c000ab80 <Mouse::~Mouse()>:
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	83 ec 0c             	sub    esp,0xc
c000ab86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8a:	e8 cd ff ff ff       	call   c000ab5c <Mouse::~Mouse()>
c000ab8f:	83 c4 10             	add    esp,0x10
c000ab92:	83 ec 08             	sub    esp,0x8
c000ab95:	68 58 01 00 00       	push   0x158
c000ab9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab9e:	e8 19 27 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000aba3:	83 c4 10             	add    esp,0x10
c000aba6:	83 c4 0c             	add    esp,0xc
c000aba9:	c3                   	ret    

c000abaa <NIC::getMAC()>:
c000abaa:	31 c0                	xor    eax,eax
c000abac:	31 d2                	xor    edx,edx
c000abae:	c3                   	ret    
c000abaf:	90                   	nop

c000abb0 <NIC::write(int, unsigned char*, int*)>:
c000abb0:	b8 01 00 00 00       	mov    eax,0x1
c000abb5:	c3                   	ret    

c000abb6 <NIC::NIC(char const*)>:
c000abb6:	83 ec 0c             	sub    esp,0xc
c000abb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abbd:	83 ec 08             	sub    esp,0x8
c000abc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc4:	50                   	push   eax
c000abc5:	e8 8e ef ff ff       	call   c0009b58 <Device::Device(char const*)>
c000abca:	83 c4 10             	add    esp,0x10
c000abcd:	ba f0 37 02 c0       	mov    edx,0xc00237f0
c000abd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd6:	89 10                	mov    DWORD PTR [eax],edx
c000abd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abdc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000abe6:	90                   	nop
c000abe7:	83 c4 0c             	add    esp,0xc
c000abea:	c3                   	ret    
c000abeb:	90                   	nop

c000abec <NIC::~NIC()>:
c000abec:	83 ec 0c             	sub    esp,0xc
c000abef:	ba f0 37 02 c0       	mov    edx,0xc00237f0
c000abf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abf8:	89 10                	mov    DWORD PTR [eax],edx
c000abfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abfe:	83 ec 0c             	sub    esp,0xc
c000ac01:	50                   	push   eax
c000ac02:	e8 f1 ec ff ff       	call   c00098f8 <Device::~Device()>
c000ac07:	83 c4 10             	add    esp,0x10
c000ac0a:	90                   	nop
c000ac0b:	83 c4 0c             	add    esp,0xc
c000ac0e:	c3                   	ret    
c000ac0f:	90                   	nop

c000ac10 <NIC::~NIC()>:
c000ac10:	83 ec 0c             	sub    esp,0xc
c000ac13:	83 ec 0c             	sub    esp,0xc
c000ac16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac1a:	e8 cd ff ff ff       	call   c000abec <NIC::~NIC()>
c000ac1f:	83 c4 10             	add    esp,0x10
c000ac22:	83 ec 08             	sub    esp,0x8
c000ac25:	68 58 01 00 00       	push   0x158
c000ac2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2e:	e8 89 26 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000ac33:	83 c4 10             	add    esp,0x10
c000ac36:	83 c4 0c             	add    esp,0xc
c000ac39:	c3                   	ret    

c000ac3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac3a:	55                   	push   ebp
c000ac3b:	57                   	push   edi
c000ac3c:	56                   	push   esi
c000ac3d:	53                   	push   ebx
c000ac3e:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac44:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000ac4b:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000ac52:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000ac59:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000ac60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac64:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac68:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac6f:	e8 e0 ef ff ff       	call   c0009c54 <Device::getName()>
c000ac74:	5a                   	pop    edx
c000ac75:	59                   	pop    ecx
c000ac76:	50                   	push   eax
c000ac77:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac7b:	55                   	push   ebp
c000ac7c:	e8 cf 59 ff ff       	call   c0000650 <strcpy>
c000ac81:	5b                   	pop    ebx
c000ac82:	58                   	pop    eax
c000ac83:	68 1c 38 02 c0       	push   0xc002381c
c000ac88:	55                   	push   ebp
c000ac89:	e8 e2 5b ff ff       	call   c0000870 <strcat>
c000ac8e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac95:	e8 ee 4a 00 00       	call   c000f788 <malloc>
c000ac9a:	83 c4 0c             	add    esp,0xc
c000ac9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000aca1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000aca5:	89 c3                	mov    ebx,eax
c000aca7:	57                   	push   edi
c000aca8:	56                   	push   esi
c000aca9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000acb0:	55                   	push   ebp
c000acb1:	50                   	push   eax
c000acb2:	e8 59 fb ff ff       	call   c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000acb7:	83 c4 14             	add    esp,0x14
c000acba:	53                   	push   ebx
c000acbb:	e8 10 fc ff ff       	call   c000a8d0 <LogicalDisk::assignDriveLetter()>
c000acc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000acc3:	e8 c2 fc ff ff       	call   c000a98a <LogicalDisk::mount()>
c000acc8:	58                   	pop    eax
c000acc9:	5a                   	pop    edx
c000acca:	53                   	push   ebx
c000accb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000acd2:	e8 1f ed ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000acd7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000acdd:	5b                   	pop    ebx
c000acde:	5e                   	pop    esi
c000acdf:	5f                   	pop    edi
c000ace0:	5d                   	pop    ebp
c000ace1:	c3                   	ret    

c000ace2 <createPartitionsForDisk(PhysicalDisk*)>:
c000ace2:	55                   	push   ebp
c000ace3:	57                   	push   edi
c000ace4:	56                   	push   esi
c000ace5:	53                   	push   ebx
c000ace6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000acec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000acf3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000acf9:	3d 00 02 00 00       	cmp    eax,0x200
c000acfe:	74 27                	je     c000ad27 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad00:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad06:	83 ec 10             	sub    esp,0x10
c000ad09:	99                   	cdq    
c000ad0a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad10:	52                   	push   edx
c000ad11:	50                   	push   eax
c000ad12:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad16:	c1 e6 0a             	shl    esi,0xa
c000ad19:	89 fd                	mov    ebp,edi
c000ad1b:	55                   	push   ebp
c000ad1c:	56                   	push   esi
c000ad1d:	e8 52 6c 01 00       	call   c0021974 <__udivdi3>
c000ad22:	e9 b9 00 00 00       	jmp    c000ade0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad27:	83 ec 0c             	sub    esp,0xc
c000ad2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad2c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad30:	56                   	push   esi
c000ad31:	6a 01                	push   0x1
c000ad33:	6a 00                	push   0x0
c000ad35:	6a 00                	push   0x0
c000ad37:	53                   	push   ebx
c000ad38:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad3b:	83 c4 20             	add    esp,0x20
c000ad3e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad46:	75 0a                	jne    c000ad52 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad48:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad50:	74 2c                	je     c000ad7e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad52:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad58:	83 ec 10             	sub    esp,0x10
c000ad5b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad61:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad67:	89 f7                	mov    edi,esi
c000ad69:	c1 ff 1f             	sar    edi,0x1f
c000ad6c:	57                   	push   edi
c000ad6d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad71:	56                   	push   esi
c000ad72:	c1 e0 0a             	shl    eax,0xa
c000ad75:	52                   	push   edx
c000ad76:	50                   	push   eax
c000ad77:	e8 f8 6b 01 00       	call   c0021974 <__udivdi3>
c000ad7c:	eb 62                	jmp    c000ade0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad7e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad85:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad8c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad93:	89 cf                	mov    edi,ecx
c000ad95:	83 e2 7f             	and    edx,0x7f
c000ad98:	83 e7 7f             	and    edi,0x7f
c000ad9b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ad9e:	83 e0 7f             	and    eax,0x7f
c000ada1:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ada4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000adab:	83 e0 7f             	and    eax,0x7f
c000adae:	01 d0                	add    eax,edx
c000adb0:	84 c0                	test   al,al
c000adb2:	89 c5                	mov    ebp,eax
c000adb4:	74 41                	je     c000adf7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000adb6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adbc:	83 ec 10             	sub    esp,0x10
c000adbf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adc5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adcb:	89 f7                	mov    edi,esi
c000adcd:	c1 ff 1f             	sar    edi,0x1f
c000add0:	57                   	push   edi
c000add1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000add5:	56                   	push   esi
c000add6:	c1 e0 0a             	shl    eax,0xa
c000add9:	52                   	push   edx
c000adda:	50                   	push   eax
c000addb:	e8 94 6b 01 00       	call   c0021974 <__udivdi3>
c000ade0:	83 c4 14             	add    esp,0x14
c000ade3:	52                   	push   edx
c000ade4:	50                   	push   eax
c000ade5:	6a 00                	push   0x0
c000ade7:	6a 00                	push   0x0
c000ade9:	53                   	push   ebx
c000adea:	e8 4b fe ff ff       	call   c000ac3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000adef:	83 c4 20             	add    esp,0x20
c000adf2:	e9 73 01 00 00       	jmp    c000af6a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000adf7:	89 f0                	mov    eax,esi
c000adf9:	31 c9                	xor    ecx,ecx
c000adfb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae02:	75 02                	jne    c000ae06 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae04:	89 cd                	mov    ebp,ecx
c000ae06:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae0e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae15:	83 c0 10             	add    eax,0x10
c000ae18:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae20:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000ae27:	c1 e2 08             	shl    edx,0x8
c000ae2a:	c1 e6 10             	shl    esi,0x10
c000ae2d:	09 f2                	or     edx,esi
c000ae2f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000ae36:	09 f2                	or     edx,esi
c000ae38:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae3f:	c1 e6 18             	shl    esi,0x18
c000ae42:	09 f2                	or     edx,esi
c000ae44:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae4b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae4f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae56:	c1 e6 10             	shl    esi,0x10
c000ae59:	c1 e2 08             	shl    edx,0x8
c000ae5c:	09 f2                	or     edx,esi
c000ae5e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae65:	09 f2                	or     edx,esi
c000ae67:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae6e:	c1 e6 18             	shl    esi,0x18
c000ae71:	09 f2                	or     edx,esi
c000ae73:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae77:	41                   	inc    ecx
c000ae78:	83 f9 04             	cmp    ecx,0x4
c000ae7b:	0f 85 7a ff ff ff    	jne    c000adfb <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae85:	83 f0 01             	xor    eax,0x1
c000ae88:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae8c:	75 4f                	jne    c000aedd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae92:	83 f0 01             	xor    eax,0x1
c000ae95:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae99:	75 42                	jne    c000aedd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae9b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000aea1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aea9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000aeaf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000aeb7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000aebd:	89 f7                	mov    edi,esi
c000aebf:	c1 ff 1f             	sar    edi,0x1f
c000aec2:	57                   	push   edi
c000aec3:	56                   	push   esi
c000aec4:	0f a4 c2 0a          	shld   edx,eax,0xa
c000aec8:	52                   	push   edx
c000aec9:	c1 e0 0a             	shl    eax,0xa
c000aecc:	50                   	push   eax
c000aecd:	e8 a2 6a 01 00       	call   c0021974 <__udivdi3>
c000aed2:	83 c4 10             	add    esp,0x10
c000aed5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aed9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000aedd:	89 e8                	mov    eax,ebp
c000aedf:	0f b6 e8             	movzx  ebp,al
c000aee2:	85 ed                	test   ebp,ebp
c000aee4:	74 50                	je     c000af36 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000aee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000aeee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aef2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000aef6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aefa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000aefe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af02:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af16:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af1a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af1e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af22:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af26:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af2a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af2e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af32:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af36:	31 ed                	xor    ebp,ebp
c000af38:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af3c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af40:	89 f8                	mov    eax,edi
c000af42:	09 f0                	or     eax,esi
c000af44:	74 1e                	je     c000af64 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af46:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af4a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af4e:	89 d1                	mov    ecx,edx
c000af50:	09 c1                	or     ecx,eax
c000af52:	74 10                	je     c000af64 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af54:	83 ec 0c             	sub    esp,0xc
c000af57:	57                   	push   edi
c000af58:	56                   	push   esi
c000af59:	52                   	push   edx
c000af5a:	50                   	push   eax
c000af5b:	53                   	push   ebx
c000af5c:	e8 d9 fc ff ff       	call   c000ac3a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af61:	83 c4 20             	add    esp,0x20
c000af64:	45                   	inc    ebp
c000af65:	83 fd 04             	cmp    ebp,0x4
c000af68:	75 ce                	jne    c000af38 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af6a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af70:	5b                   	pop    ebx
c000af71:	5e                   	pop    esi
c000af72:	5f                   	pop    edi
c000af73:	5d                   	pop    ebp
c000af74:	c3                   	ret    
c000af75:	66 90                	xchg   ax,ax
c000af77:	90                   	nop

c000af78 <Serial::Serial(char const*)>:
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7f:	83 ec 08             	sub    esp,0x8
c000af82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af86:	50                   	push   eax
c000af87:	e8 cc eb ff ff       	call   c0009b58 <Device::Device(char const*)>
c000af8c:	83 c4 10             	add    esp,0x10
c000af8f:	ba 30 38 02 c0       	mov    edx,0xc0023830
c000af94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af98:	89 10                	mov    DWORD PTR [eax],edx
c000af9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000afa8:	90                   	nop
c000afa9:	83 c4 0c             	add    esp,0xc
c000afac:	c3                   	ret    
c000afad:	90                   	nop
c000afae:	66 90                	xchg   ax,ax

c000afb0 <Serial::~Serial()>:
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	ba 30 38 02 c0       	mov    edx,0xc0023830
c000afb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afbc:	89 10                	mov    DWORD PTR [eax],edx
c000afbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc2:	83 ec 0c             	sub    esp,0xc
c000afc5:	50                   	push   eax
c000afc6:	e8 2d e9 ff ff       	call   c00098f8 <Device::~Device()>
c000afcb:	83 c4 10             	add    esp,0x10
c000afce:	90                   	nop
c000afcf:	83 c4 0c             	add    esp,0xc
c000afd2:	c3                   	ret    
c000afd3:	90                   	nop

c000afd4 <Serial::~Serial()>:
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	83 ec 0c             	sub    esp,0xc
c000afda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afde:	e8 cd ff ff ff       	call   c000afb0 <Serial::~Serial()>
c000afe3:	83 c4 10             	add    esp,0x10
c000afe6:	83 ec 08             	sub    esp,0x8
c000afe9:	68 58 01 00 00       	push   0x158
c000afee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aff2:	e8 c5 22 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000aff7:	83 c4 10             	add    esp,0x10
c000affa:	83 c4 0c             	add    esp,0xc
c000affd:	c3                   	ret    
c000affe:	66 90                	xchg   ax,ax

c000b000 <Timer::Timer(char const*)>:
c000b000:	83 ec 0c             	sub    esp,0xc
c000b003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b007:	83 ec 08             	sub    esp,0x8
c000b00a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b00e:	50                   	push   eax
c000b00f:	e8 44 eb ff ff       	call   c0009b58 <Device::Device(char const*)>
c000b014:	83 c4 10             	add    esp,0x10
c000b017:	ba 10 39 02 c0       	mov    edx,0xc0023910
c000b01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b020:	89 10                	mov    DWORD PTR [eax],edx
c000b022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b026:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b030:	90                   	nop
c000b031:	83 c4 0c             	add    esp,0xc
c000b034:	c3                   	ret    
c000b035:	90                   	nop
c000b036:	66 90                	xchg   ax,ax

c000b038 <Timer::~Timer()>:
c000b038:	83 ec 0c             	sub    esp,0xc
c000b03b:	ba 10 39 02 c0       	mov    edx,0xc0023910
c000b040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b044:	89 10                	mov    DWORD PTR [eax],edx
c000b046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04a:	83 ec 0c             	sub    esp,0xc
c000b04d:	50                   	push   eax
c000b04e:	e8 a5 e8 ff ff       	call   c00098f8 <Device::~Device()>
c000b053:	83 c4 10             	add    esp,0x10
c000b056:	90                   	nop
c000b057:	83 c4 0c             	add    esp,0xc
c000b05a:	c3                   	ret    
c000b05b:	90                   	nop

c000b05c <Timer::~Timer()>:
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	83 ec 0c             	sub    esp,0xc
c000b062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b066:	e8 cd ff ff ff       	call   c000b038 <Timer::~Timer()>
c000b06b:	83 c4 10             	add    esp,0x10
c000b06e:	83 ec 08             	sub    esp,0x8
c000b071:	68 5c 01 00 00       	push   0x15c
c000b076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b07a:	e8 3d 22 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000b07f:	83 c4 10             	add    esp,0x10
c000b082:	83 c4 0c             	add    esp,0xc
c000b085:	c3                   	ret    

c000b086 <Timer::read()>:
c000b086:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b090:	c3                   	ret    

c000b091 <setupTimer(int)>:
c000b091:	53                   	push   ebx
c000b092:	83 ec 14             	sub    esp,0x14
c000b095:	68 5c 01 00 00       	push   0x15c
c000b09a:	e8 e9 46 00 00       	call   c000f788 <malloc>
c000b09f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0a2:	89 c3                	mov    ebx,eax
c000b0a4:	e8 7f 61 01 00       	call   c0021228 <PIT::PIT()>
c000b0a9:	58                   	pop    eax
c000b0aa:	5a                   	pop    edx
c000b0ab:	53                   	push   ebx
c000b0ac:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c000b0b2:	e8 3f e9 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000b0b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b9:	6a 00                	push   0x0
c000b0bb:	6a 00                	push   0x0
c000b0bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b0c1:	53                   	push   ebx
c000b0c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0c5:	83 c4 28             	add    esp,0x28
c000b0c8:	89 d8                	mov    eax,ebx
c000b0ca:	5b                   	pop    ebx
c000b0cb:	c3                   	ret    

c000b0cc <timerHandler(unsigned int)>:
c000b0cc:	57                   	push   edi
c000b0cd:	31 d2                	xor    edx,edx
c000b0cf:	56                   	push   esi
c000b0d0:	53                   	push   ebx
c000b0d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0d5:	01 1d 50 bb 02 c0    	add    DWORD PTR ds:0xc002bb50,ebx
c000b0db:	11 15 54 bb 02 c0    	adc    DWORD PTR ds:0xc002bb54,edx
c000b0e1:	80 3d 0d c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c10d,0x0
c000b0e8:	75 12                	jne    c000b0fc <timerHandler(unsigned int)+0x30>
c000b0ea:	c7 44 24 10 bf 38 02 c0 	mov    DWORD PTR [esp+0x10],0xc00238bf
c000b0f2:	5b                   	pop    ebx
c000b0f3:	5e                   	pop    esi
c000b0f4:	5f                   	pop    edi
c000b0f5:	e9 6c be ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000b0fa:	66 90                	xchg   ax,ax
c000b0fc:	fa                   	cli    
c000b0fd:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c000b103:	83 ec 0c             	sub    esp,0xc
c000b106:	68 80 ca 02 c0       	push   0xc002ca80
c000b10b:	e8 fc 6b 01 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	84 c0                	test   al,al
c000b115:	0f 85 a9 00 00 00    	jne    c000b1c4 <timerHandler(unsigned int)+0xf8>
c000b11b:	83 ec 0c             	sub    esp,0xc
c000b11e:	68 80 ca 02 c0       	push   0xc002ca80
c000b123:	e8 00 6c 01 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b128:	83 c4 10             	add    esp,0x10
c000b12b:	89 c6                	mov    esi,eax
c000b12d:	8d 76 00             	lea    esi,[esi+0x0]
c000b130:	83 ec 0c             	sub    esp,0xc
c000b133:	68 80 ca 02 c0       	push   0xc002ca80
c000b138:	e8 eb 6b 01 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b13d:	c7 04 24 80 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca80
c000b144:	89 c7                	mov    edi,eax
c000b146:	e8 e5 6b 01 00       	call   c0021d30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b14b:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b14e:	83 c4 10             	add    esp,0x10
c000b151:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b154:	a1 54 bb 02 c0       	mov    eax,ds:0xc002bb54
c000b159:	39 15 50 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb50,edx
c000b15f:	19 c8                	sbb    eax,ecx
c000b161:	72 21                	jb     c000b184 <timerHandler(unsigned int)+0xb8>
c000b163:	83 ec 0c             	sub    esp,0xc
c000b166:	57                   	push   edi
c000b167:	e8 10 bf 00 00       	call   c001707c <unblockTask(ThreadControlBlock*)>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	39 fe                	cmp    esi,edi
c000b171:	75 25                	jne    c000b198 <timerHandler(unsigned int)+0xcc>
c000b173:	83 ec 0c             	sub    esp,0xc
c000b176:	68 80 ca 02 c0       	push   0xc002ca80
c000b17b:	e8 a8 6b 01 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b180:	89 c6                	mov    esi,eax
c000b182:	eb 10                	jmp    c000b194 <timerHandler(unsigned int)+0xc8>
c000b184:	51                   	push   ecx
c000b185:	51                   	push   ecx
c000b186:	57                   	push   edi
c000b187:	68 80 ca 02 c0       	push   0xc002ca80
c000b18c:	e8 5b 6c 01 00       	call   c0021dec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b191:	8d 76 00             	lea    esi,[esi+0x0]
c000b194:	83 c4 10             	add    esp,0x10
c000b197:	90                   	nop
c000b198:	83 ec 0c             	sub    esp,0xc
c000b19b:	68 80 ca 02 c0       	push   0xc002ca80
c000b1a0:	e8 67 6b 01 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	84 c0                	test   al,al
c000b1aa:	75 18                	jne    c000b1c4 <timerHandler(unsigned int)+0xf8>
c000b1ac:	83 ec 0c             	sub    esp,0xc
c000b1af:	68 80 ca 02 c0       	push   0xc002ca80
c000b1b4:	e8 6f 6b 01 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	39 f0                	cmp    eax,esi
c000b1be:	0f 85 6c ff ff ff    	jne    c000b130 <timerHandler(unsigned int)+0x64>
c000b1c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b1cc:	85 c0                	test   eax,eax
c000b1ce:	74 48                	je     c000b218 <timerHandler(unsigned int)+0x14c>
c000b1d0:	80 3d 0c c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c10c,0x0
c000b1d7:	74 3f                	je     c000b218 <timerHandler(unsigned int)+0x14c>
c000b1d9:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b1de:	76 1c                	jbe    c000b1fc <timerHandler(unsigned int)+0x130>
c000b1e0:	52                   	push   edx
c000b1e1:	52                   	push   edx
c000b1e2:	50                   	push   eax
c000b1e3:	68 d5 38 02 c0       	push   0xc00238d5
c000b1e8:	e8 79 bd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b1ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1f2:	83 c4 10             	add    esp,0x10
c000b1f5:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b1fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b202:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b205:	89 c1                	mov    ecx,eax
c000b207:	29 d9                	sub    ecx,ebx
c000b209:	39 d8                	cmp    eax,ebx
c000b20b:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b20e:	77 08                	ja     c000b218 <timerHandler(unsigned int)+0x14c>
c000b210:	e8 0f bb 00 00       	call   c0016d24 <schedule()>
c000b215:	8d 76 00             	lea    esi,[esi+0x0]
c000b218:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000b21f:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000b226:	75 04                	jne    c000b22c <timerHandler(unsigned int)+0x160>
c000b228:	fb                   	sti    
c000b229:	8d 76 00             	lea    esi,[esi+0x0]
c000b22c:	5b                   	pop    ebx
c000b22d:	5e                   	pop    esi
c000b22e:	5f                   	pop    edi
c000b22f:	c3                   	ret    

c000b230 <VCache::VCache(PhysicalDisk*)>:
c000b230:	53                   	push   ebx
c000b231:	83 ec 18             	sub    esp,0x18
c000b234:	ba 80 39 02 c0       	mov    edx,0xc0023980
c000b239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b23d:	89 10                	mov    DWORD PTR [eax],edx
c000b23f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b243:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b24a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b24e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b255:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b259:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b260:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b267:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b26b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b272:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b27d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b288:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b28c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b290:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b297:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b29e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2aa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b2ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b2b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ba:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b2c1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b2c9:	83 ec 0c             	sub    esp,0xc
c000b2cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2d0:	e8 b3 44 00 00       	call   c000f788 <malloc>
c000b2d5:	83 c4 10             	add    esp,0x10
c000b2d8:	89 c3                	mov    ebx,eax
c000b2da:	83 ec 0c             	sub    esp,0xc
c000b2dd:	53                   	push   ebx
c000b2de:	e8 e1 48 00 00       	call   c000fbc4 <Mutex::Mutex()>
c000b2e3:	83 c4 10             	add    esp,0x10
c000b2e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b2f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b2f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b303:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b307:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b30d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b311:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b314:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b318:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b31e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b324:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b328:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b32b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b32e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b332:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b336:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b33a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b340:	05 00 01 00 00       	add    eax,0x100
c000b345:	c1 e0 04             	shl    eax,0x4
c000b348:	83 ec 0c             	sub    esp,0xc
c000b34b:	50                   	push   eax
c000b34c:	e8 37 44 00 00       	call   c000f788 <malloc>
c000b351:	83 c4 10             	add    esp,0x10
c000b354:	89 c2                	mov    edx,eax
c000b356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b35a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b35d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b361:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b36c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b374:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b37a:	89 d0                	mov    eax,edx
c000b37c:	c1 e0 02             	shl    eax,0x2
c000b37f:	01 d0                	add    eax,edx
c000b381:	c1 e0 04             	shl    eax,0x4
c000b384:	83 ec 0c             	sub    esp,0xc
c000b387:	50                   	push   eax
c000b388:	e8 fb 43 00 00       	call   c000f788 <malloc>
c000b38d:	83 c4 10             	add    esp,0x10
c000b390:	89 c2                	mov    edx,eax
c000b392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b396:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b399:	90                   	nop
c000b39a:	83 c4 18             	add    esp,0x18
c000b39d:	5b                   	pop    ebx
c000b39e:	c3                   	ret    
c000b39f:	90                   	nop

c000b3a0 <VCache::invalidateReadBuffer()>:
c000b3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b3aa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b3ae:	c3                   	ret    
c000b3af:	90                   	nop

c000b3b0 <VCache::writeWriteBuffer()>:
c000b3b0:	53                   	push   ebx
c000b3b1:	83 ec 08             	sub    esp,0x8
c000b3b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b3b8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b3bc:	74 1e                	je     c000b3dc <VCache::writeWriteBuffer()+0x2c>
c000b3be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b3c1:	83 ec 0c             	sub    esp,0xc
c000b3c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3c6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b3c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b3cc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b3cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b3d2:	50                   	push   eax
c000b3d3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b3d6:	83 c4 20             	add    esp,0x20
c000b3d9:	8d 76 00             	lea    esi,[esi+0x0]
c000b3dc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b3e3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b3ea:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b3ee:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b3f5:	83 c4 08             	add    esp,0x8
c000b3f8:	5b                   	pop    ebx
c000b3f9:	c3                   	ret    
c000b3fa:	66 90                	xchg   ax,ax

c000b3fc <VCache::~VCache()>:
c000b3fc:	83 ec 0c             	sub    esp,0xc
c000b3ff:	ba 80 39 02 c0       	mov    edx,0xc0023980
c000b404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b408:	89 10                	mov    DWORD PTR [eax],edx
c000b40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b411:	0f b6 c0             	movzx  eax,al
c000b414:	85 c0                	test   eax,eax
c000b416:	74 10                	je     c000b428 <VCache::~VCache()+0x2c>
c000b418:	83 ec 0c             	sub    esp,0xc
c000b41b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41f:	e8 8c ff ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b424:	83 c4 10             	add    esp,0x10
c000b427:	90                   	nop
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b42f:	83 ec 0c             	sub    esp,0xc
c000b432:	50                   	push   eax
c000b433:	e8 60 43 00 00       	call   c000f798 <free>
c000b438:	83 c4 10             	add    esp,0x10
c000b43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b43f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b442:	83 ec 0c             	sub    esp,0xc
c000b445:	50                   	push   eax
c000b446:	e8 4d 43 00 00       	call   c000f798 <free>
c000b44b:	83 c4 10             	add    esp,0x10
c000b44e:	90                   	nop
c000b44f:	83 c4 0c             	add    esp,0xc
c000b452:	c3                   	ret    
c000b453:	90                   	nop

c000b454 <VCache::~VCache()>:
c000b454:	83 ec 0c             	sub    esp,0xc
c000b457:	83 ec 0c             	sub    esp,0xc
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	e8 99 ff ff ff       	call   c000b3fc <VCache::~VCache()>
c000b463:	83 c4 10             	add    esp,0x10
c000b466:	83 ec 08             	sub    esp,0x8
c000b469:	6a 44                	push   0x44
c000b46b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46f:	e8 48 1e 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000b474:	83 c4 10             	add    esp,0x10
c000b477:	83 c4 0c             	add    esp,0xc
c000b47a:	c3                   	ret    
c000b47b:	90                   	nop

c000b47c <VCache::write(unsigned long long, int, void*)>:
c000b47c:	55                   	push   ebp
c000b47d:	57                   	push   edi
c000b47e:	56                   	push   esi
c000b47f:	53                   	push   ebx
c000b480:	83 ec 1c             	sub    esp,0x1c
c000b483:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b487:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b48b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b48f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b493:	e8 9c b5 00 00       	call   c0016a34 <KeDisablePreemption()>
c000b498:	b9 00 10 00 00       	mov    ecx,0x1000
c000b49d:	50                   	push   eax
c000b49e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4a1:	0f af c3             	imul   eax,ebx
c000b4a4:	05 ff 0f 00 00       	add    eax,0xfff
c000b4a9:	99                   	cdq    
c000b4aa:	f7 f9                	idiv   ecx
c000b4ac:	50                   	push   eax
c000b4ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4b1:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b4b7:	e8 76 8a 00 00       	call   c0013f32 <VAS::canLockPages(unsigned long, int)>
c000b4bc:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4c8:	74 2a                	je     c000b4f4 <VCache::write(unsigned long long, int, void*)+0x78>
c000b4ca:	50                   	push   eax
c000b4cb:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4d3:	0f af c3             	imul   eax,ebx
c000b4d6:	05 ff 0f 00 00       	add    eax,0xfff
c000b4db:	99                   	cdq    
c000b4dc:	f7 f9                	idiv   ecx
c000b4de:	50                   	push   eax
c000b4df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4e3:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b4e9:	e8 ce 8c 00 00       	call   c00141bc <VAS::lockPages(unsigned long, int)>
c000b4ee:	83 c4 10             	add    esp,0x10
c000b4f1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f4:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b4f8:	74 0e                	je     c000b508 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b4fa:	83 ec 0c             	sub    esp,0xc
c000b4fd:	55                   	push   ebp
c000b4fe:	e8 9d fe ff ff       	call   c000b3a0 <VCache::invalidateReadBuffer()>
c000b503:	83 c4 10             	add    esp,0x10
c000b506:	66 90                	xchg   ax,ax
c000b508:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b50c:	74 72                	je     c000b580 <VCache::write(unsigned long long, int, void*)+0x104>
c000b50e:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b511:	89 c8                	mov    eax,ecx
c000b513:	99                   	cdq    
c000b514:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b517:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b522:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b526:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b52a:	31 f0                	xor    eax,esi
c000b52c:	31 fa                	xor    edx,edi
c000b52e:	09 d0                	or     eax,edx
c000b530:	75 42                	jne    c000b574 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b532:	83 fb 01             	cmp    ebx,0x1
c000b535:	75 3d                	jne    c000b574 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b53a:	89 cf                	mov    edi,ecx
c000b53c:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b540:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b546:	0f af f8             	imul   edi,eax
c000b549:	89 c1                	mov    ecx,eax
c000b54b:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b54e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b550:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b553:	40                   	inc    eax
c000b554:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b557:	83 f8 50             	cmp    eax,0x50
c000b55a:	0f 85 a8 00 00 00    	jne    c000b608 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b560:	83 ec 0c             	sub    esp,0xc
c000b563:	55                   	push   ebp
c000b564:	e8 47 fe ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b569:	83 c4 10             	add    esp,0x10
c000b56c:	e9 97 00 00 00       	jmp    c000b608 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b571:	8d 76 00             	lea    esi,[esi+0x0]
c000b574:	83 ec 0c             	sub    esp,0xc
c000b577:	55                   	push   ebp
c000b578:	e8 33 fe ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b57d:	83 c4 10             	add    esp,0x10
c000b580:	83 fb 4f             	cmp    ebx,0x4f
c000b583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b586:	7f 20                	jg     c000b5a8 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b588:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b58b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b58f:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b592:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b595:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b598:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b59c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5a4:	eb 62                	jmp    c000b608 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5a6:	66 90                	xchg   ax,ax
c000b5a8:	83 ec 0c             	sub    esp,0xc
c000b5ab:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b5b1:	53                   	push   ebx
c000b5b2:	57                   	push   edi
c000b5b3:	56                   	push   esi
c000b5b4:	50                   	push   eax
c000b5b5:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b5b8:	83 c4 20             	add    esp,0x20
c000b5bb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5c0:	89 c6                	mov    esi,eax
c000b5c2:	74 28                	je     c000b5ec <VCache::write(unsigned long long, int, void*)+0x170>
c000b5c4:	52                   	push   edx
c000b5c5:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5ca:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5ce:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5d4:	99                   	cdq    
c000b5d5:	f7 f9                	idiv   ecx
c000b5d7:	50                   	push   eax
c000b5d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5dc:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b5e2:	e8 87 89 00 00       	call   c0013f6e <VAS::unlockPages(unsigned long, int)>
c000b5e7:	83 c4 10             	add    esp,0x10
c000b5ea:	66 90                	xchg   ax,ax
c000b5ec:	e8 6b b4 00 00       	call   c0016a5c <KeRestorePreemption()>
c000b5f1:	85 f6                	test   esi,esi
c000b5f3:	74 4b                	je     c000b640 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5f5:	83 ec 0c             	sub    esp,0xc
c000b5f8:	68 38 39 02 c0       	push   0xc0023938
c000b5fd:	e8 64 b9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b602:	83 c4 10             	add    esp,0x10
c000b605:	eb 39                	jmp    c000b640 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b607:	90                   	nop
c000b608:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b60d:	74 29                	je     c000b638 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b60f:	50                   	push   eax
c000b610:	b9 00 10 00 00       	mov    ecx,0x1000
c000b615:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b619:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b61f:	99                   	cdq    
c000b620:	f7 f9                	idiv   ecx
c000b622:	50                   	push   eax
c000b623:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b627:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b62d:	e8 3c 89 00 00       	call   c0013f6e <VAS::unlockPages(unsigned long, int)>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8d 76 00             	lea    esi,[esi+0x0]
c000b638:	e8 1f b4 00 00       	call   c0016a5c <KeRestorePreemption()>
c000b63d:	31 f6                	xor    esi,esi
c000b63f:	90                   	nop
c000b640:	83 c4 1c             	add    esp,0x1c
c000b643:	89 f0                	mov    eax,esi
c000b645:	5b                   	pop    ebx
c000b646:	5e                   	pop    esi
c000b647:	5f                   	pop    edi
c000b648:	5d                   	pop    ebp
c000b649:	c3                   	ret    

c000b64a <VCache::read(unsigned long long, int, void*)>:
c000b64a:	55                   	push   ebp
c000b64b:	bd 00 10 00 00       	mov    ebp,0x1000
c000b650:	57                   	push   edi
c000b651:	56                   	push   esi
c000b652:	53                   	push   ebx
c000b653:	83 ec 2c             	sub    esp,0x2c
c000b656:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b65a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b65e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b662:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b66a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b66e:	e8 c1 b3 00 00       	call   c0016a34 <KeDisablePreemption()>
c000b673:	50                   	push   eax
c000b674:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b677:	0f af c6             	imul   eax,esi
c000b67a:	05 ff 0f 00 00       	add    eax,0xfff
c000b67f:	99                   	cdq    
c000b680:	f7 fd                	idiv   ebp
c000b682:	50                   	push   eax
c000b683:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b687:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b68d:	e8 a0 88 00 00       	call   c0013f32 <VAS::canLockPages(unsigned long, int)>
c000b692:	83 c4 10             	add    esp,0x10
c000b695:	84 c0                	test   al,al
c000b697:	89 c7                	mov    edi,eax
c000b699:	74 25                	je     c000b6c0 <VCache::read(unsigned long long, int, void*)+0x76>
c000b69b:	50                   	push   eax
c000b69c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b69f:	0f af c6             	imul   eax,esi
c000b6a2:	05 ff 0f 00 00       	add    eax,0xfff
c000b6a7:	99                   	cdq    
c000b6a8:	f7 fd                	idiv   ebp
c000b6aa:	50                   	push   eax
c000b6ab:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b6af:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b6b5:	e8 02 8b 00 00       	call   c00141bc <VAS::lockPages(unsigned long, int)>
c000b6ba:	83 c4 10             	add    esp,0x10
c000b6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b6c0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b6c4:	74 0e                	je     c000b6d4 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b6c6:	83 ec 0c             	sub    esp,0xc
c000b6c9:	53                   	push   ebx
c000b6ca:	e8 e1 fc ff ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c000b6cf:	83 c4 10             	add    esp,0x10
c000b6d2:	66 90                	xchg   ax,ax
c000b6d4:	83 fe 01             	cmp    esi,0x1
c000b6d7:	0f 85 fb 00 00 00    	jne    c000b7d8 <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b6e0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000b6e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6eb:	0f 85 e7 00 00 00    	jne    c000b7d8 <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6f1:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000b6f4:	89 ee                	mov    esi,ebp
c000b6f6:	f7 de                	neg    esi
c000b6f8:	89 f0                	mov    eax,esi
c000b6fa:	c1 f8 1f             	sar    eax,0x1f
c000b6fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b701:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b705:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000b709:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b70d:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b711:	89 ca                	mov    edx,ecx
c000b713:	89 f9                	mov    ecx,edi
c000b715:	0f b6 f9             	movzx  edi,cl
c000b718:	89 f0                	mov    eax,esi
c000b71a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000b71e:	74 0c                	je     c000b72c <VCache::read(unsigned long long, int, void*)+0xe2>
c000b720:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b723:	75 07                	jne    c000b72c <VCache::read(unsigned long long, int, void*)+0xe2>
c000b725:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000b728:	74 56                	je     c000b780 <VCache::read(unsigned long long, int, void*)+0x136>
c000b72a:	66 90                	xchg   ax,ax
c000b72c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b730:	83 ec 0c             	sub    esp,0xc
c000b733:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b736:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b73a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b73d:	8b 37                	mov    esi,DWORD PTR [edi]
c000b73f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b742:	55                   	push   ebp
c000b743:	52                   	push   edx
c000b744:	50                   	push   eax
c000b745:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b749:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b74c:	83 c4 20             	add    esp,0x20
c000b74f:	85 c0                	test   eax,eax
c000b751:	89 c5                	mov    ebp,eax
c000b753:	74 2b                	je     c000b780 <VCache::read(unsigned long long, int, void*)+0x136>
c000b755:	83 ec 0c             	sub    esp,0xc
c000b758:	68 50 39 02 c0       	push   0xc0023950
c000b75d:	e8 04 b8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b762:	83 c4 10             	add    esp,0x10
c000b765:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b76a:	0f 84 bc 00 00 00    	je     c000b82c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b770:	56                   	push   esi
c000b771:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b774:	05 ff 0f 00 00       	add    eax,0xfff
c000b779:	e9 92 00 00 00       	jmp    c000b810 <VCache::read(unsigned long long, int, void*)+0x1c6>
c000b77e:	66 90                	xchg   ax,ax
c000b780:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b783:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000b787:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b78d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b790:	8d 70 ff             	lea    esi,[eax-0x1]
c000b793:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b797:	0f af f1             	imul   esi,ecx
c000b79a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b79d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b79f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b7a4:	74 26                	je     c000b7cc <VCache::read(unsigned long long, int, void*)+0x182>
c000b7a6:	51                   	push   ecx
c000b7a7:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7ac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7af:	05 ff 0f 00 00       	add    eax,0xfff
c000b7b4:	99                   	cdq    
c000b7b5:	f7 f9                	idiv   ecx
c000b7b7:	50                   	push   eax
c000b7b8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b7bc:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b7c2:	e8 a7 87 00 00       	call   c0013f6e <VAS::unlockPages(unsigned long, int)>
c000b7c7:	83 c4 10             	add    esp,0x10
c000b7ca:	66 90                	xchg   ax,ax
c000b7cc:	e8 8b b2 00 00       	call   c0016a5c <KeRestorePreemption()>
c000b7d1:	31 ed                	xor    ebp,ebp
c000b7d3:	eb 5f                	jmp    c000b834 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000b7d5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7d8:	83 ec 0c             	sub    esp,0xc
c000b7db:	53                   	push   ebx
c000b7dc:	e8 bf fb ff ff       	call   c000b3a0 <VCache::invalidateReadBuffer()>
c000b7e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7e4:	5a                   	pop    edx
c000b7e5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7e7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b7eb:	56                   	push   esi
c000b7ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7f4:	50                   	push   eax
c000b7f5:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b7f8:	83 c4 20             	add    esp,0x20
c000b7fb:	89 c5                	mov    ebp,eax
c000b7fd:	89 f8                	mov    eax,edi
c000b7ff:	84 c0                	test   al,al
c000b801:	74 29                	je     c000b82c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b803:	50                   	push   eax
c000b804:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b808:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b80e:	66 90                	xchg   ax,ax
c000b810:	b9 00 10 00 00       	mov    ecx,0x1000
c000b815:	99                   	cdq    
c000b816:	f7 f9                	idiv   ecx
c000b818:	50                   	push   eax
c000b819:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b81d:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b823:	e8 46 87 00 00       	call   c0013f6e <VAS::unlockPages(unsigned long, int)>
c000b828:	83 c4 10             	add    esp,0x10
c000b82b:	90                   	nop
c000b82c:	e8 2b b2 00 00       	call   c0016a5c <KeRestorePreemption()>
c000b831:	8d 76 00             	lea    esi,[esi+0x0]
c000b834:	83 c4 2c             	add    esp,0x2c
c000b837:	89 e8                	mov    eax,ebp
c000b839:	5b                   	pop    ebx
c000b83a:	5e                   	pop    esi
c000b83b:	5f                   	pop    edi
c000b83c:	5d                   	pop    ebp
c000b83d:	c3                   	ret    

c000b83e <Video::putrect(int, int, int, int, unsigned int)>:
c000b83e:	55                   	push   ebp
c000b83f:	57                   	push   edi
c000b840:	56                   	push   esi
c000b841:	53                   	push   ebx
c000b842:	83 ec 1c             	sub    esp,0x1c
c000b845:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b849:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b84d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b851:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b855:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b85d:	01 df                	add    edi,ebx
c000b85f:	39 fb                	cmp    ebx,edi
c000b861:	7d 1f                	jge    c000b882 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b863:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b867:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b86b:	7d 12                	jge    c000b87f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b86d:	8b 16                	mov    edx,DWORD PTR [esi]
c000b86f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b873:	53                   	push   ebx
c000b874:	55                   	push   ebp
c000b875:	45                   	inc    ebp
c000b876:	56                   	push   esi
c000b877:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b87a:	83 c4 10             	add    esp,0x10
c000b87d:	eb e8                	jmp    c000b867 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b87f:	43                   	inc    ebx
c000b880:	eb dd                	jmp    c000b85f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b882:	83 c4 1c             	add    esp,0x1c
c000b885:	5b                   	pop    ebx
c000b886:	5e                   	pop    esi
c000b887:	5f                   	pop    edi
c000b888:	5d                   	pop    ebp
c000b889:	c3                   	ret    

c000b88a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b88a:	55                   	push   ebp
c000b88b:	57                   	push   edi
c000b88c:	31 ff                	xor    edi,edi
c000b88e:	56                   	push   esi
c000b88f:	53                   	push   ebx
c000b890:	83 ec 1c             	sub    esp,0x1c
c000b893:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b897:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b89b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8a2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8af:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8b3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b8b6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b8ba:	01 f9                	add    ecx,edi
c000b8bc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b8c0:	7d 2f                	jge    c000b8f1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b8c2:	31 f6                	xor    esi,esi
c000b8c4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8c8:	01 f2                	add    edx,esi
c000b8ca:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8ce:	7d 1a                	jge    c000b8ea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b8d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b8d3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b8d6:	46                   	inc    esi
c000b8d7:	51                   	push   ecx
c000b8d8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b8dc:	52                   	push   edx
c000b8dd:	55                   	push   ebp
c000b8de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8e1:	83 c4 10             	add    esp,0x10
c000b8e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b8e8:	eb da                	jmp    c000b8c4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b8ea:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b8ee:	47                   	inc    edi
c000b8ef:	eb c5                	jmp    c000b8b6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b8f1:	83 c4 1c             	add    esp,0x1c
c000b8f4:	5b                   	pop    ebx
c000b8f5:	5e                   	pop    esi
c000b8f6:	5f                   	pop    edi
c000b8f7:	5d                   	pop    ebp
c000b8f8:	c3                   	ret    
c000b8f9:	90                   	nop

c000b8fa <Video::blit(unsigned int*, int, int, int, int)>:
c000b8fa:	55                   	push   ebp
c000b8fb:	ba 00 00 00 00       	mov    edx,0x0
c000b900:	57                   	push   edi
c000b901:	56                   	push   esi
c000b902:	53                   	push   ebx
c000b903:	83 ec 1c             	sub    esp,0x1c
c000b906:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b90a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b90e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b912:	85 c0                	test   eax,eax
c000b914:	0f 49 d0             	cmovns edx,eax
c000b917:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000b91e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000b922:	89 eb                	mov    ebx,ebp
c000b924:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b928:	01 ea                	add    edx,ebp
c000b92a:	39 da                	cmp    edx,ebx
c000b92c:	7e 54                	jle    c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b92e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b934:	7c 4c                	jl     c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b936:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b93a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b93e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b942:	01 c1                	add    ecx,eax
c000b944:	39 f9                	cmp    ecx,edi
c000b946:	7e 2f                	jle    c000b977 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000b948:	83 c2 04             	add    edx,0x4
c000b94b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b951:	7c 21                	jl     c000b974 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000b953:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b957:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b959:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000b95c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b960:	55                   	push   ebp
c000b961:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b965:	56                   	push   esi
c000b966:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b970:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b974:	47                   	inc    edi
c000b975:	eb c7                	jmp    c000b93e <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000b977:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000b97b:	43                   	inc    ebx
c000b97c:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000b980:	eb a2                	jmp    c000b924 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000b982:	83 c4 1c             	add    esp,0x1c
c000b985:	5b                   	pop    ebx
c000b986:	5e                   	pop    esi
c000b987:	5f                   	pop    edi
c000b988:	5d                   	pop    ebp
c000b989:	c3                   	ret    

c000b98a <Video::clearScreen(unsigned int)>:
c000b98a:	57                   	push   edi
c000b98b:	56                   	push   esi
c000b98c:	53                   	push   ebx
c000b98d:	31 db                	xor    ebx,ebx
c000b98f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b993:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b999:	7e 1f                	jle    c000b9ba <Video::clearScreen(unsigned int)+0x30>
c000b99b:	31 ff                	xor    edi,edi
c000b99d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b9a3:	7e 12                	jle    c000b9b7 <Video::clearScreen(unsigned int)+0x2d>
c000b9a5:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ab:	53                   	push   ebx
c000b9ac:	57                   	push   edi
c000b9ad:	47                   	inc    edi
c000b9ae:	56                   	push   esi
c000b9af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9b2:	83 c4 10             	add    esp,0x10
c000b9b5:	eb e6                	jmp    c000b99d <Video::clearScreen(unsigned int)+0x13>
c000b9b7:	43                   	inc    ebx
c000b9b8:	eb d9                	jmp    c000b993 <Video::clearScreen(unsigned int)+0x9>
c000b9ba:	5b                   	pop    ebx
c000b9bb:	5e                   	pop    esi
c000b9bc:	5f                   	pop    edi
c000b9bd:	c3                   	ret    

c000b9be <Video::putpixel(int, int, unsigned int)>:
c000b9be:	c7 44 24 04 88 39 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023988
c000b9c6:	e9 19 42 00 00       	jmp    c000fbe4 <KePanic(char const*)>
c000b9cb:	90                   	nop

c000b9cc <Video::readPixelApprox(int, int)>:
c000b9cc:	83 ec 18             	sub    esp,0x18
c000b9cf:	68 a9 39 02 c0       	push   0xc00239a9
c000b9d4:	e8 0b 42 00 00       	call   c000fbe4 <KePanic(char const*)>
c000b9d9:	31 c0                	xor    eax,eax
c000b9db:	83 c4 1c             	add    esp,0x1c
c000b9de:	c3                   	ret    
c000b9df:	90                   	nop

c000b9e0 <Video::Video(char const*)>:
c000b9e0:	83 ec 0c             	sub    esp,0xc
c000b9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e7:	83 ec 08             	sub    esp,0x8
c000b9ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9ee:	50                   	push   eax
c000b9ef:	e8 64 e1 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000b9f4:	83 c4 10             	add    esp,0x10
c000b9f7:	ba 4c 3a 02 c0       	mov    edx,0xc0023a4c
c000b9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba00:	89 10                	mov    DWORD PTR [eax],edx
c000ba02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba06:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba10:	90                   	nop
c000ba11:	83 c4 0c             	add    esp,0xc
c000ba14:	c3                   	ret    
c000ba15:	90                   	nop

c000ba16 <Video::~Video()>:
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	ba 4c 3a 02 c0       	mov    edx,0xc0023a4c
c000ba1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba22:	89 10                	mov    DWORD PTR [eax],edx
c000ba24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba28:	83 ec 0c             	sub    esp,0xc
c000ba2b:	50                   	push   eax
c000ba2c:	e8 c7 de ff ff       	call   c00098f8 <Device::~Device()>
c000ba31:	83 c4 10             	add    esp,0x10
c000ba34:	90                   	nop
c000ba35:	83 c4 0c             	add    esp,0xc
c000ba38:	c3                   	ret    
c000ba39:	90                   	nop

c000ba3a <Video::~Video()>:
c000ba3a:	83 ec 0c             	sub    esp,0xc
c000ba3d:	83 ec 0c             	sub    esp,0xc
c000ba40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba44:	e8 cd ff ff ff       	call   c000ba16 <Video::~Video()>
c000ba49:	83 c4 10             	add    esp,0x10
c000ba4c:	83 ec 08             	sub    esp,0x8
c000ba4f:	68 64 01 00 00       	push   0x164
c000ba54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba58:	e8 5f 18 00 00       	call   c000d2bc <operator delete(void*, unsigned long)>
c000ba5d:	83 c4 10             	add    esp,0x10
c000ba60:	83 c4 0c             	add    esp,0xc
c000ba63:	c3                   	ret    

c000ba64 <Video::isMonochrome()>:
c000ba64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba68:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba6e:	c3                   	ret    
c000ba6f:	90                   	nop

c000ba70 <Video::getWidth()>:
c000ba70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba74:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba7a:	c3                   	ret    
c000ba7b:	90                   	nop

c000ba7c <Video::getHeight()>:
c000ba7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba80:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba86:	c3                   	ret    
c000ba87:	90                   	nop

c000ba88 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba88:	55                   	push   ebp
c000ba89:	57                   	push   edi
c000ba8a:	56                   	push   esi
c000ba8b:	53                   	push   ebx
c000ba8c:	83 ec 2c             	sub    esp,0x2c
c000ba8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ba93:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ba97:	83 f8 01             	cmp    eax,0x1
c000ba9a:	19 c9                	sbb    ecx,ecx
c000ba9c:	31 db                	xor    ebx,ebx
c000ba9e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000baa2:	89 ce                	mov    esi,ecx
c000baa4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000baac:	f7 d6                	not    esi
c000baae:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000bab4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bab8:	01 d8                	add    eax,ebx
c000baba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000babe:	57                   	push   edi
c000babf:	e8 b8 ff ff ff       	call   c000ba7c <Video::getHeight()>
c000bac4:	59                   	pop    ecx
c000bac5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000bac9:	7e 70                	jle    c000bb3b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000bacb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bacf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000bad3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bad6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bada:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bade:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bae9:	89 e8                	mov    eax,ebp
c000baeb:	83 c0 20             	add    eax,0x20
c000baee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000baf2:	57                   	push   edi
c000baf3:	e8 78 ff ff ff       	call   c000ba70 <Video::getWidth()>
c000baf8:	5a                   	pop    edx
c000baf9:	39 c5                	cmp    ebp,eax
c000bafb:	7d 34                	jge    c000bb31 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bafd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bb02:	74 05                	je     c000bb09 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bb04:	8b 07                	mov    eax,DWORD PTR [edi]
c000bb06:	56                   	push   esi
c000bb07:	eb 0d                	jmp    c000bb16 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bb09:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bb0e:	74 12                	je     c000bb22 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bb10:	8b 07                	mov    eax,DWORD PTR [edi]
c000bb12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb16:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb1a:	55                   	push   ebp
c000bb1b:	57                   	push   edi
c000bb1c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb1f:	83 c4 10             	add    esp,0x10
c000bb22:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb26:	45                   	inc    ebp
c000bb27:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb2b:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000bb2f:	75 c1                	jne    c000baf2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb31:	43                   	inc    ebx
c000bb32:	83 fb 20             	cmp    ebx,0x20
c000bb35:	0f 85 79 ff ff ff    	jne    c000bab4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb3b:	83 c4 2c             	add    esp,0x2c
c000bb3e:	5b                   	pop    ebx
c000bb3f:	5e                   	pop    esi
c000bb40:	5f                   	pop    edi
c000bb41:	5d                   	pop    ebp
c000bb42:	c3                   	ret    
c000bb43:	90                   	nop

c000bb44 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb44:	55                   	push   ebp
c000bb45:	57                   	push   edi
c000bb46:	56                   	push   esi
c000bb47:	53                   	push   ebx
c000bb48:	83 ec 48             	sub    esp,0x48
c000bb4b:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb4f:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb53:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb57:	c1 e0 08             	shl    eax,0x8
c000bb5a:	01 d0                	add    eax,edx
c000bb5c:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb64:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb68:	c1 e0 08             	shl    eax,0x8
c000bb6b:	01 d0                	add    eax,edx
c000bb6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb75:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb82:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb89:	50                   	push   eax
c000bb8a:	e8 f9 3b 00 00       	call   c000f788 <malloc>
c000bb8f:	83 c4 10             	add    esp,0x10
c000bb92:	85 c0                	test   eax,eax
c000bb94:	89 c5                	mov    ebp,eax
c000bb96:	75 10                	jne    c000bba8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000bb98:	83 ec 0c             	sub    esp,0xc
c000bb9b:	68 d4 39 02 c0       	push   0xc00239d4
c000bba0:	e8 3f 40 00 00       	call   c000fbe4 <KePanic(char const*)>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	52                   	push   edx
c000bba9:	bf 12 00 00 00       	mov    edi,0x12
c000bbae:	52                   	push   edx
c000bbaf:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbb3:	50                   	push   eax
c000bbb4:	68 e4 39 02 c0       	push   0xc00239e4
c000bbb9:	e8 a8 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bbbe:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbc1:	83 e0 20             	and    eax,0x20
c000bbc4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000bbc8:	85 c0                	test   eax,eax
c000bbca:	59                   	pop    ecx
c000bbcb:	0f 94 c0             	sete   al
c000bbce:	0f b6 c0             	movzx  eax,al
c000bbd1:	5e                   	pop    esi
c000bbd2:	50                   	push   eax
c000bbd3:	68 ee 39 02 c0       	push   0xc00239ee
c000bbd8:	e8 89 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bbdd:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000bbe1:	83 c4 10             	add    esp,0x10
c000bbe4:	85 c0                	test   eax,eax
c000bbe6:	89 c2                	mov    edx,eax
c000bbe8:	74 11                	je     c000bbfb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000bbea:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000bbee:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bbf2:	c1 ff 03             	sar    edi,0x3
c000bbf5:	0f af f9             	imul   edi,ecx
c000bbf8:	83 c7 12             	add    edi,0x12
c000bbfb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bc00:	74 07                	je     c000bc09 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000bc02:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc07:	75 12                	jne    c000bc1b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000bc09:	83 ec 0c             	sub    esp,0xc
c000bc0c:	68 fc 39 02 c0       	push   0xc00239fc
c000bc11:	e8 50 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bc16:	e9 aa 02 00 00       	jmp    c000bec5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000bc1b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc1f:	83 f9 02             	cmp    ecx,0x2
c000bc22:	74 0e                	je     c000bc32 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000bc24:	83 f9 0a             	cmp    ecx,0xa
c000bc27:	0f 84 d1 00 00 00    	je     c000bcfe <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000bc2d:	e9 7e 02 00 00       	jmp    c000beb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000bc32:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc37:	75 0e                	jne    c000bc47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc39:	84 d2                	test   dl,dl
c000bc3b:	75 0a                	jne    c000bc47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc3d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc40:	83 e8 18             	sub    eax,0x18
c000bc43:	a8 f7                	test   al,0xf7
c000bc45:	74 0d                	je     c000bc54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000bc47:	83 ec 0c             	sub    esp,0xc
c000bc4a:	68 11 3a 02 c0       	push   0xc0023a11
c000bc4f:	e9 64 02 00 00       	jmp    c000beb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bc54:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc5c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000bc61:	31 c0                	xor    eax,eax
c000bc63:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000bc67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bc6f:	89 c6                	mov    esi,eax
c000bc71:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bc76:	75 15                	jne    c000bc8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc78:	99                   	cdq    
c000bc79:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bc7d:	85 d2                	test   edx,edx
c000bc7f:	75 0c                	jne    c000bc8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc81:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000bc85:	29 c6                	sub    esi,eax
c000bc87:	4e                   	dec    esi
c000bc88:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000bc8d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bc91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc99:	75 0c                	jne    c000bca7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000bc9b:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000bca0:	c1 e2 18             	shl    edx,0x18
c000bca3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bca7:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000bcac:	8d 46 01             	lea    eax,[esi+0x1]
c000bcaf:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000bcb3:	c1 e1 10             	shl    ecx,0x10
c000bcb6:	89 ca                	mov    edx,ecx
c000bcb8:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000bcbd:	c1 e1 08             	shl    ecx,0x8
c000bcc0:	09 d1                	or     ecx,edx
c000bcc2:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bcc6:	09 d1                	or     ecx,edx
c000bcc8:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000bccc:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000bcd0:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bcd4:	c1 fa 03             	sar    edx,0x3
c000bcd7:	01 d7                	add    edi,edx
c000bcd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bcdd:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000bce1:	7e 04                	jle    c000bce7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000bce3:	89 c6                	mov    esi,eax
c000bce5:	eb 8a                	jmp    c000bc71 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000bce7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bceb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcef:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bcf3:	0f 8f 6e ff ff ff    	jg     c000bc67 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000bcf9:	e9 ce 01 00 00       	jmp    c000becc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bcfe:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd03:	75 0e                	jne    c000bd13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bd05:	85 c0                	test   eax,eax
c000bd07:	75 0a                	jne    c000bd13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bd09:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd0c:	83 e8 18             	sub    eax,0x18
c000bd0f:	a8 f7                	test   al,0xf7
c000bd11:	74 0d                	je     c000bd20 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000bd13:	83 ec 0c             	sub    esp,0xc
c000bd16:	68 1f 3a 02 c0       	push   0xc0023a1f
c000bd1b:	e9 98 01 00 00       	jmp    c000beb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bd20:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bd28:	31 c9                	xor    ecx,ecx
c000bd2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bd32:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000bd36:	0f 8d 90 01 00 00    	jge    c000becc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd40:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000bd44:	0f 8e 82 01 00 00    	jle    c000becc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd4a:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bd4e:	8d 77 01             	lea    esi,[edi+0x1]
c000bd51:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd55:	83 fa 7f             	cmp    edx,0x7f
c000bd58:	89 d0                	mov    eax,edx
c000bd5a:	0f 8e a3 00 00 00    	jle    c000be03 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000bd60:	83 e0 7f             	and    eax,0x7f
c000bd63:	31 d2                	xor    edx,edx
c000bd65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd69:	40                   	inc    eax
c000bd6a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bd72:	75 08                	jne    c000bd7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000bd74:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000bd79:	c1 e2 18             	shl    edx,0x18
c000bd7c:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000bd81:	c1 e0 10             	shl    eax,0x10
c000bd84:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd88:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000bd8d:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000bd91:	c1 e0 08             	shl    eax,0x8
c000bd94:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000bd98:	09 f8                	or     eax,edi
c000bd9a:	31 ff                	xor    edi,edi
c000bd9c:	09 d0                	or     eax,edx
c000bd9e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bda2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bda7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdab:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000bdb0:	75 1d                	jne    c000bdcf <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bdb2:	89 c8                	mov    eax,ecx
c000bdb4:	99                   	cdq    
c000bdb5:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bdb9:	85 d2                	test   edx,edx
c000bdbb:	75 12                	jne    c000bdcf <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bdbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bdc1:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000bdc5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bdc9:	49                   	dec    ecx
c000bdca:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000bdcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bdd3:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdd6:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000bdda:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000bdde:	8d 47 01             	lea    eax,[edi+0x1]
c000bde1:	7e 06                	jle    c000bde9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000bde3:	89 c7                	mov    edi,eax
c000bde5:	89 d1                	mov    ecx,edx
c000bde7:	eb c2                	jmp    c000bdab <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000bde9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bded:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000bdf1:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000bdf5:	c1 f8 03             	sar    eax,0x3
c000bdf8:	01 c6                	add    esi,eax
c000bdfa:	89 d1                	mov    ecx,edx
c000bdfc:	89 f7                	mov    edi,esi
c000bdfe:	e9 2f ff ff ff       	jmp    c000bd32 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000be03:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000be0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be0f:	40                   	inc    eax
c000be10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000be19:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be1d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be22:	75 1d                	jne    c000be41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be24:	89 c8                	mov    eax,ecx
c000be26:	99                   	cdq    
c000be27:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000be2b:	85 d2                	test   edx,edx
c000be2d:	75 12                	jne    c000be41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be33:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000be37:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000be3b:	49                   	dec    ecx
c000be3c:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000be41:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be45:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be4d:	75 0c                	jne    c000be5b <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000be4f:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000be54:	c1 e7 18             	shl    edi,0x18
c000be57:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be5b:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000be60:	8d 51 01             	lea    edx,[ecx+0x1]
c000be63:	c1 e0 10             	shl    eax,0x10
c000be66:	89 c7                	mov    edi,eax
c000be68:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000be6d:	c1 e0 08             	shl    eax,0x8
c000be70:	09 f8                	or     eax,edi
c000be72:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000be76:	09 f8                	or     eax,edi
c000be78:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be7c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000be80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000be84:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be88:	c1 f8 03             	sar    eax,0x3
c000be8b:	01 c6                	add    esi,eax
c000be8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be91:	40                   	inc    eax
c000be92:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000be96:	7e 0b                	jle    c000bea3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000be98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be9c:	89 d1                	mov    ecx,edx
c000be9e:	e9 7a ff ff ff       	jmp    c000be1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000bea3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000bea7:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000beab:	e9 4a ff ff ff       	jmp    c000bdfa <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000beb0:	50                   	push   eax
c000beb1:	50                   	push   eax
c000beb2:	51                   	push   ecx
c000beb3:	68 2e 3a 02 c0       	push   0xc0023a2e
c000beb8:	e8 a9 b0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bebd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bec0:	e8 d3 38 00 00       	call   c000f798 <free>
c000bec5:	83 c4 10             	add    esp,0x10
c000bec8:	31 ed                	xor    ebp,ebp
c000beca:	eb 14                	jmp    c000bee0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000becc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bed0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000bed4:	89 18                	mov    DWORD PTR [eax],ebx
c000bed6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000beda:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000bede:	89 18                	mov    DWORD PTR [eax],ebx
c000bee0:	83 c4 3c             	add    esp,0x3c
c000bee3:	89 e8                	mov    eax,ebp
c000bee5:	5b                   	pop    ebx
c000bee6:	5e                   	pop    esi
c000bee7:	5f                   	pop    edi
c000bee8:	5d                   	pop    ebp
c000bee9:	c3                   	ret    

c000beea <Video::putTGA(int, int, unsigned char*, int)>:
c000beea:	55                   	push   ebp
c000beeb:	57                   	push   edi
c000beec:	56                   	push   esi
c000beed:	53                   	push   ebx
c000beee:	83 ec 28             	sub    esp,0x28
c000bef1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bef5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000bef9:	50                   	push   eax
c000befa:	8d 44 24 18          	lea    eax,[esp+0x18]
c000befe:	50                   	push   eax
c000beff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf03:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf07:	55                   	push   ebp
c000bf08:	e8 37 fc ff ff       	call   c000bb44 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf0d:	83 c4 20             	add    esp,0x20
c000bf10:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf14:	85 c0                	test   eax,eax
c000bf16:	74 3b                	je     c000bf53 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bf18:	89 c6                	mov    esi,eax
c000bf1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf1e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf22:	39 d8                	cmp    eax,ebx
c000bf24:	7e 2d                	jle    c000bf53 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bf26:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bf2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf2e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf32:	39 f8                	cmp    eax,edi
c000bf34:	7e 1a                	jle    c000bf50 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000bf36:	83 c6 04             	add    esi,0x4
c000bf39:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf3c:	85 c0                	test   eax,eax
c000bf3e:	79 0d                	jns    c000bf4d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000bf40:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf43:	50                   	push   eax
c000bf44:	53                   	push   ebx
c000bf45:	57                   	push   edi
c000bf46:	55                   	push   ebp
c000bf47:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000bf4a:	83 c4 10             	add    esp,0x10
c000bf4d:	47                   	inc    edi
c000bf4e:	eb da                	jmp    c000bf2a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf50:	43                   	inc    ebx
c000bf51:	eb c7                	jmp    c000bf1a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf53:	83 c4 1c             	add    esp,0x1c
c000bf56:	5b                   	pop    ebx
c000bf57:	5e                   	pop    esi
c000bf58:	5f                   	pop    edi
c000bf59:	5d                   	pop    ebp
c000bf5a:	c3                   	ret    
c000bf5b:	90                   	nop

c000bf5c <ACPI::close(int, int, void*)>:
c000bf5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf61:	c3                   	ret    
c000bf62:	66 90                	xchg   ax,ax

c000bf64 <loadACPITables(unsigned char*)>:
c000bf64:	57                   	push   edi
c000bf65:	56                   	push   esi
c000bf66:	53                   	push   ebx
c000bf67:	83 ec 60             	sub    esp,0x60
c000bf6a:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf6f:	0f 84 43 02 00 00    	je     c000c1b8 <loadACPITables(unsigned char*)+0x254>
c000bf75:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c000bf7a:	0f b6 c0             	movzx  eax,al
c000bf7d:	85 c0                	test   eax,eax
c000bf7f:	74 7b                	je     c000bffc <loadACPITables(unsigned char*)+0x98>
c000bf81:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf85:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf89:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf8d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf90:	83 e8 24             	sub    eax,0x24
c000bf93:	c1 e8 03             	shr    eax,0x3
c000bf96:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bf9a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfa2:	66 90                	xchg   ax,ax
c000bfa4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfa8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfac:	0f 8d ba 00 00 00    	jge    c000c06c <loadACPITables(unsigned char*)+0x108>
c000bfb2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfb6:	83 c0 24             	add    eax,0x24
c000bfb9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfbd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bfc1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bfc5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfc9:	c1 e0 03             	shl    eax,0x3
c000bfcc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bfd0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bfd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bfd7:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfd9:	89 c1                	mov    ecx,eax
c000bfdb:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bfe0:	8d 50 01             	lea    edx,[eax+0x1]
c000bfe3:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000bfe9:	89 ca                	mov    edx,ecx
c000bfeb:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000bff2:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000bff7:	eb ab                	jmp    c000bfa4 <loadACPITables(unsigned char*)+0x40>
c000bff9:	8d 76 00             	lea    esi,[esi+0x0]
c000bffc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c000:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c004:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c00b:	83 e8 24             	sub    eax,0x24
c000c00e:	c1 e8 02             	shr    eax,0x2
c000c011:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c015:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c01d:	8d 76 00             	lea    esi,[esi+0x0]
c000c020:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c024:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c028:	7d 42                	jge    c000c06c <loadACPITables(unsigned char*)+0x108>
c000c02a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c02e:	83 c0 24             	add    eax,0x24
c000c031:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c035:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c039:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c03d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c041:	c1 e0 02             	shl    eax,0x2
c000c044:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c048:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c04c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c04e:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c053:	8d 50 01             	lea    edx,[eax+0x1]
c000c056:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c05c:	89 ca                	mov    edx,ecx
c000c05e:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c065:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c06a:	eb b4                	jmp    c000c020 <loadACPITables(unsigned char*)+0xbc>
c000c06c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c074:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c079:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c07d:	0f 8d 39 01 00 00    	jge    c000c1bc <loadACPITables(unsigned char*)+0x258>
c000c083:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c087:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c08e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c092:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c096:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c09a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c09e:	25 ff 0f 00 00       	and    eax,0xfff
c000c0a3:	89 c6                	mov    esi,eax
c000c0a5:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c0ab:	83 ec 0c             	sub    esp,0xc
c000c0ae:	6a 01                	push   0x1
c000c0b0:	e8 26 71 00 00       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c000c0b5:	83 c4 10             	add    esp,0x10
c000c0b8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0c2:	83 ec 0c             	sub    esp,0xc
c000c0c5:	6a 01                	push   0x1
c000c0c7:	6a 01                	push   0x1
c000c0c9:	50                   	push   eax
c000c0ca:	52                   	push   edx
c000c0cb:	53                   	push   ebx
c000c0cc:	e8 dd 79 00 00       	call   c0013aae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0d1:	83 c4 20             	add    esp,0x20
c000c0d4:	09 f0                	or     eax,esi
c000c0d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0da:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0de:	c1 e0 03             	shl    eax,0x3
c000c0e1:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c0e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c0ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0f2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c0fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c102:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c106:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c10a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c10e:	89 c6                	mov    esi,eax
c000c110:	89 d7                	mov    edi,edx
c000c112:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c114:	89 c8                	mov    eax,ecx
c000c116:	89 fa                	mov    edx,edi
c000c118:	89 f3                	mov    ebx,esi
c000c11a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c11e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c122:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c12a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c12d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c131:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c135:	05 00 10 00 00       	add    eax,0x1000
c000c13a:	c1 e8 0c             	shr    eax,0xc
c000c13d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c145:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c149:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c14d:	25 ff 0f 00 00       	and    eax,0xfff
c000c152:	89 c6                	mov    esi,eax
c000c154:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c15a:	83 ec 0c             	sub    esp,0xc
c000c15d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c161:	e8 75 70 00 00       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c000c166:	83 c4 10             	add    esp,0x10
c000c169:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c16d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c173:	83 ec 0c             	sub    esp,0xc
c000c176:	6a 01                	push   0x1
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	50                   	push   eax
c000c17d:	52                   	push   edx
c000c17e:	53                   	push   ebx
c000c17f:	e8 2a 79 00 00       	call   c0013aae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c184:	83 c4 20             	add    esp,0x20
c000c187:	09 f0                	or     eax,esi
c000c189:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c18d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c191:	83 ec 0c             	sub    esp,0xc
c000c194:	50                   	push   eax
c000c195:	e8 3f 73 00 00       	call   c00134d9 <Virt::freeKernelVirtualPages(unsigned long)>
c000c19a:	83 c4 10             	add    esp,0x10
c000c19d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1a5:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c1ac:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1b1:	e9 be fe ff ff       	jmp    c000c074 <loadACPITables(unsigned char*)+0x110>
c000c1b6:	66 90                	xchg   ax,ax
c000c1b8:	90                   	nop
c000c1b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c1bc:	83 c4 60             	add    esp,0x60
c000c1bf:	5b                   	pop    ebx
c000c1c0:	5e                   	pop    esi
c000c1c1:	5f                   	pop    edi
c000c1c2:	c3                   	ret    
c000c1c3:	90                   	nop

c000c1c4 <findRSDT(unsigned char*)>:
c000c1c4:	57                   	push   edi
c000c1c5:	56                   	push   esi
c000c1c6:	53                   	push   ebx
c000c1c7:	83 ec 50             	sub    esp,0x50
c000c1ca:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c1cf:	85 c0                	test   eax,eax
c000c1d1:	75 0d                	jne    c000c1e0 <findRSDT(unsigned char*)+0x1c>
c000c1d3:	b8 00 00 00 00       	mov    eax,0x0
c000c1d8:	e9 2b 01 00 00       	jmp    c000c308 <findRSDT(unsigned char*)+0x144>
c000c1dd:	8d 76 00             	lea    esi,[esi+0x0]
c000c1e0:	89 e0                	mov    eax,esp
c000c1e2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c1e6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c1ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c1ee:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c1f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c1fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c202:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c206:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c20a:	89 c6                	mov    esi,eax
c000c20c:	89 d7                	mov    edi,edx
c000c20e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c210:	89 c8                	mov    eax,ecx
c000c212:	89 fa                	mov    edx,edi
c000c214:	89 f3                	mov    ebx,esi
c000c216:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c21a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c21e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c222:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c226:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c22a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c232:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c236:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c23a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c242:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c246:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c24a:	25 ff 0f 00 00       	and    eax,0xfff
c000c24f:	89 c6                	mov    esi,eax
c000c251:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c257:	83 ec 0c             	sub    esp,0xc
c000c25a:	6a 02                	push   0x2
c000c25c:	e8 7a 6f 00 00       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c000c261:	83 c4 10             	add    esp,0x10
c000c264:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c268:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c26e:	83 ec 0c             	sub    esp,0xc
c000c271:	6a 01                	push   0x1
c000c273:	6a 02                	push   0x2
c000c275:	50                   	push   eax
c000c276:	52                   	push   edx
c000c277:	53                   	push   ebx
c000c278:	e8 31 78 00 00       	call   c0013aae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c27d:	83 c4 20             	add    esp,0x20
c000c280:	09 f0                	or     eax,esi
c000c282:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c286:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c28a:	25 ff 0f 00 00       	and    eax,0xfff
c000c28f:	89 c6                	mov    esi,eax
c000c291:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c297:	83 ec 0c             	sub    esp,0xc
c000c29a:	6a 02                	push   0x2
c000c29c:	e8 3a 6f 00 00       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c000c2a1:	83 c4 10             	add    esp,0x10
c000c2a4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2a8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2ae:	83 ec 0c             	sub    esp,0xc
c000c2b1:	6a 01                	push   0x1
c000c2b3:	6a 02                	push   0x2
c000c2b5:	50                   	push   eax
c000c2b6:	52                   	push   edx
c000c2b7:	53                   	push   ebx
c000c2b8:	e8 f1 77 00 00       	call   c0013aae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2bd:	83 c4 20             	add    esp,0x20
c000c2c0:	09 f0                	or     eax,esi
c000c2c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c2c6:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2cb:	85 c0                	test   eax,eax
c000c2cd:	75 11                	jne    c000c2e0 <findRSDT(unsigned char*)+0x11c>
c000c2cf:	c6 05 80 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bd80,0x0
c000c2d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2da:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2de:	eb 24                	jmp    c000c304 <findRSDT(unsigned char*)+0x140>
c000c2e0:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2e5:	83 f8 02             	cmp    eax,0x2
c000c2e8:	75 12                	jne    c000c2fc <findRSDT(unsigned char*)+0x138>
c000c2ea:	c6 05 80 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd80,0x1
c000c2f1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c2f5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2f9:	eb 09                	jmp    c000c304 <findRSDT(unsigned char*)+0x140>
c000c2fb:	90                   	nop
c000c2fc:	b8 00 00 00 00       	mov    eax,0x0
c000c301:	eb 05                	jmp    c000c308 <findRSDT(unsigned char*)+0x144>
c000c303:	90                   	nop
c000c304:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c308:	83 c4 50             	add    esp,0x50
c000c30b:	5b                   	pop    ebx
c000c30c:	5e                   	pop    esi
c000c30d:	5f                   	pop    edi
c000c30e:	c3                   	ret    
c000c30f:	90                   	nop

c000c310 <findDataTable(unsigned char*, char*)>:
c000c310:	83 ec 1c             	sub    esp,0x1c
c000c313:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c318:	75 0a                	jne    c000c324 <findDataTable(unsigned char*, char*)+0x14>
c000c31a:	b8 00 00 00 00       	mov    eax,0x0
c000c31f:	eb 5f                	jmp    c000c380 <findDataTable(unsigned char*, char*)+0x70>
c000c321:	8d 76 00             	lea    esi,[esi+0x0]
c000c324:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c32c:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c331:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c335:	7d 41                	jge    c000c378 <findDataTable(unsigned char*, char*)+0x68>
c000c337:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c33b:	c1 e0 03             	shl    eax,0x3
c000c33e:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c343:	83 ec 04             	sub    esp,0x4
c000c346:	6a 04                	push   0x4
c000c348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c34c:	50                   	push   eax
c000c34d:	e8 2e 40 ff ff       	call   c0000380 <memcmp>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	85 c0                	test   eax,eax
c000c357:	0f 94 c0             	sete   al
c000c35a:	0f b6 c0             	movzx  eax,al
c000c35d:	85 c0                	test   eax,eax
c000c35f:	74 0f                	je     c000c370 <findDataTable(unsigned char*, char*)+0x60>
c000c361:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c365:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c36c:	eb 12                	jmp    c000c380 <findDataTable(unsigned char*, char*)+0x70>
c000c36e:	66 90                	xchg   ax,ax
c000c370:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c375:	eb b5                	jmp    c000c32c <findDataTable(unsigned char*, char*)+0x1c>
c000c377:	90                   	nop
c000c378:	b8 00 00 00 00       	mov    eax,0x0
c000c37d:	8d 76 00             	lea    esi,[esi+0x0]
c000c380:	83 c4 1c             	add    esp,0x1c
c000c383:	c3                   	ret    

c000c384 <scanMADT()>:
c000c384:	53                   	push   ebx
c000c385:	83 ec 38             	sub    esp,0x38
c000c388:	c7 05 88 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd88,0x0
c000c392:	c7 05 84 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd84,0x0
c000c39c:	83 ec 0c             	sub    esp,0xc
c000c39f:	68 90 3a 02 c0       	push   0xc0023a90
c000c3a4:	e8 bd ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c3a9:	83 c4 10             	add    esp,0x10
c000c3ac:	e8 e3 d7 00 00       	call   c0019b94 <HalFindRSDP()>
c000c3b1:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c000c3b6:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c3bb:	85 c0                	test   eax,eax
c000c3bd:	0f 84 59 04 00 00    	je     c000c81c <scanMADT()+0x498>
c000c3c3:	83 ec 0c             	sub    esp,0xc
c000c3c6:	68 9e 3a 02 c0       	push   0xc0023a9e
c000c3cb:	e8 96 ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c3d0:	83 c4 10             	add    esp,0x10
c000c3d3:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c3d8:	83 ec 0c             	sub    esp,0xc
c000c3db:	50                   	push   eax
c000c3dc:	e8 e3 fd ff ff       	call   c000c1c4 <findRSDT(unsigned char*)>
c000c3e1:	83 c4 10             	add    esp,0x10
c000c3e4:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c000c3e9:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 84 2a 04 00 00    	je     c000c820 <scanMADT()+0x49c>
c000c3f6:	8b 15 84 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd84
c000c3fc:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c401:	83 ec 04             	sub    esp,0x4
c000c404:	52                   	push   edx
c000c405:	50                   	push   eax
c000c406:	68 48 3c 02 c0       	push   0xc0023c48
c000c40b:	e8 56 ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c410:	83 c4 10             	add    esp,0x10
c000c413:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c418:	83 ec 0c             	sub    esp,0xc
c000c41b:	50                   	push   eax
c000c41c:	e8 43 fb ff ff       	call   c000bf64 <loadACPITables(unsigned char*)>
c000c421:	83 c4 10             	add    esp,0x10
c000c424:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c429:	83 ec 08             	sub    esp,0x8
c000c42c:	68 ad 3a 02 c0       	push   0xc0023aad
c000c431:	50                   	push   eax
c000c432:	e8 d9 fe ff ff       	call   c000c310 <findDataTable(unsigned char*, char*)>
c000c437:	83 c4 10             	add    esp,0x10
c000c43a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c43e:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c443:	0f 84 db 03 00 00    	je     c000c824 <scanMADT()+0x4a0>
c000c449:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c451:	8d 76 00             	lea    esi,[esi+0x0]
c000c454:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c458:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c45b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c45f:	0f 87 c7 03 00 00    	ja     c000c82c <scanMADT()+0x4a8>
c000c465:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c46d:	0f 87 b9 03 00 00    	ja     c000c82c <scanMADT()+0x4a8>
c000c473:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c477:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c47b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c47f:	8d 50 01             	lea    edx,[eax+0x1]
c000c482:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c486:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c48a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c48e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c492:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c496:	8d 50 01             	lea    edx,[eax+0x1]
c000c499:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c49d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4a1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4a5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c4a9:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c4ae:	83 f8 02             	cmp    eax,0x2
c000c4b1:	0f 86 71 03 00 00    	jbe    c000c828 <scanMADT()+0x4a4>
c000c4b7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4bc:	85 c0                	test   eax,eax
c000c4be:	75 58                	jne    c000c518 <scanMADT()+0x194>
c000c4c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4c4:	8d 50 01             	lea    edx,[eax+0x1]
c000c4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4cb:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c4d1:	0f b6 d2             	movzx  edx,dl
c000c4d4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4d8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4dc:	88 82 c0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4040],al
c000c4e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4e6:	8d 50 01             	lea    edx,[eax+0x1]
c000c4e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ed:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c4f3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c4f6:	88 0d 80 bf 02 c0    	mov    BYTE PTR ds:0xc002bf80,cl
c000c4fc:	0f b6 d2             	movzx  edx,dl
c000c4ff:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c503:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c507:	88 82 a0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4060],al
c000c50d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c512:	e9 f1 02 00 00       	jmp    c000c808 <scanMADT()+0x484>
c000c517:	90                   	nop
c000c518:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c51d:	83 f8 01             	cmp    eax,0x1
c000c520:	0f 85 32 01 00 00    	jne    c000c658 <scanMADT()+0x2d4>
c000c526:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c52a:	8d 50 01             	lea    edx,[eax+0x1]
c000c52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c531:	8a 15 40 be 02 c0    	mov    dl,BYTE PTR ds:0xc002be40
c000c537:	0f b6 d2             	movzx  edx,dl
c000c53a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c53e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c542:	88 82 60 be 02 c0    	mov    BYTE PTR [edx-0x3ffd41a0],al
c000c548:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c54d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c551:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c555:	01 d0                	add    eax,edx
c000c557:	83 c0 2c             	add    eax,0x2c
c000c55a:	8a 00                	mov    al,BYTE PTR [eax]
c000c55c:	0f b6 d0             	movzx  edx,al
c000c55f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c563:	8d 48 01             	lea    ecx,[eax+0x1]
c000c566:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c56a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c56e:	0f b6 c0             	movzx  eax,al
c000c571:	c1 e0 08             	shl    eax,0x8
c000c574:	89 d1                	mov    ecx,edx
c000c576:	09 c1                	or     ecx,eax
c000c578:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c57c:	8d 50 02             	lea    edx,[eax+0x2]
c000c57f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c583:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c587:	0f b6 c0             	movzx  eax,al
c000c58a:	c1 e0 10             	shl    eax,0x10
c000c58d:	09 c1                	or     ecx,eax
c000c58f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c593:	8d 50 03             	lea    edx,[eax+0x3]
c000c596:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c59a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c59e:	0f b6 c0             	movzx  eax,al
c000c5a1:	c1 e0 18             	shl    eax,0x18
c000c5a4:	09 c1                	or     ecx,eax
c000c5a6:	89 ca                	mov    edx,ecx
c000c5a8:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c5ad:	0f b6 c0             	movzx  eax,al
c000c5b0:	89 14 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],edx
c000c5b7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5c4:	01 d0                	add    eax,edx
c000c5c6:	83 c0 2c             	add    eax,0x2c
c000c5c9:	8a 00                	mov    al,BYTE PTR [eax]
c000c5cb:	0f b6 d0             	movzx  edx,al
c000c5ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5d2:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5d9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5dd:	0f b6 c0             	movzx  eax,al
c000c5e0:	c1 e0 08             	shl    eax,0x8
c000c5e3:	89 d1                	mov    ecx,edx
c000c5e5:	09 c1                	or     ecx,eax
c000c5e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5eb:	8d 50 02             	lea    edx,[eax+0x2]
c000c5ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5f2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5f6:	0f b6 c0             	movzx  eax,al
c000c5f9:	c1 e0 10             	shl    eax,0x10
c000c5fc:	09 c1                	or     ecx,eax
c000c5fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c602:	8d 50 03             	lea    edx,[eax+0x3]
c000c605:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c609:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c60d:	0f b6 c0             	movzx  eax,al
c000c610:	c1 e0 18             	shl    eax,0x18
c000c613:	09 c1                	or     ecx,eax
c000c615:	89 ca                	mov    edx,ecx
c000c617:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c61c:	0f b6 c0             	movzx  eax,al
c000c61f:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c000c626:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c62b:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c630:	83 c0 01             	add    eax,0x1
c000c633:	a2 40 be 02 c0       	mov    ds:0xc002be40,al
c000c638:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c63d:	0f b6 c0             	movzx  eax,al
c000c640:	83 ec 08             	sub    esp,0x8
c000c643:	50                   	push   eax
c000c644:	68 b2 3a 02 c0       	push   0xc0023ab2
c000c649:	e8 18 a9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c64e:	83 c4 10             	add    esp,0x10
c000c651:	e9 b2 01 00 00       	jmp    c000c808 <scanMADT()+0x484>
c000c656:	66 90                	xchg   ax,ax
c000c658:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c65d:	83 f8 02             	cmp    eax,0x2
c000c660:	0f 85 ea 00 00 00    	jne    c000c750 <scanMADT()+0x3cc>
c000c666:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c66a:	8d 50 01             	lea    edx,[eax+0x1]
c000c66d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c671:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c675:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c679:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c67d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c681:	8d 50 01             	lea    edx,[eax+0x1]
c000c684:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c688:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c68c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c690:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c694:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c698:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c69c:	01 d0                	add    eax,edx
c000c69e:	83 c0 2c             	add    eax,0x2c
c000c6a1:	8a 00                	mov    al,BYTE PTR [eax]
c000c6a3:	0f b6 d0             	movzx  edx,al
c000c6a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6aa:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6b1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6b5:	0f b6 c0             	movzx  eax,al
c000c6b8:	c1 e0 08             	shl    eax,0x8
c000c6bb:	89 d1                	mov    ecx,edx
c000c6bd:	09 c1                	or     ecx,eax
c000c6bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6c3:	8d 50 02             	lea    edx,[eax+0x2]
c000c6c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6ce:	0f b6 c0             	movzx  eax,al
c000c6d1:	c1 e0 10             	shl    eax,0x10
c000c6d4:	09 c1                	or     ecx,eax
c000c6d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6da:	8d 50 03             	lea    edx,[eax+0x3]
c000c6dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6e1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6e5:	0f b6 c0             	movzx  eax,al
c000c6e8:	c1 e0 18             	shl    eax,0x18
c000c6eb:	09 c8                	or     eax,ecx
c000c6ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c6f1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c6f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6fe:	01 d0                	add    eax,edx
c000c700:	83 c0 2c             	add    eax,0x2c
c000c703:	8a 00                	mov    al,BYTE PTR [eax]
c000c705:	0f b6 d0             	movzx  edx,al
c000c708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c70c:	8d 48 01             	lea    ecx,[eax+0x1]
c000c70f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c713:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c717:	0f b6 c0             	movzx  eax,al
c000c71a:	c1 e0 08             	shl    eax,0x8
c000c71d:	09 d0                	or     eax,edx
c000c71f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c724:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c729:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c72e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c732:	88 90 c8 61 02 c0    	mov    BYTE PTR [eax-0x3ffd9e38],dl
c000c738:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c73d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000c742:	66 89 94 00 20 be 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd41e0],dx
c000c74a:	e9 b9 00 00 00       	jmp    c000c808 <scanMADT()+0x484>
c000c74f:	90                   	nop
c000c750:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c755:	83 f8 04             	cmp    eax,0x4
c000c758:	0f 85 9a 00 00 00    	jne    c000c7f8 <scanMADT()+0x474>
c000c75e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c762:	8d 50 01             	lea    edx,[eax+0x1]
c000c765:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c769:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c76d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c771:	0f b6 c0             	movzx  eax,al
c000c774:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c778:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c77c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c780:	01 d0                	add    eax,edx
c000c782:	83 c0 2c             	add    eax,0x2c
c000c785:	8a 00                	mov    al,BYTE PTR [eax]
c000c787:	0f b6 d0             	movzx  edx,al
c000c78a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c78e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c791:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c795:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c799:	0f b6 c0             	movzx  eax,al
c000c79c:	c1 e0 08             	shl    eax,0x8
c000c79f:	09 d0                	or     eax,edx
c000c7a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7a5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c7aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ae:	8d 50 01             	lea    edx,[eax+0x1]
c000c7b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7bd:	0f b6 c0             	movzx  eax,al
c000c7c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7c8:	c1 e0 08             	shl    eax,0x8
c000c7cb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c7cf:	89 c1                	mov    ecx,eax
c000c7d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7d5:	c1 e0 18             	shl    eax,0x18
c000c7d8:	89 c3                	mov    ebx,eax
c000c7da:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c000c7df:	8d 50 01             	lea    edx,[eax+0x1]
c000c7e2:	89 15 8c bd 02 c0    	mov    DWORD PTR ds:0xc002bd8c,edx
c000c7e8:	09 d9                	or     ecx,ebx
c000c7ea:	89 ca                	mov    edx,ecx
c000c7ec:	89 14 85 a0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4260],edx
c000c7f3:	eb 13                	jmp    c000c808 <scanMADT()+0x484>
c000c7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c7f8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c7fd:	83 f8 05             	cmp    eax,0x5
c000c800:	75 06                	jne    c000c808 <scanMADT()+0x484>
c000c802:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c807:	90                   	nop
c000c808:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c80d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c811:	01 d0                	add    eax,edx
c000c813:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c817:	e9 38 fc ff ff       	jmp    c000c454 <scanMADT()+0xd0>
c000c81c:	90                   	nop
c000c81d:	eb 0d                	jmp    c000c82c <scanMADT()+0x4a8>
c000c81f:	90                   	nop
c000c820:	90                   	nop
c000c821:	eb 09                	jmp    c000c82c <scanMADT()+0x4a8>
c000c823:	90                   	nop
c000c824:	90                   	nop
c000c825:	eb 05                	jmp    c000c82c <scanMADT()+0x4a8>
c000c827:	90                   	nop
c000c828:	90                   	nop
c000c829:	8d 76 00             	lea    esi,[esi+0x0]
c000c82c:	83 c4 38             	add    esp,0x38
c000c82f:	5b                   	pop    ebx
c000c830:	c3                   	ret    
c000c831:	90                   	nop
c000c832:	66 90                	xchg   ax,ax

c000c834 <ACPI::ACPI()>:
c000c834:	83 ec 0c             	sub    esp,0xc
c000c837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c83b:	83 ec 08             	sub    esp,0x8
c000c83e:	68 ce 3a 02 c0       	push   0xc0023ace
c000c843:	50                   	push   eax
c000c844:	e8 0f d3 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000c849:	83 c4 10             	add    esp,0x10
c000c84c:	ba ec 3c 02 c0       	mov    edx,0xc0023cec
c000c851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c855:	89 10                	mov    DWORD PTR [eax],edx
c000c857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c85b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c866:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c874:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c87e:	90                   	nop
c000c87f:	83 c4 0c             	add    esp,0xc
c000c882:	c3                   	ret    
c000c883:	90                   	nop

c000c884 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c884:	83 ec 2c             	sub    esp,0x2c
c000c887:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c88b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c88f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000c893:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000c897:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c89c:	88 c8                	mov    al,cl
c000c89e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c8a7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8af:	90                   	nop
c000c8b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8b4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8ba:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8be:	0f 8d b0 00 00 00    	jge    c000c974 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c8c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8cc:	83 c2 2a             	add    edx,0x2a
c000c8cf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c8d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c8d8:	0f b7 c0             	movzx  eax,ax
c000c8db:	39 c2                	cmp    edx,eax
c000c8dd:	0f 85 85 00 00 00    	jne    c000c968 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8eb:	83 c2 2a             	add    edx,0x2a
c000c8ee:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c8f2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c8f7:	0f b6 c0             	movzx  eax,al
c000c8fa:	39 c2                	cmp    edx,eax
c000c8fc:	75 6a                	jne    c000c968 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8fe:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c903:	85 c0                	test   eax,eax
c000c905:	74 3d                	je     c000c944 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c907:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c90b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c90f:	83 c2 2a             	add    edx,0x2a
c000c912:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c916:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c91a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c91d:	39 c2                	cmp    edx,eax
c000c91f:	74 13                	je     c000c934 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c921:	83 ec 0c             	sub    esp,0xc
c000c924:	68 6c 3c 02 c0       	push   0xc0023c6c
c000c929:	e8 b6 32 00 00       	call   c000fbe4 <KePanic(char const*)>
c000c92e:	83 c4 10             	add    esp,0x10
c000c931:	8d 76 00             	lea    esi,[esi+0x0]
c000c934:	83 ec 0c             	sub    esp,0xc
c000c937:	68 d3 3a 02 c0       	push   0xc0023ad3
c000c93c:	e8 a3 32 00 00       	call   c000fbe4 <KePanic(char const*)>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c948:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c94c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c950:	83 c2 2a             	add    edx,0x2a
c000c953:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c957:	8b 02                	mov    eax,DWORD PTR [edx]
c000c959:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c95c:	89 01                	mov    DWORD PTR [ecx],eax
c000c95e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c961:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c966:	66 90                	xchg   ax,ax
c000c968:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c96d:	e9 3e ff ff ff       	jmp    c000c8b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c972:	66 90                	xchg   ax,ax
c000c974:	90                   	nop
c000c975:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c979:	83 c4 2c             	add    esp,0x2c
c000c97c:	c2 04 00             	ret    0x4
c000c97f:	90                   	nop

c000c980 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c980:	83 ec 1c             	sub    esp,0x1c
c000c983:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c987:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c98b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c98f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c994:	88 c8                	mov    al,cl
c000c996:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c99a:	88 d0                	mov    al,dl
c000c99c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c9a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ae:	83 c2 2a             	add    edx,0x2a
c000c9b1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000c9b5:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000c9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9bd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9ce:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000c9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9dd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c9e1:	83 c0 01             	add    eax,0x1
c000c9e4:	88 c1                	mov    cl,al
c000c9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ea:	83 c2 2a             	add    edx,0x2a
c000c9ed:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c9f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ff:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ca02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ca06:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ca0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca0e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca14:	8d 50 01             	lea    edx,[eax+0x1]
c000ca17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca1b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca25:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca2b:	3d 00 02 00 00       	cmp    eax,0x200
c000ca30:	75 12                	jne    c000ca44 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca32:	83 ec 0c             	sub    esp,0xc
c000ca35:	68 e2 3a 02 c0       	push   0xc0023ae2
c000ca3a:	e8 a5 31 00 00       	call   c000fbe4 <KePanic(char const*)>
c000ca3f:	83 c4 10             	add    esp,0x10
c000ca42:	66 90                	xchg   ax,ax
c000ca44:	90                   	nop
c000ca45:	83 c4 1c             	add    esp,0x1c
c000ca48:	c3                   	ret    
c000ca49:	90                   	nop
c000ca4a:	66 90                	xchg   ax,ax

c000ca4c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca4c:	b8 00 00 00 00       	mov    eax,0x0
c000ca51:	c3                   	ret    
c000ca52:	66 90                	xchg   ax,ax

c000ca54 <ACPI::detectPCI()>:
c000ca54:	53                   	push   ebx
c000ca55:	83 ec 28             	sub    esp,0x28
c000ca58:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca5d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca62:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000ca67:	83 ec 08             	sub    esp,0x8
c000ca6a:	68 ff 3a 02 c0       	push   0xc0023aff
c000ca6f:	50                   	push   eax
c000ca70:	e8 9b f8 ff ff       	call   c000c310 <findDataTable(unsigned char*, char*)>
c000ca75:	83 c4 10             	add    esp,0x10
c000ca78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ca7c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca81:	74 0d                	je     c000ca90 <ACPI::detectPCI()+0x3c>
c000ca83:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca88:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ca90:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ca98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca9c:	8a 00                	mov    al,BYTE PTR [eax]
c000ca9e:	0f b6 c0             	movzx  eax,al
c000caa1:	83 f8 01             	cmp    eax,0x1
c000caa4:	75 0e                	jne    c000cab4 <ACPI::detectPCI()+0x60>
c000caa6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000caab:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cab0:	eb 2e                	jmp    c000cae0 <ACPI::detectPCI()+0x8c>
c000cab2:	66 90                	xchg   ax,ax
c000cab4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cab8:	8a 00                	mov    al,BYTE PTR [eax]
c000caba:	0f b6 c0             	movzx  eax,al
c000cabd:	83 f8 02             	cmp    eax,0x2
c000cac0:	75 1e                	jne    c000cae0 <ACPI::detectPCI()+0x8c>
c000cac2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cac7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cacc:	85 c0                	test   eax,eax
c000cace:	74 10                	je     c000cae0 <ACPI::detectPCI()+0x8c>
c000cad0:	83 ec 0c             	sub    esp,0xc
c000cad3:	68 9c 3c 02 c0       	push   0xc0023c9c
c000cad8:	e8 07 31 00 00       	call   c000fbe4 <KePanic(char const*)>
c000cadd:	83 c4 10             	add    esp,0x10
c000cae0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cae4:	83 f0 01             	xor    eax,0x1
c000cae7:	0f b6 c0             	movzx  eax,al
c000caea:	85 c0                	test   eax,eax
c000caec:	74 46                	je     c000cb34 <ACPI::detectPCI()+0xe0>
c000caee:	e8 3d 36 ff ff       	call   c0000130 <manualPCIProbe>
c000caf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000caf7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cafc:	75 0e                	jne    c000cb0c <ACPI::detectPCI()+0xb8>
c000cafe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb03:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cb08:	eb 2a                	jmp    c000cb34 <ACPI::detectPCI()+0xe0>
c000cb0a:	66 90                	xchg   ax,ax
c000cb0c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb11:	75 21                	jne    c000cb34 <ACPI::detectPCI()+0xe0>
c000cb13:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb18:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb1d:	85 c0                	test   eax,eax
c000cb1f:	74 13                	je     c000cb34 <ACPI::detectPCI()+0xe0>
c000cb21:	83 ec 0c             	sub    esp,0xc
c000cb24:	68 9c 3c 02 c0       	push   0xc0023c9c
c000cb29:	e8 b6 30 00 00       	call   c000fbe4 <KePanic(char const*)>
c000cb2e:	83 c4 10             	add    esp,0x10
c000cb31:	8d 76 00             	lea    esi,[esi+0x0]
c000cb34:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb39:	85 c0                	test   eax,eax
c000cb3b:	0f 84 87 00 00 00    	je     c000cbc8 <ACPI::detectPCI()+0x174>
c000cb41:	83 ec 0c             	sub    esp,0xc
c000cb44:	68 04 3b 02 c0       	push   0xc0023b04
c000cb49:	e8 c3 06 00 00       	call   c000d211 <KeSetBootMessage(char const*)>
c000cb4e:	83 c4 10             	add    esp,0x10
c000cb51:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb59:	83 ec 0c             	sub    esp,0xc
c000cb5c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb60:	e8 23 2c 00 00       	call   c000f788 <malloc>
c000cb65:	83 c4 10             	add    esp,0x10
c000cb68:	89 c3                	mov    ebx,eax
c000cb6a:	83 ec 0c             	sub    esp,0xc
c000cb6d:	53                   	push   ebx
c000cb6e:	e8 07 0f 01 00       	call   c001da7a <PCI::PCI()>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cb7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb7e:	83 ec 08             	sub    esp,0x8
c000cb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb85:	50                   	push   eax
c000cb86:	e8 6b ce ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000cb8b:	83 c4 10             	add    esp,0x10
c000cb8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb92:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb94:	83 c0 08             	add    eax,0x8
c000cb97:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb99:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cb9e:	85 d2                	test   edx,edx
c000cba0:	74 0a                	je     c000cbac <ACPI::detectPCI()+0x158>
c000cba2:	ba 01 00 00 00       	mov    edx,0x1
c000cba7:	eb 0b                	jmp    c000cbb4 <ACPI::detectPCI()+0x160>
c000cba9:	8d 76 00             	lea    esi,[esi+0x0]
c000cbac:	ba 02 00 00 00       	mov    edx,0x2
c000cbb1:	8d 76 00             	lea    esi,[esi+0x0]
c000cbb4:	6a 00                	push   0x0
c000cbb6:	6a 00                	push   0x0
c000cbb8:	52                   	push   edx
c000cbb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbbd:	ff d0                	call   eax
c000cbbf:	83 c4 10             	add    esp,0x10
c000cbc2:	e9 91 00 00 00       	jmp    c000cc58 <ACPI::detectPCI()+0x204>
c000cbc7:	90                   	nop
c000cbc8:	83 ec 0c             	sub    esp,0xc
c000cbcb:	68 1c 3b 02 c0       	push   0xc0023b1c
c000cbd0:	e8 3c 06 00 00       	call   c000d211 <KeSetBootMessage(char const*)>
c000cbd5:	83 c4 10             	add    esp,0x10
c000cbd8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cbdf:	83 ec 0c             	sub    esp,0xc
c000cbe2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbe6:	e8 9d 2b 00 00       	call   c000f788 <malloc>
c000cbeb:	83 c4 10             	add    esp,0x10
c000cbee:	89 c3                	mov    ebx,eax
c000cbf0:	83 ec 0c             	sub    esp,0xc
c000cbf3:	53                   	push   ebx
c000cbf4:	e8 89 1a 01 00       	call   c001e682 <IDE::IDE()>
c000cbf9:	83 c4 10             	add    esp,0x10
c000cbfc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cc00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc04:	83 ec 08             	sub    esp,0x8
c000cc07:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc0b:	50                   	push   eax
c000cc0c:	e8 e5 cd ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc18:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc26:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc33:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc40:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc42:	83 c0 08             	add    eax,0x8
c000cc45:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc47:	6a 00                	push   0x0
c000cc49:	6a 00                	push   0x0
c000cc4b:	6a 00                	push   0x0
c000cc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc51:	ff d0                	call   eax
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	66 90                	xchg   ax,ax
c000cc58:	90                   	nop
c000cc59:	83 c4 28             	add    esp,0x28
c000cc5c:	5b                   	pop    ebx
c000cc5d:	c3                   	ret    
c000cc5e:	66 90                	xchg   ax,ax

c000cc60 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc60:	83 ec 0c             	sub    esp,0xc
c000cc63:	83 ec 0c             	sub    esp,0xc
c000cc66:	68 31 3b 02 c0       	push   0xc0023b31
c000cc6b:	e8 74 2f 00 00       	call   c000fbe4 <KePanic(char const*)>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	90                   	nop
c000cc74:	83 c4 0c             	add    esp,0xc
c000cc77:	c3                   	ret    

c000cc78 <ACPI::open(int, int, void*)>:
c000cc78:	55                   	push   ebp
c000cc79:	89 e5                	mov    ebp,esp
c000cc7b:	53                   	push   ebx
c000cc7c:	81 ec 74 01 00 00    	sub    esp,0x174
c000cc82:	83 ec 0c             	sub    esp,0xc
c000cc85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cc88:	e8 c7 fd ff ff       	call   c000ca54 <ACPI::detectPCI()>
c000cc8d:	83 c4 10             	add    esp,0x10
c000cc90:	83 ec 0c             	sub    esp,0xc
c000cc93:	68 c4 3c 02 c0       	push   0xc0023cc4
c000cc98:	e8 74 05 00 00       	call   c000d211 <KeSetBootMessage(char const*)>
c000cc9d:	83 c4 10             	add    esp,0x10
c000cca0:	b8 4c 05 00 00       	mov    eax,0x54c
c000cca5:	8a 00                	mov    al,BYTE PTR [eax]
c000cca7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000ccaa:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000ccae:	83 f8 01             	cmp    eax,0x1
c000ccb1:	75 15                	jne    c000ccc8 <ACPI::open(int, int, void*)+0x50>
c000ccb3:	83 ec 0c             	sub    esp,0xc
c000ccb6:	68 42 3b 02 c0       	push   0xc0023b42
c000ccbb:	e8 23 8a 00 00       	call   c00156e3 <Thr::loadKernelSymbolTable(char const*)>
c000ccc0:	83 c4 10             	add    esp,0x10
c000ccc3:	eb 33                	jmp    c000ccf8 <ACPI::open(int, int, void*)+0x80>
c000ccc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ccc8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cccc:	3d bb 00 00 00       	cmp    eax,0xbb
c000ccd1:	75 15                	jne    c000cce8 <ACPI::open(int, int, void*)+0x70>
c000ccd3:	83 ec 0c             	sub    esp,0xc
c000ccd6:	68 60 3b 02 c0       	push   0xc0023b60
c000ccdb:	e8 03 8a 00 00       	call   c00156e3 <Thr::loadKernelSymbolTable(char const*)>
c000cce0:	83 c4 10             	add    esp,0x10
c000cce3:	eb 13                	jmp    c000ccf8 <ACPI::open(int, int, void*)+0x80>
c000cce5:	8d 76 00             	lea    esi,[esi+0x0]
c000cce8:	83 ec 0c             	sub    esp,0xc
c000cceb:	68 7e 3b 02 c0       	push   0xc0023b7e
c000ccf0:	e8 ef 2e 00 00       	call   c000fbe4 <KePanic(char const*)>
c000ccf5:	83 c4 10             	add    esp,0x10
c000ccf8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ccfc:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000cd03:	83 ec 0c             	sub    esp,0xc
c000cd06:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000cd09:	e8 7a 2a 00 00       	call   c000f788 <malloc>
c000cd0e:	83 c4 10             	add    esp,0x10
c000cd11:	89 c3                	mov    ebx,eax
c000cd13:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000cd18:	83 ec 04             	sub    esp,0x4
c000cd1b:	50                   	push   eax
c000cd1c:	68 98 3b 02 c0       	push   0xc0023b98
c000cd21:	53                   	push   ebx
c000cd22:	e8 61 b4 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000cd27:	83 c4 10             	add    esp,0x10
c000cd2a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000cd2d:	83 ec 08             	sub    esp,0x8
c000cd30:	6a 01                	push   0x1
c000cd32:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd35:	e8 6c b4 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000cd3a:	83 c4 10             	add    esp,0x10
c000cd3d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000cd40:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000cd44:	75 12                	jne    c000cd58 <ACPI::open(int, int, void*)+0xe0>
c000cd46:	83 ec 0c             	sub    esp,0xc
c000cd49:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd4c:	e8 b3 b4 ff ff       	call   c0008204 <File::close()>
c000cd51:	83 c4 10             	add    esp,0x10
c000cd54:	eb 06                	jmp    c000cd5c <ACPI::open(int, int, void*)+0xe4>
c000cd56:	66 90                	xchg   ax,ax
c000cd58:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cd5c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000cd60:	74 16                	je     c000cd78 <ACPI::open(int, int, void*)+0x100>
c000cd62:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cd65:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd67:	83 c0 08             	add    eax,0x8
c000cd6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd6c:	83 ec 0c             	sub    esp,0xc
c000cd6f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd72:	ff d0                	call   eax
c000cd74:	83 c4 10             	add    esp,0x10
c000cd77:	90                   	nop
c000cd78:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000cd7b:	83 f0 01             	xor    eax,0x1
c000cd7e:	0f b6 c0             	movzx  eax,al
c000cd81:	85 c0                	test   eax,eax
c000cd83:	74 27                	je     c000cdac <ACPI::open(int, int, void*)+0x134>
c000cd85:	83 ec 0c             	sub    esp,0xc
c000cd88:	68 b6 3b 02 c0       	push   0xc0023bb6
c000cd8d:	e8 7f 04 00 00       	call   c000d211 <KeSetBootMessage(char const*)>
c000cd92:	83 c4 10             	add    esp,0x10
c000cd95:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000cd9c:	83 ec 0c             	sub    esp,0xc
c000cd9f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000cda2:	e8 59 66 00 00       	call   c0013400 <Virt::setupPageSwapping(int)>
c000cda7:	83 c4 10             	add    esp,0x10
c000cdaa:	66 90                	xchg   ax,ax
c000cdac:	83 ec 0c             	sub    esp,0xc
c000cdaf:	68 d1 3b 02 c0       	push   0xc0023bd1
c000cdb4:	e8 58 04 00 00       	call   c000d211 <KeSetBootMessage(char const*)>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdbf:	83 ec 08             	sub    esp,0x8
c000cdc2:	6a 13                	push   0x13
c000cdc4:	50                   	push   eax
c000cdc5:	e8 5a cf ff ff       	call   c0009d24 <getDevicesOfType(DeviceType)>
c000cdca:	83 c4 0c             	add    esp,0xc
c000cdcd:	8d 76 00             	lea    esi,[esi+0x0]
c000cdd0:	83 ec 0c             	sub    esp,0xc
c000cdd3:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdd6:	50                   	push   eax
c000cdd7:	e8 40 51 01 00       	call   c0021f1c <LinkedList<Device>::isEmpty()>
c000cddc:	83 c4 10             	add    esp,0x10
c000cddf:	83 f0 01             	xor    eax,0x1
c000cde2:	0f b6 c0             	movzx  eax,al
c000cde5:	85 c0                	test   eax,eax
c000cde7:	0f 84 1f 01 00 00    	je     c000cf0c <ACPI::open(int, int, void*)+0x294>
c000cded:	83 ec 0c             	sub    esp,0xc
c000cdf0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdf3:	50                   	push   eax
c000cdf4:	e8 3f 51 01 00       	call   c0021f38 <LinkedList<Device>::getFirstElement()>
c000cdf9:	83 c4 10             	add    esp,0x10
c000cdfc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000cdff:	83 ec 0c             	sub    esp,0xc
c000ce02:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ce05:	50                   	push   eax
c000ce06:	e8 35 51 01 00       	call   c0021f40 <LinkedList<Device>::removeFirst()>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ce11:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ce14:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ce17:	b8 24 00 00 00       	mov    eax,0x24
c000ce1c:	83 e0 fc             	and    eax,0xfffffffc
c000ce1f:	89 c3                	mov    ebx,eax
c000ce21:	b8 00 00 00 00       	mov    eax,0x0
c000ce26:	66 90                	xchg   ax,ax
c000ce28:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ce2f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ce36:	83 c0 04             	add    eax,0x4
c000ce39:	39 d8                	cmp    eax,ebx
c000ce3b:	72 eb                	jb     c000ce28 <ACPI::open(int, int, void*)+0x1b0>
c000ce3d:	83 ec 08             	sub    esp,0x8
c000ce40:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ce46:	50                   	push   eax
c000ce47:	83 ec 24             	sub    esp,0x24
c000ce4a:	89 e1                	mov    ecx,esp
c000ce4c:	b8 24 00 00 00       	mov    eax,0x24
c000ce51:	83 e0 fc             	and    eax,0xfffffffc
c000ce54:	89 c3                	mov    ebx,eax
c000ce56:	b8 00 00 00 00       	mov    eax,0x0
c000ce5b:	90                   	nop
c000ce5c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000ce63:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000ce66:	83 c0 04             	add    eax,0x4
c000ce69:	39 d8                	cmp    eax,ebx
c000ce6b:	72 ef                	jb     c000ce5c <ACPI::open(int, int, void*)+0x1e4>
c000ce6d:	e8 f0 10 01 00       	call   c001df62 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ce72:	83 c4 30             	add    esp,0x30
c000ce75:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000ce78:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ce7c:	0f 84 4e ff ff ff    	je     c000cdd0 <ACPI::open(int, int, void*)+0x158>
c000ce82:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ce89:	83 ec 0c             	sub    esp,0xc
c000ce8c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000ce8f:	e8 f4 28 00 00       	call   c000f788 <malloc>
c000ce94:	83 c4 10             	add    esp,0x10
c000ce97:	89 c3                	mov    ebx,eax
c000ce99:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000ce9e:	83 ec 04             	sub    esp,0x4
c000cea1:	50                   	push   eax
c000cea2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000cea5:	53                   	push   ebx
c000cea6:	e8 dd b2 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000ceb1:	83 ec 0c             	sub    esp,0xc
c000ceb4:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ceb7:	e8 ae b5 ff ff       	call   c000846a <File::exists()>
c000cebc:	83 c4 10             	add    esp,0x10
c000cebf:	0f b6 c0             	movzx  eax,al
c000cec2:	85 c0                	test   eax,eax
c000cec4:	74 22                	je     c000cee8 <ACPI::open(int, int, void*)+0x270>
c000cec6:	83 ec 08             	sub    esp,0x8
c000cec9:	6a 01                	push   0x1
c000cecb:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000cece:	e8 b4 92 00 00       	call   c0016187 <Thr::loadDLL(char const*, bool)>
c000ced3:	83 c4 10             	add    esp,0x10
c000ced6:	83 ec 08             	sub    esp,0x8
c000ced9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000cedc:	50                   	push   eax
c000cedd:	e8 06 95 00 00       	call   c00163e8 <Thr::executeDLL(unsigned long, void*)>
c000cee2:	83 c4 10             	add    esp,0x10
c000cee5:	8d 76 00             	lea    esi,[esi+0x0]
c000cee8:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000ceec:	0f 84 de fe ff ff    	je     c000cdd0 <ACPI::open(int, int, void*)+0x158>
c000cef2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000cef5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cef7:	83 c0 08             	add    eax,0x8
c000cefa:	8b 00                	mov    eax,DWORD PTR [eax]
c000cefc:	83 ec 0c             	sub    esp,0xc
c000ceff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000cf02:	ff d0                	call   eax
c000cf04:	83 c4 10             	add    esp,0x10
c000cf07:	e9 c4 fe ff ff       	jmp    c000cdd0 <ACPI::open(int, int, void*)+0x158>
c000cf0c:	83 ec 0c             	sub    esp,0xc
c000cf0f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cf12:	50                   	push   eax
c000cf13:	e8 00 50 01 00       	call   c0021f18 <LinkedList<Device>::~LinkedList()>
c000cf18:	83 c4 10             	add    esp,0x10
c000cf1b:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c000cf21:	83 ec 08             	sub    esp,0x8
c000cf24:	6a 01                	push   0x1
c000cf26:	68 eb 3b 02 c0       	push   0xc0023beb
c000cf2b:	e8 57 92 00 00       	call   c0016187 <Thr::loadDLL(char const*, bool)>
c000cf30:	83 c4 10             	add    esp,0x10
c000cf33:	83 ec 08             	sub    esp,0x8
c000cf36:	53                   	push   ebx
c000cf37:	50                   	push   eax
c000cf38:	e8 ab 94 00 00       	call   c00163e8 <Thr::executeDLL(unsigned long, void*)>
c000cf3d:	83 c4 10             	add    esp,0x10
c000cf40:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000cf45:	85 c0                	test   eax,eax
c000cf47:	0f 84 ef 00 00 00    	je     c000d03c <ACPI::open(int, int, void*)+0x3c4>
c000cf4d:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000cf52:	85 c0                	test   eax,eax
c000cf54:	0f 84 e2 00 00 00    	je     c000d03c <ACPI::open(int, int, void*)+0x3c4>
c000cf5a:	83 ec 0c             	sub    esp,0xc
c000cf5d:	68 08 3c 02 c0       	push   0xc0023c08
c000cf62:	e8 aa 02 00 00       	call   c000d211 <KeSetBootMessage(char const*)>
c000cf67:	83 c4 10             	add    esp,0x10
c000cf6a:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000cf71:	83 ec 0c             	sub    esp,0xc
c000cf74:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000cf77:	e8 0c 28 00 00       	call   c000f788 <malloc>
c000cf7c:	83 c4 10             	add    esp,0x10
c000cf7f:	89 c3                	mov    ebx,eax
c000cf81:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000cf86:	83 ec 04             	sub    esp,0x4
c000cf89:	50                   	push   eax
c000cf8a:	68 25 3c 02 c0       	push   0xc0023c25
c000cf8f:	53                   	push   ebx
c000cf90:	e8 f3 b1 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000cf9b:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf9f:	74 1b                	je     c000cfbc <ACPI::open(int, int, void*)+0x344>
c000cfa1:	83 ec 0c             	sub    esp,0xc
c000cfa4:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cfa7:	e8 be b4 ff ff       	call   c000846a <File::exists()>
c000cfac:	83 c4 10             	add    esp,0x10
c000cfaf:	0f b6 c0             	movzx  eax,al
c000cfb2:	85 c0                	test   eax,eax
c000cfb4:	74 06                	je     c000cfbc <ACPI::open(int, int, void*)+0x344>
c000cfb6:	b0 01                	mov    al,0x1
c000cfb8:	eb 06                	jmp    c000cfc0 <ACPI::open(int, int, void*)+0x348>
c000cfba:	66 90                	xchg   ax,ax
c000cfbc:	b0 00                	mov    al,0x0
c000cfbe:	66 90                	xchg   ax,ax
c000cfc0:	0f b6 c0             	movzx  eax,al
c000cfc3:	85 c0                	test   eax,eax
c000cfc5:	74 21                	je     c000cfe8 <ACPI::open(int, int, void*)+0x370>
c000cfc7:	83 ec 08             	sub    esp,0x8
c000cfca:	6a 01                	push   0x1
c000cfcc:	68 25 3c 02 c0       	push   0xc0023c25
c000cfd1:	e8 b1 91 00 00       	call   c0016187 <Thr::loadDLL(char const*, bool)>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	83 ec 08             	sub    esp,0x8
c000cfdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cfdf:	50                   	push   eax
c000cfe0:	e8 03 94 00 00       	call   c00163e8 <Thr::executeDLL(unsigned long, void*)>
c000cfe5:	83 c4 10             	add    esp,0x10
c000cfe8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cfec:	74 1e                	je     c000d00c <ACPI::open(int, int, void*)+0x394>
c000cfee:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cff2:	74 18                	je     c000d00c <ACPI::open(int, int, void*)+0x394>
c000cff4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000cff7:	8b 00                	mov    eax,DWORD PTR [eax]
c000cff9:	83 c0 08             	add    eax,0x8
c000cffc:	8b 00                	mov    eax,DWORD PTR [eax]
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000d004:	ff d0                	call   eax
c000d006:	83 c4 10             	add    esp,0x10
c000d009:	8d 76 00             	lea    esi,[esi+0x0]
c000d00c:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000d011:	83 ec 08             	sub    esp,0x8
c000d014:	68 42 3c 02 c0       	push   0xc0023c42
c000d019:	50                   	push   eax
c000d01a:	e8 f1 f2 ff ff       	call   c000c310 <findDataTable(unsigned char*, char*)>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000d025:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000d029:	74 11                	je     c000d03c <ACPI::open(int, int, void*)+0x3c4>
c000d02b:	83 ec 08             	sub    esp,0x8
c000d02e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000d031:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d034:	e8 27 fc ff ff       	call   c000cc60 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d039:	83 c4 10             	add    esp,0x10
c000d03c:	b8 00 00 00 00       	mov    eax,0x0
c000d041:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d044:	c9                   	leave  
c000d045:	c3                   	ret    
c000d046:	66 90                	xchg   ax,ax

c000d048 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d048:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d04e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d055:	89 c2                	mov    edx,eax
c000d057:	c1 fa 1f             	sar    edx,0x1f
c000d05a:	83 ec 04             	sub    esp,0x4
c000d05d:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d061:	51                   	push   ecx
c000d062:	52                   	push   edx
c000d063:	50                   	push   eax
c000d064:	e8 17 25 00 00       	call   c000f580 <KeItoa(long long, char*)>
c000d069:	83 c4 10             	add    esp,0x10
c000d06c:	83 ec 08             	sub    esp,0x8
c000d06f:	68 10 3d 02 c0       	push   0xc0023d10
c000d074:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d078:	50                   	push   eax
c000d079:	e8 d2 35 ff ff       	call   c0000650 <strcpy>
c000d07e:	83 c4 10             	add    esp,0x10
c000d081:	83 ec 08             	sub    esp,0x8
c000d084:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d08b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d08f:	50                   	push   eax
c000d090:	e8 db 37 ff ff       	call   c0000870 <strcat>
c000d095:	83 c4 10             	add    esp,0x10
c000d098:	83 ec 08             	sub    esp,0x8
c000d09b:	68 1e 3d 02 c0       	push   0xc0023d1e
c000d0a0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0a4:	50                   	push   eax
c000d0a5:	e8 c6 37 ff ff       	call   c0000870 <strcat>
c000d0aa:	83 c4 10             	add    esp,0x10
c000d0ad:	83 ec 08             	sub    esp,0x8
c000d0b0:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d0b7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0bb:	50                   	push   eax
c000d0bc:	e8 af 37 ff ff       	call   c0000870 <strcat>
c000d0c1:	83 c4 10             	add    esp,0x10
c000d0c4:	83 ec 08             	sub    esp,0x8
c000d0c7:	68 21 3d 02 c0       	push   0xc0023d21
c000d0cc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0d0:	50                   	push   eax
c000d0d1:	e8 9a 37 ff ff       	call   c0000870 <strcat>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	83 ec 08             	sub    esp,0x8
c000d0dc:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d0e3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0e7:	50                   	push   eax
c000d0e8:	e8 83 37 ff ff       	call   c0000870 <strcat>
c000d0ed:	83 c4 10             	add    esp,0x10
c000d0f0:	83 ec 08             	sub    esp,0x8
c000d0f3:	68 21 3d 02 c0       	push   0xc0023d21
c000d0f8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0fc:	50                   	push   eax
c000d0fd:	e8 6e 37 ff ff       	call   c0000870 <strcat>
c000d102:	83 c4 10             	add    esp,0x10
c000d105:	83 ec 08             	sub    esp,0x8
c000d108:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d10c:	50                   	push   eax
c000d10d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d111:	50                   	push   eax
c000d112:	e8 59 37 ff ff       	call   c0000870 <strcat>
c000d117:	83 c4 10             	add    esp,0x10
c000d11a:	83 ec 0c             	sub    esp,0xc
c000d11d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d121:	50                   	push   eax
c000d122:	e8 bd 2a 00 00       	call   c000fbe4 <KePanic(char const*)>
c000d127:	83 c4 10             	add    esp,0x10
c000d12a:	90                   	nop
c000d12b:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d131:	c3                   	ret    

c000d132 <KeInitialiseAtexit()>:
c000d132:	83 ec 10             	sub    esp,0x10
c000d135:	68 80 00 00 00       	push   0x80
c000d13a:	6a 00                	push   0x0
c000d13c:	68 80 c0 02 c0       	push   0xc002c080
c000d141:	c7 05 e0 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bfe0,0x0
c000d14b:	e8 a0 33 ff ff       	call   c00004f0 <memset>
c000d150:	83 c4 1c             	add    esp,0x1c
c000d153:	c3                   	ret    

c000d154 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d154:	a1 e0 bf 02 c0       	mov    eax,ds:0xc002bfe0
c000d159:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d15d:	89 14 85 80 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f80],edx
c000d164:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d168:	89 14 85 00 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4000],edx
c000d16f:	40                   	inc    eax
c000d170:	a3 e0 bf 02 c0       	mov    ds:0xc002bfe0,eax
c000d175:	83 f8 1f             	cmp    eax,0x1f
c000d178:	7e 0d                	jle    c000d187 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d17a:	c7 44 24 04 23 3d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023d23
c000d182:	e9 5d 2a 00 00       	jmp    c000fbe4 <KePanic(char const*)>
c000d187:	c3                   	ret    

c000d188 <KeExecuteAtexit()>:
c000d188:	53                   	push   ebx
c000d189:	31 db                	xor    ebx,ebx
c000d18b:	83 ec 08             	sub    esp,0x8
c000d18e:	39 1d e0 bf 02 c0    	cmp    DWORD PTR ds:0xc002bfe0,ebx
c000d194:	7e 28                	jle    c000d1be <KeExecuteAtexit()+0x36>
c000d196:	8b 04 9d 80 c0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3f80]
c000d19d:	85 c0                	test   eax,eax
c000d19f:	74 1a                	je     c000d1bb <KeExecuteAtexit()+0x33>
c000d1a1:	83 ec 0c             	sub    esp,0xc
c000d1a4:	ff 34 9d 00 c0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4000]
c000d1ab:	ff d0                	call   eax
c000d1ad:	c7 04 9d 80 c0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd3f80],0x0
c000d1b8:	83 c4 10             	add    esp,0x10
c000d1bb:	43                   	inc    ebx
c000d1bc:	eb d0                	jmp    c000d18e <KeExecuteAtexit()+0x6>
c000d1be:	83 c4 08             	add    esp,0x8
c000d1c1:	5b                   	pop    ebx
c000d1c2:	c3                   	ret    
c000d1c3:	90                   	nop

c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d1c4:	8b 15 00 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c100
c000d1ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1ce:	21 d0                	and    eax,edx
c000d1d0:	0f 95 c0             	setne  al
c000d1d3:	c3                   	ret    

c000d1d4 <KeInitialiseBootConfigurationFlags()>:
c000d1d4:	b8 00 05 00 00       	mov    eax,0x500
c000d1d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1db:	a3 00 c1 02 c0       	mov    ds:0xc002c100,eax
c000d1e0:	90                   	nop
c000d1e1:	c3                   	ret    

c000d1e2 <KeDisplaySplashScreen()>:
c000d1e2:	53                   	push   ebx
c000d1e3:	bb 01 00 00 00       	mov    ebx,0x1
c000d1e8:	83 ec 08             	sub    esp,0x8
c000d1eb:	43                   	inc    ebx
c000d1ec:	0f be 83 3a 3d 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc2c6]
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	74 15                	je     c000d20c <KeDisplaySplashScreen()+0x2a>
c000d1f7:	83 ec 0c             	sub    esp,0xc
c000d1fa:	6a 01                	push   0x1
c000d1fc:	53                   	push   ebx
c000d1fd:	6a 00                	push   0x0
c000d1ff:	6a 0f                	push   0xf
c000d201:	50                   	push   eax
c000d202:	e8 25 e4 00 00       	call   c001b62c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d207:	83 c4 20             	add    esp,0x20
c000d20a:	eb df                	jmp    c000d1eb <KeDisplaySplashScreen()+0x9>
c000d20c:	83 c4 08             	add    esp,0x8
c000d20f:	5b                   	pop    ebx
c000d210:	c3                   	ret    

c000d211 <KeSetBootMessage(char const*)>:
c000d211:	57                   	push   edi
c000d212:	56                   	push   esi
c000d213:	53                   	push   ebx
c000d214:	31 db                	xor    ebx,ebx
c000d216:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d21a:	83 ec 0c             	sub    esp,0xc
c000d21d:	6a 14                	push   0x14
c000d21f:	53                   	push   ebx
c000d220:	43                   	inc    ebx
c000d221:	6a 00                	push   0x0
c000d223:	6a 00                	push   0x0
c000d225:	6a 20                	push   0x20
c000d227:	e8 00 e4 00 00       	call   c001b62c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d22c:	83 c4 20             	add    esp,0x20
c000d22f:	83 fb 50             	cmp    ebx,0x50
c000d232:	75 e6                	jne    c000d21a <KeSetBootMessage(char const*)+0x9>
c000d234:	83 ec 0c             	sub    esp,0xc
c000d237:	56                   	push   esi
c000d238:	e8 43 33 ff ff       	call   c0000580 <strlen>
c000d23d:	83 c4 10             	add    esp,0x10
c000d240:	29 c3                	sub    ebx,eax
c000d242:	d1 eb                	shr    ebx,1
c000d244:	89 df                	mov    edi,ebx
c000d246:	89 f0                	mov    eax,esi
c000d248:	29 d8                	sub    eax,ebx
c000d24a:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000d24e:	85 c0                	test   eax,eax
c000d250:	74 16                	je     c000d268 <KeSetBootMessage(char const*)+0x57>
c000d252:	83 ec 0c             	sub    esp,0xc
c000d255:	6a 14                	push   0x14
c000d257:	57                   	push   edi
c000d258:	47                   	inc    edi
c000d259:	6a 00                	push   0x0
c000d25b:	6a 07                	push   0x7
c000d25d:	50                   	push   eax
c000d25e:	e8 c9 e3 00 00       	call   c001b62c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d263:	83 c4 20             	add    esp,0x20
c000d266:	eb de                	jmp    c000d246 <KeSetBootMessage(char const*)+0x35>
c000d268:	5b                   	pop    ebx
c000d269:	5e                   	pop    esi
c000d26a:	5f                   	pop    edi
c000d26b:	c3                   	ret    

c000d26c <__cxa_atexit>:
c000d26c:	31 c0                	xor    eax,eax
c000d26e:	c3                   	ret    

c000d26f <__cxa_finalize>:
c000d26f:	c3                   	ret    

c000d270 <__stack_chk_fail>:
c000d270:	55                   	push   ebp
c000d271:	89 e5                	mov    ebp,esp
c000d273:	83 ec 10             	sub    esp,0x10
c000d276:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d279:	68 4f 3d 02 c0       	push   0xc0023d4f
c000d27e:	e8 e3 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d283:	58                   	pop    eax
c000d284:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d287:	5a                   	pop    edx
c000d288:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d28b:	68 4f 3d 02 c0       	push   0xc0023d4f
c000d290:	e8 d1 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d295:	c7 04 24 57 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d57
c000d29c:	e8 43 29 00 00       	call   c000fbe4 <KePanic(char const*)>
c000d2a1:	83 c4 10             	add    esp,0x10
c000d2a4:	c9                   	leave  
c000d2a5:	c3                   	ret    

c000d2a6 <__cxa_pure_virtual>:
c000d2a6:	83 ec 18             	sub    esp,0x18
c000d2a9:	68 6f 3d 02 c0       	push   0xc0023d6f
c000d2ae:	e8 31 29 00 00       	call   c000fbe4 <KePanic(char const*)>
c000d2b3:	83 c4 1c             	add    esp,0x1c
c000d2b6:	c3                   	ret    

c000d2b7 <operator new[](unsigned long)>:
c000d2b7:	e9 cc 24 00 00       	jmp    c000f788 <malloc>

c000d2bc <operator delete(void*, unsigned long)>:
c000d2bc:	e9 e7 24 00 00       	jmp    c000f7a8 <rfree>

c000d2c1 <operator delete[](void*)>:
c000d2c1:	e9 e2 24 00 00       	jmp    c000f7a8 <rfree>

c000d2c6 <operator delete[](void*, unsigned long)>:
c000d2c6:	e9 dd 24 00 00       	jmp    c000f7a8 <rfree>
c000d2cb:	90                   	nop

c000d2cc <CUnlockScheduler>:
c000d2cc:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000d2d4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000d2d9:	85 c0                	test   eax,eax
c000d2db:	75 03                	jne    c000d2e0 <CUnlockScheduler+0x14>
c000d2dd:	fb                   	sti    
c000d2de:	66 90                	xchg   ax,ax
c000d2e0:	90                   	nop
c000d2e1:	c3                   	ret    
c000d2e2:	66 90                	xchg   ax,ax

c000d2e4 <CLockScheduler>:
c000d2e4:	fa                   	cli    
c000d2e5:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000d2ea:	83 c0 01             	add    eax,0x1
c000d2ed:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000d2f2:	90                   	nop
c000d2f3:	c3                   	ret    

c000d2f4 <CPrintf>:
c000d2f4:	83 ec 0c             	sub    esp,0xc
c000d2f7:	83 ec 08             	sub    esp,0x8
c000d2fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d2fe:	68 82 3d 02 c0       	push   0xc0023d82
c000d303:	e8 5e 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d308:	83 c4 10             	add    esp,0x10
c000d30b:	90                   	nop
c000d30c:	83 c4 0c             	add    esp,0xc
c000d30f:	c3                   	ret    

c000d310 <CmOpen(char const*)>:
c000d310:	57                   	push   edi
c000d311:	56                   	push   esi
c000d312:	53                   	push   ebx
c000d313:	83 ec 1c             	sub    esp,0x1c
c000d316:	6a 30                	push   0x30
c000d318:	e8 6b 24 00 00       	call   c000f788 <malloc>
c000d31d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d324:	89 c3                	mov    ebx,eax
c000d326:	e8 5d 24 00 00       	call   c000f788 <malloc>
c000d32b:	83 c4 0c             	add    esp,0xc
c000d32e:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000d334:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d338:	89 c6                	mov    esi,eax
c000d33a:	50                   	push   eax
c000d33b:	e8 48 ae ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000d340:	83 c4 0c             	add    esp,0xc
c000d343:	89 33                	mov    DWORD PTR [ebx],esi
c000d345:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d349:	50                   	push   eax
c000d34a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d34e:	50                   	push   eax
c000d34f:	56                   	push   esi
c000d350:	e8 53 b1 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c000d355:	5a                   	pop    edx
c000d356:	59                   	pop    ecx
c000d357:	6a 01                	push   0x1
c000d359:	ff 33                	push   DWORD PTR [ebx]
c000d35b:	e8 46 ae ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000d360:	5e                   	pop    esi
c000d361:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d365:	e8 1e 24 00 00       	call   c000f788 <malloc>
c000d36a:	5a                   	pop    edx
c000d36b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d36f:	89 c7                	mov    edi,eax
c000d371:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d373:	8b 10                	mov    edx,DWORD PTR [eax]
c000d375:	56                   	push   esi
c000d376:	57                   	push   edi
c000d377:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d37b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d37f:	50                   	push   eax
c000d380:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d383:	83 c4 14             	add    esp,0x14
c000d386:	ff 33                	push   DWORD PTR [ebx]
c000d388:	e8 77 ae ff ff       	call   c0008204 <File::close()>
c000d38d:	59                   	pop    ecx
c000d38e:	58                   	pop    eax
c000d38f:	6a 13                	push   0x13
c000d391:	ff 33                	push   DWORD PTR [ebx]
c000d393:	e8 0e ae ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000d398:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d39a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d39c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d39f:	57                   	push   edi
c000d3a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3a8:	50                   	push   eax
c000d3a9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d3ac:	83 c4 14             	add    esp,0x14
c000d3af:	57                   	push   edi
c000d3b0:	e8 e3 23 00 00       	call   c000f798 <free>
c000d3b5:	83 c4 10             	add    esp,0x10
c000d3b8:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d3bb:	75 10                	jne    c000d3cd <CmOpen(char const*)+0xbd>
c000d3bd:	83 ec 0c             	sub    esp,0xc
c000d3c0:	68 85 3d 02 c0       	push   0xc0023d85
c000d3c5:	e8 1a 28 00 00       	call   c000fbe4 <KePanic(char const*)>
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	50                   	push   eax
c000d3ce:	6a 00                	push   0x0
c000d3d0:	6a 00                	push   0x0
c000d3d2:	ff 33                	push   DWORD PTR [ebx]
c000d3d4:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d3d7:	e8 88 ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d3dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3de:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3e0:	89 34 24             	mov    DWORD PTR [esp],esi
c000d3e3:	57                   	push   edi
c000d3e4:	6a 00                	push   0x0
c000d3e6:	6a 2b                	push   0x2b
c000d3e8:	50                   	push   eax
c000d3e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3ec:	83 c4 1c             	add    esp,0x1c
c000d3ef:	6a 00                	push   0x0
c000d3f1:	6a 00                	push   0x0
c000d3f3:	ff 33                	push   DWORD PTR [ebx]
c000d3f5:	e8 6a ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d3fa:	83 c4 0c             	add    esp,0xc
c000d3fd:	6a 08                	push   0x8
c000d3ff:	68 a7 3d 02 c0       	push   0xc0023da7
c000d404:	57                   	push   edi
c000d405:	e8 76 2f ff ff       	call   c0000380 <memcmp>
c000d40a:	83 c4 10             	add    esp,0x10
c000d40d:	85 c0                	test   eax,eax
c000d40f:	74 10                	je     c000d421 <CmOpen(char const*)+0x111>
c000d411:	83 ec 0c             	sub    esp,0xc
c000d414:	68 b0 3d 02 c0       	push   0xc0023db0
c000d419:	e8 c6 27 00 00       	call   c000fbe4 <KePanic(char const*)>
c000d41e:	83 c4 10             	add    esp,0x10
c000d421:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d425:	83 c4 10             	add    esp,0x10
c000d428:	89 d8                	mov    eax,ebx
c000d42a:	5b                   	pop    ebx
c000d42b:	5e                   	pop    esi
c000d42c:	5f                   	pop    edi
c000d42d:	c3                   	ret    

c000d42e <CmClose(Reghive_Tag*)>:
c000d42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d432:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d436:	74 0b                	je     c000d443 <CmClose(Reghive_Tag*)+0x15>
c000d438:	8b 00                	mov    eax,DWORD PTR [eax]
c000d43a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d43e:	e9 c1 ad ff ff       	jmp    c0008204 <File::close()>
c000d443:	c3                   	ret    

c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d444:	53                   	push   ebx
c000d445:	83 ec 18             	sub    esp,0x18
c000d448:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d44c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d450:	74 29                	je     c000d47b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d452:	50                   	push   eax
c000d453:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d458:	99                   	cdq    
c000d459:	52                   	push   edx
c000d45a:	50                   	push   eax
c000d45b:	ff 33                	push   DWORD PTR [ebx]
c000d45d:	e8 02 ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d462:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d464:	5a                   	pop    edx
c000d465:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d469:	8b 10                	mov    edx,DWORD PTR [eax]
c000d46b:	51                   	push   ecx
c000d46c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d470:	6a 00                	push   0x0
c000d472:	6a 2b                	push   0x2b
c000d474:	50                   	push   eax
c000d475:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d478:	83 c4 20             	add    esp,0x20
c000d47b:	83 c4 18             	add    esp,0x18
c000d47e:	5b                   	pop    ebx
c000d47f:	c3                   	ret    

c000d480 <CmGetString(Reghive_Tag*, int, char*)>:
c000d480:	55                   	push   ebp
c000d481:	57                   	push   edi
c000d482:	56                   	push   esi
c000d483:	53                   	push   ebx
c000d484:	31 db                	xor    ebx,ebx
c000d486:	83 ec 70             	sub    esp,0x70
c000d489:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d48d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d494:	50                   	push   eax
c000d495:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d49c:	55                   	push   ebp
c000d49d:	e8 a2 ff ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4a2:	83 c4 10             	add    esp,0x10
c000d4a5:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d4aa:	c1 e0 08             	shl    eax,0x8
c000d4ad:	89 c2                	mov    edx,eax
c000d4af:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d4b4:	09 d0                	or     eax,edx
c000d4b6:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d4bb:	c1 e0 08             	shl    eax,0x8
c000d4be:	09 d0                	or     eax,edx
c000d4c0:	74 25                	je     c000d4e7 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d4c2:	52                   	push   edx
c000d4c3:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d4c7:	52                   	push   edx
c000d4c8:	6b fb 0d             	imul   edi,ebx,0xd
c000d4cb:	50                   	push   eax
c000d4cc:	55                   	push   ebp
c000d4cd:	e8 72 ff ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4d2:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d4d6:	b9 27 00 00 00       	mov    ecx,0x27
c000d4db:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d4e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d4e4:	83 c4 10             	add    esp,0x10
c000d4e7:	83 c3 03             	add    ebx,0x3
c000d4ea:	83 fb 15             	cmp    ebx,0x15
c000d4ed:	75 b6                	jne    c000d4a5 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d4ef:	83 c4 6c             	add    esp,0x6c
c000d4f2:	5b                   	pop    ebx
c000d4f3:	5e                   	pop    esi
c000d4f4:	5f                   	pop    edi
c000d4f5:	5d                   	pop    ebp
c000d4f6:	c3                   	ret    

c000d4f7 <CmEnterDirectory(Reghive_Tag*, int)>:
c000d4f7:	83 ec 40             	sub    esp,0x40
c000d4fa:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d4fe:	50                   	push   eax
c000d4ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d503:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d507:	e8 38 ff ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d50c:	83 c4 10             	add    esp,0x10
c000d50f:	83 c8 ff             	or     eax,0xffffffff
c000d512:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d517:	75 19                	jne    c000d532 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d519:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d51e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d523:	c1 e0 08             	shl    eax,0x8
c000d526:	09 c2                	or     edx,eax
c000d528:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d52d:	c1 e0 10             	shl    eax,0x10
c000d530:	09 d0                	or     eax,edx
c000d532:	83 c4 3c             	add    esp,0x3c
c000d535:	c3                   	ret    

c000d536 <CmGetNext(Reghive_Tag*, int)>:
c000d536:	83 ec 40             	sub    esp,0x40
c000d539:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d53d:	50                   	push   eax
c000d53e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d542:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d546:	e8 f9 fe ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d54b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d550:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d555:	c1 e0 08             	shl    eax,0x8
c000d558:	09 c2                	or     edx,eax
c000d55a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d55f:	83 c4 4c             	add    esp,0x4c
c000d562:	c1 e0 10             	shl    eax,0x10
c000d565:	09 d0                	or     eax,edx
c000d567:	c3                   	ret    

c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d568:	53                   	push   ebx
c000d569:	83 ec 18             	sub    esp,0x18
c000d56c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d570:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d574:	74 29                	je     c000d59f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d576:	50                   	push   eax
c000d577:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d57c:	99                   	cdq    
c000d57d:	52                   	push   edx
c000d57e:	50                   	push   eax
c000d57f:	ff 33                	push   DWORD PTR [ebx]
c000d581:	e8 de ac ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d586:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d588:	5a                   	pop    edx
c000d589:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d58d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d58f:	51                   	push   ecx
c000d590:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d594:	6a 00                	push   0x0
c000d596:	6a 2b                	push   0x2b
c000d598:	50                   	push   eax
c000d599:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d59c:	83 c4 20             	add    esp,0x20
c000d59f:	83 c4 18             	add    esp,0x18
c000d5a2:	5b                   	pop    ebx
c000d5a3:	c3                   	ret    

c000d5a4 <CmFreeExtent(Reghive_Tag*, int)>:
c000d5a4:	53                   	push   ebx
c000d5a5:	83 ec 3c             	sub    esp,0x3c
c000d5a8:	6a 2b                	push   0x2b
c000d5aa:	6a 00                	push   0x0
c000d5ac:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d5b0:	53                   	push   ebx
c000d5b1:	e8 3a 2f ff ff       	call   c00004f0 <memset>
c000d5b6:	83 c4 0c             	add    esp,0xc
c000d5b9:	53                   	push   ebx
c000d5ba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5c2:	e8 a1 ff ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d5c7:	83 c4 48             	add    esp,0x48
c000d5ca:	5b                   	pop    ebx
c000d5cb:	c3                   	ret    

c000d5cc <CmUpdateHeader(Reghive_Tag*)>:
c000d5cc:	83 ec 0c             	sub    esp,0xc
c000d5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d5d7:	74 10                	je     c000d5e9 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d5d9:	52                   	push   edx
c000d5da:	8d 50 05             	lea    edx,[eax+0x5]
c000d5dd:	52                   	push   edx
c000d5de:	6a 00                	push   0x0
c000d5e0:	50                   	push   eax
c000d5e1:	e8 82 ff ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d5e6:	83 c4 10             	add    esp,0x10
c000d5e9:	83 c4 0c             	add    esp,0xc
c000d5ec:	c3                   	ret    

c000d5ed <CmExpand(Reghive_Tag*, int)>:
c000d5ed:	55                   	push   ebp
c000d5ee:	57                   	push   edi
c000d5ef:	83 cf ff             	or     edi,0xffffffff
c000d5f2:	56                   	push   esi
c000d5f3:	53                   	push   ebx
c000d5f4:	83 ec 3c             	sub    esp,0x3c
c000d5f7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000d5fb:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d5ff:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d603:	74 59                	je     c000d65e <CmExpand(Reghive_Tag*, int)+0x71>
c000d605:	50                   	push   eax
c000d606:	31 d2                	xor    edx,edx
c000d608:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d60c:	31 ff                	xor    edi,edi
c000d60e:	52                   	push   edx
c000d60f:	50                   	push   eax
c000d610:	ff 33                	push   DWORD PTR [ebx]
c000d612:	e8 4d ac ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d617:	83 c4 0c             	add    esp,0xc
c000d61a:	6a 2b                	push   0x2b
c000d61c:	6a 00                	push   0x0
c000d61e:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000d622:	55                   	push   ebp
c000d623:	e8 c8 2e ff ff       	call   c00004f0 <memset>
c000d628:	83 c4 10             	add    esp,0x10
c000d62b:	39 f7                	cmp    edi,esi
c000d62d:	7d 1b                	jge    c000d64a <CmExpand(Reghive_Tag*, int)+0x5d>
c000d62f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d631:	83 ec 0c             	sub    esp,0xc
c000d634:	47                   	inc    edi
c000d635:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d639:	8b 10                	mov    edx,DWORD PTR [eax]
c000d63b:	51                   	push   ecx
c000d63c:	55                   	push   ebp
c000d63d:	6a 00                	push   0x0
c000d63f:	6a 2b                	push   0x2b
c000d641:	50                   	push   eax
c000d642:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d645:	83 c4 20             	add    esp,0x20
c000d648:	eb e1                	jmp    c000d62b <CmExpand(Reghive_Tag*, int)+0x3e>
c000d64a:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000d64d:	83 ec 0c             	sub    esp,0xc
c000d650:	01 fe                	add    esi,edi
c000d652:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000d655:	53                   	push   ebx
c000d656:	e8 71 ff ff ff       	call   c000d5cc <CmUpdateHeader(Reghive_Tag*)>
c000d65b:	83 c4 10             	add    esp,0x10
c000d65e:	83 c4 3c             	add    esp,0x3c
c000d661:	89 f8                	mov    eax,edi
c000d663:	5b                   	pop    ebx
c000d664:	5e                   	pop    esi
c000d665:	5f                   	pop    edi
c000d666:	5d                   	pop    ebp
c000d667:	c3                   	ret    

c000d668 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d668:	55                   	push   ebp
c000d669:	57                   	push   edi
c000d66a:	56                   	push   esi
c000d66b:	53                   	push   ebx
c000d66c:	83 cb ff             	or     ebx,0xffffffff
c000d66f:	83 ec 1c             	sub    esp,0x1c
c000d672:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d676:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d67a:	74 68                	je     c000d6e4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d67c:	51                   	push   ecx
c000d67d:	be 2b 00 00 00       	mov    esi,0x2b
c000d682:	6a 00                	push   0x0
c000d684:	31 ff                	xor    edi,edi
c000d686:	6a 00                	push   0x0
c000d688:	31 db                	xor    ebx,ebx
c000d68a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d68d:	e8 d2 ab ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d692:	83 c4 10             	add    esp,0x10
c000d695:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d698:	76 3b                	jbe    c000d6d5 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d69a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d69d:	83 ec 0c             	sub    esp,0xc
c000d6a0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d6a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6a6:	51                   	push   ecx
c000d6a7:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d6ab:	51                   	push   ecx
c000d6ac:	6a 00                	push   0x0
c000d6ae:	6a 01                	push   0x1
c000d6b0:	50                   	push   eax
c000d6b1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d6b4:	83 c4 20             	add    esp,0x20
c000d6b7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d6bc:	74 26                	je     c000d6e4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d6be:	52                   	push   edx
c000d6bf:	43                   	inc    ebx
c000d6c0:	57                   	push   edi
c000d6c1:	56                   	push   esi
c000d6c2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d6c5:	e8 9a ab ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d6ca:	83 c6 2b             	add    esi,0x2b
c000d6cd:	83 d7 00             	adc    edi,0x0
c000d6d0:	83 c4 10             	add    esp,0x10
c000d6d3:	eb c0                	jmp    c000d695 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d6d5:	50                   	push   eax
c000d6d6:	50                   	push   eax
c000d6d7:	6a 40                	push   0x40
c000d6d9:	55                   	push   ebp
c000d6da:	e8 0e ff ff ff       	call   c000d5ed <CmExpand(Reghive_Tag*, int)>
c000d6df:	83 c4 10             	add    esp,0x10
c000d6e2:	89 c3                	mov    ebx,eax
c000d6e4:	83 c4 1c             	add    esp,0x1c
c000d6e7:	89 d8                	mov    eax,ebx
c000d6e9:	5b                   	pop    ebx
c000d6ea:	5e                   	pop    esi
c000d6eb:	5f                   	pop    edi
c000d6ec:	5d                   	pop    ebp
c000d6ed:	c3                   	ret    

c000d6ee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d6ee:	55                   	push   ebp
c000d6ef:	57                   	push   edi
c000d6f0:	56                   	push   esi
c000d6f1:	53                   	push   ebx
c000d6f2:	81 ec 88 00 00 00    	sub    esp,0x88
c000d6f8:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d6ff:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d706:	e8 5d ff ff ff       	call   c000d668 <CmFindUnusedExtent(Reghive_Tag*)>
c000d70b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d70f:	83 c4 0c             	add    esp,0xc
c000d712:	6a 2b                	push   0x2b
c000d714:	6a 00                	push   0x0
c000d716:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d71a:	55                   	push   ebp
c000d71b:	e8 d0 2d ff ff       	call   c00004f0 <memset>
c000d720:	83 c4 10             	add    esp,0x10
c000d723:	85 db                	test   ebx,ebx
c000d725:	74 12                	je     c000d739 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d727:	51                   	push   ecx
c000d728:	55                   	push   ebp
c000d729:	53                   	push   ebx
c000d72a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d731:	e8 0e fd ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d73d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d744:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d749:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d74b:	85 db                	test   ebx,ebx
c000d74d:	74 49                	je     c000d798 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d74f:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d754:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d759:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d75d:	c1 e0 08             	shl    eax,0x8
c000d760:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d766:	09 c8                	or     eax,ecx
c000d768:	74 11                	je     c000d77b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d76a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d76e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d772:	c1 e8 10             	shr    eax,0x10
c000d775:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d779:	eb 0f                	jmp    c000d78a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d77b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d780:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d785:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d78a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d78e:	c1 ea 08             	shr    edx,0x8
c000d791:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d796:	eb 0f                	jmp    c000d7a7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d798:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d79d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d7a2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d7a7:	52                   	push   edx
c000d7a8:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d7ac:	50                   	push   eax
c000d7ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7b1:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7b8:	e8 ab fd ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d7bd:	83 c4 10             	add    esp,0x10
c000d7c0:	85 db                	test   ebx,ebx
c000d7c2:	74 12                	je     c000d7d6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d7c4:	50                   	push   eax
c000d7c5:	55                   	push   ebp
c000d7c6:	53                   	push   ebx
c000d7c7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7ce:	e8 95 fd ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d7da:	83 c4 7c             	add    esp,0x7c
c000d7dd:	5b                   	pop    ebx
c000d7de:	5e                   	pop    esi
c000d7df:	5f                   	pop    edi
c000d7e0:	5d                   	pop    ebp
c000d7e1:	c3                   	ret    

c000d7e2 <CmSetString(Reghive_Tag*, int, char const*)>:
c000d7e2:	55                   	push   ebp
c000d7e3:	57                   	push   edi
c000d7e4:	56                   	push   esi
c000d7e5:	53                   	push   ebx
c000d7e6:	bb 27 00 00 00       	mov    ebx,0x27
c000d7eb:	81 ec 88 00 00 00    	sub    esp,0x88
c000d7f1:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000d7f8:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d7ff:	e8 7c 2d ff ff       	call   c0000580 <strlen>
c000d804:	8d 48 26             	lea    ecx,[eax+0x26]
c000d807:	89 c8                	mov    eax,ecx
c000d809:	99                   	cdq    
c000d80a:	f7 fb                	idiv   ebx
c000d80c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d810:	83 c4 10             	add    esp,0x10
c000d813:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d819:	7e 10                	jle    c000d82b <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d81b:	83 ec 0c             	sub    esp,0xc
c000d81e:	68 cb 3d 02 c0       	push   0xc0023dcb
c000d823:	e8 bc 23 00 00       	call   c000fbe4 <KePanic(char const*)>
c000d828:	83 c4 10             	add    esp,0x10
c000d82b:	53                   	push   ebx
c000d82c:	31 ed                	xor    ebp,ebp
c000d82e:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d832:	53                   	push   ebx
c000d833:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d83a:	57                   	push   edi
c000d83b:	e8 04 fc ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d840:	83 c4 10             	add    esp,0x10
c000d843:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000d847:	89 f0                	mov    eax,esi
c000d849:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000d84d:	c1 e0 08             	shl    eax,0x8
c000d850:	09 c6                	or     esi,eax
c000d852:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d856:	c1 e6 08             	shl    esi,0x8
c000d859:	09 c6                	or     esi,eax
c000d85b:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000d85f:	7e 72                	jle    c000d8d3 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000d861:	85 f6                	test   esi,esi
c000d863:	75 25                	jne    c000d88a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d865:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d86a:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d86e:	50                   	push   eax
c000d86f:	6a 00                	push   0x0
c000d871:	6a 00                	push   0x0
c000d873:	57                   	push   edi
c000d874:	e8 75 fe ff ff       	call   c000d6ee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d879:	83 c4 10             	add    esp,0x10
c000d87c:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d87f:	89 c6                	mov    esi,eax
c000d881:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d884:	c1 f8 10             	sar    eax,0x10
c000d887:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d88a:	51                   	push   ecx
c000d88b:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d88f:	52                   	push   edx
c000d890:	56                   	push   esi
c000d891:	57                   	push   edi
c000d892:	e8 ad fb ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d897:	83 c4 0c             	add    esp,0xc
c000d89a:	6a 27                	push   0x27
c000d89c:	6a 00                	push   0x0
c000d89e:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d8a2:	51                   	push   ecx
c000d8a3:	e8 48 2c ff ff       	call   c00004f0 <memset>
c000d8a8:	6b c5 27             	imul   eax,ebp,0x27
c000d8ab:	83 c4 0c             	add    esp,0xc
c000d8ae:	6a 27                	push   0x27
c000d8b0:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d8b7:	50                   	push   eax
c000d8b8:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d8bc:	51                   	push   ecx
c000d8bd:	e8 ce 2d ff ff       	call   c0000690 <strncpy>
c000d8c2:	83 c4 0c             	add    esp,0xc
c000d8c5:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d8c9:	52                   	push   edx
c000d8ca:	56                   	push   esi
c000d8cb:	57                   	push   edi
c000d8cc:	e8 97 fc ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8d1:	eb 19                	jmp    c000d8ec <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000d8d3:	85 f6                	test   esi,esi
c000d8d5:	74 18                	je     c000d8ef <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000d8d7:	52                   	push   edx
c000d8d8:	52                   	push   edx
c000d8d9:	56                   	push   esi
c000d8da:	57                   	push   edi
c000d8db:	e8 c4 fc ff ff       	call   c000d5a4 <CmFreeExtent(Reghive_Tag*, int)>
c000d8e0:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d8e4:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d8e8:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	45                   	inc    ebp
c000d8f0:	83 c3 03             	add    ebx,0x3
c000d8f3:	83 fd 07             	cmp    ebp,0x7
c000d8f6:	0f 85 47 ff ff ff    	jne    c000d843 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d8fc:	50                   	push   eax
c000d8fd:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d901:	50                   	push   eax
c000d902:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d909:	57                   	push   edi
c000d90a:	e8 59 fc ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d90f:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d915:	5b                   	pop    ebx
c000d916:	5e                   	pop    esi
c000d917:	5f                   	pop    edi
c000d918:	5d                   	pop    ebp
c000d919:	c3                   	ret    

c000d91a <CmGetMatch(char*, char*, bool, bool*)>:
c000d91a:	56                   	push   esi
c000d91b:	53                   	push   ebx
c000d91c:	50                   	push   eax
c000d91d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d922:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d926:	74 25                	je     c000d94d <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d928:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d92b:	31 db                	xor    ebx,ebx
c000d92d:	50                   	push   eax
c000d92e:	50                   	push   eax
c000d92f:	8d 04 9d e0 61 02 c0 	lea    eax,[ebx*4-0x3ffd9e20]
c000d936:	50                   	push   eax
c000d937:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93b:	e8 40 2e ff ff       	call   c0000780 <strcmp>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	74 2e                	je     c000d975 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d947:	43                   	inc    ebx
c000d948:	83 fb 3f             	cmp    ebx,0x3f
c000d94b:	75 e0                	jne    c000d92d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d94d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d950:	31 db                	xor    ebx,ebx
c000d952:	51                   	push   ecx
c000d953:	51                   	push   ecx
c000d954:	8d 04 9d e0 61 02 c0 	lea    eax,[ebx*4-0x3ffd9e20]
c000d95b:	50                   	push   eax
c000d95c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d960:	e8 1b 2e ff ff       	call   c0000780 <strcmp>
c000d965:	83 c4 10             	add    esp,0x10
c000d968:	85 c0                	test   eax,eax
c000d96a:	74 09                	je     c000d975 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d96c:	43                   	inc    ebx
c000d96d:	83 fb 3f             	cmp    ebx,0x3f
c000d970:	75 e0                	jne    c000d952 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d972:	83 cb ff             	or     ebx,0xffffffff
c000d975:	5a                   	pop    edx
c000d976:	89 d8                	mov    eax,ebx
c000d978:	5b                   	pop    ebx
c000d979:	5e                   	pop    esi
c000d97a:	c3                   	ret    

c000d97b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d97b:	55                   	push   ebp
c000d97c:	31 c0                	xor    eax,eax
c000d97e:	57                   	push   edi
c000d97f:	56                   	push   esi
c000d980:	53                   	push   ebx
c000d981:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d985:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d989:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d98d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d991:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d993:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d996:	83 fd 1f             	cmp    ebp,0x1f
c000d999:	7f 0b                	jg     c000d9a6 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d99b:	0f b6 c2             	movzx  eax,dl
c000d99e:	d3 e0                	shl    eax,cl
c000d9a0:	09 07                	or     DWORD PTR [edi],eax
c000d9a2:	b0 01                	mov    al,0x1
c000d9a4:	01 33                	add    DWORD PTR [ebx],esi
c000d9a6:	5b                   	pop    ebx
c000d9a7:	5e                   	pop    esi
c000d9a8:	5f                   	pop    edi
c000d9a9:	5d                   	pop    ebp
c000d9aa:	c3                   	ret    

c000d9ab <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d9ab:	57                   	push   edi
c000d9ac:	56                   	push   esi
c000d9ad:	53                   	push   ebx
c000d9ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d9b2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d9b6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d9ba:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d9be:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d9c0:	7c 17                	jl     c000d9d9 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d9c2:	8b 17                	mov    edx,DWORD PTR [edi]
c000d9c4:	b8 01 00 00 00       	mov    eax,0x1
c000d9c9:	d3 e0                	shl    eax,cl
c000d9cb:	48                   	dec    eax
c000d9cc:	21 d0                	and    eax,edx
c000d9ce:	d3 ea                	shr    edx,cl
c000d9d0:	89 17                	mov    DWORD PTR [edi],edx
c000d9d2:	29 0b                	sub    DWORD PTR [ebx],ecx
c000d9d4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d9d7:	eb 05                	jmp    c000d9de <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000d9d9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d9dc:	31 c0                	xor    eax,eax
c000d9de:	5b                   	pop    ebx
c000d9df:	5e                   	pop    esi
c000d9e0:	5f                   	pop    edi
c000d9e1:	c3                   	ret    

c000d9e2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000d9e2:	83 ec 40             	sub    esp,0x40
c000d9e5:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d9e9:	50                   	push   eax
c000d9ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9f2:	e8 4d fa ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9f7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d9fb:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000d9ff:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000da03:	89 10                	mov    DWORD PTR [eax],edx
c000da05:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000da08:	83 c4 4c             	add    esp,0x4c
c000da0b:	c3                   	ret    

c000da0c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000da0c:	55                   	push   ebp
c000da0d:	57                   	push   edi
c000da0e:	56                   	push   esi
c000da0f:	53                   	push   ebx
c000da10:	83 ec 40             	sub    esp,0x40
c000da13:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000da17:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000da1b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000da1f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000da23:	53                   	push   ebx
c000da24:	56                   	push   esi
c000da25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da29:	e8 16 fa ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da2e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000da32:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000da36:	83 c4 0c             	add    esp,0xc
c000da39:	53                   	push   ebx
c000da3a:	56                   	push   esi
c000da3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da3f:	e8 24 fb ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da44:	83 c4 4c             	add    esp,0x4c
c000da47:	5b                   	pop    ebx
c000da48:	5e                   	pop    esi
c000da49:	5f                   	pop    edi
c000da4a:	5d                   	pop    ebp
c000da4b:	c3                   	ret    

c000da4c <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000da4c:	55                   	push   ebp
c000da4d:	57                   	push   edi
c000da4e:	56                   	push   esi
c000da4f:	31 f6                	xor    esi,esi
c000da51:	53                   	push   ebx
c000da52:	31 db                	xor    ebx,ebx
c000da54:	83 ec 40             	sub    esp,0x40
c000da57:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000da5f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000da67:	6a 12                	push   0x12
c000da69:	68 ee 00 00 00       	push   0xee
c000da6e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da72:	e8 79 2a ff ff       	call   c00004f0 <memset>
c000da77:	83 c4 10             	add    esp,0x10
c000da7a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000da7e:	6a 08                	push   0x8
c000da80:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000da84:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000da88:	50                   	push   eax
c000da89:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000da8d:	55                   	push   ebp
c000da8e:	57                   	push   edi
c000da8f:	e8 e7 fe ff ff       	call   c000d97b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000da94:	83 c4 10             	add    esp,0x10
c000da97:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000da9b:	50                   	push   eax
c000da9c:	6a 06                	push   0x6
c000da9e:	55                   	push   ebp
c000da9f:	57                   	push   edi
c000daa0:	e8 06 ff ff ff       	call   c000d9ab <CmGetShift(unsigned int*, int*, int, bool*)>
c000daa5:	83 c4 10             	add    esp,0x10
c000daa8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000daad:	74 07                	je     c000dab6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000daaf:	46                   	inc    esi
c000dab0:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000dab4:	eb e1                	jmp    c000da97 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000dab6:	43                   	inc    ebx
c000dab7:	83 fb 12             	cmp    ebx,0x12
c000daba:	75 c2                	jne    c000da7e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000dabc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dac0:	31 f6                	xor    esi,esi
c000dac2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000dac5:	50                   	push   eax
c000dac6:	50                   	push   eax
c000dac7:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000dacc:	46                   	inc    esi
c000dacd:	8d 04 85 e0 61 02 c0 	lea    eax,[eax*4-0x3ffd9e20]
c000dad4:	50                   	push   eax
c000dad5:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000dad9:	e8 92 2d ff ff       	call   c0000870 <strcat>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	83 fe 18             	cmp    esi,0x18
c000dae4:	75 df                	jne    c000dac5 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000dae6:	83 c4 3c             	add    esp,0x3c
c000dae9:	31 c0                	xor    eax,eax
c000daeb:	5b                   	pop    ebx
c000daec:	5e                   	pop    esi
c000daed:	5f                   	pop    edi
c000daee:	5d                   	pop    ebp
c000daef:	c3                   	ret    

c000daf0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000daf0:	83 ec 40             	sub    esp,0x40
c000daf3:	8d 44 24 09          	lea    eax,[esp+0x9]
c000daf7:	50                   	push   eax
c000daf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dafc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db00:	e8 3f f9 ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db05:	58                   	pop    eax
c000db06:	5a                   	pop    edx
c000db07:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000db0b:	8d 44 24 15          	lea    eax,[esp+0x15]
c000db0f:	50                   	push   eax
c000db10:	e8 37 ff ff ff       	call   c000da4c <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000db15:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000db1a:	83 c4 4c             	add    esp,0x4c
c000db1d:	c3                   	ret    

c000db1e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000db1e:	55                   	push   ebp
c000db1f:	57                   	push   edi
c000db20:	56                   	push   esi
c000db21:	53                   	push   ebx
c000db22:	31 db                	xor    ebx,ebx
c000db24:	83 ec 70             	sub    esp,0x70
c000db27:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000db2e:	6a 30                	push   0x30
c000db30:	6a 00                	push   0x0
c000db32:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000db36:	56                   	push   esi
c000db37:	e8 b4 29 ff ff       	call   c00004f0 <memset>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	83 ec 0c             	sub    esp,0xc
c000db42:	57                   	push   edi
c000db43:	e8 38 2a ff ff       	call   c0000580 <strlen>
c000db48:	83 c4 10             	add    esp,0x10
c000db4b:	39 d8                	cmp    eax,ebx
c000db4d:	76 16                	jbe    c000db65 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000db4f:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000db53:	83 ec 0c             	sub    esp,0xc
c000db56:	50                   	push   eax
c000db57:	e8 04 2e ff ff       	call   c0000960 <toupper>
c000db5c:	83 c4 10             	add    esp,0x10
c000db5f:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000db62:	43                   	inc    ebx
c000db63:	eb da                	jmp    c000db3f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000db65:	52                   	push   edx
c000db66:	31 db                	xor    ebx,ebx
c000db68:	6a 18                	push   0x18
c000db6a:	31 ff                	xor    edi,edi
c000db6c:	6a 3f                	push   0x3f
c000db6e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000db72:	50                   	push   eax
c000db73:	e8 78 29 ff ff       	call   c00004f0 <memset>
c000db78:	83 c4 10             	add    esp,0x10
c000db7b:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000db7f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000db83:	84 c0                	test   al,al
c000db85:	0f 84 af 00 00 00    	je     c000dc3a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000db8b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000db8f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000db92:	83 ec 0c             	sub    esp,0xc
c000db95:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000db9a:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000db9e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000dba2:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000dba7:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dbab:	56                   	push   esi
c000dbac:	e8 cf 29 ff ff       	call   c0000580 <strlen>
c000dbb1:	83 c4 10             	add    esp,0x10
c000dbb4:	85 c0                	test   eax,eax
c000dbb6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dbba:	74 0b                	je     c000dbc7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dbbc:	50                   	push   eax
c000dbbd:	6a 01                	push   0x1
c000dbbf:	56                   	push   esi
c000dbc0:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dbc4:	50                   	push   eax
c000dbc5:	eb 0a                	jmp    c000dbd1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dbc7:	50                   	push   eax
c000dbc8:	6a 00                	push   0x0
c000dbca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dbce:	50                   	push   eax
c000dbcf:	6a 00                	push   0x0
c000dbd1:	e8 44 fd ff ff       	call   c000d91a <CmGetMatch(char*, char*, bool, bool*)>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	83 f8 ff             	cmp    eax,0xffffffff
c000dbdc:	75 1a                	jne    c000dbf8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dbde:	83 ec 0c             	sub    esp,0xc
c000dbe1:	68 e0 3d 02 c0       	push   0xc0023de0
c000dbe6:	e8 f9 1f 00 00       	call   c000fbe4 <KePanic(char const*)>
c000dbeb:	83 c4 10             	add    esp,0x10
c000dbee:	b8 02 00 00 00       	mov    eax,0x2
c000dbf3:	e9 bb 00 00 00       	jmp    c000dcb3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dbf8:	83 ff 18             	cmp    edi,0x18
c000dbfb:	75 1a                	jne    c000dc17 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dbfd:	83 ec 0c             	sub    esp,0xc
c000dc00:	68 f5 3d 02 c0       	push   0xc0023df5
c000dc05:	e8 da 1f 00 00       	call   c000fbe4 <KePanic(char const*)>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	b8 01 00 00 00       	mov    eax,0x1
c000dc12:	e9 9c 00 00 00       	jmp    c000dcb3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dc17:	47                   	inc    edi
c000dc18:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc1d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dc21:	0f 45 dd             	cmovne ebx,ebp
c000dc24:	83 ec 0c             	sub    esp,0xc
c000dc27:	56                   	push   esi
c000dc28:	e8 53 29 ff ff       	call   c0000580 <strlen>
c000dc2d:	83 c4 10             	add    esp,0x10
c000dc30:	85 c0                	test   eax,eax
c000dc32:	74 06                	je     c000dc3a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000dc34:	43                   	inc    ebx
c000dc35:	e9 41 ff ff ff       	jmp    c000db7b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dc3a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dc42:	31 db                	xor    ebx,ebx
c000dc44:	31 ff                	xor    edi,edi
c000dc46:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dc4e:	50                   	push   eax
c000dc4f:	6a 12                	push   0x12
c000dc51:	68 ee 00 00 00       	push   0xee
c000dc56:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dc5d:	e8 8e 28 ff ff       	call   c00004f0 <memset>
c000dc62:	83 c4 10             	add    esp,0x10
c000dc65:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dc69:	83 fb 17             	cmp    ebx,0x17
c000dc6c:	7e 26                	jle    c000dc94 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000dc6e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc72:	50                   	push   eax
c000dc73:	6a 08                	push   0x8
c000dc75:	55                   	push   ebp
c000dc76:	56                   	push   esi
c000dc77:	e8 2f fd ff ff       	call   c000d9ab <CmGetShift(unsigned int*, int*, int, bool*)>
c000dc7c:	83 c4 10             	add    esp,0x10
c000dc7f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc84:	74 26                	je     c000dcac <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000dc86:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dc8d:	4b                   	dec    ebx
c000dc8e:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dc91:	47                   	inc    edi
c000dc92:	eb 1c                	jmp    c000dcb0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dc94:	6a 06                	push   0x6
c000dc96:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000dc9b:	50                   	push   eax
c000dc9c:	55                   	push   ebp
c000dc9d:	56                   	push   esi
c000dc9e:	e8 d8 fc ff ff       	call   c000d97b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dca3:	83 c4 10             	add    esp,0x10
c000dca6:	84 c0                	test   al,al
c000dca8:	75 06                	jne    c000dcb0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dcaa:	eb c2                	jmp    c000dc6e <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000dcac:	31 c0                	xor    eax,eax
c000dcae:	eb 03                	jmp    c000dcb3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dcb0:	43                   	inc    ebx
c000dcb1:	eb b2                	jmp    c000dc65 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000dcb3:	83 c4 6c             	add    esp,0x6c
c000dcb6:	5b                   	pop    ebx
c000dcb7:	5e                   	pop    esi
c000dcb8:	5f                   	pop    edi
c000dcb9:	5d                   	pop    ebp
c000dcba:	c3                   	ret    

c000dcbb <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dcbb:	53                   	push   ebx
c000dcbc:	83 ec 3c             	sub    esp,0x3c
c000dcbf:	6a 2b                	push   0x2b
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dcc7:	53                   	push   ebx
c000dcc8:	e8 23 28 ff ff       	call   c00004f0 <memset>
c000dccd:	58                   	pop    eax
c000dcce:	5a                   	pop    edx
c000dccf:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dcd3:	50                   	push   eax
c000dcd4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dcd8:	e8 41 fe ff ff       	call   c000db1e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dcdd:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dce2:	83 c4 0c             	add    esp,0xc
c000dce5:	6a 15                	push   0x15
c000dce7:	6a 00                	push   0x0
c000dce9:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dced:	50                   	push   eax
c000dcee:	e8 fd 27 ff ff       	call   c00004f0 <memset>
c000dcf3:	53                   	push   ebx
c000dcf4:	6a 00                	push   0x0
c000dcf6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcfa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcfe:	e8 eb f9 ff ff       	call   c000d6ee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd03:	83 c4 58             	add    esp,0x58
c000dd06:	5b                   	pop    ebx
c000dd07:	c3                   	ret    

c000dd08 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dd08:	56                   	push   esi
c000dd09:	53                   	push   ebx
c000dd0a:	83 ec 48             	sub    esp,0x48
c000dd0d:	6a 12                	push   0x12
c000dd0f:	68 ff 00 00 00       	push   0xff
c000dd14:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dd18:	56                   	push   esi
c000dd19:	e8 d2 27 ff ff       	call   c00004f0 <memset>
c000dd1e:	5a                   	pop    edx
c000dd1f:	59                   	pop    ecx
c000dd20:	56                   	push   esi
c000dd21:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dd25:	e8 f4 fd ff ff       	call   c000db1e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd2a:	83 c4 10             	add    esp,0x10
c000dd2d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dd31:	85 db                	test   ebx,ebx
c000dd33:	74 42                	je     c000dd77 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dd35:	50                   	push   eax
c000dd36:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dd3a:	50                   	push   eax
c000dd3b:	53                   	push   ebx
c000dd3c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd40:	e8 ff f6 ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dd45:	83 c4 0c             	add    esp,0xc
c000dd48:	6a 12                	push   0x12
c000dd4a:	8d 44 24 21          	lea    eax,[esp+0x21]
c000dd4e:	50                   	push   eax
c000dd4f:	56                   	push   esi
c000dd50:	e8 2b 26 ff ff       	call   c0000380 <memcmp>
c000dd55:	83 c4 10             	add    esp,0x10
c000dd58:	85 c0                	test   eax,eax
c000dd5a:	74 1e                	je     c000dd7a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000dd5c:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000dd61:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000dd66:	c1 e3 08             	shl    ebx,0x8
c000dd69:	09 d8                	or     eax,ebx
c000dd6b:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dd70:	c1 e3 10             	shl    ebx,0x10
c000dd73:	09 c3                	or     ebx,eax
c000dd75:	eb ba                	jmp    c000dd31 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dd77:	83 cb ff             	or     ebx,0xffffffff
c000dd7a:	83 c4 44             	add    esp,0x44
c000dd7d:	89 d8                	mov    eax,ebx
c000dd7f:	5b                   	pop    ebx
c000dd80:	5e                   	pop    esi
c000dd81:	c3                   	ret    

c000dd82 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000dd82:	57                   	push   edi
c000dd83:	56                   	push   esi
c000dd84:	53                   	push   ebx
c000dd85:	83 ec 34             	sub    esp,0x34
c000dd88:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000dd8c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000dd90:	6a 2b                	push   0x2b
c000dd92:	6a 00                	push   0x0
c000dd94:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd98:	53                   	push   ebx
c000dd99:	e8 52 27 ff ff       	call   c00004f0 <memset>
c000dd9e:	58                   	pop    eax
c000dd9f:	5a                   	pop    edx
c000dda0:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dda4:	50                   	push   eax
c000dda5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dda9:	e8 70 fd ff ff       	call   c000db1e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ddae:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000ddb2:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000ddb6:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000ddba:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000ddbe:	53                   	push   ebx
c000ddbf:	6a 00                	push   0x0
c000ddc1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddc5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddc9:	e8 20 f9 ff ff       	call   c000d6ee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ddce:	83 c4 50             	add    esp,0x50
c000ddd1:	5b                   	pop    ebx
c000ddd2:	5e                   	pop    esi
c000ddd3:	5f                   	pop    edi
c000ddd4:	c3                   	ret    

c000ddd5 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000ddd5:	55                   	push   ebp
c000ddd6:	57                   	push   edi
c000ddd7:	56                   	push   esi
c000ddd8:	53                   	push   ebx
c000ddd9:	83 ec 40             	sub    esp,0x40
c000dddc:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000dde0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dde4:	6a 2b                	push   0x2b
c000dde6:	6a 00                	push   0x0
c000dde8:	8d 74 24 11          	lea    esi,[esp+0x11]
c000ddec:	56                   	push   esi
c000dded:	e8 fe 26 ff ff       	call   c00004f0 <memset>
c000ddf2:	5f                   	pop    edi
c000ddf3:	89 ef                	mov    edi,ebp
c000ddf5:	58                   	pop    eax
c000ddf6:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ddfa:	50                   	push   eax
c000ddfb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ddff:	e8 1a fd ff ff       	call   c000db1e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de04:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000de09:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000de0e:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000de13:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000de18:	83 c4 10             	add    esp,0x10
c000de1b:	85 ed                	test   ebp,ebp
c000de1d:	74 14                	je     c000de33 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de1f:	51                   	push   ecx
c000de20:	51                   	push   ecx
c000de21:	57                   	push   edi
c000de22:	53                   	push   ebx
c000de23:	e8 0e f7 ff ff       	call   c000d536 <CmGetNext(Reghive_Tag*, int)>
c000de28:	83 c4 10             	add    esp,0x10
c000de2b:	85 c0                	test   eax,eax
c000de2d:	74 04                	je     c000de33 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de2f:	89 c7                	mov    edi,eax
c000de31:	eb e8                	jmp    c000de1b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000de33:	56                   	push   esi
c000de34:	6a 00                	push   0x0
c000de36:	57                   	push   edi
c000de37:	53                   	push   ebx
c000de38:	e8 b1 f8 ff ff       	call   c000d6ee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de3d:	83 c4 0c             	add    esp,0xc
c000de40:	56                   	push   esi
c000de41:	50                   	push   eax
c000de42:	89 c7                	mov    edi,eax
c000de44:	53                   	push   ebx
c000de45:	e8 fa f5 ff ff       	call   c000d444 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de4a:	58                   	pop    eax
c000de4b:	5a                   	pop    edx
c000de4c:	6a 6c                	push   0x6c
c000de4e:	6a 00                	push   0x0
c000de50:	6a 00                	push   0x0
c000de52:	68 06 3e 02 c0       	push   0xc0023e06
c000de57:	57                   	push   edi
c000de58:	53                   	push   ebx
c000de59:	e8 24 ff ff ff       	call   c000dd82 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000de5e:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000de62:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000de66:	c1 e8 10             	shr    eax,0x10
c000de69:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000de6d:	83 c4 1c             	add    esp,0x1c
c000de70:	56                   	push   esi
c000de71:	57                   	push   edi
c000de72:	53                   	push   ebx
c000de73:	e8 f0 f6 ff ff       	call   c000d568 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000de78:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000de7d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000de82:	c1 e0 08             	shl    eax,0x8
c000de85:	09 c2                	or     edx,eax
c000de87:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000de8c:	83 c4 4c             	add    esp,0x4c
c000de8f:	5b                   	pop    ebx
c000de90:	5e                   	pop    esi
c000de91:	c1 e0 10             	shl    eax,0x10
c000de94:	09 d0                	or     eax,edx
c000de96:	5f                   	pop    edi
c000de97:	5d                   	pop    ebp
c000de98:	c3                   	ret    

c000de99 <zStrtok(char*, char const*)>:
c000de99:	55                   	push   ebp
c000de9a:	57                   	push   edi
c000de9b:	56                   	push   esi
c000de9c:	53                   	push   ebx
c000de9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dea1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dea5:	85 db                	test   ebx,ebx
c000dea7:	74 2f                	je     c000ded8 <zStrtok(char*, char const*)+0x3f>
c000dea9:	85 c0                	test   eax,eax
c000deab:	75 09                	jne    c000deb6 <zStrtok(char*, char const*)+0x1d>
c000dead:	a1 04 c1 02 c0       	mov    eax,ds:0xc002c104
c000deb2:	85 c0                	test   eax,eax
c000deb4:	74 50                	je     c000df06 <zStrtok(char*, char const*)+0x6d>
c000deb6:	31 c9                	xor    ecx,ecx
c000deb8:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000debc:	74 03                	je     c000dec1 <zStrtok(char*, char const*)+0x28>
c000debe:	41                   	inc    ecx
c000debf:	eb f7                	jmp    c000deb8 <zStrtok(char*, char const*)+0x1f>
c000dec1:	31 d2                	xor    edx,edx
c000dec3:	39 ca                	cmp    edx,ecx
c000dec5:	74 15                	je     c000dedc <zStrtok(char*, char const*)+0x43>
c000dec7:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000decb:	8d 3c 10             	lea    edi,[eax+edx*1]
c000dece:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000ded1:	39 ee                	cmp    esi,ebp
c000ded3:	74 13                	je     c000dee8 <zStrtok(char*, char const*)+0x4f>
c000ded5:	42                   	inc    edx
c000ded6:	eb eb                	jmp    c000dec3 <zStrtok(char*, char const*)+0x2a>
c000ded8:	31 c0                	xor    eax,eax
c000deda:	eb 2a                	jmp    c000df06 <zStrtok(char*, char const*)+0x6d>
c000dedc:	c7 05 04 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c104,0x0
c000dee6:	eb 1e                	jmp    c000df06 <zStrtok(char*, char const*)+0x6d>
c000dee8:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000deeb:	39 ce                	cmp    esi,ecx
c000deed:	75 0a                	jne    c000def9 <zStrtok(char*, char const*)+0x60>
c000deef:	40                   	inc    eax
c000def0:	a3 04 c1 02 c0       	mov    ds:0xc002c104,eax
c000def5:	89 d8                	mov    eax,ebx
c000def7:	eb 0d                	jmp    c000df06 <zStrtok(char*, char const*)+0x6d>
c000def9:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000defc:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000df00:	89 15 04 c1 02 c0    	mov    DWORD PTR ds:0xc002c104,edx
c000df06:	5b                   	pop    ebx
c000df07:	5e                   	pop    esi
c000df08:	5f                   	pop    edi
c000df09:	5d                   	pop    ebp
c000df0a:	c3                   	ret    

c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000df0b:	57                   	push   edi
c000df0c:	56                   	push   esi
c000df0d:	53                   	push   ebx
c000df0e:	81 ec 08 01 00 00    	sub    esp,0x108
c000df14:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000df1b:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000df22:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000df26:	53                   	push   ebx
c000df27:	e8 24 27 ff ff       	call   c0000650 <strcpy>
c000df2c:	59                   	pop    ecx
c000df2d:	5e                   	pop    esi
c000df2e:	68 49 4d 02 c0       	push   0xc0024d49
c000df33:	53                   	push   ebx
c000df34:	bb 01 00 00 00       	mov    ebx,0x1
c000df39:	e8 5b ff ff ff       	call   c000de99 <zStrtok(char*, char const*)>
c000df3e:	83 c4 10             	add    esp,0x10
c000df41:	85 c0                	test   eax,eax
c000df43:	74 3b                	je     c000df80 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df45:	52                   	push   edx
c000df46:	50                   	push   eax
c000df47:	6a 01                	push   0x1
c000df49:	57                   	push   edi
c000df4a:	e8 b9 fd ff ff       	call   c000dd08 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000df4f:	59                   	pop    ecx
c000df50:	5e                   	pop    esi
c000df51:	89 c3                	mov    ebx,eax
c000df53:	68 49 4d 02 c0       	push   0xc0024d49
c000df58:	6a 00                	push   0x0
c000df5a:	e8 3a ff ff ff       	call   c000de99 <zStrtok(char*, char const*)>
c000df5f:	83 c4 10             	add    esp,0x10
c000df62:	85 c0                	test   eax,eax
c000df64:	89 c6                	mov    esi,eax
c000df66:	74 18                	je     c000df80 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df68:	52                   	push   edx
c000df69:	52                   	push   edx
c000df6a:	53                   	push   ebx
c000df6b:	57                   	push   edi
c000df6c:	e8 86 f5 ff ff       	call   c000d4f7 <CmEnterDirectory(Reghive_Tag*, int)>
c000df71:	83 c4 10             	add    esp,0x10
c000df74:	83 f8 ff             	cmp    eax,0xffffffff
c000df77:	89 c3                	mov    ebx,eax
c000df79:	74 05                	je     c000df80 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df7b:	50                   	push   eax
c000df7c:	56                   	push   esi
c000df7d:	53                   	push   ebx
c000df7e:	eb c9                	jmp    c000df49 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000df80:	81 c4 00 01 00 00    	add    esp,0x100
c000df86:	89 d8                	mov    eax,ebx
c000df88:	5b                   	pop    ebx
c000df89:	5e                   	pop    esi
c000df8a:	5f                   	pop    edi
c000df8b:	c3                   	ret    

c000df8c <CmDisplayTree(Reghive_Tag*, int, int)>:
c000df8c:	55                   	push   ebp
c000df8d:	57                   	push   edi
c000df8e:	56                   	push   esi
c000df8f:	53                   	push   ebx
c000df90:	83 ec 5c             	sub    esp,0x5c
c000df93:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000df97:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000df9b:	85 db                	test   ebx,ebx
c000df9d:	0f 8e 84 00 00 00    	jle    c000e027 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000dfa3:	57                   	push   edi
c000dfa4:	31 ed                	xor    ebp,ebp
c000dfa6:	6a 32                	push   0x32
c000dfa8:	6a 00                	push   0x0
c000dfaa:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000dfae:	57                   	push   edi
c000dfaf:	e8 3c 25 ff ff       	call   c00004f0 <memset>
c000dfb4:	83 c4 0c             	add    esp,0xc
c000dfb7:	57                   	push   edi
c000dfb8:	53                   	push   ebx
c000dfb9:	56                   	push   esi
c000dfba:	e8 31 fb ff ff       	call   c000daf0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000dfbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000dfca:	7d 13                	jge    c000dfdf <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000dfcc:	83 ec 0c             	sub    esp,0xc
c000dfcf:	45                   	inc    ebp
c000dfd0:	68 bf 55 02 c0       	push   0xc00255bf
c000dfd5:	e8 8c 8f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000dfda:	83 c4 10             	add    esp,0x10
c000dfdd:	eb e7                	jmp    c000dfc6 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000dfdf:	51                   	push   ecx
c000dfe0:	57                   	push   edi
c000dfe1:	53                   	push   ebx
c000dfe2:	68 0c 3e 02 c0       	push   0xc0023e0c
c000dfe7:	e8 7a 8f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000dfec:	83 c4 10             	add    esp,0x10
c000dfef:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000dff4:	75 1e                	jne    c000e014 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000dff6:	52                   	push   edx
c000dff7:	52                   	push   edx
c000dff8:	53                   	push   ebx
c000dff9:	56                   	push   esi
c000dffa:	e8 f8 f4 ff ff       	call   c000d4f7 <CmEnterDirectory(Reghive_Tag*, int)>
c000dfff:	83 c4 0c             	add    esp,0xc
c000e002:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000e006:	8d 51 04             	lea    edx,[ecx+0x4]
c000e009:	52                   	push   edx
c000e00a:	50                   	push   eax
c000e00b:	56                   	push   esi
c000e00c:	e8 7b ff ff ff       	call   c000df8c <CmDisplayTree(Reghive_Tag*, int, int)>
c000e011:	83 c4 10             	add    esp,0x10
c000e014:	50                   	push   eax
c000e015:	50                   	push   eax
c000e016:	53                   	push   ebx
c000e017:	56                   	push   esi
c000e018:	e8 19 f5 ff ff       	call   c000d536 <CmGetNext(Reghive_Tag*, int)>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	89 c3                	mov    ebx,eax
c000e022:	e9 74 ff ff ff       	jmp    c000df9b <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000e027:	83 c4 5c             	add    esp,0x5c
c000e02a:	5b                   	pop    ebx
c000e02b:	5e                   	pop    esi
c000e02c:	5f                   	pop    edi
c000e02d:	5d                   	pop    ebp
c000e02e:	c3                   	ret    

c000e02f <CmSplitFinalSlashInPlace(char*)>:
c000e02f:	53                   	push   ebx
c000e030:	83 ec 14             	sub    esp,0x14
c000e033:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e037:	53                   	push   ebx
c000e038:	e8 43 25 ff ff       	call   c0000580 <strlen>
c000e03d:	83 c4 10             	add    esp,0x10
c000e040:	48                   	dec    eax
c000e041:	85 c0                	test   eax,eax
c000e043:	74 15                	je     c000e05a <CmSplitFinalSlashInPlace(char*)+0x2b>
c000e045:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000e049:	8d 14 03             	lea    edx,[ebx+eax*1]
c000e04c:	75 09                	jne    c000e057 <CmSplitFinalSlashInPlace(char*)+0x28>
c000e04e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000e051:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000e055:	eb 05                	jmp    c000e05c <CmSplitFinalSlashInPlace(char*)+0x2d>
c000e057:	48                   	dec    eax
c000e058:	eb e7                	jmp    c000e041 <CmSplitFinalSlashInPlace(char*)+0x12>
c000e05a:	31 c0                	xor    eax,eax
c000e05c:	83 c4 08             	add    esp,0x8
c000e05f:	5b                   	pop    ebx
c000e060:	c3                   	ret    
c000e061:	90                   	nop

c000e062 <Computer::close(int, int, void*)>:
c000e062:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e067:	c3                   	ret    

c000e068 <Computer::Computer()>:
c000e068:	83 ec 0c             	sub    esp,0xc
c000e06b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06f:	83 ec 08             	sub    esp,0x8
c000e072:	68 16 3e 02 c0       	push   0xc0023e16
c000e077:	50                   	push   eax
c000e078:	e8 db ba ff ff       	call   c0009b58 <Device::Device(char const*)>
c000e07d:	83 c4 10             	add    esp,0x10
c000e080:	ba 6c 3e 02 c0       	mov    edx,0xc0023e6c
c000e085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e089:	89 10                	mov    DWORD PTR [eax],edx
c000e08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e08f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e0a7:	90                   	nop
c000e0a8:	83 c4 0c             	add    esp,0xc
c000e0ab:	c3                   	ret    

c000e0ac <Computer::open(int, int, void*)>:
c000e0ac:	56                   	push   esi
c000e0ad:	53                   	push   ebx
c000e0ae:	83 ec 04             	sub    esp,0x4
c000e0b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0b5:	39 1d 08 c1 02 c0    	cmp    DWORD PTR ds:0xc002c108,ebx
c000e0bb:	74 10                	je     c000e0cd <Computer::open(int, int, void*)+0x21>
c000e0bd:	83 ec 0c             	sub    esp,0xc
c000e0c0:	68 38 3e 02 c0       	push   0xc0023e38
c000e0c5:	e8 1a 1b 00 00       	call   c000fbe4 <KePanic(char const*)>
c000e0ca:	83 c4 10             	add    esp,0x10
c000e0cd:	83 ec 0c             	sub    esp,0xc
c000e0d0:	68 78 11 00 00       	push   0x1178
c000e0d5:	e8 ae 16 00 00       	call   c000f788 <malloc>
c000e0da:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0dd:	89 c6                	mov    esi,eax
c000e0df:	e8 44 c5 00 00       	call   c001a628 <CPU::CPU()>
c000e0e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e0e8:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000e0ee:	50                   	push   eax
c000e0ef:	6a 00                	push   0x0
c000e0f1:	6a 00                	push   0x0
c000e0f3:	56                   	push   esi
c000e0f4:	e8 11 c7 00 00       	call   c001a80a <CPU::open(int, int, void*)>
c000e0f9:	83 c4 14             	add    esp,0x14
c000e0fc:	68 1f 3e 02 c0       	push   0xc0023e1f
c000e101:	e8 0b f1 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000e106:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e10d:	e8 76 16 00 00       	call   c000f788 <malloc>
c000e112:	89 04 24             	mov    DWORD PTR [esp],eax
c000e115:	89 c6                	mov    esi,eax
c000e117:	e8 18 e7 ff ff       	call   c000c834 <ACPI::ACPI()>
c000e11c:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e122:	5a                   	pop    edx
c000e123:	59                   	pop    ecx
c000e124:	56                   	push   esi
c000e125:	53                   	push   ebx
c000e126:	e8 cb b8 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000e12b:	5e                   	pop    esi
c000e12c:	58                   	pop    eax
c000e12d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e133:	50                   	push   eax
c000e134:	53                   	push   ebx
c000e135:	e8 bc b8 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000e13a:	83 c4 14             	add    esp,0x14
c000e13d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e142:	5b                   	pop    ebx
c000e143:	5e                   	pop    esi
c000e144:	c3                   	ret    

c000e145 <KeCalculateCRC32(unsigned char*, int)>:
c000e145:	53                   	push   ebx
c000e146:	83 c8 ff             	or     eax,0xffffffff
c000e149:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e14d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e151:	01 cb                	add    ebx,ecx
c000e153:	39 d9                	cmp    ecx,ebx
c000e155:	74 15                	je     c000e16c <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e157:	41                   	inc    ecx
c000e158:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e15b:	31 c2                	xor    edx,eax
c000e15d:	c1 e8 08             	shr    eax,0x8
c000e160:	0f b6 d2             	movzx  edx,dl
c000e163:	33 04 95 e0 62 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9d20]
c000e16a:	eb e7                	jmp    c000e153 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e16c:	5b                   	pop    ebx
c000e16d:	f7 d0                	not    eax
c000e16f:	c3                   	ret    

c000e170 <EnvVarContainer::getEnv(char const*)>:
c000e170:	57                   	push   edi
c000e171:	56                   	push   esi
c000e172:	53                   	push   ebx
c000e173:	31 db                	xor    ebx,ebx
c000e175:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e179:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e17b:	7e 2b                	jle    c000e1a8 <EnvVarContainer::getEnv(char const*)+0x38>
c000e17d:	50                   	push   eax
c000e17e:	50                   	push   eax
c000e17f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e182:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e189:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e18c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e190:	e8 eb 25 ff ff       	call   c0000780 <strcmp>
c000e195:	83 c4 10             	add    esp,0x10
c000e198:	85 c0                	test   eax,eax
c000e19a:	75 09                	jne    c000e1a5 <EnvVarContainer::getEnv(char const*)+0x35>
c000e19c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e19f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e1a3:	eb 05                	jmp    c000e1aa <EnvVarContainer::getEnv(char const*)+0x3a>
c000e1a5:	43                   	inc    ebx
c000e1a6:	eb d1                	jmp    c000e179 <EnvVarContainer::getEnv(char const*)+0x9>
c000e1a8:	31 c0                	xor    eax,eax
c000e1aa:	5b                   	pop    ebx
c000e1ab:	5e                   	pop    esi
c000e1ac:	5f                   	pop    edi
c000e1ad:	c3                   	ret    

c000e1ae <EnvVarContainer::setEnv(char const*, char const*)>:
c000e1ae:	55                   	push   ebp
c000e1af:	57                   	push   edi
c000e1b0:	56                   	push   esi
c000e1b1:	53                   	push   ebx
c000e1b2:	83 ec 28             	sub    esp,0x28
c000e1b5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e1b9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e1bd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e1c1:	56                   	push   esi
c000e1c2:	e8 b9 23 ff ff       	call   c0000580 <strlen>
c000e1c7:	40                   	inc    eax
c000e1c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1cb:	e8 b8 15 00 00       	call   c000f788 <malloc>
c000e1d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1d7:	e8 a4 23 ff ff       	call   c0000580 <strlen>
c000e1dc:	40                   	inc    eax
c000e1dd:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1e0:	e8 a3 15 00 00       	call   c000f788 <malloc>
c000e1e5:	89 34 24             	mov    DWORD PTR [esp],esi
c000e1e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1ec:	e8 8f 23 ff ff       	call   c0000580 <strlen>
c000e1f1:	83 c4 0c             	add    esp,0xc
c000e1f4:	40                   	inc    eax
c000e1f5:	50                   	push   eax
c000e1f6:	6a 00                	push   0x0
c000e1f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1fc:	e8 ef 22 ff ff       	call   c00004f0 <memset>
c000e201:	89 34 24             	mov    DWORD PTR [esp],esi
c000e204:	e8 77 23 ff ff       	call   c0000580 <strlen>
c000e209:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e20d:	8d 48 01             	lea    ecx,[eax+0x1]
c000e210:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e212:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e215:	89 de                	mov    esi,ebx
c000e217:	e8 64 23 ff ff       	call   c0000580 <strlen>
c000e21c:	83 c4 0c             	add    esp,0xc
c000e21f:	40                   	inc    eax
c000e220:	50                   	push   eax
c000e221:	6a 00                	push   0x0
c000e223:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e227:	e8 c4 22 ff ff       	call   c00004f0 <memset>
c000e22c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e22f:	e8 4c 23 ff ff       	call   c0000580 <strlen>
c000e234:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e238:	8d 48 01             	lea    ecx,[eax+0x1]
c000e23b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e23d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e240:	40                   	inc    eax
c000e241:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e244:	c1 e0 03             	shl    eax,0x3
c000e247:	5a                   	pop    edx
c000e248:	59                   	pop    ecx
c000e249:	50                   	push   eax
c000e24a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e24d:	e8 22 15 00 00       	call   c000f774 <realloc>
c000e252:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e255:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e259:	b9 08 00 00 00       	mov    ecx,0x8
c000e25e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e261:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e265:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e267:	83 c4 2c             	add    esp,0x2c
c000e26a:	5b                   	pop    ebx
c000e26b:	5e                   	pop    esi
c000e26c:	5f                   	pop    edi
c000e26d:	5d                   	pop    ebp
c000e26e:	c3                   	ret    
c000e26f:	90                   	nop

c000e270 <EnvVarContainer::deleteEnv(char const*)>:
c000e270:	c3                   	ret    
c000e271:	90                   	nop

c000e272 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e272:	55                   	push   ebp
c000e273:	57                   	push   edi
c000e274:	56                   	push   esi
c000e275:	53                   	push   ebx
c000e276:	81 ec 38 01 00 00    	sub    esp,0x138
c000e27c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e283:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e28a:	68 14 01 00 00       	push   0x114
c000e28f:	e8 f4 14 00 00       	call   c000f788 <malloc>
c000e294:	83 c4 0c             	add    esp,0xc
c000e297:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e29a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e2a1:	89 c3                	mov    ebx,eax
c000e2a3:	50                   	push   eax
c000e2a4:	e8 df 9e ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000e2a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e2ac:	e8 b9 a1 ff ff       	call   c000846a <File::exists()>
c000e2b1:	83 c4 10             	add    esp,0x10
c000e2b4:	84 c0                	test   al,al
c000e2b6:	75 31                	jne    c000e2e9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e2b8:	50                   	push   eax
c000e2b9:	50                   	push   eax
c000e2ba:	6a 12                	push   0x12
c000e2bc:	53                   	push   ebx
c000e2bd:	e8 e4 9e ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000e2c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2c4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e2c7:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2ca:	e8 b1 22 ff ff       	call   c0000580 <strlen>
c000e2cf:	5a                   	pop    edx
c000e2d0:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e2d4:	52                   	push   edx
c000e2d5:	31 d2                	xor    edx,edx
c000e2d7:	56                   	push   esi
c000e2d8:	52                   	push   edx
c000e2d9:	50                   	push   eax
c000e2da:	53                   	push   ebx
c000e2db:	ff d7                	call   edi
c000e2dd:	83 c4 14             	add    esp,0x14
c000e2e0:	53                   	push   ebx
c000e2e1:	e8 1e 9f ff ff       	call   c0008204 <File::close()>
c000e2e6:	83 c4 10             	add    esp,0x10
c000e2e9:	56                   	push   esi
c000e2ea:	31 f6                	xor    esi,esi
c000e2ec:	68 00 01 00 00       	push   0x100
c000e2f1:	6a 00                	push   0x0
c000e2f3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e2f7:	50                   	push   eax
c000e2f8:	e8 f3 21 ff ff       	call   c00004f0 <memset>
c000e2fd:	5f                   	pop    edi
c000e2fe:	58                   	pop    eax
c000e2ff:	6a 01                	push   0x1
c000e301:	53                   	push   ebx
c000e302:	e8 9f 9e ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000e307:	83 c4 10             	add    esp,0x10
c000e30a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e312:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e31a:	83 ec 0c             	sub    esp,0xc
c000e31d:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e321:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e323:	52                   	push   edx
c000e324:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000e328:	51                   	push   ecx
c000e329:	6a 00                	push   0x0
c000e32b:	6a 01                	push   0x1
c000e32d:	53                   	push   ebx
c000e32e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e331:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e336:	83 c4 20             	add    esp,0x20
c000e339:	85 c0                	test   eax,eax
c000e33b:	89 c1                	mov    ecx,eax
c000e33d:	0f 84 36 01 00 00    	je     c000e479 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e343:	83 f8 0d             	cmp    eax,0xd
c000e346:	0f 84 22 01 00 00    	je     c000e46e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e34c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e351:	0f 84 f0 00 00 00    	je     c000e447 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e357:	83 f8 0a             	cmp    eax,0xa
c000e35a:	74 13                	je     c000e36f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e35c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e361:	74 0c                	je     c000e36f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e363:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e369:	0f 8e f6 00 00 00    	jle    c000e465 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e36f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e373:	83 ec 0c             	sub    esp,0xc
c000e376:	8d 78 01             	lea    edi,[eax+0x1]
c000e379:	57                   	push   edi
c000e37a:	e8 09 14 00 00       	call   c000f788 <malloc>
c000e37f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e383:	8d 56 04             	lea    edx,[esi+0x4]
c000e386:	89 14 24             	mov    DWORD PTR [esp],edx
c000e389:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e38d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e391:	e8 f2 13 00 00       	call   c000f788 <malloc>
c000e396:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e39a:	83 c4 0c             	add    esp,0xc
c000e39d:	57                   	push   edi
c000e39e:	6a 00                	push   0x0
c000e3a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e3a4:	e8 47 21 ff ff       	call   c00004f0 <memset>
c000e3a9:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e3ad:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e3b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e3b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3b7:	83 c4 0c             	add    esp,0xc
c000e3ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3be:	52                   	push   edx
c000e3bf:	6a 00                	push   0x0
c000e3c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e3c5:	e8 26 21 ff ff       	call   c00004f0 <memset>
c000e3ca:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e3ce:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e3d2:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3d5:	e8 a6 21 ff ff       	call   c0000580 <strlen>
c000e3da:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e3de:	89 c1                	mov    ecx,eax
c000e3e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e3e5:	83 c4 10             	add    esp,0x10
c000e3e8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e3eb:	40                   	inc    eax
c000e3ec:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e3ef:	85 d2                	test   edx,edx
c000e3f1:	75 0c                	jne    c000e3ff <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e3f3:	83 ec 0c             	sub    esp,0xc
c000e3f6:	6a 08                	push   0x8
c000e3f8:	e8 8b 13 00 00       	call   c000f788 <malloc>
c000e3fd:	eb 0c                	jmp    c000e40b <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e3ff:	51                   	push   ecx
c000e400:	51                   	push   ecx
c000e401:	c1 e0 03             	shl    eax,0x3
c000e404:	50                   	push   eax
c000e405:	52                   	push   edx
c000e406:	e8 69 13 00 00       	call   c000f774 <realloc>
c000e40b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e40e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e411:	83 c4 10             	add    esp,0x10
c000e414:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e417:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e41b:	b9 08 00 00 00       	mov    ecx,0x8
c000e420:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e424:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e426:	50                   	push   eax
c000e427:	31 f6                	xor    esi,esi
c000e429:	68 00 01 00 00       	push   0x100
c000e42e:	6a 00                	push   0x0
c000e430:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e434:	50                   	push   eax
c000e435:	e8 b6 20 ff ff       	call   c00004f0 <memset>
c000e43a:	83 c4 10             	add    esp,0x10
c000e43d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e445:	eb 27                	jmp    c000e46e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e447:	83 f8 3d             	cmp    eax,0x3d
c000e44a:	74 1e                	je     c000e46a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e44c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e452:	7f 07                	jg     c000e45b <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e454:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000e458:	46                   	inc    esi
c000e459:	eb 13                	jmp    c000e46e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e45b:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e463:	eb 09                	jmp    c000e46e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e465:	83 f8 3d             	cmp    eax,0x3d
c000e468:	75 ea                	jne    c000e454 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e46a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e46e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e473:	0f 85 99 fe ff ff    	jne    c000e312 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e479:	83 ec 0c             	sub    esp,0xc
c000e47c:	53                   	push   ebx
c000e47d:	e8 82 9d ff ff       	call   c0008204 <File::close()>
c000e482:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e484:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e487:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e48a:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e490:	5b                   	pop    ebx
c000e491:	5e                   	pop    esi
c000e492:	5f                   	pop    edi
c000e493:	5d                   	pop    ebp
c000e494:	c3                   	ret    
c000e495:	90                   	nop

c000e496 <EnvVarContainer::__loadSystem()>:
c000e496:	83 ec 10             	sub    esp,0x10
c000e499:	68 e0 66 02 c0       	push   0xc00266e0
c000e49e:	68 90 3e 02 c0       	push   0xc0023e90
c000e4a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4a7:	e8 c6 fd ff ff       	call   c000e272 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e4ac:	83 c4 1c             	add    esp,0x1c
c000e4af:	c3                   	ret    

c000e4b0 <EnvVarContainer::__loadUser()>:
c000e4b0:	c3                   	ret    
c000e4b1:	90                   	nop

c000e4b2 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e4b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e4c4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e4c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4d2:	90                   	nop
c000e4d3:	c3                   	ret    

c000e4d4 <EnvVarContainer::~EnvVarContainer()>:
c000e4d4:	83 ec 0c             	sub    esp,0xc
c000e4d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4de:	85 c0                	test   eax,eax
c000e4e0:	74 1d                	je     c000e4ff <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4e8:	85 c0                	test   eax,eax
c000e4ea:	74 13                	je     c000e4ff <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4f3:	83 ec 0c             	sub    esp,0xc
c000e4f6:	50                   	push   eax
c000e4f7:	e8 9c 12 00 00       	call   c000f798 <free>
c000e4fc:	83 c4 10             	add    esp,0x10
c000e4ff:	90                   	nop
c000e500:	83 c4 0c             	add    esp,0xc
c000e503:	c3                   	ret    

c000e504 <KeGetEnv(Process*, char const*)>:
c000e504:	53                   	push   ebx
c000e505:	83 ec 08             	sub    esp,0x8
c000e508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e50c:	39 05 98 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca98,eax
c000e512:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e516:	74 04                	je     c000e51c <KeGetEnv(Process*, char const*)+0x18>
c000e518:	85 c0                	test   eax,eax
c000e51a:	75 0b                	jne    c000e527 <KeGetEnv(Process*, char const*)+0x23>
c000e51c:	a1 10 c1 02 c0       	mov    eax,ds:0xc002c110
c000e521:	85 c0                	test   eax,eax
c000e523:	75 19                	jne    c000e53e <KeGetEnv(Process*, char const*)+0x3a>
c000e525:	eb 27                	jmp    c000e54e <KeGetEnv(Process*, char const*)+0x4a>
c000e527:	52                   	push   edx
c000e528:	52                   	push   edx
c000e529:	53                   	push   ebx
c000e52a:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e530:	e8 3b fc ff ff       	call   c000e170 <EnvVarContainer::getEnv(char const*)>
c000e535:	83 c4 10             	add    esp,0x10
c000e538:	85 c0                	test   eax,eax
c000e53a:	75 28                	jne    c000e564 <KeGetEnv(Process*, char const*)+0x60>
c000e53c:	eb de                	jmp    c000e51c <KeGetEnv(Process*, char const*)+0x18>
c000e53e:	52                   	push   edx
c000e53f:	52                   	push   edx
c000e540:	53                   	push   ebx
c000e541:	50                   	push   eax
c000e542:	e8 29 fc ff ff       	call   c000e170 <EnvVarContainer::getEnv(char const*)>
c000e547:	83 c4 10             	add    esp,0x10
c000e54a:	85 c0                	test   eax,eax
c000e54c:	75 16                	jne    c000e564 <KeGetEnv(Process*, char const*)+0x60>
c000e54e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e552:	a1 14 c1 02 c0       	mov    eax,ds:0xc002c114
c000e557:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e55b:	83 c4 08             	add    esp,0x8
c000e55e:	5b                   	pop    ebx
c000e55f:	e9 0c fc ff ff       	jmp    c000e170 <EnvVarContainer::getEnv(char const*)>
c000e564:	83 c4 08             	add    esp,0x8
c000e567:	5b                   	pop    ebx
c000e568:	c3                   	ret    

c000e569 <KeSetEnvSystem(char const*, char const*)>:
c000e569:	83 ec 10             	sub    esp,0x10
c000e56c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e570:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e574:	ff 35 14 c1 02 c0    	push   DWORD PTR ds:0xc002c114
c000e57a:	e8 2f fc ff ff       	call   c000e1ae <EnvVarContainer::setEnv(char const*, char const*)>
c000e57f:	83 c4 1c             	add    esp,0x1c
c000e582:	c3                   	ret    

c000e583 <KeSetEnvUser(char const*, char const*)>:
c000e583:	a1 10 c1 02 c0       	mov    eax,ds:0xc002c110
c000e588:	85 c0                	test   eax,eax
c000e58a:	74 15                	je     c000e5a1 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e58c:	83 ec 10             	sub    esp,0x10
c000e58f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e593:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e597:	50                   	push   eax
c000e598:	e8 11 fc ff ff       	call   c000e1ae <EnvVarContainer::setEnv(char const*, char const*)>
c000e59d:	83 c4 1c             	add    esp,0x1c
c000e5a0:	c3                   	ret    
c000e5a1:	c3                   	ret    

c000e5a2 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e5a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5a6:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e5ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5b0:	e9 f9 fb ff ff       	jmp    c000e1ae <EnvVarContainer::setEnv(char const*, char const*)>

c000e5b5 <KeDeleteEnvSystem(char const*)>:
c000e5b5:	c3                   	ret    

c000e5b6 <KeDeleteEnvUser(char const*)>:
c000e5b6:	c3                   	ret    

c000e5b7 <KeDeleteEnvProcess(Process*, char const*)>:
c000e5b7:	c3                   	ret    

c000e5b8 <KeNewProcessEnv(Process*)>:
c000e5b8:	83 ec 28             	sub    esp,0x28
c000e5bb:	6a 0c                	push   0xc
c000e5bd:	e8 c6 11 00 00       	call   c000f788 <malloc>
c000e5c2:	5a                   	pop    edx
c000e5c3:	59                   	pop    ecx
c000e5c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e5c8:	50                   	push   eax
c000e5c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5cd:	e8 e0 fe ff ff       	call   c000e4b2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e5d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5d6:	83 c4 2c             	add    esp,0x2c
c000e5d9:	c3                   	ret    

c000e5da <KeCopyProcessEnv(Process*, Process*)>:
c000e5da:	57                   	push   edi
c000e5db:	56                   	push   esi
c000e5dc:	53                   	push   ebx
c000e5dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e1:	83 ec 0c             	sub    esp,0xc
c000e5e4:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e5ea:	6a 0c                	push   0xc
c000e5ec:	e8 97 11 00 00       	call   c000f788 <malloc>
c000e5f1:	89 c3                	mov    ebx,eax
c000e5f3:	58                   	pop    eax
c000e5f4:	5a                   	pop    edx
c000e5f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5f9:	53                   	push   ebx
c000e5fa:	e8 b3 fe ff ff       	call   c000e4b2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e5ff:	8b 07                	mov    eax,DWORD PTR [edi]
c000e601:	89 03                	mov    DWORD PTR [ebx],eax
c000e603:	c1 e0 03             	shl    eax,0x3
c000e606:	89 04 24             	mov    DWORD PTR [esp],eax
c000e609:	e8 7a 11 00 00       	call   c000f788 <malloc>
c000e60e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e611:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e613:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e616:	89 c7                	mov    edi,eax
c000e618:	c1 e1 03             	shl    ecx,0x3
c000e61b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	89 d8                	mov    eax,ebx
c000e622:	5b                   	pop    ebx
c000e623:	5e                   	pop    esi
c000e624:	5f                   	pop    edi
c000e625:	c3                   	ret    

c000e626 <KeLoadSystemEnv()>:
c000e626:	53                   	push   ebx
c000e627:	83 ec 14             	sub    esp,0x14
c000e62a:	6a 0c                	push   0xc
c000e62c:	e8 57 11 00 00       	call   c000f788 <malloc>
c000e631:	89 c3                	mov    ebx,eax
c000e633:	58                   	pop    eax
c000e634:	5a                   	pop    edx
c000e635:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000e63b:	53                   	push   ebx
c000e63c:	e8 71 fe ff ff       	call   c000e4b2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e641:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e644:	89 1d 14 c1 02 c0    	mov    DWORD PTR ds:0xc002c114,ebx
c000e64a:	e8 47 fe ff ff       	call   c000e496 <EnvVarContainer::__loadSystem()>
c000e64f:	83 c4 18             	add    esp,0x18
c000e652:	5b                   	pop    ebx
c000e653:	c3                   	ret    

c000e654 <KeLoadUserEnv()>:
c000e654:	53                   	push   ebx
c000e655:	83 ec 14             	sub    esp,0x14
c000e658:	6a 0c                	push   0xc
c000e65a:	e8 29 11 00 00       	call   c000f788 <malloc>
c000e65f:	89 c3                	mov    ebx,eax
c000e661:	58                   	pop    eax
c000e662:	5a                   	pop    edx
c000e663:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000e669:	53                   	push   ebx
c000e66a:	e8 43 fe ff ff       	call   c000e4b2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e66f:	89 1d 10 c1 02 c0    	mov    DWORD PTR ds:0xc002c110,ebx
c000e675:	83 c4 18             	add    esp,0x18
c000e678:	5b                   	pop    ebx
c000e679:	c3                   	ret    

c000e67a <KeFlushEnv()>:
c000e67a:	c3                   	ret    

c000e67b <KeGetProcessTotalEnvCount(Process*)>:
c000e67b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e67f:	8b 15 10 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c110
c000e685:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e68b:	a1 14 c1 02 c0       	mov    eax,ds:0xc002c114
c000e690:	8b 00                	mov    eax,DWORD PTR [eax]
c000e692:	03 01                	add    eax,DWORD PTR [ecx]
c000e694:	85 d2                	test   edx,edx
c000e696:	74 02                	je     c000e69a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e698:	03 02                	add    eax,DWORD PTR [edx]
c000e69a:	c3                   	ret    

c000e69b <KeGetProcessEnvPair(Process*, int)>:
c000e69b:	57                   	push   edi
c000e69c:	56                   	push   esi
c000e69d:	8b 35 10 c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c110
c000e6a3:	53                   	push   ebx
c000e6a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e6a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6ac:	85 f6                	test   esi,esi
c000e6ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6b2:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e6b8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e6ba:	75 16                	jne    c000e6d2 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e6bc:	39 c2                	cmp    edx,eax
c000e6be:	7c 16                	jl     c000e6d6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e6c0:	8b 0d 14 c1 02 c0    	mov    ecx,DWORD PTR ds:0xc002c114
c000e6c6:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e6c8:	01 c6                	add    esi,eax
c000e6ca:	39 d6                	cmp    esi,edx
c000e6cc:	7e 3c                	jle    c000e70a <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e6ce:	29 c2                	sub    edx,eax
c000e6d0:	eb 04                	jmp    c000e6d6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e6d2:	39 c2                	cmp    edx,eax
c000e6d4:	7d 05                	jge    c000e6db <KeGetProcessEnvPair(Process*, int)+0x40>
c000e6d6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e6d9:	eb 20                	jmp    c000e6fb <KeGetProcessEnvPair(Process*, int)+0x60>
c000e6db:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e6dd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e6e0:	39 d1                	cmp    ecx,edx
c000e6e2:	7e 04                	jle    c000e6e8 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e6e4:	29 c2                	sub    edx,eax
c000e6e6:	eb 10                	jmp    c000e6f8 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e6e8:	8b 35 14 c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c114
c000e6ee:	03 0e                	add    ecx,DWORD PTR [esi]
c000e6f0:	39 d1                	cmp    ecx,edx
c000e6f2:	7e 16                	jle    c000e70a <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e6f4:	29 c2                	sub    edx,eax
c000e6f6:	29 fa                	sub    edx,edi
c000e6f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e6fb:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e6fe:	8b 02                	mov    eax,DWORD PTR [edx]
c000e700:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e703:	89 03                	mov    DWORD PTR [ebx],eax
c000e705:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e708:	eb 1d                	jmp    c000e727 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e70a:	83 ec 0c             	sub    esp,0xc
c000e70d:	68 b2 3e 02 c0       	push   0xc0023eb2
c000e712:	e8 cd 14 00 00       	call   c000fbe4 <KePanic(char const*)>
c000e717:	83 c4 10             	add    esp,0x10
c000e71a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e720:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e727:	89 d8                	mov    eax,ebx
c000e729:	5b                   	pop    ebx
c000e72a:	5e                   	pop    esi
c000e72b:	5f                   	pop    edi
c000e72c:	c2 04 00             	ret    0x4
c000e72f:	90                   	nop

c000e730 <KeDisplayProgramFault(char const*)>:
c000e730:	83 ec 0c             	sub    esp,0xc
c000e733:	83 ec 0c             	sub    esp,0xc
c000e736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e73a:	e8 27 88 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e73f:	83 c4 10             	add    esp,0x10
c000e742:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e747:	8b 00                	mov    eax,DWORD PTR [eax]
c000e749:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e74c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e752:	85 c0                	test   eax,eax
c000e754:	74 22                	je     c000e778 <KeDisplayProgramFault(char const*)+0x48>
c000e756:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e75b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e75d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e760:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e766:	6a 04                	push   0x4
c000e768:	6a 0f                	push   0xf
c000e76a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e76e:	50                   	push   eax
c000e76f:	e8 ce 3e 00 00       	call   c0012642 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e774:	83 c4 10             	add    esp,0x10
c000e777:	90                   	nop
c000e778:	90                   	nop
c000e779:	83 c4 0c             	add    esp,0xc
c000e77c:	c3                   	ret    
c000e77d:	8d 76 00             	lea    esi,[esi+0x0]

c000e780 <KeGeneralProtectionFault(void*, void*)>:
c000e780:	83 ec 0c             	sub    esp,0xc
c000e783:	83 ec 08             	sub    esp,0x8
c000e786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e78a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e78e:	e8 eb b3 00 00       	call   c0019b7e <HalHandleGeneralProtectionFault(void*, void*)>
c000e793:	83 c4 10             	add    esp,0x10
c000e796:	0f b6 c0             	movzx  eax,al
c000e799:	85 c0                	test   eax,eax
c000e79b:	75 2f                	jne    c000e7cc <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e79d:	83 ec 0c             	sub    esp,0xc
c000e7a0:	68 cc 3e 02 c0       	push   0xc0023ecc
c000e7a5:	e8 86 ff ff ff       	call   c000e730 <KeDisplayProgramFault(char const*)>
c000e7aa:	83 c4 10             	add    esp,0x10
c000e7ad:	83 ec 0c             	sub    esp,0xc
c000e7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7b4:	e8 29 b5 00 00       	call   c0019ce2 <HalDisplayDebugInfo(void*)>
c000e7b9:	83 c4 10             	add    esp,0x10
c000e7bc:	83 ec 0c             	sub    esp,0xc
c000e7bf:	6a 7e                	push   0x7e
c000e7c1:	e8 52 8d 00 00       	call   c0017518 <KeTerminateCurrentThread(int)>
c000e7c6:	83 c4 10             	add    esp,0x10
c000e7c9:	eb 05                	jmp    c000e7d0 <KeGeneralProtectionFault(void*, void*)+0x50>
c000e7cb:	90                   	nop
c000e7cc:	90                   	nop
c000e7cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e7d0:	83 c4 0c             	add    esp,0xc
c000e7d3:	c3                   	ret    

c000e7d4 <KePageFault(void*, void*)>:
c000e7d4:	83 ec 0c             	sub    esp,0xc
c000e7d7:	83 ec 08             	sub    esp,0x8
c000e7da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7e2:	e8 8a b4 00 00       	call   c0019c71 <HalHandlePageFault(void*, void*)>
c000e7e7:	83 c4 10             	add    esp,0x10
c000e7ea:	0f b6 c0             	movzx  eax,al
c000e7ed:	85 c0                	test   eax,eax
c000e7ef:	75 2f                	jne    c000e820 <KePageFault(void*, void*)+0x4c>
c000e7f1:	83 ec 0c             	sub    esp,0xc
c000e7f4:	68 e5 3e 02 c0       	push   0xc0023ee5
c000e7f9:	e8 32 ff ff ff       	call   c000e730 <KeDisplayProgramFault(char const*)>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	83 ec 0c             	sub    esp,0xc
c000e804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e808:	e8 d5 b4 00 00       	call   c0019ce2 <HalDisplayDebugInfo(void*)>
c000e80d:	83 c4 10             	add    esp,0x10
c000e810:	83 ec 0c             	sub    esp,0xc
c000e813:	6a 7f                	push   0x7f
c000e815:	e8 fe 8c 00 00       	call   c0017518 <KeTerminateCurrentThread(int)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	eb 05                	jmp    c000e824 <KePageFault(void*, void*)+0x50>
c000e81f:	90                   	nop
c000e820:	90                   	nop
c000e821:	8d 76 00             	lea    esi,[esi+0x0]
c000e824:	83 c4 0c             	add    esp,0xc
c000e827:	c3                   	ret    

c000e828 <KeOpcodeFault(void*, void*)>:
c000e828:	83 ec 0c             	sub    esp,0xc
c000e82b:	83 ec 08             	sub    esp,0x8
c000e82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e836:	e8 65 b4 00 00       	call   c0019ca0 <HalHandleOpcodeFault(void*, void*)>
c000e83b:	83 c4 10             	add    esp,0x10
c000e83e:	0f b6 c0             	movzx  eax,al
c000e841:	85 c0                	test   eax,eax
c000e843:	75 2f                	jne    c000e874 <KeOpcodeFault(void*, void*)+0x4c>
c000e845:	83 ec 0c             	sub    esp,0xc
c000e848:	68 f0 3e 02 c0       	push   0xc0023ef0
c000e84d:	e8 de fe ff ff       	call   c000e730 <KeDisplayProgramFault(char const*)>
c000e852:	83 c4 10             	add    esp,0x10
c000e855:	83 ec 0c             	sub    esp,0xc
c000e858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e85c:	e8 81 b4 00 00       	call   c0019ce2 <HalDisplayDebugInfo(void*)>
c000e861:	83 c4 10             	add    esp,0x10
c000e864:	83 ec 0c             	sub    esp,0xc
c000e867:	6a 7c                	push   0x7c
c000e869:	e8 aa 8c 00 00       	call   c0017518 <KeTerminateCurrentThread(int)>
c000e86e:	83 c4 10             	add    esp,0x10
c000e871:	eb 05                	jmp    c000e878 <KeOpcodeFault(void*, void*)+0x50>
c000e873:	90                   	nop
c000e874:	90                   	nop
c000e875:	8d 76 00             	lea    esi,[esi+0x0]
c000e878:	83 c4 0c             	add    esp,0xc
c000e87b:	c3                   	ret    

c000e87c <KeOtherFault(void*, void*)>:
c000e87c:	83 ec 0c             	sub    esp,0xc
c000e87f:	83 ec 0c             	sub    esp,0xc
c000e882:	68 0c 3f 02 c0       	push   0xc0023f0c
c000e887:	e8 a4 fe ff ff       	call   c000e730 <KeDisplayProgramFault(char const*)>
c000e88c:	83 c4 10             	add    esp,0x10
c000e88f:	83 ec 0c             	sub    esp,0xc
c000e892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e896:	e8 47 b4 00 00       	call   c0019ce2 <HalDisplayDebugInfo(void*)>
c000e89b:	83 c4 10             	add    esp,0x10
c000e89e:	83 ec 0c             	sub    esp,0xc
c000e8a1:	6a 7d                	push   0x7d
c000e8a3:	e8 70 8c 00 00       	call   c0017518 <KeTerminateCurrentThread(int)>
c000e8a8:	83 c4 10             	add    esp,0x10
c000e8ab:	90                   	nop
c000e8ac:	83 c4 0c             	add    esp,0xc
c000e8af:	c3                   	ret    

c000e8b0 <KeNonMaskableInterrupt(void*, void*)>:
c000e8b0:	83 ec 0c             	sub    esp,0xc
c000e8b3:	e8 b8 b7 00 00       	call   c001a070 <HalReceivedNMI()>
c000e8b8:	90                   	nop
c000e8b9:	83 c4 0c             	add    esp,0xc
c000e8bc:	c3                   	ret    
c000e8bd:	8d 76 00             	lea    esi,[esi+0x0]

c000e8c0 <KeDoubleFault(void*, void*)>:
c000e8c0:	83 ec 0c             	sub    esp,0xc
c000e8c3:	83 ec 0c             	sub    esp,0xc
c000e8c6:	68 fd 3e 02 c0       	push   0xc0023efd
c000e8cb:	e8 14 13 00 00       	call   c000fbe4 <KePanic(char const*)>
c000e8d0:	83 c4 10             	add    esp,0x10
c000e8d3:	90                   	nop
c000e8d4:	83 c4 0c             	add    esp,0xc
c000e8d7:	c3                   	ret    

c000e8d8 <GDTEntry::setBase(unsigned int)>:
c000e8d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e8e0:	89 c1                	mov    ecx,eax
c000e8e2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e8e6:	c1 e9 10             	shr    ecx,0x10
c000e8e9:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e8ec:	c1 e8 18             	shr    eax,0x18
c000e8ef:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e8f2:	c3                   	ret    
c000e8f3:	90                   	nop

c000e8f4 <GDTEntry::setLimit(unsigned int)>:
c000e8f4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e8f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8fc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e8ff:	66 89 01             	mov    WORD PTR [ecx],ax
c000e902:	c1 e8 10             	shr    eax,0x10
c000e905:	83 e0 0f             	and    eax,0xf
c000e908:	83 e2 f0             	and    edx,0xfffffff0
c000e90b:	09 d0                	or     eax,edx
c000e90d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e910:	c3                   	ret    
c000e911:	90                   	nop

c000e912 <GDT::GDT()>:
c000e912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e916:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e91c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e920:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e926:	90                   	nop
c000e927:	c3                   	ret    

c000e928 <GDT::addEntry(GDTEntry)>:
c000e928:	53                   	push   ebx
c000e929:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e92d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e935:	8b 02                	mov    eax,DWORD PTR [edx]
c000e937:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e93b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e93e:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e942:	c1 e0 03             	shl    eax,0x3
c000e945:	89 0a                	mov    DWORD PTR [edx],ecx
c000e947:	5b                   	pop    ebx
c000e948:	c3                   	ret    
c000e949:	90                   	nop

c000e94a <GDT::getNumberOfEntries()>:
c000e94a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e94e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e950:	c3                   	ret    
c000e951:	90                   	nop

c000e952 <GDT::flush()>:
c000e952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e956:	8b 10                	mov    edx,DWORD PTR [eax]
c000e958:	83 c0 04             	add    eax,0x4
c000e95b:	a3 1a c1 02 c0       	mov    ds:0xc002c11a,eax
c000e960:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e967:	66 89 15 18 c1 02 c0 	mov    WORD PTR ds:0xc002c118,dx
c000e96e:	e9 e7 19 ff ff       	jmp    c000035a <loadGDT>
c000e973:	90                   	nop

c000e974 <GDT::setup()>:
c000e974:	57                   	push   edi
c000e975:	56                   	push   esi
c000e976:	53                   	push   ebx
c000e977:	83 ec 30             	sub    esp,0x30
c000e97a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e97e:	6a 00                	push   0x0
c000e980:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e984:	56                   	push   esi
c000e985:	e8 4e ff ff ff       	call   c000e8d8 <GDTEntry::setBase(unsigned int)>
c000e98a:	6a 00                	push   0x0
c000e98c:	56                   	push   esi
c000e98d:	e8 62 ff ff ff       	call   c000e8f4 <GDTEntry::setLimit(unsigned int)>
c000e992:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e99a:	6a 00                	push   0x0
c000e99c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e9a0:	56                   	push   esi
c000e9a1:	e8 32 ff ff ff       	call   c000e8d8 <GDTEntry::setBase(unsigned int)>
c000e9a6:	68 ff ff ff 00       	push   0xffffff
c000e9ab:	56                   	push   esi
c000e9ac:	e8 43 ff ff ff       	call   c000e8f4 <GDTEntry::setLimit(unsigned int)>
c000e9b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9b5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e9b9:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e9be:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e9c2:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e9c7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e9cb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e9cf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e9d3:	89 f8                	mov    eax,edi
c000e9d5:	89 fa                	mov    edx,edi
c000e9d7:	80 e4 f7             	and    ah,0xf7
c000e9da:	80 ce 60             	or     dh,0x60
c000e9dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e9e1:	89 c7                	mov    edi,eax
c000e9e3:	80 cc 60             	or     ah,0x60
c000e9e6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e9ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e9ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e9f2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e9f6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9fa:	83 c4 20             	add    esp,0x20
c000e9fd:	6a 00                	push   0x0
c000e9ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ea03:	50                   	push   eax
c000ea04:	e8 cf fe ff ff       	call   c000e8d8 <GDTEntry::setBase(unsigned int)>
c000ea09:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ea0d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ea11:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ea15:	83 e0 3f             	and    eax,0x3f
c000ea18:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ea1c:	6a 00                	push   0x0
c000ea1e:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ea22:	50                   	push   eax
c000ea23:	e8 b0 fe ff ff       	call   c000e8d8 <GDTEntry::setBase(unsigned int)>
c000ea28:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ea2c:	83 e0 3f             	and    eax,0x3f
c000ea2f:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ea33:	83 c4 0c             	add    esp,0xc
c000ea36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea3e:	53                   	push   ebx
c000ea3f:	e8 e4 fe ff ff       	call   c000e928 <GDT::addEntry(GDTEntry)>
c000ea44:	83 c4 0c             	add    esp,0xc
c000ea47:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea4b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea4f:	53                   	push   ebx
c000ea50:	e8 d3 fe ff ff       	call   c000e928 <GDT::addEntry(GDTEntry)>
c000ea55:	83 c4 0c             	add    esp,0xc
c000ea58:	57                   	push   edi
c000ea59:	56                   	push   esi
c000ea5a:	53                   	push   ebx
c000ea5b:	e8 c8 fe ff ff       	call   c000e928 <GDT::addEntry(GDTEntry)>
c000ea60:	83 c4 0c             	add    esp,0xc
c000ea63:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ea67:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ea6b:	53                   	push   ebx
c000ea6c:	e8 b7 fe ff ff       	call   c000e928 <GDT::addEntry(GDTEntry)>
c000ea71:	83 c4 0c             	add    esp,0xc
c000ea74:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea78:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea7c:	53                   	push   ebx
c000ea7d:	e8 a6 fe ff ff       	call   c000e928 <GDT::addEntry(GDTEntry)>
c000ea82:	83 c4 0c             	add    esp,0xc
c000ea85:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea89:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea8d:	53                   	push   ebx
c000ea8e:	e8 95 fe ff ff       	call   c000e928 <GDT::addEntry(GDTEntry)>
c000ea93:	83 c4 0c             	add    esp,0xc
c000ea96:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea9e:	53                   	push   ebx
c000ea9f:	e8 84 fe ff ff       	call   c000e928 <GDT::addEntry(GDTEntry)>
c000eaa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eaa7:	e8 a6 fe ff ff       	call   c000e952 <GDT::flush()>
c000eaac:	83 c4 40             	add    esp,0x40
c000eaaf:	5b                   	pop    ebx
c000eab0:	5e                   	pop    esi
c000eab1:	5f                   	pop    edi
c000eab2:	c3                   	ret    

c000eab3 <idleFunction(void*)>:
c000eab3:	83 ec 0c             	sub    esp,0xc
c000eab6:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000eabd:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000eac4:	75 01                	jne    c000eac7 <idleFunction(void*)+0x14>
c000eac6:	fb                   	sti    
c000eac7:	e8 3f b6 00 00       	call   c001a10b <HalSystemIdle()>
c000eacc:	e8 75 35 01 00       	call   c0022046 <idleCommon()>
c000ead1:	eb f4                	jmp    c000eac7 <idleFunction(void*)+0x14>
c000ead3:	90                   	nop

c000ead4 <IDTEntry::IDTEntry(bool)>:
c000ead4:	53                   	push   ebx
c000ead5:	83 ec 04             	sub    esp,0x4
c000ead8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eadc:	88 04 24             	mov    BYTE PTR [esp],al
c000eadf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eae3:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eae9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaed:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eaf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaf5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eaf8:	83 e2 f0             	and    edx,0xfffffff0
c000eafb:	83 ca 0e             	or     edx,0xe
c000eafe:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb05:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb08:	83 e2 ef             	and    edx,0xffffffef
c000eb0b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb0e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000eb12:	85 c0                	test   eax,eax
c000eb14:	74 06                	je     c000eb1c <IDTEntry::IDTEntry(bool)+0x48>
c000eb16:	b2 03                	mov    dl,0x3
c000eb18:	eb 06                	jmp    c000eb20 <IDTEntry::IDTEntry(bool)+0x4c>
c000eb1a:	66 90                	xchg   ax,ax
c000eb1c:	b2 00                	mov    dl,0x0
c000eb1e:	66 90                	xchg   ax,ax
c000eb20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb24:	83 e2 03             	and    edx,0x3
c000eb27:	89 d3                	mov    ebx,edx
c000eb29:	c1 e3 05             	shl    ebx,0x5
c000eb2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb2f:	83 e2 9f             	and    edx,0xffffff9f
c000eb32:	88 d1                	mov    cl,dl
c000eb34:	88 da                	mov    dl,bl
c000eb36:	09 ca                	or     edx,ecx
c000eb38:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb3f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb42:	83 ca 80             	or     edx,0xffffff80
c000eb45:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb48:	90                   	nop
c000eb49:	83 c4 04             	add    esp,0x4
c000eb4c:	5b                   	pop    ebx
c000eb4d:	c3                   	ret    

c000eb4e <IDTEntry::setOffset(unsigned int)>:
c000eb4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eb52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb56:	66 89 02             	mov    WORD PTR [edx],ax
c000eb59:	c1 e8 10             	shr    eax,0x10
c000eb5c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000eb60:	c3                   	ret    
c000eb61:	90                   	nop
c000eb62:	66 90                	xchg   ax,ax

c000eb64 <IDT::IDT()>:
c000eb64:	90                   	nop
c000eb65:	c3                   	ret    

c000eb66 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000eb66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb6a:	83 c0 30             	add    eax,0x30
c000eb6d:	c3                   	ret    

c000eb6e <IDT::addEntry(IDTEntry, int)>:
c000eb6e:	53                   	push   ebx
c000eb6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb77:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb7f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000eb82:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000eb86:	5b                   	pop    ebx
c000eb87:	c3                   	ret    

c000eb88 <IDT::addEntry(int, void (*)(), bool)>:
c000eb88:	53                   	push   ebx
c000eb89:	83 ec 10             	sub    esp,0x10
c000eb8c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000eb91:	50                   	push   eax
c000eb92:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000eb96:	53                   	push   ebx
c000eb97:	e8 38 ff ff ff       	call   c000ead4 <IDTEntry::IDTEntry(bool)>
c000eb9c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eba0:	53                   	push   ebx
c000eba1:	e8 a8 ff ff ff       	call   c000eb4e <IDTEntry::setOffset(unsigned int)>
c000eba6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebaa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ebb6:	e8 b3 ff ff ff       	call   c000eb6e <IDT::addEntry(IDTEntry, int)>
c000ebbb:	83 c4 30             	add    esp,0x30
c000ebbe:	5b                   	pop    ebx
c000ebbf:	c3                   	ret    

c000ebc0 <IDT::flush()>:
c000ebc0:	66 c7 05 20 c1 02 c0 ff 07 	mov    WORD PTR ds:0xc002c120,0x7ff
c000ebc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebcd:	a3 22 c1 02 c0       	mov    ds:0xc002c122,eax
c000ebd2:	0f 01 1d 20 c1 02 c0 	lidtd  ds:0xc002c120
c000ebd9:	c3                   	ret    

c000ebda <IDT::setup()>:
c000ebda:	57                   	push   edi
c000ebdb:	56                   	push   esi
c000ebdc:	53                   	push   ebx
c000ebdd:	83 ec 10             	sub    esp,0x10
c000ebe0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ebe4:	6a 00                	push   0x0
c000ebe6:	68 20 13 02 c0       	push   0xc0021320
c000ebeb:	6a 00                	push   0x0
c000ebed:	53                   	push   ebx
c000ebee:	e8 95 ff ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ebf3:	6a 00                	push   0x0
c000ebf5:	68 30 13 02 c0       	push   0xc0021330
c000ebfa:	6a 01                	push   0x1
c000ebfc:	53                   	push   ebx
c000ebfd:	e8 86 ff ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ec02:	83 c4 20             	add    esp,0x20
c000ec05:	6a 00                	push   0x0
c000ec07:	68 3a 13 02 c0       	push   0xc002133a
c000ec0c:	6a 02                	push   0x2
c000ec0e:	53                   	push   ebx
c000ec0f:	e8 74 ff ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ec14:	6a 00                	push   0x0
c000ec16:	68 44 13 02 c0       	push   0xc0021344
c000ec1b:	6a 03                	push   0x3
c000ec1d:	53                   	push   ebx
c000ec1e:	e8 65 ff ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ec23:	83 c4 20             	add    esp,0x20
c000ec26:	6a 00                	push   0x0
c000ec28:	68 4e 13 02 c0       	push   0xc002134e
c000ec2d:	6a 04                	push   0x4
c000ec2f:	53                   	push   ebx
c000ec30:	e8 53 ff ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ec35:	6a 00                	push   0x0
c000ec37:	68 58 13 02 c0       	push   0xc0021358
c000ec3c:	6a 05                	push   0x5
c000ec3e:	53                   	push   ebx
c000ec3f:	e8 44 ff ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ec44:	83 c4 20             	add    esp,0x20
c000ec47:	6a 00                	push   0x0
c000ec49:	68 62 13 02 c0       	push   0xc0021362
c000ec4e:	6a 06                	push   0x6
c000ec50:	53                   	push   ebx
c000ec51:	e8 32 ff ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ec56:	6a 00                	push   0x0
c000ec58:	68 6c 13 02 c0       	push   0xc002136c
c000ec5d:	6a 07                	push   0x7
c000ec5f:	53                   	push   ebx
c000ec60:	e8 23 ff ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ec65:	83 c4 20             	add    esp,0x20
c000ec68:	6a 00                	push   0x0
c000ec6a:	68 76 13 02 c0       	push   0xc0021376
c000ec6f:	6a 08                	push   0x8
c000ec71:	53                   	push   ebx
c000ec72:	e8 11 ff ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ec77:	6a 00                	push   0x0
c000ec79:	68 7e 13 02 c0       	push   0xc002137e
c000ec7e:	6a 09                	push   0x9
c000ec80:	53                   	push   ebx
c000ec81:	e8 02 ff ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ec86:	83 c4 20             	add    esp,0x20
c000ec89:	6a 00                	push   0x0
c000ec8b:	68 88 13 02 c0       	push   0xc0021388
c000ec90:	6a 0a                	push   0xa
c000ec92:	53                   	push   ebx
c000ec93:	e8 f0 fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ec98:	6a 00                	push   0x0
c000ec9a:	68 90 13 02 c0       	push   0xc0021390
c000ec9f:	6a 0b                	push   0xb
c000eca1:	53                   	push   ebx
c000eca2:	e8 e1 fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000eca7:	83 c4 20             	add    esp,0x20
c000ecaa:	6a 00                	push   0x0
c000ecac:	68 98 13 02 c0       	push   0xc0021398
c000ecb1:	6a 0c                	push   0xc
c000ecb3:	53                   	push   ebx
c000ecb4:	e8 cf fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ecb9:	6a 00                	push   0x0
c000ecbb:	68 a0 13 02 c0       	push   0xc00213a0
c000ecc0:	6a 0d                	push   0xd
c000ecc2:	53                   	push   ebx
c000ecc3:	e8 c0 fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ecc8:	83 c4 20             	add    esp,0x20
c000eccb:	6a 00                	push   0x0
c000eccd:	68 ba 13 02 c0       	push   0xc00213ba
c000ecd2:	6a 0e                	push   0xe
c000ecd4:	53                   	push   ebx
c000ecd5:	e8 ae fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ecda:	6a 00                	push   0x0
c000ecdc:	68 c2 13 02 c0       	push   0xc00213c2
c000ece1:	6a 0f                	push   0xf
c000ece3:	53                   	push   ebx
c000ece4:	e8 9f fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ece9:	83 c4 20             	add    esp,0x20
c000ecec:	6a 00                	push   0x0
c000ecee:	68 cc 13 02 c0       	push   0xc00213cc
c000ecf3:	6a 10                	push   0x10
c000ecf5:	53                   	push   ebx
c000ecf6:	e8 8d fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ecfb:	6a 00                	push   0x0
c000ecfd:	68 d6 13 02 c0       	push   0xc00213d6
c000ed02:	6a 11                	push   0x11
c000ed04:	53                   	push   ebx
c000ed05:	e8 7e fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ed0a:	83 c4 20             	add    esp,0x20
c000ed0d:	6a 00                	push   0x0
c000ed0f:	68 e0 13 02 c0       	push   0xc00213e0
c000ed14:	6a 12                	push   0x12
c000ed16:	53                   	push   ebx
c000ed17:	e8 6c fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ed1c:	6a 01                	push   0x1
c000ed1e:	68 7a 14 02 c0       	push   0xc002147a
c000ed23:	6a 60                	push   0x60
c000ed25:	53                   	push   ebx
c000ed26:	e8 5d fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ed2b:	83 c4 20             	add    esp,0x20
c000ed2e:	6a 00                	push   0x0
c000ed30:	68 81 14 02 c0       	push   0xc0021481
c000ed35:	6a 20                	push   0x20
c000ed37:	53                   	push   ebx
c000ed38:	e8 4b fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ed3d:	6a 00                	push   0x0
c000ed3f:	68 6c 14 02 c0       	push   0xc002146c
c000ed44:	6a 21                	push   0x21
c000ed46:	53                   	push   ebx
c000ed47:	e8 3c fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ed4c:	83 c4 20             	add    esp,0x20
c000ed4f:	6a 00                	push   0x0
c000ed51:	68 73 14 02 c0       	push   0xc0021473
c000ed56:	6a 22                	push   0x22
c000ed58:	53                   	push   ebx
c000ed59:	e8 2a fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ed5e:	6a 00                	push   0x0
c000ed60:	68 ea 13 02 c0       	push   0xc00213ea
c000ed65:	6a 23                	push   0x23
c000ed67:	53                   	push   ebx
c000ed68:	e8 1b fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ed6d:	83 c4 20             	add    esp,0x20
c000ed70:	6a 00                	push   0x0
c000ed72:	68 f4 13 02 c0       	push   0xc00213f4
c000ed77:	6a 24                	push   0x24
c000ed79:	53                   	push   ebx
c000ed7a:	e8 09 fe ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	68 fe 13 02 c0       	push   0xc00213fe
c000ed86:	6a 25                	push   0x25
c000ed88:	53                   	push   ebx
c000ed89:	e8 fa fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ed8e:	83 c4 20             	add    esp,0x20
c000ed91:	6a 00                	push   0x0
c000ed93:	68 08 14 02 c0       	push   0xc0021408
c000ed98:	6a 26                	push   0x26
c000ed9a:	53                   	push   ebx
c000ed9b:	e8 e8 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000eda0:	6a 00                	push   0x0
c000eda2:	68 12 14 02 c0       	push   0xc0021412
c000eda7:	6a 27                	push   0x27
c000eda9:	53                   	push   ebx
c000edaa:	e8 d9 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000edaf:	83 c4 20             	add    esp,0x20
c000edb2:	6a 00                	push   0x0
c000edb4:	68 1c 14 02 c0       	push   0xc002141c
c000edb9:	6a 28                	push   0x28
c000edbb:	53                   	push   ebx
c000edbc:	e8 c7 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000edc1:	6a 00                	push   0x0
c000edc3:	68 26 14 02 c0       	push   0xc0021426
c000edc8:	6a 29                	push   0x29
c000edca:	53                   	push   ebx
c000edcb:	e8 b8 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000edd0:	83 c4 20             	add    esp,0x20
c000edd3:	6a 00                	push   0x0
c000edd5:	68 30 14 02 c0       	push   0xc0021430
c000edda:	6a 2a                	push   0x2a
c000eddc:	53                   	push   ebx
c000eddd:	e8 a6 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ede2:	6a 00                	push   0x0
c000ede4:	68 3a 14 02 c0       	push   0xc002143a
c000ede9:	6a 2b                	push   0x2b
c000edeb:	53                   	push   ebx
c000edec:	e8 97 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000edf1:	83 c4 20             	add    esp,0x20
c000edf4:	6a 00                	push   0x0
c000edf6:	68 44 14 02 c0       	push   0xc0021444
c000edfb:	6a 2c                	push   0x2c
c000edfd:	53                   	push   ebx
c000edfe:	e8 85 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ee03:	6a 00                	push   0x0
c000ee05:	68 4e 14 02 c0       	push   0xc002144e
c000ee0a:	6a 2d                	push   0x2d
c000ee0c:	53                   	push   ebx
c000ee0d:	e8 76 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ee12:	83 c4 20             	add    esp,0x20
c000ee15:	6a 00                	push   0x0
c000ee17:	68 58 14 02 c0       	push   0xc0021458
c000ee1c:	6a 2e                	push   0x2e
c000ee1e:	53                   	push   ebx
c000ee1f:	e8 64 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ee24:	6a 00                	push   0x0
c000ee26:	68 62 14 02 c0       	push   0xc0021462
c000ee2b:	6a 2f                	push   0x2f
c000ee2d:	53                   	push   ebx
c000ee2e:	e8 55 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ee33:	83 c4 20             	add    esp,0x20
c000ee36:	6a 00                	push   0x0
c000ee38:	68 84 15 02 c0       	push   0xc0021584
c000ee3d:	6a 30                	push   0x30
c000ee3f:	53                   	push   ebx
c000ee40:	e8 43 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ee45:	6a 00                	push   0x0
c000ee47:	68 8e 15 02 c0       	push   0xc002158e
c000ee4c:	6a 31                	push   0x31
c000ee4e:	53                   	push   ebx
c000ee4f:	e8 34 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ee54:	83 c4 20             	add    esp,0x20
c000ee57:	6a 00                	push   0x0
c000ee59:	68 98 15 02 c0       	push   0xc0021598
c000ee5e:	6a 32                	push   0x32
c000ee60:	53                   	push   ebx
c000ee61:	e8 22 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ee66:	6a 00                	push   0x0
c000ee68:	68 a2 15 02 c0       	push   0xc00215a2
c000ee6d:	6a 33                	push   0x33
c000ee6f:	53                   	push   ebx
c000ee70:	e8 13 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ee75:	83 c4 20             	add    esp,0x20
c000ee78:	6a 00                	push   0x0
c000ee7a:	68 ac 15 02 c0       	push   0xc00215ac
c000ee7f:	6a 34                	push   0x34
c000ee81:	53                   	push   ebx
c000ee82:	e8 01 fd ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ee87:	6a 00                	push   0x0
c000ee89:	68 b6 15 02 c0       	push   0xc00215b6
c000ee8e:	6a 35                	push   0x35
c000ee90:	53                   	push   ebx
c000ee91:	e8 f2 fc ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000ee96:	83 c4 20             	add    esp,0x20
c000ee99:	6a 00                	push   0x0
c000ee9b:	68 c0 15 02 c0       	push   0xc00215c0
c000eea0:	6a 36                	push   0x36
c000eea2:	53                   	push   ebx
c000eea3:	e8 e0 fc ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000eea8:	6a 00                	push   0x0
c000eeaa:	68 ca 15 02 c0       	push   0xc00215ca
c000eeaf:	6a 37                	push   0x37
c000eeb1:	53                   	push   ebx
c000eeb2:	e8 d1 fc ff ff       	call   c000eb88 <IDT::addEntry(int, void (*)(), bool)>
c000eeb7:	83 c4 1c             	add    esp,0x1c
c000eeba:	6a 03                	push   0x3
c000eebc:	6a 02                	push   0x2
c000eebe:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000eec4:	e8 f3 4a 00 00       	call   c00139bc <VAS::allocatePages(int, int)>
c000eec9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000eed0:	89 c6                	mov    esi,eax
c000eed2:	e8 b1 08 00 00       	call   c000f788 <malloc>
c000eed7:	81 c6 00 20 00 00    	add    esi,0x2000
c000eedd:	89 04 24             	mov    DWORD PTR [esp],eax
c000eee0:	89 c7                	mov    edi,eax
c000eee2:	e8 a5 3b 00 00       	call   c0012a8c <TSS::TSS()>
c000eee7:	83 c4 0c             	add    esp,0xc
c000eeea:	68 76 13 02 c0       	push   0xc0021376
c000eeef:	56                   	push   esi
c000eef0:	57                   	push   edi
c000eef1:	e8 da 3b 00 00       	call   c0012ad0 <TSS::setup(unsigned long, unsigned long)>
c000eef6:	89 c6                	mov    esi,eax
c000eef8:	58                   	pop    eax
c000eef9:	5a                   	pop    edx
c000eefa:	6a 00                	push   0x0
c000eefc:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef00:	50                   	push   eax
c000ef01:	e8 ce fb ff ff       	call   c000ead4 <IDTEntry::IDTEntry(bool)>
c000ef06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef0a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef0f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef1a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef20:	80 ce 05             	or     dh,0x5
c000ef23:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef27:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef2e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ef31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef34:	e8 87 fc ff ff       	call   c000ebc0 <IDT::flush()>
c000ef39:	83 c4 20             	add    esp,0x20
c000ef3c:	5b                   	pop    ebx
c000ef3d:	5e                   	pop    esi
c000ef3e:	5f                   	pop    edi
c000ef3f:	c3                   	ret    

c000ef40 <CPU::current()>:
c000ef40:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c000ef45:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ef4b:	c3                   	ret    

c000ef4c <operator new(unsigned long)>:
c000ef4c:	e9 37 08 00 00       	jmp    c000f788 <malloc>

c000ef51 <operator delete(void*)>:
c000ef51:	e9 52 08 00 00       	jmp    c000f7a8 <rfree>

c000ef56 <disableIRQs()>:
c000ef56:	fa                   	cli    
c000ef57:	c3                   	ret    

c000ef58 <enableIRQs()>:
c000ef58:	fb                   	sti    
c000ef59:	c3                   	ret    

c000ef5a <lockScheduler()>:
c000ef5a:	fa                   	cli    
c000ef5b:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c000ef61:	c3                   	ret    

c000ef62 <unlockScheduler()>:
c000ef62:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000ef69:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000ef70:	75 01                	jne    c000ef73 <unlockScheduler()+0x11>
c000ef72:	fb                   	sti    
c000ef73:	c3                   	ret    

c000ef74 <lockStuff()>:
c000ef74:	fa                   	cli    
c000ef75:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c000ef7b:	ff 05 6c ca 02 c0    	inc    DWORD PTR ds:0xc002ca6c
c000ef81:	c3                   	ret    

c000ef82 <unlockStuff()>:
c000ef82:	83 ec 0c             	sub    esp,0xc
c000ef85:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000ef8a:	48                   	dec    eax
c000ef8b:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c000ef90:	75 18                	jne    c000efaa <unlockStuff()+0x28>
c000ef92:	83 3d 68 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca68,0x0
c000ef99:	74 0f                	je     c000efaa <unlockStuff()+0x28>
c000ef9b:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c000efa5:	e8 7a 7d 00 00       	call   c0016d24 <schedule()>
c000efaa:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000efb1:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000efb8:	75 01                	jne    c000efbb <unlockStuff()+0x39>
c000efba:	fb                   	sti    
c000efbb:	83 c4 0c             	add    esp,0xc
c000efbe:	c3                   	ret    

c000efbf <Virt::getAKernelVAS()>:
c000efbf:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c000efc4:	c3                   	ret    

c000efc5 <__not_memcpy>:
c000efc5:	57                   	push   edi
c000efc6:	56                   	push   esi
c000efc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000efcf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000efd3:	89 c7                	mov    edi,eax
c000efd5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000efd7:	5e                   	pop    esi
c000efd8:	5f                   	pop    edi
c000efd9:	c3                   	ret    

c000efda <KeFormatDate(char*, int, int, int, int, bool)>:
c000efda:	55                   	push   ebp
c000efdb:	57                   	push   edi
c000efdc:	56                   	push   esi
c000efdd:	be e8 03 00 00       	mov    esi,0x3e8
c000efe2:	53                   	push   ebx
c000efe3:	bb 0a 00 00 00       	mov    ebx,0xa
c000efe8:	81 ec ac 00 00 00    	sub    esp,0xac
c000efee:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000eff3:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000effa:	89 c8                	mov    eax,ecx
c000effc:	99                   	cdq    
c000effd:	f7 fb                	idiv   ebx
c000efff:	89 d5                	mov    ebp,edx
c000f001:	99                   	cdq    
c000f002:	f7 fb                	idiv   ebx
c000f004:	8d 42 30             	lea    eax,[edx+0x30]
c000f007:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f00b:	8d 45 30             	lea    eax,[ebp+0x30]
c000f00e:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000f016:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f01a:	89 c8                	mov    eax,ecx
c000f01c:	99                   	cdq    
c000f01d:	f7 fe                	idiv   esi
c000f01f:	be 64 00 00 00       	mov    esi,0x64
c000f024:	99                   	cdq    
c000f025:	f7 fb                	idiv   ebx
c000f027:	8d 42 30             	lea    eax,[edx+0x30]
c000f02a:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f02e:	89 c8                	mov    eax,ecx
c000f030:	99                   	cdq    
c000f031:	f7 fe                	idiv   esi
c000f033:	99                   	cdq    
c000f034:	f7 fb                	idiv   ebx
c000f036:	31 db                	xor    ebx,ebx
c000f038:	8d 42 30             	lea    eax,[edx+0x30]
c000f03b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f03f:	0f be 8b 44 c1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd3ebc]
c000f046:	83 f9 59             	cmp    ecx,0x59
c000f049:	0f 84 1f 01 00 00    	je     c000f16e <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000f04f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f053:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000f05a:	83 f9 4d             	cmp    ecx,0x4d
c000f05d:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000f065:	57                   	push   edi
c000f066:	57                   	push   edi
c000f067:	89 d7                	mov    edi,edx
c000f069:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f06d:	c1 ff 1f             	sar    edi,0x1f
c000f070:	57                   	push   edi
c000f071:	52                   	push   edx
c000f072:	e8 6d 04 00 00       	call   c000f4e4 <KeGetDigitsInNumber(long long)>
c000f077:	83 c4 10             	add    esp,0x10
c000f07a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f07e:	48                   	dec    eax
c000f07f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f083:	75 1c                	jne    c000f0a1 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f085:	83 f9 44             	cmp    ecx,0x44
c000f088:	75 09                	jne    c000f093 <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000f08a:	80 3d 60 c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c160,0x0
c000f091:	eb 0c                	jmp    c000f09f <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000f093:	83 f9 4d             	cmp    ecx,0x4d
c000f096:	75 60                	jne    c000f0f8 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f098:	80 3d 61 c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c161,0x0
c000f09f:	74 57                	je     c000f0f8 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f0a1:	89 d0                	mov    eax,edx
c000f0a3:	b9 0a 00 00 00       	mov    ecx,0xa
c000f0a8:	99                   	cdq    
c000f0a9:	f7 f9                	idiv   ecx
c000f0ab:	89 d6                	mov    esi,edx
c000f0ad:	99                   	cdq    
c000f0ae:	f7 f9                	idiv   ecx
c000f0b0:	83 c2 30             	add    edx,0x30
c000f0b3:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f0b7:	8d 56 30             	lea    edx,[esi+0x30]
c000f0ba:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f0be:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f0c3:	56                   	push   esi
c000f0c4:	56                   	push   esi
c000f0c5:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f0c9:	57                   	push   edi
c000f0ca:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f0ce:	56                   	push   esi
c000f0cf:	e8 9c 17 ff ff       	call   c0000870 <strcat>
c000f0d4:	83 c4 10             	add    esp,0x10
c000f0d7:	83 fb 02             	cmp    ebx,0x2
c000f0da:	74 34                	je     c000f110 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f0dc:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f0e1:	a0 48 c1 02 c0       	mov    al,ds:0xc002c148
c000f0e6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f0ea:	51                   	push   ecx
c000f0eb:	51                   	push   ecx
c000f0ec:	57                   	push   edi
c000f0ed:	56                   	push   esi
c000f0ee:	e8 7d 17 ff ff       	call   c0000870 <strcat>
c000f0f3:	83 c4 10             	add    esp,0x10
c000f0f6:	eb 18                	jmp    c000f110 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f0f8:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f0fd:	89 d0                	mov    eax,edx
c000f0ff:	b9 0a 00 00 00       	mov    ecx,0xa
c000f104:	99                   	cdq    
c000f105:	f7 f9                	idiv   ecx
c000f107:	83 c2 30             	add    edx,0x30
c000f10a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f10e:	eb b3                	jmp    c000f0c3 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f110:	43                   	inc    ebx
c000f111:	83 fb 03             	cmp    ebx,0x3
c000f114:	0f 85 25 ff ff ff    	jne    c000f03f <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000f11a:	52                   	push   edx
c000f11b:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f122:	6a 00                	push   0x0
c000f124:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f12b:	e8 c0 13 ff ff       	call   c00004f0 <memset>
c000f130:	89 34 24             	mov    DWORD PTR [esp],esi
c000f133:	e8 48 14 ff ff       	call   c0000580 <strlen>
c000f138:	83 c4 10             	add    esp,0x10
c000f13b:	40                   	inc    eax
c000f13c:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f143:	72 14                	jb     c000f159 <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000f145:	50                   	push   eax
c000f146:	50                   	push   eax
c000f147:	56                   	push   esi
c000f148:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f14f:	e8 fc 14 ff ff       	call   c0000650 <strcpy>
c000f154:	83 c4 10             	add    esp,0x10
c000f157:	eb 58                	jmp    c000f1b1 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f159:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f160:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f167:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f16a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f16c:	eb 43                	jmp    c000f1b1 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f16e:	85 ed                	test   ebp,ebp
c000f170:	74 2a                	je     c000f19c <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000f172:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f177:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f17b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f17f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f183:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f187:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f18b:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f18f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f193:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f197:	e9 27 ff ff ff       	jmp    c000f0c3 <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f19c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f1a0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f1a4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f1a8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f1ac:	e9 0d ff ff ff       	jmp    c000f0be <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000f1b1:	81 c4 ac 00 00 00    	add    esp,0xac
c000f1b7:	5b                   	pop    ebx
c000f1b8:	5e                   	pop    esi
c000f1b9:	5f                   	pop    edi
c000f1ba:	5d                   	pop    ebp
c000f1bb:	c3                   	ret    

c000f1bc <KeFormatShortDate(char*, int, int, int, int)>:
c000f1bc:	83 ec 14             	sub    esp,0x14
c000f1bf:	6a 00                	push   0x0
c000f1c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1d5:	e8 00 fe ff ff       	call   c000efda <KeFormatDate(char*, int, int, int, int, bool)>
c000f1da:	83 c4 2c             	add    esp,0x2c
c000f1dd:	c3                   	ret    

c000f1de <KeFormatLongDate(char*, int, int, int, int)>:
c000f1de:	83 ec 14             	sub    esp,0x14
c000f1e1:	6a 01                	push   0x1
c000f1e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1f7:	e8 de fd ff ff       	call   c000efda <KeFormatDate(char*, int, int, int, int, bool)>
c000f1fc:	83 c4 2c             	add    esp,0x2c
c000f1ff:	c3                   	ret    

c000f200 <KeSetLocale(klocale_t)>:
c000f200:	57                   	push   edi
c000f201:	b9 09 00 00 00       	mov    ecx,0x9
c000f206:	56                   	push   esi
c000f207:	bf 40 c1 02 c0       	mov    edi,0xc002c140
c000f20c:	fc                   	cld    
c000f20d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f211:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f213:	5e                   	pop    esi
c000f214:	5f                   	pop    edi
c000f215:	c3                   	ret    

c000f216 <KeInitialiseLocale()>:
c000f216:	57                   	push   edi
c000f217:	56                   	push   esi
c000f218:	83 ec 3c             	sub    esp,0x3c
c000f21b:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f223:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f22b:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f233:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f23b:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f242:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f24a:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f252:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f259:	68 34 3f 02 c0       	push   0xc0023f34
c000f25e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f262:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f266:	50                   	push   eax
c000f267:	e8 e4 13 ff ff       	call   c0000650 <strcpy>
c000f26c:	83 ec 20             	sub    esp,0x20
c000f26f:	b9 09 00 00 00       	mov    ecx,0x9
c000f274:	fc                   	cld    
c000f275:	89 e7                	mov    edi,esp
c000f277:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f279:	e8 82 ff ff ff       	call   c000f200 <KeSetLocale(klocale_t)>
c000f27e:	83 c4 64             	add    esp,0x64
c000f281:	5e                   	pop    esi
c000f282:	5f                   	pop    edi
c000f283:	c3                   	ret    

c000f284 <KeFormatCurrency(char*, int, long long, long long)>:
c000f284:	c3                   	ret    

c000f285 <KeFormatCurrency(char*, int, double)>:
c000f285:	c3                   	ret    

c000f286 <KeFormatNumber(char*, long long, long long)>:
c000f286:	c3                   	ret    

c000f287 <KeFormatNumber(char*, double)>:
c000f287:	c3                   	ret    

c000f288 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f288:	55                   	push   ebp
c000f289:	57                   	push   edi
c000f28a:	56                   	push   esi
c000f28b:	53                   	push   ebx
c000f28c:	83 ec 4c             	sub    esp,0x4c
c000f28f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f293:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f297:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f29b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f29f:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f2a7:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f2af:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f2b7:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f2bf:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f2c4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f2c8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f2cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f2d4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2d8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f2dc:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f2e1:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f2e5:	89 c2                	mov    edx,eax
c000f2e7:	c1 fa 1f             	sar    edx,0x1f
c000f2ea:	52                   	push   edx
c000f2eb:	50                   	push   eax
c000f2ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f2f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f2f4:	e8 7b 26 01 00       	call   c0021974 <__udivdi3>
c000f2f9:	83 c4 10             	add    esp,0x10
c000f2fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f300:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f304:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f308:	80 f4 00             	xor    ah,0x0
c000f30b:	89 c7                	mov    edi,eax
c000f30d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f311:	80 f4 00             	xor    ah,0x0
c000f314:	89 c5                	mov    ebp,eax
c000f316:	89 e8                	mov    eax,ebp
c000f318:	09 f8                	or     eax,edi
c000f31a:	74 04                	je     c000f320 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000f31c:	eb be                	jmp    c000f2dc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f31e:	66 90                	xchg   ax,ax
c000f320:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f324:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f327:	90                   	nop
c000f328:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f32c:	89 c7                	mov    edi,eax
c000f32e:	89 c5                	mov    ebp,eax
c000f330:	c1 fd 1f             	sar    ebp,0x1f
c000f333:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f337:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f33b:	55                   	push   ebp
c000f33c:	57                   	push   edi
c000f33d:	52                   	push   edx
c000f33e:	50                   	push   eax
c000f33f:	e8 30 27 01 00       	call   c0021a74 <__umoddi3>
c000f344:	83 c4 10             	add    esp,0x10
c000f347:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f34c:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f350:	01 c8                	add    eax,ecx
c000f352:	8a 10                	mov    dl,BYTE PTR [eax]
c000f354:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f358:	88 10                	mov    BYTE PTR [eax],dl
c000f35a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f35e:	89 c2                	mov    edx,eax
c000f360:	c1 fa 1f             	sar    edx,0x1f
c000f363:	52                   	push   edx
c000f364:	50                   	push   eax
c000f365:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f369:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f36d:	e8 02 26 01 00       	call   c0021974 <__udivdi3>
c000f372:	83 c4 10             	add    esp,0x10
c000f375:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f379:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f37d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f381:	80 f4 00             	xor    ah,0x0
c000f384:	89 c3                	mov    ebx,eax
c000f386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f38a:	80 f4 00             	xor    ah,0x0
c000f38d:	89 c6                	mov    esi,eax
c000f38f:	89 f0                	mov    eax,esi
c000f391:	09 d8                	or     eax,ebx
c000f393:	74 03                	je     c000f398 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000f395:	eb 91                	jmp    c000f328 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000f397:	90                   	nop
c000f398:	90                   	nop
c000f399:	83 c4 4c             	add    esp,0x4c
c000f39c:	5b                   	pop    ebx
c000f39d:	5e                   	pop    esi
c000f39e:	5f                   	pop    edi
c000f39f:	5d                   	pop    ebp
c000f3a0:	c3                   	ret    
c000f3a1:	8d 76 00             	lea    esi,[esi+0x0]

c000f3a4 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f3a4:	55                   	push   ebp
c000f3a5:	57                   	push   edi
c000f3a6:	56                   	push   esi
c000f3a7:	53                   	push   ebx
c000f3a8:	83 ec 4c             	sub    esp,0x4c
c000f3ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3b3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f3bb:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f3c3:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f3cb:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f3d3:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f3db:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f3e0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f3e4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f3e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f3ed:	79 1d                	jns    c000f40c <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000f3ef:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000f3f3:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000f3f8:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000f3fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f400:	8d 50 01             	lea    edx,[eax+0x1]
c000f403:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f407:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f40a:	66 90                	xchg   ax,ax
c000f40c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f410:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f414:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f418:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f41c:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f421:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f425:	89 c2                	mov    edx,eax
c000f427:	c1 fa 1f             	sar    edx,0x1f
c000f42a:	52                   	push   edx
c000f42b:	50                   	push   eax
c000f42c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f430:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f434:	e8 3b 25 01 00       	call   c0021974 <__udivdi3>
c000f439:	83 c4 10             	add    esp,0x10
c000f43c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f440:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f444:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f448:	80 f4 00             	xor    ah,0x0
c000f44b:	89 c7                	mov    edi,eax
c000f44d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f451:	80 f4 00             	xor    ah,0x0
c000f454:	89 c5                	mov    ebp,eax
c000f456:	89 e8                	mov    eax,ebp
c000f458:	09 f8                	or     eax,edi
c000f45a:	74 04                	je     c000f460 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f45c:	eb be                	jmp    c000f41c <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000f45e:	66 90                	xchg   ax,ax
c000f460:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f464:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f467:	90                   	nop
c000f468:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f46c:	89 c7                	mov    edi,eax
c000f46e:	89 c5                	mov    ebp,eax
c000f470:	c1 fd 1f             	sar    ebp,0x1f
c000f473:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f477:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f47b:	55                   	push   ebp
c000f47c:	57                   	push   edi
c000f47d:	52                   	push   edx
c000f47e:	50                   	push   eax
c000f47f:	e8 70 23 01 00       	call   c00217f4 <__moddi3>
c000f484:	83 c4 10             	add    esp,0x10
c000f487:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f48c:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f490:	01 c8                	add    eax,ecx
c000f492:	8a 10                	mov    dl,BYTE PTR [eax]
c000f494:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f498:	88 10                	mov    BYTE PTR [eax],dl
c000f49a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f49e:	89 c2                	mov    edx,eax
c000f4a0:	c1 fa 1f             	sar    edx,0x1f
c000f4a3:	52                   	push   edx
c000f4a4:	50                   	push   eax
c000f4a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f4a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f4ad:	e8 f6 21 01 00       	call   c00216a8 <__divdi3>
c000f4b2:	83 c4 10             	add    esp,0x10
c000f4b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4c1:	80 f4 00             	xor    ah,0x0
c000f4c4:	89 c3                	mov    ebx,eax
c000f4c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4ca:	80 f4 00             	xor    ah,0x0
c000f4cd:	89 c6                	mov    esi,eax
c000f4cf:	89 f0                	mov    eax,esi
c000f4d1:	09 d8                	or     eax,ebx
c000f4d3:	74 03                	je     c000f4d8 <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000f4d5:	eb 91                	jmp    c000f468 <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000f4d7:	90                   	nop
c000f4d8:	90                   	nop
c000f4d9:	83 c4 4c             	add    esp,0x4c
c000f4dc:	5b                   	pop    ebx
c000f4dd:	5e                   	pop    esi
c000f4de:	5f                   	pop    edi
c000f4df:	5d                   	pop    ebp
c000f4e0:	c3                   	ret    
c000f4e1:	8d 76 00             	lea    esi,[esi+0x0]

c000f4e4 <KeGetDigitsInNumber(long long)>:
c000f4e4:	56                   	push   esi
c000f4e5:	53                   	push   ebx
c000f4e6:	83 ec 24             	sub    esp,0x24
c000f4e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f4ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f4f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f501:	8d 76 00             	lea    esi,[esi+0x0]
c000f504:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f508:	80 f4 00             	xor    ah,0x0
c000f50b:	89 c3                	mov    ebx,eax
c000f50d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f511:	80 f4 00             	xor    ah,0x0
c000f514:	89 c6                	mov    esi,eax
c000f516:	89 f0                	mov    eax,esi
c000f518:	09 d8                	or     eax,ebx
c000f51a:	74 28                	je     c000f544 <KeGetDigitsInNumber(long long)+0x60>
c000f51c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f520:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f524:	6a 00                	push   0x0
c000f526:	6a 0a                	push   0xa
c000f528:	52                   	push   edx
c000f529:	50                   	push   eax
c000f52a:	e8 79 21 01 00       	call   c00216a8 <__divdi3>
c000f52f:	83 c4 10             	add    esp,0x10
c000f532:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f536:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f53a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f53f:	eb c3                	jmp    c000f504 <KeGetDigitsInNumber(long long)+0x20>
c000f541:	8d 76 00             	lea    esi,[esi+0x0]
c000f544:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f548:	83 c4 24             	add    esp,0x24
c000f54b:	5b                   	pop    ebx
c000f54c:	5e                   	pop    esi
c000f54d:	c3                   	ret    
c000f54e:	66 90                	xchg   ax,ax

c000f550 <KeItoa(unsigned long long, char*)>:
c000f550:	83 ec 1c             	sub    esp,0x1c
c000f553:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f557:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f55b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f55f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f563:	6a 0a                	push   0xa
c000f565:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f569:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f56d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f571:	e8 12 fd ff ff       	call   c000f288 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f576:	83 c4 10             	add    esp,0x10
c000f579:	90                   	nop
c000f57a:	83 c4 1c             	add    esp,0x1c
c000f57d:	c3                   	ret    
c000f57e:	66 90                	xchg   ax,ax

c000f580 <KeItoa(long long, char*)>:
c000f580:	83 ec 1c             	sub    esp,0x1c
c000f583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f587:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f58b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f58f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f593:	6a 0a                	push   0xa
c000f595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f599:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f59d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f5a1:	e8 fe fd ff ff       	call   c000f3a4 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f5a6:	83 c4 10             	add    esp,0x10
c000f5a9:	90                   	nop
c000f5aa:	83 c4 1c             	add    esp,0x1c
c000f5ad:	c3                   	ret    
c000f5ae:	66 90                	xchg   ax,ax

c000f5b0 <KeXtoa(unsigned long long, char*)>:
c000f5b0:	83 ec 1c             	sub    esp,0x1c
c000f5b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f5bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f5bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f5c3:	6a 10                	push   0x10
c000f5c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f5cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f5d1:	e8 b2 fc ff ff       	call   c000f288 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f5d6:	83 c4 10             	add    esp,0x10
c000f5d9:	90                   	nop
c000f5da:	83 c4 1c             	add    esp,0x1c
c000f5dd:	c3                   	ret    

c000f5de <sbrk>:
c000f5de:	55                   	push   ebp
c000f5df:	57                   	push   edi
c000f5e0:	56                   	push   esi
c000f5e1:	53                   	push   ebx
c000f5e2:	83 ec 1c             	sub    esp,0x1c
c000f5e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f5e9:	85 c0                	test   eax,eax
c000f5eb:	74 66                	je     c000f653 <sbrk+0x75>
c000f5ed:	78 6b                	js     c000f65a <sbrk+0x7c>
c000f5ef:	8b 15 30 67 02 c0    	mov    edx,DWORD PTR ds:0xc0026730
c000f5f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f5f9:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000f5ff:	05 ff 0f 00 00       	add    eax,0xfff
c000f604:	0f 49 e8             	cmovns ebp,eax
c000f607:	c1 fd 0c             	sar    ebp,0xc
c000f60a:	bb 00 00 00 00       	mov    ebx,0x0
c000f60f:	8b 35 90 c2 02 c0    	mov    esi,DWORD PTR ds:0xc002c290
c000f615:	8b 3d 30 67 02 c0    	mov    edi,DWORD PTR ds:0xc0026730
c000f61b:	e8 be 07 00 00       	call   c000fdde <Phys::allocatePage()>
c000f620:	68 01 04 00 00       	push   0x401
c000f625:	57                   	push   edi
c000f626:	50                   	push   eax
c000f627:	56                   	push   esi
c000f628:	e8 87 42 00 00       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f62d:	81 05 30 67 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026730,0x1000
c000f637:	83 c3 01             	add    ebx,0x1
c000f63a:	83 c4 10             	add    esp,0x10
c000f63d:	39 dd                	cmp    ebp,ebx
c000f63f:	75 ce                	jne    c000f60f <sbrk+0x31>
c000f641:	0f 20 d8             	mov    eax,cr3
c000f644:	0f 22 d8             	mov    cr3,eax
c000f647:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f64b:	83 c4 1c             	add    esp,0x1c
c000f64e:	5b                   	pop    ebx
c000f64f:	5e                   	pop    esi
c000f650:	5f                   	pop    edi
c000f651:	5d                   	pop    ebp
c000f652:	c3                   	ret    
c000f653:	a1 30 67 02 c0       	mov    eax,ds:0xc0026730
c000f658:	eb f1                	jmp    c000f64b <sbrk+0x6d>
c000f65a:	83 ec 08             	sub    esp,0x8
c000f65d:	50                   	push   eax
c000f65e:	68 38 3f 02 c0       	push   0xc0023f38
c000f663:	e8 fe 78 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000f668:	83 c4 10             	add    esp,0x10
c000f66b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f670:	eb d9                	jmp    c000f64b <sbrk+0x6d>

c000f672 <sbrk_thunk>:
c000f672:	83 ec 0c             	sub    esp,0xc
c000f675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f679:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f67e:	7f 10                	jg     c000f690 <sbrk_thunk+0x1e>
c000f680:	83 ec 0c             	sub    esp,0xc
c000f683:	50                   	push   eax
c000f684:	e8 55 ff ff ff       	call   c000f5de <sbrk>
c000f689:	83 c4 10             	add    esp,0x10
c000f68c:	83 c4 0c             	add    esp,0xc
c000f68f:	c3                   	ret    
c000f690:	83 ec 08             	sub    esp,0x8
c000f693:	50                   	push   eax
c000f694:	68 68 3f 02 c0       	push   0xc0023f68
c000f699:	e8 c8 78 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000f69e:	83 c4 10             	add    esp,0x10
c000f6a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f6a6:	eb e4                	jmp    c000f68c <sbrk_thunk+0x1a>

c000f6a8 <mmap>:
c000f6a8:	55                   	push   ebp
c000f6a9:	57                   	push   edi
c000f6aa:	56                   	push   esi
c000f6ab:	53                   	push   ebx
c000f6ac:	83 ec 18             	sub    esp,0x18
c000f6af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6b3:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f6b9:	89 fb                	mov    ebx,edi
c000f6bb:	c1 eb 0c             	shr    ebx,0xc
c000f6be:	53                   	push   ebx
c000f6bf:	e8 17 3b 00 00       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c000f6c4:	89 c5                	mov    ebp,eax
c000f6c6:	83 c4 10             	add    esp,0x10
c000f6c9:	85 db                	test   ebx,ebx
c000f6cb:	7e 2f                	jle    c000f6fc <mmap+0x54>
c000f6cd:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f6d3:	01 c7                	add    edi,eax
c000f6d5:	89 c3                	mov    ebx,eax
c000f6d7:	8b 35 90 c2 02 c0    	mov    esi,DWORD PTR ds:0xc002c290
c000f6dd:	e8 fc 06 00 00       	call   c000fdde <Phys::allocatePage()>
c000f6e2:	68 01 04 00 00       	push   0x401
c000f6e7:	53                   	push   ebx
c000f6e8:	50                   	push   eax
c000f6e9:	56                   	push   esi
c000f6ea:	e8 c5 41 00 00       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f6ef:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f6f5:	83 c4 10             	add    esp,0x10
c000f6f8:	39 fb                	cmp    ebx,edi
c000f6fa:	75 db                	jne    c000f6d7 <mmap+0x2f>
c000f6fc:	89 e8                	mov    eax,ebp
c000f6fe:	83 c4 0c             	add    esp,0xc
c000f701:	5b                   	pop    ebx
c000f702:	5e                   	pop    esi
c000f703:	5f                   	pop    edi
c000f704:	5d                   	pop    ebp
c000f705:	c3                   	ret    

c000f706 <munmap>:
c000f706:	83 ec 18             	sub    esp,0x18
c000f709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f70d:	e8 c7 3d 00 00       	call   c00134d9 <Virt::freeKernelVirtualPages(unsigned long)>
c000f712:	b8 00 00 00 00       	mov    eax,0x0
c000f717:	83 c4 1c             	add    esp,0x1c
c000f71a:	c3                   	ret    

c000f71b <liballoc_lock()>:
c000f71b:	fa                   	cli    
c000f71c:	83 05 70 ca 02 c0 01 	add    DWORD PTR ds:0xc002ca70,0x1
c000f723:	b8 00 00 00 00       	mov    eax,0x0
c000f728:	c3                   	ret    

c000f729 <liballoc_unlock()>:
c000f729:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f731:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000f738:	75 01                	jne    c000f73b <liballoc_unlock()+0x12>
c000f73a:	fb                   	sti    
c000f73b:	b8 00 00 00 00       	mov    eax,0x0
c000f740:	c3                   	ret    

c000f741 <liballoc_alloc(int)>:
c000f741:	83 ec 10             	sub    esp,0x10
c000f744:	6a 01                	push   0x1
c000f746:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f74a:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000f750:	e8 67 42 00 00       	call   c00139bc <VAS::allocatePages(int, int)>
c000f755:	83 c4 1c             	add    esp,0x1c
c000f758:	c3                   	ret    

c000f759 <liballoc_free(void*, int)>:
c000f759:	83 ec 14             	sub    esp,0x14
c000f75c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f760:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000f766:	e8 ab 3e 00 00       	call   c0013616 <VAS::freeAllocatedPages(unsigned long)>
c000f76b:	b8 00 00 00 00       	mov    eax,0x0
c000f770:	83 c4 1c             	add    esp,0x1c
c000f773:	c3                   	ret    

c000f774 <realloc>:
c000f774:	83 ec 14             	sub    esp,0x14
c000f777:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f77b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f77f:	e8 01 20 ff ff       	call   c0001785 <dlrealloc>
c000f784:	83 c4 1c             	add    esp,0x1c
c000f787:	c3                   	ret    

c000f788 <malloc>:
c000f788:	83 ec 18             	sub    esp,0x18
c000f78b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f78f:	e8 b4 1a ff ff       	call   c0001248 <dlmalloc>
c000f794:	83 c4 1c             	add    esp,0x1c
c000f797:	c3                   	ret    

c000f798 <free>:
c000f798:	83 ec 18             	sub    esp,0x18
c000f79b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f79f:	e8 e2 15 ff ff       	call   c0000d86 <dlfree>
c000f7a4:	83 c4 1c             	add    esp,0x1c
c000f7a7:	c3                   	ret    

c000f7a8 <rfree>:
c000f7a8:	83 ec 18             	sub    esp,0x18
c000f7ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7af:	e8 d2 15 ff ff       	call   c0000d86 <dlfree>
c000f7b4:	83 c4 1c             	add    esp,0x1c
c000f7b7:	c3                   	ret    

c000f7b8 <calloc>:
c000f7b8:	56                   	push   esi
c000f7b9:	53                   	push   ebx
c000f7ba:	83 ec 10             	sub    esp,0x10
c000f7bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f7c1:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f7c6:	53                   	push   ebx
c000f7c7:	e8 bc ff ff ff       	call   c000f788 <malloc>
c000f7cc:	89 c6                	mov    esi,eax
c000f7ce:	83 c4 0c             	add    esp,0xc
c000f7d1:	53                   	push   ebx
c000f7d2:	6a 00                	push   0x0
c000f7d4:	50                   	push   eax
c000f7d5:	e8 16 0d ff ff       	call   c00004f0 <memset>
c000f7da:	89 f0                	mov    eax,esi
c000f7dc:	83 c4 14             	add    esp,0x14
c000f7df:	5b                   	pop    ebx
c000f7e0:	5e                   	pop    esi
c000f7e1:	c3                   	ret    
c000f7e2:	66 90                	xchg   ax,ax

c000f7e4 <KeMailboxTryPost(Mailbox*, void*)>:
c000f7e4:	83 ec 10             	sub    esp,0x10
c000f7e7:	fa                   	cli    
c000f7e8:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f7ed:	83 c0 01             	add    eax,0x1
c000f7f0:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000f7f5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f7fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f801:	85 c0                	test   eax,eax
c000f803:	75 23                	jne    c000f828 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000f805:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f809:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f80d:	89 10                	mov    DWORD PTR [eax],edx
c000f80f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f813:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f816:	8d 50 01             	lea    edx,[eax+0x1]
c000f819:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f81d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f820:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f825:	8d 76 00             	lea    esi,[esi+0x0]
c000f828:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f830:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f835:	85 c0                	test   eax,eax
c000f837:	75 03                	jne    c000f83c <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000f839:	fb                   	sti    
c000f83a:	66 90                	xchg   ax,ax
c000f83c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f840:	83 c4 10             	add    esp,0x10
c000f843:	c3                   	ret    

c000f844 <KeMailboxTryGet(Mailbox*, void**)>:
c000f844:	83 ec 10             	sub    esp,0x10
c000f847:	fa                   	cli    
c000f848:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f84d:	83 c0 01             	add    eax,0x1
c000f850:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000f855:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f85a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f85e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f861:	83 f8 01             	cmp    eax,0x1
c000f864:	75 22                	jne    c000f888 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000f866:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f86a:	8b 10                	mov    edx,DWORD PTR [eax]
c000f86c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f870:	89 10                	mov    DWORD PTR [eax],edx
c000f872:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f879:	8d 50 ff             	lea    edx,[eax-0x1]
c000f87c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f880:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f883:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f888:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f890:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f895:	85 c0                	test   eax,eax
c000f897:	75 03                	jne    c000f89c <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000f899:	fb                   	sti    
c000f89a:	66 90                	xchg   ax,ax
c000f89c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f8a0:	83 c4 10             	add    esp,0x10
c000f8a3:	c3                   	ret    

c000f8a4 <KeMailboxCreate()>:
c000f8a4:	83 ec 1c             	sub    esp,0x1c
c000f8a7:	83 ec 0c             	sub    esp,0xc
c000f8aa:	6a 08                	push   0x8
c000f8ac:	e8 d7 fe ff ff       	call   c000f788 <malloc>
c000f8b1:	83 c4 10             	add    esp,0x10
c000f8b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f8c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f8cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8d1:	83 c4 1c             	add    esp,0x1c
c000f8d4:	c3                   	ret    
c000f8d5:	8d 76 00             	lea    esi,[esi+0x0]

c000f8d8 <KeMailboxPost(Mailbox*, void*)>:
c000f8d8:	83 ec 1c             	sub    esp,0x1c
c000f8db:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f8e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f8e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f8e8:	e8 f7 fe ff ff       	call   c000f7e4 <KeMailboxTryPost(Mailbox*, void*)>
c000f8ed:	83 c4 08             	add    esp,0x8
c000f8f0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f8f4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f8f8:	83 f0 01             	xor    eax,0x1
c000f8fb:	0f b6 c0             	movzx  eax,al
c000f8fe:	85 c0                	test   eax,eax
c000f900:	74 26                	je     c000f928 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f902:	fa                   	cli    
c000f903:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f908:	83 c0 01             	add    eax,0x1
c000f90b:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000f910:	e8 0f 74 00 00       	call   c0016d24 <schedule()>
c000f915:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f91d:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f922:	85 c0                	test   eax,eax
c000f924:	75 02                	jne    c000f928 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f926:	fb                   	sti    
c000f927:	90                   	nop
c000f928:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f92d:	85 c0                	test   eax,eax
c000f92f:	75 03                	jne    c000f934 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000f931:	eb ad                	jmp    c000f8e0 <KeMailboxPost(Mailbox*, void*)+0x8>
c000f933:	90                   	nop
c000f934:	90                   	nop
c000f935:	83 c4 1c             	add    esp,0x1c
c000f938:	c3                   	ret    
c000f939:	8d 76 00             	lea    esi,[esi+0x0]

c000f93c <KeMailboxGet(Mailbox*, void**)>:
c000f93c:	83 ec 1c             	sub    esp,0x1c
c000f93f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f944:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f948:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f94c:	e8 f3 fe ff ff       	call   c000f844 <KeMailboxTryGet(Mailbox*, void**)>
c000f951:	83 c4 08             	add    esp,0x8
c000f954:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f958:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f95c:	83 f0 01             	xor    eax,0x1
c000f95f:	0f b6 c0             	movzx  eax,al
c000f962:	85 c0                	test   eax,eax
c000f964:	74 26                	je     c000f98c <KeMailboxGet(Mailbox*, void**)+0x50>
c000f966:	fa                   	cli    
c000f967:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f96c:	83 c0 01             	add    eax,0x1
c000f96f:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000f974:	e8 ab 73 00 00       	call   c0016d24 <schedule()>
c000f979:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f981:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f986:	85 c0                	test   eax,eax
c000f988:	75 02                	jne    c000f98c <KeMailboxGet(Mailbox*, void**)+0x50>
c000f98a:	fb                   	sti    
c000f98b:	90                   	nop
c000f98c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f991:	85 c0                	test   eax,eax
c000f993:	75 03                	jne    c000f998 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000f995:	eb ad                	jmp    c000f944 <KeMailboxGet(Mailbox*, void**)+0x8>
c000f997:	90                   	nop
c000f998:	90                   	nop
c000f999:	83 c4 1c             	add    esp,0x1c
c000f99c:	c3                   	ret    
c000f99d:	8d 76 00             	lea    esi,[esi+0x0]

c000f9a0 <KeMailboxDestroy(Mailbox*)>:
c000f9a0:	83 ec 0c             	sub    esp,0xc
c000f9a3:	83 ec 0c             	sub    esp,0xc
c000f9a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9aa:	e8 e9 fd ff ff       	call   c000f798 <free>
c000f9af:	83 c4 10             	add    esp,0x10
c000f9b2:	90                   	nop
c000f9b3:	83 c4 0c             	add    esp,0xc
c000f9b6:	c3                   	ret    

c000f9b7 <KeFirstTask()>:
c000f9b7:	53                   	push   ebx
c000f9b8:	83 ec 08             	sub    esp,0x8
c000f9bb:	fb                   	sti    
c000f9bc:	e8 0e a1 00 00       	call   c0019acf <HalEnableNMI()>
c000f9c1:	83 ec 0c             	sub    esp,0xc
c000f9c4:	68 77 3f 02 c0       	push   0xc0023f77
c000f9c9:	e8 43 d8 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000f9ce:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000f9d5:	e8 ae fd ff ff       	call   c000f788 <malloc>
c000f9da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000f9e1:	89 c3                	mov    ebx,eax
c000f9e3:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000f9e8:	50                   	push   eax
c000f9e9:	68 90 3f 02 c0       	push   0xc0023f90
c000f9ee:	6a 01                	push   0x1
c000f9f0:	53                   	push   ebx
c000f9f1:	e8 46 6e 00 00       	call   c001683c <Process::Process(bool, char const*, Process*, char**)>
c000f9f6:	83 c4 20             	add    esp,0x20
c000f9f9:	68 ff 00 00 00       	push   0xff
c000f9fe:	6a 00                	push   0x0
c000fa00:	68 b3 ea 00 c0       	push   0xc000eab3
c000fa05:	53                   	push   ebx
c000fa06:	e8 71 70 00 00       	call   c0016a7c <Process::createThread(void (*)(void*), void*, int)>
c000fa0b:	8b 15 98 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca98
c000fa11:	6a 7a                	push   0x7a
c000fa13:	6a 00                	push   0x0
c000fa15:	68 00 74 01 c0       	push   0xc0017400
c000fa1a:	52                   	push   edx
c000fa1b:	e8 5c 70 00 00       	call   c0016a7c <Process::createThread(void (*)(void*), void*, int)>
c000fa20:	83 c4 14             	add    esp,0x14
c000fa23:	68 18 40 02 c0       	push   0xc0024018
c000fa28:	a3 50 ca 02 c0       	mov    ds:0xc002ca50,eax
c000fa2d:	e8 df d7 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000fa32:	c6 05 0d c1 02 c0 01 	mov    BYTE PTR ds:0xc002c10d,0x1
c000fa39:	e8 95 0c 00 00       	call   c00106d3 <KeInitRand()>
c000fa3e:	e8 8b 7d 00 00       	call   c00177ce <Vm::initialise8086()>
c000fa43:	e8 ea 83 ff ff       	call   c0007e32 <Fs::initVFS()>
c000fa48:	c7 04 24 d1 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bd1
c000fa4f:	e8 bd d7 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000fa54:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c000fa59:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c000fa5f:	8b 10                	mov    edx,DWORD PTR [eax]
c000fa61:	6a 00                	push   0x0
c000fa63:	6a 00                	push   0x0
c000fa65:	6a 00                	push   0x0
c000fa67:	50                   	push   eax
c000fa68:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fa6b:	83 c4 14             	add    esp,0x14
c000fa6e:	68 18 40 02 c0       	push   0xc0024018
c000fa73:	e8 99 d7 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000fa78:	e8 9a 7b ff ff       	call   c0007617 <KeInitialiseSymlinks()>
c000fa7d:	e8 a4 eb ff ff       	call   c000e626 <KeLoadSystemEnv()>
c000fa82:	e8 93 0a 00 00       	call   c001051a <KeSetupPowerManager()>
c000fa87:	c7 04 24 9d 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f9d
c000fa8e:	e8 7e d7 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000fa93:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c000fa99:	59                   	pop    ecx
c000fa9a:	58                   	pop    eax
c000fa9b:	6a 01                	push   0x1
c000fa9d:	68 ae 3f 02 c0       	push   0xc0023fae
c000faa2:	e8 e0 66 00 00       	call   c0016187 <Thr::loadDLL(char const*, bool)>
c000faa7:	5a                   	pop    edx
c000faa8:	59                   	pop    ecx
c000faa9:	53                   	push   ebx
c000faaa:	50                   	push   eax
c000faab:	e8 38 69 00 00       	call   c00163e8 <Thr::executeDLL(unsigned long, void*)>
c000fab0:	83 c4 10             	add    esp,0x10
c000fab3:	83 ec 0c             	sub    esp,0xc
c000fab6:	6a 02                	push   0x2
c000fab8:	e8 27 73 00 00       	call   c0016de4 <blockTask(TaskState)>
c000fabd:	83 c4 10             	add    esp,0x10
c000fac0:	eb f1                	jmp    c000fab3 <KeFirstTask()+0xfc>

c000fac2 <KeEntryPoint>:
c000fac2:	57                   	push   edi
c000fac3:	bf f9 03 00 00       	mov    edi,0x3f9
c000fac8:	56                   	push   esi
c000fac9:	31 f6                	xor    esi,esi
c000facb:	53                   	push   ebx
c000facc:	83 ec 20             	sub    esp,0x20
c000facf:	e8 00 d7 ff ff       	call   c000d1d4 <KeInitialiseBootConfigurationFlags()>
c000fad4:	89 f0                	mov    eax,esi
c000fad6:	89 fa                	mov    edx,edi
c000fad8:	ee                   	out    dx,al
c000fad9:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fade:	b0 80                	mov    al,0x80
c000fae0:	89 da                	mov    edx,ebx
c000fae2:	ee                   	out    dx,al
c000fae3:	b1 03                	mov    cl,0x3
c000fae5:	ba f8 03 00 00       	mov    edx,0x3f8
c000faea:	88 c8                	mov    al,cl
c000faec:	ee                   	out    dx,al
c000faed:	89 f0                	mov    eax,esi
c000faef:	89 fa                	mov    edx,edi
c000faf1:	ee                   	out    dx,al
c000faf2:	88 c8                	mov    al,cl
c000faf4:	89 da                	mov    edx,ebx
c000faf6:	ee                   	out    dx,al
c000faf7:	b0 c7                	mov    al,0xc7
c000faf9:	ba fa 03 00 00       	mov    edx,0x3fa
c000fafe:	ee                   	out    dx,al
c000faff:	b0 0b                	mov    al,0xb
c000fb01:	ba fc 03 00 00       	mov    edx,0x3fc
c000fb06:	ee                   	out    dx,al
c000fb07:	83 ec 0c             	sub    esp,0xc
c000fb0a:	68 ca 3f 02 c0       	push   0xc0023fca
c000fb0f:	e8 52 74 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fb14:	e8 c9 d6 ff ff       	call   c000d1e2 <KeDisplaySplashScreen()>
c000fb19:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fb1e:	05 ff 0f 00 00       	add    eax,0xfff
c000fb23:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb28:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb2b:	e8 3f 04 00 00       	call   c000ff6f <Phys::physicalMemorySetup(unsigned int)>
c000fb30:	e8 7a 38 00 00       	call   c00133af <Virt::virtualMemorySetup()>
c000fb35:	e8 f8 d5 ff ff       	call   c000d132 <KeInitialiseAtexit()>
c000fb3a:	58                   	pop    eax
c000fb3b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fb3f:	53                   	push   ebx
c000fb40:	e8 51 3b 00 00       	call   c0013696 <VAS::VAS()>
c000fb45:	89 1d 90 c2 02 c0    	mov    DWORD PTR ds:0xc002c290,ebx
c000fb4b:	e8 3e 20 01 00       	call   c0021b8e <_init>
c000fb50:	c7 04 24 e1 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fe1
c000fb57:	e8 b5 d6 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000fb5c:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c000fb63:	e8 20 fc ff ff       	call   c000f788 <malloc>
c000fb68:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb6b:	89 c6                	mov    esi,eax
c000fb6d:	e8 f6 e4 ff ff       	call   c000e068 <Computer::Computer()>
c000fb72:	8b 15 90 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c290
c000fb78:	89 35 08 c1 02 c0    	mov    DWORD PTR ds:0xc002c108,esi
c000fb7e:	52                   	push   edx
c000fb7f:	6a 00                	push   0x0
c000fb81:	6a 00                	push   0x0
c000fb83:	56                   	push   esi
c000fb84:	e8 23 e5 ff ff       	call   c000e0ac <Computer::open(int, int, void*)>
c000fb89:	83 c4 14             	add    esp,0x14
c000fb8c:	68 3c 40 02 c0       	push   0xc002403c
c000fb91:	e8 7b d6 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000fb96:	e8 94 a6 00 00       	call   c001a22f <HalInitialiseCoprocessor()>
c000fb9b:	c7 04 24 fb 3f 02 c0 	mov    DWORD PTR [esp],0xc0023ffb
c000fba2:	e8 6a d6 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c000fba7:	c7 04 24 b7 f9 00 c0 	mov    DWORD PTR [esp],0xc000f9b7
c000fbae:	e8 29 70 00 00       	call   c0016bdc <setupMultitasking(void (*)())>
c000fbb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb6:	e8 91 3b 00 00       	call   c001374c <VAS::~VAS()>
c000fbbb:	83 c4 30             	add    esp,0x30
c000fbbe:	5b                   	pop    ebx
c000fbbf:	5e                   	pop    esi
c000fbc0:	5f                   	pop    edi
c000fbc1:	c3                   	ret    
c000fbc2:	66 90                	xchg   ax,ax

c000fbc4 <Mutex::Mutex()>:
c000fbc4:	83 ec 0c             	sub    esp,0xc
c000fbc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbcb:	83 ec 08             	sub    esp,0x8
c000fbce:	6a 01                	push   0x1
c000fbd0:	50                   	push   eax
c000fbd1:	e8 9e 0d 00 00       	call   c0010974 <Semaphore::Semaphore(int)>
c000fbd6:	83 c4 10             	add    esp,0x10
c000fbd9:	90                   	nop
c000fbda:	83 c4 0c             	add    esp,0xc
c000fbdd:	c3                   	ret    

c000fbde <KeIsKernelInPanic()>:
c000fbde:	a0 64 c1 02 c0       	mov    al,ds:0xc002c164
c000fbe3:	c3                   	ret    

c000fbe4 <KePanic(char const*)>:
c000fbe4:	c6 05 64 c1 02 c0 01 	mov    BYTE PTR ds:0xc002c164,0x1
c000fbeb:	e9 c3 a6 00 00       	jmp    c001a2b3 <HalPanic(char const*)>

c000fbf0 <Phys::allocateDMA(unsigned long)>:
c000fbf0:	55                   	push   ebp
c000fbf1:	31 ed                	xor    ebp,ebp
c000fbf3:	57                   	push   edi
c000fbf4:	56                   	push   esi
c000fbf5:	31 f6                	xor    esi,esi
c000fbf7:	53                   	push   ebx
c000fbf8:	31 db                	xor    ebx,ebx
c000fbfa:	83 ec 1c             	sub    esp,0x1c
c000fbfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc01:	05 ff 0f 00 00       	add    eax,0xfff
c000fc06:	c1 e8 0c             	shr    eax,0xc
c000fc09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fc0d:	31 c0                	xor    eax,eax
c000fc0f:	eb 1b                	jmp    c000fc2c <Phys::allocateDMA(unsigned long)+0x3c>
c000fc11:	8d 78 01             	lea    edi,[eax+0x1]
c000fc14:	85 c0                	test   eax,eax
c000fc16:	0f 44 eb             	cmove  ebp,ebx
c000fc19:	0f 44 f3             	cmove  esi,ebx
c000fc1c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000fc20:	74 37                	je     c000fc59 <Phys::allocateDMA(unsigned long)+0x69>
c000fc22:	89 f8                	mov    eax,edi
c000fc24:	83 c3 01             	add    ebx,0x1
c000fc27:	83 fb 0f             	cmp    ebx,0xf
c000fc2a:	7f 13                	jg     c000fc3f <Phys::allocateDMA(unsigned long)+0x4f>
c000fc2c:	80 bb 80 c1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd3e80],0x0
c000fc33:	74 dc                	je     c000fc11 <Phys::allocateDMA(unsigned long)+0x21>
c000fc35:	31 c0                	xor    eax,eax
c000fc37:	83 c3 01             	add    ebx,0x1
c000fc3a:	83 fb 0f             	cmp    ebx,0xf
c000fc3d:	7e ed                	jle    c000fc2c <Phys::allocateDMA(unsigned long)+0x3c>
c000fc3f:	83 ec 0c             	sub    esp,0xc
c000fc42:	68 60 40 02 c0       	push   0xc0024060
c000fc47:	e8 98 ff ff ff       	call   c000fbe4 <KePanic(char const*)>
c000fc4c:	83 c4 10             	add    esp,0x10
c000fc4f:	31 c0                	xor    eax,eax
c000fc51:	83 c4 1c             	add    esp,0x1c
c000fc54:	5b                   	pop    ebx
c000fc55:	5e                   	pop    esi
c000fc56:	5f                   	pop    edi
c000fc57:	5d                   	pop    ebp
c000fc58:	c3                   	ret    
c000fc59:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fc5d:	89 f2                	mov    edx,esi
c000fc5f:	c1 fa 04             	sar    edx,0x4
c000fc62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fc66:	01 f1                	add    ecx,esi
c000fc68:	8d 51 0e             	lea    edx,[ecx+0xe]
c000fc6b:	83 e9 01             	sub    ecx,0x1
c000fc6e:	0f 48 ca             	cmovs  ecx,edx
c000fc71:	c1 f9 04             	sar    ecx,0x4
c000fc74:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000fc78:	74 06                	je     c000fc80 <Phys::allocateDMA(unsigned long)+0x90>
c000fc7a:	89 eb                	mov    ebx,ebp
c000fc7c:	31 c0                	xor    eax,eax
c000fc7e:	eb b7                	jmp    c000fc37 <Phys::allocateDMA(unsigned long)+0x47>
c000fc80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fc84:	85 d2                	test   edx,edx
c000fc86:	74 17                	je     c000fc9f <Phys::allocateDMA(unsigned long)+0xaf>
c000fc88:	8d 96 80 c1 02 c0    	lea    edx,[esi-0x3ffd3e80]
c000fc8e:	8d 84 06 81 c1 02 c0 	lea    eax,[esi+eax*1-0x3ffd3e7f]
c000fc95:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fc98:	83 c2 01             	add    edx,0x1
c000fc9b:	39 d0                	cmp    eax,edx
c000fc9d:	75 f6                	jne    c000fc95 <Phys::allocateDMA(unsigned long)+0xa5>
c000fc9f:	8b 15 78 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c178
c000fca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fca9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcad:	01 c2                	add    edx,eax
c000fcaf:	89 15 78 c1 02 c0    	mov    DWORD PTR ds:0xc002c178,edx
c000fcb5:	85 c9                	test   ecx,ecx
c000fcb7:	74 17                	je     c000fcd0 <Phys::allocateDMA(unsigned long)+0xe0>
c000fcb9:	83 ec 0c             	sub    esp,0xc
c000fcbc:	68 60 40 02 c0       	push   0xc0024060
c000fcc1:	e8 1e ff ff ff       	call   c000fbe4 <KePanic(char const*)>
c000fcc6:	83 c4 10             	add    esp,0x10
c000fcc9:	89 f8                	mov    eax,edi
c000fccb:	e9 54 ff ff ff       	jmp    c000fc24 <Phys::allocateDMA(unsigned long)+0x34>
c000fcd0:	c1 e6 0c             	shl    esi,0xc
c000fcd3:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000fcd9:	e9 73 ff ff ff       	jmp    c000fc51 <Phys::allocateDMA(unsigned long)+0x61>

c000fcde <Phys::freeDMA(unsigned long, unsigned long)>:
c000fcde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fce2:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000fce8:	a1 78 c1 02 c0       	mov    eax,ds:0xc002c178
c000fced:	c1 ea 0c             	shr    edx,0xc
c000fcf0:	29 d0                	sub    eax,edx
c000fcf2:	a3 78 c1 02 c0       	mov    ds:0xc002c178,eax
c000fcf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fcfb:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000fd00:	c1 e8 0c             	shr    eax,0xc
c000fd03:	85 d2                	test   edx,edx
c000fd05:	74 11                	je     c000fd18 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000fd07:	05 80 c1 02 c0       	add    eax,0xc002c180
c000fd0c:	01 c2                	add    edx,eax
c000fd0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fd11:	83 c0 01             	add    eax,0x1
c000fd14:	39 d0                	cmp    eax,edx
c000fd16:	75 f6                	jne    c000fd0e <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000fd18:	c3                   	ret    

c000fd19 <Phys::setPageState(unsigned long, bool)>:
c000fd19:	57                   	push   edi
c000fd1a:	56                   	push   esi
c000fd1b:	8b 35 34 67 02 c0    	mov    esi,DWORD PTR ds:0xc0026734
c000fd21:	53                   	push   ebx
c000fd22:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000fd27:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fd2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2f:	89 ca                	mov    edx,ecx
c000fd31:	83 e1 07             	and    ecx,0x7
c000fd34:	c1 ea 03             	shr    edx,0x3
c000fd37:	0f b6 c0             	movzx  eax,al
c000fd3a:	d3 c3                	rol    ebx,cl
c000fd3c:	01 d6                	add    esi,edx
c000fd3e:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000fd41:	d3 e0                	shl    eax,cl
c000fd43:	21 fb                	and    ebx,edi
c000fd45:	88 1e                	mov    BYTE PTR [esi],bl
c000fd47:	8b 1d 34 67 02 c0    	mov    ebx,DWORD PTR ds:0xc0026734
c000fd4d:	01 da                	add    edx,ebx
c000fd4f:	8a 0a                	mov    cl,BYTE PTR [edx]
c000fd51:	09 c8                	or     eax,ecx
c000fd53:	88 02                	mov    BYTE PTR [edx],al
c000fd55:	5b                   	pop    ebx
c000fd56:	5e                   	pop    esi
c000fd57:	5f                   	pop    edi
c000fd58:	c3                   	ret    

c000fd59 <Phys::getPageState(unsigned long)>:
c000fd59:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fd5d:	8b 15 34 67 02 c0    	mov    edx,DWORD PTR ds:0xc0026734
c000fd63:	89 c8                	mov    eax,ecx
c000fd65:	83 e1 07             	and    ecx,0x7
c000fd68:	c1 e8 03             	shr    eax,0x3
c000fd6b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fd6f:	d3 f8                	sar    eax,cl
c000fd71:	83 e0 01             	and    eax,0x1
c000fd74:	c3                   	ret    

c000fd75 <Phys::freePage(unsigned long)>:
c000fd75:	53                   	push   ebx
c000fd76:	83 ec 08             	sub    esp,0x8
c000fd79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd7d:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000fd83:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000fd89:	76 41                	jbe    c000fdcc <Phys::freePage(unsigned long)+0x57>
c000fd8b:	c1 e8 0c             	shr    eax,0xc
c000fd8e:	50                   	push   eax
c000fd8f:	89 c3                	mov    ebx,eax
c000fd91:	e8 c3 ff ff ff       	call   c000fd59 <Phys::getPageState(unsigned long)>
c000fd96:	5a                   	pop    edx
c000fd97:	84 c0                	test   al,al
c000fd99:	74 20                	je     c000fdbb <Phys::freePage(unsigned long)+0x46>
c000fd9b:	a1 78 c1 02 c0       	mov    eax,ds:0xc002c178
c000fda0:	83 ec 08             	sub    esp,0x8
c000fda3:	6a 00                	push   0x0
c000fda5:	53                   	push   ebx
c000fda6:	83 e8 01             	sub    eax,0x1
c000fda9:	a3 78 c1 02 c0       	mov    ds:0xc002c178,eax
c000fdae:	e8 66 ff ff ff       	call   c000fd19 <Phys::setPageState(unsigned long, bool)>
c000fdb3:	83 c4 10             	add    esp,0x10
c000fdb6:	83 c4 08             	add    esp,0x8
c000fdb9:	5b                   	pop    ebx
c000fdba:	c3                   	ret    
c000fdbb:	c7 44 24 10 65 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024165
c000fdc3:	83 c4 08             	add    esp,0x8
c000fdc6:	5b                   	pop    ebx
c000fdc7:	e9 18 fe ff ff       	jmp    c000fbe4 <KePanic(char const*)>
c000fdcc:	68 00 10 00 00       	push   0x1000
c000fdd1:	50                   	push   eax
c000fdd2:	e8 07 ff ff ff       	call   c000fcde <Phys::freeDMA(unsigned long, unsigned long)>
c000fdd7:	59                   	pop    ecx
c000fdd8:	5b                   	pop    ebx
c000fdd9:	83 c4 08             	add    esp,0x8
c000fddc:	5b                   	pop    ebx
c000fddd:	c3                   	ret    

c000fdde <Phys::allocatePage()>:
c000fdde:	56                   	push   esi
c000fddf:	53                   	push   ebx
c000fde0:	83 ec 14             	sub    esp,0x14
c000fde3:	8b 35 6c c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c16c
c000fde9:	89 f3                	mov    ebx,esi
c000fdeb:	eb 0a                	jmp    c000fdf7 <Phys::allocatePage()+0x19>
c000fded:	89 1d 6c c1 02 c0    	mov    DWORD PTR ds:0xc002c16c,ebx
c000fdf3:	39 de                	cmp    esi,ebx
c000fdf5:	74 26                	je     c000fe1d <Phys::allocatePage()+0x3f>
c000fdf7:	53                   	push   ebx
c000fdf8:	e8 5c ff ff ff       	call   c000fd59 <Phys::getPageState(unsigned long)>
c000fdfd:	59                   	pop    ecx
c000fdfe:	84 c0                	test   al,al
c000fe00:	74 67                	je     c000fe69 <Phys::allocatePage()+0x8b>
c000fe02:	83 c3 01             	add    ebx,0x1
c000fe05:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe0b:	75 e0                	jne    c000fded <Phys::allocatePage()+0xf>
c000fe0d:	c7 05 6c c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c16c,0x0
c000fe17:	31 db                	xor    ebx,ebx
c000fe19:	39 de                	cmp    esi,ebx
c000fe1b:	75 da                	jne    c000fdf7 <Phys::allocatePage()+0x19>
c000fe1d:	a0 90 c1 02 c0       	mov    al,ds:0xc002c190
c000fe22:	83 ec 0c             	sub    esp,0xc
c000fe25:	83 f0 01             	xor    eax,0x1
c000fe28:	a2 90 c1 02 c0       	mov    ds:0xc002c190,al
c000fe2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fe32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fe35:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c000fe3b:	51                   	push   ecx
c000fe3c:	e8 57 44 00 00       	call   c0014298 <VAS::scanForEviction()>
c000fe41:	83 c4 10             	add    esp,0x10
c000fe44:	85 c0                	test   eax,eax
c000fe46:	75 48                	jne    c000fe90 <Phys::allocatePage()+0xb2>
c000fe48:	83 ec 0c             	sub    esp,0xc
c000fe4b:	68 88 40 02 c0       	push   0xc0024088
c000fe50:	e8 8f fd ff ff       	call   c000fbe4 <KePanic(char const*)>
c000fe55:	8b 1d 6c c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c16c
c000fe5b:	83 c4 10             	add    esp,0x10
c000fe5e:	53                   	push   ebx
c000fe5f:	e8 f5 fe ff ff       	call   c000fd59 <Phys::getPageState(unsigned long)>
c000fe64:	59                   	pop    ecx
c000fe65:	84 c0                	test   al,al
c000fe67:	75 99                	jne    c000fe02 <Phys::allocatePage()+0x24>
c000fe69:	6a 01                	push   0x1
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 a8 fe ff ff       	call   c000fd19 <Phys::setPageState(unsigned long, bool)>
c000fe71:	8b 1d 78 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c178
c000fe77:	5e                   	pop    esi
c000fe78:	a1 6c c1 02 c0       	mov    eax,ds:0xc002c16c
c000fe7d:	5a                   	pop    edx
c000fe7e:	83 c3 01             	add    ebx,0x1
c000fe81:	89 1d 78 c1 02 c0    	mov    DWORD PTR ds:0xc002c178,ebx
c000fe87:	c1 e0 0c             	shl    eax,0xc
c000fe8a:	83 c4 14             	add    esp,0x14
c000fe8d:	5b                   	pop    ebx
c000fe8e:	5e                   	pop    esi
c000fe8f:	c3                   	ret    
c000fe90:	8b 15 78 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c178
c000fe96:	83 ec 08             	sub    esp,0x8
c000fe99:	6a 01                	push   0x1
c000fe9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe9f:	83 c2 01             	add    edx,0x1
c000fea2:	89 15 78 c1 02 c0    	mov    DWORD PTR ds:0xc002c178,edx
c000fea8:	89 c2                	mov    edx,eax
c000feaa:	c1 ea 0c             	shr    edx,0xc
c000fead:	52                   	push   edx
c000feae:	e8 66 fe ff ff       	call   c000fd19 <Phys::setPageState(unsigned long, bool)>
c000feb3:	83 c4 10             	add    esp,0x10
c000feb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feba:	eb ce                	jmp    c000fe8a <Phys::allocatePage()+0xac>

c000febc <Phys::allocateContiguousPages(int)>:
c000febc:	57                   	push   edi
c000febd:	56                   	push   esi
c000febe:	53                   	push   ebx
c000febf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fec3:	fa                   	cli    
c000fec4:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c000feca:	83 ec 0c             	sub    esp,0xc
c000fecd:	31 db                	xor    ebx,ebx
c000fecf:	68 b8 40 02 c0       	push   0xc00240b8
c000fed4:	83 c2 01             	add    edx,0x1
c000fed7:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c000fedd:	e8 84 70 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	85 db                	test   ebx,ebx
c000fee7:	75 11                	jne    c000fefa <Phys::allocateContiguousPages(int)+0x3e>
c000fee9:	e8 f0 fe ff ff       	call   c000fdde <Phys::allocatePage()>
c000feee:	83 ff 01             	cmp    edi,0x1
c000fef1:	89 c6                	mov    esi,eax
c000fef3:	74 21                	je     c000ff16 <Phys::allocateContiguousPages(int)+0x5a>
c000fef5:	bb 01 00 00 00       	mov    ebx,0x1
c000fefa:	e8 df fe ff ff       	call   c000fdde <Phys::allocatePage()>
c000feff:	89 da                	mov    edx,ebx
c000ff01:	c1 e2 0c             	shl    edx,0xc
c000ff04:	01 f2                	add    edx,esi
c000ff06:	39 c2                	cmp    edx,eax
c000ff08:	74 24                	je     c000ff2e <Phys::allocateContiguousPages(int)+0x72>
c000ff0a:	83 ff 01             	cmp    edi,0x1
c000ff0d:	bb 01 00 00 00       	mov    ebx,0x1
c000ff12:	89 c6                	mov    esi,eax
c000ff14:	75 e4                	jne    c000fefa <Phys::allocateContiguousPages(int)+0x3e>
c000ff16:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000ff1e:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000ff23:	85 c0                	test   eax,eax
c000ff25:	75 01                	jne    c000ff28 <Phys::allocateContiguousPages(int)+0x6c>
c000ff27:	fb                   	sti    
c000ff28:	5b                   	pop    ebx
c000ff29:	89 f0                	mov    eax,esi
c000ff2b:	5e                   	pop    esi
c000ff2c:	5f                   	pop    edi
c000ff2d:	c3                   	ret    
c000ff2e:	83 c3 01             	add    ebx,0x1
c000ff31:	39 fb                	cmp    ebx,edi
c000ff33:	75 b0                	jne    c000fee5 <Phys::allocateContiguousPages(int)+0x29>
c000ff35:	eb df                	jmp    c000ff16 <Phys::allocateContiguousPages(int)+0x5a>

c000ff37 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ff37:	56                   	push   esi
c000ff38:	53                   	push   ebx
c000ff39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff3d:	39 1d 70 c1 02 c0    	cmp    DWORD PTR ds:0xc002c170,ebx
c000ff43:	73 06                	jae    c000ff4b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000ff45:	89 1d 70 c1 02 c0    	mov    DWORD PTR ds:0xc002c170,ebx
c000ff4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff4f:	c1 eb 0c             	shr    ebx,0xc
c000ff52:	c1 e8 0c             	shr    eax,0xc
c000ff55:	39 d8                	cmp    eax,ebx
c000ff57:	73 13                	jae    c000ff6c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000ff59:	6a 00                	push   0x0
c000ff5b:	50                   	push   eax
c000ff5c:	8d 70 01             	lea    esi,[eax+0x1]
c000ff5f:	e8 b5 fd ff ff       	call   c000fd19 <Phys::setPageState(unsigned long, bool)>
c000ff64:	39 f3                	cmp    ebx,esi
c000ff66:	89 f0                	mov    eax,esi
c000ff68:	5a                   	pop    edx
c000ff69:	59                   	pop    ecx
c000ff6a:	75 ed                	jne    c000ff59 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000ff6c:	5b                   	pop    ebx
c000ff6d:	5e                   	pop    esi
c000ff6e:	c3                   	ret    

c000ff6f <Phys::physicalMemorySetup(unsigned int)>:
c000ff6f:	55                   	push   ebp
c000ff70:	57                   	push   edi
c000ff71:	56                   	push   esi
c000ff72:	53                   	push   ebx
c000ff73:	31 db                	xor    ebx,ebx
c000ff75:	83 ec 40             	sub    esp,0x40
c000ff78:	6a 10                	push   0x10
c000ff7a:	6a 00                	push   0x0
c000ff7c:	68 80 c1 02 c0       	push   0xc002c180
c000ff81:	e8 6a 05 ff ff       	call   c00004f0 <memset>
c000ff86:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ff8a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ff8f:	05 00 10 00 00       	add    eax,0x1000
c000ff94:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ff98:	5a                   	pop    edx
c000ff99:	59                   	pop    ecx
c000ff9a:	50                   	push   eax
c000ff9b:	68 7b 41 02 c0       	push   0xc002417b
c000ffa0:	e8 c1 6f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000ffa5:	83 c4 10             	add    esp,0x10
c000ffa8:	83 ec 08             	sub    esp,0x8
c000ffab:	6a 01                	push   0x1
c000ffad:	53                   	push   ebx
c000ffae:	83 c3 01             	add    ebx,0x1
c000ffb1:	e8 63 fd ff ff       	call   c000fd19 <Phys::setPageState(unsigned long, bool)>
c000ffb6:	83 c4 10             	add    esp,0x10
c000ffb9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ffbf:	75 e7                	jne    c000ffa8 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000ffc1:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000ffc8:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000ffcf:	c1 e0 08             	shl    eax,0x8
c000ffd2:	09 c2                	or     edx,eax
c000ffd4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ffd8:	0f 84 43 01 00 00    	je     c0010121 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c000ffde:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ffe6:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000ffeb:	e9 82 00 00 00       	jmp    c0010072 <Phys::physicalMemorySetup(unsigned int)+0x103>
c000fff0:	ba 00 00 08 00       	mov    edx,0x80000
c000fff5:	89 c1                	mov    ecx,eax
c000fff7:	39 f2                	cmp    edx,esi
c000fff9:	19 f9                	sbb    ecx,edi
c000fffb:	0f 82 c0 00 00 00    	jb     c00100c1 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0010001:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010005:	89 c5                	mov    ebp,eax
c0010007:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001000b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001000f:	19 cd                	sbb    ebp,ecx
c0010011:	0f 83 af 00 00 00    	jae    c00100c6 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0010017:	89 d6                	mov    esi,edx
c0010019:	ba 00 00 0a 00       	mov    edx,0xa0000
c001001e:	39 f2                	cmp    edx,esi
c0010020:	89 cf                	mov    edi,ecx
c0010022:	19 c8                	sbb    eax,ecx
c0010024:	73 07                	jae    c001002d <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0010026:	be 00 00 0a 00       	mov    esi,0xa0000
c001002b:	31 ff                	xor    edi,edi
c001002d:	89 f2                	mov    edx,esi
c001002f:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0010034:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c001003a:	89 f9                	mov    ecx,edi
c001003c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010040:	83 d1 ff             	adc    ecx,0xffffffff
c0010043:	39 d0                	cmp    eax,edx
c0010045:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0010049:	b8 00 00 00 00       	mov    eax,0x0
c001004e:	19 c8                	sbb    eax,ecx
c0010050:	0f 82 9d 01 00 00    	jb     c00101f3 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0010056:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001005a:	83 c3 18             	add    ebx,0x18
c001005d:	83 c6 01             	add    esi,0x1
c0010060:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010064:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010068:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001006c:	0f 84 bf 00 00 00    	je     c0010131 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0010072:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010074:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010077:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001007a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001007d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0010081:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010088:	01 f0                	add    eax,esi
c001008a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001008e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010092:	55                   	push   ebp
c0010093:	11 fa                	adc    edx,edi
c0010095:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010099:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001009d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100a1:	50                   	push   eax
c00100a2:	56                   	push   esi
c00100a3:	68 18 41 02 c0       	push   0xc0024118
c00100a8:	e8 b9 6e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00100ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100b1:	83 c4 10             	add    esp,0x10
c00100b4:	09 f8                	or     eax,edi
c00100b6:	75 79                	jne    c0010131 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c00100b8:	83 fd 01             	cmp    ebp,0x1
c00100bb:	0f 84 2f ff ff ff    	je     c000fff0 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00100c1:	83 fd 01             	cmp    ebp,0x1
c00100c4:	75 90                	jne    c0010056 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00100c6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00100ca:	31 d2                	xor    edx,edx
c00100cc:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00100d0:	89 c8                	mov    eax,ecx
c00100d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100d6:	19 d1                	sbb    ecx,edx
c00100d8:	0f 82 78 ff ff ff    	jb     c0010056 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00100de:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00100e3:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00100e7:	b9 00 00 00 00       	mov    ecx,0x0
c00100ec:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00100f0:	0f 83 60 ff ff ff    	jae    c0010056 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00100f6:	39 c6                	cmp    esi,eax
c00100f8:	19 d7                	sbb    edi,edx
c00100fa:	0f 83 ff 00 00 00    	jae    c00101ff <Phys::physicalMemorySetup(unsigned int)+0x290>
c0010100:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010104:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010108:	29 c7                	sub    edi,eax
c001010a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001010e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010112:	19 d5                	sbb    ebp,edx
c0010114:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010118:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001011c:	e9 de 00 00 00       	jmp    c00101ff <Phys::physicalMemorySetup(unsigned int)+0x290>
c0010121:	83 ec 0c             	sub    esp,0xc
c0010124:	68 93 41 02 c0       	push   0xc0024193
c0010129:	e8 b6 fa ff ff       	call   c000fbe4 <KePanic(char const*)>
c001012e:	83 c4 10             	add    esp,0x10
c0010131:	83 ec 08             	sub    esp,0x8
c0010134:	bb 60 00 00 00       	mov    ebx,0x60
c0010139:	6a 00                	push   0x0
c001013b:	6a 06                	push   0x6
c001013d:	e8 d7 fb ff ff       	call   c000fd19 <Phys::setPageState(unsigned long, bool)>
c0010142:	58                   	pop    eax
c0010143:	5a                   	pop    edx
c0010144:	6a 00                	push   0x0
c0010146:	6a 07                	push   0x7
c0010148:	e8 cc fb ff ff       	call   c000fd19 <Phys::setPageState(unsigned long, bool)>
c001014d:	8b 0d 7c c1 02 c0    	mov    ecx,DWORD PTR ds:0xc002c17c
c0010153:	83 c4 10             	add    esp,0x10
c0010156:	83 c1 02             	add    ecx,0x2
c0010159:	89 0d 7c c1 02 c0    	mov    DWORD PTR ds:0xc002c17c,ecx
c001015f:	83 ec 08             	sub    esp,0x8
c0010162:	6a 00                	push   0x0
c0010164:	53                   	push   ebx
c0010165:	83 c3 01             	add    ebx,0x1
c0010168:	e8 ac fb ff ff       	call   c000fd19 <Phys::setPageState(unsigned long, bool)>
c001016d:	83 c4 10             	add    esp,0x10
c0010170:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0010176:	75 e7                	jne    c001015f <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0010178:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c001017d:	bb 40 01 00 00       	mov    ebx,0x140
c0010182:	83 c0 20             	add    eax,0x20
c0010185:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c001018a:	eb 26                	jmp    c00101b2 <Phys::physicalMemorySetup(unsigned int)+0x243>
c001018c:	83 ec 08             	sub    esp,0x8
c001018f:	6a 00                	push   0x0
c0010191:	53                   	push   ebx
c0010192:	83 c3 01             	add    ebx,0x1
c0010195:	e8 7f fb ff ff       	call   c000fd19 <Phys::setPageState(unsigned long, bool)>
c001019a:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c001019f:	83 c4 10             	add    esp,0x10
c00101a2:	83 c0 01             	add    eax,0x1
c00101a5:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00101ab:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c00101b0:	74 07                	je     c00101b9 <Phys::physicalMemorySetup(unsigned int)+0x24a>
c00101b2:	3d ff 03 00 00       	cmp    eax,0x3ff
c00101b7:	7e d3                	jle    c001018c <Phys::physicalMemorySetup(unsigned int)+0x21d>
c00101b9:	bb d0 01 00 00       	mov    ebx,0x1d0
c00101be:	3d ff 07 00 00       	cmp    eax,0x7ff
c00101c3:	7f 26                	jg     c00101eb <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00101c5:	83 ec 08             	sub    esp,0x8
c00101c8:	6a 00                	push   0x0
c00101ca:	53                   	push   ebx
c00101cb:	83 c3 01             	add    ebx,0x1
c00101ce:	e8 46 fb ff ff       	call   c000fd19 <Phys::setPageState(unsigned long, bool)>
c00101d3:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c00101d8:	83 c4 10             	add    esp,0x10
c00101db:	83 c0 01             	add    eax,0x1
c00101de:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00101e4:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c00101e9:	75 d3                	jne    c00101be <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00101eb:	83 c4 3c             	add    esp,0x3c
c00101ee:	5b                   	pop    ebx
c00101ef:	5e                   	pop    esi
c00101f0:	5f                   	pop    edi
c00101f1:	5d                   	pop    ebp
c00101f2:	c3                   	ret    
c00101f3:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00101f7:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00101ff:	83 ec 04             	sub    esp,0x4
c0010202:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010206:	56                   	push   esi
c0010207:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001020b:	57                   	push   edi
c001020c:	68 3c 41 02 c0       	push   0xc002413c
c0010211:	e8 50 6d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010216:	5d                   	pop    ebp
c0010217:	58                   	pop    eax
c0010218:	56                   	push   esi
c0010219:	57                   	push   edi
c001021a:	e8 18 fd ff ff       	call   c000ff37 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001021f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010223:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010227:	83 c4 0c             	add    esp,0xc
c001022a:	8b 35 7c c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c17c
c0010230:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010234:	01 f0                	add    eax,esi
c0010236:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c001023b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010242:	52                   	push   edx
c0010243:	50                   	push   eax
c0010244:	68 a1 41 02 c0       	push   0xc00241a1
c0010249:	e8 18 6d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001024e:	83 c4 10             	add    esp,0x10
c0010251:	e9 00 fe ff ff       	jmp    c0010056 <Phys::physicalMemorySetup(unsigned int)+0xe7>

c0010256 <Pipe::isAtty()>:
c0010256:	31 c0                	xor    eax,eax
c0010258:	c3                   	ret    
c0010259:	90                   	nop

c001025a <Pipe::~Pipe()>:
c001025a:	83 ec 0c             	sub    esp,0xc
c001025d:	ba 00 42 02 c0       	mov    edx,0xc0024200
c0010262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010266:	89 10                	mov    DWORD PTR [eax],edx
c0010268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001026c:	83 ec 0c             	sub    esp,0xc
c001026f:	50                   	push   eax
c0010270:	e8 f9 2c 00 00       	call   c0012f6e <UnixFile::~UnixFile()>
c0010275:	83 c4 10             	add    esp,0x10
c0010278:	90                   	nop
c0010279:	83 c4 0c             	add    esp,0xc
c001027c:	c3                   	ret    
c001027d:	90                   	nop

c001027e <Pipe::~Pipe()>:
c001027e:	83 ec 0c             	sub    esp,0xc
c0010281:	83 ec 0c             	sub    esp,0xc
c0010284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010288:	e8 cd ff ff ff       	call   c001025a <Pipe::~Pipe()>
c001028d:	83 c4 10             	add    esp,0x10
c0010290:	83 ec 08             	sub    esp,0x8
c0010293:	6a 20                	push   0x20
c0010295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010299:	e8 1e d0 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c001029e:	83 c4 10             	add    esp,0x10
c00102a1:	83 c4 0c             	add    esp,0xc
c00102a4:	c3                   	ret    
c00102a5:	90                   	nop

c00102a6 <Pipe::write(unsigned long long, void*, int*)>:
c00102a6:	55                   	push   ebp
c00102a7:	57                   	push   edi
c00102a8:	56                   	push   esi
c00102a9:	53                   	push   ebx
c00102aa:	83 ec 1c             	sub    esp,0x1c
c00102ad:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00102b1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00102b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00102b9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00102bc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00102c0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00102c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00102c6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00102ca:	89 d8                	mov    eax,ebx
c00102cc:	89 d6                	mov    esi,edx
c00102ce:	89 d7                	mov    edi,edx
c00102d0:	c1 ff 1f             	sar    edi,0x1f
c00102d3:	03 34 24             	add    esi,DWORD PTR [esp]
c00102d6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00102da:	c1 f8 1f             	sar    eax,0x1f
c00102dd:	39 f3                	cmp    ebx,esi
c00102df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102e7:	19 f8                	sbb    eax,edi
c00102e9:	b8 01 00 00 00       	mov    eax,0x1
c00102ee:	72 72                	jb     c0010362 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00102f0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00102f3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00102f7:	01 d0                	add    eax,edx
c00102f9:	99                   	cdq    
c00102fa:	f7 fb                	idiv   ebx
c00102fc:	89 d8                	mov    eax,ebx
c00102fe:	29 d0                	sub    eax,edx
c0010300:	89 d6                	mov    esi,edx
c0010302:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010305:	89 c3                	mov    ebx,eax
c0010307:	c1 fb 1f             	sar    ebx,0x1f
c001030a:	39 c2                	cmp    edx,eax
c001030c:	19 df                	sbb    edi,ebx
c001030e:	bb 00 00 00 00       	mov    ebx,0x0
c0010313:	72 04                	jb     c0010319 <Pipe::write(unsigned long long, void*, int*)+0x73>
c0010315:	89 d3                	mov    ebx,edx
c0010317:	29 c3                	sub    ebx,eax
c0010319:	89 d0                	mov    eax,edx
c001031b:	29 d8                	sub    eax,ebx
c001031d:	74 0d                	je     c001032c <Pipe::write(unsigned long long, void*, int*)+0x86>
c001031f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010322:	89 c1                	mov    ecx,eax
c0010324:	01 f7                	add    edi,esi
c0010326:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001032a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001032c:	85 db                	test   ebx,ebx
c001032e:	74 0d                	je     c001033d <Pipe::write(unsigned long long, void*, int*)+0x97>
c0010330:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010334:	89 d9                	mov    ecx,ebx
c0010336:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010339:	89 c6                	mov    esi,eax
c001033b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001033d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010340:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010345:	75 10                	jne    c0010357 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0010347:	83 ec 0c             	sub    esp,0xc
c001034a:	68 bd 41 02 c0       	push   0xc00241bd
c001034f:	e8 90 f8 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0010354:	83 c4 10             	add    esp,0x10
c0010357:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001035b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001035e:	89 08                	mov    DWORD PTR [eax],ecx
c0010360:	31 c0                	xor    eax,eax
c0010362:	83 c4 1c             	add    esp,0x1c
c0010365:	5b                   	pop    ebx
c0010366:	5e                   	pop    esi
c0010367:	5f                   	pop    edi
c0010368:	5d                   	pop    ebp
c0010369:	c3                   	ret    

c001036a <Pipe::read(unsigned long long, void*, int*)>:
c001036a:	55                   	push   ebp
c001036b:	57                   	push   edi
c001036c:	56                   	push   esi
c001036d:	53                   	push   ebx
c001036e:	83 ec 1c             	sub    esp,0x1c
c0010371:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010375:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010379:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001037d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010380:	89 c8                	mov    eax,ecx
c0010382:	99                   	cdq    
c0010383:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010387:	74 27                	je     c00103b0 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010389:	39 f9                	cmp    ecx,edi
c001038b:	89 d1                	mov    ecx,edx
c001038d:	19 f1                	sbb    ecx,esi
c001038f:	73 1f                	jae    c00103b0 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010391:	fa                   	cli    
c0010392:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c0010398:	e8 87 69 00 00       	call   c0016d24 <schedule()>
c001039d:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00103a4:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00103ab:	75 d0                	jne    c001037d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103ad:	fb                   	sti    
c00103ae:	eb cd                	jmp    c001037d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103b4:	39 f8                	cmp    eax,edi
c00103b6:	89 d1                	mov    ecx,edx
c00103b8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00103bc:	19 f1                	sbb    ecx,esi
c00103be:	73 08                	jae    c00103c8 <Pipe::read(unsigned long long, void*, int*)+0x5e>
c00103c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00103c8:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00103cb:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00103ce:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00103d2:	29 f7                	sub    edi,esi
c00103d4:	89 f8                	mov    eax,edi
c00103d6:	99                   	cdq    
c00103d7:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00103db:	89 d0                	mov    eax,edx
c00103dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00103e1:	19 c2                	sbb    edx,eax
c00103e3:	89 f8                	mov    eax,edi
c00103e5:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00103ea:	89 ea                	mov    edx,ebp
c00103ec:	29 c2                	sub    edx,eax
c00103ee:	85 c0                	test   eax,eax
c00103f0:	74 0b                	je     c00103fd <Pipe::read(unsigned long long, void*, int*)+0x93>
c00103f2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00103f5:	89 c1                	mov    ecx,eax
c00103f7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00103fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103fd:	85 d2                	test   edx,edx
c00103ff:	74 0d                	je     c001040e <Pipe::read(unsigned long long, void*, int*)+0xa4>
c0010401:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010405:	89 d1                	mov    ecx,edx
c0010407:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001040a:	89 c7                	mov    edi,eax
c001040c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001040e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010411:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010414:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010417:	99                   	cdq    
c0010418:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001041c:	89 f7                	mov    edi,esi
c001041e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010422:	c1 ff 1f             	sar    edi,0x1f
c0010425:	57                   	push   edi
c0010426:	56                   	push   esi
c0010427:	52                   	push   edx
c0010428:	50                   	push   eax
c0010429:	e8 46 16 01 00       	call   c0021a74 <__umoddi3>
c001042e:	83 c4 10             	add    esp,0x10
c0010431:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010436:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010439:	75 10                	jne    c001044b <Pipe::read(unsigned long long, void*, int*)+0xe1>
c001043b:	83 ec 0c             	sub    esp,0xc
c001043e:	68 da 41 02 c0       	push   0xc00241da
c0010443:	e8 9c f7 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0010448:	83 c4 10             	add    esp,0x10
c001044b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001044f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010453:	89 10                	mov    DWORD PTR [eax],edx
c0010455:	83 c4 1c             	add    esp,0x1c
c0010458:	31 c0                	xor    eax,eax
c001045a:	5b                   	pop    ebx
c001045b:	5e                   	pop    esi
c001045c:	5f                   	pop    edi
c001045d:	5d                   	pop    ebp
c001045e:	c3                   	ret    
c001045f:	90                   	nop

c0010460 <Pipe::Pipe(int)>:
c0010460:	83 ec 0c             	sub    esp,0xc
c0010463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010467:	83 ec 08             	sub    esp,0x8
c001046a:	6a 00                	push   0x0
c001046c:	50                   	push   eax
c001046d:	e8 16 29 00 00       	call   c0012d88 <UnixFile::UnixFile(int)>
c0010472:	83 c4 10             	add    esp,0x10
c0010475:	ba 00 42 02 c0       	mov    edx,0xc0024200
c001047a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047e:	89 10                	mov    DWORD PTR [eax],edx
c0010480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010484:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010488:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001048b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104a5:	83 ec 0c             	sub    esp,0xc
c00104a8:	50                   	push   eax
c00104a9:	e8 da f2 ff ff       	call   c000f788 <malloc>
c00104ae:	83 c4 10             	add    esp,0x10
c00104b1:	89 c2                	mov    edx,eax
c00104b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104be:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104c2:	90                   	nop
c00104c3:	83 c4 0c             	add    esp,0xc
c00104c6:	c3                   	ret    

c00104c7 <KePowerThread(void*)>:
c00104c7:	83 ec 0c             	sub    esp,0xc
c00104ca:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00104d1:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00104d8:	75 01                	jne    c00104db <KePowerThread(void*)+0x14>
c00104da:	fb                   	sti    
c00104db:	50                   	push   eax
c00104dc:	50                   	push   eax
c00104dd:	6a 00                	push   0x0
c00104df:	6a 0a                	push   0xa
c00104e1:	c6 05 ac c1 02 c0 00 	mov    BYTE PTR ds:0xc002c1ac,0x0
c00104e8:	e8 43 6a 00 00       	call   c0016f30 <sleep(unsigned long long)>
c00104ed:	83 c4 10             	add    esp,0x10
c00104f0:	83 05 e4 c1 02 c0 0a 	add    DWORD PTR ds:0xc002c1e4,0xa
c00104f7:	eb e2                	jmp    c00104db <KePowerThread(void*)+0x14>

c00104f9 <KeChangePowerSettings(PowerSettings)>:
c00104f9:	57                   	push   edi
c00104fa:	b9 09 00 00 00       	mov    ecx,0x9
c00104ff:	56                   	push   esi
c0010500:	bf c0 c1 02 c0       	mov    edi,0xc002c1c0
c0010505:	fc                   	cld    
c0010506:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001050a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001050c:	5e                   	pop    esi
c001050d:	5f                   	pop    edi
c001050e:	c3                   	ret    

c001050f <KeUserIOReceived()>:
c001050f:	c7 05 e4 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1e4,0x0
c0010519:	c3                   	ret    

c001051a <KeSetupPowerManager()>:
c001051a:	83 ec 0c             	sub    esp,0xc
c001051d:	68 f0 00 00 00       	push   0xf0
c0010522:	6a 00                	push   0x0
c0010524:	68 c7 04 01 c0       	push   0xc00104c7
c0010529:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c001052f:	c7 05 e4 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1e4,0x0
c0010539:	c6 05 ac c1 02 c0 00 	mov    BYTE PTR ds:0xc002c1ac,0x0
c0010540:	e8 37 65 00 00       	call   c0016a7c <Process::createThread(void (*)(void*), void*, int)>
c0010545:	c7 05 c0 c1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002c1c0,0x2
c001054f:	c7 05 c4 c1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c1c4,0x1
c0010559:	c7 05 c8 c1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002c1c8,0x3
c0010563:	c7 05 cc c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1cc,0x0
c001056d:	c7 05 d8 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1d8,0x0
c0010577:	c7 05 d0 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1d0,0x0
c0010581:	c7 05 dc c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1dc,0x0
c001058b:	c7 05 d4 c1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002c1d4,0x3c
c0010595:	c7 05 e0 c1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002c1e0,0x3c
c001059f:	83 c4 1c             	add    esp,0x1c
c00105a2:	c3                   	ret    

c00105a3 <KePrepareShutdown()>:
c00105a3:	83 ec 0c             	sub    esp,0xc
c00105a6:	e8 dd cb ff ff       	call   c000d188 <KeExecuteAtexit()>
c00105ab:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c00105b0:	83 ec 0c             	sub    esp,0xc
c00105b3:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c00105b9:	e8 a0 96 ff ff       	call   c0009c5e <Device::closeAll()>
c00105be:	83 c4 1c             	add    esp,0x1c
c00105c1:	c3                   	ret    

c00105c2 <KeRegisterShutdownHandler(void (*)())>:
c00105c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c6:	a3 a8 c1 02 c0       	mov    ds:0xc002c1a8,eax
c00105cb:	c3                   	ret    

c00105cc <KeRegisterRestartHandler(void (*)())>:
c00105cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105d0:	a3 a4 c1 02 c0       	mov    ds:0xc002c1a4,eax
c00105d5:	c3                   	ret    

c00105d6 <KeRegisterSleepHandler(void (*)())>:
c00105d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105da:	a3 a0 c1 02 c0       	mov    ds:0xc002c1a0,eax
c00105df:	c3                   	ret    

c00105e0 <KeShutdown()>:
c00105e0:	83 ec 0c             	sub    esp,0xc
c00105e3:	e8 bb ff ff ff       	call   c00105a3 <KePrepareShutdown()>
c00105e8:	a1 a8 c1 02 c0       	mov    eax,ds:0xc002c1a8
c00105ed:	85 c0                	test   eax,eax
c00105ef:	74 04                	je     c00105f5 <KeShutdown()+0x15>
c00105f1:	ff d0                	call   eax
c00105f3:	eb 10                	jmp    c0010605 <KeShutdown()+0x25>
c00105f5:	83 ec 0c             	sub    esp,0xc
c00105f8:	68 14 42 02 c0       	push   0xc0024214
c00105fd:	e8 e2 f5 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0010602:	83 c4 10             	add    esp,0x10
c0010605:	83 ec 0c             	sub    esp,0xc
c0010608:	68 35 42 02 c0       	push   0xc0024235
c001060d:	e8 d2 f5 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0010612:	83 c4 1c             	add    esp,0x1c
c0010615:	c3                   	ret    

c0010616 <KeSleep()>:
c0010616:	a1 a0 c1 02 c0       	mov    eax,ds:0xc002c1a0
c001061b:	85 c0                	test   eax,eax
c001061d:	74 02                	je     c0010621 <KeSleep()+0xb>
c001061f:	ff e0                	jmp    eax
c0010621:	c3                   	ret    

c0010622 <KeHandlePowerButton()>:
c0010622:	a1 c0 c1 02 c0       	mov    eax,ds:0xc002c1c0
c0010627:	83 f8 02             	cmp    eax,0x2
c001062a:	75 02                	jne    c001062e <KeHandlePowerButton()+0xc>
c001062c:	eb b2                	jmp    c00105e0 <KeShutdown()>
c001062e:	48                   	dec    eax
c001062f:	75 02                	jne    c0010633 <KeHandlePowerButton()+0x11>
c0010631:	eb e3                	jmp    c0010616 <KeSleep()>
c0010633:	c3                   	ret    

c0010634 <KeHandleSleepButton()>:
c0010634:	a1 c4 c1 02 c0       	mov    eax,ds:0xc002c1c4
c0010639:	83 f8 02             	cmp    eax,0x2
c001063c:	75 02                	jne    c0010640 <KeHandleSleepButton()+0xc>
c001063e:	eb a0                	jmp    c00105e0 <KeShutdown()>
c0010640:	48                   	dec    eax
c0010641:	75 02                	jne    c0010645 <KeHandleSleepButton()+0x11>
c0010643:	eb d1                	jmp    c0010616 <KeSleep()>
c0010645:	c3                   	ret    

c0010646 <KeRestart()>:
c0010646:	83 ec 0c             	sub    esp,0xc
c0010649:	e8 55 ff ff ff       	call   c00105a3 <KePrepareShutdown()>
c001064e:	a1 a4 c1 02 c0       	mov    eax,ds:0xc002c1a4
c0010653:	85 c0                	test   eax,eax
c0010655:	74 02                	je     c0010659 <KeRestart()+0x13>
c0010657:	ff d0                	call   eax
c0010659:	83 ec 0c             	sub    esp,0xc
c001065c:	68 59 42 02 c0       	push   0xc0024259
c0010661:	e8 7e f5 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0010666:	83 c4 1c             	add    esp,0x1c
c0010669:	c3                   	ret    

c001066a <KeRand()>:
c001066a:	69 05 e8 c1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002c1e8,0x2875
c0010674:	69 0d ec c1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002c1ec,0xa2e7b175
c001067e:	53                   	push   ebx
c001067f:	01 c1                	add    ecx,eax
c0010681:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010686:	f7 25 e8 c1 02 c0    	mul    DWORD PTR ds:0xc002c1e8
c001068c:	01 ca                	add    edx,ecx
c001068e:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010693:	a3 e8 c1 02 c0       	mov    ds:0xc002c1e8,eax
c0010698:	83 d2 00             	adc    edx,0x0
c001069b:	0f b7 da             	movzx  ebx,dx
c001069e:	89 1d ec c1 02 c0    	mov    DWORD PTR ds:0xc002c1ec,ebx
c00106a4:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00106a8:	5b                   	pop    ebx
c00106a9:	c3                   	ret    

c00106aa <KeSeedRand(unsigned int)>:
c00106aa:	53                   	push   ebx
c00106ab:	83 ec 08             	sub    esp,0x8
c00106ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106b2:	e8 42 9f 00 00       	call   c001a5f9 <HalGetRand()>
c00106b7:	c7 05 ec c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1ec,0x0
c00106c1:	31 d8                	xor    eax,ebx
c00106c3:	a3 e8 c1 02 c0       	mov    ds:0xc002c1e8,eax
c00106c8:	e8 9d ff ff ff       	call   c001066a <KeRand()>
c00106cd:	83 c4 08             	add    esp,0x8
c00106d0:	5b                   	pop    ebx
c00106d1:	eb 97                	jmp    c001066a <KeRand()>

c00106d3 <KeInitRand()>:
c00106d3:	83 ec 0c             	sub    esp,0xc
c00106d6:	e8 ec 9c 00 00       	call   c001a3c7 <HalQueryPerformanceCounter()>
c00106db:	0f 20 da             	mov    edx,cr3
c00106de:	0f 22 da             	mov    cr3,edx
c00106e1:	0f 20 da             	mov    edx,cr3
c00106e4:	0f 22 da             	mov    cr3,edx
c00106e7:	0f 20 da             	mov    edx,cr3
c00106ea:	0f 22 da             	mov    cr3,edx
c00106ed:	0f 20 da             	mov    edx,cr3
c00106f0:	0f 22 da             	mov    cr3,edx
c00106f3:	83 ec 0c             	sub    esp,0xc
c00106f6:	35 03 8a 95 38       	xor    eax,0x38958a03
c00106fb:	50                   	push   eax
c00106fc:	e8 a9 ff ff ff       	call   c00106aa <KeSeedRand(unsigned int)>
c0010701:	83 c4 1c             	add    esp,0x1c
c0010704:	c3                   	ret    
c0010705:	66 90                	xchg   ax,ax
c0010707:	90                   	nop

c0010708 <KeResolveCompatibilitySymbol(char*)>:
c0010708:	83 ec 0c             	sub    esp,0xc
c001070b:	83 ec 08             	sub    esp,0x8
c001070e:	68 68 42 02 c0       	push   0xc0024268
c0010713:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010717:	e8 64 00 ff ff       	call   c0000780 <strcmp>
c001071c:	83 c4 10             	add    esp,0x10
c001071f:	85 c0                	test   eax,eax
c0010721:	0f 94 c0             	sete   al
c0010724:	0f b6 c0             	movzx  eax,al
c0010727:	85 c0                	test   eax,eax
c0010729:	74 0d                	je     c0010738 <KeResolveCompatibilitySymbol(char*)+0x30>
c001072b:	b8 08 c1 02 c0       	mov    eax,0xc002c108
c0010730:	e9 3b 02 00 00       	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010735:	8d 76 00             	lea    esi,[esi+0x0]
c0010738:	83 ec 08             	sub    esp,0x8
c001073b:	68 71 42 02 c0       	push   0xc0024271
c0010740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010744:	e8 37 00 ff ff       	call   c0000780 <strcmp>
c0010749:	83 c4 10             	add    esp,0x10
c001074c:	85 c0                	test   eax,eax
c001074e:	0f 94 c0             	sete   al
c0010751:	0f b6 c0             	movzx  eax,al
c0010754:	85 c0                	test   eax,eax
c0010756:	74 0c                	je     c0010764 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010758:	b8 74 19 02 c0       	mov    eax,0xc0021974
c001075d:	e9 0e 02 00 00       	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010762:	66 90                	xchg   ax,ax
c0010764:	83 ec 08             	sub    esp,0x8
c0010767:	68 7b 42 02 c0       	push   0xc002427b
c001076c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010770:	e8 0b 00 ff ff       	call   c0000780 <strcmp>
c0010775:	83 c4 10             	add    esp,0x10
c0010778:	85 c0                	test   eax,eax
c001077a:	0f 94 c0             	sete   al
c001077d:	0f b6 c0             	movzx  eax,al
c0010780:	85 c0                	test   eax,eax
c0010782:	74 0c                	je     c0010790 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010784:	b8 08 c1 02 c0       	mov    eax,0xc002c108
c0010789:	e9 e2 01 00 00       	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c001078e:	66 90                	xchg   ax,ax
c0010790:	83 ec 08             	sub    esp,0x8
c0010793:	68 8e 42 02 c0       	push   0xc002428e
c0010798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001079c:	e8 df ff fe ff       	call   c0000780 <strcmp>
c00107a1:	83 c4 10             	add    esp,0x10
c00107a4:	85 c0                	test   eax,eax
c00107a6:	0f 94 c0             	sete   al
c00107a9:	0f b6 c0             	movzx  eax,al
c00107ac:	85 c0                	test   eax,eax
c00107ae:	74 0c                	je     c00107bc <KeResolveCompatibilitySymbol(char*)+0xb4>
c00107b0:	b8 a8 16 02 c0       	mov    eax,0xc00216a8
c00107b5:	e9 b6 01 00 00       	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c00107ba:	66 90                	xchg   ax,ax
c00107bc:	83 ec 08             	sub    esp,0x8
c00107bf:	68 97 42 02 c0       	push   0xc0024297
c00107c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107c8:	e8 b3 ff fe ff       	call   c0000780 <strcmp>
c00107cd:	83 c4 10             	add    esp,0x10
c00107d0:	85 c0                	test   eax,eax
c00107d2:	0f 94 c0             	sete   al
c00107d5:	0f b6 c0             	movzx  eax,al
c00107d8:	85 c0                	test   eax,eax
c00107da:	74 0c                	je     c00107e8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00107dc:	b8 e4 fb 00 c0       	mov    eax,0xc000fbe4
c00107e1:	e9 8a 01 00 00       	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c00107e6:	66 90                	xchg   ax,ax
c00107e8:	83 ec 08             	sub    esp,0x8
c00107eb:	68 aa 42 02 c0       	push   0xc00242aa
c00107f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107f4:	e8 87 ff fe ff       	call   c0000780 <strcmp>
c00107f9:	83 c4 10             	add    esp,0x10
c00107fc:	85 c0                	test   eax,eax
c00107fe:	0f 94 c0             	sete   al
c0010801:	0f b6 c0             	movzx  eax,al
c0010804:	85 c0                	test   eax,eax
c0010806:	74 0c                	je     c0010814 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010808:	b8 11 d2 00 c0       	mov    eax,0xc000d211
c001080d:	e9 5e 01 00 00       	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010812:	66 90                	xchg   ax,ax
c0010814:	83 ec 08             	sub    esp,0x8
c0010817:	68 c7 42 02 c0       	push   0xc00242c7
c001081c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010820:	e8 5b ff fe ff       	call   c0000780 <strcmp>
c0010825:	83 c4 10             	add    esp,0x10
c0010828:	85 c0                	test   eax,eax
c001082a:	0f 94 c0             	sete   al
c001082d:	0f b6 c0             	movzx  eax,al
c0010830:	85 c0                	test   eax,eax
c0010832:	74 0c                	je     c0010840 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010834:	b8 74 1a 02 c0       	mov    eax,0xc0021a74
c0010839:	e9 32 01 00 00       	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c001083e:	66 90                	xchg   ax,ax
c0010840:	83 ec 08             	sub    esp,0x8
c0010843:	68 d1 42 02 c0       	push   0xc00242d1
c0010848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001084c:	e8 2f ff fe ff       	call   c0000780 <strcmp>
c0010851:	83 c4 10             	add    esp,0x10
c0010854:	85 c0                	test   eax,eax
c0010856:	0f 94 c0             	sete   al
c0010859:	0f b6 c0             	movzx  eax,al
c001085c:	85 c0                	test   eax,eax
c001085e:	74 0c                	je     c001086c <KeResolveCompatibilitySymbol(char*)+0x164>
c0010860:	b8 f4 17 02 c0       	mov    eax,0xc00217f4
c0010865:	e9 06 01 00 00       	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c001086a:	66 90                	xchg   ax,ax
c001086c:	83 ec 08             	sub    esp,0x8
c001086f:	68 da 42 02 c0       	push   0xc00242da
c0010874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010878:	e8 03 ff fe ff       	call   c0000780 <strcmp>
c001087d:	83 c4 10             	add    esp,0x10
c0010880:	85 c0                	test   eax,eax
c0010882:	0f 94 c0             	sete   al
c0010885:	0f b6 c0             	movzx  eax,al
c0010888:	85 c0                	test   eax,eax
c001088a:	74 0c                	je     c0010898 <KeResolveCompatibilitySymbol(char*)+0x190>
c001088c:	b8 0c c1 02 c0       	mov    eax,0xc002c10c
c0010891:	e9 da 00 00 00       	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010896:	66 90                	xchg   ax,ax
c0010898:	83 ec 08             	sub    esp,0x8
c001089b:	68 f2 42 02 c0       	push   0xc00242f2
c00108a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a4:	e8 d7 fe fe ff       	call   c0000780 <strcmp>
c00108a9:	83 c4 10             	add    esp,0x10
c00108ac:	85 c0                	test   eax,eax
c00108ae:	0f 94 c0             	sete   al
c00108b1:	0f b6 c0             	movzx  eax,al
c00108b4:	85 c0                	test   eax,eax
c00108b6:	74 0c                	je     c00108c4 <KeResolveCompatibilitySymbol(char*)+0x1bc>
c00108b8:	b8 0c c1 02 c0       	mov    eax,0xc002c10c
c00108bd:	e9 ae 00 00 00       	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c00108c2:	66 90                	xchg   ax,ax
c00108c4:	83 ec 08             	sub    esp,0x8
c00108c7:	68 ff 42 02 c0       	push   0xc00242ff
c00108cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d0:	e8 ab fe fe ff       	call   c0000780 <strcmp>
c00108d5:	83 c4 10             	add    esp,0x10
c00108d8:	85 c0                	test   eax,eax
c00108da:	0f 94 c0             	sete   al
c00108dd:	0f b6 c0             	movzx  eax,al
c00108e0:	85 c0                	test   eax,eax
c00108e2:	74 0c                	je     c00108f0 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c00108e4:	b8 0d c1 02 c0       	mov    eax,0xc002c10d
c00108e9:	e9 82 00 00 00       	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c00108ee:	66 90                	xchg   ax,ax
c00108f0:	83 ec 08             	sub    esp,0x8
c00108f3:	68 0c 43 02 c0       	push   0xc002430c
c00108f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108fc:	e8 7f fe fe ff       	call   c0000780 <strcmp>
c0010901:	83 c4 10             	add    esp,0x10
c0010904:	85 c0                	test   eax,eax
c0010906:	0f 94 c0             	sete   al
c0010909:	0f b6 c0             	movzx  eax,al
c001090c:	85 c0                	test   eax,eax
c001090e:	74 08                	je     c0010918 <KeResolveCompatibilitySymbol(char*)+0x210>
c0010910:	b8 0c c1 02 c0       	mov    eax,0xc002c10c
c0010915:	eb 59                	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010917:	90                   	nop
c0010918:	83 ec 08             	sub    esp,0x8
c001091b:	68 1d 43 02 c0       	push   0xc002431d
c0010920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010924:	e8 57 fe fe ff       	call   c0000780 <strcmp>
c0010929:	83 c4 10             	add    esp,0x10
c001092c:	85 c0                	test   eax,eax
c001092e:	0f 94 c0             	sete   al
c0010931:	0f b6 c0             	movzx  eax,al
c0010934:	85 c0                	test   eax,eax
c0010936:	74 08                	je     c0010940 <KeResolveCompatibilitySymbol(char*)+0x238>
c0010938:	b8 0d c1 02 c0       	mov    eax,0xc002c10d
c001093d:	eb 31                	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c001093f:	90                   	nop
c0010940:	83 ec 08             	sub    esp,0x8
c0010943:	68 2e 43 02 c0       	push   0xc002432e
c0010948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001094c:	e8 2f fe fe ff       	call   c0000780 <strcmp>
c0010951:	83 c4 10             	add    esp,0x10
c0010954:	85 c0                	test   eax,eax
c0010956:	0f 94 c0             	sete   al
c0010959:	0f b6 c0             	movzx  eax,al
c001095c:	85 c0                	test   eax,eax
c001095e:	74 08                	je     c0010968 <KeResolveCompatibilitySymbol(char*)+0x260>
c0010960:	b8 18 75 01 c0       	mov    eax,0xc0017518
c0010965:	eb 09                	jmp    c0010970 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010967:	90                   	nop
c0010968:	b8 00 00 00 00       	mov    eax,0x0
c001096d:	8d 76 00             	lea    esi,[esi+0x0]
c0010970:	83 c4 0c             	add    esp,0xc
c0010973:	c3                   	ret    

c0010974 <Semaphore::Semaphore(int)>:
c0010974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010978:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001097c:	89 10                	mov    DWORD PTR [eax],edx
c001097e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010982:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010989:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001098d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010998:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001099f:	90                   	nop
c00109a0:	c3                   	ret    
c00109a1:	90                   	nop
c00109a2:	66 90                	xchg   ax,ax

c00109a4 <Semaphore::tryAcquire()>:
c00109a4:	83 ec 0c             	sub    esp,0xc
c00109a7:	fa                   	cli    
c00109a8:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00109ad:	83 c0 01             	add    eax,0x1
c00109b0:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c00109b5:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00109ba:	83 c0 01             	add    eax,0x1
c00109bd:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c00109c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00109c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00109cf:	39 c2                	cmp    edx,eax
c00109d1:	7d 59                	jge    c0010a2c <Semaphore::tryAcquire()+0x88>
c00109d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00109da:	8d 50 01             	lea    edx,[eax+0x1]
c00109dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00109e4:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00109e9:	83 e8 01             	sub    eax,0x1
c00109ec:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c00109f1:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00109f6:	85 c0                	test   eax,eax
c00109f8:	75 1a                	jne    c0010a14 <Semaphore::tryAcquire()+0x70>
c00109fa:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c00109ff:	85 c0                	test   eax,eax
c0010a01:	74 11                	je     c0010a14 <Semaphore::tryAcquire()+0x70>
c0010a03:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010a0d:	e8 12 63 00 00       	call   c0016d24 <schedule()>
c0010a12:	66 90                	xchg   ax,ax
c0010a14:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010a1c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010a21:	85 c0                	test   eax,eax
c0010a23:	75 03                	jne    c0010a28 <Semaphore::tryAcquire()+0x84>
c0010a25:	fb                   	sti    
c0010a26:	66 90                	xchg   ax,ax
c0010a28:	b0 01                	mov    al,0x1
c0010a2a:	eb 48                	jmp    c0010a74 <Semaphore::tryAcquire()+0xd0>
c0010a2c:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010a31:	83 e8 01             	sub    eax,0x1
c0010a34:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010a39:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010a3e:	85 c0                	test   eax,eax
c0010a40:	75 1a                	jne    c0010a5c <Semaphore::tryAcquire()+0xb8>
c0010a42:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010a47:	85 c0                	test   eax,eax
c0010a49:	74 11                	je     c0010a5c <Semaphore::tryAcquire()+0xb8>
c0010a4b:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010a55:	e8 ca 62 00 00       	call   c0016d24 <schedule()>
c0010a5a:	66 90                	xchg   ax,ax
c0010a5c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010a64:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010a69:	85 c0                	test   eax,eax
c0010a6b:	75 03                	jne    c0010a70 <Semaphore::tryAcquire()+0xcc>
c0010a6d:	fb                   	sti    
c0010a6e:	66 90                	xchg   ax,ax
c0010a70:	b0 00                	mov    al,0x0
c0010a72:	66 90                	xchg   ax,ax
c0010a74:	83 c4 0c             	add    esp,0xc
c0010a77:	c3                   	ret    

c0010a78 <Semaphore::assertLocked(char const*)>:
c0010a78:	83 ec 0c             	sub    esp,0xc
c0010a7b:	fa                   	cli    
c0010a7c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010a81:	83 c0 01             	add    eax,0x1
c0010a84:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0010a89:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010a8e:	83 c0 01             	add    eax,0x1
c0010a91:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0010aa3:	39 c2                	cmp    edx,eax
c0010aa5:	7d 11                	jge    c0010ab8 <Semaphore::assertLocked(char const*)+0x40>
c0010aa7:	83 ec 0c             	sub    esp,0xc
c0010aaa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010aae:	e8 31 f1 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0010ab3:	83 c4 10             	add    esp,0x10
c0010ab6:	66 90                	xchg   ax,ax
c0010ab8:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010abd:	83 e8 01             	sub    eax,0x1
c0010ac0:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010ac5:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010aca:	85 c0                	test   eax,eax
c0010acc:	75 1a                	jne    c0010ae8 <Semaphore::assertLocked(char const*)+0x70>
c0010ace:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010ad3:	85 c0                	test   eax,eax
c0010ad5:	74 11                	je     c0010ae8 <Semaphore::assertLocked(char const*)+0x70>
c0010ad7:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010ae1:	e8 3e 62 00 00       	call   c0016d24 <schedule()>
c0010ae6:	66 90                	xchg   ax,ax
c0010ae8:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010af0:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010af5:	85 c0                	test   eax,eax
c0010af7:	75 03                	jne    c0010afc <Semaphore::assertLocked(char const*)+0x84>
c0010af9:	fb                   	sti    
c0010afa:	66 90                	xchg   ax,ax
c0010afc:	90                   	nop
c0010afd:	83 c4 0c             	add    esp,0xc
c0010b00:	c3                   	ret    
c0010b01:	90                   	nop
c0010b02:	66 90                	xchg   ax,ax

c0010b04 <Semaphore::acquire(int)>:
c0010b04:	83 ec 1c             	sub    esp,0x1c
c0010b07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010b0c:	0f 84 ae 00 00 00    	je     c0010bc0 <Semaphore::acquire(int)+0xbc>
c0010b12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010b1a:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010b1f:	90                   	nop
c0010b20:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010b25:	85 c0                	test   eax,eax
c0010b27:	0f 84 87 00 00 00    	je     c0010bb4 <Semaphore::acquire(int)+0xb0>
c0010b2d:	83 ec 0c             	sub    esp,0xc
c0010b30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010b34:	e8 6b fe ff ff       	call   c00109a4 <Semaphore::tryAcquire()>
c0010b39:	83 c4 10             	add    esp,0x10
c0010b3c:	83 f0 01             	xor    eax,0x1
c0010b3f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010b43:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010b47:	83 f0 01             	xor    eax,0x1
c0010b4a:	0f b6 c0             	movzx  eax,al
c0010b4d:	85 c0                	test   eax,eax
c0010b4f:	75 5f                	jne    c0010bb0 <Semaphore::acquire(int)+0xac>
c0010b51:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010b56:	7f 34                	jg     c0010b8c <Semaphore::acquire(int)+0x88>
c0010b58:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010b5c:	89 d0                	mov    eax,edx
c0010b5e:	c1 e0 02             	shl    eax,0x2
c0010b61:	01 d0                	add    eax,edx
c0010b63:	d1 e0                	shl    eax,1
c0010b65:	89 c2                	mov    edx,eax
c0010b67:	c1 fa 1f             	sar    edx,0x1f
c0010b6a:	83 ec 08             	sub    esp,0x8
c0010b6d:	52                   	push   edx
c0010b6e:	50                   	push   eax
c0010b6f:	e8 a4 63 00 00       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0010b74:	83 c4 10             	add    esp,0x10
c0010b77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b7b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010b7f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010b87:	eb 97                	jmp    c0010b20 <Semaphore::acquire(int)+0x1c>
c0010b89:	8d 76 00             	lea    esi,[esi+0x0]
c0010b8c:	83 ec 08             	sub    esp,0x8
c0010b8f:	6a 00                	push   0x0
c0010b91:	68 90 01 00 00       	push   0x190
c0010b96:	e8 7d 63 00 00       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0010b9b:	83 c4 10             	add    esp,0x10
c0010b9e:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010ba3:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010ba8:	e9 73 ff ff ff       	jmp    c0010b20 <Semaphore::acquire(int)+0x1c>
c0010bad:	8d 76 00             	lea    esi,[esi+0x0]
c0010bb0:	90                   	nop
c0010bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0010bb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bb8:	e9 fb 00 00 00       	jmp    c0010cb8 <Semaphore::acquire(int)+0x1b4>
c0010bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0010bc0:	fa                   	cli    
c0010bc1:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010bc6:	83 c0 01             	add    eax,0x1
c0010bc9:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0010bce:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010bd3:	83 c0 01             	add    eax,0x1
c0010bd6:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bdf:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010be2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010be6:	8b 00                	mov    eax,DWORD PTR [eax]
c0010be8:	39 c2                	cmp    edx,eax
c0010bea:	7d 14                	jge    c0010c00 <Semaphore::acquire(int)+0xfc>
c0010bec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bf3:	8d 50 01             	lea    edx,[eax+0x1]
c0010bf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bfa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010bfd:	eb 6d                	jmp    c0010c6c <Semaphore::acquire(int)+0x168>
c0010bff:	90                   	nop
c0010c00:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c07:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010c0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c15:	85 c0                	test   eax,eax
c0010c17:	75 13                	jne    c0010c2c <Semaphore::acquire(int)+0x128>
c0010c19:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010c1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c27:	eb 17                	jmp    c0010c40 <Semaphore::acquire(int)+0x13c>
c0010c29:	8d 76 00             	lea    esi,[esi+0x0]
c0010c2c:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010c31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c35:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010c38:	8b 12                	mov    edx,DWORD PTR [edx]
c0010c3a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c40:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010c45:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c4b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010c4e:	83 ec 0c             	sub    esp,0xc
c0010c51:	68 44 43 02 c0       	push   0xc0024344
c0010c56:	e8 0b 63 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010c5b:	83 c4 10             	add    esp,0x10
c0010c5e:	83 ec 0c             	sub    esp,0xc
c0010c61:	6a 05                	push   0x5
c0010c63:	e8 7c 61 00 00       	call   c0016de4 <blockTask(TaskState)>
c0010c68:	83 c4 10             	add    esp,0x10
c0010c6b:	90                   	nop
c0010c6c:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010c71:	83 e8 01             	sub    eax,0x1
c0010c74:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010c79:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010c7e:	85 c0                	test   eax,eax
c0010c80:	75 1a                	jne    c0010c9c <Semaphore::acquire(int)+0x198>
c0010c82:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010c87:	85 c0                	test   eax,eax
c0010c89:	74 11                	je     c0010c9c <Semaphore::acquire(int)+0x198>
c0010c8b:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010c95:	e8 8a 60 00 00       	call   c0016d24 <schedule()>
c0010c9a:	66 90                	xchg   ax,ax
c0010c9c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010ca4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010ca9:	85 c0                	test   eax,eax
c0010cab:	75 03                	jne    c0010cb0 <Semaphore::acquire(int)+0x1ac>
c0010cad:	fb                   	sti    
c0010cae:	66 90                	xchg   ax,ax
c0010cb0:	b8 00 00 00 00       	mov    eax,0x0
c0010cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cb8:	83 c4 1c             	add    esp,0x1c
c0010cbb:	c3                   	ret    

c0010cbc <Semaphore::acquire()>:
c0010cbc:	83 ec 0c             	sub    esp,0xc
c0010cbf:	83 ec 08             	sub    esp,0x8
c0010cc2:	6a 00                	push   0x0
c0010cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cc8:	e8 37 fe ff ff       	call   c0010b04 <Semaphore::acquire(int)>
c0010ccd:	83 c4 10             	add    esp,0x10
c0010cd0:	90                   	nop
c0010cd1:	83 c4 0c             	add    esp,0xc
c0010cd4:	c3                   	ret    
c0010cd5:	90                   	nop
c0010cd6:	66 90                	xchg   ax,ax

c0010cd8 <Semaphore::release()>:
c0010cd8:	83 ec 1c             	sub    esp,0x1c
c0010cdb:	fa                   	cli    
c0010cdc:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010ce1:	83 c0 01             	add    eax,0x1
c0010ce4:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0010ce9:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010cee:	83 c0 01             	add    eax,0x1
c0010cf1:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010cf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cfd:	85 c0                	test   eax,eax
c0010cff:	74 2b                	je     c0010d2c <Semaphore::release()+0x54>
c0010d01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d10:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010d13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d1a:	83 ec 0c             	sub    esp,0xc
c0010d1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d21:	e8 56 63 00 00       	call   c001707c <unblockTask(ThreadControlBlock*)>
c0010d26:	83 c4 10             	add    esp,0x10
c0010d29:	eb 15                	jmp    c0010d40 <Semaphore::release()+0x68>
c0010d2b:	90                   	nop
c0010d2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d33:	8d 50 ff             	lea    edx,[eax-0x1]
c0010d36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d3a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0010d40:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010d45:	83 e8 01             	sub    eax,0x1
c0010d48:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010d4d:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010d52:	85 c0                	test   eax,eax
c0010d54:	75 1a                	jne    c0010d70 <Semaphore::release()+0x98>
c0010d56:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010d5b:	85 c0                	test   eax,eax
c0010d5d:	74 11                	je     c0010d70 <Semaphore::release()+0x98>
c0010d5f:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010d69:	e8 b6 5f 00 00       	call   c0016d24 <schedule()>
c0010d6e:	66 90                	xchg   ax,ax
c0010d70:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010d78:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010d7d:	85 c0                	test   eax,eax
c0010d7f:	75 03                	jne    c0010d84 <Semaphore::release()+0xac>
c0010d81:	fb                   	sti    
c0010d82:	66 90                	xchg   ax,ax
c0010d84:	90                   	nop
c0010d85:	83 c4 1c             	add    esp,0x1c
c0010d88:	c3                   	ret    

c0010d89 <KiSigKill(int)>:
c0010d89:	83 ec 0c             	sub    esp,0xc
c0010d8c:	6a 00                	push   0x0
c0010d8e:	6a 00                	push   0x0
c0010d90:	6a ff                	push   0xffffffff
c0010d92:	6a 01                	push   0x1
c0010d94:	e8 b9 62 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010d99:	83 c4 1c             	add    esp,0x1c
c0010d9c:	c3                   	ret    

c0010d9d <KiDefaultSignalHandlerIgnore(int)>:
c0010d9d:	c3                   	ret    

c0010d9e <KiDefaultSignalHandlerPause(int)>:
c0010d9e:	57                   	push   edi
c0010d9f:	b9 07 00 00 00       	mov    ecx,0x7
c0010da4:	56                   	push   esi
c0010da5:	be 9f 43 02 c0       	mov    esi,0xc002439f
c0010daa:	83 ec 24             	sub    esp,0x24
c0010dad:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010db1:	fc                   	cld    
c0010db2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010db4:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010db8:	50                   	push   eax
c0010db9:	6a 00                	push   0x0
c0010dbb:	6a 00                	push   0x0
c0010dbd:	6a 27                	push   0x27
c0010dbf:	e8 8e 62 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010dc4:	83 c4 34             	add    esp,0x34
c0010dc7:	5e                   	pop    esi
c0010dc8:	5f                   	pop    edi
c0010dc9:	c3                   	ret    

c0010dca <KiDefaultSignalHandlerResume(int)>:
c0010dca:	57                   	push   edi
c0010dcb:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010dd0:	56                   	push   esi
c0010dd1:	be bb 43 02 c0       	mov    esi,0xc00243bb
c0010dd6:	83 ec 24             	sub    esp,0x24
c0010dd9:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010ddd:	fc                   	cld    
c0010dde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010de0:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010de4:	50                   	push   eax
c0010de5:	6a 00                	push   0x0
c0010de7:	6a 00                	push   0x0
c0010de9:	6a 27                	push   0x27
c0010deb:	e8 62 62 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010df0:	83 c4 34             	add    esp,0x34
c0010df3:	5e                   	pop    esi
c0010df4:	5f                   	pop    edi
c0010df5:	c3                   	ret    

c0010df6 <KeDeinitSignals(SigHandlerBlock*)>:
c0010df6:	e9 9d e9 ff ff       	jmp    c000f798 <free>

c0010dfb <KeInitSignals()>:
c0010dfb:	53                   	push   ebx
c0010dfc:	83 ec 14             	sub    esp,0x14
c0010dff:	68 c8 00 00 00       	push   0xc8
c0010e04:	e8 7f e9 ff ff       	call   c000f788 <malloc>
c0010e09:	83 c4 0c             	add    esp,0xc
c0010e0c:	6a 04                	push   0x4
c0010e0e:	6a 00                	push   0x0
c0010e10:	50                   	push   eax
c0010e11:	89 c3                	mov    ebx,eax
c0010e13:	e8 d8 f6 fe ff       	call   c00004f0 <memset>
c0010e18:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010e1e:	83 c4 0c             	add    esp,0xc
c0010e21:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010e2b:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0010e35:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010e3c:	6a 20                	push   0x20
c0010e3e:	6a 00                	push   0x0
c0010e40:	50                   	push   eax
c0010e41:	e8 aa f6 fe ff       	call   c00004f0 <memset>
c0010e46:	83 c4 0c             	add    esp,0xc
c0010e49:	6a 44                	push   0x44
c0010e4b:	6a 00                	push   0x0
c0010e4d:	53                   	push   ebx
c0010e4e:	e8 9d f6 fe ff       	call   c00004f0 <memset>
c0010e53:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0010e59:	83 c4 0c             	add    esp,0xc
c0010e5c:	6a 11                	push   0x11
c0010e5e:	6a 00                	push   0x0
c0010e60:	50                   	push   eax
c0010e61:	e8 8a f6 fe ff       	call   c00004f0 <memset>
c0010e66:	83 c4 18             	add    esp,0x18
c0010e69:	89 d8                	mov    eax,ebx
c0010e6b:	5b                   	pop    ebx
c0010e6c:	c3                   	ret    

c0010e6d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010e6d:	53                   	push   ebx
c0010e6e:	b8 01 00 00 00       	mov    eax,0x1
c0010e73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010e77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e7b:	83 f9 10             	cmp    ecx,0x10
c0010e7e:	7f 21                	jg     c0010ea1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e84:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010e87:	89 03                	mov    DWORD PTR [ebx],eax
c0010e89:	b8 01 00 00 00       	mov    eax,0x1
c0010e8e:	d3 e0                	shl    eax,cl
c0010e90:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010e94:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010e97:	31 c0                	xor    eax,eax
c0010e99:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010ea1:	5b                   	pop    ebx
c0010ea2:	c3                   	ret    

c0010ea3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010ea3:	55                   	push   ebp
c0010ea4:	57                   	push   edi
c0010ea5:	bf 08 00 00 00       	mov    edi,0x8
c0010eaa:	56                   	push   esi
c0010eab:	53                   	push   ebx
c0010eac:	83 ec 14             	sub    esp,0x14
c0010eaf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010eb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010eb7:	68 d8 43 02 c0       	push   0xc00243d8
c0010ebc:	e8 a5 60 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010ec1:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010ec7:	83 c4 10             	add    esp,0x10
c0010eca:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010ed1:	31 c9                	xor    ecx,ecx
c0010ed3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010ed7:	99                   	cdq    
c0010ed8:	f7 ff                	idiv   edi
c0010eda:	8d 42 24             	lea    eax,[edx+0x24]
c0010edd:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010ee1:	85 f6                	test   esi,esi
c0010ee3:	75 1a                	jne    c0010eff <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0010ee5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010ee9:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0010eed:	50                   	push   eax
c0010eee:	50                   	push   eax
c0010eef:	52                   	push   edx
c0010ef0:	68 ee 43 02 c0       	push   0xc00243ee
c0010ef5:	e8 6c 60 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010efa:	83 c4 10             	add    esp,0x10
c0010efd:	eb 1b                	jmp    c0010f1a <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0010eff:	41                   	inc    ecx
c0010f00:	83 f9 08             	cmp    ecx,0x8
c0010f03:	75 ce                	jne    c0010ed3 <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0010f05:	83 ec 0c             	sub    esp,0xc
c0010f08:	be 01 00 00 00       	mov    esi,0x1
c0010f0d:	68 0f 44 02 c0       	push   0xc002440f
c0010f12:	e8 4f 60 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010f17:	83 c4 10             	add    esp,0x10
c0010f1a:	83 c4 0c             	add    esp,0xc
c0010f1d:	89 f0                	mov    eax,esi
c0010f1f:	5b                   	pop    ebx
c0010f20:	5e                   	pop    esi
c0010f21:	5f                   	pop    edi
c0010f22:	5d                   	pop    ebp
c0010f23:	c3                   	ret    

c0010f24 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010f24:	55                   	push   ebp
c0010f25:	57                   	push   edi
c0010f26:	56                   	push   esi
c0010f27:	53                   	push   ebx
c0010f28:	83 ec 1c             	sub    esp,0x1c
c0010f2b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010f2f:	85 db                	test   ebx,ebx
c0010f31:	0f 84 e0 00 00 00    	je     c0011017 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010f37:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010f3e:	0f 84 d3 00 00 00    	je     c0011017 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010f44:	31 c9                	xor    ecx,ecx
c0010f46:	bf 08 00 00 00       	mov    edi,0x8
c0010f4b:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010f51:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010f54:	99                   	cdq    
c0010f55:	f7 ff                	idiv   edi
c0010f57:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010f5e:	85 ed                	test   ebp,ebp
c0010f60:	0f 84 d2 00 00 00    	je     c0011038 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c0010f66:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010f6c:	89 e9                	mov    ecx,ebp
c0010f6e:	bf 01 00 00 00       	mov    edi,0x1
c0010f73:	d3 e7                	shl    edi,cl
c0010f75:	31 c9                	xor    ecx,ecx
c0010f77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f7b:	b8 01 00 00 00       	mov    eax,0x1
c0010f80:	d3 e0                	shl    eax,cl
c0010f82:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c0010f86:	74 0a                	je     c0010f92 <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0010f88:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010f8c:	0f 85 85 00 00 00    	jne    c0011017 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010f92:	41                   	inc    ecx
c0010f93:	83 f9 11             	cmp    ecx,0x11
c0010f96:	75 e3                	jne    c0010f7b <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0010f98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f9c:	46                   	inc    esi
c0010f9d:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010fa3:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010fae:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010fb5:	09 f8                	or     eax,edi
c0010fb7:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010fbd:	31 c0                	xor    eax,eax
c0010fbf:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010fc7:	74 09                	je     c0010fd2 <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0010fc9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010fd0:	eb 06                	jmp    c0010fd8 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c0010fd2:	40                   	inc    eax
c0010fd3:	83 f8 08             	cmp    eax,0x8
c0010fd6:	75 e7                	jne    c0010fbf <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0010fd8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010fdc:	83 fd 09             	cmp    ebp,0x9
c0010fdf:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010fe2:	89 2a                	mov    DWORD PTR [edx],ebp
c0010fe4:	75 14                	jne    c0010ffa <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010fe6:	83 ec 0c             	sub    esp,0xc
c0010fe9:	68 20 44 02 c0       	push   0xc0024420
c0010fee:	e8 73 5f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010ff3:	b8 89 0d 01 c0       	mov    eax,0xc0010d89
c0010ff8:	eb 39                	jmp    c0011033 <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0010ffa:	83 f8 01             	cmp    eax,0x1
c0010ffd:	75 1c                	jne    c001101b <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0010fff:	83 ec 0c             	sub    esp,0xc
c0011002:	f7 d7                	not    edi
c0011004:	68 2a 44 02 c0       	push   0xc002442a
c0011009:	e8 58 5f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001100e:	83 c4 10             	add    esp,0x10
c0011011:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011017:	31 c0                	xor    eax,eax
c0011019:	eb 30                	jmp    c001104b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c001101b:	85 c0                	test   eax,eax
c001101d:	75 2c                	jne    c001104b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c001101f:	83 ec 0c             	sub    esp,0xc
c0011022:	68 37 44 02 c0       	push   0xc0024437
c0011027:	e8 3a 5f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001102c:	8b 04 ad 40 67 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd98c0]
c0011033:	83 c4 10             	add    esp,0x10
c0011036:	eb 13                	jmp    c001104b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011038:	41                   	inc    ecx
c0011039:	46                   	inc    esi
c001103a:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011040:	83 f9 08             	cmp    ecx,0x8
c0011043:	0f 85 02 ff ff ff    	jne    c0010f4b <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011049:	eb cc                	jmp    c0011017 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001104b:	83 c4 1c             	add    esp,0x1c
c001104e:	5b                   	pop    ebx
c001104f:	5e                   	pop    esi
c0011050:	5f                   	pop    edi
c0011051:	5d                   	pop    ebp
c0011052:	c3                   	ret    

c0011053 <KiCheckSignalZ>:
c0011053:	80 3d 0c c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c10c,0x0
c001105a:	74 43                	je     c001109f <KiCheckSignalZ+0x4c>
c001105c:	83 ec 24             	sub    esp,0x24
c001105f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0011063:	50                   	push   eax
c0011064:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011069:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001106c:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011072:	e8 ad fe ff ff       	call   c0010f24 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011077:	83 c4 10             	add    esp,0x10
c001107a:	31 d2                	xor    edx,edx
c001107c:	85 c0                	test   eax,eax
c001107e:	74 19                	je     c0011099 <KiCheckSignalZ+0x46>
c0011080:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011086:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011089:	89 02                	mov    DWORD PTR [edx],eax
c001108b:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011096:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011099:	89 d0                	mov    eax,edx
c001109b:	83 c4 1c             	add    esp,0x1c
c001109e:	c3                   	ret    
c001109f:	31 d2                	xor    edx,edx
c00110a1:	89 d0                	mov    eax,edx
c00110a3:	c3                   	ret    

c00110a4 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00110a4:	56                   	push   esi
c00110a5:	53                   	push   ebx
c00110a6:	bb 01 00 00 00       	mov    ebx,0x1
c00110ab:	52                   	push   edx
c00110ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00110b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00110b4:	d3 e3                	shl    ebx,cl
c00110b6:	83 f9 10             	cmp    ecx,0x10
c00110b9:	7f 08                	jg     c00110c3 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00110bb:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00110c1:	75 10                	jne    c00110d3 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00110c3:	83 ec 0c             	sub    esp,0xc
c00110c6:	68 5a 44 02 c0       	push   0xc002445a
c00110cb:	e8 14 eb ff ff       	call   c000fbe4 <KePanic(char const*)>
c00110d0:	83 c4 10             	add    esp,0x10
c00110d3:	f7 d3                	not    ebx
c00110d5:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00110db:	58                   	pop    eax
c00110dc:	5b                   	pop    ebx
c00110dd:	5e                   	pop    esi
c00110de:	c3                   	ret    

c00110df <KiFinishSignalZ>:
c00110df:	53                   	push   ebx
c00110e0:	83 ec 08             	sub    esp,0x8
c00110e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110ec:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00110ef:	83 fa 08             	cmp    edx,0x8
c00110f2:	75 0c                	jne    c0011100 <KiFinishSignalZ+0x21>
c00110f4:	83 ec 0c             	sub    esp,0xc
c00110f7:	50                   	push   eax
c00110f8:	e8 7f 5f 00 00       	call   c001707c <unblockTask(ThreadControlBlock*)>
c00110fd:	83 c4 10             	add    esp,0x10
c0011100:	50                   	push   eax
c0011101:	50                   	push   eax
c0011102:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011105:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001110a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001110d:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011113:	e8 8c ff ff ff       	call   c00110a4 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011118:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001111e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011125:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001112c:	83 c4 18             	add    esp,0x18
c001112f:	5b                   	pop    ebx
c0011130:	c3                   	ret    

c0011131 <SysSeekDir(regs*)>:
c0011131:	31 c0                	xor    eax,eax
c0011133:	31 d2                	xor    edx,edx
c0011135:	c3                   	ret    

c0011136 <SysTellDir(regs*)>:
c0011136:	31 c0                	xor    eax,eax
c0011138:	31 d2                	xor    edx,edx
c001113a:	c3                   	ret    

c001113b <SysVerify(regs*)>:
c001113b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001113f:	31 d2                	xor    edx,edx
c0011141:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011144:	c3                   	ret    

c0011145 <SysGetArgc(regs*)>:
c0011145:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001114a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001114d:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c0011153:	89 c2                	mov    edx,eax
c0011155:	c1 fa 1f             	sar    edx,0x1f
c0011158:	c3                   	ret    

c0011159 <SysTTYName(regs*)>:
c0011159:	b8 01 00 00 00       	mov    eax,0x1
c001115e:	31 d2                	xor    edx,edx
c0011160:	c3                   	ret    

c0011161 <SysFormatDisk(regs*)>:
c0011161:	56                   	push   esi
c0011162:	53                   	push   ebx
c0011163:	83 ec 04             	sub    esp,0x4
c0011166:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001116a:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c0011170:	eb 2a                	jmp    c001119c <SysFormatDisk(regs*)+0x3b>
c0011172:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011175:	83 ec 0c             	sub    esp,0xc
c0011178:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001117b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001117d:	51                   	push   ecx
c001117e:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011181:	51                   	push   ecx
c0011182:	50                   	push   eax
c0011183:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001118a:	50                   	push   eax
c001118b:	53                   	push   ebx
c001118c:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c001118f:	83 c4 20             	add    esp,0x20
c0011192:	83 f8 08             	cmp    eax,0x8
c0011195:	89 c1                	mov    ecx,eax
c0011197:	75 14                	jne    c00111ad <SysFormatDisk(regs*)+0x4c>
c0011199:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001119c:	85 db                	test   ebx,ebx
c001119e:	75 d2                	jne    c0011172 <SysFormatDisk(regs*)+0x11>
c00111a0:	b8 03 00 00 00       	mov    eax,0x3
c00111a5:	31 d2                	xor    edx,edx
c00111a7:	83 c4 04             	add    esp,0x4
c00111aa:	5b                   	pop    ebx
c00111ab:	5e                   	pop    esi
c00111ac:	c3                   	ret    
c00111ad:	85 c0                	test   eax,eax
c00111af:	74 13                	je     c00111c4 <SysFormatDisk(regs*)+0x63>
c00111b1:	31 d2                	xor    edx,edx
c00111b3:	83 f9 09             	cmp    ecx,0x9
c00111b6:	b8 01 00 00 00       	mov    eax,0x1
c00111bb:	74 ea                	je     c00111a7 <SysFormatDisk(regs*)+0x46>
c00111bd:	b8 02 00 00 00       	mov    eax,0x2
c00111c2:	eb e1                	jmp    c00111a5 <SysFormatDisk(regs*)+0x44>
c00111c4:	31 c0                	xor    eax,eax
c00111c6:	eb dd                	jmp    c00111a5 <SysFormatDisk(regs*)+0x44>

c00111c8 <SysSetDiskVolumeLabel(regs*)>:
c00111c8:	56                   	push   esi
c00111c9:	53                   	push   ebx
c00111ca:	83 ec 04             	sub    esp,0x4
c00111cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111d1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00111d4:	83 f8 19             	cmp    eax,0x19
c00111d7:	77 33                	ja     c001120c <SysSetDiskVolumeLabel(regs*)+0x44>
c00111d9:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c00111e0:	85 c9                	test   ecx,ecx
c00111e2:	74 28                	je     c001120c <SysSetDiskVolumeLabel(regs*)+0x44>
c00111e4:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00111e7:	85 db                	test   ebx,ebx
c00111e9:	74 21                	je     c001120c <SysSetDiskVolumeLabel(regs*)+0x44>
c00111eb:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00111f1:	85 d2                	test   edx,edx
c00111f3:	74 17                	je     c001120c <SysSetDiskVolumeLabel(regs*)+0x44>
c00111f5:	8b 32                	mov    esi,DWORD PTR [edx]
c00111f7:	53                   	push   ebx
c00111f8:	50                   	push   eax
c00111f9:	51                   	push   ecx
c00111fa:	52                   	push   edx
c00111fb:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00111fe:	83 c4 10             	add    esp,0x10
c0011201:	83 c4 04             	add    esp,0x4
c0011204:	5b                   	pop    ebx
c0011205:	5e                   	pop    esi
c0011206:	89 c2                	mov    edx,eax
c0011208:	c1 fa 1f             	sar    edx,0x1f
c001120b:	c3                   	ret    
c001120c:	83 c4 04             	add    esp,0x4
c001120f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011214:	5b                   	pop    ebx
c0011215:	ba ff ff ff ff       	mov    edx,0xffffffff
c001121a:	5e                   	pop    esi
c001121b:	c3                   	ret    

c001121c <SysGetDiskVolumeLabel(regs*)>:
c001121c:	57                   	push   edi
c001121d:	56                   	push   esi
c001121e:	53                   	push   ebx
c001121f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011223:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011226:	83 fa 19             	cmp    edx,0x19
c0011229:	77 3c                	ja     c0011267 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001122b:	8b 0c 95 e0 ba 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4520]
c0011232:	85 c9                	test   ecx,ecx
c0011234:	74 31                	je     c0011267 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011236:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011239:	85 db                	test   ebx,ebx
c001123b:	74 2a                	je     c0011267 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001123d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011240:	85 f6                	test   esi,esi
c0011242:	74 23                	je     c0011267 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011244:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001124a:	85 c0                	test   eax,eax
c001124c:	74 19                	je     c0011267 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001124e:	83 ec 0c             	sub    esp,0xc
c0011251:	8b 38                	mov    edi,DWORD PTR [eax]
c0011253:	56                   	push   esi
c0011254:	53                   	push   ebx
c0011255:	52                   	push   edx
c0011256:	51                   	push   ecx
c0011257:	50                   	push   eax
c0011258:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001125b:	83 c4 20             	add    esp,0x20
c001125e:	5b                   	pop    ebx
c001125f:	5e                   	pop    esi
c0011260:	89 c2                	mov    edx,eax
c0011262:	c1 fa 1f             	sar    edx,0x1f
c0011265:	5f                   	pop    edi
c0011266:	c3                   	ret    
c0011267:	5b                   	pop    ebx
c0011268:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001126d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011272:	5e                   	pop    esi
c0011273:	5f                   	pop    edi
c0011274:	c3                   	ret    

c0011275 <SysRealpath(regs*)>:
c0011275:	53                   	push   ebx
c0011276:	83 ec 08             	sub    esp,0x8
c0011279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001127d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011280:	85 c9                	test   ecx,ecx
c0011282:	74 36                	je     c00112ba <SysRealpath(regs*)+0x45>
c0011284:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011287:	31 d2                	xor    edx,edx
c0011289:	b8 01 00 00 00       	mov    eax,0x1
c001128e:	85 db                	test   ebx,ebx
c0011290:	75 05                	jne    c0011297 <SysRealpath(regs*)+0x22>
c0011292:	83 c4 08             	add    esp,0x8
c0011295:	5b                   	pop    ebx
c0011296:	c3                   	ret    
c0011297:	6a 00                	push   0x0
c0011299:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001129e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00112a1:	05 0c 01 00 00       	add    eax,0x10c
c00112a6:	50                   	push   eax
c00112a7:	51                   	push   ecx
c00112a8:	53                   	push   ebx
c00112a9:	e8 ae 6b ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00112ae:	83 c4 10             	add    esp,0x10
c00112b1:	31 c0                	xor    eax,eax
c00112b3:	31 d2                	xor    edx,edx
c00112b5:	83 c4 08             	add    esp,0x8
c00112b8:	5b                   	pop    ebx
c00112b9:	c3                   	ret    
c00112ba:	b8 01 00 00 00       	mov    eax,0x1
c00112bf:	31 d2                	xor    edx,edx
c00112c1:	eb f2                	jmp    c00112b5 <SysRealpath(regs*)+0x40>

c00112c3 <SysReadDir(regs*)>:
c00112c3:	53                   	push   ebx
c00112c4:	83 ec 18             	sub    esp,0x18
c00112c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112cb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112ce:	83 f8 02             	cmp    eax,0x2
c00112d1:	76 4f                	jbe    c0011322 <SysReadDir(regs*)+0x5f>
c00112d3:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00112da:	77 52                	ja     c001132e <SysReadDir(regs*)+0x6b>
c00112dc:	83 ec 0c             	sub    esp,0xc
c00112df:	50                   	push   eax
c00112e0:	e8 98 1d 00 00       	call   c001307d <KeGetFileFromDescriptor(int)>
c00112e5:	83 c4 10             	add    esp,0x10
c00112e8:	85 c0                	test   eax,eax
c00112ea:	74 42                	je     c001132e <SysReadDir(regs*)+0x6b>
c00112ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00112f4:	83 ec 0c             	sub    esp,0xc
c00112f7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00112fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00112fd:	51                   	push   ecx
c00112fe:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011301:	51                   	push   ecx
c0011302:	6a 00                	push   0x0
c0011304:	68 10 01 00 00       	push   0x110
c0011309:	50                   	push   eax
c001130a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001130d:	83 c4 20             	add    esp,0x20
c0011310:	85 c0                	test   eax,eax
c0011312:	89 c1                	mov    ecx,eax
c0011314:	74 27                	je     c001133d <SysReadDir(regs*)+0x7a>
c0011316:	31 d2                	xor    edx,edx
c0011318:	83 f9 07             	cmp    ecx,0x7
c001131b:	b8 02 00 00 00       	mov    eax,0x2
c0011320:	75 16                	jne    c0011338 <SysReadDir(regs*)+0x75>
c0011322:	b8 01 00 00 00       	mov    eax,0x1
c0011327:	31 d2                	xor    edx,edx
c0011329:	83 c4 18             	add    esp,0x18
c001132c:	5b                   	pop    ebx
c001132d:	c3                   	ret    
c001132e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011333:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011338:	83 c4 18             	add    esp,0x18
c001133b:	5b                   	pop    ebx
c001133c:	c3                   	ret    
c001133d:	31 c0                	xor    eax,eax
c001133f:	31 d2                	xor    edx,edx
c0011341:	eb e6                	jmp    c0011329 <SysReadDir(regs*)+0x66>

c0011343 <SysIsATTY(regs*)>:
c0011343:	83 ec 0c             	sub    esp,0xc
c0011346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001134a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001134d:	83 f8 02             	cmp    eax,0x2
c0011350:	76 07                	jbe    c0011359 <SysIsATTY(regs*)+0x16>
c0011352:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011357:	75 26                	jne    c001137f <SysIsATTY(regs*)+0x3c>
c0011359:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001135e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011361:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011367:	85 c0                	test   eax,eax
c0011369:	74 24                	je     c001138f <SysIsATTY(regs*)+0x4c>
c001136b:	8b 10                	mov    edx,DWORD PTR [eax]
c001136d:	83 ec 0c             	sub    esp,0xc
c0011370:	50                   	push   eax
c0011371:	ff 12                	call   DWORD PTR [edx]
c0011373:	83 c4 10             	add    esp,0x10
c0011376:	31 d2                	xor    edx,edx
c0011378:	83 c4 0c             	add    esp,0xc
c001137b:	0f b6 c0             	movzx  eax,al
c001137e:	c3                   	ret    
c001137f:	83 ec 0c             	sub    esp,0xc
c0011382:	50                   	push   eax
c0011383:	e8 f5 1c 00 00       	call   c001307d <KeGetFileFromDescriptor(int)>
c0011388:	83 c4 10             	add    esp,0x10
c001138b:	85 c0                	test   eax,eax
c001138d:	75 dc                	jne    c001136b <SysIsATTY(regs*)+0x28>
c001138f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011394:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011399:	83 c4 0c             	add    esp,0xc
c001139c:	c3                   	ret    

c001139d <SysSeek(regs*)>:
c001139d:	53                   	push   ebx
c001139e:	83 ec 08             	sub    esp,0x8
c00113a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113a8:	8d 50 fd             	lea    edx,[eax-0x3]
c00113ab:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00113b1:	77 39                	ja     c00113ec <SysSeek(regs*)+0x4f>
c00113b3:	83 ec 0c             	sub    esp,0xc
c00113b6:	50                   	push   eax
c00113b7:	e8 c1 1c 00 00       	call   c001307d <KeGetFileFromDescriptor(int)>
c00113bc:	83 c4 10             	add    esp,0x10
c00113bf:	85 c0                	test   eax,eax
c00113c1:	74 29                	je     c00113ec <SysSeek(regs*)+0x4f>
c00113c3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00113c6:	83 ec 04             	sub    esp,0x4
c00113c9:	31 db                	xor    ebx,ebx
c00113cb:	53                   	push   ebx
c00113cc:	51                   	push   ecx
c00113cd:	50                   	push   eax
c00113ce:	e8 91 6e ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00113d3:	83 c4 10             	add    esp,0x10
c00113d6:	85 c0                	test   eax,eax
c00113d8:	0f 95 c0             	setne  al
c00113db:	31 d2                	xor    edx,edx
c00113dd:	0f b6 c0             	movzx  eax,al
c00113e0:	f7 d8                	neg    eax
c00113e2:	83 d2 00             	adc    edx,0x0
c00113e5:	83 c4 08             	add    esp,0x8
c00113e8:	5b                   	pop    ebx
c00113e9:	f7 da                	neg    edx
c00113eb:	c3                   	ret    
c00113ec:	83 c4 08             	add    esp,0x8
c00113ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113f4:	5b                   	pop    ebx
c00113f5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113fa:	c3                   	ret    

c00113fb <SysTell(regs*)>:
c00113fb:	53                   	push   ebx
c00113fc:	83 ec 08             	sub    esp,0x8
c00113ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011403:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011406:	83 f8 02             	cmp    eax,0x2
c0011409:	76 56                	jbe    c0011461 <SysTell(regs*)+0x66>
c001140b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011410:	76 19                	jbe    c001142b <SysTell(regs*)+0x30>
c0011412:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011415:	31 d2                	xor    edx,edx
c0011417:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001141d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011424:	83 c4 08             	add    esp,0x8
c0011427:	31 c0                	xor    eax,eax
c0011429:	5b                   	pop    ebx
c001142a:	c3                   	ret    
c001142b:	83 ec 0c             	sub    esp,0xc
c001142e:	50                   	push   eax
c001142f:	e8 49 1c 00 00       	call   c001307d <KeGetFileFromDescriptor(int)>
c0011434:	83 c4 10             	add    esp,0x10
c0011437:	85 c0                	test   eax,eax
c0011439:	74 26                	je     c0011461 <SysTell(regs*)+0x66>
c001143b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001143e:	83 ec 08             	sub    esp,0x8
c0011441:	52                   	push   edx
c0011442:	50                   	push   eax
c0011443:	e8 c8 6e ff ff       	call   c0008310 <File::tell(unsigned long long*)>
c0011448:	83 c4 10             	add    esp,0x10
c001144b:	85 c0                	test   eax,eax
c001144d:	0f 95 c0             	setne  al
c0011450:	31 d2                	xor    edx,edx
c0011452:	0f b6 c0             	movzx  eax,al
c0011455:	f7 d8                	neg    eax
c0011457:	83 d2 00             	adc    edx,0x0
c001145a:	83 c4 08             	add    esp,0x8
c001145d:	5b                   	pop    ebx
c001145e:	f7 da                	neg    edx
c0011460:	c3                   	ret    
c0011461:	83 c4 08             	add    esp,0x8
c0011464:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011469:	5b                   	pop    ebx
c001146a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001146f:	c3                   	ret    

c0011470 <SysSize(regs*)>:
c0011470:	53                   	push   ebx
c0011471:	83 ec 18             	sub    esp,0x18
c0011474:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011478:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001147b:	83 f8 02             	cmp    eax,0x2
c001147e:	76 5b                	jbe    c00114db <SysSize(regs*)+0x6b>
c0011480:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011485:	76 19                	jbe    c00114a0 <SysSize(regs*)+0x30>
c0011487:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001148a:	31 d2                	xor    edx,edx
c001148c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011492:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011499:	83 c4 18             	add    esp,0x18
c001149c:	31 c0                	xor    eax,eax
c001149e:	5b                   	pop    ebx
c001149f:	c3                   	ret    
c00114a0:	83 ec 0c             	sub    esp,0xc
c00114a3:	50                   	push   eax
c00114a4:	e8 d4 1b 00 00       	call   c001307d <KeGetFileFromDescriptor(int)>
c00114a9:	83 c4 10             	add    esp,0x10
c00114ac:	85 c0                	test   eax,eax
c00114ae:	74 2b                	je     c00114db <SysSize(regs*)+0x6b>
c00114b0:	83 ec 04             	sub    esp,0x4
c00114b3:	8d 54 24 13          	lea    edx,[esp+0x13]
c00114b7:	52                   	push   edx
c00114b8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00114bb:	52                   	push   edx
c00114bc:	50                   	push   eax
c00114bd:	e8 e6 6f ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00114c2:	83 c4 10             	add    esp,0x10
c00114c5:	85 c0                	test   eax,eax
c00114c7:	0f 95 c0             	setne  al
c00114ca:	31 d2                	xor    edx,edx
c00114cc:	0f b6 c0             	movzx  eax,al
c00114cf:	f7 d8                	neg    eax
c00114d1:	83 d2 00             	adc    edx,0x0
c00114d4:	83 c4 18             	add    esp,0x18
c00114d7:	5b                   	pop    ebx
c00114d8:	f7 da                	neg    edx
c00114da:	c3                   	ret    
c00114db:	83 c4 18             	add    esp,0x18
c00114de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114e3:	5b                   	pop    ebx
c00114e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114e9:	c3                   	ret    

c00114ea <SysSizeFromFilename(regs*)>:
c00114ea:	55                   	push   ebp
c00114eb:	57                   	push   edi
c00114ec:	56                   	push   esi
c00114ed:	53                   	push   ebx
c00114ee:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00114f4:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00114fb:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00114fe:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011501:	85 f6                	test   esi,esi
c0011503:	89 f8                	mov    eax,edi
c0011505:	74 09                	je     c0011510 <SysSizeFromFilename(regs*)+0x26>
c0011507:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001150d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011510:	83 f8 02             	cmp    eax,0x2
c0011513:	0f 86 c9 00 00 00    	jbe    c00115e2 <SysSizeFromFilename(regs*)+0xf8>
c0011519:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001151e:	76 1f                	jbe    c001153f <SysSizeFromFilename(regs*)+0x55>
c0011520:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011523:	31 d2                	xor    edx,edx
c0011525:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001152b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011532:	31 c0                	xor    eax,eax
c0011534:	81 c4 4c 02 00 00    	add    esp,0x24c
c001153a:	5b                   	pop    ebx
c001153b:	5e                   	pop    esi
c001153c:	5f                   	pop    edi
c001153d:	5d                   	pop    ebp
c001153e:	c3                   	ret    
c001153f:	83 ec 0c             	sub    esp,0xc
c0011542:	68 14 01 00 00       	push   0x114
c0011547:	e8 3c e2 ff ff       	call   c000f788 <malloc>
c001154c:	6a 01                	push   0x1
c001154e:	89 c5                	mov    ebp,eax
c0011550:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011555:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011558:	50                   	push   eax
c0011559:	57                   	push   edi
c001155a:	55                   	push   ebp
c001155b:	e8 2a 6b ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c0011560:	83 c4 20             	add    esp,0x20
c0011563:	85 ed                	test   ebp,ebp
c0011565:	74 7b                	je     c00115e2 <SysSizeFromFilename(regs*)+0xf8>
c0011567:	83 ec 04             	sub    esp,0x4
c001156a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001156e:	50                   	push   eax
c001156f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011572:	51                   	push   ecx
c0011573:	55                   	push   ebp
c0011574:	e8 2f 6f ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0011579:	89 c3                	mov    ebx,eax
c001157b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001157e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011581:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011584:	83 c4 10             	add    esp,0x10
c0011587:	85 db                	test   ebx,ebx
c0011589:	75 57                	jne    c00115e2 <SysSizeFromFilename(regs*)+0xf8>
c001158b:	6a 00                	push   0x0
c001158d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011592:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011595:	05 0c 01 00 00       	add    eax,0x10c
c001159a:	50                   	push   eax
c001159b:	57                   	push   edi
c001159c:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00115a3:	53                   	push   ebx
c00115a4:	e8 b3 68 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00115a9:	58                   	pop    eax
c00115aa:	5a                   	pop    edx
c00115ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c00115af:	50                   	push   eax
c00115b0:	53                   	push   ebx
c00115b1:	e8 2d 63 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c00115b6:	83 c4 10             	add    esp,0x10
c00115b9:	ba 00 00 00 00       	mov    edx,0x0
c00115be:	83 f8 01             	cmp    eax,0x1
c00115c1:	b8 00 00 00 00       	mov    eax,0x0
c00115c6:	74 2f                	je     c00115f7 <SysSizeFromFilename(regs*)+0x10d>
c00115c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00115cd:	74 3b                	je     c001160a <SysSizeFromFilename(regs*)+0x120>
c00115cf:	85 f6                	test   esi,esi
c00115d1:	0f 84 5d ff ff ff    	je     c0011534 <SysSizeFromFilename(regs*)+0x4a>
c00115d7:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00115dd:	e9 52 ff ff ff       	jmp    c0011534 <SysSizeFromFilename(regs*)+0x4a>
c00115e2:	81 c4 4c 02 00 00    	add    esp,0x24c
c00115e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115ed:	5b                   	pop    ebx
c00115ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115f3:	5e                   	pop    esi
c00115f4:	5f                   	pop    edi
c00115f5:	5d                   	pop    ebp
c00115f6:	c3                   	ret    
c00115f7:	85 f6                	test   esi,esi
c00115f9:	0f 84 35 ff ff ff    	je     c0011534 <SysSizeFromFilename(regs*)+0x4a>
c00115ff:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011605:	e9 2a ff ff ff       	jmp    c0011534 <SysSizeFromFilename(regs*)+0x4a>
c001160a:	85 f6                	test   esi,esi
c001160c:	0f 84 22 ff ff ff    	je     c0011534 <SysSizeFromFilename(regs*)+0x4a>
c0011612:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011618:	e9 17 ff ff ff       	jmp    c0011534 <SysSizeFromFilename(regs*)+0x4a>

c001161d <SysSizeFromFilenameNoSymlink(regs*)>:
c001161d:	55                   	push   ebp
c001161e:	57                   	push   edi
c001161f:	56                   	push   esi
c0011620:	53                   	push   ebx
c0011621:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011627:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001162e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011631:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011634:	85 f6                	test   esi,esi
c0011636:	89 f8                	mov    eax,edi
c0011638:	74 09                	je     c0011643 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c001163a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011640:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011643:	83 f8 02             	cmp    eax,0x2
c0011646:	0f 86 c9 00 00 00    	jbe    c0011715 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c001164c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011651:	76 1f                	jbe    c0011672 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0011653:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011656:	31 d2                	xor    edx,edx
c0011658:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001165e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011665:	31 c0                	xor    eax,eax
c0011667:	81 c4 4c 02 00 00    	add    esp,0x24c
c001166d:	5b                   	pop    ebx
c001166e:	5e                   	pop    esi
c001166f:	5f                   	pop    edi
c0011670:	5d                   	pop    ebp
c0011671:	c3                   	ret    
c0011672:	83 ec 0c             	sub    esp,0xc
c0011675:	68 14 01 00 00       	push   0x114
c001167a:	e8 09 e1 ff ff       	call   c000f788 <malloc>
c001167f:	6a 00                	push   0x0
c0011681:	89 c5                	mov    ebp,eax
c0011683:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011688:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001168b:	50                   	push   eax
c001168c:	57                   	push   edi
c001168d:	55                   	push   ebp
c001168e:	e8 f7 69 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c0011693:	83 c4 20             	add    esp,0x20
c0011696:	85 ed                	test   ebp,ebp
c0011698:	74 7b                	je     c0011715 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c001169a:	83 ec 04             	sub    esp,0x4
c001169d:	8d 44 24 13          	lea    eax,[esp+0x13]
c00116a1:	50                   	push   eax
c00116a2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00116a5:	51                   	push   ecx
c00116a6:	55                   	push   ebp
c00116a7:	e8 fc 6d ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00116ac:	89 c3                	mov    ebx,eax
c00116ae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00116b1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00116b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116b7:	83 c4 10             	add    esp,0x10
c00116ba:	85 db                	test   ebx,ebx
c00116bc:	75 57                	jne    c0011715 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00116be:	6a 00                	push   0x0
c00116c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116c8:	05 0c 01 00 00       	add    eax,0x10c
c00116cd:	50                   	push   eax
c00116ce:	57                   	push   edi
c00116cf:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00116d6:	53                   	push   ebx
c00116d7:	e8 80 67 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00116dc:	58                   	pop    eax
c00116dd:	5a                   	pop    edx
c00116de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00116e2:	50                   	push   eax
c00116e3:	53                   	push   ebx
c00116e4:	e8 fa 61 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c00116e9:	83 c4 10             	add    esp,0x10
c00116ec:	ba 00 00 00 00       	mov    edx,0x0
c00116f1:	83 f8 01             	cmp    eax,0x1
c00116f4:	b8 00 00 00 00       	mov    eax,0x0
c00116f9:	74 2f                	je     c001172a <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c00116fb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011700:	74 3b                	je     c001173d <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c0011702:	85 f6                	test   esi,esi
c0011704:	0f 84 5d ff ff ff    	je     c0011667 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001170a:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011710:	e9 52 ff ff ff       	jmp    c0011667 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011715:	81 c4 4c 02 00 00    	add    esp,0x24c
c001171b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011720:	5b                   	pop    ebx
c0011721:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011726:	5e                   	pop    esi
c0011727:	5f                   	pop    edi
c0011728:	5d                   	pop    ebp
c0011729:	c3                   	ret    
c001172a:	85 f6                	test   esi,esi
c001172c:	0f 84 35 ff ff ff    	je     c0011667 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011732:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011738:	e9 2a ff ff ff       	jmp    c0011667 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001173d:	85 f6                	test   esi,esi
c001173f:	0f 84 22 ff ff ff    	je     c0011667 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011745:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001174b:	e9 17 ff ff ff       	jmp    c0011667 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0011750 <SysClose(regs*)>:
c0011750:	57                   	push   edi
c0011751:	56                   	push   esi
c0011752:	53                   	push   ebx
c0011753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011757:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001175a:	83 f8 02             	cmp    eax,0x2
c001175d:	76 44                	jbe    c00117a3 <SysClose(regs*)+0x53>
c001175f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011765:	31 f6                	xor    esi,esi
c0011767:	31 ff                	xor    edi,edi
c0011769:	83 fa 01             	cmp    edx,0x1
c001176c:	76 2d                	jbe    c001179b <SysClose(regs*)+0x4b>
c001176e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011773:	77 2e                	ja     c00117a3 <SysClose(regs*)+0x53>
c0011775:	83 ec 0c             	sub    esp,0xc
c0011778:	50                   	push   eax
c0011779:	e8 ff 18 00 00       	call   c001307d <KeGetFileFromDescriptor(int)>
c001177e:	83 c4 10             	add    esp,0x10
c0011781:	85 c0                	test   eax,eax
c0011783:	89 c3                	mov    ebx,eax
c0011785:	74 1c                	je     c00117a3 <SysClose(regs*)+0x53>
c0011787:	83 ec 0c             	sub    esp,0xc
c001178a:	50                   	push   eax
c001178b:	e8 74 6a ff ff       	call   c0008204 <File::close()>
c0011790:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011792:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011795:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011798:	83 c4 10             	add    esp,0x10
c001179b:	5b                   	pop    ebx
c001179c:	89 f0                	mov    eax,esi
c001179e:	89 fa                	mov    edx,edi
c00117a0:	5e                   	pop    esi
c00117a1:	5f                   	pop    edi
c00117a2:	c3                   	ret    
c00117a3:	5b                   	pop    ebx
c00117a4:	be ff ff ff ff       	mov    esi,0xffffffff
c00117a9:	89 f0                	mov    eax,esi
c00117ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00117b0:	89 fa                	mov    edx,edi
c00117b2:	5e                   	pop    esi
c00117b3:	5f                   	pop    edi
c00117b4:	c3                   	ret    

c00117b5 <SysOpenDir(regs*)>:
c00117b5:	56                   	push   esi
c00117b6:	53                   	push   ebx
c00117b7:	83 ec 04             	sub    esp,0x4
c00117ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117be:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00117c1:	85 c9                	test   ecx,ecx
c00117c3:	74 5d                	je     c0011822 <SysOpenDir(regs*)+0x6d>
c00117c5:	83 ec 0c             	sub    esp,0xc
c00117c8:	68 14 01 00 00       	push   0x114
c00117cd:	e8 b6 df ff ff       	call   c000f788 <malloc>
c00117d2:	83 c4 0c             	add    esp,0xc
c00117d5:	89 c6                	mov    esi,eax
c00117d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117df:	50                   	push   eax
c00117e0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00117e3:	52                   	push   edx
c00117e4:	56                   	push   esi
c00117e5:	e8 7e 6e ff ff       	call   c0008668 <Directory::Directory(char const*, Process*)>
c00117ea:	83 c4 10             	add    esp,0x10
c00117ed:	85 f6                	test   esi,esi
c00117ef:	74 31                	je     c0011822 <SysOpenDir(regs*)+0x6d>
c00117f1:	83 ec 0c             	sub    esp,0xc
c00117f4:	56                   	push   esi
c00117f5:	e8 36 6f ff ff       	call   c0008730 <Directory::open()>
c00117fa:	83 c4 10             	add    esp,0x10
c00117fd:	85 c0                	test   eax,eax
c00117ff:	75 21                	jne    c0011822 <SysOpenDir(regs*)+0x6d>
c0011801:	83 ec 0c             	sub    esp,0xc
c0011804:	56                   	push   esi
c0011805:	e8 76 15 00 00       	call   c0012d80 <UnixFile::getFileDescriptor()>
c001180a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	89 02                	mov    DWORD PTR [edx],eax
c0011812:	c1 f8 1f             	sar    eax,0x1f
c0011815:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011818:	83 c4 04             	add    esp,0x4
c001181b:	31 c0                	xor    eax,eax
c001181d:	5b                   	pop    ebx
c001181e:	31 d2                	xor    edx,edx
c0011820:	5e                   	pop    esi
c0011821:	c3                   	ret    
c0011822:	83 c4 04             	add    esp,0x4
c0011825:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001182a:	5b                   	pop    ebx
c001182b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011830:	5e                   	pop    esi
c0011831:	c3                   	ret    

c0011832 <SysMakeDir(regs*)>:
c0011832:	56                   	push   esi
c0011833:	53                   	push   ebx
c0011834:	83 ec 10             	sub    esp,0x10
c0011837:	68 14 01 00 00       	push   0x114
c001183c:	e8 47 df ff ff       	call   c000f788 <malloc>
c0011841:	83 c4 0c             	add    esp,0xc
c0011844:	89 c3                	mov    ebx,eax
c0011846:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001184b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001184e:	50                   	push   eax
c001184f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011853:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011856:	52                   	push   edx
c0011857:	53                   	push   ebx
c0011858:	e8 0b 6e ff ff       	call   c0008668 <Directory::Directory(char const*, Process*)>
c001185d:	83 c4 10             	add    esp,0x10
c0011860:	85 db                	test   ebx,ebx
c0011862:	74 2c                	je     c0011890 <SysMakeDir(regs*)+0x5e>
c0011864:	83 ec 0c             	sub    esp,0xc
c0011867:	53                   	push   ebx
c0011868:	e8 a3 70 ff ff       	call   c0008910 <Directory::create()>
c001186d:	89 c6                	mov    esi,eax
c001186f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011871:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011874:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011877:	83 c4 10             	add    esp,0x10
c001187a:	31 c0                	xor    eax,eax
c001187c:	85 f6                	test   esi,esi
c001187e:	0f 95 c0             	setne  al
c0011881:	31 d2                	xor    edx,edx
c0011883:	f7 d8                	neg    eax
c0011885:	83 d2 00             	adc    edx,0x0
c0011888:	83 c4 04             	add    esp,0x4
c001188b:	5b                   	pop    ebx
c001188c:	f7 da                	neg    edx
c001188e:	5e                   	pop    esi
c001188f:	c3                   	ret    
c0011890:	83 c4 04             	add    esp,0x4
c0011893:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011898:	5b                   	pop    ebx
c0011899:	ba ff ff ff ff       	mov    edx,0xffffffff
c001189e:	5e                   	pop    esi
c001189f:	c3                   	ret    

c00118a0 <SysCloseDir(regs*)>:
c00118a0:	53                   	push   ebx
c00118a1:	83 ec 08             	sub    esp,0x8
c00118a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118ab:	8d 50 fd             	lea    edx,[eax-0x3]
c00118ae:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00118b4:	77 2f                	ja     c00118e5 <SysCloseDir(regs*)+0x45>
c00118b6:	83 ec 0c             	sub    esp,0xc
c00118b9:	50                   	push   eax
c00118ba:	e8 be 17 00 00       	call   c001307d <KeGetFileFromDescriptor(int)>
c00118bf:	83 c4 10             	add    esp,0x10
c00118c2:	85 c0                	test   eax,eax
c00118c4:	89 c3                	mov    ebx,eax
c00118c6:	74 1d                	je     c00118e5 <SysCloseDir(regs*)+0x45>
c00118c8:	83 ec 0c             	sub    esp,0xc
c00118cb:	50                   	push   eax
c00118cc:	e8 bb 6e ff ff       	call   c000878c <Directory::close()>
c00118d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118d9:	83 c4 10             	add    esp,0x10
c00118dc:	31 c0                	xor    eax,eax
c00118de:	83 c4 08             	add    esp,0x8
c00118e1:	31 d2                	xor    edx,edx
c00118e3:	5b                   	pop    ebx
c00118e4:	c3                   	ret    
c00118e5:	83 c4 08             	add    esp,0x8
c00118e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118ed:	5b                   	pop    ebx
c00118ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118f3:	c3                   	ret    

c00118f4 <SysWait(regs*)>:
c00118f4:	83 ec 10             	sub    esp,0x10
c00118f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118fb:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00118fe:	52                   	push   edx
c00118ff:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011902:	51                   	push   ecx
c0011903:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011906:	50                   	push   eax
c0011907:	e8 14 55 00 00       	call   c0016e20 <waitTask(int, int*, int)>
c001190c:	83 c4 1c             	add    esp,0x1c
c001190f:	89 c2                	mov    edx,eax
c0011911:	c1 fa 1f             	sar    edx,0x1f
c0011914:	c3                   	ret    

c0011915 <SysNotImpl(regs*)>:
c0011915:	83 ec 18             	sub    esp,0x18
c0011918:	68 6b 44 02 c0       	push   0xc002446b
c001191d:	e8 c2 e2 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0011922:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011927:	ba ff ff ff ff       	mov    edx,0xffffffff
c001192c:	83 c4 1c             	add    esp,0x1c
c001192f:	c3                   	ret    

c0011930 <SysPanic(regs*)>:
c0011930:	83 ec 18             	sub    esp,0x18
c0011933:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011937:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001193a:	50                   	push   eax
c001193b:	e8 a4 e2 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0011940:	b8 01 00 00 00       	mov    eax,0x1
c0011945:	31 d2                	xor    edx,edx
c0011947:	83 c4 1c             	add    esp,0x1c
c001194a:	c3                   	ret    

c001194b <SysRmdir(regs*)>:
c001194b:	56                   	push   esi
c001194c:	53                   	push   ebx
c001194d:	83 ec 10             	sub    esp,0x10
c0011950:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011954:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011957:	68 14 01 00 00       	push   0x114
c001195c:	e8 27 de ff ff       	call   c000f788 <malloc>
c0011961:	6a 00                	push   0x0
c0011963:	89 c3                	mov    ebx,eax
c0011965:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001196a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001196d:	50                   	push   eax
c001196e:	56                   	push   esi
c001196f:	53                   	push   ebx
c0011970:	e8 15 67 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c0011975:	83 c4 14             	add    esp,0x14
c0011978:	53                   	push   ebx
c0011979:	e8 f6 69 ff ff       	call   c0008374 <File::unlink()>
c001197e:	83 c4 10             	add    esp,0x10
c0011981:	85 db                	test   ebx,ebx
c0011983:	89 c6                	mov    esi,eax
c0011985:	74 0c                	je     c0011993 <SysRmdir(regs*)+0x48>
c0011987:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011989:	83 ec 0c             	sub    esp,0xc
c001198c:	53                   	push   ebx
c001198d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011990:	83 c4 10             	add    esp,0x10
c0011993:	31 c0                	xor    eax,eax
c0011995:	85 f6                	test   esi,esi
c0011997:	0f 95 c0             	setne  al
c001199a:	31 d2                	xor    edx,edx
c001199c:	f7 d8                	neg    eax
c001199e:	83 d2 00             	adc    edx,0x0
c00119a1:	83 c4 04             	add    esp,0x4
c00119a4:	5b                   	pop    ebx
c00119a5:	f7 da                	neg    edx
c00119a7:	5e                   	pop    esi
c00119a8:	c3                   	ret    

c00119a9 <SysUnlink(regs*)>:
c00119a9:	56                   	push   esi
c00119aa:	53                   	push   ebx
c00119ab:	83 ec 10             	sub    esp,0x10
c00119ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119b2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00119b5:	68 14 01 00 00       	push   0x114
c00119ba:	e8 c9 dd ff ff       	call   c000f788 <malloc>
c00119bf:	6a 00                	push   0x0
c00119c1:	89 c3                	mov    ebx,eax
c00119c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119cb:	50                   	push   eax
c00119cc:	56                   	push   esi
c00119cd:	53                   	push   ebx
c00119ce:	e8 b7 66 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c00119d3:	83 c4 14             	add    esp,0x14
c00119d6:	53                   	push   ebx
c00119d7:	e8 98 69 ff ff       	call   c0008374 <File::unlink()>
c00119dc:	83 c4 10             	add    esp,0x10
c00119df:	85 db                	test   ebx,ebx
c00119e1:	89 c6                	mov    esi,eax
c00119e3:	74 0c                	je     c00119f1 <SysUnlink(regs*)+0x48>
c00119e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119e7:	83 ec 0c             	sub    esp,0xc
c00119ea:	53                   	push   ebx
c00119eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	31 c0                	xor    eax,eax
c00119f3:	85 f6                	test   esi,esi
c00119f5:	0f 95 c0             	setne  al
c00119f8:	31 d2                	xor    edx,edx
c00119fa:	f7 d8                	neg    eax
c00119fc:	83 d2 00             	adc    edx,0x0
c00119ff:	83 c4 04             	add    esp,0x4
c0011a02:	5b                   	pop    ebx
c0011a03:	f7 da                	neg    edx
c0011a05:	5e                   	pop    esi
c0011a06:	c3                   	ret    

c0011a07 <SysGetArgv(regs*)>:
c0011a07:	83 ec 0c             	sub    esp,0xc
c0011a0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a0e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a11:	85 c0                	test   eax,eax
c0011a13:	78 2c                	js     c0011a41 <SysGetArgv(regs*)+0x3a>
c0011a15:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a1b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011a1e:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011a24:	7d 1b                	jge    c0011a41 <SysGetArgv(regs*)+0x3a>
c0011a26:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011a2d:	85 c0                	test   eax,eax
c0011a2f:	74 18                	je     c0011a49 <SysGetArgv(regs*)+0x42>
c0011a31:	83 ec 08             	sub    esp,0x8
c0011a34:	50                   	push   eax
c0011a35:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a38:	50                   	push   eax
c0011a39:	e8 12 ec fe ff       	call   c0000650 <strcpy>
c0011a3e:	83 c4 10             	add    esp,0x10
c0011a41:	31 c0                	xor    eax,eax
c0011a43:	31 d2                	xor    edx,edx
c0011a45:	83 c4 0c             	add    esp,0xc
c0011a48:	c3                   	ret    
c0011a49:	b8 01 00 00 00       	mov    eax,0x1
c0011a4e:	31 d2                	xor    edx,edx
c0011a50:	83 c4 0c             	add    esp,0xc
c0011a53:	c3                   	ret    

c0011a54 <SysUSleep(regs*)>:
c0011a54:	83 ec 1c             	sub    esp,0x1c
c0011a57:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a5b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011a5e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011a61:	6a 00                	push   0x0
c0011a63:	6a 64                	push   0x64
c0011a65:	52                   	push   edx
c0011a66:	50                   	push   eax
c0011a67:	e8 08 ff 00 00       	call   c0021974 <__udivdi3>
c0011a6c:	83 c4 18             	add    esp,0x18
c0011a6f:	52                   	push   edx
c0011a70:	50                   	push   eax
c0011a71:	e8 a2 54 00 00       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0011a76:	31 c0                	xor    eax,eax
c0011a78:	31 d2                	xor    edx,edx
c0011a7a:	83 c4 1c             	add    esp,0x1c
c0011a7d:	c3                   	ret    

c0011a7e <SysSpawn(regs*)>:
c0011a7e:	56                   	push   esi
c0011a7f:	53                   	push   ebx
c0011a80:	83 ec 04             	sub    esp,0x4
c0011a83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a87:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011a8a:	85 f6                	test   esi,esi
c0011a8c:	75 0a                	jne    c0011a98 <SysSpawn(regs*)+0x1a>
c0011a8e:	83 c4 04             	add    esp,0x4
c0011a91:	31 c0                	xor    eax,eax
c0011a93:	5b                   	pop    ebx
c0011a94:	31 d2                	xor    edx,edx
c0011a96:	5e                   	pop    esi
c0011a97:	c3                   	ret    
c0011a98:	83 ec 0c             	sub    esp,0xc
c0011a9b:	68 c4 07 00 00       	push   0x7c4
c0011aa0:	e8 e3 dc ff ff       	call   c000f788 <malloc>
c0011aa5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011aa8:	83 c4 10             	add    esp,0x10
c0011aab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011aae:	89 c6                	mov    esi,eax
c0011ab0:	31 c0                	xor    eax,eax
c0011ab2:	85 c9                	test   ecx,ecx
c0011ab4:	74 08                	je     c0011abe <SysSpawn(regs*)+0x40>
c0011ab6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011abb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011abe:	52                   	push   edx
c0011abf:	50                   	push   eax
c0011ac0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ac3:	50                   	push   eax
c0011ac4:	56                   	push   esi
c0011ac5:	e8 3a 4b 00 00       	call   c0016604 <Process::Process(char const*, Process*, char**)>
c0011aca:	83 c4 10             	add    esp,0x10
c0011acd:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011ad4:	75 b8                	jne    c0011a8e <SysSpawn(regs*)+0x10>
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	56                   	push   esi
c0011ada:	e8 dd 50 00 00       	call   c0016bbc <Process::createUserThread()>
c0011adf:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ae1:	83 c4 10             	add    esp,0x10
c0011ae4:	83 c4 04             	add    esp,0x4
c0011ae7:	5b                   	pop    ebx
c0011ae8:	89 c2                	mov    edx,eax
c0011aea:	c1 fa 1f             	sar    edx,0x1f
c0011aed:	5e                   	pop    esi
c0011aee:	c3                   	ret    

c0011aef <SysGetEnv(regs*)>:
c0011aef:	57                   	push   edi
c0011af0:	56                   	push   esi
c0011af1:	53                   	push   ebx
c0011af2:	83 ec 1c             	sub    esp,0x1c
c0011af5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011afa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011afe:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011b01:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b04:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b07:	51                   	push   ecx
c0011b08:	e8 6e cb ff ff       	call   c000e67b <KeGetProcessTotalEnvCount(Process*)>
c0011b0d:	83 c4 10             	add    esp,0x10
c0011b10:	39 c7                	cmp    edi,eax
c0011b12:	7c 12                	jl     c0011b26 <SysGetEnv(regs*)+0x37>
c0011b14:	31 c0                	xor    eax,eax
c0011b16:	31 d2                	xor    edx,edx
c0011b18:	85 f6                	test   esi,esi
c0011b1a:	74 03                	je     c0011b1f <SysGetEnv(regs*)+0x30>
c0011b1c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b1f:	83 c4 10             	add    esp,0x10
c0011b22:	5b                   	pop    ebx
c0011b23:	5e                   	pop    esi
c0011b24:	5f                   	pop    edi
c0011b25:	c3                   	ret    
c0011b26:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b2a:	83 ec 04             	sub    esp,0x4
c0011b2d:	57                   	push   edi
c0011b2e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b34:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011b37:	57                   	push   edi
c0011b38:	50                   	push   eax
c0011b39:	e8 5d cb ff ff       	call   c000e69b <KeGetProcessEnvPair(Process*, int)>
c0011b3e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b49:	83 c4 0c             	add    esp,0xc
c0011b4c:	85 d2                	test   edx,edx
c0011b4e:	75 23                	jne    c0011b73 <SysGetEnv(regs*)+0x84>
c0011b50:	83 ec 0c             	sub    esp,0xc
c0011b53:	50                   	push   eax
c0011b54:	e8 27 ea fe ff       	call   c0000580 <strlen>
c0011b59:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b5c:	89 c3                	mov    ebx,eax
c0011b5e:	e8 1d ea fe ff       	call   c0000580 <strlen>
c0011b63:	83 c4 10             	add    esp,0x10
c0011b66:	31 d2                	xor    edx,edx
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011b6f:	5b                   	pop    ebx
c0011b70:	5e                   	pop    esi
c0011b71:	5f                   	pop    edi
c0011b72:	c3                   	ret    
c0011b73:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b76:	83 ec 08             	sub    esp,0x8
c0011b79:	50                   	push   eax
c0011b7a:	56                   	push   esi
c0011b7b:	e8 d0 ea fe ff       	call   c0000650 <strcpy>
c0011b80:	58                   	pop    eax
c0011b81:	5a                   	pop    edx
c0011b82:	68 85 44 02 c0       	push   0xc0024485
c0011b87:	56                   	push   esi
c0011b88:	e8 e3 ec fe ff       	call   c0000870 <strcat>
c0011b8d:	59                   	pop    ecx
c0011b8e:	5b                   	pop    ebx
c0011b8f:	57                   	push   edi
c0011b90:	56                   	push   esi
c0011b91:	e8 da ec fe ff       	call   c0000870 <strcat>
c0011b96:	83 c4 10             	add    esp,0x10
c0011b99:	31 c0                	xor    eax,eax
c0011b9b:	83 c4 10             	add    esp,0x10
c0011b9e:	31 d2                	xor    edx,edx
c0011ba0:	5b                   	pop    ebx
c0011ba1:	5e                   	pop    esi
c0011ba2:	5f                   	pop    edi
c0011ba3:	c3                   	ret    

c0011ba4 <SysSetFatAttrib(regs*)>:
c0011ba4:	57                   	push   edi
c0011ba5:	56                   	push   esi
c0011ba6:	53                   	push   ebx
c0011ba7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011bab:	83 ec 0c             	sub    esp,0xc
c0011bae:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011bb1:	68 14 01 00 00       	push   0x114
c0011bb6:	e8 cd db ff ff       	call   c000f788 <malloc>
c0011bbb:	83 c4 0c             	add    esp,0xc
c0011bbe:	89 c3                	mov    ebx,eax
c0011bc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bc5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bc8:	50                   	push   eax
c0011bc9:	57                   	push   edi
c0011bca:	53                   	push   ebx
c0011bcb:	e8 b8 65 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0011bd0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011bd3:	83 c4 0c             	add    esp,0xc
c0011bd6:	0f b6 d4             	movzx  edx,ah
c0011bd9:	0f b6 c0             	movzx  eax,al
c0011bdc:	52                   	push   edx
c0011bdd:	50                   	push   eax
c0011bde:	53                   	push   ebx
c0011bdf:	e8 2a 68 ff ff       	call   c000840e <File::chfatattr(unsigned char, unsigned char)>
c0011be4:	83 c4 10             	add    esp,0x10
c0011be7:	85 db                	test   ebx,ebx
c0011be9:	89 c6                	mov    esi,eax
c0011beb:	74 0c                	je     c0011bf9 <SysSetFatAttrib(regs*)+0x55>
c0011bed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011bef:	83 ec 0c             	sub    esp,0xc
c0011bf2:	53                   	push   ebx
c0011bf3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bf6:	83 c4 10             	add    esp,0x10
c0011bf9:	5b                   	pop    ebx
c0011bfa:	31 c0                	xor    eax,eax
c0011bfc:	85 f6                	test   esi,esi
c0011bfe:	0f 95 c0             	setne  al
c0011c01:	31 d2                	xor    edx,edx
c0011c03:	5e                   	pop    esi
c0011c04:	f7 d8                	neg    eax
c0011c06:	83 d2 00             	adc    edx,0x0
c0011c09:	f7 da                	neg    edx
c0011c0b:	5f                   	pop    edi
c0011c0c:	c3                   	ret    

c0011c0d <SysShutdown(regs*)>:
c0011c0d:	83 ec 1c             	sub    esp,0x1c
c0011c10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c14:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011c17:	85 c9                	test   ecx,ecx
c0011c19:	74 18                	je     c0011c33 <SysShutdown(regs*)+0x26>
c0011c1b:	83 f9 01             	cmp    ecx,0x1
c0011c1e:	74 26                	je     c0011c46 <SysShutdown(regs*)+0x39>
c0011c20:	83 f9 02             	cmp    ecx,0x2
c0011c23:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c28:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c2d:	74 24                	je     c0011c53 <SysShutdown(regs*)+0x46>
c0011c2f:	83 c4 1c             	add    esp,0x1c
c0011c32:	c3                   	ret    
c0011c33:	e8 a8 e9 ff ff       	call   c00105e0 <KeShutdown()>
c0011c38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c3d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c42:	83 c4 1c             	add    esp,0x1c
c0011c45:	c3                   	ret    
c0011c46:	e8 cb e9 ff ff       	call   c0010616 <KeSleep()>
c0011c4b:	31 c0                	xor    eax,eax
c0011c4d:	31 d2                	xor    edx,edx
c0011c4f:	83 c4 1c             	add    esp,0x1c
c0011c52:	c3                   	ret    
c0011c53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011c5b:	e8 e6 e9 ff ff       	call   c0010646 <KeRestart()>
c0011c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c68:	eb c5                	jmp    c0011c2f <SysShutdown(regs*)+0x22>

c0011c6a <SysPipe(regs*)>:
c0011c6a:	57                   	push   edi
c0011c6b:	56                   	push   esi
c0011c6c:	53                   	push   ebx
c0011c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c71:	83 ec 0c             	sub    esp,0xc
c0011c74:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c77:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c7a:	6a 20                	push   0x20
c0011c7c:	e8 07 db ff ff       	call   c000f788 <malloc>
c0011c81:	89 c3                	mov    ebx,eax
c0011c83:	58                   	pop    eax
c0011c84:	5a                   	pop    edx
c0011c85:	68 00 50 00 00       	push   0x5000
c0011c8a:	53                   	push   ebx
c0011c8b:	e8 d0 e7 ff ff       	call   c0010460 <Pipe::Pipe(int)>
c0011c90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c93:	e8 e8 10 00 00       	call   c0012d80 <UnixFile::getFileDescriptor()>
c0011c98:	89 07                	mov    DWORD PTR [edi],eax
c0011c9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c9d:	e8 de 10 00 00       	call   c0012d80 <UnixFile::getFileDescriptor()>
c0011ca2:	83 c4 10             	add    esp,0x10
c0011ca5:	31 d2                	xor    edx,edx
c0011ca7:	89 06                	mov    DWORD PTR [esi],eax
c0011ca9:	31 c0                	xor    eax,eax
c0011cab:	5b                   	pop    ebx
c0011cac:	5e                   	pop    esi
c0011cad:	5f                   	pop    edi
c0011cae:	c3                   	ret    

c0011caf <SysGetUnixTime(regs*)>:
c0011caf:	53                   	push   ebx
c0011cb0:	83 ec 10             	sub    esp,0x10
c0011cb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011cb7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011cba:	52                   	push   edx
c0011cbb:	68 87 44 02 c0       	push   0xc0024487
c0011cc0:	e8 a1 52 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011cc5:	83 c4 10             	add    esp,0x10
c0011cc8:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0011ccc:	74 3b                	je     c0011d09 <SysGetUnixTime(regs*)+0x5a>
c0011cce:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0011cd3:	83 ec 0c             	sub    esp,0xc
c0011cd6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011cdc:	50                   	push   eax
c0011cdd:	e8 58 74 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0011ce2:	83 c4 0c             	add    esp,0xc
c0011ce5:	52                   	push   edx
c0011ce6:	50                   	push   eax
c0011ce7:	68 9b 44 02 c0       	push   0xc002449b
c0011cec:	e8 75 52 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011cf1:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0011cf6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011cfc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d00:	83 c4 18             	add    esp,0x18
c0011d03:	5b                   	pop    ebx
c0011d04:	e9 31 74 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c0011d09:	6b 0d 54 bb 02 c0 64 	imul   ecx,DWORD PTR ds:0xc002bb54,0x64
c0011d10:	b8 64 00 00 00       	mov    eax,0x64
c0011d15:	f7 25 50 bb 02 c0    	mul    DWORD PTR ds:0xc002bb50
c0011d1b:	83 c4 08             	add    esp,0x8
c0011d1e:	5b                   	pop    ebx
c0011d1f:	01 ca                	add    edx,ecx
c0011d21:	c3                   	ret    

c0011d22 <string_ends_with(char const*, char const*)>:
c0011d22:	57                   	push   edi
c0011d23:	56                   	push   esi
c0011d24:	53                   	push   ebx
c0011d25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d29:	83 ec 0c             	sub    esp,0xc
c0011d2c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011d30:	53                   	push   ebx
c0011d31:	e8 4a e8 fe ff       	call   c0000580 <strlen>
c0011d36:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d39:	89 c6                	mov    esi,eax
c0011d3b:	e8 40 e8 fe ff       	call   c0000580 <strlen>
c0011d40:	83 c4 10             	add    esp,0x10
c0011d43:	31 d2                	xor    edx,edx
c0011d45:	39 c6                	cmp    esi,eax
c0011d47:	7d 06                	jge    c0011d4f <string_ends_with(char const*, char const*)+0x2d>
c0011d49:	5b                   	pop    ebx
c0011d4a:	89 d0                	mov    eax,edx
c0011d4c:	5e                   	pop    esi
c0011d4d:	5f                   	pop    edi
c0011d4e:	c3                   	ret    
c0011d4f:	83 ec 08             	sub    esp,0x8
c0011d52:	29 c6                	sub    esi,eax
c0011d54:	57                   	push   edi
c0011d55:	01 f3                	add    ebx,esi
c0011d57:	53                   	push   ebx
c0011d58:	e8 23 ea fe ff       	call   c0000780 <strcmp>
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	31 d2                	xor    edx,edx
c0011d62:	5b                   	pop    ebx
c0011d63:	5e                   	pop    esi
c0011d64:	85 c0                	test   eax,eax
c0011d66:	5f                   	pop    edi
c0011d67:	0f 94 c2             	sete   dl
c0011d6a:	89 d0                	mov    eax,edx
c0011d6c:	c3                   	ret    

c0011d6d <SysOpen(regs*)>:
c0011d6d:	56                   	push   esi
c0011d6e:	53                   	push   ebx
c0011d6f:	81 ec 04 01 00 00    	sub    esp,0x104
c0011d75:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011d7c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d7f:	85 c0                	test   eax,eax
c0011d81:	0f 84 c4 01 00 00    	je     c0011f4b <SysOpen(regs*)+0x1de>
c0011d87:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d8a:	85 c0                	test   eax,eax
c0011d8c:	0f 84 b9 01 00 00    	je     c0011f4b <SysOpen(regs*)+0x1de>
c0011d92:	6a 00                	push   0x0
c0011d94:	68 a2 44 02 c0       	push   0xc00244a2
c0011d99:	50                   	push   eax
c0011d9a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011d9e:	56                   	push   esi
c0011d9f:	e8 b8 60 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011da4:	89 34 24             	mov    DWORD PTR [esp],esi
c0011da7:	e8 d4 e7 fe ff       	call   c0000580 <strlen>
c0011dac:	83 c4 10             	add    esp,0x10
c0011daf:	83 e8 01             	sub    eax,0x1
c0011db2:	74 29                	je     c0011ddd <SysOpen(regs*)+0x70>
c0011db4:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011db8:	83 fa 2e             	cmp    edx,0x2e
c0011dbb:	74 1c                	je     c0011dd9 <SysOpen(regs*)+0x6c>
c0011dbd:	83 fa 3a             	cmp    edx,0x3a
c0011dc0:	74 17                	je     c0011dd9 <SysOpen(regs*)+0x6c>
c0011dc2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011dc6:	83 e8 01             	sub    eax,0x1
c0011dc9:	74 12                	je     c0011ddd <SysOpen(regs*)+0x70>
c0011dcb:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011dcf:	83 fa 3a             	cmp    edx,0x3a
c0011dd2:	74 05                	je     c0011dd9 <SysOpen(regs*)+0x6c>
c0011dd4:	83 fa 2e             	cmp    edx,0x2e
c0011dd7:	75 e9                	jne    c0011dc2 <SysOpen(regs*)+0x55>
c0011dd9:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011ddd:	83 ec 08             	sub    esp,0x8
c0011de0:	68 a6 44 02 c0       	push   0xc00244a6
c0011de5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011de8:	50                   	push   eax
c0011de9:	e8 34 ff ff ff       	call   c0011d22 <string_ends_with(char const*, char const*)>
c0011dee:	83 c4 10             	add    esp,0x10
c0011df1:	85 c0                	test   eax,eax
c0011df3:	74 1d                	je     c0011e12 <SysOpen(regs*)+0xa5>
c0011df5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011df8:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011dfe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e05:	81 c4 04 01 00 00    	add    esp,0x104
c0011e0b:	31 c0                	xor    eax,eax
c0011e0d:	5b                   	pop    ebx
c0011e0e:	31 d2                	xor    edx,edx
c0011e10:	5e                   	pop    esi
c0011e11:	c3                   	ret    
c0011e12:	83 ec 08             	sub    esp,0x8
c0011e15:	68 ab 44 02 c0       	push   0xc00244ab
c0011e1a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e1d:	50                   	push   eax
c0011e1e:	e8 ff fe ff ff       	call   c0011d22 <string_ends_with(char const*, char const*)>
c0011e23:	83 c4 10             	add    esp,0x10
c0011e26:	85 c0                	test   eax,eax
c0011e28:	75 cb                	jne    c0011df5 <SysOpen(regs*)+0x88>
c0011e2a:	83 ec 08             	sub    esp,0x8
c0011e2d:	68 a7 44 02 c0       	push   0xc00244a7
c0011e32:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e35:	50                   	push   eax
c0011e36:	e8 45 e9 fe ff       	call   c0000780 <strcmp>
c0011e3b:	83 c4 10             	add    esp,0x10
c0011e3e:	85 c0                	test   eax,eax
c0011e40:	74 b3                	je     c0011df5 <SysOpen(regs*)+0x88>
c0011e42:	83 ec 08             	sub    esp,0x8
c0011e45:	68 a6 44 02 c0       	push   0xc00244a6
c0011e4a:	56                   	push   esi
c0011e4b:	e8 d2 fe ff ff       	call   c0011d22 <string_ends_with(char const*, char const*)>
c0011e50:	83 c4 10             	add    esp,0x10
c0011e53:	85 c0                	test   eax,eax
c0011e55:	75 9e                	jne    c0011df5 <SysOpen(regs*)+0x88>
c0011e57:	83 ec 08             	sub    esp,0x8
c0011e5a:	68 b0 44 02 c0       	push   0xc00244b0
c0011e5f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e62:	50                   	push   eax
c0011e63:	e8 ba fe ff ff       	call   c0011d22 <string_ends_with(char const*, char const*)>
c0011e68:	83 c4 10             	add    esp,0x10
c0011e6b:	85 c0                	test   eax,eax
c0011e6d:	0f 85 eb 00 00 00    	jne    c0011f5e <SysOpen(regs*)+0x1f1>
c0011e73:	83 ec 08             	sub    esp,0x8
c0011e76:	68 b5 44 02 c0       	push   0xc00244b5
c0011e7b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e7e:	50                   	push   eax
c0011e7f:	e8 9e fe ff ff       	call   c0011d22 <string_ends_with(char const*, char const*)>
c0011e84:	83 c4 10             	add    esp,0x10
c0011e87:	85 c0                	test   eax,eax
c0011e89:	0f 85 cf 00 00 00    	jne    c0011f5e <SysOpen(regs*)+0x1f1>
c0011e8f:	83 ec 08             	sub    esp,0x8
c0011e92:	68 b1 44 02 c0       	push   0xc00244b1
c0011e97:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e9a:	51                   	push   ecx
c0011e9b:	e8 e0 e8 fe ff       	call   c0000780 <strcmp>
c0011ea0:	83 c4 10             	add    esp,0x10
c0011ea3:	85 c0                	test   eax,eax
c0011ea5:	0f 84 b3 00 00 00    	je     c0011f5e <SysOpen(regs*)+0x1f1>
c0011eab:	83 ec 08             	sub    esp,0x8
c0011eae:	68 b0 44 02 c0       	push   0xc00244b0
c0011eb3:	56                   	push   esi
c0011eb4:	e8 69 fe ff ff       	call   c0011d22 <string_ends_with(char const*, char const*)>
c0011eb9:	83 c4 10             	add    esp,0x10
c0011ebc:	85 c0                	test   eax,eax
c0011ebe:	0f 85 9a 00 00 00    	jne    c0011f5e <SysOpen(regs*)+0x1f1>
c0011ec4:	83 ec 0c             	sub    esp,0xc
c0011ec7:	68 14 01 00 00       	push   0x114
c0011ecc:	e8 b7 d8 ff ff       	call   c000f788 <malloc>
c0011ed1:	83 c4 0c             	add    esp,0xc
c0011ed4:	89 c6                	mov    esi,eax
c0011ed6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011edb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ede:	50                   	push   eax
c0011edf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011ee2:	52                   	push   edx
c0011ee3:	56                   	push   esi
c0011ee4:	e8 9f 62 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0011ee9:	83 c4 10             	add    esp,0x10
c0011eec:	85 f6                	test   esi,esi
c0011eee:	74 5b                	je     c0011f4b <SysOpen(regs*)+0x1de>
c0011ef0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ef3:	0f b6 c2             	movzx  eax,dl
c0011ef6:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011ef9:	89 d0                	mov    eax,edx
c0011efb:	83 e0 01             	and    eax,0x1
c0011efe:	f6 c2 02             	test   dl,0x2
c0011f01:	74 03                	je     c0011f06 <SysOpen(regs*)+0x199>
c0011f03:	83 c8 02             	or     eax,0x2
c0011f06:	f6 c2 04             	test   dl,0x4
c0011f09:	74 03                	je     c0011f0e <SysOpen(regs*)+0x1a1>
c0011f0b:	83 c8 04             	or     eax,0x4
c0011f0e:	f6 c2 08             	test   dl,0x8
c0011f11:	74 03                	je     c0011f16 <SysOpen(regs*)+0x1a9>
c0011f13:	83 c8 0a             	or     eax,0xa
c0011f16:	80 e2 10             	and    dl,0x10
c0011f19:	74 03                	je     c0011f1e <SysOpen(regs*)+0x1b1>
c0011f1b:	83 c8 12             	or     eax,0x12
c0011f1e:	83 ec 08             	sub    esp,0x8
c0011f21:	50                   	push   eax
c0011f22:	56                   	push   esi
c0011f23:	e8 7e 62 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0011f28:	83 c4 10             	add    esp,0x10
c0011f2b:	85 c0                	test   eax,eax
c0011f2d:	75 1c                	jne    c0011f4b <SysOpen(regs*)+0x1de>
c0011f2f:	83 ec 0c             	sub    esp,0xc
c0011f32:	56                   	push   esi
c0011f33:	e8 48 0e 00 00       	call   c0012d80 <UnixFile::getFileDescriptor()>
c0011f38:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011f3b:	83 c4 10             	add    esp,0x10
c0011f3e:	89 02                	mov    DWORD PTR [edx],eax
c0011f40:	c1 f8 1f             	sar    eax,0x1f
c0011f43:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011f46:	e9 ba fe ff ff       	jmp    c0011e05 <SysOpen(regs*)+0x98>
c0011f4b:	81 c4 04 01 00 00    	add    esp,0x104
c0011f51:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f56:	5b                   	pop    ebx
c0011f57:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f5c:	5e                   	pop    esi
c0011f5d:	c3                   	ret    
c0011f5e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f61:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011f67:	e9 92 fe ff ff       	jmp    c0011dfe <SysOpen(regs*)+0x91>

c0011f6c <KeSystemCall(regs*, void*)>:
c0011f6c:	53                   	push   ebx
c0011f6d:	83 ec 08             	sub    esp,0x8
c0011f70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f74:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011f77:	83 f8 48             	cmp    eax,0x48
c0011f7a:	77 16                	ja     c0011f92 <KeSystemCall(regs*, void*)+0x26>
c0011f7c:	8b 14 85 a0 67 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9860]
c0011f83:	85 d2                	test   edx,edx
c0011f85:	74 0b                	je     c0011f92 <KeSystemCall(regs*, void*)+0x26>
c0011f87:	83 ec 0c             	sub    esp,0xc
c0011f8a:	53                   	push   ebx
c0011f8b:	ff d2                	call   edx
c0011f8d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011f90:	eb 0d                	jmp    c0011f9f <KeSystemCall(regs*, void*)+0x33>
c0011f92:	52                   	push   edx
c0011f93:	52                   	push   edx
c0011f94:	50                   	push   eax
c0011f95:	68 ba 44 02 c0       	push   0xc00244ba
c0011f9a:	e8 c7 4f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011f9f:	83 c4 10             	add    esp,0x10
c0011fa2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011fa7:	83 c4 08             	add    esp,0x8
c0011faa:	31 d2                	xor    edx,edx
c0011fac:	5b                   	pop    ebx
c0011fad:	c3                   	ret    

c0011fae <VgaText::isAtty()>:
c0011fae:	b0 01                	mov    al,0x1
c0011fb0:	c3                   	ret    
c0011fb1:	90                   	nop

c0011fb2 <VgaText::~VgaText()>:
c0011fb2:	83 ec 0c             	sub    esp,0xc
c0011fb5:	ba 34 45 02 c0       	mov    edx,0xc0024534
c0011fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fbe:	89 10                	mov    DWORD PTR [eax],edx
c0011fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fc4:	83 ec 0c             	sub    esp,0xc
c0011fc7:	50                   	push   eax
c0011fc8:	e8 a1 0f 00 00       	call   c0012f6e <UnixFile::~UnixFile()>
c0011fcd:	83 c4 10             	add    esp,0x10
c0011fd0:	90                   	nop
c0011fd1:	83 c4 0c             	add    esp,0xc
c0011fd4:	c3                   	ret    
c0011fd5:	90                   	nop

c0011fd6 <VgaText::~VgaText()>:
c0011fd6:	83 ec 0c             	sub    esp,0xc
c0011fd9:	83 ec 0c             	sub    esp,0xc
c0011fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fe0:	e8 cd ff ff ff       	call   c0011fb2 <VgaText::~VgaText()>
c0011fe5:	83 c4 10             	add    esp,0x10
c0011fe8:	83 ec 08             	sub    esp,0x8
c0011feb:	68 84 01 00 00       	push   0x184
c0011ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ff4:	e8 c3 b2 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0011ff9:	83 c4 10             	add    esp,0x10
c0011ffc:	83 c4 0c             	add    esp,0xc
c0011fff:	c3                   	ret    

c0012000 <VgaText::read(unsigned long long, void*, int*)>:
c0012000:	83 ec 10             	sub    esp,0x10
c0012003:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012007:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001200b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001200f:	e8 35 85 ff ff       	call   c000a549 <readKeyboard(VgaText*, char*, unsigned long)>
c0012014:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012018:	89 02                	mov    DWORD PTR [edx],eax
c001201a:	31 c0                	xor    eax,eax
c001201c:	83 c4 1c             	add    esp,0x1c
c001201f:	c3                   	ret    

c0012020 <setTerminalScrollLock(bool)>:
c0012020:	c3                   	ret    

c0012021 <doTerminalCycle()>:
c0012021:	c3                   	ret    

c0012022 <addToTerminalCycle(VgaText*)>:
c0012022:	c3                   	ret    

c0012023 <scrollTerminalScrollLock(int)>:
c0012023:	c3                   	ret    

c0012024 <VgaText::updateTitle()>:
c0012024:	c3                   	ret    
c0012025:	90                   	nop

c0012026 <VgaText::load()>:
c0012026:	c3                   	ret    
c0012027:	90                   	nop

c0012028 <VgaText::updateCursor()>:
c0012028:	83 ec 14             	sub    esp,0x14
c001202b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001202f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012032:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012035:	e8 56 96 00 00       	call   c001b690 <HalConsoleCursorUpdate(int, int)>
c001203a:	83 c4 1c             	add    esp,0x1c
c001203d:	c3                   	ret    

c001203e <VgaText::doANSI_SGR(int)>:
c001203e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012046:	85 d2                	test   edx,edx
c0012048:	75 0b                	jne    c0012055 <VgaText::doANSI_SGR(int)+0x17>
c001204a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001204d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012050:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012053:	eb 59                	jmp    c00120ae <VgaText::doANSI_SGR(int)+0x70>
c0012055:	83 fa 07             	cmp    edx,0x7
c0012058:	75 0b                	jne    c0012065 <VgaText::doANSI_SGR(int)+0x27>
c001205a:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001205d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012060:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0012063:	eb 49                	jmp    c00120ae <VgaText::doANSI_SGR(int)+0x70>
c0012065:	83 fa 1b             	cmp    edx,0x1b
c0012068:	74 e0                	je     c001204a <VgaText::doANSI_SGR(int)+0xc>
c001206a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001206d:	83 f9 07             	cmp    ecx,0x7
c0012070:	77 09                	ja     c001207b <VgaText::doANSI_SGR(int)+0x3d>
c0012072:	8b 14 8d 00 69 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9700]
c0012079:	eb 20                	jmp    c001209b <VgaText::doANSI_SGR(int)+0x5d>
c001207b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001207e:	83 f9 07             	cmp    ecx,0x7
c0012081:	77 09                	ja     c001208c <VgaText::doANSI_SGR(int)+0x4e>
c0012083:	8b 14 8d 00 69 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9700]
c001208a:	eb 22                	jmp    c00120ae <VgaText::doANSI_SGR(int)+0x70>
c001208c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001208f:	83 f9 07             	cmp    ecx,0x7
c0012092:	77 0b                	ja     c001209f <VgaText::doANSI_SGR(int)+0x61>
c0012094:	8b 14 95 b8 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9848]
c001209b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001209e:	c3                   	ret    
c001209f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00120a2:	83 f9 07             	cmp    ecx,0x7
c00120a5:	77 0a                	ja     c00120b1 <VgaText::doANSI_SGR(int)+0x73>
c00120a7:	8b 14 95 90 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9870]
c00120ae:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00120b1:	c3                   	ret    

c00120b2 <VgaText::setDefaultBgColour(VgaColour)>:
c00120b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120ba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00120bd:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00120c0:	c3                   	ret    
c00120c1:	90                   	nop

c00120c2 <VgaText::setDefaultFgColour(VgaColour)>:
c00120c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120ca:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00120cd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00120d0:	c3                   	ret    
c00120d1:	90                   	nop

c00120d2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00120d2:	53                   	push   ebx
c00120d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00120d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00120db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00120df:	51                   	push   ecx
c00120e0:	e8 cd ff ff ff       	call   c00120b2 <VgaText::setDefaultBgColour(VgaColour)>
c00120e5:	58                   	pop    eax
c00120e6:	5a                   	pop    edx
c00120e7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00120eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00120ef:	5b                   	pop    ebx
c00120f0:	eb d0                	jmp    c00120c2 <VgaText::setDefaultFgColour(VgaColour)>

c00120f2 <VgaText::setTitleTextColour(VgaColour)>:
c00120f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120fa:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00120fd:	c3                   	ret    

c00120fe <VgaText::setTitleColour(VgaColour)>:
c00120fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012102:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012106:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012109:	c3                   	ret    

c001210a <VgaText::setTitle(char*)>:
c001210a:	c3                   	ret    
c001210b:	90                   	nop

c001210c <VgaText::combineColours(unsigned char, unsigned char)>:
c001210c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012110:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012115:	83 e0 0f             	and    eax,0xf
c0012118:	c1 e2 04             	shl    edx,0x4
c001211b:	09 d0                	or     eax,edx
c001211d:	c3                   	ret    

c001211e <VgaText::scrollScreen()>:
c001211e:	55                   	push   ebp
c001211f:	57                   	push   edi
c0012120:	56                   	push   esi
c0012121:	be 01 00 00 00       	mov    esi,0x1
c0012126:	53                   	push   ebx
c0012127:	83 ec 0c             	sub    esp,0xc
c001212a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001212e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0012131:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0012137:	31 ff                	xor    edi,edi
c0012139:	01 e9                	add    ecx,ebp
c001213b:	8a 01                	mov    al,BYTE PTR [ecx]
c001213d:	83 fe 18             	cmp    esi,0x18
c0012140:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0012146:	75 20                	jne    c0012168 <VgaText::scrollScreen()+0x4a>
c0012148:	f7 c7 01 00 00 00    	test   edi,0x1
c001214e:	74 15                	je     c0012165 <VgaText::scrollScreen()+0x47>
c0012150:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012154:	50                   	push   eax
c0012155:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012159:	50                   	push   eax
c001215a:	e8 ad ff ff ff       	call   c001210c <VgaText::combineColours(unsigned char, unsigned char)>
c001215f:	5a                   	pop    edx
c0012160:	5a                   	pop    edx
c0012161:	88 01                	mov    BYTE PTR [ecx],al
c0012163:	eb 03                	jmp    c0012168 <VgaText::scrollScreen()+0x4a>
c0012165:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012168:	47                   	inc    edi
c0012169:	41                   	inc    ecx
c001216a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012170:	75 c9                	jne    c001213b <VgaText::scrollScreen()+0x1d>
c0012172:	46                   	inc    esi
c0012173:	83 fe 19             	cmp    esi,0x19
c0012176:	75 b9                	jne    c0012131 <VgaText::scrollScreen()+0x13>
c0012178:	39 1d f4 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1f4,ebx
c001217e:	75 1f                	jne    c001219f <VgaText::scrollScreen()+0x81>
c0012180:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0012184:	74 05                	je     c001218b <VgaText::scrollScreen()+0x6d>
c0012186:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0012189:	eb 14                	jmp    c001219f <VgaText::scrollScreen()+0x81>
c001218b:	50                   	push   eax
c001218c:	50                   	push   eax
c001218d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012191:	50                   	push   eax
c0012192:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012196:	50                   	push   eax
c0012197:	e8 88 93 00 00       	call   c001b524 <HalConsoleScroll(int, int)>
c001219c:	83 c4 10             	add    esp,0x10
c001219f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00121a3:	83 c4 0c             	add    esp,0xc
c00121a6:	5b                   	pop    ebx
c00121a7:	5e                   	pop    esi
c00121a8:	5f                   	pop    edi
c00121a9:	5d                   	pop    ebp
c00121aa:	e9 79 fe ff ff       	jmp    c0012028 <VgaText::updateCursor()>
c00121af:	90                   	nop

c00121b0 <VgaText::combineCharAndColour(char, unsigned char)>:
c00121b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00121b5:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00121ba:	c1 e0 08             	shl    eax,0x8
c00121bd:	09 d0                	or     eax,edx
c00121bf:	c3                   	ret    

c00121c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00121c0:	55                   	push   ebp
c00121c1:	57                   	push   edi
c00121c2:	56                   	push   esi
c00121c3:	53                   	push   ebx
c00121c4:	83 ec 1c             	sub    esp,0x1c
c00121c7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00121cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00121cf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00121d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00121d7:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c00121da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121e2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00121e6:	85 ed                	test   ebp,ebp
c00121e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121ec:	75 14                	jne    c0012202 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c00121ee:	c7 44 24 30 ce 44 02 c0 	mov    DWORD PTR [esp+0x30],0xc00244ce
c00121f6:	83 c4 1c             	add    esp,0x1c
c00121f9:	5b                   	pop    ebx
c00121fa:	5e                   	pop    esi
c00121fb:	5f                   	pop    edi
c00121fc:	5d                   	pop    ebp
c00121fd:	e9 e2 d9 ff ff       	jmp    c000fbe4 <KePanic(char const*)>
c0012202:	50                   	push   eax
c0012203:	50                   	push   eax
c0012204:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012209:	50                   	push   eax
c001220a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001220f:	50                   	push   eax
c0012210:	e8 f7 fe ff ff       	call   c001210c <VgaText::combineColours(unsigned char, unsigned char)>
c0012215:	5a                   	pop    edx
c0012216:	5a                   	pop    edx
c0012217:	0f b6 c0             	movzx  eax,al
c001221a:	0f be c9             	movsx  ecx,cl
c001221d:	50                   	push   eax
c001221e:	51                   	push   ecx
c001221f:	e8 8c ff ff ff       	call   c00121b0 <VgaText::combineCharAndColour(char, unsigned char)>
c0012224:	6b d6 50             	imul   edx,esi,0x50
c0012227:	83 c4 10             	add    esp,0x10
c001222a:	01 da                	add    edx,ebx
c001222c:	0f b7 d2             	movzx  edx,dx
c001222f:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012234:	39 3d f4 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1f4,edi
c001223a:	75 28                	jne    c0012264 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c001223c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012240:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012244:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012248:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001224c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012250:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012254:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012258:	83 c4 1c             	add    esp,0x1c
c001225b:	5b                   	pop    ebx
c001225c:	5e                   	pop    esi
c001225d:	5f                   	pop    edi
c001225e:	5d                   	pop    ebp
c001225f:	e9 c8 93 00 00       	jmp    c001b62c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012264:	83 c4 1c             	add    esp,0x1c
c0012267:	5b                   	pop    ebx
c0012268:	5e                   	pop    esi
c0012269:	5f                   	pop    edi
c001226a:	5d                   	pop    ebp
c001226b:	c3                   	ret    

c001226c <VgaText::getCursorX()>:
c001226c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012270:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0012273:	c3                   	ret    

c0012274 <VgaText::getCursorY()>:
c0012274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012278:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001227b:	c3                   	ret    

c001227c <VgaText::setCursor(int, int)>:
c001227c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012280:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012284:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0012287:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001228b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001228e:	e9 95 fd ff ff       	jmp    c0012028 <VgaText::updateCursor()>

c0012293 <setActiveTerminal(VgaText*)>:
c0012293:	53                   	push   ebx
c0012294:	83 ec 08             	sub    esp,0x8
c0012297:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001229b:	85 db                	test   ebx,ebx
c001229d:	75 11                	jne    c00122b0 <setActiveTerminal(VgaText*)+0x1d>
c001229f:	c7 44 24 10 de 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc00244de
c00122a7:	83 c4 08             	add    esp,0x8
c00122aa:	5b                   	pop    ebx
c00122ab:	e9 34 d9 ff ff       	jmp    c000fbe4 <KePanic(char const*)>
c00122b0:	a1 f4 c1 02 c0       	mov    eax,ds:0xc002c1f4
c00122b5:	85 c0                	test   eax,eax
c00122b7:	74 0c                	je     c00122c5 <setActiveTerminal(VgaText*)+0x32>
c00122b9:	83 ec 0c             	sub    esp,0xc
c00122bc:	50                   	push   eax
c00122bd:	e8 66 fd ff ff       	call   c0012028 <VgaText::updateCursor()>
c00122c2:	83 c4 10             	add    esp,0x10
c00122c5:	50                   	push   eax
c00122c6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00122c9:	89 1d f4 c1 02 c0    	mov    DWORD PTR ds:0xc002c1f4,ebx
c00122cf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00122d2:	53                   	push   ebx
c00122d3:	e8 a4 ff ff ff       	call   c001227c <VgaText::setCursor(int, int)>
c00122d8:	83 c4 18             	add    esp,0x18
c00122db:	5b                   	pop    ebx
c00122dc:	c3                   	ret    
c00122dd:	90                   	nop

c00122de <VgaText::clearScreen()>:
c00122de:	57                   	push   edi
c00122df:	56                   	push   esi
c00122e0:	31 f6                	xor    esi,esi
c00122e2:	53                   	push   ebx
c00122e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122e7:	52                   	push   edx
c00122e8:	6a 00                	push   0x0
c00122ea:	6a 00                	push   0x0
c00122ec:	53                   	push   ebx
c00122ed:	e8 8a ff ff ff       	call   c001227c <VgaText::setCursor(int, int)>
c00122f2:	83 c4 10             	add    esp,0x10
c00122f5:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00122fc:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00122ff:	7e 20                	jle    c0012321 <VgaText::clearScreen()+0x43>
c0012301:	31 ff                	xor    edi,edi
c0012303:	50                   	push   eax
c0012304:	50                   	push   eax
c0012305:	56                   	push   esi
c0012306:	57                   	push   edi
c0012307:	47                   	inc    edi
c0012308:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001230b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001230e:	6a 20                	push   0x20
c0012310:	53                   	push   ebx
c0012311:	e8 aa fe ff ff       	call   c00121c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012316:	83 c4 20             	add    esp,0x20
c0012319:	83 ff 50             	cmp    edi,0x50
c001231c:	75 e5                	jne    c0012303 <VgaText::clearScreen()+0x25>
c001231e:	46                   	inc    esi
c001231f:	eb db                	jmp    c00122fc <VgaText::clearScreen()+0x1e>
c0012321:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012328:	5b                   	pop    ebx
c0012329:	5e                   	pop    esi
c001232a:	5f                   	pop    edi
c001232b:	c3                   	ret    

c001232c <VgaText::setCursorX(int)>:
c001232c:	83 ec 10             	sub    esp,0x10
c001232f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012333:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001233a:	50                   	push   eax
c001233b:	e8 3c ff ff ff       	call   c001227c <VgaText::setCursor(int, int)>
c0012340:	83 c4 1c             	add    esp,0x1c
c0012343:	c3                   	ret    

c0012344 <VgaText::setCursorY(int)>:
c0012344:	83 ec 10             	sub    esp,0x10
c0012347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001234b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001234f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012352:	50                   	push   eax
c0012353:	e8 24 ff ff ff       	call   c001227c <VgaText::setCursor(int, int)>
c0012358:	83 c4 1c             	add    esp,0x1c
c001235b:	c3                   	ret    

c001235c <VgaText::incrementCursor(bool)>:
c001235c:	56                   	push   esi
c001235d:	53                   	push   ebx
c001235e:	51                   	push   ecx
c001235f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012363:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012367:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001236a:	40                   	inc    eax
c001236b:	83 f8 50             	cmp    eax,0x50
c001236e:	74 05                	je     c0012375 <VgaText::incrementCursor(bool)+0x19>
c0012370:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0012373:	eb 24                	jmp    c0012399 <VgaText::incrementCursor(bool)+0x3d>
c0012375:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001237c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001237f:	8d 50 01             	lea    edx,[eax+0x1]
c0012382:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012385:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012388:	75 0f                	jne    c0012399 <VgaText::incrementCursor(bool)+0x3d>
c001238a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001238d:	83 ec 0c             	sub    esp,0xc
c0012390:	53                   	push   ebx
c0012391:	e8 88 fd ff ff       	call   c001211e <VgaText::scrollScreen()>
c0012396:	83 c4 10             	add    esp,0x10
c0012399:	89 f0                	mov    eax,esi
c001239b:	84 c0                	test   al,al
c001239d:	74 0c                	je     c00123ab <VgaText::incrementCursor(bool)+0x4f>
c001239f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123a3:	5a                   	pop    edx
c00123a4:	5b                   	pop    ebx
c00123a5:	5e                   	pop    esi
c00123a6:	e9 7d fc ff ff       	jmp    c0012028 <VgaText::updateCursor()>
c00123ab:	58                   	pop    eax
c00123ac:	5b                   	pop    ebx
c00123ad:	5e                   	pop    esi
c00123ae:	c3                   	ret    
c00123af:	90                   	nop

c00123b0 <VgaText::decrementCursor(bool)>:
c00123b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00123b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00123b8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00123bb:	85 c0                	test   eax,eax
c00123bd:	74 04                	je     c00123c3 <VgaText::decrementCursor(bool)+0x13>
c00123bf:	48                   	dec    eax
c00123c0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00123c3:	84 c9                	test   cl,cl
c00123c5:	74 09                	je     c00123d0 <VgaText::decrementCursor(bool)+0x20>
c00123c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00123cb:	e9 58 fc ff ff       	jmp    c0012028 <VgaText::updateCursor()>
c00123d0:	c3                   	ret    
c00123d1:	90                   	nop

c00123d2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00123d2:	53                   	push   ebx
c00123d3:	83 ec 08             	sub    esp,0x8
c00123d6:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00123db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00123e3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00123e7:	83 f8 07             	cmp    eax,0x7
c00123ea:	75 21                	jne    c001240d <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00123ec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00123f4:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00123fc:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012404:	83 c4 08             	add    esp,0x8
c0012407:	5b                   	pop    ebx
c0012408:	e9 1e 66 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c001240d:	83 f8 0d             	cmp    eax,0xd
c0012410:	75 09                	jne    c001241b <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0012412:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012419:	eb 2d                	jmp    c0012448 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c001241b:	83 f8 0a             	cmp    eax,0xa
c001241e:	75 31                	jne    c0012451 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012420:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012427:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001242a:	8d 50 01             	lea    edx,[eax+0x1]
c001242d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012430:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012433:	75 0f                	jne    c0012444 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012435:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012438:	83 ec 0c             	sub    esp,0xc
c001243b:	53                   	push   ebx
c001243c:	e8 dd fc ff ff       	call   c001211e <VgaText::scrollScreen()>
c0012441:	83 c4 10             	add    esp,0x10
c0012444:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012448:	83 c4 08             	add    esp,0x8
c001244b:	5b                   	pop    ebx
c001244c:	e9 d7 fb ff ff       	jmp    c0012028 <VgaText::updateCursor()>
c0012451:	83 f8 08             	cmp    eax,0x8
c0012454:	75 25                	jne    c001247b <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012456:	50                   	push   eax
c0012457:	50                   	push   eax
c0012458:	6a 01                	push   0x1
c001245a:	53                   	push   ebx
c001245b:	e8 50 ff ff ff       	call   c00123b0 <VgaText::decrementCursor(bool)>
c0012460:	5a                   	pop    edx
c0012461:	59                   	pop    ecx
c0012462:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012465:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012468:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001246b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001246e:	6a 20                	push   0x20
c0012470:	53                   	push   ebx
c0012471:	e8 4a fd ff ff       	call   c00121c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012476:	83 c4 28             	add    esp,0x28
c0012479:	5b                   	pop    ebx
c001247a:	c3                   	ret    
c001247b:	83 ec 08             	sub    esp,0x8
c001247e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012481:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012484:	51                   	push   ecx
c0012485:	52                   	push   edx
c0012486:	50                   	push   eax
c0012487:	53                   	push   ebx
c0012488:	e8 33 fd ff ff       	call   c00121c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001248d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0012491:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012499:	83 c4 28             	add    esp,0x28
c001249c:	5b                   	pop    ebx
c001249d:	e9 ba fe ff ff       	jmp    c001235c <VgaText::incrementCursor(bool)>

c00124a2 <VgaText::putchar(char)>:
c00124a2:	57                   	push   edi
c00124a3:	56                   	push   esi
c00124a4:	53                   	push   ebx
c00124a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00124a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124ad:	0f be c2             	movsx  eax,dl
c00124b0:	83 f8 5b             	cmp    eax,0x5b
c00124b3:	75 18                	jne    c00124cd <VgaText::putchar(char)+0x2b>
c00124b5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00124b9:	74 20                	je     c00124db <VgaText::putchar(char)+0x39>
c00124bb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00124c1:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00124c8:	e9 b8 00 00 00       	jmp    c0012585 <VgaText::putchar(char)+0xe3>
c00124cd:	83 f8 1b             	cmp    eax,0x1b
c00124d0:	75 09                	jne    c00124db <VgaText::putchar(char)+0x39>
c00124d2:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00124d6:	e9 aa 00 00 00       	jmp    c0012585 <VgaText::putchar(char)+0xe3>
c00124db:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00124df:	89 f9                	mov    ecx,edi
c00124e1:	84 c9                	test   cl,cl
c00124e3:	0f 84 8c 00 00 00    	je     c0012575 <VgaText::putchar(char)+0xd3>
c00124e9:	8d 4a c0             	lea    ecx,[edx-0x40]
c00124ec:	80 f9 3e             	cmp    cl,0x3e
c00124ef:	77 70                	ja     c0012561 <VgaText::putchar(char)+0xbf>
c00124f1:	83 f8 6d             	cmp    eax,0x6d
c00124f4:	75 3f                	jne    c0012535 <VgaText::putchar(char)+0x93>
c00124f6:	31 f6                	xor    esi,esi
c00124f8:	31 d2                	xor    edx,edx
c00124fa:	31 c0                	xor    eax,eax
c00124fc:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00124ff:	7e 25                	jle    c0012526 <VgaText::putchar(char)+0x84>
c0012501:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012506:	83 fa 3b             	cmp    edx,0x3b
c0012509:	75 0f                	jne    c001251a <VgaText::putchar(char)+0x78>
c001250b:	50                   	push   eax
c001250c:	53                   	push   ebx
c001250d:	e8 2c fb ff ff       	call   c001203e <VgaText::doANSI_SGR(int)>
c0012512:	31 d2                	xor    edx,edx
c0012514:	59                   	pop    ecx
c0012515:	58                   	pop    eax
c0012516:	31 c0                	xor    eax,eax
c0012518:	eb 09                	jmp    c0012523 <VgaText::putchar(char)+0x81>
c001251a:	6b c0 0a             	imul   eax,eax,0xa
c001251d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012521:	89 fa                	mov    edx,edi
c0012523:	46                   	inc    esi
c0012524:	eb d6                	jmp    c00124fc <VgaText::putchar(char)+0x5a>
c0012526:	84 d2                	test   dl,dl
c0012528:	74 2f                	je     c0012559 <VgaText::putchar(char)+0xb7>
c001252a:	50                   	push   eax
c001252b:	53                   	push   ebx
c001252c:	e8 0d fb ff ff       	call   c001203e <VgaText::doANSI_SGR(int)>
c0012531:	58                   	pop    eax
c0012532:	5a                   	pop    edx
c0012533:	eb 24                	jmp    c0012559 <VgaText::putchar(char)+0xb7>
c0012535:	83 f8 4a             	cmp    eax,0x4a
c0012538:	75 1f                	jne    c0012559 <VgaText::putchar(char)+0xb7>
c001253a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001253e:	75 19                	jne    c0012559 <VgaText::putchar(char)+0xb7>
c0012540:	83 ec 0c             	sub    esp,0xc
c0012543:	53                   	push   ebx
c0012544:	e8 95 fd ff ff       	call   c00122de <VgaText::clearScreen()>
c0012549:	83 c4 0c             	add    esp,0xc
c001254c:	6a 00                	push   0x0
c001254e:	6a 00                	push   0x0
c0012550:	53                   	push   ebx
c0012551:	e8 26 fd ff ff       	call   c001227c <VgaText::setCursor(int, int)>
c0012556:	83 c4 10             	add    esp,0x10
c0012559:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001255f:	eb 24                	jmp    c0012585 <VgaText::putchar(char)+0xe3>
c0012561:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0012564:	83 f8 0e             	cmp    eax,0xe
c0012567:	7f 1c                	jg     c0012585 <VgaText::putchar(char)+0xe3>
c0012569:	8d 48 01             	lea    ecx,[eax+0x1]
c001256c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001256f:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0012573:	eb 10                	jmp    c0012585 <VgaText::putchar(char)+0xe3>
c0012575:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012578:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001257b:	50                   	push   eax
c001257c:	53                   	push   ebx
c001257d:	e8 50 fe ff ff       	call   c00123d2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012582:	83 c4 10             	add    esp,0x10
c0012585:	5b                   	pop    ebx
c0012586:	5e                   	pop    esi
c0012587:	5f                   	pop    edi
c0012588:	c3                   	ret    
c0012589:	90                   	nop

c001258a <VgaText::putx(unsigned int)>:
c001258a:	57                   	push   edi
c001258b:	b9 11 00 00 00       	mov    ecx,0x11
c0012590:	56                   	push   esi
c0012591:	be ec 44 02 c0       	mov    esi,0xc00244ec
c0012596:	53                   	push   ebx
c0012597:	83 ec 20             	sub    esp,0x20
c001259a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001259e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00125a2:	fc                   	cld    
c00125a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125a5:	be 08 00 00 00       	mov    esi,0x8
c00125aa:	50                   	push   eax
c00125ab:	50                   	push   eax
c00125ac:	89 d8                	mov    eax,ebx
c00125ae:	c1 e8 1c             	shr    eax,0x1c
c00125b1:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00125b6:	c1 e3 04             	shl    ebx,0x4
c00125b9:	50                   	push   eax
c00125ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125be:	e8 df fe ff ff       	call   c00124a2 <VgaText::putchar(char)>
c00125c3:	83 c4 10             	add    esp,0x10
c00125c6:	4e                   	dec    esi
c00125c7:	75 e1                	jne    c00125aa <VgaText::putx(unsigned int)+0x20>
c00125c9:	83 c4 20             	add    esp,0x20
c00125cc:	5b                   	pop    ebx
c00125cd:	5e                   	pop    esi
c00125ce:	5f                   	pop    edi
c00125cf:	c3                   	ret    

c00125d0 <VgaText::puts(char const*)>:
c00125d0:	53                   	push   ebx
c00125d1:	83 ec 08             	sub    esp,0x8
c00125d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125d8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00125db:	85 c0                	test   eax,eax
c00125dd:	74 12                	je     c00125f1 <VgaText::puts(char const*)+0x21>
c00125df:	51                   	push   ecx
c00125e0:	43                   	inc    ebx
c00125e1:	51                   	push   ecx
c00125e2:	50                   	push   eax
c00125e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125e7:	e8 b6 fe ff ff       	call   c00124a2 <VgaText::putchar(char)>
c00125ec:	83 c4 10             	add    esp,0x10
c00125ef:	eb e7                	jmp    c00125d8 <VgaText::puts(char const*)+0x8>
c00125f1:	83 c4 08             	add    esp,0x8
c00125f4:	5b                   	pop    ebx
c00125f5:	c3                   	ret    

c00125f6 <VgaText::write(unsigned long long, void*, int*)>:
c00125f6:	55                   	push   ebp
c00125f7:	57                   	push   edi
c00125f8:	56                   	push   esi
c00125f9:	53                   	push   ebx
c00125fa:	83 ec 0c             	sub    esp,0xc
c00125fd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012601:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012605:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012609:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012610:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012613:	39 eb                	cmp    ebx,ebp
c0012615:	74 13                	je     c001262a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012617:	50                   	push   eax
c0012618:	43                   	inc    ebx
c0012619:	50                   	push   eax
c001261a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001261e:	50                   	push   eax
c001261f:	56                   	push   esi
c0012620:	e8 7d fe ff ff       	call   c00124a2 <VgaText::putchar(char)>
c0012625:	83 c4 10             	add    esp,0x10
c0012628:	eb e9                	jmp    c0012613 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001262a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012631:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012635:	89 38                	mov    DWORD PTR [eax],edi
c0012637:	83 c4 0c             	add    esp,0xc
c001263a:	31 c0                	xor    eax,eax
c001263c:	5b                   	pop    ebx
c001263d:	5e                   	pop    esi
c001263e:	5f                   	pop    edi
c001263f:	5d                   	pop    ebp
c0012640:	c3                   	ret    
c0012641:	90                   	nop

c0012642 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012642:	55                   	push   ebp
c0012643:	57                   	push   edi
c0012644:	56                   	push   esi
c0012645:	53                   	push   ebx
c0012646:	83 ec 1c             	sub    esp,0x1c
c0012649:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001264d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012651:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012655:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012659:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c001265c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012660:	85 db                	test   ebx,ebx
c0012662:	75 14                	jne    c0012678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c0012664:	c7 44 24 30 fd 44 02 c0 	mov    DWORD PTR [esp+0x30],0xc00244fd
c001266c:	83 c4 1c             	add    esp,0x1c
c001266f:	5b                   	pop    ebx
c0012670:	5e                   	pop    esi
c0012671:	5f                   	pop    edi
c0012672:	5d                   	pop    ebp
c0012673:	e9 6c d5 ff ff       	jmp    c000fbe4 <KePanic(char const*)>
c0012678:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c001267f:	50                   	push   eax
c0012680:	50                   	push   eax
c0012681:	89 e8                	mov    eax,ebp
c0012683:	0f b6 c0             	movzx  eax,al
c0012686:	50                   	push   eax
c0012687:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001268c:	50                   	push   eax
c001268d:	e8 7a fa ff ff       	call   c001210c <VgaText::combineColours(unsigned char, unsigned char)>
c0012692:	83 c4 10             	add    esp,0x10
c0012695:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012699:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c001269c:	0f b6 c0             	movzx  eax,al
c001269f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126a3:	0f b7 c9             	movzx  ecx,cx
c00126a6:	01 c9                	add    ecx,ecx
c00126a8:	01 cb                	add    ebx,ecx
c00126aa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126ad:	85 c0                	test   eax,eax
c00126af:	0f 84 ef 00 00 00    	je     c00127a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00126b5:	83 f8 0d             	cmp    eax,0xd
c00126b8:	75 0c                	jne    c00126c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00126ba:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00126c1:	e9 d8 00 00 00       	jmp    c001279e <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00126c6:	83 f8 0a             	cmp    eax,0xa
c00126c9:	75 44                	jne    c001270f <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c00126cb:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00126d2:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00126d5:	8d 48 01             	lea    ecx,[eax+0x1]
c00126d8:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c00126db:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c00126de:	75 0f                	jne    c00126ef <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c00126e0:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c00126e3:	83 ec 0c             	sub    esp,0xc
c00126e6:	57                   	push   edi
c00126e7:	e8 32 fa ff ff       	call   c001211e <VgaText::scrollScreen()>
c00126ec:	83 c4 10             	add    esp,0x10
c00126ef:	83 ec 0c             	sub    esp,0xc
c00126f2:	57                   	push   edi
c00126f3:	e8 30 f9 ff ff       	call   c0012028 <VgaText::updateCursor()>
c00126f8:	83 c4 10             	add    esp,0x10
c00126fb:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00126ff:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012702:	0f b7 db             	movzx  ebx,bx
c0012705:	01 db                	add    ebx,ebx
c0012707:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001270a:	e9 8f 00 00 00       	jmp    c001279e <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001270f:	83 f8 08             	cmp    eax,0x8
c0012712:	75 34                	jne    c0012748 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012714:	51                   	push   ecx
c0012715:	51                   	push   ecx
c0012716:	6a 01                	push   0x1
c0012718:	57                   	push   edi
c0012719:	e8 92 fc ff ff       	call   c00123b0 <VgaText::decrementCursor(bool)>
c001271e:	5b                   	pop    ebx
c001271f:	58                   	pop    eax
c0012720:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012723:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012726:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012729:	ff 77 34             	push   DWORD PTR [edi+0x34]
c001272c:	6a 20                	push   0x20
c001272e:	57                   	push   edi
c001272f:	e8 8c fa ff ff       	call   c00121c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012734:	83 c4 20             	add    esp,0x20
c0012737:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001273b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001273e:	0f b7 db             	movzx  ebx,bx
c0012741:	01 db                	add    ebx,ebx
c0012743:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012746:	eb 56                	jmp    c001279e <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012748:	52                   	push   edx
c0012749:	52                   	push   edx
c001274a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001274e:	50                   	push   eax
c001274f:	e8 5c fa ff ff       	call   c00121b0 <VgaText::combineCharAndColour(char, unsigned char)>
c0012754:	83 c4 10             	add    esp,0x10
c0012757:	66 89 03             	mov    WORD PTR [ebx],ax
c001275a:	39 3d f4 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1f4,edi
c0012760:	75 1a                	jne    c001277c <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012762:	83 ec 0c             	sub    esp,0xc
c0012765:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012768:	ff 77 14             	push   DWORD PTR [edi+0x14]
c001276b:	55                   	push   ebp
c001276c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012770:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012773:	50                   	push   eax
c0012774:	e8 b3 8e 00 00       	call   c001b62c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012779:	83 c4 20             	add    esp,0x20
c001277c:	50                   	push   eax
c001277d:	83 c3 02             	add    ebx,0x2
c0012780:	50                   	push   eax
c0012781:	6a 00                	push   0x0
c0012783:	57                   	push   edi
c0012784:	e8 d3 fb ff ff       	call   c001235c <VgaText::incrementCursor(bool)>
c0012789:	83 c4 10             	add    esp,0x10
c001278c:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0012790:	75 0c                	jne    c001279e <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012792:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012796:	0f b7 db             	movzx  ebx,bx
c0012799:	01 db                	add    ebx,ebx
c001279b:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001279e:	46                   	inc    esi
c001279f:	e9 06 ff ff ff       	jmp    c00126aa <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00127a4:	83 ec 0c             	sub    esp,0xc
c00127a7:	57                   	push   edi
c00127a8:	e8 7b f8 ff ff       	call   c0012028 <VgaText::updateCursor()>
c00127ad:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c00127b4:	83 c4 2c             	add    esp,0x2c
c00127b7:	5b                   	pop    ebx
c00127b8:	5e                   	pop    esi
c00127b9:	5f                   	pop    edi
c00127ba:	5d                   	pop    ebp
c00127bb:	c3                   	ret    

c00127bc <VgaText::VgaText(char const*)>:
c00127bc:	56                   	push   esi
c00127bd:	53                   	push   ebx
c00127be:	83 ec 04             	sub    esp,0x4
c00127c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c5:	83 ec 08             	sub    esp,0x8
c00127c8:	6a 00                	push   0x0
c00127ca:	50                   	push   eax
c00127cb:	e8 b8 05 00 00       	call   c0012d88 <UnixFile::UnixFile(int)>
c00127d0:	83 c4 10             	add    esp,0x10
c00127d3:	ba 34 45 02 c0       	mov    edx,0xc0024534
c00127d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127dc:	89 10                	mov    DWORD PTR [eax],edx
c00127de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127e2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00127e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ed:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00127f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00127fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012800:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012808:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001280f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012813:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001281a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001281e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012829:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012830:	83 ec 0c             	sub    esp,0xc
c0012833:	68 0d 45 02 c0       	push   0xc002450d
c0012838:	e8 29 47 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001283d:	83 c4 10             	add    esp,0x10
c0012840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012844:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c001284b:	83 ec 0c             	sub    esp,0xc
c001284e:	6a 01                	push   0x1
c0012850:	e8 86 09 00 00       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c0012855:	83 c4 10             	add    esp,0x10
c0012858:	89 c2                	mov    edx,eax
c001285a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001285e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012861:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c0012867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001286b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286e:	89 c6                	mov    esi,eax
c0012870:	e8 69 d5 ff ff       	call   c000fdde <Phys::allocatePage()>
c0012875:	68 05 0c 00 00       	push   0xc05
c001287a:	56                   	push   esi
c001287b:	50                   	push   eax
c001287c:	53                   	push   ebx
c001287d:	e8 32 10 00 00       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012882:	83 c4 10             	add    esp,0x10
c0012885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012889:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001288c:	83 ec 04             	sub    esp,0x4
c001288f:	68 a0 0f 00 00       	push   0xfa0
c0012894:	6a 00                	push   0x0
c0012896:	50                   	push   eax
c0012897:	e8 54 dc fe ff       	call   c00004f0 <memset>
c001289c:	83 c4 10             	add    esp,0x10
c001289f:	83 ec 04             	sub    esp,0x4
c00128a2:	6a 00                	push   0x0
c00128a4:	6a 07                	push   0x7
c00128a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128aa:	e8 23 f8 ff ff       	call   c00120d2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00128af:	83 c4 10             	add    esp,0x10
c00128b2:	83 ec 04             	sub    esp,0x4
c00128b5:	6a 00                	push   0x0
c00128b7:	6a 00                	push   0x0
c00128b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128bd:	e8 ba f9 ff ff       	call   c001227c <VgaText::setCursor(int, int)>
c00128c2:	83 c4 10             	add    esp,0x10
c00128c5:	83 ec 0c             	sub    esp,0xc
c00128c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128cc:	e8 0d fa ff ff       	call   c00122de <VgaText::clearScreen()>
c00128d1:	83 c4 10             	add    esp,0x10
c00128d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128d8:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00128dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128e0:	05 82 00 00 00       	add    eax,0x82
c00128e5:	83 ec 04             	sub    esp,0x4
c00128e8:	68 80 00 00 00       	push   0x80
c00128ed:	6a 00                	push   0x0
c00128ef:	50                   	push   eax
c00128f0:	e8 fb db fe ff       	call   c00004f0 <memset>
c00128f5:	83 c4 10             	add    esp,0x10
c00128f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128fc:	05 02 01 00 00       	add    eax,0x102
c0012901:	83 ec 04             	sub    esp,0x4
c0012904:	68 80 00 00 00       	push   0x80
c0012909:	6a 00                	push   0x0
c001290b:	50                   	push   eax
c001290c:	e8 df db fe ff       	call   c00004f0 <memset>
c0012911:	83 c4 10             	add    esp,0x10
c0012914:	90                   	nop
c0012915:	83 c4 04             	add    esp,0x4
c0012918:	5b                   	pop    ebx
c0012919:	5e                   	pop    esi
c001291a:	c3                   	ret    
c001291b:	90                   	nop

c001291c <VgaText::receiveKey(unsigned char)>:
c001291c:	55                   	push   ebp
c001291d:	57                   	push   edi
c001291e:	56                   	push   esi
c001291f:	53                   	push   ebx
c0012920:	83 ec 2c             	sub    esp,0x2c
c0012923:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012927:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001292b:	89 fd                	mov    ebp,edi
c001292d:	81 e5 ff 00 00 00    	and    ebp,0xff
c0012933:	0f 84 48 01 00 00    	je     c0012a81 <VgaText::receiveKey(unsigned char)+0x165>
c0012939:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c001293f:	83 fd 08             	cmp    ebp,0x8
c0012942:	75 6a                	jne    c00129ae <VgaText::receiveKey(unsigned char)+0x92>
c0012944:	83 ec 0c             	sub    esp,0xc
c0012947:	56                   	push   esi
c0012948:	e8 33 dc fe ff       	call   c0000580 <strlen>
c001294d:	83 c4 10             	add    esp,0x10
c0012950:	85 c0                	test   eax,eax
c0012952:	0f 84 ef 00 00 00    	je     c0012a47 <VgaText::receiveKey(unsigned char)+0x12b>
c0012958:	50                   	push   eax
c0012959:	50                   	push   eax
c001295a:	6a 08                	push   0x8
c001295c:	53                   	push   ebx
c001295d:	e8 40 fb ff ff       	call   c00124a2 <VgaText::putchar(char)>
c0012962:	89 34 24             	mov    DWORD PTR [esp],esi
c0012965:	e8 16 dc fe ff       	call   c0000580 <strlen>
c001296a:	83 c4 10             	add    esp,0x10
c001296d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012975:	83 fa 1f             	cmp    edx,0x1f
c0012978:	89 d0                	mov    eax,edx
c001297a:	7f 1c                	jg     c0012998 <VgaText::receiveKey(unsigned char)+0x7c>
c001297c:	83 e8 08             	sub    eax,0x8
c001297f:	3c 02                	cmp    al,0x2
c0012981:	76 15                	jbe    c0012998 <VgaText::receiveKey(unsigned char)+0x7c>
c0012983:	83 fa 0d             	cmp    edx,0xd
c0012986:	74 10                	je     c0012998 <VgaText::receiveKey(unsigned char)+0x7c>
c0012988:	57                   	push   edi
c0012989:	57                   	push   edi
c001298a:	68 20 45 02 c0       	push   0xc0024520
c001298f:	53                   	push   ebx
c0012990:	e8 3b fc ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c0012995:	83 c4 10             	add    esp,0x10
c0012998:	83 ec 0c             	sub    esp,0xc
c001299b:	56                   	push   esi
c001299c:	e8 df db fe ff       	call   c0000580 <strlen>
c00129a1:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c00129a9:	e9 96 00 00 00       	jmp    c0012a44 <VgaText::receiveKey(unsigned char)+0x128>
c00129ae:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c00129b4:	83 ec 0c             	sub    esp,0xc
c00129b7:	50                   	push   eax
c00129b8:	e8 c3 db fe ff       	call   c0000580 <strlen>
c00129bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00129c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129c4:	e8 b7 db fe ff       	call   c0000580 <strlen>
c00129c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00129cd:	83 c4 10             	add    esp,0x10
c00129d0:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c00129d4:	3d 80 00 00 00       	cmp    eax,0x80
c00129d9:	0f 87 a2 00 00 00    	ja     c0012a81 <VgaText::receiveKey(unsigned char)+0x165>
c00129df:	8d 47 ff             	lea    eax,[edi-0x1]
c00129e2:	3c 1e                	cmp    al,0x1e
c00129e4:	77 35                	ja     c0012a1b <VgaText::receiveKey(unsigned char)+0xff>
c00129e6:	8d 47 f7             	lea    eax,[edi-0x9]
c00129e9:	3c 01                	cmp    al,0x1
c00129eb:	76 2e                	jbe    c0012a1b <VgaText::receiveKey(unsigned char)+0xff>
c00129ed:	83 fd 0d             	cmp    ebp,0xd
c00129f0:	74 29                	je     c0012a1b <VgaText::receiveKey(unsigned char)+0xff>
c00129f2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00129f5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00129f8:	68 26 45 02 c0       	push   0xc0024526
c00129fd:	53                   	push   ebx
c00129fe:	e8 3f fc ff ff       	call   c0012642 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012a03:	8d 47 40             	lea    eax,[edi+0x40]
c0012a06:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012a09:	0f b6 c0             	movzx  eax,al
c0012a0c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012a0f:	50                   	push   eax
c0012a10:	53                   	push   ebx
c0012a11:	e8 bc f9 ff ff       	call   c00123d2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012a16:	83 c4 20             	add    esp,0x20
c0012a19:	eb 11                	jmp    c0012a2c <VgaText::receiveKey(unsigned char)+0x110>
c0012a1b:	51                   	push   ecx
c0012a1c:	89 f8                	mov    eax,edi
c0012a1e:	51                   	push   ecx
c0012a1f:	0f be c0             	movsx  eax,al
c0012a22:	50                   	push   eax
c0012a23:	53                   	push   ebx
c0012a24:	e8 79 fa ff ff       	call   c00124a2 <VgaText::putchar(char)>
c0012a29:	83 c4 10             	add    esp,0x10
c0012a2c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012a31:	89 f8                	mov    eax,edi
c0012a33:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012a37:	52                   	push   edx
c0012a38:	52                   	push   edx
c0012a39:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012a3d:	50                   	push   eax
c0012a3e:	56                   	push   esi
c0012a3f:	e8 2c de fe ff       	call   c0000870 <strcat>
c0012a44:	83 c4 10             	add    esp,0x10
c0012a47:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0012a4e:	75 0f                	jne    c0012a5f <VgaText::receiveKey(unsigned char)+0x143>
c0012a50:	83 fd 1c             	cmp    ebp,0x1c
c0012a53:	77 2c                	ja     c0012a81 <VgaText::receiveKey(unsigned char)+0x165>
c0012a55:	b8 08 04 00 10       	mov    eax,0x10000408
c0012a5a:	0f a3 e8             	bt     eax,ebp
c0012a5d:	73 22                	jae    c0012a81 <VgaText::receiveKey(unsigned char)+0x165>
c0012a5f:	50                   	push   eax
c0012a60:	81 c3 02 01 00 00    	add    ebx,0x102
c0012a66:	50                   	push   eax
c0012a67:	56                   	push   esi
c0012a68:	53                   	push   ebx
c0012a69:	e8 02 de fe ff       	call   c0000870 <strcat>
c0012a6e:	83 c4 0c             	add    esp,0xc
c0012a71:	68 80 00 00 00       	push   0x80
c0012a76:	6a 00                	push   0x0
c0012a78:	56                   	push   esi
c0012a79:	e8 72 da fe ff       	call   c00004f0 <memset>
c0012a7e:	83 c4 10             	add    esp,0x10
c0012a81:	83 c4 2c             	add    esp,0x2c
c0012a84:	5b                   	pop    ebx
c0012a85:	5e                   	pop    esi
c0012a86:	5f                   	pop    edi
c0012a87:	5d                   	pop    ebp
c0012a88:	c3                   	ret    
c0012a89:	90                   	nop

c0012a8a <VgaText::doUpdate()>:
c0012a8a:	c3                   	ret    
c0012a8b:	90                   	nop

c0012a8c <TSS::TSS()>:
c0012a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a90:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a97:	90                   	nop
c0012a98:	c3                   	ret    
c0012a99:	90                   	nop
c0012a9a:	66 90                	xchg   ax,ax

c0012a9c <TSS::setESP(unsigned long)>:
c0012a9c:	55                   	push   ebp
c0012a9d:	89 e5                	mov    ebp,esp
c0012a9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012aa2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012aa5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012aa8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012aab:	90                   	nop
c0012aac:	5d                   	pop    ebp
c0012aad:	c3                   	ret    
c0012aae:	66 90                	xchg   ax,ax

c0012ab0 <TSS::flush()>:
c0012ab0:	55                   	push   ebp
c0012ab1:	89 e5                	mov    ebp,esp
c0012ab3:	83 ec 10             	sub    esp,0x10
c0012ab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ab9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012abb:	83 c8 03             	or     eax,0x3
c0012abe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012ac2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012ac6:	66 89 d0             	mov    ax,dx
c0012ac9:	0f 00 d8             	ltr    ax
c0012acc:	90                   	nop
c0012acd:	c9                   	leave  
c0012ace:	c3                   	ret    
c0012acf:	90                   	nop

c0012ad0 <TSS::setup(unsigned long, unsigned long)>:
c0012ad0:	55                   	push   ebp
c0012ad1:	89 e5                	mov    ebp,esp
c0012ad3:	83 ec 18             	sub    esp,0x18
c0012ad6:	83 ec 0c             	sub    esp,0xc
c0012ad9:	6a 68                	push   0x68
c0012adb:	e8 a8 cc ff ff       	call   c000f788 <malloc>
c0012ae0:	83 c4 10             	add    esp,0x10
c0012ae3:	89 c2                	mov    edx,eax
c0012ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ae8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012aee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012af1:	83 ec 08             	sub    esp,0x8
c0012af4:	50                   	push   eax
c0012af5:	68 48 45 02 c0       	push   0xc0024548
c0012afa:	e8 67 44 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012aff:	83 c4 10             	add    esp,0x10
c0012b02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b08:	83 ec 04             	sub    esp,0x4
c0012b0b:	6a 68                	push   0x68
c0012b0d:	6a 00                	push   0x0
c0012b0f:	50                   	push   eax
c0012b10:	e8 db d9 fe ff       	call   c00004f0 <memset>
c0012b15:	83 c4 10             	add    esp,0x10
c0012b18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b1e:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b2a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b36:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012b39:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b42:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012b48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b4e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012b54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b5a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b66:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b72:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012b78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b7e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012b84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b8a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012b8d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012b90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b96:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012b99:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ba2:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012ba9:	83 ec 0c             	sub    esp,0xc
c0012bac:	68 5f 45 02 c0       	push   0xc002455f
c0012bb1:	e8 b0 43 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012bb6:	83 c4 10             	add    esp,0x10
c0012bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bbf:	0f 20 da             	mov    edx,cr3
c0012bc2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012bc5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012bc8:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012bcb:	83 ec 0c             	sub    esp,0xc
c0012bce:	68 62 45 02 c0       	push   0xc0024562
c0012bd3:	e8 8e 43 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012bd8:	83 c4 10             	add    esp,0x10
c0012bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012be1:	83 ec 08             	sub    esp,0x8
c0012be4:	50                   	push   eax
c0012be5:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012be8:	50                   	push   eax
c0012be9:	e8 ea bc ff ff       	call   c000e8d8 <GDTEntry::setBase(unsigned int)>
c0012bee:	83 c4 10             	add    esp,0x10
c0012bf1:	83 ec 08             	sub    esp,0x8
c0012bf4:	6a 68                	push   0x68
c0012bf6:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012bf9:	50                   	push   eax
c0012bfa:	e8 f5 bc ff ff       	call   c000e8f4 <GDTEntry::setLimit(unsigned int)>
c0012bff:	83 c4 10             	add    esp,0x10
c0012c02:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012c06:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012c09:	83 e0 0f             	and    eax,0xf
c0012c0c:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012c0f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012c12:	83 c8 40             	or     eax,0x40
c0012c15:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012c18:	83 ec 0c             	sub    esp,0xc
c0012c1b:	68 65 45 02 c0       	push   0xc0024565
c0012c20:	e8 41 43 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012c25:	83 c4 10             	add    esp,0x10
c0012c28:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0012c2d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012c33:	83 ec 08             	sub    esp,0x8
c0012c36:	50                   	push   eax
c0012c37:	68 68 45 02 c0       	push   0xc0024568
c0012c3c:	e8 25 43 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012c41:	83 c4 10             	add    esp,0x10
c0012c44:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0012c49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012c4f:	05 64 01 00 00       	add    eax,0x164
c0012c54:	83 ec 04             	sub    esp,0x4
c0012c57:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012c5a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012c5d:	50                   	push   eax
c0012c5e:	e8 c5 bc ff ff       	call   c000e928 <GDT::addEntry(GDTEntry)>
c0012c63:	83 c4 10             	add    esp,0x10
c0012c66:	89 c2                	mov    edx,eax
c0012c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c6b:	89 10                	mov    DWORD PTR [eax],edx
c0012c6d:	83 ec 0c             	sub    esp,0xc
c0012c70:	68 7d 45 02 c0       	push   0xc002457d
c0012c75:	e8 ec 42 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012c7a:	83 c4 10             	add    esp,0x10
c0012c7d:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0012c82:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012c88:	05 64 01 00 00       	add    eax,0x164
c0012c8d:	83 ec 0c             	sub    esp,0xc
c0012c90:	50                   	push   eax
c0012c91:	e8 bc bc ff ff       	call   c000e952 <GDT::flush()>
c0012c96:	83 c4 10             	add    esp,0x10
c0012c99:	83 ec 0c             	sub    esp,0xc
c0012c9c:	68 80 45 02 c0       	push   0xc0024580
c0012ca1:	e8 c0 42 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012ca6:	83 c4 10             	add    esp,0x10
c0012ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cae:	c9                   	leave  
c0012caf:	c3                   	ret    

c0012cb0 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012cb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cbb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012cc0:	75 08                	jne    c0012cca <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012cc2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012cc8:	eb 38                	jmp    c0012d02 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012cca:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012ccf:	75 17                	jne    c0012ce8 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012cd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cd6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012cd9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012cdf:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ce5:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012ce8:	89 c1                	mov    ecx,eax
c0012cea:	83 e1 fd             	and    ecx,0xfffffffd
c0012ced:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012cf3:	74 cd                	je     c0012cc2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012cf5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012cfa:	83 e0 ef             	and    eax,0xffffffef
c0012cfd:	83 f8 08             	cmp    eax,0x8
c0012d00:	76 c0                	jbe    c0012cc2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012d02:	31 c0                	xor    eax,eax
c0012d04:	c3                   	ret    
c0012d05:	90                   	nop

c0012d06 <ReservedFilename::isAtty()>:
c0012d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d0a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012d0d:	31 c0                	xor    eax,eax
c0012d0f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012d15:	74 09                	je     c0012d20 <ReservedFilename::isAtty()+0x1a>
c0012d17:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012d1d:	0f 94 c0             	sete   al
c0012d20:	c3                   	ret    
c0012d21:	90                   	nop

c0012d22 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012d22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d2a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012d2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d31:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012d36:	75 08                	jne    c0012d40 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012d38:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012d3e:	eb 3d                	jmp    c0012d7d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012d40:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012d45:	75 17                	jne    c0012d5e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012d47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012d4f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012d55:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d5b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012d5e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012d63:	75 04                	jne    c0012d69 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012d65:	89 0a                	mov    DWORD PTR [edx],ecx
c0012d67:	eb 14                	jmp    c0012d7d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012d69:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012d6e:	74 c8                	je     c0012d38 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012d70:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012d75:	83 e0 ef             	and    eax,0xffffffef
c0012d78:	83 f8 08             	cmp    eax,0x8
c0012d7b:	76 bb                	jbe    c0012d38 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012d7d:	31 c0                	xor    eax,eax
c0012d7f:	c3                   	ret    

c0012d80 <UnixFile::getFileDescriptor()>:
c0012d80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d87:	c3                   	ret    

c0012d88 <UnixFile::UnixFile(int)>:
c0012d88:	53                   	push   ebx
c0012d89:	83 ec 28             	sub    esp,0x28
c0012d8c:	ba ac 45 02 c0       	mov    edx,0xc00245ac
c0012d91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d95:	89 10                	mov    DWORD PTR [eax],edx
c0012d97:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012d9f:	0f 8f 90 01 00 00    	jg     c0012f35 <UnixFile::UnixFile(int)+0x1ad>
c0012da5:	a1 40 69 02 c0       	mov    eax,ds:0xc0026940
c0012daa:	8d 50 01             	lea    edx,[eax+0x1]
c0012dad:	89 15 40 69 02 c0    	mov    DWORD PTR ds:0xc0026940,edx
c0012db3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012db7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012dba:	83 ec 08             	sub    esp,0x8
c0012dbd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012dc1:	68 78 c2 02 c0       	push   0xc002c278
c0012dc6:	e8 e3 f2 00 00       	call   c00220ae <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012dcb:	83 c4 10             	add    esp,0x10
c0012dce:	a0 74 c2 02 c0       	mov    al,ds:0xc002c274
c0012dd3:	83 f0 01             	xor    eax,0x1
c0012dd6:	0f b6 c0             	movzx  eax,al
c0012dd9:	85 c0                	test   eax,eax
c0012ddb:	0f 84 55 01 00 00    	je     c0012f36 <UnixFile::UnixFile(int)+0x1ae>
c0012de1:	c6 05 74 c2 02 c0 01 	mov    BYTE PTR ds:0xc002c274,0x1
c0012de8:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012df0:	83 ec 0c             	sub    esp,0xc
c0012df3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012df7:	e8 8c c9 ff ff       	call   c000f788 <malloc>
c0012dfc:	83 c4 10             	add    esp,0x10
c0012dff:	89 c3                	mov    ebx,eax
c0012e01:	83 ec 08             	sub    esp,0x8
c0012e04:	68 03 ff ff 0f       	push   0xfffff03
c0012e09:	53                   	push   ebx
c0012e0a:	e8 2d 01 00 00       	call   c0012f3c <ReservedFilename::ReservedFilename(int)>
c0012e0f:	83 c4 10             	add    esp,0x10
c0012e12:	89 1d 6c c2 02 c0    	mov    DWORD PTR ds:0xc002c26c,ebx
c0012e18:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012e20:	83 ec 0c             	sub    esp,0xc
c0012e23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e27:	e8 5c c9 ff ff       	call   c000f788 <malloc>
c0012e2c:	83 c4 10             	add    esp,0x10
c0012e2f:	89 c3                	mov    ebx,eax
c0012e31:	83 ec 08             	sub    esp,0x8
c0012e34:	68 01 ff ff 0f       	push   0xfffff01
c0012e39:	53                   	push   ebx
c0012e3a:	e8 fd 00 00 00       	call   c0012f3c <ReservedFilename::ReservedFilename(int)>
c0012e3f:	83 c4 10             	add    esp,0x10
c0012e42:	89 1d 70 c2 02 c0    	mov    DWORD PTR ds:0xc002c270,ebx
c0012e48:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012e50:	83 ec 0c             	sub    esp,0xc
c0012e53:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012e57:	e8 2c c9 ff ff       	call   c000f788 <malloc>
c0012e5c:	83 c4 10             	add    esp,0x10
c0012e5f:	89 c3                	mov    ebx,eax
c0012e61:	83 ec 08             	sub    esp,0x8
c0012e64:	68 00 ff ff 0f       	push   0xfffff00
c0012e69:	53                   	push   ebx
c0012e6a:	e8 cd 00 00 00       	call   c0012f3c <ReservedFilename::ReservedFilename(int)>
c0012e6f:	83 c4 10             	add    esp,0x10
c0012e72:	89 1d 64 c2 02 c0    	mov    DWORD PTR ds:0xc002c264,ebx
c0012e78:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012e80:	83 ec 0c             	sub    esp,0xc
c0012e83:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012e87:	e8 fc c8 ff ff       	call   c000f788 <malloc>
c0012e8c:	83 c4 10             	add    esp,0x10
c0012e8f:	89 c3                	mov    ebx,eax
c0012e91:	83 ec 08             	sub    esp,0x8
c0012e94:	68 02 ff ff 0f       	push   0xfffff02
c0012e99:	53                   	push   ebx
c0012e9a:	e8 9d 00 00 00       	call   c0012f3c <ReservedFilename::ReservedFilename(int)>
c0012e9f:	83 c4 10             	add    esp,0x10
c0012ea2:	89 1d 68 c2 02 c0    	mov    DWORD PTR ds:0xc002c268,ebx
c0012ea8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012eb0:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012eb5:	7f 7f                	jg     c0012f36 <UnixFile::UnixFile(int)+0x1ae>
c0012eb7:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0012ebf:	83 ec 0c             	sub    esp,0xc
c0012ec2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ec6:	e8 bd c8 ff ff       	call   c000f788 <malloc>
c0012ecb:	83 c4 10             	add    esp,0x10
c0012ece:	89 c3                	mov    ebx,eax
c0012ed0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ed4:	05 10 ff ff 0f       	add    eax,0xfffff10
c0012ed9:	83 ec 08             	sub    esp,0x8
c0012edc:	50                   	push   eax
c0012edd:	53                   	push   ebx
c0012ede:	e8 59 00 00 00       	call   c0012f3c <ReservedFilename::ReservedFilename(int)>
c0012ee3:	83 c4 10             	add    esp,0x10
c0012ee6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012eea:	89 1c 85 40 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3dc0],ebx
c0012ef1:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0012ef9:	83 ec 0c             	sub    esp,0xc
c0012efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f00:	e8 83 c8 ff ff       	call   c000f788 <malloc>
c0012f05:	83 c4 10             	add    esp,0x10
c0012f08:	89 c3                	mov    ebx,eax
c0012f0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f0e:	05 20 ff ff 0f       	add    eax,0xfffff20
c0012f13:	83 ec 08             	sub    esp,0x8
c0012f16:	50                   	push   eax
c0012f17:	53                   	push   ebx
c0012f18:	e8 1f 00 00 00       	call   c0012f3c <ReservedFilename::ReservedFilename(int)>
c0012f1d:	83 c4 10             	add    esp,0x10
c0012f20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f24:	89 1c 85 00 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e00],ebx
c0012f2b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012f30:	e9 7b ff ff ff       	jmp    c0012eb0 <UnixFile::UnixFile(int)+0x128>
c0012f35:	90                   	nop
c0012f36:	83 c4 28             	add    esp,0x28
c0012f39:	5b                   	pop    ebx
c0012f3a:	c3                   	ret    
c0012f3b:	90                   	nop

c0012f3c <ReservedFilename::ReservedFilename(int)>:
c0012f3c:	83 ec 0c             	sub    esp,0xc
c0012f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f43:	83 ec 08             	sub    esp,0x8
c0012f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f4a:	50                   	push   eax
c0012f4b:	e8 38 fe ff ff       	call   c0012d88 <UnixFile::UnixFile(int)>
c0012f50:	83 c4 10             	add    esp,0x10
c0012f53:	ba c8 45 02 c0       	mov    edx,0xc00245c8
c0012f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5c:	89 10                	mov    DWORD PTR [eax],edx
c0012f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f66:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012f69:	90                   	nop
c0012f6a:	83 c4 0c             	add    esp,0xc
c0012f6d:	c3                   	ret    

c0012f6e <UnixFile::~UnixFile()>:
c0012f6e:	83 ec 1c             	sub    esp,0x1c
c0012f71:	ba ac 45 02 c0       	mov    edx,0xc00245ac
c0012f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f7a:	89 10                	mov    DWORD PTR [eax],edx
c0012f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f83:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0012f88:	7f 76                	jg     c0013000 <UnixFile::~UnixFile()+0x92>
c0012f8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012f92:	83 ec 0c             	sub    esp,0xc
c0012f95:	68 78 c2 02 c0       	push   0xc002c278
c0012f9a:	e8 e3 f1 00 00       	call   c0022182 <LinkedList<UnixFile>::getFirstElement()>
c0012f9f:	83 c4 10             	add    esp,0x10
c0012fa2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fa6:	83 ec 0c             	sub    esp,0xc
c0012fa9:	68 78 c2 02 c0       	push   0xc002c278
c0012fae:	e8 d7 f1 00 00       	call   c002218a <LinkedList<UnixFile>::removeFirst()>
c0012fb3:	83 c4 10             	add    esp,0x10
c0012fb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012fba:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0012fbe:	74 43                	je     c0013003 <UnixFile::~UnixFile()+0x95>
c0012fc0:	83 ec 08             	sub    esp,0x8
c0012fc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012fc7:	68 78 c2 02 c0       	push   0xc002c278
c0012fcc:	e8 dd f0 00 00       	call   c00220ae <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012fd1:	83 c4 10             	add    esp,0x10
c0012fd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012fd8:	8d 50 01             	lea    edx,[eax+0x1]
c0012fdb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fdf:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0012fe4:	0f 94 c0             	sete   al
c0012fe7:	0f b6 c0             	movzx  eax,al
c0012fea:	85 c0                	test   eax,eax
c0012fec:	74 a4                	je     c0012f92 <UnixFile::~UnixFile()+0x24>
c0012fee:	83 ec 0c             	sub    esp,0xc
c0012ff1:	68 84 45 02 c0       	push   0xc0024584
c0012ff6:	e8 e9 cb ff ff       	call   c000fbe4 <KePanic(char const*)>
c0012ffb:	83 c4 10             	add    esp,0x10
c0012ffe:	eb 92                	jmp    c0012f92 <UnixFile::~UnixFile()+0x24>
c0013000:	90                   	nop
c0013001:	eb 01                	jmp    c0013004 <UnixFile::~UnixFile()+0x96>
c0013003:	90                   	nop
c0013004:	90                   	nop
c0013005:	83 c4 1c             	add    esp,0x1c
c0013008:	c3                   	ret    
c0013009:	90                   	nop

c001300a <UnixFile::~UnixFile()>:
c001300a:	83 ec 0c             	sub    esp,0xc
c001300d:	83 ec 0c             	sub    esp,0xc
c0013010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013014:	e8 55 ff ff ff       	call   c0012f6e <UnixFile::~UnixFile()>
c0013019:	83 c4 10             	add    esp,0x10
c001301c:	83 ec 08             	sub    esp,0x8
c001301f:	6a 0c                	push   0xc
c0013021:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013025:	e8 92 a2 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c001302a:	83 c4 10             	add    esp,0x10
c001302d:	83 c4 0c             	add    esp,0xc
c0013030:	c3                   	ret    
c0013031:	90                   	nop

c0013032 <ReservedFilename::~ReservedFilename()>:
c0013032:	83 ec 0c             	sub    esp,0xc
c0013035:	ba c8 45 02 c0       	mov    edx,0xc00245c8
c001303a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303e:	89 10                	mov    DWORD PTR [eax],edx
c0013040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013044:	83 ec 0c             	sub    esp,0xc
c0013047:	50                   	push   eax
c0013048:	e8 21 ff ff ff       	call   c0012f6e <UnixFile::~UnixFile()>
c001304d:	83 c4 10             	add    esp,0x10
c0013050:	90                   	nop
c0013051:	83 c4 0c             	add    esp,0xc
c0013054:	c3                   	ret    
c0013055:	90                   	nop

c0013056 <ReservedFilename::~ReservedFilename()>:
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	83 ec 0c             	sub    esp,0xc
c001305c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013060:	e8 cd ff ff ff       	call   c0013032 <ReservedFilename::~ReservedFilename()>
c0013065:	83 c4 10             	add    esp,0x10
c0013068:	83 ec 08             	sub    esp,0x8
c001306b:	6a 0c                	push   0xc
c001306d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013071:	e8 46 a2 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0013076:	83 c4 10             	add    esp,0x10
c0013079:	83 c4 0c             	add    esp,0xc
c001307c:	c3                   	ret    

c001307d <KeGetFileFromDescriptor(int)>:
c001307d:	53                   	push   ebx
c001307e:	83 ec 08             	sub    esp,0x8
c0013081:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013085:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001308b:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0013091:	7f 30                	jg     c00130c3 <KeGetFileFromDescriptor(int)+0x46>
c0013093:	83 ec 0c             	sub    esp,0xc
c0013096:	68 78 c2 02 c0       	push   0xc002c278
c001309b:	e8 e2 f0 00 00       	call   c0022182 <LinkedList<UnixFile>::getFirstElement()>
c00130a0:	8d 50 ff             	lea    edx,[eax-0x1]
c00130a3:	83 c4 10             	add    esp,0x10
c00130a6:	83 fa fd             	cmp    edx,0xfffffffd
c00130a9:	76 04                	jbe    c00130af <KeGetFileFromDescriptor(int)+0x32>
c00130ab:	31 c0                	xor    eax,eax
c00130ad:	eb 6e                	jmp    c001311d <KeGetFileFromDescriptor(int)+0xa0>
c00130af:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00130b2:	74 69                	je     c001311d <KeGetFileFromDescriptor(int)+0xa0>
c00130b4:	52                   	push   edx
c00130b5:	52                   	push   edx
c00130b6:	50                   	push   eax
c00130b7:	68 78 c2 02 c0       	push   0xc002c278
c00130bc:	e8 6b f1 00 00       	call   c002222c <LinkedList<UnixFile>::getNext(UnixFile*)>
c00130c1:	eb dd                	jmp    c00130a0 <KeGetFileFromDescriptor(int)+0x23>
c00130c3:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00130c9:	a1 6c c2 02 c0       	mov    eax,ds:0xc002c26c
c00130ce:	74 4d                	je     c001311d <KeGetFileFromDescriptor(int)+0xa0>
c00130d0:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00130d6:	a1 70 c2 02 c0       	mov    eax,ds:0xc002c270
c00130db:	74 40                	je     c001311d <KeGetFileFromDescriptor(int)+0xa0>
c00130dd:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00130e3:	a1 68 c2 02 c0       	mov    eax,ds:0xc002c268
c00130e8:	74 33                	je     c001311d <KeGetFileFromDescriptor(int)+0xa0>
c00130ea:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00130f0:	a1 64 c2 02 c0       	mov    eax,ds:0xc002c264
c00130f5:	74 26                	je     c001311d <KeGetFileFromDescriptor(int)+0xa0>
c00130f7:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00130fd:	83 f8 08             	cmp    eax,0x8
c0013100:	77 09                	ja     c001310b <KeGetFileFromDescriptor(int)+0x8e>
c0013102:	8b 04 85 40 c2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3dc0]
c0013109:	eb 12                	jmp    c001311d <KeGetFileFromDescriptor(int)+0xa0>
c001310b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0013111:	83 fb 08             	cmp    ebx,0x8
c0013114:	77 95                	ja     c00130ab <KeGetFileFromDescriptor(int)+0x2e>
c0013116:	8b 04 9d 00 c2 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3e00]
c001311d:	83 c4 08             	add    esp,0x8
c0013120:	5b                   	pop    ebx
c0013121:	c3                   	ret    

c0013122 <__static_initialization_and_destruction_0(int, int)>:
c0013122:	83 ec 0c             	sub    esp,0xc
c0013125:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001312a:	75 34                	jne    c0013160 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001312c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013134:	75 2a                	jne    c0013160 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013136:	83 ec 0c             	sub    esp,0xc
c0013139:	68 78 c2 02 c0       	push   0xc002c278
c001313e:	e8 29 ef 00 00       	call   c002206c <LinkedList<UnixFile>::LinkedList()>
c0013143:	83 c4 10             	add    esp,0x10
c0013146:	83 ec 04             	sub    esp,0x4
c0013149:	68 88 61 02 c0       	push   0xc0026188
c001314e:	68 78 c2 02 c0       	push   0xc002c278
c0013153:	68 6a 20 02 c0       	push   0xc002206a
c0013158:	e8 0f a1 ff ff       	call   c000d26c <__cxa_atexit>
c001315d:	83 c4 10             	add    esp,0x10
c0013160:	90                   	nop
c0013161:	83 c4 0c             	add    esp,0xc
c0013164:	c3                   	ret    

c0013165 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0013165:	83 ec 0c             	sub    esp,0xc
c0013168:	83 ec 08             	sub    esp,0x8
c001316b:	68 ff ff 00 00       	push   0xffff
c0013170:	6a 01                	push   0x1
c0013172:	e8 ab ff ff ff       	call   c0013122 <__static_initialization_and_destruction_0(int, int)>
c0013177:	83 c4 10             	add    esp,0x10
c001317a:	83 c4 0c             	add    esp,0xc
c001317d:	c3                   	ret    

c001317e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001317e:	53                   	push   ebx
c001317f:	8b 15 48 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026948
c0013185:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013189:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001318d:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013193:	89 d8                	mov    eax,ebx
c0013195:	d1 e8                	shr    eax,1
c0013197:	01 d0                	add    eax,edx
c0013199:	80 e3 01             	and    bl,0x1
c001319c:	8a 10                	mov    dl,BYTE PTR [eax]
c001319e:	75 09                	jne    c00131a9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00131a0:	83 e2 f0             	and    edx,0xfffffff0
c00131a3:	09 ca                	or     edx,ecx
c00131a5:	88 10                	mov    BYTE PTR [eax],dl
c00131a7:	5b                   	pop    ebx
c00131a8:	c3                   	ret    
c00131a9:	0f b6 c9             	movzx  ecx,cl
c00131ac:	83 e2 0f             	and    edx,0xf
c00131af:	c1 e1 04             	shl    ecx,0x4
c00131b2:	09 ca                	or     edx,ecx
c00131b4:	88 10                	mov    BYTE PTR [eax],dl
c00131b6:	5b                   	pop    ebx
c00131b7:	c3                   	ret    

c00131b8 <Virt::getPageState(unsigned long)>:
c00131b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131bc:	8b 0d 48 69 02 c0    	mov    ecx,DWORD PTR ds:0xc0026948
c00131c2:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00131c8:	89 d0                	mov    eax,edx
c00131ca:	d1 e8                	shr    eax,1
c00131cc:	80 e2 01             	and    dl,0x1
c00131cf:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00131d2:	74 03                	je     c00131d7 <Virt::getPageState(unsigned long)+0x1f>
c00131d4:	c1 e8 04             	shr    eax,0x4
c00131d7:	83 e0 0f             	and    eax,0xf
c00131da:	c3                   	ret    

c00131db <Virt::allocateKernelVirtualPages(int)>:
c00131db:	55                   	push   ebp
c00131dc:	57                   	push   edi
c00131dd:	56                   	push   esi
c00131de:	31 f6                	xor    esi,esi
c00131e0:	53                   	push   ebx
c00131e1:	31 db                	xor    ebx,ebx
c00131e3:	83 ec 1c             	sub    esp,0x1c
c00131e6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00131eb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00131ef:	8b 2d 44 69 02 c0    	mov    ebp,DWORD PTR ds:0xc0026944
c00131f5:	55                   	push   ebp
c00131f6:	e8 bd ff ff ff       	call   c00131b8 <Virt::getPageState(unsigned long)>
c00131fb:	5a                   	pop    edx
c00131fc:	84 c0                	test   al,al
c00131fe:	75 3d                	jne    c001323d <Virt::allocateKernelVirtualPages(int)+0x62>
c0013200:	85 db                	test   ebx,ebx
c0013202:	0f 44 f5             	cmove  esi,ebp
c0013205:	83 c3 01             	add    ebx,0x1
c0013208:	39 fb                	cmp    ebx,edi
c001320a:	74 5e                	je     c001326a <Virt::allocateKernelVirtualPages(int)+0x8f>
c001320c:	83 c5 01             	add    ebp,0x1
c001320f:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013215:	76 33                	jbe    c001324a <Virt::allocateKernelVirtualPages(int)+0x6f>
c0013217:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001321c:	c7 05 44 69 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026944,0xc8000
c0013226:	75 2a                	jne    c0013252 <Virt::allocateKernelVirtualPages(int)+0x77>
c0013228:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001322d:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0013232:	55                   	push   ebp
c0013233:	e8 80 ff ff ff       	call   c00131b8 <Virt::getPageState(unsigned long)>
c0013238:	5a                   	pop    edx
c0013239:	84 c0                	test   al,al
c001323b:	74 c3                	je     c0013200 <Virt::allocateKernelVirtualPages(int)+0x25>
c001323d:	83 c5 01             	add    ebp,0x1
c0013240:	31 db                	xor    ebx,ebx
c0013242:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013248:	77 cd                	ja     c0013217 <Virt::allocateKernelVirtualPages(int)+0x3c>
c001324a:	89 2d 44 69 02 c0    	mov    DWORD PTR ds:0xc0026944,ebp
c0013250:	eb a3                	jmp    c00131f5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0013252:	83 ec 0c             	sub    esp,0xc
c0013255:	68 dc 45 02 c0       	push   0xc00245dc
c001325a:	e8 85 c9 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001325f:	8b 2d 44 69 02 c0    	mov    ebp,DWORD PTR ds:0xc0026944
c0013265:	83 c4 10             	add    esp,0x10
c0013268:	eb 8b                	jmp    c00131f5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001326a:	89 35 44 69 02 c0    	mov    DWORD PTR ds:0xc0026944,esi
c0013270:	83 fb 01             	cmp    ebx,0x1
c0013273:	74 63                	je     c00132d8 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0013275:	85 ff                	test   edi,edi
c0013277:	74 41                	je     c00132ba <Virt::allocateKernelVirtualPages(int)+0xdf>
c0013279:	89 f0                	mov    eax,esi
c001327b:	31 db                	xor    ebx,ebx
c001327d:	8d 6f ff             	lea    ebp,[edi-0x1]
c0013280:	eb 16                	jmp    c0013298 <Virt::allocateKernelVirtualPages(int)+0xbd>
c0013282:	6a 01                	push   0x1
c0013284:	83 c3 01             	add    ebx,0x1
c0013287:	50                   	push   eax
c0013288:	e8 f1 fe ff ff       	call   c001317e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001328d:	39 fb                	cmp    ebx,edi
c001328f:	58                   	pop    eax
c0013290:	5a                   	pop    edx
c0013291:	74 27                	je     c00132ba <Virt::allocateKernelVirtualPages(int)+0xdf>
c0013293:	a1 44 69 02 c0       	mov    eax,ds:0xc0026944
c0013298:	8d 50 01             	lea    edx,[eax+0x1]
c001329b:	85 db                	test   ebx,ebx
c001329d:	89 15 44 69 02 c0    	mov    DWORD PTR ds:0xc0026944,edx
c00132a3:	74 22                	je     c00132c7 <Virt::allocateKernelVirtualPages(int)+0xec>
c00132a5:	39 dd                	cmp    ebp,ebx
c00132a7:	75 d9                	jne    c0013282 <Virt::allocateKernelVirtualPages(int)+0xa7>
c00132a9:	6a 03                	push   0x3
c00132ab:	83 c3 01             	add    ebx,0x1
c00132ae:	50                   	push   eax
c00132af:	e8 ca fe ff ff       	call   c001317e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00132b4:	39 fb                	cmp    ebx,edi
c00132b6:	59                   	pop    ecx
c00132b7:	58                   	pop    eax
c00132b8:	75 d9                	jne    c0013293 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00132ba:	83 c4 1c             	add    esp,0x1c
c00132bd:	89 f0                	mov    eax,esi
c00132bf:	5b                   	pop    ebx
c00132c0:	c1 e0 0c             	shl    eax,0xc
c00132c3:	5e                   	pop    esi
c00132c4:	5f                   	pop    edi
c00132c5:	5d                   	pop    ebp
c00132c6:	c3                   	ret    
c00132c7:	6a 02                	push   0x2
c00132c9:	bb 01 00 00 00       	mov    ebx,0x1
c00132ce:	50                   	push   eax
c00132cf:	e8 aa fe ff ff       	call   c001317e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00132d4:	58                   	pop    eax
c00132d5:	5a                   	pop    edx
c00132d6:	eb bb                	jmp    c0013293 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00132d8:	6a 04                	push   0x4
c00132da:	56                   	push   esi
c00132db:	8d 46 01             	lea    eax,[esi+0x1]
c00132de:	a3 44 69 02 c0       	mov    ds:0xc0026944,eax
c00132e3:	e8 96 fe ff ff       	call   c001317e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00132e8:	89 f0                	mov    eax,esi
c00132ea:	59                   	pop    ecx
c00132eb:	c1 e0 0c             	shl    eax,0xc
c00132ee:	5b                   	pop    ebx
c00132ef:	83 c4 1c             	add    esp,0x1c
c00132f2:	5b                   	pop    ebx
c00132f3:	5e                   	pop    esi
c00132f4:	5f                   	pop    edi
c00132f5:	5d                   	pop    ebp
c00132f6:	c3                   	ret    

c00132f7 <Virt::freeSwapfilePage(unsigned long)>:
c00132f7:	53                   	push   ebx
c00132f8:	8b 15 8c c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c28c
c00132fe:	b8 01 00 00 00       	mov    eax,0x1
c0013303:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013307:	d3 e0                	shl    eax,cl
c0013309:	89 cb                	mov    ebx,ecx
c001330b:	c1 eb 05             	shr    ebx,0x5
c001330e:	f7 d0                	not    eax
c0013310:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013313:	21 c1                	and    ecx,eax
c0013315:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013318:	5b                   	pop    ebx
c0013319:	c3                   	ret    

c001331a <Virt::swapIDToSector(unsigned long)>:
c001331a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001331e:	8b 15 4c 69 02 c0    	mov    edx,DWORD PTR ds:0xc002694c
c0013324:	8b 0d 54 69 02 c0    	mov    ecx,DWORD PTR ds:0xc0026954
c001332a:	0f af c2             	imul   eax,edx
c001332d:	01 c8                	add    eax,ecx
c001332f:	c3                   	ret    

c0013330 <Virt::allocateSwapfilePage()>:
c0013330:	55                   	push   ebp
c0013331:	31 d2                	xor    edx,edx
c0013333:	57                   	push   edi
c0013334:	56                   	push   esi
c0013335:	53                   	push   ebx
c0013336:	83 ec 0c             	sub    esp,0xc
c0013339:	8b 1d 50 69 02 c0    	mov    ebx,DWORD PTR ds:0xc0026950
c001333f:	8b 0d 4c 69 02 c0    	mov    ecx,DWORD PTR ds:0xc002694c
c0013345:	89 d8                	mov    eax,ebx
c0013347:	f7 f1                	div    ecx
c0013349:	39 cb                	cmp    ebx,ecx
c001334b:	72 2f                	jb     c001337c <Virt::allocateSwapfilePage()+0x4c>
c001334d:	8b 35 8c c2 02 c0    	mov    esi,DWORD PTR ds:0xc002c28c
c0013353:	8b 16                	mov    edx,DWORD PTR [esi]
c0013355:	f6 c2 01             	test   dl,0x1
c0013358:	74 3e                	je     c0013398 <Virt::allocateSwapfilePage()+0x68>
c001335a:	31 c9                	xor    ecx,ecx
c001335c:	bf 01 00 00 00       	mov    edi,0x1
c0013361:	eb 12                	jmp    c0013375 <Virt::allocateSwapfilePage()+0x45>
c0013363:	89 ca                	mov    edx,ecx
c0013365:	89 fd                	mov    ebp,edi
c0013367:	c1 ea 05             	shr    edx,0x5
c001336a:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001336d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001336f:	d3 e5                	shl    ebp,cl
c0013371:	85 ea                	test   edx,ebp
c0013373:	74 2c                	je     c00133a1 <Virt::allocateSwapfilePage()+0x71>
c0013375:	83 c1 01             	add    ecx,0x1
c0013378:	39 c8                	cmp    eax,ecx
c001337a:	77 e7                	ja     c0013363 <Virt::allocateSwapfilePage()+0x33>
c001337c:	83 ec 0c             	sub    esp,0xc
c001337f:	68 ef 48 02 c0       	push   0xc00248ef
c0013384:	e8 5b c8 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0013389:	83 c4 10             	add    esp,0x10
c001338c:	31 c9                	xor    ecx,ecx
c001338e:	83 c4 0c             	add    esp,0xc
c0013391:	89 c8                	mov    eax,ecx
c0013393:	5b                   	pop    ebx
c0013394:	5e                   	pop    esi
c0013395:	5f                   	pop    edi
c0013396:	5d                   	pop    ebp
c0013397:	c3                   	ret    
c0013398:	89 f3                	mov    ebx,esi
c001339a:	bd 01 00 00 00       	mov    ebp,0x1
c001339f:	31 c9                	xor    ecx,ecx
c00133a1:	09 ea                	or     edx,ebp
c00133a3:	89 c8                	mov    eax,ecx
c00133a5:	89 13                	mov    DWORD PTR [ebx],edx
c00133a7:	83 c4 0c             	add    esp,0xc
c00133aa:	5b                   	pop    ebx
c00133ab:	5e                   	pop    esi
c00133ac:	5f                   	pop    edi
c00133ad:	5d                   	pop    ebp
c00133ae:	c3                   	ret    

c00133af <Virt::virtualMemorySetup()>:
c00133af:	53                   	push   ebx
c00133b0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00133b5:	6a 0f                	push   0xf
c00133b7:	53                   	push   ebx
c00133b8:	83 c3 01             	add    ebx,0x1
c00133bb:	e8 be fd ff ff       	call   c001317e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00133c0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00133c6:	58                   	pop    eax
c00133c7:	5a                   	pop    edx
c00133c8:	75 eb                	jne    c00133b5 <Virt::virtualMemorySetup()+0x6>
c00133ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00133cf:	6a 00                	push   0x0
c00133d1:	53                   	push   ebx
c00133d2:	83 c3 01             	add    ebx,0x1
c00133d5:	e8 a4 fd ff ff       	call   c001317e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00133da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00133e0:	59                   	pop    ecx
c00133e1:	58                   	pop    eax
c00133e2:	75 eb                	jne    c00133cf <Virt::virtualMemorySetup()+0x20>
c00133e4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00133e9:	6a 0f                	push   0xf
c00133eb:	53                   	push   ebx
c00133ec:	83 c3 01             	add    ebx,0x1
c00133ef:	e8 8a fd ff ff       	call   c001317e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00133f4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00133fa:	58                   	pop    eax
c00133fb:	5a                   	pop    edx
c00133fc:	75 eb                	jne    c00133e9 <Virt::virtualMemorySetup()+0x3a>
c00133fe:	5b                   	pop    ebx
c00133ff:	c3                   	ret    

c0013400 <Virt::setupPageSwapping(int)>:
c0013400:	53                   	push   ebx
c0013401:	83 ec 0c             	sub    esp,0xc
c0013404:	a1 e8 ba 02 c0       	mov    eax,ds:0xc002bae8
c0013409:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001340d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013413:	8b 10                	mov    edx,DWORD PTR [eax]
c0013415:	53                   	push   ebx
c0013416:	68 06 49 02 c0       	push   0xc0024906
c001341b:	50                   	push   eax
c001341c:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001341f:	c1 e3 0b             	shl    ebx,0xb
c0013422:	89 1d 50 69 02 c0    	mov    DWORD PTR ds:0xc0026950,ebx
c0013428:	c1 eb 08             	shr    ebx,0x8
c001342b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001342e:	c6 05 58 69 02 c0 43 	mov    BYTE PTR ds:0xc0026958,0x43
c0013435:	c7 05 4c 69 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002694c,0x8
c001343f:	a3 54 69 02 c0       	mov    ds:0xc0026954,eax
c0013444:	e8 3f c3 ff ff       	call   c000f788 <malloc>
c0013449:	31 d2                	xor    edx,edx
c001344b:	83 c4 0c             	add    esp,0xc
c001344e:	a3 8c c2 02 c0       	mov    ds:0xc002c28c,eax
c0013453:	89 c1                	mov    ecx,eax
c0013455:	a1 50 69 02 c0       	mov    eax,ds:0xc0026950
c001345a:	f7 35 4c 69 02 c0    	div    DWORD PTR ds:0xc002694c
c0013460:	c1 e8 05             	shr    eax,0x5
c0013463:	50                   	push   eax
c0013464:	6a 00                	push   0x0
c0013466:	51                   	push   ecx
c0013467:	e8 84 d0 fe ff       	call   c00004f0 <memset>
c001346c:	83 c4 18             	add    esp,0x18
c001346f:	5b                   	pop    ebx
c0013470:	c3                   	ret    
c0013471:	90                   	nop

c0013472 <VAS::setCPUSpecific(unsigned long)>:
c0013472:	c3                   	ret    
c0013473:	90                   	nop

c0013474 <VAS::VAS(VAS*)>:
c0013474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013478:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001347f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013483:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001348a:	90                   	nop
c001348b:	c3                   	ret    

c001348c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001348c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013490:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0013495:	89 c2                	mov    edx,eax
c0013497:	c1 ea 16             	shr    edx,0x16
c001349a:	c1 e8 0a             	shr    eax,0xa
c001349d:	83 f9 01             	cmp    ecx,0x1
c00134a0:	19 c9                	sbb    ecx,ecx
c00134a2:	25 fc 0f 00 00       	and    eax,0xffc
c00134a7:	c1 e2 0c             	shl    edx,0xc
c00134aa:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00134b0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00134b7:	01 d0                	add    eax,edx
c00134b9:	c3                   	ret    

c00134ba <VAS::getPageTableEntry(unsigned long)>:
c00134ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00134be:	89 ca                	mov    edx,ecx
c00134c0:	c1 ea 16             	shr    edx,0x16
c00134c3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00134c9:	c1 e9 0a             	shr    ecx,0xa
c00134cc:	c1 e0 0c             	shl    eax,0xc
c00134cf:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00134d5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00134d8:	c3                   	ret    

c00134d9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00134d9:	55                   	push   ebp
c00134da:	57                   	push   edi
c00134db:	bf 01 00 00 00       	mov    edi,0x1
c00134e0:	56                   	push   esi
c00134e1:	53                   	push   ebx
c00134e2:	83 ec 1c             	sub    esp,0x1c
c00134e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00134e9:	c1 ee 0c             	shr    esi,0xc
c00134ec:	eb 48                	jmp    c0013536 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00134ee:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c00134f3:	83 ec 08             	sub    esp,0x8
c00134f6:	55                   	push   ebp
c00134f7:	50                   	push   eax
c00134f8:	e8 bd ff ff ff       	call   c00134ba <VAS::getPageTableEntry(unsigned long)>
c00134fd:	83 c4 10             	add    esp,0x10
c0013500:	8b 10                	mov    edx,DWORD PTR [eax]
c0013502:	f6 c6 04             	test   dh,0x4
c0013505:	75 70                	jne    c0013577 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013507:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001350d:	83 fb 04             	cmp    ebx,0x4
c0013510:	0f 84 8a 00 00 00    	je     c00135a0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013516:	83 fb 02             	cmp    ebx,0x2
c0013519:	0f 84 9a 00 00 00    	je     c00135b9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001351f:	83 fb 03             	cmp    ebx,0x3
c0013522:	0f 84 be 00 00 00    	je     c00135e6 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013528:	83 fb 01             	cmp    ebx,0x1
c001352b:	0f 84 a2 00 00 00    	je     c00135d3 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013531:	83 c6 01             	add    esi,0x1
c0013534:	31 ff                	xor    edi,edi
c0013536:	56                   	push   esi
c0013537:	89 f5                	mov    ebp,esi
c0013539:	e8 7a fc ff ff       	call   c00131b8 <Virt::getPageState(unsigned long)>
c001353e:	c1 e5 0c             	shl    ebp,0xc
c0013541:	5a                   	pop    edx
c0013542:	0f b6 d8             	movzx  ebx,al
c0013545:	85 db                	test   ebx,ebx
c0013547:	75 a5                	jne    c00134ee <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013549:	83 ec 0c             	sub    esp,0xc
c001354c:	68 1d 49 02 c0       	push   0xc002491d
c0013551:	e8 8e c6 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0013556:	5a                   	pop    edx
c0013557:	59                   	pop    ecx
c0013558:	55                   	push   ebp
c0013559:	8b 2d 90 c2 02 c0    	mov    ebp,DWORD PTR ds:0xc002c290
c001355f:	55                   	push   ebp
c0013560:	e8 55 ff ff ff       	call   c00134ba <VAS::getPageTableEntry(unsigned long)>
c0013565:	83 c4 10             	add    esp,0x10
c0013568:	8b 10                	mov    edx,DWORD PTR [eax]
c001356a:	f6 c6 04             	test   dh,0x4
c001356d:	75 08                	jne    c0013577 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001356f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013575:	eb ba                	jmp    c0013531 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013577:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001357b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013581:	83 ec 0c             	sub    esp,0xc
c0013584:	52                   	push   edx
c0013585:	e8 eb c7 ff ff       	call   c000fd75 <Phys::freePage(unsigned long)>
c001358a:	83 c4 10             	add    esp,0x10
c001358d:	83 fb 04             	cmp    ebx,0x4
c0013590:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013594:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001359a:	0f 85 76 ff ff ff    	jne    c0013516 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00135a0:	83 e7 01             	and    edi,0x1
c00135a3:	75 46                	jne    c00135eb <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00135a5:	c7 44 24 30 fc 45 02 c0 	mov    DWORD PTR [esp+0x30],0xc00245fc
c00135ad:	83 c4 1c             	add    esp,0x1c
c00135b0:	5b                   	pop    ebx
c00135b1:	5e                   	pop    esi
c00135b2:	5f                   	pop    edi
c00135b3:	5d                   	pop    ebp
c00135b4:	e9 2b c6 ff ff       	jmp    c000fbe4 <KePanic(char const*)>
c00135b9:	83 e7 01             	and    edi,0x1
c00135bc:	75 15                	jne    c00135d3 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00135be:	83 ec 0c             	sub    esp,0xc
c00135c1:	68 39 49 02 c0       	push   0xc0024939
c00135c6:	e8 19 c6 ff ff       	call   c000fbe4 <KePanic(char const*)>
c00135cb:	83 c4 10             	add    esp,0x10
c00135ce:	e9 5e ff ff ff       	jmp    c0013531 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00135d3:	83 ec 08             	sub    esp,0x8
c00135d6:	6a 00                	push   0x0
c00135d8:	56                   	push   esi
c00135d9:	e8 a0 fb ff ff       	call   c001317e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135de:	83 c4 10             	add    esp,0x10
c00135e1:	e9 4b ff ff ff       	jmp    c0013531 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00135e6:	83 e7 01             	and    edi,0x1
c00135e9:	75 16                	jne    c0013601 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00135eb:	83 ec 08             	sub    esp,0x8
c00135ee:	6a 00                	push   0x0
c00135f0:	56                   	push   esi
c00135f1:	e8 88 fb ff ff       	call   c001317e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135f6:	83 c4 10             	add    esp,0x10
c00135f9:	83 c4 1c             	add    esp,0x1c
c00135fc:	5b                   	pop    ebx
c00135fd:	5e                   	pop    esi
c00135fe:	5f                   	pop    edi
c00135ff:	5d                   	pop    ebp
c0013600:	c3                   	ret    
c0013601:	c7 44 24 30 55 49 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024955
c0013609:	83 c4 1c             	add    esp,0x1c
c001360c:	5b                   	pop    ebx
c001360d:	5e                   	pop    esi
c001360e:	5f                   	pop    edi
c001360f:	5d                   	pop    ebp
c0013610:	e9 cf c5 ff ff       	jmp    c000fbe4 <KePanic(char const*)>
c0013615:	90                   	nop

c0013616 <VAS::freeAllocatedPages(unsigned long)>:
c0013616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001361a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001361e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013622:	74 09                	je     c001362d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0013624:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013628:	e9 ac fe ff ff       	jmp    c00134d9 <Virt::freeKernelVirtualPages(unsigned long)>
c001362d:	c7 44 24 04 20 46 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024620
c0013635:	e9 2c 39 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c001363a <VAS::virtualToPhysical(unsigned long)>:
c001363a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001363e:	50                   	push   eax
c001363f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013643:	52                   	push   edx
c0013644:	e8 71 fe ff ff       	call   c00134ba <VAS::getPageTableEntry(unsigned long)>
c0013649:	59                   	pop    ecx
c001364a:	5a                   	pop    edx
c001364b:	8b 00                	mov    eax,DWORD PTR [eax]
c001364d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013652:	c3                   	ret    
c0013653:	90                   	nop

c0013654 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013654:	55                   	push   ebp
c0013655:	57                   	push   edi
c0013656:	56                   	push   esi
c0013657:	53                   	push   ebx
c0013658:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001365c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013660:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013664:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013668:	85 db                	test   ebx,ebx
c001366a:	7e 24                	jle    c0013690 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c001366c:	c1 e3 0c             	shl    ebx,0xc
c001366f:	01 f3                	add    ebx,esi
c0013671:	56                   	push   esi
c0013672:	81 c6 00 10 00 00    	add    esi,0x1000
c0013678:	55                   	push   ebp
c0013679:	e8 3c fe ff ff       	call   c00134ba <VAS::getPageTableEntry(unsigned long)>
c001367e:	5a                   	pop    edx
c001367f:	59                   	pop    ecx
c0013680:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013682:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013686:	21 f9                	and    ecx,edi
c0013688:	09 d1                	or     ecx,edx
c001368a:	39 f3                	cmp    ebx,esi
c001368c:	89 08                	mov    DWORD PTR [eax],ecx
c001368e:	75 e1                	jne    c0013671 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0013690:	5b                   	pop    ebx
c0013691:	5e                   	pop    esi
c0013692:	5f                   	pop    edi
c0013693:	5d                   	pop    ebp
c0013694:	c3                   	ret    
c0013695:	90                   	nop

c0013696 <VAS::VAS()>:
c0013696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001369a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00136ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136b0:	a3 90 c2 02 c0       	mov    ds:0xc002c290,eax
c00136b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136b9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00136bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136c1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00136c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136c8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00136cf:	ba 7d 70 02 c0       	mov    edx,0xc002707d
c00136d4:	b8 00 70 02 c0       	mov    eax,0xc0027000
c00136d9:	29 c2                	sub    edx,eax
c00136db:	89 d0                	mov    eax,edx
c00136dd:	05 ff 0f 00 00       	add    eax,0xfff
c00136e2:	c1 e8 0c             	shr    eax,0xc
c00136e5:	89 c2                	mov    edx,eax
c00136e7:	b8 00 70 02 c0       	mov    eax,0xc0027000
c00136ec:	6a 04                	push   0x4
c00136ee:	6a ff                	push   0xffffffff
c00136f0:	52                   	push   edx
c00136f1:	50                   	push   eax
c00136f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00136f6:	e8 59 ff ff ff       	call   c0013654 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00136fb:	83 c4 14             	add    esp,0x14
c00136fe:	90                   	nop
c00136ff:	c3                   	ret    

c0013700 <VAS::setToWriteCombining(unsigned long, int)>:
c0013700:	a1 64 cb 02 c0       	mov    eax,ds:0xc002cb64
c0013705:	50                   	push   eax
c0013706:	6a ff                	push   0xffffffff
c0013708:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001370c:	52                   	push   edx
c001370d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013711:	51                   	push   ecx
c0013712:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013716:	50                   	push   eax
c0013717:	e8 38 ff ff ff       	call   c0013654 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001371c:	83 c4 14             	add    esp,0x14
c001371f:	c3                   	ret    

c0013720 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013724:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013727:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001372b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001372e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013733:	83 f8 01             	cmp    eax,0x1
c0013736:	19 c0                	sbb    eax,eax
c0013738:	83 ca 03             	or     edx,0x3
c001373b:	83 e0 fc             	and    eax,0xfffffffc
c001373e:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013745:	0f 20 d8             	mov    eax,cr3
c0013748:	0f 22 d8             	mov    cr3,eax
c001374b:	c3                   	ret    

c001374c <VAS::~VAS()>:
c001374c:	83 ec 2c             	sub    esp,0x2c
c001374f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013757:	fa                   	cli    
c0013758:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001375d:	83 c0 01             	add    eax,0x1
c0013760:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0013765:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001376a:	8b 00                	mov    eax,DWORD PTR [eax]
c001376c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001376f:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013775:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013779:	6a 01                	push   0x1
c001377b:	50                   	push   eax
c001377c:	e8 9f ff ff ff       	call   c0013720 <VAS::mapOtherVASIn(bool, VAS*)>
c0013781:	83 c4 0c             	add    esp,0xc
c0013784:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001378c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013794:	0f 8f d8 00 00 00    	jg     c0013872 <VAS::~VAS()+0x126>
c001379a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001379e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00137a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00137a5:	c1 e2 02             	shl    edx,0x2
c00137a8:	01 d0                	add    eax,edx
c00137aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00137ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b4:	83 e0 01             	and    eax,0x1
c00137b7:	0f 84 ab 00 00 00    	je     c0013868 <VAS::~VAS()+0x11c>
c00137bd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00137c5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00137cd:	7f 74                	jg     c0013843 <VAS::~VAS()+0xf7>
c00137cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137d3:	c1 e0 0a             	shl    eax,0xa
c00137d6:	89 c2                	mov    edx,eax
c00137d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137dc:	01 d0                	add    eax,edx
c00137de:	c1 e0 0c             	shl    eax,0xc
c00137e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137e5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00137ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00137ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00137ef:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00137f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00137f9:	6a 01                	push   0x1
c00137fb:	50                   	push   eax
c00137fc:	e8 8b fc ff ff       	call   c001348c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013801:	83 c4 0c             	add    esp,0xc
c0013804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013808:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001380c:	8b 00                	mov    eax,DWORD PTR [eax]
c001380e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013816:	25 01 04 00 00       	and    eax,0x401
c001381b:	3d 01 04 00 00       	cmp    eax,0x401
c0013820:	75 1a                	jne    c001383c <VAS::~VAS()+0xf0>
c0013822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013826:	25 00 f0 ff ff       	and    eax,0xfffff000
c001382b:	83 ec 0c             	sub    esp,0xc
c001382e:	50                   	push   eax
c001382f:	e8 41 c5 ff ff       	call   c000fd75 <Phys::freePage(unsigned long)>
c0013834:	83 c4 10             	add    esp,0x10
c0013837:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001383c:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013841:	eb 82                	jmp    c00137c5 <VAS::~VAS()+0x79>
c0013843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013847:	25 00 04 00 00       	and    eax,0x400
c001384c:	74 1a                	je     c0013868 <VAS::~VAS()+0x11c>
c001384e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013852:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013857:	83 ec 0c             	sub    esp,0xc
c001385a:	50                   	push   eax
c001385b:	e8 15 c5 ff ff       	call   c000fd75 <Phys::freePage(unsigned long)>
c0013860:	83 c4 10             	add    esp,0x10
c0013863:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013868:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001386d:	e9 1a ff ff ff       	jmp    c001378c <VAS::~VAS()+0x40>
c0013872:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013876:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013879:	83 ec 0c             	sub    esp,0xc
c001387c:	50                   	push   eax
c001387d:	e8 57 fc ff ff       	call   c00134d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0013882:	83 c4 10             	add    esp,0x10
c0013885:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013889:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001388c:	83 ec 0c             	sub    esp,0xc
c001388f:	50                   	push   eax
c0013890:	e8 e0 c4 ff ff       	call   c000fd75 <Phys::freePage(unsigned long)>
c0013895:	83 c4 10             	add    esp,0x10
c0013898:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001389d:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00138a5:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00138aa:	85 c0                	test   eax,eax
c00138ac:	75 01                	jne    c00138af <VAS::~VAS()+0x163>
c00138ae:	fb                   	sti    
c00138af:	90                   	nop
c00138b0:	83 c4 2c             	add    esp,0x2c
c00138b3:	c3                   	ret    

c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00138b4:	55                   	push   ebp
c00138b5:	57                   	push   edi
c00138b6:	56                   	push   esi
c00138b7:	53                   	push   ebx
c00138b8:	83 ec 1c             	sub    esp,0x1c
c00138bb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00138bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00138c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00138c7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00138cd:	77 08                	ja     c00138d7 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c00138cf:	0f 20 d8             	mov    eax,cr3
c00138d2:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00138d5:	75 43                	jne    c001391a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00138d7:	89 d8                	mov    eax,ebx
c00138d9:	09 f8                	or     eax,edi
c00138db:	a9 ff 0f 00 00       	test   eax,0xfff
c00138e0:	75 53                	jne    c0013935 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c00138e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00138e5:	89 de                	mov    esi,ebx
c00138e7:	c1 ee 16             	shr    esi,0x16
c00138ea:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00138f1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00138f5:	74 50                	je     c0013947 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c00138f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00138fb:	c1 eb 0a             	shr    ebx,0xa
c00138fe:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013904:	c1 e6 0c             	shl    esi,0xc
c0013907:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001390d:	09 c7                	or     edi,eax
c001390f:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0013912:	83 c4 1c             	add    esp,0x1c
c0013915:	5b                   	pop    ebx
c0013916:	5e                   	pop    esi
c0013917:	5f                   	pop    edi
c0013918:	5d                   	pop    ebp
c0013919:	c3                   	ret    
c001391a:	83 ec 0c             	sub    esp,0xc
c001391d:	68 44 46 02 c0       	push   0xc0024644
c0013922:	e8 3f 36 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013927:	89 d8                	mov    eax,ebx
c0013929:	83 c4 10             	add    esp,0x10
c001392c:	09 f8                	or     eax,edi
c001392e:	a9 ff 0f 00 00       	test   eax,0xfff
c0013933:	74 ad                	je     c00138e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013935:	83 ec 0c             	sub    esp,0xc
c0013938:	68 ac 46 02 c0       	push   0xc00246ac
c001393d:	e8 a2 c2 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0013942:	83 c4 10             	add    esp,0x10
c0013945:	eb 9b                	jmp    c00138e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013947:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001394b:	e8 8e c4 ff ff       	call   c000fdde <Phys::allocatePage()>
c0013950:	8b 0d 90 c2 02 c0    	mov    ecx,DWORD PTR ds:0xc002c290
c0013956:	83 ec 0c             	sub    esp,0xc
c0013959:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001395d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013961:	6a 01                	push   0x1
c0013963:	e8 73 f8 ff ff       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c0013968:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001396f:	6a 01                	push   0x1
c0013971:	50                   	push   eax
c0013972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013976:	52                   	push   edx
c0013977:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001397b:	51                   	push   ecx
c001397c:	e8 2d 01 00 00       	call   c0013aae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013981:	83 c4 1c             	add    esp,0x1c
c0013984:	68 00 10 00 00       	push   0x1000
c0013989:	6a 00                	push   0x0
c001398b:	50                   	push   eax
c001398c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013990:	e8 5b cb fe ff       	call   c00004f0 <memset>
c0013995:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013999:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001399c:	e8 38 fb ff ff       	call   c00134d9 <Virt::freeKernelVirtualPages(unsigned long)>
c00139a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00139a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00139a9:	83 c4 10             	add    esp,0x10
c00139ac:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00139af:	0d 07 04 00 00       	or     eax,0x407
c00139b4:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c00139b7:	e9 3b ff ff ff       	jmp    c00138f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c00139bc <VAS::allocatePages(int, int)>:
c00139bc:	55                   	push   ebp
c00139bd:	57                   	push   edi
c00139be:	56                   	push   esi
c00139bf:	53                   	push   ebx
c00139c0:	83 ec 1c             	sub    esp,0x1c
c00139c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00139c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00139cb:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00139cf:	75 75                	jne    c0013a46 <VAS::allocatePages(int, int)+0x8a>
c00139d1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00139d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139d8:	85 c0                	test   eax,eax
c00139da:	74 49                	je     c0013a25 <VAS::allocatePages(int, int)+0x69>
c00139dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00139e0:	89 d5                	mov    ebp,edx
c00139e2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00139e6:	c1 e5 0c             	shl    ebp,0xc
c00139e9:	01 dd                	add    ebp,ebx
c00139eb:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00139ee:	81 cf 00 04 00 00    	or     edi,0x400
c00139f4:	85 d2                	test   edx,edx
c00139f6:	7e 1b                	jle    c0013a13 <VAS::allocatePages(int, int)+0x57>
c00139f8:	e8 e1 c3 ff ff       	call   c000fdde <Phys::allocatePage()>
c00139fd:	57                   	push   edi
c00139fe:	53                   	push   ebx
c00139ff:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013a05:	50                   	push   eax
c0013a06:	56                   	push   esi
c0013a07:	e8 a8 fe ff ff       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a0c:	83 c4 10             	add    esp,0x10
c0013a0f:	39 dd                	cmp    ebp,ebx
c0013a11:	75 e5                	jne    c00139f8 <VAS::allocatePages(int, int)+0x3c>
c0013a13:	0f 20 d8             	mov    eax,cr3
c0013a16:	0f 22 d8             	mov    cr3,eax
c0013a19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a1d:	83 c4 1c             	add    esp,0x1c
c0013a20:	5b                   	pop    ebx
c0013a21:	5e                   	pop    esi
c0013a22:	5f                   	pop    edi
c0013a23:	5d                   	pop    ebp
c0013a24:	c3                   	ret    
c0013a25:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013a29:	83 ec 0c             	sub    esp,0xc
c0013a2c:	68 d0 46 02 c0       	push   0xc00246d0
c0013a31:	e8 ae c1 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0013a36:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013a39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a3d:	83 c4 10             	add    esp,0x10
c0013a40:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013a44:	eb 96                	jmp    c00139dc <VAS::allocatePages(int, int)+0x20>
c0013a46:	83 ec 0c             	sub    esp,0xc
c0013a49:	52                   	push   edx
c0013a4a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0013a4e:	e8 88 f7 ff ff       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c0013a53:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a57:	83 c4 10             	add    esp,0x10
c0013a5a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013a5f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013a63:	77 38                	ja     c0013a9d <VAS::allocatePages(int, int)+0xe1>
c0013a65:	85 d2                	test   edx,edx
c0013a67:	7e aa                	jle    c0013a13 <VAS::allocatePages(int, int)+0x57>
c0013a69:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013a6d:	c1 e2 0c             	shl    edx,0xc
c0013a70:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a74:	81 cf 00 04 00 00    	or     edi,0x400
c0013a7a:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0013a7d:	e8 5c c3 ff ff       	call   c000fdde <Phys::allocatePage()>
c0013a82:	57                   	push   edi
c0013a83:	53                   	push   ebx
c0013a84:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013a8a:	50                   	push   eax
c0013a8b:	56                   	push   esi
c0013a8c:	e8 23 fe ff ff       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a91:	83 c4 10             	add    esp,0x10
c0013a94:	39 dd                	cmp    ebp,ebx
c0013a96:	75 e5                	jne    c0013a7d <VAS::allocatePages(int, int)+0xc1>
c0013a98:	e9 76 ff ff ff       	jmp    c0013a13 <VAS::allocatePages(int, int)+0x57>
c0013a9d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013aa1:	a1 68 cb 02 c0       	mov    eax,ds:0xc002cb68
c0013aa6:	09 c1                	or     ecx,eax
c0013aa8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013aac:	eb b7                	jmp    c0013a65 <VAS::allocatePages(int, int)+0xa9>

c0013aae <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013aae:	55                   	push   ebp
c0013aaf:	57                   	push   edi
c0013ab0:	56                   	push   esi
c0013ab1:	53                   	push   ebx
c0013ab2:	83 ec 1c             	sub    esp,0x1c
c0013ab5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013ab9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013abd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013ac1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0013ac5:	85 db                	test   ebx,ebx
c0013ac7:	7e 2c                	jle    c0013af5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0013ac9:	c1 e3 0c             	shl    ebx,0xc
c0013acc:	8d 04 33             	lea    eax,[ebx+esi*1]
c0013acf:	89 f3                	mov    ebx,esi
c0013ad1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ad5:	55                   	push   ebp
c0013ad6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013ada:	29 f2                	sub    edx,esi
c0013adc:	01 da                	add    edx,ebx
c0013ade:	52                   	push   edx
c0013adf:	53                   	push   ebx
c0013ae0:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013ae6:	57                   	push   edi
c0013ae7:	e8 c8 fd ff ff       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013aec:	83 c4 10             	add    esp,0x10
c0013aef:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0013af3:	75 e0                	jne    c0013ad5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0013af5:	0f 20 d8             	mov    eax,cr3
c0013af8:	0f 22 d8             	mov    cr3,eax
c0013afb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013aff:	83 c4 1c             	add    esp,0x1c
c0013b02:	5b                   	pop    ebx
c0013b03:	5e                   	pop    esi
c0013b04:	5f                   	pop    edi
c0013b05:	5d                   	pop    ebp
c0013b06:	c3                   	ret    
c0013b07:	90                   	nop

c0013b08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013b08:	55                   	push   ebp
c0013b09:	57                   	push   edi
c0013b0a:	56                   	push   esi
c0013b0b:	53                   	push   ebx
c0013b0c:	83 ec 1c             	sub    esp,0x1c
c0013b0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013b13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013b17:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013b1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013b23:	09 d8                	or     eax,ebx
c0013b25:	a9 ff 0f 00 00       	test   eax,0xfff
c0013b2a:	75 4b                	jne    c0013b77 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013b2c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013b2f:	89 de                	mov    esi,ebx
c0013b31:	c1 ee 16             	shr    esi,0x16
c0013b34:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0013b3b:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0013b3f:	74 48                	je     c0013b89 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0013b41:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0013b46:	c1 eb 0a             	shr    ebx,0xa
c0013b49:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013b4d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013b51:	83 ff 01             	cmp    edi,0x1
c0013b54:	19 c0                	sbb    eax,eax
c0013b56:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013b5c:	c1 e6 0c             	shl    esi,0xc
c0013b5f:	25 00 00 c0 ff       	and    eax,0xffc00000
c0013b64:	01 f3                	add    ebx,esi
c0013b66:	09 ca                	or     edx,ecx
c0013b68:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0013b6f:	83 c4 1c             	add    esp,0x1c
c0013b72:	5b                   	pop    ebx
c0013b73:	5e                   	pop    esi
c0013b74:	5f                   	pop    edi
c0013b75:	5d                   	pop    ebp
c0013b76:	c3                   	ret    
c0013b77:	83 ec 0c             	sub    esp,0xc
c0013b7a:	68 fc 46 02 c0       	push   0xc00246fc
c0013b7f:	e8 60 c0 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0013b84:	83 c4 10             	add    esp,0x10
c0013b87:	eb a3                	jmp    c0013b2c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0013b89:	e8 50 c2 ff ff       	call   c000fdde <Phys::allocatePage()>
c0013b8e:	8b 0d 90 c2 02 c0    	mov    ecx,DWORD PTR ds:0xc002c290
c0013b94:	83 ec 0c             	sub    esp,0xc
c0013b97:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013b9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b9f:	6a 01                	push   0x1
c0013ba1:	e8 35 f6 ff ff       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c0013ba6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013bad:	6a 01                	push   0x1
c0013baf:	50                   	push   eax
c0013bb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bb4:	50                   	push   eax
c0013bb5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013bb9:	51                   	push   ecx
c0013bba:	e8 ef fe ff ff       	call   c0013aae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013bbf:	83 c4 1c             	add    esp,0x1c
c0013bc2:	68 00 10 00 00       	push   0x1000
c0013bc7:	6a 00                	push   0x0
c0013bc9:	50                   	push   eax
c0013bca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013bce:	e8 1d c9 fe ff       	call   c00004f0 <memset>
c0013bd3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013bd7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013bda:	e8 fa f8 ff ff       	call   c00134d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0013bdf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013be9:	81 ca 07 04 00 00    	or     edx,0x407
c0013bef:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0013bf2:	e9 4a ff ff ff       	jmp    c0013b41 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0013bf7:	90                   	nop

c0013bf8 <VAS::VAS(bool)>:
c0013bf8:	53                   	push   ebx
c0013bf9:	83 ec 28             	sub    esp,0x28
c0013bfc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c00:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013c04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c08:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c13:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013c1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c1e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013c22:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013c25:	e8 b4 c1 ff ff       	call   c000fdde <Phys::allocatePage()>
c0013c2a:	89 c2                	mov    edx,eax
c0013c2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c30:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013c33:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c0013c39:	83 ec 0c             	sub    esp,0xc
c0013c3c:	6a 01                	push   0x1
c0013c3e:	e8 98 f5 ff ff       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c0013c43:	83 c4 10             	add    esp,0x10
c0013c46:	89 c2                	mov    edx,eax
c0013c48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c4c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013c4f:	83 ec 0c             	sub    esp,0xc
c0013c52:	6a 03                	push   0x3
c0013c54:	6a 01                	push   0x1
c0013c56:	52                   	push   edx
c0013c57:	50                   	push   eax
c0013c58:	53                   	push   ebx
c0013c59:	e8 50 fe ff ff       	call   c0013aae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013c5e:	83 c4 20             	add    esp,0x20
c0013c61:	89 c2                	mov    edx,eax
c0013c63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c67:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013c6a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013c72:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013c7a:	7f 1d                	jg     c0013c99 <VAS::VAS(bool)+0xa1>
c0013c7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c87:	c1 e2 02             	shl    edx,0x2
c0013c8a:	01 d0                	add    eax,edx
c0013c8c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013c92:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013c97:	eb d9                	jmp    c0013c72 <VAS::VAS(bool)+0x7a>
c0013c99:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013ca1:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013ca9:	7f 59                	jg     c0013d04 <VAS::VAS(bool)+0x10c>
c0013cab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013caf:	2d 00 02 00 00       	sub    eax,0x200
c0013cb4:	c1 e0 0c             	shl    eax,0xc
c0013cb7:	89 c2                	mov    edx,eax
c0013cb9:	a1 68 cb 02 c0       	mov    eax,ds:0xc002cb68
c0013cbe:	89 d1                	mov    ecx,edx
c0013cc0:	09 c1                	or     ecx,eax
c0013cc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cc6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cc9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ccd:	c1 e2 02             	shl    edx,0x2
c0013cd0:	01 d0                	add    eax,edx
c0013cd2:	83 c9 05             	or     ecx,0x5
c0013cd5:	89 ca                	mov    edx,ecx
c0013cd7:	89 10                	mov    DWORD PTR [eax],edx
c0013cd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cdd:	2d 40 03 00 00       	sub    eax,0x340
c0013ce2:	83 f8 7f             	cmp    eax,0x7f
c0013ce5:	77 16                	ja     c0013cfd <VAS::VAS(bool)+0x105>
c0013ce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ceb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013cf2:	c1 e2 02             	shl    edx,0x2
c0013cf5:	01 d0                	add    eax,edx
c0013cf7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013cfd:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013d02:	eb 9d                	jmp    c0013ca1 <VAS::VAS(bool)+0xa9>
c0013d04:	8b 15 68 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb68
c0013d0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d0e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d11:	05 20 0c 00 00       	add    eax,0xc20
c0013d16:	81 ca 03 40 00 00    	or     edx,0x4003
c0013d1c:	89 10                	mov    DWORD PTR [eax],edx
c0013d1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d22:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013d25:	a1 68 cb 02 c0       	mov    eax,ds:0xc002cb68
c0013d2a:	09 c2                	or     edx,eax
c0013d2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d33:	05 fc 0f 00 00       	add    eax,0xffc
c0013d38:	83 ca 03             	or     edx,0x3
c0013d3b:	89 10                	mov    DWORD PTR [eax],edx
c0013d3d:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0013d42:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013d48:	83 ec 0c             	sub    esp,0xc
c0013d4b:	50                   	push   eax
c0013d4c:	e8 03 5f ff ff       	call   c0009c54 <Device::getName()>
c0013d51:	83 c4 10             	add    esp,0x10
c0013d54:	83 ec 08             	sub    esp,0x8
c0013d57:	68 6f 49 02 c0       	push   0xc002496f
c0013d5c:	50                   	push   eax
c0013d5d:	e8 1e ca fe ff       	call   c0000780 <strcmp>
c0013d62:	83 c4 10             	add    esp,0x10
c0013d65:	85 c0                	test   eax,eax
c0013d67:	0f 94 c0             	sete   al
c0013d6a:	0f b6 c0             	movzx  eax,al
c0013d6d:	85 c0                	test   eax,eax
c0013d6f:	74 68                	je     c0013dd9 <VAS::VAS(bool)+0x1e1>
c0013d71:	fa                   	cli    
c0013d72:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0013d77:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013d7d:	05 68 09 00 00       	add    eax,0x968
c0013d82:	83 ec 0c             	sub    esp,0xc
c0013d85:	50                   	push   eax
c0013d86:	e8 db ad ff ff       	call   c000eb66 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013d8b:	83 c4 10             	add    esp,0x10
c0013d8e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013d93:	89 c3                	mov    ebx,eax
c0013d95:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0013d9a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013da0:	05 68 09 00 00       	add    eax,0x968
c0013da5:	83 ec 0c             	sub    esp,0xc
c0013da8:	50                   	push   eax
c0013da9:	e8 b8 ad ff ff       	call   c000eb66 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013dae:	83 c4 10             	add    esp,0x10
c0013db1:	83 ec 08             	sub    esp,0x8
c0013db4:	50                   	push   eax
c0013db5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013db9:	e8 fc f6 ff ff       	call   c00134ba <VAS::getPageTableEntry(unsigned long)>
c0013dbe:	83 c4 10             	add    esp,0x10
c0013dc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0013dc3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013dc8:	6a 11                	push   0x11
c0013dca:	53                   	push   ebx
c0013dcb:	50                   	push   eax
c0013dcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013dd0:	e8 df fa ff ff       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013dd5:	83 c4 10             	add    esp,0x10
c0013dd8:	fb                   	sti    
c0013dd9:	90                   	nop
c0013dda:	83 c4 28             	add    esp,0x28
c0013ddd:	5b                   	pop    ebx
c0013dde:	c3                   	ret    
c0013ddf:	90                   	nop

c0013de0 <VAS::evict(unsigned long)>:
c0013de0:	55                   	push   ebp
c0013de1:	57                   	push   edi
c0013de2:	56                   	push   esi
c0013de3:	53                   	push   ebx
c0013de4:	83 ec 24             	sub    esp,0x24
c0013de7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013deb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013def:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013df3:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0013df8:	50                   	push   eax
c0013df9:	68 7d 49 02 c0       	push   0xc002497d
c0013dfe:	e8 63 31 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013e03:	e8 28 f5 ff ff       	call   c0013330 <Virt::allocateSwapfilePage()>
c0013e08:	83 c4 10             	add    esp,0x10
c0013e0b:	89 c7                	mov    edi,eax
c0013e0d:	a1 4c 69 02 c0       	mov    eax,ds:0xc002694c
c0013e12:	85 c0                	test   eax,eax
c0013e14:	7e 40                	jle    c0013e56 <VAS::evict(unsigned long)+0x76>
c0013e16:	89 ee                	mov    esi,ebp
c0013e18:	31 db                	xor    ebx,ebx
c0013e1a:	83 ec 0c             	sub    esp,0xc
c0013e1d:	57                   	push   edi
c0013e1e:	e8 f7 f4 ff ff       	call   c001331a <Virt::swapIDToSector(unsigned long)>
c0013e23:	31 d2                	xor    edx,edx
c0013e25:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e28:	81 c6 00 02 00 00    	add    esi,0x200
c0013e2e:	6a 01                	push   0x1
c0013e30:	52                   	push   edx
c0013e31:	01 d8                	add    eax,ebx
c0013e33:	83 c3 01             	add    ebx,0x1
c0013e36:	50                   	push   eax
c0013e37:	0f be 05 58 69 02 c0 	movsx  eax,BYTE PTR ds:0xc0026958
c0013e3e:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c0013e45:	50                   	push   eax
c0013e46:	e8 6d 6c ff ff       	call   c000aab8 <LogicalDisk::write(unsigned long long, int, void*)>
c0013e4b:	83 c4 20             	add    esp,0x20
c0013e4e:	39 1d 4c 69 02 c0    	cmp    DWORD PTR ds:0xc002694c,ebx
c0013e54:	7f c4                	jg     c0013e1a <VAS::evict(unsigned long)+0x3a>
c0013e56:	c1 e7 0c             	shl    edi,0xc
c0013e59:	83 ec 08             	sub    esp,0x8
c0013e5c:	55                   	push   ebp
c0013e5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e61:	50                   	push   eax
c0013e62:	e8 53 f6 ff ff       	call   c00134ba <VAS::getPageTableEntry(unsigned long)>
c0013e67:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e69:	89 d3                	mov    ebx,edx
c0013e6b:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013e71:	09 d7                	or     edi,edx
c0013e73:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013e79:	89 38                	mov    DWORD PTR [eax],edi
c0013e7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e7e:	8b 15 88 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c288
c0013e84:	83 c2 01             	add    edx,0x1
c0013e87:	89 15 88 c2 02 c0    	mov    DWORD PTR ds:0xc002c288,edx
c0013e8d:	e8 e3 be ff ff       	call   c000fd75 <Phys::freePage(unsigned long)>
c0013e92:	0f 20 d8             	mov    eax,cr3
c0013e95:	0f 22 d8             	mov    cr3,eax
c0013e98:	8b 0d 88 c2 02 c0    	mov    ecx,DWORD PTR ds:0xc002c288
c0013e9e:	51                   	push   ecx
c0013e9f:	55                   	push   ebp
c0013ea0:	53                   	push   ebx
c0013ea1:	68 20 47 02 c0       	push   0xc0024720
c0013ea6:	e8 bb 30 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013eab:	a1 84 c2 02 c0       	mov    eax,ds:0xc002c284
c0013eb0:	83 c4 18             	add    esp,0x18
c0013eb3:	50                   	push   eax
c0013eb4:	68 92 49 02 c0       	push   0xc0024992
c0013eb9:	8d 50 01             	lea    edx,[eax+0x1]
c0013ebc:	89 15 84 c2 02 c0    	mov    DWORD PTR ds:0xc002c284,edx
c0013ec2:	e8 9f 30 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013ec7:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0013ecc:	c7 44 24 40 a4 49 02 c0 	mov    DWORD PTR [esp+0x40],0xc00249a4
c0013ed4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013ed8:	83 c4 2c             	add    esp,0x2c
c0013edb:	5b                   	pop    ebx
c0013edc:	5e                   	pop    esi
c0013edd:	5f                   	pop    edi
c0013ede:	5d                   	pop    ebp
c0013edf:	e9 82 30 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c0013ee4 <VAS::canLockPage(unsigned long)>:
c0013ee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ee8:	50                   	push   eax
c0013ee9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013eed:	52                   	push   edx
c0013eee:	e8 c7 f5 ff ff       	call   c00134ba <VAS::getPageTableEntry(unsigned long)>
c0013ef3:	59                   	pop    ecx
c0013ef4:	5a                   	pop    edx
c0013ef5:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ef7:	c1 e8 0b             	shr    eax,0xb
c0013efa:	83 e0 01             	and    eax,0x1
c0013efd:	c3                   	ret    

c0013efe <VAS::unlockPage(unsigned long)>:
c0013efe:	83 ec 0c             	sub    esp,0xc
c0013f01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f05:	50                   	push   eax
c0013f06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013f0a:	52                   	push   edx
c0013f0b:	e8 aa f5 ff ff       	call   c00134ba <VAS::getPageTableEntry(unsigned long)>
c0013f10:	59                   	pop    ecx
c0013f11:	5a                   	pop    edx
c0013f12:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f14:	f6 c6 08             	test   dh,0x8
c0013f17:	75 09                	jne    c0013f22 <VAS::unlockPage(unsigned long)+0x24>
c0013f19:	80 ce 08             	or     dh,0x8
c0013f1c:	89 10                	mov    DWORD PTR [eax],edx
c0013f1e:	83 c4 0c             	add    esp,0xc
c0013f21:	c3                   	ret    
c0013f22:	c7 44 24 10 54 47 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024754
c0013f2a:	83 c4 0c             	add    esp,0xc
c0013f2d:	e9 b2 bc ff ff       	jmp    c000fbe4 <KePanic(char const*)>

c0013f32 <VAS::canLockPages(unsigned long, int)>:
c0013f32:	55                   	push   ebp
c0013f33:	57                   	push   edi
c0013f34:	56                   	push   esi
c0013f35:	53                   	push   ebx
c0013f36:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013f3a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013f3e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f42:	85 ff                	test   edi,edi
c0013f44:	7e 23                	jle    c0013f69 <VAS::canLockPages(unsigned long, int)+0x37>
c0013f46:	31 f6                	xor    esi,esi
c0013f48:	eb 0d                	jmp    c0013f57 <VAS::canLockPages(unsigned long, int)+0x25>
c0013f4a:	83 c6 01             	add    esi,0x1
c0013f4d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013f53:	39 f7                	cmp    edi,esi
c0013f55:	74 0d                	je     c0013f64 <VAS::canLockPages(unsigned long, int)+0x32>
c0013f57:	53                   	push   ebx
c0013f58:	55                   	push   ebp
c0013f59:	e8 86 ff ff ff       	call   c0013ee4 <VAS::canLockPage(unsigned long)>
c0013f5e:	5a                   	pop    edx
c0013f5f:	59                   	pop    ecx
c0013f60:	84 c0                	test   al,al
c0013f62:	75 e6                	jne    c0013f4a <VAS::canLockPages(unsigned long, int)+0x18>
c0013f64:	5b                   	pop    ebx
c0013f65:	5e                   	pop    esi
c0013f66:	5f                   	pop    edi
c0013f67:	5d                   	pop    ebp
c0013f68:	c3                   	ret    
c0013f69:	b0 01                	mov    al,0x1
c0013f6b:	eb f7                	jmp    c0013f64 <VAS::canLockPages(unsigned long, int)+0x32>
c0013f6d:	90                   	nop

c0013f6e <VAS::unlockPages(unsigned long, int)>:
c0013f6e:	55                   	push   ebp
c0013f6f:	57                   	push   edi
c0013f70:	56                   	push   esi
c0013f71:	53                   	push   ebx
c0013f72:	83 ec 0c             	sub    esp,0xc
c0013f75:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013f79:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013f7d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013f81:	85 ff                	test   edi,edi
c0013f83:	7e 1c                	jle    c0013fa1 <VAS::unlockPages(unsigned long, int)+0x33>
c0013f85:	31 f6                	xor    esi,esi
c0013f87:	83 ec 08             	sub    esp,0x8
c0013f8a:	83 c6 01             	add    esi,0x1
c0013f8d:	53                   	push   ebx
c0013f8e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013f94:	55                   	push   ebp
c0013f95:	e8 64 ff ff ff       	call   c0013efe <VAS::unlockPage(unsigned long)>
c0013f9a:	83 c4 10             	add    esp,0x10
c0013f9d:	39 f7                	cmp    edi,esi
c0013f9f:	75 e6                	jne    c0013f87 <VAS::unlockPages(unsigned long, int)+0x19>
c0013fa1:	83 c4 0c             	add    esp,0xc
c0013fa4:	5b                   	pop    ebx
c0013fa5:	5e                   	pop    esi
c0013fa6:	5f                   	pop    edi
c0013fa7:	5d                   	pop    ebp
c0013fa8:	c3                   	ret    
c0013fa9:	90                   	nop

c0013faa <VAS::tryLoadBackOffDisk(unsigned long)>:
c0013faa:	55                   	push   ebp
c0013fab:	57                   	push   edi
c0013fac:	56                   	push   esi
c0013fad:	53                   	push   ebx
c0013fae:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0013fb4:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0013fbb:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0013fc1:	77 6f                	ja     c0014032 <VAS::tryLoadBackOffDisk(unsigned long)+0x88>
c0013fc3:	83 ec 08             	sub    esp,0x8
c0013fc6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013fcc:	53                   	push   ebx
c0013fcd:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0013fd4:	51                   	push   ecx
c0013fd5:	e8 e0 f4 ff ff       	call   c00134ba <VAS::getPageTableEntry(unsigned long)>
c0013fda:	83 c4 10             	add    esp,0x10
c0013fdd:	85 c0                	test   eax,eax
c0013fdf:	89 c5                	mov    ebp,eax
c0013fe1:	0f 95 c0             	setne  al
c0013fe4:	85 db                	test   ebx,ebx
c0013fe6:	0f 95 c2             	setne  dl
c0013fe9:	21 d0                	and    eax,edx
c0013feb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0013fef:	a8 01                	test   al,0x1
c0013ff1:	75 0f                	jne    c0014002 <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c0013ff3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0013ff7:	81 c4 1c 10 00 00    	add    esp,0x101c
c0013ffd:	5b                   	pop    ebx
c0013ffe:	5e                   	pop    esi
c0013fff:	5f                   	pop    edi
c0014000:	5d                   	pop    ebp
c0014001:	c3                   	ret    
c0014002:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014005:	f6 c4 02             	test   ah,0x2
c0014008:	75 3d                	jne    c0014047 <VAS::tryLoadBackOffDisk(unsigned long)+0x9d>
c001400a:	89 c2                	mov    edx,eax
c001400c:	81 e2 01 04 00 00    	and    edx,0x401
c0014012:	81 fa 00 04 00 00    	cmp    edx,0x400
c0014018:	0f 84 89 00 00 00    	je     c00140a7 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c001401e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0014023:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0014027:	81 c4 1c 10 00 00    	add    esp,0x101c
c001402d:	5b                   	pop    ebx
c001402e:	5e                   	pop    esi
c001402f:	5f                   	pop    edi
c0014030:	5d                   	pop    ebp
c0014031:	c3                   	ret    
c0014032:	83 ec 0c             	sub    esp,0xc
c0014035:	68 b9 49 02 c0       	push   0xc00249b9
c001403a:	e8 a5 bb ff ff       	call   c000fbe4 <KePanic(char const*)>
c001403f:	83 c4 10             	add    esp,0x10
c0014042:	e9 7c ff ff ff       	jmp    c0013fc3 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0014047:	83 ec 0c             	sub    esp,0xc
c001404a:	68 84 47 02 c0       	push   0xc0024784
c001404f:	e8 12 2f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014054:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0014057:	e8 82 bd ff ff       	call   c000fdde <Phys::allocatePage()>
c001405c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001405f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0014065:	83 ca 01             	or     edx,0x1
c0014068:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c001406b:	0f 20 da             	mov    edx,cr3
c001406e:	0f 22 da             	mov    cr3,edx
c0014071:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0014075:	ba 00 10 00 00       	mov    edx,0x1000
c001407a:	89 d1                	mov    ecx,edx
c001407c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001407e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014081:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0014087:	09 c8                	or     eax,ecx
c0014089:	83 c8 02             	or     eax,0x2
c001408c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001408f:	0f 20 d8             	mov    eax,cr3
c0014092:	0f 22 d8             	mov    cr3,eax
c0014095:	8d 74 24 20          	lea    esi,[esp+0x20]
c0014099:	89 df                	mov    edi,ebx
c001409b:	89 d1                	mov    ecx,edx
c001409d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001409f:	83 c4 10             	add    esp,0x10
c00140a2:	e9 4c ff ff ff       	jmp    c0013ff3 <VAS::tryLoadBackOffDisk(unsigned long)+0x49>
c00140a7:	c1 e8 0c             	shr    eax,0xc
c00140aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140ae:	e8 2b bd ff ff       	call   c000fdde <Phys::allocatePage()>
c00140b3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00140b6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00140bc:	09 c2                	or     edx,eax
c00140be:	81 ca 01 08 00 00    	or     edx,0x801
c00140c4:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00140c7:	a1 4c 69 02 c0       	mov    eax,ds:0xc002694c
c00140cc:	85 c0                	test   eax,eax
c00140ce:	7e 44                	jle    c0014114 <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>
c00140d0:	89 df                	mov    edi,ebx
c00140d2:	31 f6                	xor    esi,esi
c00140d4:	83 ec 0c             	sub    esp,0xc
c00140d7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00140db:	51                   	push   ecx
c00140dc:	e8 39 f2 ff ff       	call   c001331a <Virt::swapIDToSector(unsigned long)>
c00140e1:	31 d2                	xor    edx,edx
c00140e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00140e6:	81 c7 00 02 00 00    	add    edi,0x200
c00140ec:	6a 01                	push   0x1
c00140ee:	52                   	push   edx
c00140ef:	01 f0                	add    eax,esi
c00140f1:	83 c6 01             	add    esi,0x1
c00140f4:	50                   	push   eax
c00140f5:	0f be 05 58 69 02 c0 	movsx  eax,BYTE PTR ds:0xc0026958
c00140fc:	8b 2c 85 dc b9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4624]
c0014103:	55                   	push   ebp
c0014104:	e8 43 69 ff ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c0014109:	83 c4 20             	add    esp,0x20
c001410c:	39 35 4c 69 02 c0    	cmp    DWORD PTR ds:0xc002694c,esi
c0014112:	7f c0                	jg     c00140d4 <VAS::tryLoadBackOffDisk(unsigned long)+0x12a>
c0014114:	a1 88 c2 02 c0       	mov    eax,ds:0xc002c288
c0014119:	83 ec 04             	sub    esp,0x4
c001411c:	83 e8 01             	sub    eax,0x1
c001411f:	50                   	push   eax
c0014120:	53                   	push   ebx
c0014121:	68 cb 49 02 c0       	push   0xc00249cb
c0014126:	a3 88 c2 02 c0       	mov    ds:0xc002c288,eax
c001412b:	e8 36 2e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014130:	58                   	pop    eax
c0014131:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014135:	52                   	push   edx
c0014136:	e8 bc f1 ff ff       	call   c00132f7 <Virt::freeSwapfilePage(unsigned long)>
c001413b:	0f 20 d8             	mov    eax,cr3
c001413e:	0f 22 d8             	mov    cr3,eax
c0014141:	83 c4 10             	add    esp,0x10
c0014144:	e9 aa fe ff ff       	jmp    c0013ff3 <VAS::tryLoadBackOffDisk(unsigned long)+0x49>
c0014149:	90                   	nop

c001414a <VAS::lockPage(unsigned long)>:
c001414a:	56                   	push   esi
c001414b:	53                   	push   ebx
c001414c:	83 ec 04             	sub    esp,0x4
c001414f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014153:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014157:	50                   	push   eax
c0014158:	56                   	push   esi
c0014159:	e8 5c f3 ff ff       	call   c00134ba <VAS::getPageTableEntry(unsigned long)>
c001415e:	5a                   	pop    edx
c001415f:	59                   	pop    ecx
c0014160:	89 c3                	mov    ebx,eax
c0014162:	8b 00                	mov    eax,DWORD PTR [eax]
c0014164:	a8 01                	test   al,0x1
c0014166:	74 10                	je     c0014178 <VAS::lockPage(unsigned long)+0x2e>
c0014168:	f6 c4 08             	test   ah,0x8
c001416b:	74 28                	je     c0014195 <VAS::lockPage(unsigned long)+0x4b>
c001416d:	80 e4 f7             	and    ah,0xf7
c0014170:	89 03                	mov    DWORD PTR [ebx],eax
c0014172:	83 c4 04             	add    esp,0x4
c0014175:	5b                   	pop    ebx
c0014176:	5e                   	pop    esi
c0014177:	c3                   	ret    
c0014178:	83 ec 08             	sub    esp,0x8
c001417b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014180:	50                   	push   eax
c0014181:	56                   	push   esi
c0014182:	e8 23 fe ff ff       	call   c0013faa <VAS::tryLoadBackOffDisk(unsigned long)>
c0014187:	83 c4 10             	add    esp,0x10
c001418a:	84 c0                	test   al,al
c001418c:	74 19                	je     c00141a7 <VAS::lockPage(unsigned long)+0x5d>
c001418e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014190:	f6 c4 08             	test   ah,0x8
c0014193:	75 d8                	jne    c001416d <VAS::lockPage(unsigned long)+0x23>
c0014195:	c7 44 24 10 54 47 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024754
c001419d:	83 c4 04             	add    esp,0x4
c00141a0:	5b                   	pop    ebx
c00141a1:	5e                   	pop    esi
c00141a2:	e9 3d ba ff ff       	jmp    c000fbe4 <KePanic(char const*)>
c00141a7:	83 ec 0c             	sub    esp,0xc
c00141aa:	68 a4 47 02 c0       	push   0xc00247a4
c00141af:	e8 30 ba ff ff       	call   c000fbe4 <KePanic(char const*)>
c00141b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141b6:	83 c4 10             	add    esp,0x10
c00141b9:	eb ad                	jmp    c0014168 <VAS::lockPage(unsigned long)+0x1e>
c00141bb:	90                   	nop

c00141bc <VAS::lockPages(unsigned long, int)>:
c00141bc:	55                   	push   ebp
c00141bd:	57                   	push   edi
c00141be:	56                   	push   esi
c00141bf:	53                   	push   ebx
c00141c0:	83 ec 0c             	sub    esp,0xc
c00141c3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00141c7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00141cb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00141cf:	85 ff                	test   edi,edi
c00141d1:	7e 1c                	jle    c00141ef <VAS::lockPages(unsigned long, int)+0x33>
c00141d3:	31 f6                	xor    esi,esi
c00141d5:	83 ec 08             	sub    esp,0x8
c00141d8:	83 c6 01             	add    esi,0x1
c00141db:	53                   	push   ebx
c00141dc:	81 c3 00 10 00 00    	add    ebx,0x1000
c00141e2:	55                   	push   ebp
c00141e3:	e8 62 ff ff ff       	call   c001414a <VAS::lockPage(unsigned long)>
c00141e8:	83 c4 10             	add    esp,0x10
c00141eb:	39 f7                	cmp    edi,esi
c00141ed:	75 e6                	jne    c00141d5 <VAS::lockPages(unsigned long, int)+0x19>
c00141ef:	83 c4 0c             	add    esp,0xc
c00141f2:	5b                   	pop    ebx
c00141f3:	5e                   	pop    esi
c00141f4:	5f                   	pop    edi
c00141f5:	5d                   	pop    ebp
c00141f6:	c3                   	ret    
c00141f7:	90                   	nop

c00141f8 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00141f8:	55                   	push   ebp
c00141f9:	57                   	push   edi
c00141fa:	56                   	push   esi
c00141fb:	53                   	push   ebx
c00141fc:	83 ec 28             	sub    esp,0x28
c00141ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014203:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014207:	50                   	push   eax
c0014208:	e8 ce ef ff ff       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c001420d:	83 c4 0c             	add    esp,0xc
c0014210:	6a 07                	push   0x7
c0014212:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014216:	52                   	push   edx
c0014217:	89 c5                	mov    ebp,eax
c0014219:	53                   	push   ebx
c001421a:	e8 9d f7 ff ff       	call   c00139bc <VAS::allocatePages(int, int)>
c001421f:	83 c4 10             	add    esp,0x10
c0014222:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014226:	89 c7                	mov    edi,eax
c0014228:	85 c9                	test   ecx,ecx
c001422a:	74 2f                	je     c001425b <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c001422c:	31 f6                	xor    esi,esi
c001422e:	e8 ab bb ff ff       	call   c000fdde <Phys::allocatePage()>
c0014233:	83 c6 01             	add    esi,0x1
c0014236:	6a 03                	push   0x3
c0014238:	55                   	push   ebp
c0014239:	50                   	push   eax
c001423a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001423e:	53                   	push   ebx
c001423f:	e8 70 f6 ff ff       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014244:	6a 07                	push   0x7
c0014246:	57                   	push   edi
c0014247:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001424b:	50                   	push   eax
c001424c:	53                   	push   ebx
c001424d:	e8 62 f6 ff ff       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014252:	83 c4 20             	add    esp,0x20
c0014255:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0014259:	75 d3                	jne    c001422e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c001425b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001425f:	89 28                	mov    DWORD PTR [eax],ebp
c0014261:	83 c4 1c             	add    esp,0x1c
c0014264:	89 f8                	mov    eax,edi
c0014266:	5b                   	pop    ebx
c0014267:	5e                   	pop    esi
c0014268:	5f                   	pop    edi
c0014269:	5d                   	pop    ebp
c001426a:	c3                   	ret    
c001426b:	90                   	nop

c001426c <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c001426c:	53                   	push   ebx
c001426d:	83 ec 14             	sub    esp,0x14
c0014270:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014274:	68 d4 47 02 c0       	push   0xc00247d4
c0014279:	e8 e8 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001427e:	c7 04 24 34 48 02 c0 	mov    DWORD PTR [esp],0xc0024834
c0014285:	e8 dc 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001428a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001428e:	83 c4 18             	add    esp,0x18
c0014291:	5b                   	pop    ebx
c0014292:	e9 42 f2 ff ff       	jmp    c00134d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0014297:	90                   	nop

c0014298 <VAS::scanForEviction()>:
c0014298:	57                   	push   edi
c0014299:	56                   	push   esi
c001429a:	31 f6                	xor    esi,esi
c001429c:	53                   	push   ebx
c001429d:	83 ec 18             	sub    esp,0x18
c00142a0:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00142a5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00142a9:	50                   	push   eax
c00142aa:	68 b0 48 02 c0       	push   0xc00248b0
c00142af:	e8 b2 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00142b4:	c7 04 24 e0 49 02 c0 	mov    DWORD PTR [esp],0xc00249e0
c00142bb:	e8 a6 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00142c0:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00142c3:	83 c4 10             	add    esp,0x10
c00142c6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00142cc:	75 0e                	jne    c00142dc <VAS::scanForEviction()+0x44>
c00142ce:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00142d1:	89 da                	mov    edx,ebx
c00142d3:	c1 ea 16             	shr    edx,0x16
c00142d6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00142da:	74 5b                	je     c0014337 <VAS::scanForEviction()+0x9f>
c00142dc:	83 ec 08             	sub    esp,0x8
c00142df:	53                   	push   ebx
c00142e0:	57                   	push   edi
c00142e1:	e8 d4 f1 ff ff       	call   c00134ba <VAS::getPageTableEntry(unsigned long)>
c00142e6:	83 c4 10             	add    esp,0x10
c00142e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00142eb:	89 d1                	mov    ecx,edx
c00142ed:	c1 e9 0c             	shr    ecx,0xc
c00142f0:	74 10                	je     c0014302 <VAS::scanForEviction()+0x6a>
c00142f2:	89 d1                	mov    ecx,edx
c00142f4:	81 e1 01 08 00 00    	and    ecx,0x801
c00142fa:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0014300:	74 40                	je     c0014342 <VAS::scanForEviction()+0xaa>
c0014302:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014308:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001430e:	76 2d                	jbe    c001433d <VAS::scanForEviction()+0xa5>
c0014310:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014317:	83 c6 01             	add    esi,0x1
c001431a:	83 fe 03             	cmp    esi,0x3
c001431d:	74 32                	je     c0014351 <VAS::scanForEviction()+0xb9>
c001431f:	31 db                	xor    ebx,ebx
c0014321:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014327:	75 b3                	jne    c00142dc <VAS::scanForEviction()+0x44>
c0014329:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001432c:	89 da                	mov    edx,ebx
c001432e:	c1 ea 16             	shr    edx,0x16
c0014331:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014335:	75 a5                	jne    c00142dc <VAS::scanForEviction()+0x44>
c0014337:	81 c3 00 00 40 00    	add    ebx,0x400000
c001433d:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014340:	eb 84                	jmp    c00142c6 <VAS::scanForEviction()+0x2e>
c0014342:	f6 c2 20             	test   dl,0x20
c0014345:	74 13                	je     c001435a <VAS::scanForEviction()+0xc2>
c0014347:	83 e2 df             	and    edx,0xffffffdf
c001434a:	89 10                	mov    DWORD PTR [eax],edx
c001434c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001434f:	eb b1                	jmp    c0014302 <VAS::scanForEviction()+0x6a>
c0014351:	83 c4 10             	add    esp,0x10
c0014354:	31 c0                	xor    eax,eax
c0014356:	5b                   	pop    ebx
c0014357:	5e                   	pop    esi
c0014358:	5f                   	pop    edi
c0014359:	c3                   	ret    
c001435a:	89 d0                	mov    eax,edx
c001435c:	83 ec 08             	sub    esp,0x8
c001435f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014364:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014368:	53                   	push   ebx
c0014369:	68 fc 49 02 c0       	push   0xc00249fc
c001436e:	e8 f3 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014373:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014376:	58                   	pop    eax
c0014377:	5a                   	pop    edx
c0014378:	51                   	push   ecx
c0014379:	57                   	push   edi
c001437a:	e8 61 fa ff ff       	call   c0013de0 <VAS::evict(unsigned long)>
c001437f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014382:	5b                   	pop    ebx
c0014383:	5e                   	pop    esi
c0014384:	50                   	push   eax
c0014385:	68 10 4a 02 c0       	push   0xc0024a10
c001438a:	e8 d7 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001438f:	58                   	pop    eax
c0014390:	5a                   	pop    edx
c0014391:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014395:	50                   	push   eax
c0014396:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001439a:	68 23 4a 02 c0       	push   0xc0024a23
c001439f:	e8 c2 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00143a4:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00143a7:	81 c1 00 10 00 00    	add    ecx,0x1000
c00143ad:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00143b0:	8b 3d 70 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca70
c00143b6:	5b                   	pop    ebx
c00143b7:	5e                   	pop    esi
c00143b8:	57                   	push   edi
c00143b9:	68 d0 48 02 c0       	push   0xc00248d0
c00143be:	e8 a3 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00143c3:	83 c4 10             	add    esp,0x10
c00143c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00143ca:	83 c4 10             	add    esp,0x10
c00143cd:	5b                   	pop    ebx
c00143ce:	5e                   	pop    esi
c00143cf:	5f                   	pop    edi
c00143d0:	c3                   	ret    

c00143d1 <mapVASFirstTime>:
c00143d1:	55                   	push   ebp
c00143d2:	57                   	push   edi
c00143d3:	56                   	push   esi
c00143d4:	53                   	push   ebx
c00143d5:	83 ec 0c             	sub    esp,0xc
c00143d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143dd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00143e0:	83 fa 01             	cmp    edx,0x1
c00143e3:	0f 84 cb 00 00 00    	je     c00144b4 <mapVASFirstTime+0xe3>
c00143e9:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00143ec:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00143f1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00143f6:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00143f9:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c00143ff:	c1 e5 15             	shl    ebp,0x15
c0014402:	29 eb                	sub    ebx,ebp
c0014404:	29 ef                	sub    edi,ebp
c0014406:	e8 d3 b9 ff ff       	call   c000fdde <Phys::allocatePage()>
c001440b:	83 ec 0c             	sub    esp,0xc
c001440e:	68 03 04 00 00       	push   0x403
c0014413:	6a 01                	push   0x1
c0014415:	53                   	push   ebx
c0014416:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001441c:	50                   	push   eax
c001441d:	56                   	push   esi
c001441e:	e8 8b f6 ff ff       	call   c0013aae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014423:	83 c4 20             	add    esp,0x20
c0014426:	39 fb                	cmp    ebx,edi
c0014428:	75 dc                	jne    c0014406 <mapVASFirstTime+0x35>
c001442a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001442f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014434:	29 eb                	sub    ebx,ebp
c0014436:	29 ef                	sub    edi,ebp
c0014438:	e8 a1 b9 ff ff       	call   c000fdde <Phys::allocatePage()>
c001443d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014441:	83 fa 01             	cmp    edx,0x1
c0014444:	19 d2                	sbb    edx,edx
c0014446:	83 ec 0c             	sub    esp,0xc
c0014449:	83 e2 04             	and    edx,0x4
c001444c:	81 c2 03 04 00 00    	add    edx,0x403
c0014452:	52                   	push   edx
c0014453:	6a 01                	push   0x1
c0014455:	53                   	push   ebx
c0014456:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001445c:	50                   	push   eax
c001445d:	56                   	push   esi
c001445e:	e8 4b f6 ff ff       	call   c0013aae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014463:	83 c4 20             	add    esp,0x20
c0014466:	39 df                	cmp    edi,ebx
c0014468:	75 ce                	jne    c0014438 <mapVASFirstTime+0x67>
c001446a:	83 ec 0c             	sub    esp,0xc
c001446d:	bb 7c 80 02 c0       	mov    ebx,0xc002807c
c0014472:	6a 04                	push   0x4
c0014474:	81 eb 00 70 02 c0    	sub    ebx,0xc0027000
c001447a:	6a ff                	push   0xffffffff
c001447c:	c1 eb 0c             	shr    ebx,0xc
c001447f:	53                   	push   ebx
c0014480:	68 00 70 02 c0       	push   0xc0027000
c0014485:	56                   	push   esi
c0014486:	e8 c9 f1 ff ff       	call   c0013654 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001448b:	83 c4 14             	add    esp,0x14
c001448e:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c0014493:	6a 04                	push   0x4
c0014495:	6a ff                	push   0xffffffff
c0014497:	53                   	push   ebx
c0014498:	68 00 70 02 c0       	push   0xc0027000
c001449d:	50                   	push   eax
c001449e:	e8 b1 f1 ff ff       	call   c0013654 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00144a3:	0f 20 d8             	mov    eax,cr3
c00144a6:	0f 22 d8             	mov    cr3,eax
c00144a9:	83 c4 20             	add    esp,0x20
c00144ac:	83 c4 0c             	add    esp,0xc
c00144af:	5b                   	pop    ebx
c00144b0:	5e                   	pop    esi
c00144b1:	5f                   	pop    edi
c00144b2:	5d                   	pop    ebp
c00144b3:	c3                   	ret    
c00144b4:	83 ec 0c             	sub    esp,0xc
c00144b7:	68 30 4a 02 c0       	push   0xc0024a30
c00144bc:	e8 a5 2a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00144c1:	83 c4 10             	add    esp,0x10
c00144c4:	83 c4 0c             	add    esp,0xc
c00144c7:	5b                   	pop    ebx
c00144c8:	5e                   	pop    esi
c00144c9:	5f                   	pop    edi
c00144ca:	5d                   	pop    ebp
c00144cb:	c3                   	ret    

c00144cc <SysAlarm(regs*)>:
c00144cc:	53                   	push   ebx
c00144cd:	83 ec 10             	sub    esp,0x10
c00144d0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144d4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144d7:	68 49 4a 02 c0       	push   0xc0024a49
c00144dc:	e8 85 2a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00144e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00144e4:	83 c4 0c             	add    esp,0xc
c00144e7:	31 d2                	xor    edx,edx
c00144e9:	52                   	push   edx
c00144ea:	50                   	push   eax
c00144eb:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00144f1:	e8 d2 09 00 00       	call   c0014ec8 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c00144f6:	83 c4 18             	add    esp,0x18
c00144f9:	5b                   	pop    ebx
c00144fa:	c3                   	ret    

c00144fb <SysEject(regs*)>:
c00144fb:	83 ec 0c             	sub    esp,0xc
c00144fe:	83 ca ff             	or     edx,0xffffffff
c0014501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014505:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014508:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001450d:	83 e9 41             	sub    ecx,0x41
c0014510:	83 f9 19             	cmp    ecx,0x19
c0014513:	77 18                	ja     c001452d <SysEject(regs*)+0x32>
c0014515:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001451c:	85 c9                	test   ecx,ecx
c001451e:	74 0d                	je     c001452d <SysEject(regs*)+0x32>
c0014520:	83 ec 0c             	sub    esp,0xc
c0014523:	51                   	push   ecx
c0014524:	e8 b9 64 ff ff       	call   c000a9e2 <LogicalDisk::eject()>
c0014529:	83 c4 10             	add    esp,0x10
c001452c:	99                   	cdq    
c001452d:	83 c4 0c             	add    esp,0xc
c0014530:	c3                   	ret    

c0014531 <SysExit(regs*)>:
c0014531:	83 ec 18             	sub    esp,0x18
c0014534:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014538:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001453b:	e8 d8 2f 00 00       	call   c0017518 <KeTerminateCurrentThread(int)>
c0014540:	83 c8 ff             	or     eax,0xffffffff
c0014543:	83 c4 1c             	add    esp,0x1c
c0014546:	89 c2                	mov    edx,eax
c0014548:	c3                   	ret    

c0014549 <SysGetCwd(regs*)>:
c0014549:	83 ec 10             	sub    esp,0x10
c001454c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014550:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014553:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014556:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001455b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001455e:	e8 a5 38 ff ff       	call   c0007e08 <Fs::getcwd(Process*, char*, int)>
c0014563:	83 c4 1c             	add    esp,0x1c
c0014566:	99                   	cdq    
c0014567:	c3                   	ret    

c0014568 <SysGetPID(regs*)>:
c0014568:	83 ec 14             	sub    esp,0x14
c001456b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014570:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014573:	ff 30                	push   DWORD PTR [eax]
c0014575:	68 5e 4a 02 c0       	push   0xc0024a5e
c001457a:	e8 e7 29 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001457f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014584:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014587:	8b 00                	mov    eax,DWORD PTR [eax]
c0014589:	83 c4 1c             	add    esp,0x1c
c001458c:	99                   	cdq    
c001458d:	c3                   	ret    

c001458e <SysGetRAMData(regs*)>:
c001458e:	a1 88 c2 02 c0       	mov    eax,ds:0xc002c288
c0014593:	03 05 78 c1 02 c0    	add    eax,DWORD PTR ds:0xc002c178
c0014599:	8b 0d 7c c1 02 c0    	mov    ecx,DWORD PTR ds:0xc002c17c
c001459f:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00145a5:	99                   	cdq    
c00145a6:	f7 f9                	idiv   ecx
c00145a8:	c1 e0 18             	shl    eax,0x18
c00145ab:	09 c8                	or     eax,ecx
c00145ad:	99                   	cdq    
c00145ae:	c3                   	ret    

c00145af <SysGetVGAPtr(regs*)>:
c00145af:	55                   	push   ebp
c00145b0:	57                   	push   edi
c00145b1:	56                   	push   esi
c00145b2:	53                   	push   ebx
c00145b3:	83 ec 1c             	sub    esp,0x1c
c00145b6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00145ba:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00145bd:	83 f8 ff             	cmp    eax,0xffffffff
c00145c0:	74 23                	je     c00145e5 <SysGetVGAPtr(regs*)+0x36>
c00145c2:	83 ec 0c             	sub    esp,0xc
c00145c5:	50                   	push   eax
c00145c6:	e8 05 2a 00 00       	call   c0016fd0 <KeProcessFromPID(int)>
c00145cb:	31 d2                	xor    edx,edx
c00145cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00145d1:	83 c4 10             	add    esp,0x10
c00145d4:	b8 01 00 00 00       	mov    eax,0x1
c00145d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00145de:	75 11                	jne    c00145f1 <SysGetVGAPtr(regs*)+0x42>
c00145e0:	e9 80 00 00 00       	jmp    c0014665 <SysGetVGAPtr(regs*)+0xb6>
c00145e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145f5:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00145f9:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c00145ff:	74 0c                	je     c001460d <SysGetVGAPtr(regs*)+0x5e>
c0014601:	83 ec 0c             	sub    esp,0xc
c0014604:	55                   	push   ebp
c0014605:	e8 89 dc ff ff       	call   c0012293 <setActiveTerminal(VgaText*)>
c001460a:	83 c4 10             	add    esp,0x10
c001460d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014610:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014615:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014618:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001461a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001461d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014620:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014626:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014629:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001462c:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014636:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014639:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014640:	c1 e8 07             	shr    eax,0x7
c0014643:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014649:	50                   	push   eax
c001464a:	50                   	push   eax
c001464b:	68 6d 4a 02 c0       	push   0xc0024a6d
c0014650:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014653:	05 ac 0f 00 00       	add    eax,0xfac
c0014658:	50                   	push   eax
c0014659:	e8 f2 bf fe ff       	call   c0000650 <strcpy>
c001465e:	83 c4 10             	add    esp,0x10
c0014661:	31 c0                	xor    eax,eax
c0014663:	31 d2                	xor    edx,edx
c0014665:	83 c4 1c             	add    esp,0x1c
c0014668:	5b                   	pop    ebx
c0014669:	5e                   	pop    esi
c001466a:	5f                   	pop    edi
c001466b:	5d                   	pop    ebp
c001466c:	c3                   	ret    
c001466d:	66 90                	xchg   ax,ax
c001466f:	90                   	nop

c0014670 <SysKill(regs*)>:
c0014670:	53                   	push   ebx
c0014671:	83 ec 08             	sub    esp,0x8
c0014674:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014678:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001467c:	75 16                	jne    c0014694 <SysKill(regs*)+0x24>
c001467e:	83 ec 0c             	sub    esp,0xc
c0014681:	68 77 4a 02 c0       	push   0xc0024a77
c0014686:	e8 59 b5 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001468b:	83 c4 10             	add    esp,0x10
c001468e:	e9 89 00 00 00       	jmp    c001471c <SysKill(regs*)+0xac>
c0014693:	90                   	nop
c0014694:	83 ec 0c             	sub    esp,0xc
c0014697:	68 8c ca 02 c0       	push   0xc002ca8c
c001469c:	e8 87 d6 00 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00146a1:	8d 76 00             	lea    esi,[esi+0x0]
c00146a4:	83 c4 10             	add    esp,0x10
c00146a7:	85 c0                	test   eax,eax
c00146a9:	74 19                	je     c00146c4 <SysKill(regs*)+0x54>
c00146ab:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00146ae:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00146b1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00146b3:	74 33                	je     c00146e8 <SysKill(regs*)+0x78>
c00146b5:	52                   	push   edx
c00146b6:	52                   	push   edx
c00146b7:	50                   	push   eax
c00146b8:	68 8c ca 02 c0       	push   0xc002ca8c
c00146bd:	e8 72 db 00 00       	call   c0022234 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00146c2:	eb e0                	jmp    c00146a4 <SysKill(regs*)+0x34>
c00146c4:	83 ec 0c             	sub    esp,0xc
c00146c7:	68 80 ca 02 c0       	push   0xc002ca80
c00146cc:	e8 57 d6 00 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00146d1:	8d 76 00             	lea    esi,[esi+0x0]
c00146d4:	83 c4 10             	add    esp,0x10
c00146d7:	85 c0                	test   eax,eax
c00146d9:	74 41                	je     c001471c <SysKill(regs*)+0xac>
c00146db:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00146de:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00146e1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00146e3:	75 27                	jne    c001470c <SysKill(regs*)+0x9c>
c00146e5:	8d 76 00             	lea    esi,[esi+0x0]
c00146e8:	51                   	push   ecx
c00146e9:	51                   	push   ecx
c00146ea:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00146ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146f5:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00146fb:	e8 a3 c7 ff ff       	call   c0010ea3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014700:	83 c4 10             	add    esp,0x10
c0014703:	31 c0                	xor    eax,eax
c0014705:	31 d2                	xor    edx,edx
c0014707:	eb 1b                	jmp    c0014724 <SysKill(regs*)+0xb4>
c0014709:	8d 76 00             	lea    esi,[esi+0x0]
c001470c:	52                   	push   edx
c001470d:	52                   	push   edx
c001470e:	50                   	push   eax
c001470f:	68 80 ca 02 c0       	push   0xc002ca80
c0014714:	e8 1b db 00 00       	call   c0022234 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014719:	eb b9                	jmp    c00146d4 <SysKill(regs*)+0x64>
c001471b:	90                   	nop
c001471c:	83 c8 ff             	or     eax,0xffffffff
c001471f:	89 c2                	mov    edx,eax
c0014721:	8d 76 00             	lea    esi,[esi+0x0]
c0014724:	83 c4 08             	add    esp,0x8
c0014727:	5b                   	pop    ebx
c0014728:	c3                   	ret    

c0014729 <SysLoadDLL(regs*)>:
c0014729:	56                   	push   esi
c001472a:	31 d2                	xor    edx,edx
c001472c:	53                   	push   ebx
c001472d:	b8 01 00 00 00       	mov    eax,0x1
c0014732:	51                   	push   ecx
c0014733:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014737:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001473b:	0f 84 8c 00 00 00    	je     c00147cd <SysLoadDLL(regs*)+0xa4>
c0014741:	83 ec 0c             	sub    esp,0xc
c0014744:	68 14 01 00 00       	push   0x114
c0014749:	e8 3a b0 ff ff       	call   c000f788 <malloc>
c001474e:	83 c4 0c             	add    esp,0xc
c0014751:	89 c3                	mov    ebx,eax
c0014753:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014758:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001475b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001475e:	53                   	push   ebx
c001475f:	e8 24 3a ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0014764:	83 c4 10             	add    esp,0x10
c0014767:	31 d2                	xor    edx,edx
c0014769:	85 db                	test   ebx,ebx
c001476b:	b8 02 00 00 00       	mov    eax,0x2
c0014770:	74 5b                	je     c00147cd <SysLoadDLL(regs*)+0xa4>
c0014772:	83 ec 0c             	sub    esp,0xc
c0014775:	53                   	push   ebx
c0014776:	e8 ef 3c ff ff       	call   c000846a <File::exists()>
c001477b:	83 c4 10             	add    esp,0x10
c001477e:	84 c0                	test   al,al
c0014780:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014782:	75 11                	jne    c0014795 <SysLoadDLL(regs*)+0x6c>
c0014784:	83 ec 0c             	sub    esp,0xc
c0014787:	53                   	push   ebx
c0014788:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001478b:	83 c4 10             	add    esp,0x10
c001478e:	b8 03 00 00 00       	mov    eax,0x3
c0014793:	eb 36                	jmp    c00147cb <SysLoadDLL(regs*)+0xa2>
c0014795:	83 ec 0c             	sub    esp,0xc
c0014798:	53                   	push   ebx
c0014799:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001479c:	58                   	pop    eax
c001479d:	5a                   	pop    edx
c001479e:	6a 00                	push   0x0
c00147a0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00147a3:	e8 df 19 00 00       	call   c0016187 <Thr::loadDLL(char const*, bool)>
c00147a8:	83 c4 10             	add    esp,0x10
c00147ab:	31 d2                	xor    edx,edx
c00147ad:	89 c1                	mov    ecx,eax
c00147af:	b8 04 00 00 00       	mov    eax,0x4
c00147b4:	85 c9                	test   ecx,ecx
c00147b6:	74 15                	je     c00147cd <SysLoadDLL(regs*)+0xa4>
c00147b8:	53                   	push   ebx
c00147b9:	53                   	push   ebx
c00147ba:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c00147c0:	51                   	push   ecx
c00147c1:	e8 22 1c 00 00       	call   c00163e8 <Thr::executeDLL(unsigned long, void*)>
c00147c6:	83 c4 10             	add    esp,0x10
c00147c9:	31 c0                	xor    eax,eax
c00147cb:	31 d2                	xor    edx,edx
c00147cd:	59                   	pop    ecx
c00147ce:	5b                   	pop    ebx
c00147cf:	5e                   	pop    esi
c00147d0:	c3                   	ret    

c00147d1 <SysPause(regs*)>:
c00147d1:	83 ec 18             	sub    esp,0x18
c00147d4:	6a 08                	push   0x8
c00147d6:	e8 09 26 00 00       	call   c0016de4 <blockTask(TaskState)>
c00147db:	31 c0                	xor    eax,eax
c00147dd:	31 d2                	xor    edx,edx
c00147df:	83 c4 1c             	add    esp,0x1c
c00147e2:	c3                   	ret    

c00147e3 <SysPthreadCreate(regs*)>:
c00147e3:	83 ec 18             	sub    esp,0x18
c00147e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147eb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00147ee:	e8 c9 23 00 00       	call   c0016bbc <Process::createUserThread()>
c00147f3:	31 c0                	xor    eax,eax
c00147f5:	31 d2                	xor    edx,edx
c00147f7:	83 c4 1c             	add    esp,0x1c
c00147fa:	c3                   	ret    

c00147fb <SysPthreadGetTID(regs*)>:
c00147fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014800:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014803:	99                   	cdq    
c0014804:	c3                   	ret    

c0014805 <SysInternalPthreadGetContext(regs*)>:
c0014805:	31 c0                	xor    eax,eax
c0014807:	31 d2                	xor    edx,edx
c0014809:	c3                   	ret    

c001480a <SysInternalPthreadGetStartLocation(regs*)>:
c001480a:	31 c0                	xor    eax,eax
c001480c:	31 d2                	xor    edx,edx
c001480e:	c3                   	ret    

c001480f <SysPthreadJoin(regs*)>:
c001480f:	31 c0                	xor    eax,eax
c0014811:	31 d2                	xor    edx,edx
c0014813:	c3                   	ret    

c0014814 <SysPthreadExit(regs*)>:
c0014814:	83 ec 18             	sub    esp,0x18
c0014817:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001481b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001481e:	e8 f5 2c 00 00       	call   c0017518 <KeTerminateCurrentThread(int)>
c0014823:	83 c8 ff             	or     eax,0xffffffff
c0014826:	83 c4 1c             	add    esp,0x1c
c0014829:	89 c2                	mov    edx,eax
c001482b:	c3                   	ret    

c001482c <SysRead(regs*)>:
c001482c:	57                   	push   edi
c001482d:	56                   	push   esi
c001482e:	53                   	push   ebx
c001482f:	83 ec 10             	sub    esp,0x10
c0014832:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014836:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014839:	83 f8 02             	cmp    eax,0x2
c001483c:	77 10                	ja     c001484e <SysRead(regs*)+0x22>
c001483e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014843:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014846:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c001484c:	eb 0e                	jmp    c001485c <SysRead(regs*)+0x30>
c001484e:	83 ec 0c             	sub    esp,0xc
c0014851:	50                   	push   eax
c0014852:	e8 26 e8 ff ff       	call   c001307d <KeGetFileFromDescriptor(int)>
c0014857:	83 c4 10             	add    esp,0x10
c001485a:	89 c1                	mov    ecx,eax
c001485c:	83 c8 ff             	or     eax,0xffffffff
c001485f:	85 c9                	test   ecx,ecx
c0014861:	89 c2                	mov    edx,eax
c0014863:	74 28                	je     c001488d <SysRead(regs*)+0x61>
c0014865:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001486d:	83 ec 0c             	sub    esp,0xc
c0014870:	31 ff                	xor    edi,edi
c0014872:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014876:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014878:	52                   	push   edx
c0014879:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001487c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001487f:	57                   	push   edi
c0014880:	56                   	push   esi
c0014881:	51                   	push   ecx
c0014882:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014885:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014889:	83 c4 20             	add    esp,0x20
c001488c:	99                   	cdq    
c001488d:	83 c4 10             	add    esp,0x10
c0014890:	5b                   	pop    ebx
c0014891:	5e                   	pop    esi
c0014892:	5f                   	pop    edi
c0014893:	c3                   	ret    

c0014894 <SysRegisterSignal(regs*)>:
c0014894:	83 ec 18             	sub    esp,0x18
c0014897:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001489b:	6a 00                	push   0x0
c001489d:	6a 00                	push   0x0
c001489f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00148a2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00148a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148ad:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00148b3:	e8 b5 c5 ff ff       	call   c0010e6d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00148b8:	83 c4 2c             	add    esp,0x2c
c00148bb:	99                   	cdq    
c00148bc:	c3                   	ret    

c00148bd <SysRegistryGetTypeFromPath(regs*)>:
c00148bd:	53                   	push   ebx
c00148be:	81 ec 40 01 00 00    	sub    esp,0x140
c00148c4:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00148cb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00148ce:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00148d1:	e8 35 96 ff ff       	call   c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00148d6:	83 c4 10             	add    esp,0x10
c00148d9:	85 c0                	test   eax,eax
c00148db:	89 c1                	mov    ecx,eax
c00148dd:	74 15                	je     c00148f4 <SysRegistryGetTypeFromPath(regs*)+0x37>
c00148df:	50                   	push   eax
c00148e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00148e4:	50                   	push   eax
c00148e5:	51                   	push   ecx
c00148e6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00148e9:	e8 02 92 ff ff       	call   c000daf0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00148ee:	83 c4 10             	add    esp,0x10
c00148f1:	99                   	cdq    
c00148f2:	eb 05                	jmp    c00148f9 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c00148f4:	83 c8 ff             	or     eax,0xffffffff
c00148f7:	89 c2                	mov    edx,eax
c00148f9:	81 c4 38 01 00 00    	add    esp,0x138
c00148ff:	5b                   	pop    ebx
c0014900:	c3                   	ret    

c0014901 <SysRegistryReadExtent(regs*)>:
c0014901:	83 ec 1c             	sub    esp,0x1c
c0014904:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014908:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001490b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001490e:	85 c0                	test   eax,eax
c0014910:	79 1f                	jns    c0014931 <SysRegistryReadExtent(regs*)+0x30>
c0014912:	52                   	push   edx
c0014913:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014918:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001491c:	52                   	push   edx
c001491d:	50                   	push   eax
c001491e:	51                   	push   ecx
c001491f:	e8 be 90 ff ff       	call   c000d9e2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014924:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014928:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001492c:	83 c4 10             	add    esp,0x10
c001492f:	eb 14                	jmp    c0014945 <SysRegistryReadExtent(regs*)+0x44>
c0014931:	83 ec 04             	sub    esp,0x4
c0014934:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014937:	50                   	push   eax
c0014938:	51                   	push   ecx
c0014939:	e8 42 8b ff ff       	call   c000d480 <CmGetString(Reghive_Tag*, int, char*)>
c001493e:	83 c4 10             	add    esp,0x10
c0014941:	31 c0                	xor    eax,eax
c0014943:	31 d2                	xor    edx,edx
c0014945:	83 c4 1c             	add    esp,0x1c
c0014948:	c3                   	ret    

c0014949 <SysRegistryPathToExtentLookup(regs*)>:
c0014949:	83 ec 14             	sub    esp,0x14
c001494c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014950:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014953:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014956:	e8 b0 95 ff ff       	call   c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001495b:	83 c4 1c             	add    esp,0x1c
c001495e:	99                   	cdq    
c001495f:	c3                   	ret    

c0014960 <SysRegistryEnterDirectory(regs*)>:
c0014960:	83 ec 14             	sub    esp,0x14
c0014963:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014967:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001496a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001496d:	e8 85 8b ff ff       	call   c000d4f7 <CmEnterDirectory(Reghive_Tag*, int)>
c0014972:	83 c4 1c             	add    esp,0x1c
c0014975:	99                   	cdq    
c0014976:	c3                   	ret    

c0014977 <SysRegistryGetNext(regs*)>:
c0014977:	83 ec 14             	sub    esp,0x14
c001497a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001497e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014981:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014984:	e8 ad 8b ff ff       	call   c000d536 <CmGetNext(Reghive_Tag*, int)>
c0014989:	83 c4 1c             	add    esp,0x1c
c001498c:	99                   	cdq    
c001498d:	c3                   	ret    

c001498e <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001498e:	57                   	push   edi
c001498f:	56                   	push   esi
c0014990:	53                   	push   ebx
c0014991:	81 ec 34 01 00 00    	sub    esp,0x134
c0014997:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001499e:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00149a2:	57                   	push   edi
c00149a3:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00149a6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00149a9:	e8 42 91 ff ff       	call   c000daf0 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00149ae:	89 c3                	mov    ebx,eax
c00149b0:	58                   	pop    eax
c00149b1:	5a                   	pop    edx
c00149b2:	57                   	push   edi
c00149b3:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00149b6:	e8 95 bc fe ff       	call   c0000650 <strcpy>
c00149bb:	81 c4 40 01 00 00    	add    esp,0x140
c00149c1:	89 d8                	mov    eax,ebx
c00149c3:	5b                   	pop    ebx
c00149c4:	99                   	cdq    
c00149c5:	5e                   	pop    esi
c00149c6:	5f                   	pop    edi
c00149c7:	c3                   	ret    

c00149c8 <SysRegistryOpen(regs*)>:
c00149c8:	83 ec 18             	sub    esp,0x18
c00149cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149cf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00149d2:	e8 39 89 ff ff       	call   c000d310 <CmOpen(char const*)>
c00149d7:	83 c4 1c             	add    esp,0x1c
c00149da:	99                   	cdq    
c00149db:	c3                   	ret    

c00149dc <SysRegistryClose(regs*)>:
c00149dc:	83 ec 18             	sub    esp,0x18
c00149df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149e3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149e6:	e8 43 8a ff ff       	call   c000d42e <CmClose(Reghive_Tag*)>
c00149eb:	31 c0                	xor    eax,eax
c00149ed:	31 d2                	xor    edx,edx
c00149ef:	83 c4 1c             	add    esp,0x1c
c00149f2:	c3                   	ret    

c00149f3 <SysRegistryEasyReadString(regs*)>:
c00149f3:	57                   	push   edi
c00149f4:	56                   	push   esi
c00149f5:	53                   	push   ebx
c00149f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149fa:	83 ec 0c             	sub    esp,0xc
c00149fd:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014a00:	e8 0b 89 ff ff       	call   c000d310 <CmOpen(char const*)>
c0014a05:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014a08:	5a                   	pop    edx
c0014a09:	59                   	pop    ecx
c0014a0a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a0d:	89 c3                	mov    ebx,eax
c0014a0f:	50                   	push   eax
c0014a10:	e8 f6 94 ff ff       	call   c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014a15:	83 c4 10             	add    esp,0x10
c0014a18:	89 c1                	mov    ecx,eax
c0014a1a:	b8 01 00 00 00       	mov    eax,0x1
c0014a1f:	85 c9                	test   ecx,ecx
c0014a21:	7e 16                	jle    c0014a39 <SysRegistryEasyReadString(regs*)+0x46>
c0014a23:	50                   	push   eax
c0014a24:	57                   	push   edi
c0014a25:	51                   	push   ecx
c0014a26:	53                   	push   ebx
c0014a27:	e8 54 8a ff ff       	call   c000d480 <CmGetString(Reghive_Tag*, int, char*)>
c0014a2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a2f:	e8 fa 89 ff ff       	call   c000d42e <CmClose(Reghive_Tag*)>
c0014a34:	83 c4 10             	add    esp,0x10
c0014a37:	31 c0                	xor    eax,eax
c0014a39:	5b                   	pop    ebx
c0014a3a:	31 d2                	xor    edx,edx
c0014a3c:	5e                   	pop    esi
c0014a3d:	5f                   	pop    edi
c0014a3e:	c3                   	ret    

c0014a3f <SysRegistryEasyReadInteger(regs*)>:
c0014a3f:	56                   	push   esi
c0014a40:	53                   	push   ebx
c0014a41:	83 ec 10             	sub    esp,0x10
c0014a44:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014a48:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014a4b:	e8 c0 88 ff ff       	call   c000d310 <CmOpen(char const*)>
c0014a50:	5a                   	pop    edx
c0014a51:	59                   	pop    ecx
c0014a52:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a55:	89 c3                	mov    ebx,eax
c0014a57:	50                   	push   eax
c0014a58:	e8 ae 94 ff ff       	call   c000df0b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014a5d:	83 c4 10             	add    esp,0x10
c0014a60:	89 c1                	mov    ecx,eax
c0014a62:	b8 01 00 00 00       	mov    eax,0x1
c0014a67:	85 c9                	test   ecx,ecx
c0014a69:	7e 18                	jle    c0014a83 <SysRegistryEasyReadInteger(regs*)+0x44>
c0014a6b:	50                   	push   eax
c0014a6c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014a6f:	51                   	push   ecx
c0014a70:	53                   	push   ebx
c0014a71:	e8 6c 8f ff ff       	call   c000d9e2 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014a76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a79:	e8 b0 89 ff ff       	call   c000d42e <CmClose(Reghive_Tag*)>
c0014a7e:	83 c4 10             	add    esp,0x10
c0014a81:	31 c0                	xor    eax,eax
c0014a83:	59                   	pop    ecx
c0014a84:	31 d2                	xor    edx,edx
c0014a86:	5b                   	pop    ebx
c0014a87:	5e                   	pop    esi
c0014a88:	c3                   	ret    

c0014a89 <SysSbrk(regs*)>:
c0014a89:	56                   	push   esi
c0014a8a:	53                   	push   ebx
c0014a8b:	50                   	push   eax
c0014a8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014a95:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a98:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014a9b:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014aa1:	85 db                	test   ebx,ebx
c0014aa3:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014aa6:	74 02                	je     c0014aaa <SysSbrk(regs*)+0x21>
c0014aa8:	79 06                	jns    c0014ab0 <SysSbrk(regs*)+0x27>
c0014aaa:	89 f0                	mov    eax,esi
c0014aac:	31 d2                	xor    edx,edx
c0014aae:	eb 2a                	jmp    c0014ada <SysSbrk(regs*)+0x51>
c0014ab0:	83 c8 ff             	or     eax,0xffffffff
c0014ab3:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014ab9:	89 c2                	mov    edx,eax
c0014abb:	77 1d                	ja     c0014ada <SysSbrk(regs*)+0x51>
c0014abd:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014ac3:	50                   	push   eax
c0014ac4:	68 07 0c 00 00       	push   0xc07
c0014ac9:	c1 ea 0c             	shr    edx,0xc
c0014acc:	52                   	push   edx
c0014acd:	51                   	push   ecx
c0014ace:	e8 e9 ee ff ff       	call   c00139bc <VAS::allocatePages(int, int)>
c0014ad3:	89 f0                	mov    eax,esi
c0014ad5:	31 d2                	xor    edx,edx
c0014ad7:	83 c4 10             	add    esp,0x10
c0014ada:	59                   	pop    ecx
c0014adb:	5b                   	pop    ebx
c0014adc:	5e                   	pop    esi
c0014add:	c3                   	ret    

c0014ade <SysSetCwd(regs*)>:
c0014ade:	83 ec 14             	sub    esp,0x14
c0014ae1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ae5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ae8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aed:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014af0:	e8 14 3a ff ff       	call   c0008509 <Fs::setcwd(Process*, char*)>
c0014af5:	83 c4 1c             	add    esp,0x1c
c0014af8:	99                   	cdq    
c0014af9:	c3                   	ret    

c0014afa <SysSetTime(regs*)>:
c0014afa:	55                   	push   ebp
c0014afb:	31 d2                	xor    edx,edx
c0014afd:	57                   	push   edi
c0014afe:	56                   	push   esi
c0014aff:	53                   	push   ebx
c0014b00:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014b05:	83 ec 30             	sub    esp,0x30
c0014b08:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0014b0c:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0014b0f:	89 f0                	mov    eax,esi
c0014b11:	f7 f3                	div    ebx
c0014b13:	89 d7                	mov    edi,edx
c0014b15:	31 d2                	xor    edx,edx
c0014b17:	f7 f3                	div    ebx
c0014b19:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014b1e:	89 f0                	mov    eax,esi
c0014b20:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014b24:	31 d2                	xor    edx,edx
c0014b26:	f7 f3                	div    ebx
c0014b28:	bb 18 00 00 00       	mov    ebx,0x18
c0014b2d:	31 d2                	xor    edx,edx
c0014b2f:	f7 f3                	div    ebx
c0014b31:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014b34:	bb 0c 00 00 00       	mov    ebx,0xc
c0014b39:	89 c6                	mov    esi,eax
c0014b3b:	c1 e8 05             	shr    eax,0x5
c0014b3e:	83 e6 1f             	and    esi,0x1f
c0014b41:	46                   	inc    esi
c0014b42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014b46:	31 d2                	xor    edx,edx
c0014b48:	f7 f3                	div    ebx
c0014b4a:	31 db                	xor    ebx,ebx
c0014b4c:	57                   	push   edi
c0014b4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b55:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c0014b59:	55                   	push   ebp
c0014b5a:	52                   	push   edx
c0014b5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0014b5f:	56                   	push   esi
c0014b60:	68 98 4a 02 c0       	push   0xc0024a98
c0014b65:	e8 fc 23 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014b6a:	83 c4 1c             	add    esp,0x1c
c0014b6d:	57                   	push   edi
c0014b6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b76:	55                   	push   ebp
c0014b77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014b7b:	52                   	push   edx
c0014b7c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014b80:	56                   	push   esi
c0014b81:	68 ba 4a 02 c0       	push   0xc0024aba
c0014b86:	e8 db 23 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014b8b:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0014b90:	31 c9                	xor    ecx,ecx
c0014b92:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014b96:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c0014b9a:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c0014b9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014ba4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014ba8:	89 f0                	mov    eax,esi
c0014baa:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0014bae:	88 c1                	mov    cl,al
c0014bb0:	89 e8                	mov    eax,ebp
c0014bb2:	88 d5                	mov    ch,dl
c0014bb4:	83 c4 1c             	add    esp,0x1c
c0014bb7:	c1 e0 10             	shl    eax,0x10
c0014bba:	0f b7 d1             	movzx  edx,cx
c0014bbd:	09 c2                	or     edx,eax
c0014bbf:	89 f8                	mov    eax,edi
c0014bc1:	c1 e0 10             	shl    eax,0x10
c0014bc4:	89 d1                	mov    ecx,edx
c0014bc6:	89 da                	mov    edx,ebx
c0014bc8:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c0014bce:	09 c2                	or     edx,eax
c0014bd0:	52                   	push   edx
c0014bd1:	51                   	push   ecx
c0014bd2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014bd6:	e8 77 49 ff ff       	call   c0009552 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014bdb:	83 c4 3c             	add    esp,0x3c
c0014bde:	31 d2                	xor    edx,edx
c0014be0:	5b                   	pop    ebx
c0014be1:	5e                   	pop    esi
c0014be2:	83 f0 01             	xor    eax,0x1
c0014be5:	5f                   	pop    edi
c0014be6:	0f b6 c0             	movzx  eax,al
c0014be9:	5d                   	pop    ebp
c0014bea:	c3                   	ret    

c0014beb <SysSymlink(regs*)>:
c0014beb:	56                   	push   esi
c0014bec:	83 c8 ff             	or     eax,0xffffffff
c0014bef:	53                   	push   ebx
c0014bf0:	89 c2                	mov    edx,eax
c0014bf2:	81 ec 34 02 00 00    	sub    esp,0x234
c0014bf8:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014bff:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014c03:	74 50                	je     c0014c55 <SysSymlink(regs*)+0x6a>
c0014c05:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014c08:	85 c9                	test   ecx,ecx
c0014c0a:	74 49                	je     c0014c55 <SysSymlink(regs*)+0x6a>
c0014c0c:	6a 01                	push   0x1
c0014c0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c16:	05 0c 01 00 00       	add    eax,0x10c
c0014c1b:	50                   	push   eax
c0014c1c:	51                   	push   ecx
c0014c1d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014c21:	56                   	push   esi
c0014c22:	e8 35 32 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014c27:	6a 01                	push   0x1
c0014c29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c2e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c31:	05 0c 01 00 00       	add    eax,0x10c
c0014c36:	50                   	push   eax
c0014c37:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c3a:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014c41:	53                   	push   ebx
c0014c42:	e8 15 32 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014c47:	83 c4 18             	add    esp,0x18
c0014c4a:	56                   	push   esi
c0014c4b:	53                   	push   ebx
c0014c4c:	e8 39 2e ff ff       	call   c0007a8a <KeCreateSymlink(char const*, char const*)>
c0014c51:	83 c4 10             	add    esp,0x10
c0014c54:	99                   	cdq    
c0014c55:	81 c4 34 02 00 00    	add    esp,0x234
c0014c5b:	5b                   	pop    ebx
c0014c5c:	5e                   	pop    esi
c0014c5d:	c3                   	ret    

c0014c5e <SysTimezone(regs*)>:
c0014c5e:	83 ec 0c             	sub    esp,0xc
c0014c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c65:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014c69:	75 17                	jne    c0014c82 <SysTimezone(regs*)+0x24>
c0014c6b:	83 ec 0c             	sub    esp,0xc
c0014c6e:	68 dc 4a 02 c0       	push   0xc0024adc
c0014c73:	e8 ee 22 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014c78:	83 c8 ff             	or     eax,0xffffffff
c0014c7b:	83 c4 10             	add    esp,0x10
c0014c7e:	89 c2                	mov    edx,eax
c0014c80:	eb 16                	jmp    c0014c98 <SysTimezone(regs*)+0x3a>
c0014c82:	83 ec 0c             	sub    esp,0xc
c0014c85:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c88:	e8 7c 43 ff ff       	call   c0009009 <KeSetTimezone(int)>
c0014c8d:	31 d2                	xor    edx,edx
c0014c8f:	83 c4 10             	add    esp,0x10
c0014c92:	83 f0 01             	xor    eax,0x1
c0014c95:	0f b6 c0             	movzx  eax,al
c0014c98:	83 c4 0c             	add    esp,0xc
c0014c9b:	c3                   	ret    

c0014c9c <SysTruncate(regs*)>:
c0014c9c:	55                   	push   ebp
c0014c9d:	57                   	push   edi
c0014c9e:	31 ff                	xor    edi,edi
c0014ca0:	56                   	push   esi
c0014ca1:	53                   	push   ebx
c0014ca2:	83 ec 0c             	sub    esp,0xc
c0014ca5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ca9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014cac:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014cb0:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014cb3:	89 ce                	mov    esi,ecx
c0014cb5:	0f 84 9a 00 00 00    	je     c0014d55 <SysTruncate(regs*)+0xb9>
c0014cbb:	83 ec 0c             	sub    esp,0xc
c0014cbe:	68 14 01 00 00       	push   0x114
c0014cc3:	e8 c0 aa ff ff       	call   c000f788 <malloc>
c0014cc8:	83 c4 0c             	add    esp,0xc
c0014ccb:	89 c3                	mov    ebx,eax
c0014ccd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cd2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014cd5:	55                   	push   ebp
c0014cd6:	53                   	push   ebx
c0014cd7:	e8 ac 34 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0014cdc:	83 c4 10             	add    esp,0x10
c0014cdf:	31 d2                	xor    edx,edx
c0014ce1:	85 db                	test   ebx,ebx
c0014ce3:	b8 03 00 00 00       	mov    eax,0x3
c0014ce8:	0f 84 a2 00 00 00    	je     c0014d90 <SysTruncate(regs*)+0xf4>
c0014cee:	51                   	push   ecx
c0014cef:	51                   	push   ecx
c0014cf0:	6a 02                	push   0x2
c0014cf2:	53                   	push   ebx
c0014cf3:	e8 ae 34 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0014cf8:	83 c4 10             	add    esp,0x10
c0014cfb:	85 c0                	test   eax,eax
c0014cfd:	74 13                	je     c0014d12 <SysTruncate(regs*)+0x76>
c0014cff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d01:	83 ec 0c             	sub    esp,0xc
c0014d04:	53                   	push   ebx
c0014d05:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d08:	83 c4 10             	add    esp,0x10
c0014d0b:	b8 04 00 00 00       	mov    eax,0x4
c0014d10:	eb 7c                	jmp    c0014d8e <SysTruncate(regs*)+0xf2>
c0014d12:	52                   	push   edx
c0014d13:	57                   	push   edi
c0014d14:	56                   	push   esi
c0014d15:	53                   	push   ebx
c0014d16:	e8 9f 35 ff ff       	call   c00082ba <File::truncate(unsigned long long)>
c0014d1b:	83 c4 10             	add    esp,0x10
c0014d1e:	85 c0                	test   eax,eax
c0014d20:	74 1b                	je     c0014d3d <SysTruncate(regs*)+0xa1>
c0014d22:	83 ec 0c             	sub    esp,0xc
c0014d25:	53                   	push   ebx
c0014d26:	e8 d9 34 ff ff       	call   c0008204 <File::close()>
c0014d2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d33:	83 c4 10             	add    esp,0x10
c0014d36:	b8 05 00 00 00       	mov    eax,0x5
c0014d3b:	eb 51                	jmp    c0014d8e <SysTruncate(regs*)+0xf2>
c0014d3d:	83 ec 0c             	sub    esp,0xc
c0014d40:	53                   	push   ebx
c0014d41:	e8 be 34 ff ff       	call   c0008204 <File::close()>
c0014d46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d4b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d4e:	83 c4 10             	add    esp,0x10
c0014d51:	31 c0                	xor    eax,eax
c0014d53:	eb 39                	jmp    c0014d8e <SysTruncate(regs*)+0xf2>
c0014d55:	31 d2                	xor    edx,edx
c0014d57:	83 fd 02             	cmp    ebp,0x2
c0014d5a:	b8 01 00 00 00       	mov    eax,0x1
c0014d5f:	7e 2f                	jle    c0014d90 <SysTruncate(regs*)+0xf4>
c0014d61:	83 ec 0c             	sub    esp,0xc
c0014d64:	51                   	push   ecx
c0014d65:	e8 13 e3 ff ff       	call   c001307d <KeGetFileFromDescriptor(int)>
c0014d6a:	83 c4 10             	add    esp,0x10
c0014d6d:	31 d2                	xor    edx,edx
c0014d6f:	89 c1                	mov    ecx,eax
c0014d71:	b8 02 00 00 00       	mov    eax,0x2
c0014d76:	85 c9                	test   ecx,ecx
c0014d78:	74 16                	je     c0014d90 <SysTruncate(regs*)+0xf4>
c0014d7a:	50                   	push   eax
c0014d7b:	57                   	push   edi
c0014d7c:	56                   	push   esi
c0014d7d:	51                   	push   ecx
c0014d7e:	e8 37 35 ff ff       	call   c00082ba <File::truncate(unsigned long long)>
c0014d83:	83 c4 10             	add    esp,0x10
c0014d86:	85 c0                	test   eax,eax
c0014d88:	0f 95 c0             	setne  al
c0014d8b:	0f b6 c0             	movzx  eax,al
c0014d8e:	31 d2                	xor    edx,edx
c0014d90:	83 c4 0c             	add    esp,0xc
c0014d93:	5b                   	pop    ebx
c0014d94:	5e                   	pop    esi
c0014d95:	5f                   	pop    edi
c0014d96:	5d                   	pop    ebp
c0014d97:	c3                   	ret    

c0014d98 <SysWrite(regs*)>:
c0014d98:	57                   	push   edi
c0014d99:	56                   	push   esi
c0014d9a:	53                   	push   ebx
c0014d9b:	83 ec 10             	sub    esp,0x10
c0014d9e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014da2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014da5:	83 f8 02             	cmp    eax,0x2
c0014da8:	77 10                	ja     c0014dba <SysWrite(regs*)+0x22>
c0014daa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014daf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014db2:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014db8:	eb 0e                	jmp    c0014dc8 <SysWrite(regs*)+0x30>
c0014dba:	83 ec 0c             	sub    esp,0xc
c0014dbd:	50                   	push   eax
c0014dbe:	e8 ba e2 ff ff       	call   c001307d <KeGetFileFromDescriptor(int)>
c0014dc3:	83 c4 10             	add    esp,0x10
c0014dc6:	89 c1                	mov    ecx,eax
c0014dc8:	83 c8 ff             	or     eax,0xffffffff
c0014dcb:	85 c9                	test   ecx,ecx
c0014dcd:	89 c2                	mov    edx,eax
c0014dcf:	74 28                	je     c0014df9 <SysWrite(regs*)+0x61>
c0014dd1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014dd9:	83 ec 0c             	sub    esp,0xc
c0014ddc:	31 ff                	xor    edi,edi
c0014dde:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014de2:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014de4:	52                   	push   edx
c0014de5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014de8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014deb:	57                   	push   edi
c0014dec:	56                   	push   esi
c0014ded:	51                   	push   ecx
c0014dee:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014df1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014df5:	83 c4 20             	add    esp,0x20
c0014df8:	99                   	cdq    
c0014df9:	83 c4 10             	add    esp,0x10
c0014dfc:	5b                   	pop    ebx
c0014dfd:	5e                   	pop    esi
c0014dfe:	5f                   	pop    edi
c0014dff:	c3                   	ret    

c0014e00 <SysWsbe(regs*)>:
c0014e00:	55                   	push   ebp
c0014e01:	57                   	push   edi
c0014e02:	56                   	push   esi
c0014e03:	53                   	push   ebx
c0014e04:	83 ec 3c             	sub    esp,0x3c
c0014e07:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014e0b:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014e12:	75 2d                	jne    c0014e41 <SysWsbe(regs*)+0x41>
c0014e14:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0014e1b:	75 24                	jne    c0014e41 <SysWsbe(regs*)+0x41>
c0014e1d:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0014e24:	75 1b                	jne    c0014e41 <SysWsbe(regs*)+0x41>
c0014e26:	6a 01                	push   0x1
c0014e28:	6a 00                	push   0x0
c0014e2a:	68 1d 9f 00 c0       	push   0xc0009f1d
c0014e2f:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0014e35:	e8 42 1c 00 00       	call   c0016a7c <Process::createThread(void (*)(void*), void*, int)>
c0014e3a:	83 c4 10             	add    esp,0x10
c0014e3d:	31 c0                	xor    eax,eax
c0014e3f:	eb 52                	jmp    c0014e93 <SysWsbe(regs*)+0x93>
c0014e41:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014e45:	be f1 4a 02 c0       	mov    esi,0xc0024af1
c0014e4a:	b9 0b 00 00 00       	mov    ecx,0xb
c0014e4f:	fc                   	cld    
c0014e50:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014e52:	83 ec 0c             	sub    esp,0xc
c0014e55:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014e59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e61:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0014e67:	8b 06                	mov    eax,DWORD PTR [esi]
c0014e69:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0014e6c:	57                   	push   edi
c0014e6d:	e8 0e b7 fe ff       	call   c0000580 <strlen>
c0014e72:	5a                   	pop    edx
c0014e73:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014e77:	52                   	push   edx
c0014e78:	31 d2                	xor    edx,edx
c0014e7a:	57                   	push   edi
c0014e7b:	52                   	push   edx
c0014e7c:	50                   	push   eax
c0014e7d:	56                   	push   esi
c0014e7e:	ff d5                	call   ebp
c0014e80:	83 c4 14             	add    esp,0x14
c0014e83:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e86:	e8 8d 26 00 00       	call   c0017518 <KeTerminateCurrentThread(int)>
c0014e8b:	83 c4 10             	add    esp,0x10
c0014e8e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014e93:	83 c4 3c             	add    esp,0x3c
c0014e96:	31 d2                	xor    edx,edx
c0014e98:	5b                   	pop    ebx
c0014e99:	5e                   	pop    esi
c0014e9a:	5f                   	pop    edi
c0014e9b:	5d                   	pop    ebp
c0014e9c:	c3                   	ret    

c0014e9d <SysYield(regs*)>:
c0014e9d:	83 ec 0c             	sub    esp,0xc
c0014ea0:	fa                   	cli    
c0014ea1:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c0014ea7:	e8 78 1e 00 00       	call   c0016d24 <schedule()>
c0014eac:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c0014eb3:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c0014eba:	75 01                	jne    c0014ebd <SysYield(regs*)+0x20>
c0014ebc:	fb                   	sti    
c0014ebd:	31 c0                	xor    eax,eax
c0014ebf:	31 d2                	xor    edx,edx
c0014ec1:	83 c4 0c             	add    esp,0xc
c0014ec4:	c3                   	ret    
c0014ec5:	66 90                	xchg   ax,ax
c0014ec7:	90                   	nop

c0014ec8 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0014ec8:	55                   	push   ebp
c0014ec9:	57                   	push   edi
c0014eca:	56                   	push   esi
c0014ecb:	53                   	push   ebx
c0014ecc:	83 ec 2c             	sub    esp,0x2c
c0014ecf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014ed3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ed7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014edb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014edf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014ee3:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c0014ee6:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0014eea:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0014eee:	c1 e0 08             	shl    eax,0x8
c0014ef1:	09 c6                	or     esi,eax
c0014ef3:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0014ef7:	c1 e0 10             	shl    eax,0x10
c0014efa:	09 c6                	or     esi,eax
c0014efc:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0014f00:	83 e0 7f             	and    eax,0x7f
c0014f03:	c1 e0 18             	shl    eax,0x18
c0014f06:	09 f0                	or     eax,esi
c0014f08:	89 c5                	mov    ebp,eax
c0014f0a:	89 f8                	mov    eax,edi
c0014f0c:	80 f4 00             	xor    ah,0x0
c0014f0f:	89 c1                	mov    ecx,eax
c0014f11:	89 e8                	mov    eax,ebp
c0014f13:	80 f4 00             	xor    ah,0x0
c0014f16:	89 c3                	mov    ebx,eax
c0014f18:	89 d8                	mov    eax,ebx
c0014f1a:	09 c8                	or     eax,ecx
c0014f1c:	74 42                	je     c0014f60 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0014f1e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014f22:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0014f25:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0014f29:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0014f2d:	c1 e0 08             	shl    eax,0x8
c0014f30:	09 c6                	or     esi,eax
c0014f32:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0014f36:	c1 e0 10             	shl    eax,0x10
c0014f39:	09 c6                	or     esi,eax
c0014f3b:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0014f3f:	83 e0 7f             	and    eax,0x7f
c0014f42:	c1 e0 18             	shl    eax,0x18
c0014f45:	09 f0                	or     eax,esi
c0014f47:	89 c3                	mov    ebx,eax
c0014f49:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0014f4e:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0014f54:	29 c1                	sub    ecx,eax
c0014f56:	19 d3                	sbb    ebx,edx
c0014f58:	89 c8                	mov    eax,ecx
c0014f5a:	89 da                	mov    edx,ebx
c0014f5c:	eb 0e                	jmp    c0014f6c <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0014f5e:	66 90                	xchg   ax,ax
c0014f60:	b8 00 00 00 00       	mov    eax,0x0
c0014f65:	ba 00 00 00 00       	mov    edx,0x0
c0014f6a:	66 90                	xchg   ax,ax
c0014f6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014f70:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f78:	80 f4 00             	xor    ah,0x0
c0014f7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f83:	80 f4 00             	xor    ah,0x0
c0014f86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f8a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014f8e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0014f92:	89 e8                	mov    eax,ebp
c0014f94:	09 f8                	or     eax,edi
c0014f96:	74 30                	je     c0014fc8 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c0014f98:	8b 0d 50 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bb50
c0014f9e:	8b 1d 54 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb54
c0014fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fa8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fac:	01 c8                	add    eax,ecx
c0014fae:	11 da                	adc    edx,ebx
c0014fb0:	89 c7                	mov    edi,eax
c0014fb2:	83 e7 ff             	and    edi,0xffffffff
c0014fb5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014fb8:	89 d0                	mov    eax,edx
c0014fba:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fc3:	eb 13                	jmp    c0014fd8 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c0014fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0014fc8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014fcf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014fd7:	90                   	nop
c0014fd8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014fdc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014fdf:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0014fe3:	89 cf                	mov    edi,ecx
c0014fe5:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0014fe8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0014feb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0014fef:	0f b6 5c 24 04       	movzx  ebx,BYTE PTR [esp+0x4]
c0014ff4:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0014ff7:	83 e2 00             	and    edx,0x0
c0014ffa:	88 d1                	mov    cl,dl
c0014ffc:	88 da                	mov    dl,bl
c0014ffe:	09 ca                	or     edx,ecx
c0015000:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015003:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015007:	c1 ea 08             	shr    edx,0x8
c001500a:	0f b6 da             	movzx  ebx,dl
c001500d:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015010:	83 e2 00             	and    edx,0x0
c0015013:	88 d1                	mov    cl,dl
c0015015:	88 da                	mov    dl,bl
c0015017:	09 ca                	or     edx,ecx
c0015019:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c001501c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015020:	c1 ea 10             	shr    edx,0x10
c0015023:	0f b6 da             	movzx  ebx,dl
c0015026:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015029:	83 e2 00             	and    edx,0x0
c001502c:	88 d1                	mov    cl,dl
c001502e:	88 da                	mov    dl,bl
c0015030:	09 ca                	or     edx,ecx
c0015032:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015035:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015039:	c1 ea 18             	shr    edx,0x18
c001503c:	83 e2 7f             	and    edx,0x7f
c001503f:	89 d3                	mov    ebx,edx
c0015041:	83 e3 7f             	and    ebx,0x7f
c0015044:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015047:	83 e2 80             	and    edx,0xffffff80
c001504a:	88 d1                	mov    cl,dl
c001504c:	88 da                	mov    dl,bl
c001504e:	09 ca                	or     edx,ecx
c0015050:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015053:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015057:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001505b:	83 c4 2c             	add    esp,0x2c
c001505e:	5b                   	pop    ebx
c001505f:	5e                   	pop    esi
c0015060:	5f                   	pop    edi
c0015061:	5d                   	pop    ebp
c0015062:	c3                   	ret    
c0015063:	90                   	nop

c0015064 <KeCheckAlarm(ThreadControlBlock*)>:
c0015064:	55                   	push   ebp
c0015065:	57                   	push   edi
c0015066:	56                   	push   esi
c0015067:	53                   	push   ebx
c0015068:	83 ec 0c             	sub    esp,0xc
c001506b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001506f:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015072:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0015076:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c001507a:	c1 e5 08             	shl    ebp,0x8
c001507d:	09 fd                	or     ebp,edi
c001507f:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c0015083:	c1 e7 10             	shl    edi,0x10
c0015086:	09 ef                	or     edi,ebp
c0015088:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c001508c:	83 e0 7f             	and    eax,0x7f
c001508f:	c1 e0 18             	shl    eax,0x18
c0015092:	09 f8                	or     eax,edi
c0015094:	89 c1                	mov    ecx,eax
c0015096:	89 d0                	mov    eax,edx
c0015098:	80 f4 00             	xor    ah,0x0
c001509b:	89 c3                	mov    ebx,eax
c001509d:	89 c8                	mov    eax,ecx
c001509f:	80 f4 00             	xor    ah,0x0
c00150a2:	89 c6                	mov    esi,eax
c00150a4:	89 f0                	mov    eax,esi
c00150a6:	09 d8                	or     eax,ebx
c00150a8:	0f 84 9e 00 00 00    	je     c001514c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00150ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150b2:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c00150b5:	0f b6 58 67          	movzx  ebx,BYTE PTR [eax+0x67]
c00150b9:	0f b6 70 68          	movzx  esi,BYTE PTR [eax+0x68]
c00150bd:	c1 e6 08             	shl    esi,0x8
c00150c0:	09 de                	or     esi,ebx
c00150c2:	0f b6 58 69          	movzx  ebx,BYTE PTR [eax+0x69]
c00150c6:	c1 e3 10             	shl    ebx,0x10
c00150c9:	09 f3                	or     ebx,esi
c00150cb:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c00150cf:	83 e0 7f             	and    eax,0x7f
c00150d2:	c1 e0 18             	shl    eax,0x18
c00150d5:	09 d8                	or     eax,ebx
c00150d7:	89 c1                	mov    ecx,eax
c00150d9:	89 cb                	mov    ebx,ecx
c00150db:	89 d1                	mov    ecx,edx
c00150dd:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c00150e2:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c00150e8:	39 c8                	cmp    eax,ecx
c00150ea:	89 d0                	mov    eax,edx
c00150ec:	19 d8                	sbb    eax,ebx
c00150ee:	72 5c                	jb     c001514c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00150f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150f4:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c00150fb:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c00150fe:	83 e2 00             	and    edx,0x0
c0015101:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015104:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015107:	83 e2 00             	and    edx,0x0
c001510a:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c001510d:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015110:	83 e2 00             	and    edx,0x0
c0015113:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015116:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015119:	83 e2 80             	and    edx,0xffffff80
c001511c:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001511f:	83 ec 0c             	sub    esp,0xc
c0015122:	68 1d 4b 02 c0       	push   0xc0024b1d
c0015127:	e8 3a 1e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001512c:	83 c4 10             	add    esp,0x10
c001512f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015133:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015136:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c001513c:	83 ec 08             	sub    esp,0x8
c001513f:	6a 0e                	push   0xe
c0015141:	50                   	push   eax
c0015142:	e8 5c bd ff ff       	call   c0010ea3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0015147:	83 c4 10             	add    esp,0x10
c001514a:	66 90                	xchg   ax,ax
c001514c:	90                   	nop
c001514d:	83 c4 0c             	add    esp,0xc
c0015150:	5b                   	pop    ebx
c0015151:	5e                   	pop    esi
c0015152:	5f                   	pop    edi
c0015153:	5d                   	pop    ebp
c0015154:	c3                   	ret    

c0015155 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015155:	55                   	push   ebp
c0015156:	57                   	push   edi
c0015157:	56                   	push   esi
c0015158:	53                   	push   ebx
c0015159:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001515f:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001516a:	74 3b                	je     c00151a7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001516c:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015174:	74 31                	je     c00151a7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015176:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001517e:	75 27                	jne    c00151a7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015180:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0015187:	05 00 10 00 00       	add    eax,0x1000
c001518c:	89 c2                	mov    edx,eax
c001518e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015193:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001519a:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00151a0:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00151a7:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00151ae:	83 ec 0c             	sub    esp,0xc
c00151b1:	6a 01                	push   0x1
c00151b3:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00151b9:	e8 1d e0 ff ff       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c00151be:	83 c4 10             	add    esp,0x10
c00151c1:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00151c7:	89 c3                	mov    ebx,eax
c00151c9:	0f 86 27 01 00 00    	jbe    c00152f6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c00151cf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00151d7:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00151de:	c1 ee 0c             	shr    esi,0xc
c00151e1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00151e5:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00151ec:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00151f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00151f7:	29 ef                	sub    edi,ebp
c00151f9:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00151fd:	0f 83 fa 00 00 00    	jae    c00152fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0015203:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015209:	b8 00 10 00 00       	mov    eax,0x1000
c001520e:	0f 47 f8             	cmova  edi,eax
c0015211:	83 ec 0c             	sub    esp,0xc
c0015214:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001521b:	31 d2                	xor    edx,edx
c001521d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001521f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015223:	50                   	push   eax
c0015224:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015228:	56                   	push   esi
c0015229:	52                   	push   edx
c001522a:	57                   	push   edi
c001522b:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015232:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015235:	83 c4 20             	add    esp,0x20
c0015238:	85 c0                	test   eax,eax
c001523a:	75 06                	jne    c0015242 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c001523c:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015240:	74 13                	je     c0015255 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0015242:	83 ec 0c             	sub    esp,0xc
c0015245:	53                   	push   ebx
c0015246:	e8 8e e2 ff ff       	call   c00134d9 <Virt::freeKernelVirtualPages(unsigned long)>
c001524b:	83 c4 10             	add    esp,0x10
c001524e:	31 c0                	xor    eax,eax
c0015250:	e9 80 01 00 00       	jmp    c00153d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0015255:	fa                   	cli    
c0015256:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001525c:	e8 7d ab ff ff       	call   c000fdde <Phys::allocatePage()>
c0015261:	6a 07                	push   0x7
c0015263:	53                   	push   ebx
c0015264:	50                   	push   eax
c0015265:	89 c7                	mov    edi,eax
c0015267:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001526c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001526f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015275:	e8 3a e6 ff ff       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001527a:	83 c4 0c             	add    esp,0xc
c001527d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015284:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001528a:	6a 00                	push   0x0
c001528c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015291:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015294:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001529a:	e8 81 e4 ff ff       	call   c0013720 <VAS::mapOtherVASIn(bool, VAS*)>
c001529f:	58                   	pop    eax
c00152a0:	5a                   	pop    edx
c00152a1:	68 07 0c 00 00       	push   0xc07
c00152a6:	55                   	push   ebp
c00152a7:	57                   	push   edi
c00152a8:	89 df                	mov    edi,ebx
c00152aa:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00152b1:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00152b7:	6a 00                	push   0x0
c00152b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152c1:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00152c7:	e8 3c e8 ff ff       	call   c0013b08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00152cc:	b9 00 10 00 00       	mov    ecx,0x1000
c00152d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152d3:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00152da:	83 c4 20             	add    esp,0x20
c00152dd:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00152e4:	75 01                	jne    c00152e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c00152e6:	fb                   	sti    
c00152e7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00152eb:	81 c5 00 10 00 00    	add    ebp,0x1000
c00152f1:	e9 ef fe ff ff       	jmp    c00151e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00152f6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00152fd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015304:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001530a:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015310:	0f 86 b1 00 00 00    	jbe    c00153c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0015316:	fa                   	cli    
c0015317:	51                   	push   ecx
c0015318:	31 ff                	xor    edi,edi
c001531a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015321:	c1 ee 0c             	shr    esi,0xc
c0015324:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001532a:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015330:	6a 00                	push   0x0
c0015332:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015337:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001533a:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015340:	e8 db e3 ff ff       	call   c0013720 <VAS::mapOtherVASIn(bool, VAS*)>
c0015345:	83 c4 10             	add    esp,0x10
c0015348:	e8 91 aa ff ff       	call   c000fdde <Phys::allocatePage()>
c001534d:	47                   	inc    edi
c001534e:	6a 07                	push   0x7
c0015350:	53                   	push   ebx
c0015351:	50                   	push   eax
c0015352:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015356:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001535c:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001535f:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015365:	e8 4a e5 ff ff       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001536a:	58                   	pop    eax
c001536b:	5a                   	pop    edx
c001536c:	68 07 0c 00 00       	push   0xc07
c0015371:	55                   	push   ebp
c0015372:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015378:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001537c:	50                   	push   eax
c001537d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015384:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001538a:	6a 00                	push   0x0
c001538c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015391:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015394:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001539a:	e8 69 e7 ff ff       	call   c0013b08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001539f:	83 c4 1c             	add    esp,0x1c
c00153a2:	68 00 10 00 00       	push   0x1000
c00153a7:	6a 00                	push   0x0
c00153a9:	53                   	push   ebx
c00153aa:	e8 41 b1 fe ff       	call   c00004f0 <memset>
c00153af:	83 c4 10             	add    esp,0x10
c00153b2:	39 fe                	cmp    esi,edi
c00153b4:	77 92                	ja     c0015348 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c00153b6:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00153bd:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00153c4:	75 01                	jne    c00153c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00153c6:	fb                   	sti    
c00153c7:	83 ec 0c             	sub    esp,0xc
c00153ca:	53                   	push   ebx
c00153cb:	e8 09 e1 ff ff       	call   c00134d9 <Virt::freeKernelVirtualPages(unsigned long)>
c00153d0:	83 c4 10             	add    esp,0x10
c00153d3:	b0 01                	mov    al,0x1
c00153d5:	81 c4 2c 10 00 00    	add    esp,0x102c
c00153db:	5b                   	pop    ebx
c00153dc:	5e                   	pop    esi
c00153dd:	5f                   	pop    edi
c00153de:	5d                   	pop    ebp
c00153df:	c3                   	ret    

c00153e0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00153e0:	55                   	push   ebp
c00153e1:	57                   	push   edi
c00153e2:	56                   	push   esi
c00153e3:	53                   	push   ebx
c00153e4:	83 ec 68             	sub    esp,0x68
c00153e7:	68 14 01 00 00       	push   0x114
c00153ec:	e8 97 a3 ff ff       	call   c000f788 <malloc>
c00153f1:	83 c4 0c             	add    esp,0xc
c00153f4:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00153f8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00153fc:	89 c3                	mov    ebx,eax
c00153fe:	50                   	push   eax
c00153ff:	e8 84 2d ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0015404:	5e                   	pop    esi
c0015405:	5f                   	pop    edi
c0015406:	6a 01                	push   0x1
c0015408:	53                   	push   ebx
c0015409:	e8 98 2d ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c001540e:	83 c4 10             	add    esp,0x10
c0015411:	85 c0                	test   eax,eax
c0015413:	0f 85 cb 01 00 00    	jne    c00155e4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015419:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015421:	83 ec 0c             	sub    esp,0xc
c0015424:	6a 34                	push   0x34
c0015426:	e8 5d a3 ff ff       	call   c000f788 <malloc>
c001542b:	59                   	pop    ecx
c001542c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015430:	89 c7                	mov    edi,eax
c0015432:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015434:	56                   	push   esi
c0015435:	57                   	push   edi
c0015436:	6a 00                	push   0x0
c0015438:	6a 34                	push   0x34
c001543a:	53                   	push   ebx
c001543b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001543e:	83 c4 20             	add    esp,0x20
c0015441:	85 c0                	test   eax,eax
c0015443:	0f 85 9b 01 00 00    	jne    c00155e4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015449:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001544f:	0f 85 8f 01 00 00    	jne    c00155e4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015455:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015458:	85 c0                	test   eax,eax
c001545a:	0f 84 84 01 00 00    	je     c00155e4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015460:	52                   	push   edx
c0015461:	31 d2                	xor    edx,edx
c0015463:	52                   	push   edx
c0015464:	50                   	push   eax
c0015465:	53                   	push   ebx
c0015466:	e8 f9 2d ff ff       	call   c0008264 <File::seek(unsigned long long)>
c001546b:	83 c4 10             	add    esp,0x10
c001546e:	85 c0                	test   eax,eax
c0015470:	0f 85 6e 01 00 00    	jne    c00155e4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015476:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015479:	83 ec 0c             	sub    esp,0xc
c001547c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015480:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015484:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015488:	0f af c2             	imul   eax,edx
c001548b:	50                   	push   eax
c001548c:	e8 f7 a2 ff ff       	call   c000f788 <malloc>
c0015491:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015493:	89 34 24             	mov    DWORD PTR [esp],esi
c0015496:	31 f6                	xor    esi,esi
c0015498:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001549c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154a0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00154a4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00154a8:	0f af c2             	imul   eax,edx
c00154ab:	99                   	cdq    
c00154ac:	52                   	push   edx
c00154ad:	50                   	push   eax
c00154ae:	53                   	push   ebx
c00154af:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00154b2:	83 c4 20             	add    esp,0x20
c00154b5:	66 3b 77 30          	cmp    si,WORD PTR [edi+0x30]
c00154b9:	0f b7 c6             	movzx  eax,si
c00154bc:	73 71                	jae    c001552f <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c00154be:	55                   	push   ebp
c00154bf:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00154c3:	6b c0 28             	imul   eax,eax,0x28
c00154c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00154ca:	6b d2 28             	imul   edx,edx,0x28
c00154cd:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00154d0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00154d4:	31 d2                	xor    edx,edx
c00154d6:	52                   	push   edx
c00154d7:	50                   	push   eax
c00154d8:	53                   	push   ebx
c00154d9:	e8 86 2d ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00154de:	83 c4 0c             	add    esp,0xc
c00154e1:	6a 20                	push   0x20
c00154e3:	6a 00                	push   0x0
c00154e5:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c00154e9:	55                   	push   ebp
c00154ea:	e8 01 b0 fe ff       	call   c00004f0 <memset>
c00154ef:	58                   	pop    eax
c00154f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00154f2:	8d 54 24 38          	lea    edx,[esp+0x38]
c00154f6:	52                   	push   edx
c00154f7:	55                   	push   ebp
c00154f8:	6a 00                	push   0x0
c00154fa:	6a 1f                	push   0x1f
c00154fc:	53                   	push   ebx
c00154fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015500:	83 c4 18             	add    esp,0x18
c0015503:	55                   	push   ebp
c0015504:	68 2e 4b 02 c0       	push   0xc0024b2e
c0015509:	e8 72 b2 fe ff       	call   c0000780 <strcmp>
c001550e:	83 c4 10             	add    esp,0x10
c0015511:	85 c0                	test   eax,eax
c0015513:	75 17                	jne    c001552c <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015515:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015519:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001551d:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015523:	83 c8 80             	or     eax,0xffffff80
c0015526:	88 82 76 02 00 00    	mov    BYTE PTR [edx+0x276],al
c001552c:	46                   	inc    esi
c001552d:	eb 86                	jmp    c00154b5 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c001552f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015532:	85 c0                	test   eax,eax
c0015534:	0f 84 aa 00 00 00    	je     c00155e4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c001553a:	31 d2                	xor    edx,edx
c001553c:	56                   	push   esi
c001553d:	52                   	push   edx
c001553e:	50                   	push   eax
c001553f:	53                   	push   ebx
c0015540:	e8 1f 2d ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015545:	83 c4 10             	add    esp,0x10
c0015548:	85 c0                	test   eax,eax
c001554a:	0f 85 94 00 00 00    	jne    c00155e4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015550:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015554:	83 ec 0c             	sub    esp,0xc
c0015557:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001555b:	0f af c2             	imul   eax,edx
c001555e:	50                   	push   eax
c001555f:	e8 24 a2 ff ff       	call   c000f788 <malloc>
c0015564:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015568:	59                   	pop    ecx
c0015569:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001556b:	8d 44 24 34          	lea    eax,[esp+0x34]
c001556f:	50                   	push   eax
c0015570:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015574:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015578:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001557c:	0f af c2             	imul   eax,edx
c001557f:	99                   	cdq    
c0015580:	52                   	push   edx
c0015581:	50                   	push   eax
c0015582:	53                   	push   ebx
c0015583:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015586:	83 c4 20             	add    esp,0x20
c0015589:	31 c9                	xor    ecx,ecx
c001558b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015593:	66 3b 4f 2c          	cmp    cx,WORD PTR [edi+0x2c]
c0015597:	0f b7 e9             	movzx  ebp,cx
c001559a:	0f 83 89 00 00 00    	jae    c0015629 <Thr::loadProgramIntoMemory(Process*, char const*)+0x249>
c00155a0:	c1 e5 05             	shl    ebp,0x5
c00155a3:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c00155a7:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00155ab:	75 76                	jne    c0015623 <Thr::loadProgramIntoMemory(Process*, char const*)+0x243>
c00155ad:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00155b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b4:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00155b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00155bb:	52                   	push   edx
c00155bc:	31 d2                	xor    edx,edx
c00155be:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00155c1:	52                   	push   edx
c00155c2:	50                   	push   eax
c00155c3:	53                   	push   ebx
c00155c4:	e8 9b 2c ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00155c9:	83 c4 10             	add    esp,0x10
c00155cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00155d0:	85 c0                	test   eax,eax
c00155d2:	74 17                	je     c00155eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x20b>
c00155d4:	83 ec 0c             	sub    esp,0xc
c00155d7:	68 3d 4b 02 c0       	push   0xc0024b3d
c00155dc:	e8 85 19 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00155e1:	83 c4 10             	add    esp,0x10
c00155e4:	31 c0                	xor    eax,eax
c00155e6:	e9 8e 00 00 00       	jmp    c0015679 <Thr::loadProgramIntoMemory(Process*, char const*)+0x299>
c00155eb:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00155ef:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00155f2:	83 ec 0c             	sub    esp,0xc
c00155f5:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c00155f8:	50                   	push   eax
c00155f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00155fd:	56                   	push   esi
c00155fe:	53                   	push   ebx
c00155ff:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015606:	e8 4a fb ff ff       	call   c0015155 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001560b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001560f:	83 c4 20             	add    esp,0x20
c0015612:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0015616:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001561a:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c001561f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0015623:	41                   	inc    ecx
c0015624:	e9 6a ff ff ff       	jmp    c0015593 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015629:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c001562d:	83 ec 0c             	sub    esp,0xc
c0015630:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015634:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0015638:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c001563e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015643:	89 b1 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],esi
c0015649:	05 00 10 00 00       	add    eax,0x1000
c001564e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015655:	e8 3e a1 ff ff       	call   c000f798 <free>
c001565a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001565d:	e8 36 a1 ff ff       	call   c000f798 <free>
c0015662:	58                   	pop    eax
c0015663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015667:	e8 2c a1 ff ff       	call   c000f798 <free>
c001566c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001566f:	e8 90 2b ff ff       	call   c0008204 <File::close()>
c0015674:	83 c4 10             	add    esp,0x10
c0015677:	b0 01                	mov    al,0x1
c0015679:	83 c4 5c             	add    esp,0x5c
c001567c:	5b                   	pop    ebx
c001567d:	5e                   	pop    esi
c001567e:	5f                   	pop    edi
c001567f:	5d                   	pop    ebp
c0015680:	c3                   	ret    

c0015681 <Thr::runtimeReferenceHelper()>:
c0015681:	83 ec 18             	sub    esp,0x18
c0015684:	68 45 4b 02 c0       	push   0xc0024b45
c0015689:	e8 d8 18 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001568e:	fa                   	cli    
c001568f:	83 c4 10             	add    esp,0x10
c0015692:	eb fe                	jmp    c0015692 <Thr::runtimeReferenceHelper()+0x11>

c0015694 <Thr::getAddressOfKernelSymbol(char const*)>:
c0015694:	57                   	push   edi
c0015695:	56                   	push   esi
c0015696:	53                   	push   ebx
c0015697:	31 db                	xor    ebx,ebx
c0015699:	39 1d 40 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca40,ebx
c001569f:	7e 3c                	jle    c00156dd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00156a1:	8b 34 9d c0 c9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3640]
c00156a8:	31 ff                	xor    edi,edi
c00156aa:	39 3c 9d c0 c8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3740],edi
c00156b1:	7e 27                	jle    c00156da <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00156b3:	50                   	push   eax
c00156b4:	50                   	push   eax
c00156b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00156bb:	03 04 9d 40 c9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd36c0]
c00156c2:	50                   	push   eax
c00156c3:	e8 b8 b0 fe ff       	call   c0000780 <strcmp>
c00156c8:	83 c4 10             	add    esp,0x10
c00156cb:	85 c0                	test   eax,eax
c00156cd:	75 05                	jne    c00156d4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00156cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00156d2:	eb 0b                	jmp    c00156df <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00156d4:	83 c6 10             	add    esi,0x10
c00156d7:	47                   	inc    edi
c00156d8:	eb d0                	jmp    c00156aa <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00156da:	43                   	inc    ebx
c00156db:	eb bc                	jmp    c0015699 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00156dd:	31 c0                	xor    eax,eax
c00156df:	5b                   	pop    ebx
c00156e0:	5e                   	pop    esi
c00156e1:	5f                   	pop    edi
c00156e2:	c3                   	ret    

c00156e3 <Thr::loadKernelSymbolTable(char const*)>:
c00156e3:	55                   	push   ebp
c00156e4:	57                   	push   edi
c00156e5:	56                   	push   esi
c00156e6:	53                   	push   ebx
c00156e7:	83 ec 68             	sub    esp,0x68
c00156ea:	68 14 01 00 00       	push   0x114
c00156ef:	8b 35 98 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca98
c00156f5:	e8 8e a0 ff ff       	call   c000f788 <malloc>
c00156fa:	83 c4 0c             	add    esp,0xc
c00156fd:	56                   	push   esi
c00156fe:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015702:	89 c3                	mov    ebx,eax
c0015704:	50                   	push   eax
c0015705:	e8 7e 2a ff ff       	call   c0008188 <File::File(char const*, Process*)>
c001570a:	5e                   	pop    esi
c001570b:	5f                   	pop    edi
c001570c:	6a 01                	push   0x1
c001570e:	53                   	push   ebx
c001570f:	e8 92 2a ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0015714:	83 c4 10             	add    esp,0x10
c0015717:	85 c0                	test   eax,eax
c0015719:	74 0a                	je     c0015725 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001571b:	83 ec 0c             	sub    esp,0xc
c001571e:	68 67 4b 02 c0       	push   0xc0024b67
c0015723:	eb 34                	jmp    c0015759 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015725:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001572d:	83 ec 0c             	sub    esp,0xc
c0015730:	6a 34                	push   0x34
c0015732:	e8 51 a0 ff ff       	call   c000f788 <malloc>
c0015737:	59                   	pop    ecx
c0015738:	8d 74 24 34          	lea    esi,[esp+0x34]
c001573c:	89 c7                	mov    edi,eax
c001573e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015740:	56                   	push   esi
c0015741:	57                   	push   edi
c0015742:	6a 00                	push   0x0
c0015744:	6a 34                	push   0x34
c0015746:	53                   	push   ebx
c0015747:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001574a:	83 c4 20             	add    esp,0x20
c001574d:	85 c0                	test   eax,eax
c001574f:	74 17                	je     c0015768 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015751:	83 ec 0c             	sub    esp,0xc
c0015754:	68 7e 4b 02 c0       	push   0xc0024b7e
c0015759:	e8 86 a4 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001575e:	83 c4 10             	add    esp,0x10
c0015761:	31 c0                	xor    eax,eax
c0015763:	e9 31 02 00 00       	jmp    c0015999 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015768:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001576e:	75 e1                	jne    c0015751 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015770:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015773:	85 c0                	test   eax,eax
c0015775:	74 da                	je     c0015751 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015777:	52                   	push   edx
c0015778:	31 d2                	xor    edx,edx
c001577a:	52                   	push   edx
c001577b:	50                   	push   eax
c001577c:	53                   	push   ebx
c001577d:	e8 e2 2a ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015782:	83 c4 10             	add    esp,0x10
c0015785:	85 c0                	test   eax,eax
c0015787:	75 c8                	jne    c0015751 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015789:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001578d:	83 ec 0c             	sub    esp,0xc
c0015790:	31 ed                	xor    ebp,ebp
c0015792:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015796:	0f af c2             	imul   eax,edx
c0015799:	50                   	push   eax
c001579a:	e8 e9 9f ff ff       	call   c000f788 <malloc>
c001579f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00157a1:	89 34 24             	mov    DWORD PTR [esp],esi
c00157a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00157a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00157ac:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00157b0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00157b4:	0f af c2             	imul   eax,edx
c00157b7:	99                   	cdq    
c00157b8:	52                   	push   edx
c00157b9:	50                   	push   eax
c00157ba:	53                   	push   ebx
c00157bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00157be:	83 c4 20             	add    esp,0x20
c00157c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00157c9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00157d1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00157d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157e1:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00157e5:	0f b7 f5             	movzx  esi,bp
c00157e8:	0f 83 a7 00 00 00    	jae    c0015895 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00157ee:	6b f6 28             	imul   esi,esi,0x28
c00157f1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00157f5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00157f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00157fc:	50                   	push   eax
c00157fd:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015801:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015805:	8b 16                	mov    edx,DWORD PTR [esi]
c0015807:	6b c0 28             	imul   eax,eax,0x28
c001580a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001580e:	89 d0                	mov    eax,edx
c0015810:	31 d2                	xor    edx,edx
c0015812:	52                   	push   edx
c0015813:	50                   	push   eax
c0015814:	53                   	push   ebx
c0015815:	e8 4a 2a ff ff       	call   c0008264 <File::seek(unsigned long long)>
c001581a:	83 c4 0c             	add    esp,0xc
c001581d:	6a 20                	push   0x20
c001581f:	6a 00                	push   0x0
c0015821:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015825:	52                   	push   edx
c0015826:	e8 c5 ac fe ff       	call   c00004f0 <memset>
c001582b:	58                   	pop    eax
c001582c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001582e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015832:	51                   	push   ecx
c0015833:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015837:	52                   	push   edx
c0015838:	6a 00                	push   0x0
c001583a:	6a 1f                	push   0x1f
c001583c:	53                   	push   ebx
c001583d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015840:	83 c4 18             	add    esp,0x18
c0015843:	68 95 4b 02 c0       	push   0xc0024b95
c0015848:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001584c:	52                   	push   edx
c001584d:	e8 2e af fe ff       	call   c0000780 <strcmp>
c0015852:	83 c4 10             	add    esp,0x10
c0015855:	85 c0                	test   eax,eax
c0015857:	75 0f                	jne    c0015868 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015859:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001585c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015860:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015864:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015868:	50                   	push   eax
c0015869:	50                   	push   eax
c001586a:	68 9d 4b 02 c0       	push   0xc0024b9d
c001586f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015873:	50                   	push   eax
c0015874:	e8 07 af fe ff       	call   c0000780 <strcmp>
c0015879:	83 c4 10             	add    esp,0x10
c001587c:	85 c0                	test   eax,eax
c001587e:	75 0f                	jne    c001588f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015880:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015883:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015887:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001588b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001588f:	45                   	inc    ebp
c0015890:	e9 4c ff ff ff       	jmp    c00157e1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015895:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001589a:	75 10                	jne    c00158ac <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001589c:	83 ec 0c             	sub    esp,0xc
c001589f:	68 a5 4b 02 c0       	push   0xc0024ba5
c00158a4:	e8 3b a3 ff ff       	call   c000fbe4 <KePanic(char const*)>
c00158a9:	83 c4 10             	add    esp,0x10
c00158ac:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00158b1:	75 10                	jne    c00158c3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00158b3:	83 ec 0c             	sub    esp,0xc
c00158b6:	68 a5 4b 02 c0       	push   0xc0024ba5
c00158bb:	e8 24 a3 ff ff       	call   c000fbe4 <KePanic(char const*)>
c00158c0:	83 c4 10             	add    esp,0x10
c00158c3:	50                   	push   eax
c00158c4:	31 d2                	xor    edx,edx
c00158c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158ca:	52                   	push   edx
c00158cb:	50                   	push   eax
c00158cc:	53                   	push   ebx
c00158cd:	e8 92 29 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00158d2:	5a                   	pop    edx
c00158d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00158d7:	e8 ac 9e ff ff       	call   c000f788 <malloc>
c00158dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00158e0:	31 c9                	xor    ecx,ecx
c00158e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00158e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158e8:	5e                   	pop    esi
c00158e9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00158ed:	55                   	push   ebp
c00158ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158f2:	51                   	push   ecx
c00158f3:	52                   	push   edx
c00158f4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00158f8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00158fc:	53                   	push   ebx
c00158fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015900:	83 c4 14             	add    esp,0x14
c0015903:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015907:	e8 7c 9e ff ff       	call   c000f788 <malloc>
c001590c:	89 c6                	mov    esi,eax
c001590e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015910:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015913:	56                   	push   esi
c0015914:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015918:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001591c:	51                   	push   ecx
c001591d:	52                   	push   edx
c001591e:	53                   	push   ebx
c001591f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015922:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015926:	83 c4 1c             	add    esp,0x1c
c0015929:	8b 15 40 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca40
c001592f:	c1 e8 04             	shr    eax,0x4
c0015932:	89 04 95 c0 c8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3740],eax
c0015939:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001593d:	31 d2                	xor    edx,edx
c001593f:	52                   	push   edx
c0015940:	50                   	push   eax
c0015941:	53                   	push   ebx
c0015942:	e8 1d 29 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015947:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015949:	31 d2                	xor    edx,edx
c001594b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001594e:	56                   	push   esi
c001594f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015953:	52                   	push   edx
c0015954:	50                   	push   eax
c0015955:	53                   	push   ebx
c0015956:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015959:	83 c4 14             	add    esp,0x14
c001595c:	53                   	push   ebx
c001595d:	e8 a2 28 ff ff       	call   c0008204 <File::close()>
c0015962:	5d                   	pop    ebp
c0015963:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015967:	e8 2c 9e ff ff       	call   c000f798 <free>
c001596c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001596f:	e8 24 9e ff ff       	call   c000f798 <free>
c0015974:	a1 40 ca 02 c0       	mov    eax,ds:0xc002ca40
c0015979:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001597d:	83 c4 10             	add    esp,0x10
c0015980:	89 34 85 40 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd36c0],esi
c0015987:	8d 50 01             	lea    edx,[eax+0x1]
c001598a:	89 0c 85 c0 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3640],ecx
c0015991:	b0 01                	mov    al,0x1
c0015993:	89 15 40 ca 02 c0    	mov    DWORD PTR ds:0xc002ca40,edx
c0015999:	83 c4 5c             	add    esp,0x5c
c001599c:	5b                   	pop    ebx
c001599d:	5e                   	pop    esi
c001599e:	5f                   	pop    edi
c001599f:	5d                   	pop    ebp
c00159a0:	c3                   	ret    

c00159a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00159a1:	55                   	push   ebp
c00159a2:	57                   	push   edi
c00159a3:	56                   	push   esi
c00159a4:	53                   	push   ebx
c00159a5:	81 ec 68 03 00 00    	sub    esp,0x368
c00159ab:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00159b2:	8b 35 98 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca98
c00159b8:	88 44 24 4a          	mov    BYTE PTR [esp+0x4a],al
c00159bc:	68 14 01 00 00       	push   0x114
c00159c1:	e8 c2 9d ff ff       	call   c000f788 <malloc>
c00159c6:	83 c4 0c             	add    esp,0xc
c00159c9:	56                   	push   esi
c00159ca:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00159d1:	50                   	push   eax
c00159d2:	89 c3                	mov    ebx,eax
c00159d4:	e8 af 27 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00159d9:	5f                   	pop    edi
c00159da:	5d                   	pop    ebp
c00159db:	6a 01                	push   0x1
c00159dd:	53                   	push   ebx
c00159de:	e8 c3 27 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c00159e3:	83 c4 10             	add    esp,0x10
c00159e6:	85 c0                	test   eax,eax
c00159e8:	0f 85 d5 06 00 00    	jne    c00160c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c00159ee:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00159f6:	83 ec 0c             	sub    esp,0xc
c00159f9:	6a 34                	push   0x34
c00159fb:	e8 88 9d ff ff       	call   c000f788 <malloc>
c0015a00:	5e                   	pop    esi
c0015a01:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015a05:	89 c5                	mov    ebp,eax
c0015a07:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a09:	56                   	push   esi
c0015a0a:	55                   	push   ebp
c0015a0b:	6a 00                	push   0x0
c0015a0d:	6a 34                	push   0x34
c0015a0f:	53                   	push   ebx
c0015a10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015a13:	83 c4 20             	add    esp,0x20
c0015a16:	85 c0                	test   eax,eax
c0015a18:	0f 85 a5 06 00 00    	jne    c00160c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015a1e:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0015a25:	0f 85 98 06 00 00    	jne    c00160c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015a2b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a2e:	85 c0                	test   eax,eax
c0015a30:	0f 84 8d 06 00 00    	je     c00160c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015a36:	31 d2                	xor    edx,edx
c0015a38:	51                   	push   ecx
c0015a39:	52                   	push   edx
c0015a3a:	50                   	push   eax
c0015a3b:	53                   	push   ebx
c0015a3c:	e8 23 28 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015a41:	83 c4 10             	add    esp,0x10
c0015a44:	85 c0                	test   eax,eax
c0015a46:	0f 85 77 06 00 00    	jne    c00160c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015a4c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0015a4f:	83 ec 0c             	sub    esp,0xc
c0015a52:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0015a56:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015a5a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015a5e:	0f af c2             	imul   eax,edx
c0015a61:	50                   	push   eax
c0015a62:	e8 21 9d ff ff       	call   c000f788 <malloc>
c0015a67:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015a69:	89 34 24             	mov    DWORD PTR [esp],esi
c0015a6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015a70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a74:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0015a78:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015a7c:	0f af c2             	imul   eax,edx
c0015a7f:	99                   	cdq    
c0015a80:	52                   	push   edx
c0015a81:	50                   	push   eax
c0015a82:	53                   	push   ebx
c0015a83:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a86:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0015a89:	83 c4 20             	add    esp,0x20
c0015a8c:	85 c0                	test   eax,eax
c0015a8e:	0f 84 2f 06 00 00    	je     c00160c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015a94:	52                   	push   edx
c0015a95:	31 d2                	xor    edx,edx
c0015a97:	52                   	push   edx
c0015a98:	50                   	push   eax
c0015a99:	53                   	push   ebx
c0015a9a:	e8 c5 27 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015a9f:	83 c4 10             	add    esp,0x10
c0015aa2:	85 c0                	test   eax,eax
c0015aa4:	0f 85 19 06 00 00    	jne    c00160c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015aaa:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0015aae:	83 ec 0c             	sub    esp,0xc
c0015ab1:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015ab5:	0f af c2             	imul   eax,edx
c0015ab8:	50                   	push   eax
c0015ab9:	e8 ca 9c ff ff       	call   c000f788 <malloc>
c0015abe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015ac0:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ac3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015acb:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0015acf:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015ad3:	0f af c2             	imul   eax,edx
c0015ad6:	99                   	cdq    
c0015ad7:	52                   	push   edx
c0015ad8:	50                   	push   eax
c0015ad9:	53                   	push   ebx
c0015ada:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015add:	83 c4 20             	add    esp,0x20
c0015ae0:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0015ae6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015ae9:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0015aed:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0015af1:	73 78                	jae    c0015b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0015af3:	c1 e7 05             	shl    edi,0x5
c0015af6:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0015afa:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015afd:	75 63                	jne    c0015b62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0015aff:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015b02:	31 d2                	xor    edx,edx
c0015b04:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0015b07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015b0b:	50                   	push   eax
c0015b0c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015b0f:	52                   	push   edx
c0015b10:	50                   	push   eax
c0015b11:	53                   	push   ebx
c0015b12:	e8 4d 27 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015b17:	83 c4 10             	add    esp,0x10
c0015b1a:	85 c0                	test   eax,eax
c0015b1c:	0f 85 a1 05 00 00    	jne    c00160c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0015b22:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015b29:	83 ec 0c             	sub    esp,0xc
c0015b2c:	31 d2                	xor    edx,edx
c0015b2e:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0015b32:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015b34:	01 c6                	add    esi,eax
c0015b36:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015b3d:	50                   	push   eax
c0015b3e:	56                   	push   esi
c0015b3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b43:	52                   	push   edx
c0015b44:	50                   	push   eax
c0015b45:	53                   	push   ebx
c0015b46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015b49:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015b4c:	83 c4 1c             	add    esp,0x1c
c0015b4f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015b52:	50                   	push   eax
c0015b53:	6a 00                	push   0x0
c0015b55:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0015b59:	56                   	push   esi
c0015b5a:	e8 91 a9 fe ff       	call   c00004f0 <memset>
c0015b5f:	83 c4 10             	add    esp,0x10
c0015b62:	66 ff 04 24          	inc    WORD PTR [esp]
c0015b66:	e9 7b ff ff ff       	jmp    c0015ae6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0015b6b:	56                   	push   esi
c0015b6c:	68 00 01 00 00       	push   0x100
c0015b71:	6a 00                	push   0x0
c0015b73:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015b77:	50                   	push   eax
c0015b78:	e8 73 a9 fe ff       	call   c00004f0 <memset>
c0015b7d:	83 c4 0c             	add    esp,0xc
c0015b80:	68 00 01 00 00       	push   0x100
c0015b85:	6a 00                	push   0x0
c0015b87:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015b8e:	50                   	push   eax
c0015b8f:	e8 5c a9 fe ff       	call   c00004f0 <memset>
c0015b94:	83 c4 10             	add    esp,0x10
c0015b97:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0015b9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015ba5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015bad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015bb5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015bbd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015bc9:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0015bcd:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015bd2:	0f 83 16 01 00 00    	jae    c0015cee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015bd8:	6b ff 28             	imul   edi,edi,0x28
c0015bdb:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0015bdf:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015be2:	52                   	push   edx
c0015be3:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015be7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015beb:	8b 07                	mov    eax,DWORD PTR [edi]
c0015bed:	6b d2 28             	imul   edx,edx,0x28
c0015bf0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015bf4:	31 d2                	xor    edx,edx
c0015bf6:	52                   	push   edx
c0015bf7:	50                   	push   eax
c0015bf8:	53                   	push   ebx
c0015bf9:	e8 66 26 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015bfe:	83 c4 0c             	add    esp,0xc
c0015c01:	6a 20                	push   0x20
c0015c03:	6a 00                	push   0x0
c0015c05:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015c0c:	51                   	push   ecx
c0015c0d:	e8 de a8 fe ff       	call   c00004f0 <memset>
c0015c12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c14:	59                   	pop    ecx
c0015c15:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015c19:	52                   	push   edx
c0015c1a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015c21:	51                   	push   ecx
c0015c22:	6a 00                	push   0x0
c0015c24:	6a 1f                	push   0x1f
c0015c26:	53                   	push   ebx
c0015c27:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c2a:	83 c4 1c             	add    esp,0x1c
c0015c2d:	6a 09                	push   0x9
c0015c2f:	68 bf 4b 02 c0       	push   0xc0024bbf
c0015c34:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015c3b:	51                   	push   ecx
c0015c3c:	e8 3f a7 fe ff       	call   c0000380 <memcmp>
c0015c41:	83 c4 10             	add    esp,0x10
c0015c44:	85 c0                	test   eax,eax
c0015c46:	75 1a                	jne    c0015c62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0015c48:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015c4b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015c4e:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015c52:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015c55:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015c5c:	89 c8                	mov    eax,ecx
c0015c5e:	40                   	inc    eax
c0015c5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c62:	50                   	push   eax
c0015c63:	6a 09                	push   0x9
c0015c65:	68 c9 4b 02 c0       	push   0xc0024bc9
c0015c6a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015c71:	50                   	push   eax
c0015c72:	e8 09 a7 fe ff       	call   c0000380 <memcmp>
c0015c77:	83 c4 10             	add    esp,0x10
c0015c7a:	85 c0                	test   eax,eax
c0015c7c:	75 1a                	jne    c0015c98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0015c7e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015c81:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015c84:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015c88:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015c8b:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015c92:	89 c8                	mov    eax,ecx
c0015c94:	40                   	inc    eax
c0015c95:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c98:	50                   	push   eax
c0015c99:	50                   	push   eax
c0015c9a:	68 95 4b 02 c0       	push   0xc0024b95
c0015c9f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015ca6:	50                   	push   eax
c0015ca7:	e8 d4 aa fe ff       	call   c0000780 <strcmp>
c0015cac:	83 c4 10             	add    esp,0x10
c0015caf:	85 c0                	test   eax,eax
c0015cb1:	75 0b                	jne    c0015cbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0015cb3:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0015cb7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015cba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015cbe:	50                   	push   eax
c0015cbf:	50                   	push   eax
c0015cc0:	68 9d 4b 02 c0       	push   0xc0024b9d
c0015cc5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015ccc:	50                   	push   eax
c0015ccd:	e8 ae aa fe ff       	call   c0000780 <strcmp>
c0015cd2:	83 c4 10             	add    esp,0x10
c0015cd5:	85 c0                	test   eax,eax
c0015cd7:	75 0b                	jne    c0015ce4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015cd9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015cdd:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015ce0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ce4:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015ce9:	e9 d7 fe ff ff       	jmp    c0015bc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0015cee:	50                   	push   eax
c0015cef:	31 d2                	xor    edx,edx
c0015cf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cf5:	52                   	push   edx
c0015cf6:	50                   	push   eax
c0015cf7:	53                   	push   ebx
c0015cf8:	e8 67 25 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015cfd:	58                   	pop    eax
c0015cfe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015d02:	e8 81 9a ff ff       	call   c000f788 <malloc>
c0015d07:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015d09:	31 d2                	xor    edx,edx
c0015d0b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015d0f:	58                   	pop    eax
c0015d10:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015d14:	56                   	push   esi
c0015d15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d1d:	52                   	push   edx
c0015d1e:	50                   	push   eax
c0015d1f:	53                   	push   ebx
c0015d20:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d23:	83 c4 14             	add    esp,0x14
c0015d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d2a:	e8 59 9a ff ff       	call   c000f788 <malloc>
c0015d2f:	31 d2                	xor    edx,edx
c0015d31:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015d35:	83 c4 0c             	add    esp,0xc
c0015d38:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015d3c:	52                   	push   edx
c0015d3d:	50                   	push   eax
c0015d3e:	53                   	push   ebx
c0015d3f:	e8 20 25 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015d44:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015d46:	31 d2                	xor    edx,edx
c0015d48:	89 34 24             	mov    DWORD PTR [esp],esi
c0015d4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015d53:	52                   	push   edx
c0015d54:	50                   	push   eax
c0015d55:	53                   	push   ebx
c0015d56:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d59:	83 c4 20             	add    esp,0x20
c0015d5c:	0f b6 44 24 3e       	movzx  eax,BYTE PTR [esp+0x3e]
c0015d61:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015d69:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015d6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d71:	39 34 24             	cmp    DWORD PTR [esp],esi
c0015d74:	0f 84 4d 03 00 00    	je     c00160c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x726>
c0015d7a:	8b 84 b4 50 01 00 00 	mov    eax,DWORD PTR [esp+esi*4+0x150]
c0015d81:	31 d2                	xor    edx,edx
c0015d83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d87:	c1 e8 03             	shr    eax,0x3
c0015d8a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015d8e:	51                   	push   ecx
c0015d8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d93:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015d97:	52                   	push   edx
c0015d98:	50                   	push   eax
c0015d99:	53                   	push   ebx
c0015d9a:	e8 c5 24 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015d9f:	5e                   	pop    esi
c0015da0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015da4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015dab:	e8 d8 99 ff ff       	call   c000f788 <malloc>
c0015db0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015db2:	31 d2                	xor    edx,edx
c0015db4:	5f                   	pop    edi
c0015db5:	89 c6                	mov    esi,eax
c0015db7:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015dbb:	50                   	push   eax
c0015dbc:	56                   	push   esi
c0015dbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015dc1:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015dc8:	52                   	push   edx
c0015dc9:	50                   	push   eax
c0015dca:	53                   	push   ebx
c0015dcb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015dce:	83 c4 20             	add    esp,0x20
c0015dd1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015dd9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015ddd:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0015de1:	0f 8d c7 02 00 00    	jge    c00160ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70d>
c0015de7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015deb:	31 d2                	xor    edx,edx
c0015ded:	8b 04 c6             	mov    eax,DWORD PTR [esi+eax*8]
c0015df0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015df4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015df8:	8b 7c c6 04          	mov    edi,DWORD PTR [esi+eax*8+0x4]
c0015dfc:	89 f8                	mov    eax,edi
c0015dfe:	c1 e8 08             	shr    eax,0x8
c0015e01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015e05:	c1 e0 04             	shl    eax,0x4
c0015e08:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0015e0c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015e10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015e13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e17:	85 c0                	test   eax,eax
c0015e19:	0f 85 ca 00 00 00    	jne    c0015ee9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x548>
c0015e1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e23:	83 ec 0c             	sub    esp,0xc
c0015e26:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015e2a:	03 08                	add    ecx,DWORD PTR [eax]
c0015e2c:	51                   	push   ecx
c0015e2d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0015e31:	e8 5e f8 ff ff       	call   c0015694 <Thr::getAddressOfKernelSymbol(char const*)>
c0015e36:	b2 01                	mov    dl,0x1
c0015e38:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e3c:	83 c4 10             	add    esp,0x10
c0015e3f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0015e44:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015e48:	0f 85 9b 00 00 00    	jne    c0015ee9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x548>
c0015e4e:	88 54 24 3f          	mov    BYTE PTR [esp+0x3f],dl
c0015e52:	83 ec 0c             	sub    esp,0xc
c0015e55:	51                   	push   ecx
c0015e56:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0015e5a:	e8 a9 a8 ff ff       	call   c0010708 <KeResolveCompatibilitySymbol(char*)>
c0015e5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e63:	83 c4 10             	add    esp,0x10
c0015e66:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0015e6b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015e6f:	8a 54 24 3f          	mov    dl,BYTE PTR [esp+0x3f]
c0015e73:	75 74                	jne    c0015ee9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x548>
c0015e75:	50                   	push   eax
c0015e76:	50                   	push   eax
c0015e77:	51                   	push   ecx
c0015e78:	68 d3 4b 02 c0       	push   0xc0024bd3
c0015e7d:	e8 e4 10 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015e82:	58                   	pop    eax
c0015e83:	5a                   	pop    edx
c0015e84:	68 ed 4b 02 c0       	push   0xc0024bed
c0015e89:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0015e90:	52                   	push   edx
c0015e91:	e8 ba a7 fe ff       	call   c0000650 <strcpy>
c0015e96:	59                   	pop    ecx
c0015e97:	58                   	pop    eax
c0015e98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015e9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ea0:	03 01                	add    eax,DWORD PTR [ecx]
c0015ea2:	50                   	push   eax
c0015ea3:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0015eaa:	52                   	push   edx
c0015eab:	e8 c0 a9 fe ff       	call   c0000870 <strcat>
c0015eb0:	58                   	pop    eax
c0015eb1:	5a                   	pop    edx
c0015eb2:	68 87 4c 02 c0       	push   0xc0024c87
c0015eb7:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0015ebe:	52                   	push   edx
c0015ebf:	e8 ac a9 fe ff       	call   c0000870 <strcat>
c0015ec4:	83 c4 10             	add    esp,0x10
c0015ec7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015ecc:	0f 84 99 01 00 00    	je     c001606b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0015ed2:	83 ec 0c             	sub    esp,0xc
c0015ed5:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0015edc:	52                   	push   edx
c0015edd:	e8 02 9d ff ff       	call   c000fbe4 <KePanic(char const*)>
c0015ee2:	83 c4 10             	add    esp,0x10
c0015ee5:	8a 54 24 3e          	mov    dl,BYTE PTR [esp+0x3e]
c0015ee9:	89 f8                	mov    eax,edi
c0015eeb:	0f b6 c0             	movzx  eax,al
c0015eee:	83 f8 01             	cmp    eax,0x1
c0015ef1:	0f 85 b2 00 00 00    	jne    c0015fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x608>
c0015ef7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015efb:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0015f02:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0015f06:	01 c8                	add    eax,ecx
c0015f08:	81 ff 01 01 00 00    	cmp    edi,0x101
c0015f0e:	0f 94 44 24 28       	sete   BYTE PTR [esp+0x28]
c0015f13:	81 ff 01 04 00 00    	cmp    edi,0x401
c0015f19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015f1d:	0f 94 c0             	sete   al
c0015f20:	89 c7                	mov    edi,eax
c0015f22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f26:	0b 7c 24 28          	or     edi,DWORD PTR [esp+0x28]
c0015f2a:	84 d2                	test   dl,dl
c0015f2c:	89 fa                	mov    edx,edi
c0015f2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f30:	0f b6 fa             	movzx  edi,dl
c0015f33:	74 42                	je     c0015f77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d6>
c0015f35:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015f39:	85 ff                	test   edi,edi
c0015f3b:	75 15                	jne    c0015f52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b1>
c0015f3d:	0f b7 55 30          	movzx  edx,WORD PTR [ebp+0x30]
c0015f41:	66 83 fa 0c          	cmp    dx,0xc
c0015f45:	76 05                	jbe    c0015f4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0015f47:	ba 0c 00 00 00       	mov    edx,0xc
c0015f4c:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0015f50:	76 4c                	jbe    c0015f9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5fd>
c0015f52:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015f57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f5b:	0f 84 0a 01 00 00    	je     c001606b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0015f61:	83 ec 0c             	sub    esp,0xc
c0015f64:	68 04 4c 02 c0       	push   0xc0024c04
c0015f69:	e8 76 9c ff ff       	call   c000fbe4 <KePanic(char const*)>
c0015f6e:	83 c4 10             	add    esp,0x10
c0015f71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f75:	eb 27                	jmp    c0015f9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5fd>
c0015f77:	01 c8                	add    eax,ecx
c0015f79:	85 ff                	test   edi,edi
c0015f7b:	89 c2                	mov    edx,eax
c0015f7d:	75 10                	jne    c0015f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ee>
c0015f7f:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0015f83:	3b 4c 24 20          	cmp    ecx,DWORD PTR [esp+0x20]
c0015f87:	77 06                	ja     c0015f8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ee>
c0015f89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f8d:	01 c2                	add    edx,eax
c0015f8f:	8d 8a 00 00 00 28    	lea    ecx,[edx+0x28000000]
c0015f95:	81 f9 00 00 00 01    	cmp    ecx,0x1000000
c0015f9b:	0f 43 c2             	cmovae eax,edx
c0015f9e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015fa2:	89 07                	mov    DWORD PTR [edi],eax
c0015fa4:	e9 fc 00 00 00       	jmp    c00160a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0015fa9:	83 f8 02             	cmp    eax,0x2
c0015fac:	0f 85 90 00 00 00    	jne    c0016042 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a1>
c0015fb2:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015fb9:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0015fbd:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0015fc1:	81 ff 01 01 00 00    	cmp    edi,0x101
c0015fc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015fcb:	74 1f                	je     c0015fec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64b>
c0015fcd:	81 ff 01 04 00 00    	cmp    edi,0x401
c0015fd3:	74 17                	je     c0015fec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64b>
c0015fd5:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0015fd9:	b8 0a 00 00 00       	mov    eax,0xa
c0015fde:	83 f9 0e             	cmp    ecx,0xe
c0015fe1:	77 03                	ja     c0015fe6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x645>
c0015fe3:	8d 41 fc             	lea    eax,[ecx-0x4]
c0015fe6:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0015fea:	76 1f                	jbe    c001600b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015fec:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015ff1:	88 54 24 20          	mov    BYTE PTR [esp+0x20],dl
c0015ff5:	74 74                	je     c001606b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0015ff7:	83 ec 0c             	sub    esp,0xc
c0015ffa:	68 20 4c 02 c0       	push   0xc0024c20
c0015fff:	e8 e0 9b ff ff       	call   c000fbe4 <KePanic(char const*)>
c0016004:	83 c4 10             	add    esp,0x10
c0016007:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
c001600b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001600f:	84 d2                	test   dl,dl
c0016011:	8b 00                	mov    eax,DWORD PTR [eax]
c0016013:	74 13                	je     c0016028 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x687>
c0016015:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016019:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0016020:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
c0016024:	01 c2                	add    edx,eax
c0016026:	eb 06                	jmp    c001602e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68d>
c0016028:	89 c2                	mov    edx,eax
c001602a:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
c001602e:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0016032:	3d fe ff 0f 00       	cmp    eax,0xffffe
c0016037:	0f 46 d0             	cmovbe edx,eax
c001603a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001603e:	89 10                	mov    DWORD PTR [eax],edx
c0016040:	eb 63                	jmp    c00160a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0016042:	57                   	push   edi
c0016043:	57                   	push   edi
c0016044:	50                   	push   eax
c0016045:	68 3c 4c 02 c0       	push   0xc0024c3c
c001604a:	e8 17 0f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001604f:	83 c4 10             	add    esp,0x10
c0016052:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016057:	74 12                	je     c001606b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0016059:	83 ec 0c             	sub    esp,0xc
c001605c:	68 47 4c 02 c0       	push   0xc0024c47
c0016061:	e8 7e 9b ff ff       	call   c000fbe4 <KePanic(char const*)>
c0016066:	83 c4 10             	add    esp,0x10
c0016069:	eb 3a                	jmp    c00160a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c001606b:	83 ec 0c             	sub    esp,0xc
c001606e:	53                   	push   ebx
c001606f:	e8 90 21 ff ff       	call   c0008204 <File::close()>
c0016074:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016076:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016079:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001607c:	89 34 24             	mov    DWORD PTR [esp],esi
c001607f:	e8 14 97 ff ff       	call   c000f798 <free>
c0016084:	59                   	pop    ecx
c0016085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016089:	e8 0a 97 ff ff       	call   c000f798 <free>
c001608e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016091:	e8 02 97 ff ff       	call   c000f798 <free>
c0016096:	5b                   	pop    ebx
c0016097:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001609b:	e8 f8 96 ff ff       	call   c000f798 <free>
c00160a0:	83 c4 10             	add    esp,0x10
c00160a3:	eb 1e                	jmp    c00160c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c00160a5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00160a9:	e9 2b fd ff ff       	jmp    c0015dd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00160ae:	83 ec 0c             	sub    esp,0xc
c00160b1:	56                   	push   esi
c00160b2:	e8 e1 96 ff ff       	call   c000f798 <free>
c00160b7:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00160bb:	83 c4 10             	add    esp,0x10
c00160be:	e9 aa fc ff ff       	jmp    c0015d6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00160c3:	31 c0                	xor    eax,eax
c00160c5:	eb 32                	jmp    c00160f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x758>
c00160c7:	83 ec 0c             	sub    esp,0xc
c00160ca:	53                   	push   ebx
c00160cb:	e8 34 21 ff ff       	call   c0008204 <File::close()>
c00160d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160d8:	58                   	pop    eax
c00160d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00160dd:	e8 b6 96 ff ff       	call   c000f798 <free>
c00160e2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00160e5:	e8 ae 96 ff ff       	call   c000f798 <free>
c00160ea:	5a                   	pop    edx
c00160eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160ef:	e8 a4 96 ff ff       	call   c000f798 <free>
c00160f4:	83 c4 10             	add    esp,0x10
c00160f7:	b0 01                	mov    al,0x1
c00160f9:	81 c4 5c 03 00 00    	add    esp,0x35c
c00160ff:	5b                   	pop    ebx
c0016100:	5e                   	pop    esi
c0016101:	5f                   	pop    edi
c0016102:	5d                   	pop    ebp
c0016103:	c3                   	ret    

c0016104 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0016104:	56                   	push   esi
c0016105:	31 d2                	xor    edx,edx
c0016107:	53                   	push   ebx
c0016108:	8b 1d a0 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c2a0
c001610e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016112:	39 d3                	cmp    ebx,edx
c0016114:	7e 1b                	jle    c0016131 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0016116:	8b 04 95 c0 c4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3b40]
c001611d:	39 c8                	cmp    eax,ecx
c001611f:	77 0d                	ja     c001612e <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016121:	8b 34 95 c0 c2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3d40]
c0016128:	01 c6                	add    esi,eax
c001612a:	39 ce                	cmp    esi,ecx
c001612c:	77 05                	ja     c0016133 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001612e:	42                   	inc    edx
c001612f:	eb e1                	jmp    c0016112 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016131:	31 c0                	xor    eax,eax
c0016133:	5b                   	pop    ebx
c0016134:	5e                   	pop    esi
c0016135:	c3                   	ret    

c0016136 <Thr::getDriverNameFromAddress(unsigned long)>:
c0016136:	53                   	push   ebx
c0016137:	8b 1d a0 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c2a0
c001613d:	31 c0                	xor    eax,eax
c001613f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016143:	39 c3                	cmp    ebx,eax
c0016145:	7e 22                	jle    c0016169 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0016147:	8b 14 85 c0 c4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3b40]
c001614e:	39 ca                	cmp    edx,ecx
c0016150:	77 14                	ja     c0016166 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016152:	03 14 85 c0 c2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3d40]
c0016159:	39 ca                	cmp    edx,ecx
c001615b:	76 09                	jbe    c0016166 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001615d:	8b 04 85 c0 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3940]
c0016164:	eb 05                	jmp    c001616b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0016166:	40                   	inc    eax
c0016167:	eb da                	jmp    c0016143 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0016169:	31 c0                	xor    eax,eax
c001616b:	5b                   	pop    ebx
c001616c:	c3                   	ret    

c001616d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001616d:	53                   	push   ebx
c001616e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016172:	53                   	push   ebx
c0016173:	e8 8c ff ff ff       	call   c0016104 <Thr::getDriverBaseFromAddress(unsigned long)>
c0016178:	5a                   	pop    edx
c0016179:	31 d2                	xor    edx,edx
c001617b:	85 c0                	test   eax,eax
c001617d:	74 04                	je     c0016183 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001617f:	89 da                	mov    edx,ebx
c0016181:	29 c2                	sub    edx,eax
c0016183:	5b                   	pop    ebx
c0016184:	89 d0                	mov    eax,edx
c0016186:	c3                   	ret    

c0016187 <Thr::loadDLL(char const*, bool)>:
c0016187:	55                   	push   ebp
c0016188:	57                   	push   edi
c0016189:	56                   	push   esi
c001618a:	53                   	push   ebx
c001618b:	81 ec 34 01 00 00    	sub    esp,0x134
c0016191:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016198:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001619f:	56                   	push   esi
c00161a0:	68 5f 4c 02 c0       	push   0xc0024c5f
c00161a5:	e8 bc 0d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00161aa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00161b1:	e8 d2 95 ff ff       	call   c000f788 <malloc>
c00161b6:	83 c4 0c             	add    esp,0xc
c00161b9:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c00161bf:	56                   	push   esi
c00161c0:	50                   	push   eax
c00161c1:	89 c3                	mov    ebx,eax
c00161c3:	e8 c0 1f ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00161c8:	83 c4 10             	add    esp,0x10
c00161cb:	85 db                	test   ebx,ebx
c00161cd:	75 3c                	jne    c001620b <Thr::loadDLL(char const*, bool)+0x84>
c00161cf:	89 e8                	mov    eax,ebp
c00161d1:	84 c0                	test   al,al
c00161d3:	0f 84 02 02 00 00    	je     c00163db <Thr::loadDLL(char const*, bool)+0x254>
c00161d9:	50                   	push   eax
c00161da:	50                   	push   eax
c00161db:	68 70 4c 02 c0       	push   0xc0024c70
c00161e0:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00161e4:	57                   	push   edi
c00161e5:	e8 66 a4 fe ff       	call   c0000650 <strcpy>
c00161ea:	58                   	pop    eax
c00161eb:	5a                   	pop    edx
c00161ec:	56                   	push   esi
c00161ed:	57                   	push   edi
c00161ee:	e8 7d a6 fe ff       	call   c0000870 <strcat>
c00161f3:	59                   	pop    ecx
c00161f4:	58                   	pop    eax
c00161f5:	68 87 4c 02 c0       	push   0xc0024c87
c00161fa:	57                   	push   edi
c00161fb:	e8 70 a6 fe ff       	call   c0000870 <strcat>
c0016200:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016203:	e8 dc 99 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0016208:	83 c4 10             	add    esp,0x10
c001620b:	50                   	push   eax
c001620c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0016210:	50                   	push   eax
c0016211:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016215:	50                   	push   eax
c0016216:	53                   	push   ebx
c0016217:	e8 8c 22 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001621c:	83 c4 10             	add    esp,0x10
c001621f:	85 db                	test   ebx,ebx
c0016221:	89 c7                	mov    edi,eax
c0016223:	74 0c                	je     c0016231 <Thr::loadDLL(char const*, bool)+0xaa>
c0016225:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016227:	83 ec 0c             	sub    esp,0xc
c001622a:	53                   	push   ebx
c001622b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001622e:	83 c4 10             	add    esp,0x10
c0016231:	83 ec 0c             	sub    esp,0xc
c0016234:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0016239:	50                   	push   eax
c001623a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001623e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016242:	57                   	push   edi
c0016243:	68 89 4c 02 c0       	push   0xc0024c89
c0016248:	e8 19 0d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001624d:	83 c4 20             	add    esp,0x20
c0016250:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0016255:	75 0a                	jne    c0016261 <Thr::loadDLL(char const*, bool)+0xda>
c0016257:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001625b:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001625f:	75 3e                	jne    c001629f <Thr::loadDLL(char const*, bool)+0x118>
c0016261:	89 e8                	mov    eax,ebp
c0016263:	31 db                	xor    ebx,ebx
c0016265:	84 c0                	test   al,al
c0016267:	0f 84 6e 01 00 00    	je     c00163db <Thr::loadDLL(char const*, bool)+0x254>
c001626d:	50                   	push   eax
c001626e:	50                   	push   eax
c001626f:	68 aa 4c 02 c0       	push   0xc0024caa
c0016274:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0016278:	53                   	push   ebx
c0016279:	e8 d2 a3 fe ff       	call   c0000650 <strcpy>
c001627e:	58                   	pop    eax
c001627f:	5a                   	pop    edx
c0016280:	56                   	push   esi
c0016281:	53                   	push   ebx
c0016282:	e8 e9 a5 fe ff       	call   c0000870 <strcat>
c0016287:	59                   	pop    ecx
c0016288:	5f                   	pop    edi
c0016289:	68 87 4c 02 c0       	push   0xc0024c87
c001628e:	53                   	push   ebx
c001628f:	e8 dc a5 fe ff       	call   c0000870 <strcat>
c0016294:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016297:	e8 48 99 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001629c:	83 c4 10             	add    esp,0x10
c001629f:	53                   	push   ebx
c00162a0:	6a 03                	push   0x3
c00162a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162a6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00162aa:	05 ff 0f 00 00       	add    eax,0xfff
c00162af:	83 d2 00             	adc    edx,0x0
c00162b2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00162b6:	50                   	push   eax
c00162b7:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c00162bd:	e8 fa d6 ff ff       	call   c00139bc <VAS::allocatePages(int, int)>
c00162c2:	89 c3                	mov    ebx,eax
c00162c4:	58                   	pop    eax
c00162c5:	5a                   	pop    edx
c00162c6:	53                   	push   ebx
c00162c7:	68 86 41 02 c0       	push   0xc0024186
c00162cc:	e8 95 0c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00162d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00162d4:	e8 a7 a2 fe ff       	call   c0000580 <strlen>
c00162d9:	8b 3d a0 c2 02 c0    	mov    edi,DWORD PTR ds:0xc002c2a0
c00162df:	40                   	inc    eax
c00162e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00162e3:	e8 a0 94 ff ff       	call   c000f788 <malloc>
c00162e8:	59                   	pop    ecx
c00162e9:	89 04 bd c0 c6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3940],eax
c00162f0:	a1 a0 c2 02 c0       	mov    eax,ds:0xc002c2a0
c00162f5:	5f                   	pop    edi
c00162f6:	56                   	push   esi
c00162f7:	ff 34 85 c0 c6 02 c0 	push   DWORD PTR [eax*4-0x3ffd3940]
c00162fe:	e8 4d a3 fe ff       	call   c0000650 <strcpy>
c0016303:	a1 a0 c2 02 c0       	mov    eax,ds:0xc002c2a0
c0016308:	89 1c 85 c0 c4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3b40],ebx
c001630f:	8d 50 01             	lea    edx,[eax+0x1]
c0016312:	89 15 a0 c2 02 c0    	mov    DWORD PTR ds:0xc002c2a0,edx
c0016318:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001631c:	83 c4 0c             	add    esp,0xc
c001631f:	6a 01                	push   0x1
c0016321:	53                   	push   ebx
c0016322:	56                   	push   esi
c0016323:	89 14 85 c0 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3d40],edx
c001632a:	e8 72 f6 ff ff       	call   c00159a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001632f:	83 c4 10             	add    esp,0x10
c0016332:	89 c7                	mov    edi,eax
c0016334:	89 f8                	mov    eax,edi
c0016336:	83 f0 01             	xor    eax,0x1
c0016339:	84 c0                	test   al,al
c001633b:	74 18                	je     c0016355 <Thr::loadDLL(char const*, bool)+0x1ce>
c001633d:	89 e8                	mov    eax,ebp
c001633f:	84 c0                	test   al,al
c0016341:	74 12                	je     c0016355 <Thr::loadDLL(char const*, bool)+0x1ce>
c0016343:	83 ec 0c             	sub    esp,0xc
c0016346:	68 c3 4c 02 c0       	push   0xc0024cc3
c001634b:	e8 94 98 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0016350:	83 c4 10             	add    esp,0x10
c0016353:	eb 06                	jmp    c001635b <Thr::loadDLL(char const*, bool)+0x1d4>
c0016355:	89 f8                	mov    eax,edi
c0016357:	84 c0                	test   al,al
c0016359:	75 10                	jne    c001636b <Thr::loadDLL(char const*, bool)+0x1e4>
c001635b:	83 ec 0c             	sub    esp,0xc
c001635e:	68 e2 4c 02 c0       	push   0xc0024ce2
c0016363:	e8 7c 98 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0016368:	83 c4 10             	add    esp,0x10
c001636b:	31 f6                	xor    esi,esi
c001636d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016371:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016375:	05 ff 0f 00 00       	add    eax,0xfff
c001637a:	83 d2 00             	adc    edx,0x0
c001637d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016381:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016385:	c1 ea 0c             	shr    edx,0xc
c0016388:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001638c:	ba 00 00 00 00       	mov    edx,0x0
c0016391:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0016395:	89 d0                	mov    eax,edx
c0016397:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001639b:	73 32                	jae    c00163cf <Thr::loadDLL(char const*, bool)+0x248>
c001639d:	50                   	push   eax
c001639e:	50                   	push   eax
c001639f:	89 f0                	mov    eax,esi
c00163a1:	c1 e0 0c             	shl    eax,0xc
c00163a4:	01 d8                	add    eax,ebx
c00163a6:	50                   	push   eax
c00163a7:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c00163ad:	e8 08 d1 ff ff       	call   c00134ba <VAS::getPageTableEntry(unsigned long)>
c00163b2:	83 c4 10             	add    esp,0x10
c00163b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00163b7:	a8 60                	test   al,0x60
c00163b9:	75 11                	jne    c00163cc <Thr::loadDLL(char const*, bool)+0x245>
c00163bb:	83 ec 0c             	sub    esp,0xc
c00163be:	25 00 f0 ff ff       	and    eax,0xfffff000
c00163c3:	50                   	push   eax
c00163c4:	e8 ac 99 ff ff       	call   c000fd75 <Phys::freePage(unsigned long)>
c00163c9:	83 c4 10             	add    esp,0x10
c00163cc:	46                   	inc    esi
c00163cd:	eb 9e                	jmp    c001636d <Thr::loadDLL(char const*, bool)+0x1e6>
c00163cf:	89 f8                	mov    eax,edi
c00163d1:	84 c0                	test   al,al
c00163d3:	b8 00 00 00 00       	mov    eax,0x0
c00163d8:	0f 44 d8             	cmove  ebx,eax
c00163db:	81 c4 2c 01 00 00    	add    esp,0x12c
c00163e1:	89 d8                	mov    eax,ebx
c00163e3:	5b                   	pop    ebx
c00163e4:	5e                   	pop    esi
c00163e5:	5f                   	pop    edi
c00163e6:	5d                   	pop    ebp
c00163e7:	c3                   	ret    

c00163e8 <Thr::executeDLL(unsigned long, void*)>:
c00163e8:	56                   	push   esi
c00163e9:	53                   	push   ebx
c00163ea:	52                   	push   edx
c00163eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00163ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00163f3:	85 db                	test   ebx,ebx
c00163f5:	75 10                	jne    c0016407 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00163f7:	83 ec 0c             	sub    esp,0xc
c00163fa:	68 fe 4c 02 c0       	push   0xc0024cfe
c00163ff:	e8 e0 97 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0016404:	83 c4 10             	add    esp,0x10
c0016407:	50                   	push   eax
c0016408:	50                   	push   eax
c0016409:	53                   	push   ebx
c001640a:	68 28 4d 02 c0       	push   0xc0024d28
c001640f:	e8 52 0b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016414:	89 d8                	mov    eax,ebx
c0016416:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001641a:	83 c4 14             	add    esp,0x14
c001641d:	5b                   	pop    ebx
c001641e:	5e                   	pop    esi
c001641f:	ff e0                	jmp    eax

c0016421 <KeProcessExec(Process*, char const*)>:
c0016421:	56                   	push   esi
c0016422:	53                   	push   ebx
c0016423:	83 ec 04             	sub    esp,0x4
c0016426:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001642a:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016430:	85 f6                	test   esi,esi
c0016432:	74 16                	je     c001644a <KeProcessExec(Process*, char const*)+0x29>
c0016434:	83 ec 0c             	sub    esp,0xc
c0016437:	56                   	push   esi
c0016438:	e8 0f d3 ff ff       	call   c001374c <VAS::~VAS()>
c001643d:	58                   	pop    eax
c001643e:	5a                   	pop    edx
c001643f:	6a 14                	push   0x14
c0016441:	56                   	push   esi
c0016442:	e8 75 6e ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0016447:	83 c4 10             	add    esp,0x10
c001644a:	83 ec 0c             	sub    esp,0xc
c001644d:	6a 14                	push   0x14
c001644f:	e8 34 93 ff ff       	call   c000f788 <malloc>
c0016454:	89 c6                	mov    esi,eax
c0016456:	58                   	pop    eax
c0016457:	5a                   	pop    edx
c0016458:	6a 00                	push   0x0
c001645a:	56                   	push   esi
c001645b:	e8 98 d7 ff ff       	call   c0013bf8 <VAS::VAS(bool)>
c0016460:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0016466:	59                   	pop    ecx
c0016467:	5e                   	pop    esi
c0016468:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001646c:	50                   	push   eax
c001646d:	53                   	push   ebx
c001646e:	e8 6d ef ff ff       	call   c00153e0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016473:	83 c4 14             	add    esp,0x14
c0016476:	31 c0                	xor    eax,eax
c0016478:	5b                   	pop    ebx
c0016479:	5e                   	pop    esi
c001647a:	c3                   	ret    
c001647b:	90                   	nop

c001647c <userModeEntryPoint(void*)>:
c001647c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016484:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016489:	85 c0                	test   eax,eax
c001648b:	75 03                	jne    c0016490 <userModeEntryPoint(void*)+0x14>
c001648d:	fb                   	sti    
c001648e:	66 90                	xchg   ax,ax
c0016490:	fb                   	sti    
c0016491:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016496:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016499:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c001649f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164a3:	e9 97 9d fe ff       	jmp    c000023f <goToUsermode>

c00164a8 <changeTSS>:
c00164a8:	83 ec 14             	sub    esp,0x14
c00164ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164b0:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00164b3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00164b8:	c1 e2 15             	shl    edx,0x15
c00164bb:	29 d0                	sub    eax,edx
c00164bd:	50                   	push   eax
c00164be:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c00164c3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00164c9:	05 68 11 00 00       	add    eax,0x1168
c00164ce:	50                   	push   eax
c00164cf:	e8 c8 c5 ff ff       	call   c0012a9c <TSS::setESP(unsigned long)>
c00164d4:	83 c4 1c             	add    esp,0x1c
c00164d7:	c3                   	ret    

c00164d8 <switchToThread(ThreadControlBlock*)>:
c00164d8:	57                   	push   edi
c00164d9:	8b 0d 6c ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca6c
c00164df:	56                   	push   esi
c00164e0:	53                   	push   ebx
c00164e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164e5:	85 c9                	test   ecx,ecx
c00164e7:	0f 85 9b 00 00 00    	jne    c0016588 <switchToThread(ThreadControlBlock*)+0xb0>
c00164ed:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c00164f1:	81 fa ff 00 00 00    	cmp    edx,0xff
c00164f7:	0f 84 87 00 00 00    	je     c0016584 <switchToThread(ThreadControlBlock*)+0xac>
c00164fd:	b8 00 04 00 00       	mov    eax,0x400
c0016502:	29 d0                	sub    eax,edx
c0016504:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0016507:	d1 f8                	sar    eax,1
c0016509:	01 d0                	add    eax,edx
c001650b:	90                   	nop
c001650c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001650f:	e8 b3 3e 00 00       	call   c001a3c7 <HalQueryPerformanceCounter()>
c0016514:	a3 b0 ca 02 c0       	mov    ds:0xc002cab0,eax
c0016519:	89 c6                	mov    esi,eax
c001651b:	89 d7                	mov    edi,edx
c001651d:	2b 35 a0 ca 02 c0    	sub    esi,DWORD PTR ds:0xc002caa0
c0016523:	a3 a0 ca 02 c0       	mov    ds:0xc002caa0,eax
c0016528:	1b 3d a4 ca 02 c0    	sbb    edi,DWORD PTR ds:0xc002caa4
c001652e:	89 35 a8 ca 02 c0    	mov    DWORD PTR ds:0xc002caa8,esi
c0016534:	89 15 b4 ca 02 c0    	mov    DWORD PTR ds:0xc002cab4,edx
c001653a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016540:	89 15 a4 ca 02 c0    	mov    DWORD PTR ds:0xc002caa4,edx
c0016546:	89 3d ac ca 02 c0    	mov    DWORD PTR ds:0xc002caac,edi
c001654c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001654f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016552:	01 c6                	add    esi,eax
c0016554:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016557:	11 d7                	adc    edi,edx
c0016559:	83 ec 0c             	sub    esp,0xc
c001655c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001655f:	53                   	push   ebx
c0016560:	e8 12 9d fe ff       	call   c0000277 <switchToThreadASM>
c0016565:	0f 20 c0             	mov    eax,cr0
c0016568:	83 c8 08             	or     eax,0x8
c001656b:	0f 22 c0             	mov    cr0,eax
c001656e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016573:	83 c4 10             	add    esp,0x10
c0016576:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001657a:	5b                   	pop    ebx
c001657b:	5e                   	pop    esi
c001657c:	5f                   	pop    edi
c001657d:	e9 e2 ea ff ff       	jmp    c0015064 <KeCheckAlarm(ThreadControlBlock*)>
c0016582:	66 90                	xchg   ax,ax
c0016584:	31 c0                	xor    eax,eax
c0016586:	eb 84                	jmp    c001650c <switchToThread(ThreadControlBlock*)+0x34>
c0016588:	5b                   	pop    ebx
c0016589:	c7 05 68 ca 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x1
c0016593:	5e                   	pop    esi
c0016594:	5f                   	pop    edi
c0016595:	c3                   	ret    
c0016596:	66 90                	xchg   ax,ax

c0016598 <Process::addArgs(char**)>:
c0016598:	57                   	push   edi
c0016599:	56                   	push   esi
c001659a:	53                   	push   ebx
c001659b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001659f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00165a3:	85 f6                	test   esi,esi
c00165a5:	c7 87 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x5b6],0x0
c00165af:	74 4f                	je     c0016600 <Process::addArgs(char**)+0x68>
c00165b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00165b3:	85 c0                	test   eax,eax
c00165b5:	74 49                	je     c0016600 <Process::addArgs(char**)+0x68>
c00165b7:	31 db                	xor    ebx,ebx
c00165b9:	8d 76 00             	lea    esi,[esi+0x0]
c00165bc:	83 ec 0c             	sub    esp,0xc
c00165bf:	50                   	push   eax
c00165c0:	e8 bb 9f fe ff       	call   c0000580 <strlen>
c00165c5:	83 c0 01             	add    eax,0x1
c00165c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00165cb:	e8 b8 91 ff ff       	call   c000f788 <malloc>
c00165d0:	89 84 9f ba 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x5ba],eax
c00165d7:	5a                   	pop    edx
c00165d8:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00165db:	83 c3 01             	add    ebx,0x1
c00165de:	59                   	pop    ecx
c00165df:	52                   	push   edx
c00165e0:	50                   	push   eax
c00165e1:	e8 6a a0 fe ff       	call   c0000650 <strcpy>
c00165e6:	8b 8f b6 05 00 00    	mov    ecx,DWORD PTR [edi+0x5b6]
c00165ec:	83 c4 10             	add    esp,0x10
c00165ef:	83 c1 01             	add    ecx,0x1
c00165f2:	89 8f b6 05 00 00    	mov    DWORD PTR [edi+0x5b6],ecx
c00165f8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00165fb:	85 c0                	test   eax,eax
c00165fd:	75 bd                	jne    c00165bc <Process::addArgs(char**)+0x24>
c00165ff:	90                   	nop
c0016600:	5b                   	pop    ebx
c0016601:	5e                   	pop    esi
c0016602:	5f                   	pop    edi
c0016603:	c3                   	ret    

c0016604 <Process::Process(char const*, Process*, char**)>:
c0016604:	56                   	push   esi
c0016605:	53                   	push   ebx
c0016606:	83 ec 14             	sub    esp,0x14
c0016609:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001660d:	05 0c 02 00 00       	add    eax,0x20c
c0016612:	bb 07 00 00 00       	mov    ebx,0x7
c0016617:	89 c6                	mov    esi,eax
c0016619:	8d 76 00             	lea    esi,[esi+0x0]
c001661c:	85 db                	test   ebx,ebx
c001661e:	78 14                	js     c0016634 <Process::Process(char const*, Process*, char**)+0x30>
c0016620:	83 ec 0c             	sub    esp,0xc
c0016623:	56                   	push   esi
c0016624:	e8 17 bc 00 00       	call   c0022240 <ThreadControlBlock::ThreadControlBlock()>
c0016629:	83 c4 10             	add    esp,0x10
c001662c:	83 c6 73             	add    esi,0x73
c001662f:	83 eb 01             	sub    ebx,0x1
c0016632:	eb e8                	jmp    c001661c <Process::Process(char const*, Process*, char**)+0x18>
c0016634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016638:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c001663f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016643:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001664a:	83 ec 0c             	sub    esp,0xc
c001664d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016651:	e8 62 7f ff ff       	call   c000e5b8 <KeNewProcessEnv(Process*)>
c0016656:	83 c4 10             	add    esp,0x10
c0016659:	89 c2                	mov    edx,eax
c001665b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001665f:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016669:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016672:	a1 5c 69 02 c0       	mov    eax,ds:0xc002695c
c0016677:	8d 50 01             	lea    edx,[eax+0x1]
c001667a:	89 15 5c 69 02 c0    	mov    DWORD PTR ds:0xc002695c,edx
c0016680:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016684:	89 02                	mov    DWORD PTR [edx],eax
c0016686:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001668e:	83 ec 0c             	sub    esp,0xc
c0016691:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016695:	e8 ee 90 ff ff       	call   c000f788 <malloc>
c001669a:	83 c4 10             	add    esp,0x10
c001669d:	89 c3                	mov    ebx,eax
c001669f:	83 ec 08             	sub    esp,0x8
c00166a2:	6a 00                	push   0x0
c00166a4:	53                   	push   ebx
c00166a5:	e8 4e d5 ff ff       	call   c0013bf8 <VAS::VAS(bool)>
c00166aa:	83 c4 10             	add    esp,0x10
c00166ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166b1:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00166b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166bb:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00166c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166cd:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00166d3:	e8 23 a7 ff ff       	call   c0010dfb <KeInitSignals()>
c00166d8:	89 c2                	mov    edx,eax
c00166da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166de:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c00166e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166e8:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00166ee:	85 c0                	test   eax,eax
c00166f0:	74 42                	je     c0016734 <Process::Process(char const*, Process*, char**)+0x130>
c00166f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166f6:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00166fc:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016706:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c001670c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016710:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016716:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001671c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016720:	05 0c 01 00 00       	add    eax,0x10c
c0016725:	83 ec 08             	sub    esp,0x8
c0016728:	52                   	push   edx
c0016729:	50                   	push   eax
c001672a:	e8 21 9f fe ff       	call   c0000650 <strcpy>
c001672f:	83 c4 10             	add    esp,0x10
c0016732:	eb 7c                	jmp    c00167b0 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016734:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001673c:	83 ec 0c             	sub    esp,0xc
c001673f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016743:	e8 40 90 ff ff       	call   c000f788 <malloc>
c0016748:	83 c4 10             	add    esp,0x10
c001674b:	89 c3                	mov    ebx,eax
c001674d:	83 ec 08             	sub    esp,0x8
c0016750:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016754:	53                   	push   ebx
c0016755:	e8 62 c0 ff ff       	call   c00127bc <VgaText::VgaText(char const*)>
c001675a:	83 c4 10             	add    esp,0x10
c001675d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016761:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016767:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001676b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016771:	83 ec 0c             	sub    esp,0xc
c0016774:	50                   	push   eax
c0016775:	e8 a8 b8 ff ff       	call   c0012022 <addToTerminalCycle(VgaText*)>
c001677a:	83 c4 10             	add    esp,0x10
c001677d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016781:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016787:	83 ec 0c             	sub    esp,0xc
c001678a:	50                   	push   eax
c001678b:	e8 03 bb ff ff       	call   c0012293 <setActiveTerminal(VgaText*)>
c0016790:	83 c4 10             	add    esp,0x10
c0016793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016797:	05 0c 01 00 00       	add    eax,0x10c
c001679c:	83 ec 08             	sub    esp,0x8
c001679f:	68 47 4d 02 c0       	push   0xc0024d47
c00167a4:	50                   	push   eax
c00167a5:	e8 a6 9e fe ff       	call   c0000650 <strcpy>
c00167aa:	83 c4 10             	add    esp,0x10
c00167ad:	8d 76 00             	lea    esi,[esi+0x0]
c00167b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b4:	83 c0 0c             	add    eax,0xc
c00167b7:	83 ec 08             	sub    esp,0x8
c00167ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167be:	50                   	push   eax
c00167bf:	e8 8c 9e fe ff       	call   c0000650 <strcpy>
c00167c4:	83 c4 10             	add    esp,0x10
c00167c7:	83 ec 08             	sub    esp,0x8
c00167ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00167ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167d2:	e8 c1 fd ff ff       	call   c0016598 <Process::addArgs(char**)>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167de:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c00167e4:	83 e2 7f             	and    edx,0x7f
c00167e7:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c00167ed:	83 ec 08             	sub    esp,0x8
c00167f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167f8:	e8 e3 eb ff ff       	call   c00153e0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00167fd:	83 c4 10             	add    esp,0x10
c0016800:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016804:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016808:	83 f0 01             	xor    eax,0x1
c001680b:	88 c2                	mov    dl,al
c001680d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016811:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001681b:	8b 10                	mov    edx,DWORD PTR [eax]
c001681d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016822:	52                   	push   edx
c0016823:	50                   	push   eax
c0016824:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016828:	68 a0 4d 02 c0       	push   0xc0024da0
c001682d:	e8 34 07 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016832:	83 c4 10             	add    esp,0x10
c0016835:	90                   	nop
c0016836:	83 c4 14             	add    esp,0x14
c0016839:	5b                   	pop    ebx
c001683a:	5e                   	pop    esi
c001683b:	c3                   	ret    

c001683c <Process::Process(bool, char const*, Process*, char**)>:
c001683c:	56                   	push   esi
c001683d:	53                   	push   ebx
c001683e:	83 ec 24             	sub    esp,0x24
c0016841:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016845:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016849:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001684d:	05 0c 02 00 00       	add    eax,0x20c
c0016852:	bb 07 00 00 00       	mov    ebx,0x7
c0016857:	89 c6                	mov    esi,eax
c0016859:	8d 76 00             	lea    esi,[esi+0x0]
c001685c:	85 db                	test   ebx,ebx
c001685e:	78 14                	js     c0016874 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016860:	83 ec 0c             	sub    esp,0xc
c0016863:	56                   	push   esi
c0016864:	e8 d7 b9 00 00       	call   c0022240 <ThreadControlBlock::ThreadControlBlock()>
c0016869:	83 c4 10             	add    esp,0x10
c001686c:	83 c6 73             	add    esi,0x73
c001686f:	83 eb 01             	sub    ebx,0x1
c0016872:	eb e8                	jmp    c001685c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016874:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016878:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c001687f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016883:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001688a:	83 ec 0c             	sub    esp,0xc
c001688d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016891:	e8 22 7d ff ff       	call   c000e5b8 <KeNewProcessEnv(Process*)>
c0016896:	83 c4 10             	add    esp,0x10
c0016899:	89 c2                	mov    edx,eax
c001689b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001689f:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c00168a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168a9:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c00168b2:	a1 5c 69 02 c0       	mov    eax,ds:0xc002695c
c00168b7:	8d 50 01             	lea    edx,[eax+0x1]
c00168ba:	89 15 5c 69 02 c0    	mov    DWORD PTR ds:0xc002695c,edx
c00168c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168c4:	89 02                	mov    DWORD PTR [edx],eax
c00168c6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00168ce:	83 ec 0c             	sub    esp,0xc
c00168d1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00168d5:	e8 ae 8e ff ff       	call   c000f788 <malloc>
c00168da:	83 c4 10             	add    esp,0x10
c00168dd:	89 c3                	mov    ebx,eax
c00168df:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00168e4:	83 ec 08             	sub    esp,0x8
c00168e7:	50                   	push   eax
c00168e8:	53                   	push   ebx
c00168e9:	e8 0a d3 ff ff       	call   c0013bf8 <VAS::VAS(bool)>
c00168ee:	83 c4 10             	add    esp,0x10
c00168f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168f5:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00168fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168ff:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016909:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001690d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016911:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016917:	e8 df a4 ff ff       	call   c0010dfb <KeInitSignals()>
c001691c:	89 c2                	mov    edx,eax
c001691e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016922:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016928:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001692c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016932:	85 c0                	test   eax,eax
c0016934:	74 42                	je     c0016978 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016936:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001693a:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016940:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016946:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001694a:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016950:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016954:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001695a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016960:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016964:	05 0c 01 00 00       	add    eax,0x10c
c0016969:	83 ec 08             	sub    esp,0x8
c001696c:	52                   	push   edx
c001696d:	50                   	push   eax
c001696e:	e8 dd 9c fe ff       	call   c0000650 <strcpy>
c0016973:	83 c4 10             	add    esp,0x10
c0016976:	eb 7c                	jmp    c00169f4 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016978:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016980:	83 ec 0c             	sub    esp,0xc
c0016983:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016987:	e8 fc 8d ff ff       	call   c000f788 <malloc>
c001698c:	83 c4 10             	add    esp,0x10
c001698f:	89 c3                	mov    ebx,eax
c0016991:	83 ec 08             	sub    esp,0x8
c0016994:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016998:	53                   	push   ebx
c0016999:	e8 1e be ff ff       	call   c00127bc <VgaText::VgaText(char const*)>
c001699e:	83 c4 10             	add    esp,0x10
c00169a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169a5:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c00169ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169af:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00169b5:	83 ec 0c             	sub    esp,0xc
c00169b8:	50                   	push   eax
c00169b9:	e8 64 b6 ff ff       	call   c0012022 <addToTerminalCycle(VgaText*)>
c00169be:	83 c4 10             	add    esp,0x10
c00169c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169c5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00169cb:	83 ec 0c             	sub    esp,0xc
c00169ce:	50                   	push   eax
c00169cf:	e8 bf b8 ff ff       	call   c0012293 <setActiveTerminal(VgaText*)>
c00169d4:	83 c4 10             	add    esp,0x10
c00169d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169db:	05 0c 01 00 00       	add    eax,0x10c
c00169e0:	83 ec 08             	sub    esp,0x8
c00169e3:	68 47 4d 02 c0       	push   0xc0024d47
c00169e8:	50                   	push   eax
c00169e9:	e8 62 9c fe ff       	call   c0000650 <strcpy>
c00169ee:	83 c4 10             	add    esp,0x10
c00169f1:	8d 76 00             	lea    esi,[esi+0x0]
c00169f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169f8:	83 c0 0c             	add    eax,0xc
c00169fb:	83 ec 08             	sub    esp,0x8
c00169fe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a02:	50                   	push   eax
c0016a03:	e8 48 9c fe ff       	call   c0000650 <strcpy>
c0016a08:	83 c4 10             	add    esp,0x10
c0016a0b:	83 ec 08             	sub    esp,0x8
c0016a0e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a16:	e8 7d fb ff ff       	call   c0016598 <Process::addArgs(char**)>
c0016a1b:	83 c4 10             	add    esp,0x10
c0016a1e:	90                   	nop
c0016a1f:	83 c4 24             	add    esp,0x24
c0016a22:	5b                   	pop    ebx
c0016a23:	5e                   	pop    esi
c0016a24:	c3                   	ret    
c0016a25:	8d 76 00             	lea    esi,[esi+0x0]

c0016a28 <taskStartupFunction>:
c0016a28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a2d:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016a30:	c3                   	ret    
c0016a31:	8d 76 00             	lea    esi,[esi+0x0]

c0016a34 <KeDisablePreemption()>:
c0016a34:	a1 4c ca 02 c0       	mov    eax,ds:0xc002ca4c
c0016a39:	85 c0                	test   eax,eax
c0016a3b:	75 13                	jne    c0016a50 <KeDisablePreemption()+0x1c>
c0016a3d:	8a 15 0c c1 02 c0    	mov    dl,BYTE PTR ds:0xc002c10c
c0016a43:	c6 05 0c c1 02 c0 00 	mov    BYTE PTR ds:0xc002c10c,0x0
c0016a4a:	88 15 48 ca 02 c0    	mov    BYTE PTR ds:0xc002ca48,dl
c0016a50:	83 c0 01             	add    eax,0x1
c0016a53:	a3 4c ca 02 c0       	mov    ds:0xc002ca4c,eax
c0016a58:	c3                   	ret    
c0016a59:	8d 76 00             	lea    esi,[esi+0x0]

c0016a5c <KeRestorePreemption()>:
c0016a5c:	a1 4c ca 02 c0       	mov    eax,ds:0xc002ca4c
c0016a61:	83 e8 01             	sub    eax,0x1
c0016a64:	a3 4c ca 02 c0       	mov    ds:0xc002ca4c,eax
c0016a69:	75 0d                	jne    c0016a78 <KeRestorePreemption()+0x1c>
c0016a6b:	a0 48 ca 02 c0       	mov    al,ds:0xc002ca48
c0016a70:	a2 0c c1 02 c0       	mov    ds:0xc002c10c,al
c0016a75:	8d 76 00             	lea    esi,[esi+0x0]
c0016a78:	c3                   	ret    
c0016a79:	90                   	nop
c0016a7a:	66 90                	xchg   ax,ax

c0016a7c <Process::createThread(void (*)(void*), void*, int)>:
c0016a7c:	55                   	push   ebp
c0016a7d:	31 c9                	xor    ecx,ecx
c0016a7f:	57                   	push   edi
c0016a80:	56                   	push   esi
c0016a81:	53                   	push   ebx
c0016a82:	83 ec 0c             	sub    esp,0xc
c0016a85:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016a89:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016a90:	89 f2                	mov    edx,esi
c0016a92:	66 90                	xchg   ax,ax
c0016a94:	0f b7 c2             	movzx  eax,dx
c0016a97:	80 e2 01             	and    dl,0x1
c0016a9a:	74 18                	je     c0016ab4 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016a9c:	d1 f8                	sar    eax,1
c0016a9e:	83 c1 01             	add    ecx,0x1
c0016aa1:	83 f9 10             	cmp    ecx,0x10
c0016aa4:	89 c2                	mov    edx,eax
c0016aa6:	75 ec                	jne    c0016a94 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016aa8:	83 c4 0c             	add    esp,0xc
c0016aab:	31 db                	xor    ebx,ebx
c0016aad:	89 d8                	mov    eax,ebx
c0016aaf:	5b                   	pop    ebx
c0016ab0:	5e                   	pop    esi
c0016ab1:	5f                   	pop    edi
c0016ab2:	5d                   	pop    ebp
c0016ab3:	c3                   	ret    
c0016ab4:	b8 01 00 00 00       	mov    eax,0x1
c0016ab9:	d3 e0                	shl    eax,cl
c0016abb:	09 c6                	or     esi,eax
c0016abd:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016ac4:	6b c1 73             	imul   eax,ecx,0x73
c0016ac7:	01 d8                	add    eax,ebx
c0016ac9:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016ad0:	75 0a                	jne    c0016adc <Process::createThread(void (*)(void*), void*, int)+0x60>
c0016ad2:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016adc:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016ae2:	6b f9 73             	imul   edi,ecx,0x73
c0016ae5:	83 ec 0c             	sub    esp,0xc
c0016ae8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016aeb:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016aee:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016af4:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016afa:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016b00:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016b07:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016b11:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016b17:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016b1b:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016b25:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016b2c:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016b33:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016b39:	89 ca                	mov    edx,ecx
c0016b3b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016b3f:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016b46:	f7 da                	neg    edx
c0016b48:	c1 e2 15             	shl    edx,0x15
c0016b4b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016b51:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016b57:	8a 54 24 38          	mov    dl,BYTE PTR [esp+0x38]
c0016b5b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016b65:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016b6b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016b75:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016b7b:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016b81:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016b8b:	83 e2 80             	and    edx,0xffffff80
c0016b8e:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016b94:	68 00 01 00 00       	push   0x100
c0016b99:	e8 ea 8b ff ff       	call   c000f788 <malloc>
c0016b9e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016ba1:	58                   	pop    eax
c0016ba2:	5a                   	pop    edx
c0016ba3:	53                   	push   ebx
c0016ba4:	68 8c ca 02 c0       	push   0xc002ca8c
c0016ba9:	e8 3e b2 00 00       	call   c0021dec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016bae:	83 c4 10             	add    esp,0x10
c0016bb1:	89 d8                	mov    eax,ebx
c0016bb3:	83 c4 0c             	add    esp,0xc
c0016bb6:	5b                   	pop    ebx
c0016bb7:	5e                   	pop    esi
c0016bb8:	5f                   	pop    edi
c0016bb9:	5d                   	pop    ebp
c0016bba:	c3                   	ret    
c0016bbb:	90                   	nop

c0016bbc <Process::createUserThread()>:
c0016bbc:	83 ec 0c             	sub    esp,0xc
c0016bbf:	68 80 00 00 00       	push   0x80
c0016bc4:	6a 00                	push   0x0
c0016bc6:	68 7c 64 01 c0       	push   0xc001647c
c0016bcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bcf:	50                   	push   eax
c0016bd0:	e8 a7 fe ff ff       	call   c0016a7c <Process::createThread(void (*)(void*), void*, int)>
c0016bd5:	83 c4 1c             	add    esp,0x1c
c0016bd8:	c3                   	ret    
c0016bd9:	8d 76 00             	lea    esi,[esi+0x0]

c0016bdc <setupMultitasking(void (*)())>:
c0016bdc:	56                   	push   esi
c0016bdd:	53                   	push   ebx
c0016bde:	83 ec 04             	sub    esp,0x4
c0016be1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016be5:	eb 11                	jmp    c0016bf8 <setupMultitasking(void (*)())+0x1c>
c0016be7:	90                   	nop
c0016be8:	83 ec 0c             	sub    esp,0xc
c0016beb:	68 8c ca 02 c0       	push   0xc002ca8c
c0016bf0:	e8 3b b1 00 00       	call   c0021d30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016bf5:	83 c4 10             	add    esp,0x10
c0016bf8:	83 ec 0c             	sub    esp,0xc
c0016bfb:	68 8c ca 02 c0       	push   0xc002ca8c
c0016c00:	e8 07 b1 00 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c05:	83 c4 10             	add    esp,0x10
c0016c08:	84 c0                	test   al,al
c0016c0a:	74 dc                	je     c0016be8 <setupMultitasking(void (*)())+0xc>
c0016c0c:	83 ec 0c             	sub    esp,0xc
c0016c0f:	68 c4 07 00 00       	push   0x7c4
c0016c14:	e8 6f 8b ff ff       	call   c000f788 <malloc>
c0016c19:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016c20:	6a 00                	push   0x0
c0016c22:	68 4b 4d 02 c0       	push   0xc0024d4b
c0016c27:	6a 01                	push   0x1
c0016c29:	50                   	push   eax
c0016c2a:	89 c3                	mov    ebx,eax
c0016c2c:	e8 0b fc ff ff       	call   c001683c <Process::Process(bool, char const*, Process*, char**)>
c0016c31:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016c37:	83 c4 14             	add    esp,0x14
c0016c3a:	89 1d 98 ca 02 c0    	mov    DWORD PTR ds:0xc002ca98,ebx
c0016c40:	50                   	push   eax
c0016c41:	e8 4d b6 ff ff       	call   c0012293 <setActiveTerminal(VgaText*)>
c0016c46:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016c4d:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016c57:	83 c8 01             	or     eax,0x1
c0016c5a:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016c61:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016c67:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016c6a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016c74:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016c7a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0016c84:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016c8a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016c94:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016c9e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016ca4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016caa:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016cb4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016cbe:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016cc5:	e8 be 8a ff ff       	call   c000f788 <malloc>
c0016cca:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016cd4:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c0016cdb:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c0016ce2:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c0016ce9:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0016cf0:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016cf6:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016cfc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016d02:	5a                   	pop    edx
c0016d03:	59                   	pop    ecx
c0016d04:	68 47 4d 02 c0       	push   0xc0024d47
c0016d09:	50                   	push   eax
c0016d0a:	e8 41 99 fe ff       	call   c0000650 <strcpy>
c0016d0f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016d16:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016d1a:	83 c4 14             	add    esp,0x14
c0016d1d:	5b                   	pop    ebx
c0016d1e:	5e                   	pop    esi
c0016d1f:	e9 45 95 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0016d24 <schedule()>:
c0016d24:	8b 15 6c ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca6c
c0016d2a:	85 d2                	test   edx,edx
c0016d2c:	74 0e                	je     c0016d3c <schedule()+0x18>
c0016d2e:	c7 05 68 ca 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x1
c0016d38:	c3                   	ret    
c0016d39:	8d 76 00             	lea    esi,[esi+0x0]
c0016d3c:	53                   	push   ebx
c0016d3d:	83 ec 14             	sub    esp,0x14
c0016d40:	68 8c ca 02 c0       	push   0xc002ca8c
c0016d45:	e8 c2 af 00 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d4a:	83 c4 10             	add    esp,0x10
c0016d4d:	84 c0                	test   al,al
c0016d4f:	75 3f                	jne    c0016d90 <schedule()+0x6c>
c0016d51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d56:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016d59:	83 fa 01             	cmp    edx,0x1
c0016d5c:	74 3a                	je     c0016d98 <schedule()+0x74>
c0016d5e:	66 90                	xchg   ax,ax
c0016d60:	83 ec 0c             	sub    esp,0xc
c0016d63:	68 8c ca 02 c0       	push   0xc002ca8c
c0016d68:	e8 bb af 00 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d6d:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c0016d74:	89 c3                	mov    ebx,eax
c0016d76:	e8 b5 af 00 00       	call   c0021d30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016d7b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016d82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d85:	e8 4e f7 ff ff       	call   c00164d8 <switchToThread(ThreadControlBlock*)>
c0016d8a:	83 c4 10             	add    esp,0x10
c0016d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d90:	83 c4 08             	add    esp,0x8
c0016d93:	5b                   	pop    ebx
c0016d94:	c3                   	ret    
c0016d95:	8d 76 00             	lea    esi,[esi+0x0]
c0016d98:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016d9f:	83 ec 08             	sub    esp,0x8
c0016da2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016da7:	50                   	push   eax
c0016da8:	68 8c ca 02 c0       	push   0xc002ca8c
c0016dad:	e8 3a b0 00 00       	call   c0021dec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016db2:	83 c4 10             	add    esp,0x10
c0016db5:	eb a9                	jmp    c0016d60 <schedule()+0x3c>
c0016db7:	90                   	nop

c0016db8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016db8:	83 ec 0c             	sub    esp,0xc
c0016dbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016dc4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016dc7:	e8 58 ff ff ff       	call   c0016d24 <schedule()>
c0016dcc:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016dd4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016dd9:	85 c0                	test   eax,eax
c0016ddb:	75 03                	jne    c0016de0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016ddd:	fb                   	sti    
c0016dde:	66 90                	xchg   ax,ax
c0016de0:	83 c4 0c             	add    esp,0xc
c0016de3:	c3                   	ret    

c0016de4 <blockTask(TaskState)>:
c0016de4:	83 ec 0c             	sub    esp,0xc
c0016de7:	fa                   	cli    
c0016de8:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016ded:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016df1:	83 c0 01             	add    eax,0x1
c0016df4:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0016df9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dfe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016e01:	e8 1e ff ff ff       	call   c0016d24 <schedule()>
c0016e06:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016e0e:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0016e14:	85 d2                	test   edx,edx
c0016e16:	75 04                	jne    c0016e1c <blockTask(TaskState)+0x38>
c0016e18:	fb                   	sti    
c0016e19:	8d 76 00             	lea    esi,[esi+0x0]
c0016e1c:	83 c4 0c             	add    esp,0xc
c0016e1f:	c3                   	ret    

c0016e20 <waitTask(int, int*, int)>:
c0016e20:	83 ec 18             	sub    esp,0x18
c0016e23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e28:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016e2c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016e2f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e38:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0016e3b:	6a 07                	push   0x7
c0016e3d:	e8 a2 ff ff ff       	call   c0016de4 <blockTask(TaskState)>
c0016e42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e47:	83 c4 10             	add    esp,0x10
c0016e4a:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0016e4d:	85 d2                	test   edx,edx
c0016e4f:	74 0b                	je     c0016e5c <waitTask(int, int*, int)+0x3c>
c0016e51:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0016e54:	89 02                	mov    DWORD PTR [edx],eax
c0016e56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e5b:	90                   	nop
c0016e5c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0016e5f:	83 c4 0c             	add    esp,0xc
c0016e62:	c3                   	ret    
c0016e63:	90                   	nop

c0016e64 <milliTenthSleepUntil(unsigned long long)>:
c0016e64:	83 ec 0c             	sub    esp,0xc
c0016e67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e6f:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c0016e75:	89 d1                	mov    ecx,edx
c0016e77:	1b 0d 54 bb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002bb54
c0016e7d:	73 05                	jae    c0016e84 <milliTenthSleepUntil(unsigned long long)+0x20>
c0016e7f:	90                   	nop
c0016e80:	83 c4 0c             	add    esp,0xc
c0016e83:	c3                   	ret    
c0016e84:	fa                   	cli    
c0016e85:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c0016e8b:	83 ec 08             	sub    esp,0x8
c0016e8e:	83 c1 01             	add    ecx,0x1
c0016e91:	89 0d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ecx
c0016e97:	8b 0d 6c ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca6c
c0016e9d:	83 c1 01             	add    ecx,0x1
c0016ea0:	89 0d 6c ca 02 c0    	mov    DWORD PTR ds:0xc002ca6c,ecx
c0016ea6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016eac:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0016eaf:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0016eb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb7:	50                   	push   eax
c0016eb8:	68 80 ca 02 c0       	push   0xc002ca80
c0016ebd:	e8 2a af 00 00       	call   c0021dec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ec2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016ec9:	e8 16 ff ff ff       	call   c0016de4 <blockTask(TaskState)>
c0016ece:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0016ed3:	83 c4 10             	add    esp,0x10
c0016ed6:	83 e8 01             	sub    eax,0x1
c0016ed9:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0016ede:	85 c0                	test   eax,eax
c0016ee0:	75 0a                	jne    c0016eec <milliTenthSleepUntil(unsigned long long)+0x88>
c0016ee2:	8b 15 68 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca68
c0016ee8:	85 d2                	test   edx,edx
c0016eea:	75 18                	jne    c0016f04 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0016eec:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016ef4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016ef9:	85 c0                	test   eax,eax
c0016efb:	75 83                	jne    c0016e80 <milliTenthSleepUntil(unsigned long long)+0x1c>
c0016efd:	fb                   	sti    
c0016efe:	83 c4 0c             	add    esp,0xc
c0016f01:	c3                   	ret    
c0016f02:	66 90                	xchg   ax,ax
c0016f04:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0016f0e:	e8 11 fe ff ff       	call   c0016d24 <schedule()>
c0016f13:	eb d7                	jmp    c0016eec <milliTenthSleepUntil(unsigned long long)+0x88>
c0016f15:	8d 76 00             	lea    esi,[esi+0x0]

c0016f18 <milliTenthSleep(unsigned long long)>:
c0016f18:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0016f1d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0016f21:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0016f27:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0016f2b:	e9 34 ff ff ff       	jmp    c0016e64 <milliTenthSleepUntil(unsigned long long)>

c0016f30 <sleep(unsigned long long)>:
c0016f30:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0016f38:	b8 10 27 00 00       	mov    eax,0x2710
c0016f3d:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0016f41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f45:	01 ca                	add    edx,ecx
c0016f47:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016f4b:	eb cb                	jmp    c0016f18 <milliTenthSleep(unsigned long long)>
c0016f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0016f50 <sleep(unsigned int)>:
c0016f50:	83 ec 14             	sub    esp,0x14
c0016f53:	b8 10 27 00 00       	mov    eax,0x2710
c0016f58:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0016f5c:	52                   	push   edx
c0016f5d:	50                   	push   eax
c0016f5e:	e8 b5 ff ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0016f63:	83 c4 1c             	add    esp,0x1c
c0016f66:	c3                   	ret    
c0016f67:	90                   	nop

c0016f68 <milliTenthSleep(unsigned int)>:
c0016f68:	83 ec 14             	sub    esp,0x14
c0016f6b:	31 d2                	xor    edx,edx
c0016f6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016f71:	03 05 50 bb 02 c0    	add    eax,DWORD PTR ds:0xc002bb50
c0016f77:	13 15 54 bb 02 c0    	adc    edx,DWORD PTR ds:0xc002bb54
c0016f7d:	52                   	push   edx
c0016f7e:	50                   	push   eax
c0016f7f:	e8 e0 fe ff ff       	call   c0016e64 <milliTenthSleepUntil(unsigned long long)>
c0016f84:	83 c4 1c             	add    esp,0x1c
c0016f87:	c3                   	ret    

c0016f88 <taskReturned>:
c0016f88:	83 ec 18             	sub    esp,0x18
c0016f8b:	68 d4 4d 02 c0       	push   0xc0024dd4
c0016f90:	e8 4f 8c ff ff       	call   c000fbe4 <KePanic(char const*)>
c0016f95:	83 c4 10             	add    esp,0x10
c0016f98:	83 ec 0c             	sub    esp,0xc
c0016f9b:	6a 02                	push   0x2
c0016f9d:	e8 42 fe ff ff       	call   c0016de4 <blockTask(TaskState)>
c0016fa2:	fa                   	cli    
c0016fa3:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016fa8:	83 c0 01             	add    eax,0x1
c0016fab:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0016fb0:	e8 6f fd ff ff       	call   c0016d24 <schedule()>
c0016fb5:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016fbd:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0016fc3:	83 c4 10             	add    esp,0x10
c0016fc6:	85 d2                	test   edx,edx
c0016fc8:	75 ce                	jne    c0016f98 <taskReturned+0x10>
c0016fca:	fb                   	sti    
c0016fcb:	eb cb                	jmp    c0016f98 <taskReturned+0x10>
c0016fcd:	8d 76 00             	lea    esi,[esi+0x0]

c0016fd0 <KeProcessFromPID(int)>:
c0016fd0:	57                   	push   edi
c0016fd1:	56                   	push   esi
c0016fd2:	53                   	push   ebx
c0016fd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fd7:	fa                   	cli    
c0016fd8:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c0016fde:	83 ec 0c             	sub    esp,0xc
c0016fe1:	68 8c ca 02 c0       	push   0xc002ca8c
c0016fe6:	83 c1 01             	add    ecx,0x1
c0016fe9:	89 0d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ecx
c0016fef:	e8 34 ad 00 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ff4:	83 c4 10             	add    esp,0x10
c0016ff7:	89 c7                	mov    edi,eax
c0016ff9:	eb 15                	jmp    c0017010 <KeProcessFromPID(int)+0x40>
c0016ffb:	90                   	nop
c0016ffc:	83 ec 0c             	sub    esp,0xc
c0016fff:	68 8c ca 02 c0       	push   0xc002ca8c
c0017004:	e8 1f ad 00 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017009:	83 c4 10             	add    esp,0x10
c001700c:	39 f8                	cmp    eax,edi
c001700e:	74 50                	je     c0017060 <KeProcessFromPID(int)+0x90>
c0017010:	83 ec 0c             	sub    esp,0xc
c0017013:	68 8c ca 02 c0       	push   0xc002ca8c
c0017018:	e8 0b ad 00 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001701d:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c0017024:	89 c3                	mov    ebx,eax
c0017026:	e8 05 ad 00 00       	call   c0021d30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001702b:	58                   	pop    eax
c001702c:	5a                   	pop    edx
c001702d:	53                   	push   ebx
c001702e:	68 8c ca 02 c0       	push   0xc002ca8c
c0017033:	e8 b4 ad 00 00       	call   c0021dec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017038:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001703b:	83 c4 10             	add    esp,0x10
c001703e:	39 30                	cmp    DWORD PTR [eax],esi
c0017040:	75 ba                	jne    c0016ffc <KeProcessFromPID(int)+0x2c>
c0017042:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001704a:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c0017050:	85 c9                	test   ecx,ecx
c0017052:	74 08                	je     c001705c <KeProcessFromPID(int)+0x8c>
c0017054:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017057:	90                   	nop
c0017058:	5b                   	pop    ebx
c0017059:	5e                   	pop    esi
c001705a:	5f                   	pop    edi
c001705b:	c3                   	ret    
c001705c:	fb                   	sti    
c001705d:	eb f5                	jmp    c0017054 <KeProcessFromPID(int)+0x84>
c001705f:	90                   	nop
c0017060:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017068:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c001706e:	31 c0                	xor    eax,eax
c0017070:	85 d2                	test   edx,edx
c0017072:	75 e4                	jne    c0017058 <KeProcessFromPID(int)+0x88>
c0017074:	fb                   	sti    
c0017075:	5b                   	pop    ebx
c0017076:	5e                   	pop    esi
c0017077:	5f                   	pop    edi
c0017078:	c3                   	ret    
c0017079:	8d 76 00             	lea    esi,[esi+0x0]

c001707c <unblockTask(ThreadControlBlock*)>:
c001707c:	53                   	push   ebx
c001707d:	83 ec 08             	sub    esp,0x8
c0017080:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017084:	fa                   	cli    
c0017085:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c001708b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001708e:	83 c2 01             	add    edx,0x1
c0017091:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c0017097:	85 c0                	test   eax,eax
c0017099:	74 6d                	je     c0017108 <unblockTask(ThreadControlBlock*)+0x8c>
c001709b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001709e:	83 f8 01             	cmp    eax,0x1
c00170a1:	74 39                	je     c00170dc <unblockTask(ThreadControlBlock*)+0x60>
c00170a3:	83 ec 0c             	sub    esp,0xc
c00170a6:	68 8c ca 02 c0       	push   0xc002ca8c
c00170ab:	e8 78 ac 00 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00170b0:	83 c4 10             	add    esp,0x10
c00170b3:	85 c0                	test   eax,eax
c00170b5:	75 1d                	jne    c00170d4 <unblockTask(ThreadControlBlock*)+0x58>
c00170b7:	eb 63                	jmp    c001711c <unblockTask(ThreadControlBlock*)+0xa0>
c00170b9:	8d 76 00             	lea    esi,[esi+0x0]
c00170bc:	83 ec 08             	sub    esp,0x8
c00170bf:	50                   	push   eax
c00170c0:	68 8c ca 02 c0       	push   0xc002ca8c
c00170c5:	e8 6a b1 00 00       	call   c0022234 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00170ca:	83 c4 10             	add    esp,0x10
c00170cd:	85 c0                	test   eax,eax
c00170cf:	74 4b                	je     c001711c <unblockTask(ThreadControlBlock*)+0xa0>
c00170d1:	8d 76 00             	lea    esi,[esi+0x0]
c00170d4:	39 c3                	cmp    ebx,eax
c00170d6:	75 e4                	jne    c00170bc <unblockTask(ThreadControlBlock*)+0x40>
c00170d8:	eb 12                	jmp    c00170ec <unblockTask(ThreadControlBlock*)+0x70>
c00170da:	66 90                	xchg   ax,ax
c00170dc:	83 ec 0c             	sub    esp,0xc
c00170df:	68 69 4d 02 c0       	push   0xc0024d69
c00170e4:	e8 7d fe fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00170e9:	83 c4 10             	add    esp,0x10
c00170ec:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00170f4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00170f9:	85 c0                	test   eax,eax
c00170fb:	75 03                	jne    c0017100 <unblockTask(ThreadControlBlock*)+0x84>
c00170fd:	fb                   	sti    
c00170fe:	66 90                	xchg   ax,ax
c0017100:	83 c4 08             	add    esp,0x8
c0017103:	5b                   	pop    ebx
c0017104:	c3                   	ret    
c0017105:	8d 76 00             	lea    esi,[esi+0x0]
c0017108:	83 ec 0c             	sub    esp,0xc
c001710b:	68 52 4d 02 c0       	push   0xc0024d52
c0017110:	e8 51 fe fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017115:	83 c4 10             	add    esp,0x10
c0017118:	eb d2                	jmp    c00170ec <unblockTask(ThreadControlBlock*)+0x70>
c001711a:	66 90                	xchg   ax,ax
c001711c:	83 ec 08             	sub    esp,0x8
c001711f:	53                   	push   ebx
c0017120:	68 8c ca 02 c0       	push   0xc002ca8c
c0017125:	e8 c2 ac 00 00       	call   c0021dec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001712a:	83 c4 10             	add    esp,0x10
c001712d:	eb bd                	jmp    c00170ec <unblockTask(ThreadControlBlock*)+0x70>
c001712f:	90                   	nop

c0017130 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017130:	55                   	push   ebp
c0017131:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017136:	57                   	push   edi
c0017137:	56                   	push   esi
c0017138:	53                   	push   ebx
c0017139:	83 ec 1c             	sub    esp,0x1c
c001713c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017140:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017143:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017146:	d3 c0                	rol    eax,cl
c0017148:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c001714f:	21 c8                	and    eax,ecx
c0017151:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017158:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001715b:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017163:	0f 85 af 01 00 00    	jne    c0017318 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017169:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c001716f:	85 ed                	test   ebp,ebp
c0017171:	7e 29                	jle    c001719c <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017173:	31 f6                	xor    esi,esi
c0017175:	8d 76 00             	lea    esi,[esi+0x0]
c0017178:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c001717f:	83 ec 0c             	sub    esp,0xc
c0017182:	83 c6 01             	add    esi,0x1
c0017185:	57                   	push   edi
c0017186:	e8 0d 86 ff ff       	call   c000f798 <free>
c001718b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001718e:	83 c4 10             	add    esp,0x10
c0017191:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0017197:	7f df                	jg     c0017178 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0017199:	8d 76 00             	lea    esi,[esi+0x0]
c001719c:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00171a6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00171a9:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c00171af:	89 f7                	mov    edi,esi
c00171b1:	85 ed                	test   ebp,ebp
c00171b3:	74 1b                	je     c00171d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00171b5:	83 ec 0c             	sub    esp,0xc
c00171b8:	55                   	push   ebp
c00171b9:	e8 16 73 ff ff       	call   c000e4d4 <EnvVarContainer::~EnvVarContainer()>
c00171be:	59                   	pop    ecx
c00171bf:	5e                   	pop    esi
c00171c0:	6a 0c                	push   0xc
c00171c2:	55                   	push   ebp
c00171c3:	e8 f4 60 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c00171c8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00171cb:	83 c4 10             	add    esp,0x10
c00171ce:	89 f7                	mov    edi,esi
c00171d0:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00171d6:	85 c0                	test   eax,eax
c00171d8:	0f 84 ae 00 00 00    	je     c001728c <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c00171de:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00171e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00171e5:	31 c9                	xor    ecx,ecx
c00171e7:	eb 17                	jmp    c0017200 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00171e9:	8d 76 00             	lea    esi,[esi+0x0]
c00171ec:	83 c1 01             	add    ecx,0x1
c00171ef:	83 f9 10             	cmp    ecx,0x10
c00171f2:	0f 84 94 00 00 00    	je     c001728c <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c00171f8:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00171fe:	66 90                	xchg   ax,ax
c0017200:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0017207:	d3 fa                	sar    edx,cl
c0017209:	80 e2 01             	and    dl,0x1
c001720c:	74 de                	je     c00171ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001720e:	6b d1 73             	imul   edx,ecx,0x73
c0017211:	01 d0                	add    eax,edx
c0017213:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017219:	83 fd 07             	cmp    ebp,0x7
c001721c:	75 ce                	jne    c00171ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001721e:	05 40 02 00 00       	add    eax,0x240
c0017223:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017226:	83 fd ff             	cmp    ebp,0xffffffff
c0017229:	0f 8c f1 00 00 00    	jl     c0017320 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c001722f:	0f 84 af 01 00 00    	je     c00173e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c0017235:	85 ed                	test   ebp,ebp
c0017237:	0f 84 93 01 00 00    	je     c00173d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c001723d:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001723f:	75 ab                	jne    c00171ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017241:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017245:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001724b:	01 d0                	add    eax,edx
c001724d:	8d 76 00             	lea    esi,[esi+0x0]
c0017250:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017254:	83 ec 0c             	sub    esp,0xc
c0017257:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001725d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017260:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017266:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001726d:	50                   	push   eax
c001726e:	e8 09 fe ff ff       	call   c001707c <unblockTask(ThreadControlBlock*)>
c0017273:	83 c4 10             	add    esp,0x10
c0017276:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017279:	89 f7                	mov    edi,esi
c001727b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001727f:	83 c1 01             	add    ecx,0x1
c0017282:	83 f9 10             	cmp    ecx,0x10
c0017285:	0f 85 6d ff ff ff    	jne    c00171f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001728b:	90                   	nop
c001728c:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c0017292:	85 c0                	test   eax,eax
c0017294:	74 62                	je     c00172f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0017296:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c001729c:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c00172a2:	74 54                	je     c00172f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c00172a4:	83 ec 0c             	sub    esp,0xc
c00172a7:	68 8c ca 02 c0       	push   0xc002ca8c
c00172ac:	e8 77 aa 00 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00172b1:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c00172b8:	89 c7                	mov    edi,eax
c00172ba:	e8 4d aa 00 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00172bf:	83 c4 10             	add    esp,0x10
c00172c2:	84 c0                	test   al,al
c00172c4:	0f 84 ce 00 00 00    	je     c0017398 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c00172ca:	66 90                	xchg   ax,ax
c00172cc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172cf:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00172d5:	85 d2                	test   edx,edx
c00172d7:	74 0f                	je     c00172e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c00172d9:	8b 02                	mov    eax,DWORD PTR [edx]
c00172db:	83 ec 0c             	sub    esp,0xc
c00172de:	52                   	push   edx
c00172df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00172e2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172e5:	83 c4 10             	add    esp,0x10
c00172e8:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c00172f2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00172f5:	8d 76 00             	lea    esi,[esi+0x0]
c00172f8:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c00172fe:	85 db                	test   ebx,ebx
c0017300:	74 16                	je     c0017318 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017302:	83 ec 0c             	sub    esp,0xc
c0017305:	53                   	push   ebx
c0017306:	e8 41 c4 ff ff       	call   c001374c <VAS::~VAS()>
c001730b:	58                   	pop    eax
c001730c:	5a                   	pop    edx
c001730d:	6a 14                	push   0x14
c001730f:	53                   	push   ebx
c0017310:	e8 a7 5f ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0017315:	83 c4 10             	add    esp,0x10
c0017318:	83 c4 1c             	add    esp,0x1c
c001731b:	5b                   	pop    ebx
c001731c:	5e                   	pop    esi
c001731d:	5f                   	pop    edi
c001731e:	5d                   	pop    ebp
c001731f:	c3                   	ret    
c0017320:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017324:	83 ec 0c             	sub    esp,0xc
c0017327:	68 08 4e 02 c0       	push   0xc0024e08
c001732c:	e8 b3 88 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0017331:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017334:	83 c4 10             	add    esp,0x10
c0017337:	89 f7                	mov    edi,esi
c0017339:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001733d:	e9 aa fe ff ff       	jmp    c00171ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017342:	66 90                	xchg   ax,ax
c0017344:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001734a:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017350:	75 1e                	jne    c0017370 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017352:	83 ec 0c             	sub    esp,0xc
c0017355:	68 70 4e 02 c0       	push   0xc0024e70
c001735a:	e8 07 fc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001735f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017366:	e8 79 fa ff ff       	call   c0016de4 <blockTask(TaskState)>
c001736b:	83 c4 10             	add    esp,0x10
c001736e:	66 90                	xchg   ax,ax
c0017370:	83 ec 08             	sub    esp,0x8
c0017373:	56                   	push   esi
c0017374:	68 8c ca 02 c0       	push   0xc002ca8c
c0017379:	e8 6e aa 00 00       	call   c0021dec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001737e:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c0017385:	e8 9e a9 00 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001738a:	83 c4 10             	add    esp,0x10
c001738d:	39 f8                	cmp    eax,edi
c001738f:	0f 84 37 ff ff ff    	je     c00172cc <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c0017395:	8d 76 00             	lea    esi,[esi+0x0]
c0017398:	83 ec 0c             	sub    esp,0xc
c001739b:	68 8c ca 02 c0       	push   0xc002ca8c
c00173a0:	e8 83 a9 00 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173a5:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c00173ac:	89 c6                	mov    esi,eax
c00173ae:	e8 7d a9 00 00       	call   c0021d30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00173b3:	83 c4 10             	add    esp,0x10
c00173b6:	39 f3                	cmp    ebx,esi
c00173b8:	74 b6                	je     c0017370 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00173ba:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00173bd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173c0:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c00173c6:	75 a8                	jne    c0017370 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00173c8:	e9 77 ff ff ff       	jmp    c0017344 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c00173cd:	8d 76 00             	lea    esi,[esi+0x0]
c00173d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00173d4:	83 ec 0c             	sub    esp,0xc
c00173d7:	68 3c 4e 02 c0       	push   0xc0024e3c
c00173dc:	e9 4b ff ff ff       	jmp    c001732c <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c00173e1:	8d 76 00             	lea    esi,[esi+0x0]
c00173e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00173e8:	8b 36                	mov    esi,DWORD PTR [esi]
c00173ea:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00173ed:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173f0:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c00173f6:	01 d7                	add    edi,edx
c00173f8:	89 f8                	mov    eax,edi
c00173fa:	e9 51 fe ff ff       	jmp    c0017250 <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c00173ff:	90                   	nop

c0017400 <cleanerTaskFunction(void*)>:
c0017400:	53                   	push   ebx
c0017401:	83 ec 08             	sub    esp,0x8
c0017404:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001740c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017411:	85 c0                	test   eax,eax
c0017413:	75 03                	jne    c0017418 <cleanerTaskFunction(void*)+0x18>
c0017415:	fb                   	sti    
c0017416:	66 90                	xchg   ax,ax
c0017418:	fa                   	cli    
c0017419:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001741e:	83 c0 01             	add    eax,0x1
c0017421:	80 3d 54 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca54,0x0
c0017428:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c001742d:	0f 85 c9 00 00 00    	jne    c00174fc <cleanerTaskFunction(void*)+0xfc>
c0017433:	83 ec 0c             	sub    esp,0xc
c0017436:	6a 02                	push   0x2
c0017438:	e8 7b f9 ff ff       	call   c0016db8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001743d:	83 c4 10             	add    esp,0x10
c0017440:	c6 05 54 ca 02 c0 00 	mov    BYTE PTR ds:0xc002ca54,0x0
c0017447:	fa                   	cli    
c0017448:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c001744e:	8b 1d 6c ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca6c
c0017454:	83 c1 01             	add    ecx,0x1
c0017457:	89 0d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ecx
c001745d:	83 c3 01             	add    ebx,0x1
c0017460:	89 1d 6c ca 02 c0    	mov    DWORD PTR ds:0xc002ca6c,ebx
c0017466:	fa                   	cli    
c0017467:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001746c:	83 c0 01             	add    eax,0x1
c001746f:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017474:	eb 2a                	jmp    c00174a0 <cleanerTaskFunction(void*)+0xa0>
c0017476:	66 90                	xchg   ax,ax
c0017478:	83 ec 0c             	sub    esp,0xc
c001747b:	68 74 ca 02 c0       	push   0xc002ca74
c0017480:	e8 a3 a8 00 00       	call   c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017485:	c7 04 24 74 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca74
c001748c:	89 c3                	mov    ebx,eax
c001748e:	e8 9d a8 00 00       	call   c0021d30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017493:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017496:	e8 95 fc ff ff       	call   c0017130 <cleanupTerminatedTask(ThreadControlBlock*)>
c001749b:	83 c4 10             	add    esp,0x10
c001749e:	66 90                	xchg   ax,ax
c00174a0:	83 ec 0c             	sub    esp,0xc
c00174a3:	68 74 ca 02 c0       	push   0xc002ca74
c00174a8:	e8 5f a8 00 00       	call   c0021d0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00174ad:	83 c4 10             	add    esp,0x10
c00174b0:	84 c0                	test   al,al
c00174b2:	74 c4                	je     c0017478 <cleanerTaskFunction(void*)+0x78>
c00174b4:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00174bc:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c00174c2:	85 d2                	test   edx,edx
c00174c4:	75 02                	jne    c00174c8 <cleanerTaskFunction(void*)+0xc8>
c00174c6:	fb                   	sti    
c00174c7:	90                   	nop
c00174c8:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00174cd:	83 e8 01             	sub    eax,0x1
c00174d0:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c00174d5:	0f 85 29 ff ff ff    	jne    c0017404 <cleanerTaskFunction(void*)+0x4>
c00174db:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c00174e0:	85 c0                	test   eax,eax
c00174e2:	0f 84 1c ff ff ff    	je     c0017404 <cleanerTaskFunction(void*)+0x4>
c00174e8:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c00174f2:	e8 2d f8 ff ff       	call   c0016d24 <schedule()>
c00174f7:	e9 08 ff ff ff       	jmp    c0017404 <cleanerTaskFunction(void*)+0x4>
c00174fc:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017504:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017509:	85 c0                	test   eax,eax
c001750b:	0f 85 2f ff ff ff    	jne    c0017440 <cleanerTaskFunction(void*)+0x40>
c0017511:	fb                   	sti    
c0017512:	e9 29 ff ff ff       	jmp    c0017440 <cleanerTaskFunction(void*)+0x40>
c0017517:	90                   	nop

c0017518 <KeTerminateCurrentThread(int)>:
c0017518:	83 ec 14             	sub    esp,0x14
c001751b:	fa                   	cli    
c001751c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017521:	83 c0 01             	add    eax,0x1
c0017524:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017529:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c001752e:	83 c0 01             	add    eax,0x1
c0017531:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0017536:	fa                   	cli    
c0017537:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001753c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017540:	83 c0 01             	add    eax,0x1
c0017543:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017548:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001754d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017550:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017555:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017558:	50                   	push   eax
c0017559:	68 74 ca 02 c0       	push   0xc002ca74
c001755e:	e8 89 a8 00 00       	call   c0021dec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017563:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017568:	83 c4 10             	add    esp,0x10
c001756b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017572:	a1 50 ca 02 c0       	mov    eax,ds:0xc002ca50
c0017577:	85 c0                	test   eax,eax
c0017579:	0f 84 81 00 00 00    	je     c0017600 <KeTerminateCurrentThread(int)+0xe8>
c001757f:	c6 05 54 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca54,0x1
c0017586:	83 ec 0c             	sub    esp,0xc
c0017589:	50                   	push   eax
c001758a:	e8 ed fa ff ff       	call   c001707c <unblockTask(ThreadControlBlock*)>
c001758f:	83 c4 10             	add    esp,0x10
c0017592:	66 90                	xchg   ax,ax
c0017594:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001759c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00175a1:	85 c0                	test   eax,eax
c00175a3:	75 03                	jne    c00175a8 <KeTerminateCurrentThread(int)+0x90>
c00175a5:	fb                   	sti    
c00175a6:	66 90                	xchg   ax,ax
c00175a8:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00175ad:	83 e8 01             	sub    eax,0x1
c00175b0:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c00175b5:	75 09                	jne    c00175c0 <KeTerminateCurrentThread(int)+0xa8>
c00175b7:	83 3d 68 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca68,0x0
c00175be:	75 54                	jne    c0017614 <KeTerminateCurrentThread(int)+0xfc>
c00175c0:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00175c8:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c00175ce:	85 c9                	test   ecx,ecx
c00175d0:	75 06                	jne    c00175d8 <KeTerminateCurrentThread(int)+0xc0>
c00175d2:	66 90                	xchg   ax,ax
c00175d4:	fb                   	sti    
c00175d5:	8d 76 00             	lea    esi,[esi+0x0]
c00175d8:	fa                   	cli    
c00175d9:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00175de:	83 c0 01             	add    eax,0x1
c00175e1:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c00175e6:	e8 39 f7 ff ff       	call   c0016d24 <schedule()>
c00175eb:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00175f3:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c00175f9:	85 d2                	test   edx,edx
c00175fb:	75 db                	jne    c00175d8 <KeTerminateCurrentThread(int)+0xc0>
c00175fd:	eb d5                	jmp    c00175d4 <KeTerminateCurrentThread(int)+0xbc>
c00175ff:	90                   	nop
c0017600:	83 ec 0c             	sub    esp,0xc
c0017603:	68 80 4d 02 c0       	push   0xc0024d80
c0017608:	e8 59 f9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001760d:	83 c4 10             	add    esp,0x10
c0017610:	eb 82                	jmp    c0017594 <KeTerminateCurrentThread(int)+0x7c>
c0017612:	66 90                	xchg   ax,ax
c0017614:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c001761e:	e8 01 f7 ff ff       	call   c0016d24 <schedule()>
c0017623:	eb 9b                	jmp    c00175c0 <KeTerminateCurrentThread(int)+0xa8>
c0017625:	8d 76 00             	lea    esi,[esi+0x0]

c0017628 <__static_initialization_and_destruction_0(int, int)>:
c0017628:	83 ec 0c             	sub    esp,0xc
c001762b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017630:	0f 85 8e 00 00 00    	jne    c00176c4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017636:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001763e:	0f 85 80 00 00 00    	jne    c00176c4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017644:	83 ec 0c             	sub    esp,0xc
c0017647:	68 8c ca 02 c0       	push   0xc002ca8c
c001764c:	e8 3b ac 00 00       	call   c002228c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017651:	83 c4 10             	add    esp,0x10
c0017654:	83 ec 04             	sub    esp,0x4
c0017657:	68 88 61 02 c0       	push   0xc0026188
c001765c:	68 8c ca 02 c0       	push   0xc002ca8c
c0017661:	68 3c 22 02 c0       	push   0xc002223c
c0017666:	e8 01 5c ff ff       	call   c000d26c <__cxa_atexit>
c001766b:	83 c4 10             	add    esp,0x10
c001766e:	83 ec 0c             	sub    esp,0xc
c0017671:	68 80 ca 02 c0       	push   0xc002ca80
c0017676:	e8 11 ac 00 00       	call   c002228c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001767b:	83 c4 10             	add    esp,0x10
c001767e:	83 ec 04             	sub    esp,0x4
c0017681:	68 88 61 02 c0       	push   0xc0026188
c0017686:	68 80 ca 02 c0       	push   0xc002ca80
c001768b:	68 3c 22 02 c0       	push   0xc002223c
c0017690:	e8 d7 5b ff ff       	call   c000d26c <__cxa_atexit>
c0017695:	83 c4 10             	add    esp,0x10
c0017698:	83 ec 0c             	sub    esp,0xc
c001769b:	68 74 ca 02 c0       	push   0xc002ca74
c00176a0:	e8 e7 ab 00 00       	call   c002228c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	83 ec 04             	sub    esp,0x4
c00176ab:	68 88 61 02 c0       	push   0xc0026188
c00176b0:	68 74 ca 02 c0       	push   0xc002ca74
c00176b5:	68 3c 22 02 c0       	push   0xc002223c
c00176ba:	e8 ad 5b ff ff       	call   c000d26c <__cxa_atexit>
c00176bf:	83 c4 10             	add    esp,0x10
c00176c2:	66 90                	xchg   ax,ax
c00176c4:	90                   	nop
c00176c5:	83 c4 0c             	add    esp,0xc
c00176c8:	c3                   	ret    
c00176c9:	8d 76 00             	lea    esi,[esi+0x0]

c00176cc <_GLOBAL__sub_I_keNextPID>:
c00176cc:	83 ec 0c             	sub    esp,0xc
c00176cf:	83 ec 08             	sub    esp,0x8
c00176d2:	68 ff ff 00 00       	push   0xffff
c00176d7:	6a 01                	push   0x1
c00176d9:	e8 4a ff ff ff       	call   c0017628 <__static_initialization_and_destruction_0(int, int)>
c00176de:	83 c4 10             	add    esp,0x10
c00176e1:	83 c4 0c             	add    esp,0xc
c00176e4:	c3                   	ret    

c00176e5 <Vm::inbv(unsigned short)>:
c00176e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00176e9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00176ee:	74 02                	je     c00176f2 <Vm::inbv(unsigned short)+0xd>
c00176f0:	ec                   	in     al,dx
c00176f1:	c3                   	ret    
c00176f2:	a0 d0 ca 02 c0       	mov    al,ds:0xc002cad0
c00176f7:	c3                   	ret    

c00176f8 <Vm::outbv(unsigned short, unsigned char)>:
c00176f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00176fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017700:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017705:	74 02                	je     c0017709 <Vm::outbv(unsigned short, unsigned char)+0x11>
c0017707:	ee                   	out    dx,al
c0017708:	c3                   	ret    
c0017709:	8b 0d d0 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002cad0
c001770f:	88 81 e0 ca 02 c0    	mov    BYTE PTR [ecx-0x3ffd3520],al
c0017715:	8d 51 01             	lea    edx,[ecx+0x1]
c0017718:	b8 1f 00 00 00       	mov    eax,0x1f
c001771d:	83 fa 20             	cmp    edx,0x20
c0017720:	0f 44 d0             	cmove  edx,eax
c0017723:	89 15 d0 ca 02 c0    	mov    DWORD PTR ds:0xc002cad0,edx
c0017729:	c3                   	ret    

c001772a <Vm::realToLinear(unsigned short, unsigned short)>:
c001772a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001772f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017734:	c1 e0 04             	shl    eax,0x4
c0017737:	01 d0                	add    eax,edx
c0017739:	c3                   	ret    

c001773a <Vm::getSegment(unsigned int)>:
c001773a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001773e:	c1 e8 10             	shr    eax,0x10
c0017741:	c3                   	ret    

c0017742 <Vm::getOffset(unsigned int)>:
c0017742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017746:	c3                   	ret    

c0017747 <Vm::mainloop2()>:
c0017747:	83 ec 18             	sub    esp,0x18
c001774a:	fa                   	cli    
c001774b:	6a 02                	push   0x2
c001774d:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017752:	c6 05 c9 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac9,0x1
c0017759:	83 c0 01             	add    eax,0x1
c001775c:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017761:	e8 52 f6 ff ff       	call   c0016db8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017766:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001776b:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001776f:	52                   	push   edx
c0017770:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017774:	52                   	push   edx
c0017775:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017779:	52                   	push   edx
c001777a:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001777e:	50                   	push   eax
c001777f:	e8 8b 8a fe ff       	call   c000020f <goToVM86>
c0017784:	83 c4 2c             	add    esp,0x2c
c0017787:	c3                   	ret    

c0017788 <Vm::mainVm8086Loop(void*)>:
c0017788:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017790:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017795:	85 c0                	test   eax,eax
c0017797:	75 01                	jne    c001779a <Vm::mainVm8086Loop(void*)+0x12>
c0017799:	fb                   	sti    
c001779a:	eb ab                	jmp    c0017747 <Vm::mainloop2()>

c001779c <Vm::mainloop3(unsigned long)>:
c001779c:	83 ec 18             	sub    esp,0x18
c001779f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00177a3:	fa                   	cli    
c00177a4:	6a 02                	push   0x2
c00177a6:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c00177ac:	c6 05 c8 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac8,0x1
c00177b3:	a3 c4 ca 02 c0       	mov    ds:0xc002cac4,eax
c00177b8:	83 c2 01             	add    edx,0x1
c00177bb:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c00177c1:	e8 f2 f5 ff ff       	call   c0016db8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00177c6:	83 c4 1c             	add    esp,0x1c
c00177c9:	e9 79 ff ff ff       	jmp    c0017747 <Vm::mainloop2()>

c00177ce <Vm::initialise8086()>:
c00177ce:	83 ec 0c             	sub    esp,0xc
c00177d1:	68 80 00 00 00       	push   0x80
c00177d6:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c00177db:	6a 00                	push   0x0
c00177dd:	68 88 77 01 c0       	push   0xc0017788
c00177e2:	50                   	push   eax
c00177e3:	e8 94 f2 ff ff       	call   c0016a7c <Process::createThread(void (*)(void*), void*, int)>
c00177e8:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00177ef:	68 10 01 00 00       	push   0x110
c00177f4:	6a 00                	push   0x0
c00177f6:	6a 00                	push   0x0
c00177f8:	a3 cc ca 02 c0       	mov    ds:0xc002cacc,eax
c00177fd:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0017802:	8b 90 b2 05 00 00    	mov    edx,DWORD PTR [eax+0x5b2]
c0017808:	52                   	push   edx
c0017809:	e8 a0 c2 ff ff       	call   c0013aae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001780e:	83 c4 2c             	add    esp,0x2c
c0017811:	c3                   	ret    

c0017812 <Vm::resetConventionalMemory8086()>:
c0017812:	c3                   	ret    

c0017813 <Vm::finish8086()>:
c0017813:	53                   	push   ebx
c0017814:	83 ec 08             	sub    esp,0x8
c0017817:	eb 17                	jmp    c0017830 <Vm::finish8086()+0x1d>
c0017819:	e8 06 f5 ff ff       	call   c0016d24 <schedule()>
c001781e:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017826:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c001782c:	85 c9                	test   ecx,ecx
c001782e:	74 51                	je     c0017881 <Vm::finish8086()+0x6e>
c0017830:	fa                   	cli    
c0017831:	8b 1d 70 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca70
c0017837:	83 c3 01             	add    ebx,0x1
c001783a:	80 3d c8 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac8,0x0
c0017841:	89 1d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ebx
c0017847:	74 d0                	je     c0017819 <Vm::finish8086()+0x6>
c0017849:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c001784e:	83 ec 0c             	sub    esp,0xc
c0017851:	c6 05 c8 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac8,0x0
c0017858:	8b 1d c4 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002cac4
c001785e:	50                   	push   eax
c001785f:	e8 18 f8 ff ff       	call   c001707c <unblockTask(ThreadControlBlock*)>
c0017864:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001786c:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0017872:	83 c4 10             	add    esp,0x10
c0017875:	85 d2                	test   edx,edx
c0017877:	75 01                	jne    c001787a <Vm::finish8086()+0x67>
c0017879:	fb                   	sti    
c001787a:	83 c4 08             	add    esp,0x8
c001787d:	89 d8                	mov    eax,ebx
c001787f:	5b                   	pop    ebx
c0017880:	c3                   	ret    
c0017881:	fb                   	sti    
c0017882:	eb ac                	jmp    c0017830 <Vm::finish8086()+0x1d>

c0017884 <Vm::getOutput8086(unsigned char*)>:
c0017884:	57                   	push   edi
c0017885:	8b 0d d0 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002cad0
c001788b:	56                   	push   esi
c001788c:	be e0 ca 02 c0       	mov    esi,0xc002cae0
c0017891:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017895:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017897:	5e                   	pop    esi
c0017898:	a1 d0 ca 02 c0       	mov    eax,ds:0xc002cad0
c001789d:	c7 05 d0 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x0
c00178a7:	5f                   	pop    edi
c00178a8:	c3                   	ret    

c00178a9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00178a9:	55                   	push   ebp
c00178aa:	57                   	push   edi
c00178ab:	56                   	push   esi
c00178ac:	53                   	push   ebx
c00178ad:	83 ec 2c             	sub    esp,0x2c
c00178b0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00178b4:	80 3d c0 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac0,0x0
c00178bb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00178bf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00178c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178c7:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00178cb:	75 20                	jne    c00178ed <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c00178cd:	e9 c0 00 00 00       	jmp    c0017992 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe9>
c00178d2:	e8 4d f4 ff ff       	call   c0016d24 <schedule()>
c00178d7:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00178df:	8b 3d 70 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca70
c00178e5:	85 ff                	test   edi,edi
c00178e7:	0f 84 9f 00 00 00    	je     c001798c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe3>
c00178ed:	fa                   	cli    
c00178ee:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00178f3:	83 c0 01             	add    eax,0x1
c00178f6:	80 3d c9 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac9,0x0
c00178fd:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017902:	74 ce                	je     c00178d2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x29>
c0017904:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017908:	83 ec 04             	sub    esp,0x4
c001790b:	c7 05 d0 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x0
c0017915:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c001791a:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001791e:	0f b7 f6             	movzx  esi,si
c0017921:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017925:	0f b7 db             	movzx  ebx,bx
c0017928:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001792c:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017930:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017934:	6a 20                	push   0x20
c0017936:	6a 00                	push   0x0
c0017938:	68 e0 ca 02 c0       	push   0xc002cae0
c001793d:	e8 ae 8b fe ff       	call   c00004f0 <memset>
c0017942:	5a                   	pop    edx
c0017943:	59                   	pop    ecx
c0017944:	56                   	push   esi
c0017945:	53                   	push   ebx
c0017946:	e8 df fd ff ff       	call   c001772a <Vm::realToLinear(unsigned short, unsigned short)>
c001794b:	83 c4 10             	add    esp,0x10
c001794e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017952:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017956:	89 c7                	mov    edi,eax
c0017958:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001795a:	c6 05 c9 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac9,0x0
c0017961:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017969:	8b 1d 70 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca70
c001796f:	85 db                	test   ebx,ebx
c0017971:	75 01                	jne    c0017974 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xcb>
c0017973:	fb                   	sti    
c0017974:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017979:	83 ec 0c             	sub    esp,0xc
c001797c:	50                   	push   eax
c001797d:	e8 fa f6 ff ff       	call   c001707c <unblockTask(ThreadControlBlock*)>
c0017982:	83 c4 3c             	add    esp,0x3c
c0017985:	b0 01                	mov    al,0x1
c0017987:	5b                   	pop    ebx
c0017988:	5e                   	pop    esi
c0017989:	5f                   	pop    edi
c001798a:	5d                   	pop    ebp
c001798b:	c3                   	ret    
c001798c:	fb                   	sti    
c001798d:	e9 5b ff ff ff       	jmp    c00178ed <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c0017992:	83 ec 0c             	sub    esp,0xc
c0017995:	68 14 01 00 00       	push   0x114
c001799a:	e8 e9 7d ff ff       	call   c000f788 <malloc>
c001799f:	83 c4 0c             	add    esp,0xc
c00179a2:	89 c7                	mov    edi,eax
c00179a4:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c00179a9:	50                   	push   eax
c00179aa:	68 98 4e 02 c0       	push   0xc0024e98
c00179af:	57                   	push   edi
c00179b0:	e8 d3 07 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00179b5:	58                   	pop    eax
c00179b6:	5a                   	pop    edx
c00179b7:	6a 12                	push   0x12
c00179b9:	57                   	push   edi
c00179ba:	e8 e7 07 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c00179bf:	8b 07                	mov    eax,DWORD PTR [edi]
c00179c1:	59                   	pop    ecx
c00179c2:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00179c6:	51                   	push   ecx
c00179c7:	6a 00                	push   0x0
c00179c9:	6a 00                	push   0x0
c00179cb:	68 00 00 11 00       	push   0x110000
c00179d0:	57                   	push   edi
c00179d1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00179d4:	83 c4 14             	add    esp,0x14
c00179d7:	57                   	push   edi
c00179d8:	e8 27 08 ff ff       	call   c0008204 <File::close()>
c00179dd:	8b 07                	mov    eax,DWORD PTR [edi]
c00179df:	89 3c 24             	mov    DWORD PTR [esp],edi
c00179e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00179e5:	83 c4 10             	add    esp,0x10
c00179e8:	c6 05 c0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac0,0x1
c00179ef:	e9 f9 fe ff ff       	jmp    c00178ed <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>

c00179f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00179f4:	55                   	push   ebp
c00179f5:	57                   	push   edi
c00179f6:	56                   	push   esi
c00179f7:	53                   	push   ebx
c00179f8:	83 ec 2c             	sub    esp,0x2c
c00179fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00179ff:	80 3d c0 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac0,0x0
c0017a06:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0017a0a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017a0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a12:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0017a16:	0f 84 5a 01 00 00    	je     c0017b76 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x182>
c0017a1c:	83 ec 08             	sub    esp,0x8
c0017a1f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0017a23:	51                   	push   ecx
c0017a24:	68 fc 4e 02 c0       	push   0xc0024efc
c0017a29:	e8 38 f5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017a2e:	83 c4 10             	add    esp,0x10
c0017a31:	eb 1a                	jmp    c0017a4d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017a33:	e8 ec f2 ff ff       	call   c0016d24 <schedule()>
c0017a38:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017a40:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017a45:	85 c0                	test   eax,eax
c0017a47:	0f 84 23 01 00 00    	je     c0017b70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17c>
c0017a4d:	fa                   	cli    
c0017a4e:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0017a54:	8a 1d c9 ca 02 c0    	mov    bl,BYTE PTR ds:0xc002cac9
c0017a5a:	83 c2 01             	add    edx,0x1
c0017a5d:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c0017a63:	84 db                	test   bl,bl
c0017a65:	74 cc                	je     c0017a33 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017a67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a6b:	83 ec 04             	sub    esp,0x4
c0017a6e:	c7 05 d0 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x0
c0017a78:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017a7d:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017a81:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017a85:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017a89:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017a8d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017a91:	6a 20                	push   0x20
c0017a93:	6a 00                	push   0x0
c0017a95:	68 e0 ca 02 c0       	push   0xc002cae0
c0017a9a:	e8 51 8a fe ff       	call   c00004f0 <memset>
c0017a9f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017aa6:	e8 dd 7c ff ff       	call   c000f788 <malloc>
c0017aab:	83 c4 0c             	add    esp,0xc
c0017aae:	89 c7                	mov    edi,eax
c0017ab0:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0017ab5:	50                   	push   eax
c0017ab6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017aba:	50                   	push   eax
c0017abb:	57                   	push   edi
c0017abc:	e8 c7 06 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0017ac1:	83 c4 10             	add    esp,0x10
c0017ac4:	85 ff                	test   edi,edi
c0017ac6:	0f 84 63 01 00 00    	je     c0017c2f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x23b>
c0017acc:	83 ec 04             	sub    esp,0x4
c0017acf:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017ad3:	50                   	push   eax
c0017ad4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017ad8:	50                   	push   eax
c0017ad9:	57                   	push   edi
c0017ada:	e8 c9 09 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0017adf:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c0017ae4:	83 c4 10             	add    esp,0x10
c0017ae7:	89 e8                	mov    eax,ebp
c0017ae9:	84 c0                	test   al,al
c0017aeb:	0f 85 e7 00 00 00    	jne    c0017bd8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1e4>
c0017af1:	83 ec 08             	sub    esp,0x8
c0017af4:	6a 01                	push   0x1
c0017af6:	57                   	push   edi
c0017af7:	e8 aa 06 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0017afc:	83 c4 10             	add    esp,0x10
c0017aff:	85 c0                	test   eax,eax
c0017b01:	0f 85 ff 00 00 00    	jne    c0017c06 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x212>
c0017b07:	83 ec 08             	sub    esp,0x8
c0017b0a:	0f b7 f6             	movzx  esi,si
c0017b0d:	56                   	push   esi
c0017b0e:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0017b13:	50                   	push   eax
c0017b14:	e8 11 fc ff ff       	call   c001772a <Vm::realToLinear(unsigned short, unsigned short)>
c0017b19:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017b1b:	5a                   	pop    edx
c0017b1c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0017b20:	52                   	push   edx
c0017b21:	50                   	push   eax
c0017b22:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017b26:	56                   	push   esi
c0017b27:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017b2b:	55                   	push   ebp
c0017b2c:	57                   	push   edi
c0017b2d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b30:	83 c4 14             	add    esp,0x14
c0017b33:	57                   	push   edi
c0017b34:	e8 cb 06 ff ff       	call   c0008204 <File::close()>
c0017b39:	c6 05 c9 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac9,0x0
c0017b40:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017b48:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017b4d:	83 c4 10             	add    esp,0x10
c0017b50:	85 c0                	test   eax,eax
c0017b52:	75 01                	jne    c0017b55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x161>
c0017b54:	fb                   	sti    
c0017b55:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017b5a:	83 ec 0c             	sub    esp,0xc
c0017b5d:	50                   	push   eax
c0017b5e:	e8 19 f5 ff ff       	call   c001707c <unblockTask(ThreadControlBlock*)>
c0017b63:	83 c4 10             	add    esp,0x10
c0017b66:	83 c4 2c             	add    esp,0x2c
c0017b69:	88 d8                	mov    al,bl
c0017b6b:	5b                   	pop    ebx
c0017b6c:	5e                   	pop    esi
c0017b6d:	5f                   	pop    edi
c0017b6e:	5d                   	pop    ebp
c0017b6f:	c3                   	ret    
c0017b70:	fb                   	sti    
c0017b71:	e9 d7 fe ff ff       	jmp    c0017a4d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017b76:	83 ec 0c             	sub    esp,0xc
c0017b79:	68 14 01 00 00       	push   0x114
c0017b7e:	e8 05 7c ff ff       	call   c000f788 <malloc>
c0017b83:	83 c4 0c             	add    esp,0xc
c0017b86:	89 c3                	mov    ebx,eax
c0017b88:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0017b8d:	50                   	push   eax
c0017b8e:	68 98 4e 02 c0       	push   0xc0024e98
c0017b93:	53                   	push   ebx
c0017b94:	e8 ef 05 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0017b99:	58                   	pop    eax
c0017b9a:	5a                   	pop    edx
c0017b9b:	6a 12                	push   0x12
c0017b9d:	53                   	push   ebx
c0017b9e:	e8 03 06 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0017ba3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ba5:	59                   	pop    ecx
c0017ba6:	8d 4c 24 24          	lea    ecx,[esp+0x24]
c0017baa:	51                   	push   ecx
c0017bab:	6a 00                	push   0x0
c0017bad:	6a 00                	push   0x0
c0017baf:	68 00 00 11 00       	push   0x110000
c0017bb4:	53                   	push   ebx
c0017bb5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017bb8:	83 c4 14             	add    esp,0x14
c0017bbb:	53                   	push   ebx
c0017bbc:	e8 43 06 ff ff       	call   c0008204 <File::close()>
c0017bc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017bc6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017bc9:	83 c4 10             	add    esp,0x10
c0017bcc:	c6 05 c0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac0,0x1
c0017bd3:	e9 44 fe ff ff       	jmp    c0017a1c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x28>
c0017bd8:	83 ec 0c             	sub    esp,0xc
c0017bdb:	68 c7 4e 02 c0       	push   0xc0024ec7
c0017be0:	e8 ff 7f ff ff       	call   c000fbe4 <KePanic(char const*)>
c0017be5:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017bed:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017bf2:	83 c4 10             	add    esp,0x10
c0017bf5:	85 c0                	test   eax,eax
c0017bf7:	75 01                	jne    c0017bfa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x206>
c0017bf9:	fb                   	sti    
c0017bfa:	83 c4 2c             	add    esp,0x2c
c0017bfd:	31 db                	xor    ebx,ebx
c0017bff:	88 d8                	mov    al,bl
c0017c01:	5b                   	pop    ebx
c0017c02:	5e                   	pop    esi
c0017c03:	5f                   	pop    edi
c0017c04:	5d                   	pop    ebp
c0017c05:	c3                   	ret    
c0017c06:	83 ec 0c             	sub    esp,0xc
c0017c09:	68 e0 4e 02 c0       	push   0xc0024ee0
c0017c0e:	e8 d1 7f ff ff       	call   c000fbe4 <KePanic(char const*)>
c0017c13:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017c1b:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017c20:	83 c4 10             	add    esp,0x10
c0017c23:	85 c0                	test   eax,eax
c0017c25:	75 d3                	jne    c0017bfa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x206>
c0017c27:	fb                   	sti    
c0017c28:	89 eb                	mov    ebx,ebp
c0017c2a:	e9 37 ff ff ff       	jmp    c0017b66 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x172>
c0017c2f:	83 ec 0c             	sub    esp,0xc
c0017c32:	68 b3 4e 02 c0       	push   0xc0024eb3
c0017c37:	eb a7                	jmp    c0017be0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ec>

c0017c39 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017c39:	57                   	push   edi
c0017c3a:	56                   	push   esi
c0017c3b:	53                   	push   ebx
c0017c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017c44:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017c48:	83 e8 06             	sub    eax,0x6
c0017c4b:	0f b7 c0             	movzx  eax,ax
c0017c4e:	50                   	push   eax
c0017c4f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017c54:	50                   	push   eax
c0017c55:	e8 d0 fa ff ff       	call   c001772a <Vm::realToLinear(unsigned short, unsigned short)>
c0017c5a:	5a                   	pop    edx
c0017c5b:	5e                   	pop    esi
c0017c5c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0017c5f:	8d 56 fa             	lea    edx,[esi-0x6]
c0017c62:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0017c65:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017c6b:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0017c6e:	8d 56 02             	lea    edx,[esi+0x2]
c0017c71:	66 89 10             	mov    WORD PTR [eax],dx
c0017c74:	66 8b 51 3c          	mov    dx,WORD PTR [ecx+0x3c]
c0017c78:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017c7c:	66 8b 79 40          	mov    di,WORD PTR [ecx+0x40]
c0017c80:	8b 71 40             	mov    esi,DWORD PTR [ecx+0x40]
c0017c83:	66 89 78 04          	mov    WORD PTR [eax+0x4],di
c0017c87:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0017c8d:	89 f2                	mov    edx,esi
c0017c8f:	0f b6 d6             	movzx  edx,dh
c0017c92:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0017c96:	89 d7                	mov    edi,edx
c0017c98:	74 36                	je     c0017cd0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x97>
c0017c9a:	c1 e7 08             	shl    edi,0x8
c0017c9d:	89 f2                	mov    edx,esi
c0017c9f:	0f b6 f2             	movzx  esi,dl
c0017ca2:	09 f7                	or     edi,esi
c0017ca4:	89 fa                	mov    edx,edi
c0017ca6:	80 ce 02             	or     dh,0x2
c0017ca9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017cad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017cb2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017cb6:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0017cbe:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0017cc1:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0017cc9:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0017ccc:	5b                   	pop    ebx
c0017ccd:	5e                   	pop    esi
c0017cce:	5f                   	pop    edi
c0017ccf:	c3                   	ret    
c0017cd0:	c1 e7 08             	shl    edi,0x8
c0017cd3:	89 f2                	mov    edx,esi
c0017cd5:	0f b6 f2             	movzx  esi,dl
c0017cd8:	09 f7                	or     edi,esi
c0017cda:	89 fa                	mov    edx,edi
c0017cdc:	80 e6 fd             	and    dh,0xfd
c0017cdf:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017ce3:	eb c8                	jmp    c0017cad <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x74>

c0017ce5 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017ce5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017cea:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017cef:	c1 e0 04             	shl    eax,0x4
c0017cf2:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017cf5:	c3                   	ret    

c0017cf6 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017cf6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017cfb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017d00:	c1 e0 04             	shl    eax,0x4
c0017d03:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017d07:	c3                   	ret    

c0017d08 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017d08:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017d0d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017d12:	c1 e0 04             	shl    eax,0x4
c0017d15:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017d18:	c3                   	ret    

c0017d19 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017d19:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017d1e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017d23:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017d27:	c1 e0 04             	shl    eax,0x4
c0017d2a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017d2d:	c3                   	ret    

c0017d2e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017d2e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017d33:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017d38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017d3c:	c1 e0 04             	shl    eax,0x4
c0017d3f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017d43:	c3                   	ret    

c0017d44 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017d44:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017d49:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017d4e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017d52:	c1 e0 04             	shl    eax,0x4
c0017d55:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017d58:	c3                   	ret    

c0017d59 <Vm::faultHandler(regs*)>:
c0017d59:	55                   	push   ebp
c0017d5a:	57                   	push   edi
c0017d5b:	56                   	push   esi
c0017d5c:	53                   	push   ebx
c0017d5d:	83 ec 1c             	sub    esp,0x1c
c0017d60:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017d64:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017d68:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017d6b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0017d70:	0f b7 c0             	movzx  eax,ax
c0017d73:	52                   	push   edx
c0017d74:	50                   	push   eax
c0017d75:	e8 b0 f9 ff ff       	call   c001772a <Vm::realToLinear(unsigned short, unsigned short)>
c0017d7a:	59                   	pop    ecx
c0017d7b:	5e                   	pop    esi
c0017d7c:	89 c1                	mov    ecx,eax
c0017d7e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017d81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d85:	0f b7 e8             	movzx  ebp,ax
c0017d88:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d8f:	0f b7 f8             	movzx  edi,ax
c0017d92:	55                   	push   ebp
c0017d93:	57                   	push   edi
c0017d94:	e8 91 f9 ff ff       	call   c001772a <Vm::realToLinear(unsigned short, unsigned short)>
c0017d99:	5a                   	pop    edx
c0017d9a:	5e                   	pop    esi
c0017d9b:	c6 44 24 04 06       	mov    BYTE PTR [esp+0x4],0x6
c0017da0:	c6 44 24 05 00       	mov    BYTE PTR [esp+0x5],0x0
c0017da5:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0017daa:	0f b6 31             	movzx  esi,BYTE PTR [ecx]
c0017dad:	8d 56 da             	lea    edx,[esi-0x26]
c0017db0:	0f b6 d2             	movzx  edx,dl
c0017db3:	81 fa d5 00 00 00    	cmp    edx,0xd5
c0017db9:	0f 87 00 04 00 00    	ja     c00181bf <Vm::faultHandler(regs*)+0x466>
c0017dbf:	ff 24 95 80 4f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb080]
c0017dc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017dcb:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0017dcf:	b0 01                	mov    al,0x1
c0017dd1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0017dd4:	83 c5 01             	add    ebp,0x1
c0017dd7:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0017dda:	83 c4 1c             	add    esp,0x1c
c0017ddd:	5b                   	pop    ebx
c0017dde:	5e                   	pop    esi
c0017ddf:	5f                   	pop    edi
c0017de0:	5d                   	pop    ebp
c0017de1:	c3                   	ret    
c0017de2:	c6 44 24 04 02       	mov    BYTE PTR [esp+0x4],0x2
c0017de7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017dea:	83 c2 01             	add    edx,0x1
c0017ded:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017df0:	83 c1 01             	add    ecx,0x1
c0017df3:	eb b5                	jmp    c0017daa <Vm::faultHandler(regs*)+0x51>
c0017df5:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0017dfa:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017dfd:	83 c6 01             	add    esi,0x1
c0017e00:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0017e03:	eb eb                	jmp    c0017df0 <Vm::faultHandler(regs*)+0x97>
c0017e05:	c6 44 24 04 05       	mov    BYTE PTR [esp+0x4],0x5
c0017e0a:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017e0d:	83 c6 01             	add    esi,0x1
c0017e10:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0017e13:	eb db                	jmp    c0017df0 <Vm::faultHandler(regs*)+0x97>
c0017e15:	c6 44 24 04 01       	mov    BYTE PTR [esp+0x4],0x1
c0017e1a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017e1d:	83 c2 01             	add    edx,0x1
c0017e20:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017e23:	eb cb                	jmp    c0017df0 <Vm::faultHandler(regs*)+0x97>
c0017e25:	c6 44 24 04 03       	mov    BYTE PTR [esp+0x4],0x3
c0017e2a:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017e2d:	83 c6 01             	add    esi,0x1
c0017e30:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0017e33:	eb bb                	jmp    c0017df0 <Vm::faultHandler(regs*)+0x97>
c0017e35:	c6 44 24 04 04       	mov    BYTE PTR [esp+0x4],0x4
c0017e3a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017e3d:	83 c2 01             	add    edx,0x1
c0017e40:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017e43:	eb ab                	jmp    c0017df0 <Vm::faultHandler(regs*)+0x97>
c0017e45:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0017e4a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017e4d:	83 c2 01             	add    edx,0x1
c0017e50:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017e53:	eb 9b                	jmp    c0017df0 <Vm::faultHandler(regs*)+0x97>
c0017e55:	c6 44 24 05 01       	mov    BYTE PTR [esp+0x5],0x1
c0017e5a:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017e5d:	83 c6 01             	add    esi,0x1
c0017e60:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0017e63:	eb 8b                	jmp    c0017df0 <Vm::faultHandler(regs*)+0x97>
c0017e65:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0017e6a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017e6d:	74 0d                	je     c0017e7c <Vm::faultHandler(regs*)+0x123>
c0017e6f:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017e76:	0f 87 be 06 00 00    	ja     c001853a <Vm::faultHandler(regs*)+0x7e1>
c0017e7c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017e80:	83 ec 0c             	sub    esp,0xc
c0017e83:	0f b7 f6             	movzx  esi,si
c0017e86:	50                   	push   eax
c0017e87:	e8 59 f8 ff ff       	call   c00176e5 <Vm::inbv(unsigned short)>
c0017e8c:	83 c4 0c             	add    esp,0xc
c0017e8f:	0f b6 c0             	movzx  eax,al
c0017e92:	50                   	push   eax
c0017e93:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017e97:	50                   	push   eax
c0017e98:	56                   	push   esi
c0017e99:	e8 7b fe ff ff       	call   c0017d19 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017e9e:	83 c4 10             	add    esp,0x10
c0017ea1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017ea4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017ea8:	0f 84 0a 06 00 00    	je     c00184b8 <Vm::faultHandler(regs*)+0x75f>
c0017eae:	83 e8 01             	sub    eax,0x1
c0017eb1:	0f b7 c0             	movzx  eax,ax
c0017eb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017eb7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0017eba:	83 c0 01             	add    eax,0x1
c0017ebd:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017ec0:	83 c4 1c             	add    esp,0x1c
c0017ec3:	b0 01                	mov    al,0x1
c0017ec5:	5b                   	pop    ebx
c0017ec6:	5e                   	pop    esi
c0017ec7:	5f                   	pop    edi
c0017ec8:	5d                   	pop    ebp
c0017ec9:	c3                   	ret    
c0017eca:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0017ecf:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017ed2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017ed5:	0f 85 a0 04 00 00    	jne    c001837b <Vm::faultHandler(regs*)+0x622>
c0017edb:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0017ee0:	0f b7 c8             	movzx  ecx,ax
c0017ee3:	0f b7 f6             	movzx  esi,si
c0017ee6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017ee9:	0f 84 69 05 00 00    	je     c0018458 <Vm::faultHandler(regs*)+0x6ff>
c0017eef:	ed                   	in     eax,dx
c0017ef0:	83 ec 04             	sub    esp,0x4
c0017ef3:	50                   	push   eax
c0017ef4:	51                   	push   ecx
c0017ef5:	56                   	push   esi
c0017ef6:	e8 49 fe ff ff       	call   c0017d44 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017efb:	83 c4 10             	add    esp,0x10
c0017efe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017f01:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017f05:	0f 84 d1 05 00 00    	je     c00184dc <Vm::faultHandler(regs*)+0x783>
c0017f0b:	83 e8 04             	sub    eax,0x4
c0017f0e:	25 ff ff 00 00       	and    eax,0xffff
c0017f13:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017f16:	eb 9f                	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c0017f18:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017f1d:	83 f8 06             	cmp    eax,0x6
c0017f20:	0f 87 66 03 00 00    	ja     c001828c <Vm::faultHandler(regs*)+0x533>
c0017f26:	ff 24 85 d8 52 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdad28]
c0017f2d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017f32:	83 f8 06             	cmp    eax,0x6
c0017f35:	0f 87 f5 02 00 00    	ja     c0018230 <Vm::faultHandler(regs*)+0x4d7>
c0017f3b:	ff 24 85 f4 52 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdad0c]
c0017f42:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017f46:	83 ec 08             	sub    esp,0x8
c0017f49:	50                   	push   eax
c0017f4a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017f4e:	50                   	push   eax
c0017f4f:	e8 a4 f7 ff ff       	call   c00176f8 <Vm::outbv(unsigned short, unsigned char)>
c0017f54:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0017f57:	83 c4 10             	add    esp,0x10
c0017f5a:	83 c0 02             	add    eax,0x2
c0017f5d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017f60:	b0 01                	mov    al,0x1
c0017f62:	e9 73 fe ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c0017f67:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017f6b:	3d ee 00 00 00       	cmp    eax,0xee
c0017f70:	0f 84 62 04 00 00    	je     c00183d8 <Vm::faultHandler(regs*)+0x67f>
c0017f76:	83 ec 0c             	sub    esp,0xc
c0017f79:	55                   	push   ebp
c0017f7a:	57                   	push   edi
c0017f7b:	51                   	push   ecx
c0017f7c:	50                   	push   eax
c0017f7d:	53                   	push   ebx
c0017f7e:	e8 b6 fc ff ff       	call   c0017c39 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017f83:	83 c4 20             	add    esp,0x20
c0017f86:	b0 01                	mov    al,0x1
c0017f88:	e9 4d fe ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c0017f8d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017f91:	89 d1                	mov    ecx,edx
c0017f93:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017f96:	c1 e1 08             	shl    ecx,0x8
c0017f99:	09 ca                	or     edx,ecx
c0017f9b:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f9e:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017fa2:	89 d1                	mov    ecx,edx
c0017fa4:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017fa8:	c1 e1 08             	shl    ecx,0x8
c0017fab:	09 ca                	or     edx,ecx
c0017fad:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017fb0:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017fb4:	89 d1                	mov    ecx,edx
c0017fb6:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017fba:	c1 e1 08             	shl    ecx,0x8
c0017fbd:	09 ca                	or     edx,ecx
c0017fbf:	81 ca 00 02 02 00    	or     edx,0x20200
c0017fc5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017fc8:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017fcc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017fd2:	d1 e8                	shr    eax,1
c0017fd4:	83 e0 01             	and    eax,0x1
c0017fd7:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0017fda:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017fdd:	83 c0 06             	add    eax,0x6
c0017fe0:	25 ff ff 00 00       	and    eax,0xffff
c0017fe5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017fe8:	b0 01                	mov    al,0x1
c0017fea:	e9 eb fd ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c0017fef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017ff2:	83 ec 0c             	sub    esp,0xc
c0017ff5:	b0 00                	mov    al,0x0
c0017ff7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017ffa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017ffe:	50                   	push   eax
c0017fff:	e8 e1 f6 ff ff       	call   c00176e5 <Vm::inbv(unsigned short)>
c0018004:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018007:	83 c4 10             	add    esp,0x10
c001800a:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001800d:	83 c1 02             	add    ecx,0x2
c0018010:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0018013:	0f b6 c0             	movzx  eax,al
c0018016:	09 c2                	or     edx,eax
c0018018:	b0 01                	mov    al,0x1
c001801a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c001801d:	e9 b8 fd ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c0018022:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018027:	0f 85 8a 03 00 00    	jne    c00183b7 <Vm::faultHandler(regs*)+0x65e>
c001802d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018030:	81 e6 00 00 ff ff    	and    esi,0xffff0000
c0018036:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0018039:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001803d:	66 ed                	in     ax,dx
c001803f:	0f b7 c0             	movzx  eax,ax
c0018042:	09 f0                	or     eax,esi
c0018044:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018047:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001804a:	83 c0 02             	add    eax,0x2
c001804d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018050:	83 c4 1c             	add    esp,0x1c
c0018053:	b0 01                	mov    al,0x1
c0018055:	5b                   	pop    ebx
c0018056:	5e                   	pop    esi
c0018057:	5f                   	pop    edi
c0018058:	5d                   	pop    ebp
c0018059:	c3                   	ret    
c001805a:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001805f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018062:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018066:	0f 84 e3 02 00 00    	je     c001834f <Vm::faultHandler(regs*)+0x5f6>
c001806c:	83 ea 04             	sub    edx,0x4
c001806f:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018075:	81 e2 ff ff 00 00    	and    edx,0xffff
c001807b:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001807e:	89 48 fc             	mov    DWORD PTR [eax-0x4],ecx
c0018081:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018087:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001808b:	0f 84 26 fe ff ff    	je     c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c0018091:	80 cd 02             	or     ch,0x2
c0018094:	89 48 fc             	mov    DWORD PTR [eax-0x4],ecx
c0018097:	e9 1b fe ff ff       	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c001809c:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c00180a1:	0f 84 77 02 00 00    	je     c001831e <Vm::faultHandler(regs*)+0x5c5>
c00180a7:	8b 10                	mov    edx,DWORD PTR [eax]
c00180a9:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00180af:	81 ca 00 02 02 00    	or     edx,0x20200
c00180b5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00180b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00180ba:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00180c0:	c1 e8 09             	shr    eax,0x9
c00180c3:	83 e0 01             	and    eax,0x1
c00180c6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00180c9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00180cc:	83 c0 04             	add    eax,0x4
c00180cf:	25 ff ff 00 00       	and    eax,0xffff
c00180d4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00180d7:	e9 db fd ff ff       	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c00180dc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00180e0:	83 ec 08             	sub    esp,0x8
c00180e3:	50                   	push   eax
c00180e4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00180e8:	50                   	push   eax
c00180e9:	e8 0a f6 ff ff       	call   c00176f8 <Vm::outbv(unsigned short, unsigned char)>
c00180ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00180f1:	83 c4 10             	add    esp,0x10
c00180f4:	b0 01                	mov    al,0x1
c00180f6:	83 c2 01             	add    edx,0x1
c00180f9:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00180fc:	e9 d9 fc ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c0018101:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018106:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018109:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001810c:	0f 84 b8 02 00 00    	je     c00183ca <Vm::faultHandler(regs*)+0x671>
c0018112:	ef                   	out    dx,eax
c0018113:	e9 9f fd ff ff       	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c0018118:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001811b:	83 c2 01             	add    edx,0x1
c001811e:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018121:	e9 ca fc ff ff       	jmp    c0017df0 <Vm::faultHandler(regs*)+0x97>
c0018126:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001812b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001812f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018132:	83 c0 01             	add    eax,0x1
c0018135:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018138:	b0 01                	mov    al,0x1
c001813a:	e9 9b fc ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c001813f:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018142:	83 ec 0c             	sub    esp,0xc
c0018145:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018149:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c001814f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0018152:	50                   	push   eax
c0018153:	e8 8d f5 ff ff       	call   c00176e5 <Vm::inbv(unsigned short)>
c0018158:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c001815b:	83 c4 10             	add    esp,0x10
c001815e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0018161:	83 c5 01             	add    ebp,0x1
c0018164:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0018167:	0f b6 c0             	movzx  eax,al
c001816a:	09 c7                	or     edi,eax
c001816c:	b0 01                	mov    al,0x1
c001816e:	89 7b 2c             	mov    DWORD PTR [ebx+0x2c],edi
c0018171:	e9 64 fc ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c0018176:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001817b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001817e:	0f 85 40 02 00 00    	jne    c00183c4 <Vm::faultHandler(regs*)+0x66b>
c0018184:	66 ed                	in     ax,dx
c0018186:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018189:	0f b7 c0             	movzx  eax,ax
c001818c:	81 e2 00 00 ff ff    	and    edx,0xffff0000
c0018192:	09 d0                	or     eax,edx
c0018194:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018197:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001819a:	b0 01                	mov    al,0x1
c001819c:	83 c1 01             	add    ecx,0x1
c001819f:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00181a2:	e9 33 fc ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c00181a7:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c00181ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00181af:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00181b3:	0f 84 18 02 00 00    	je     c00183d1 <Vm::faultHandler(regs*)+0x678>
c00181b9:	ef                   	out    dx,eax
c00181ba:	e9 88 fe ff ff       	jmp    c0018047 <Vm::faultHandler(regs*)+0x2ee>
c00181bf:	89 f0                	mov    eax,esi
c00181c1:	0f b6 f0             	movzx  esi,al
c00181c4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00181c8:	50                   	push   eax
c00181c9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00181cd:	50                   	push   eax
c00181ce:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00181d2:	50                   	push   eax
c00181d3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00181d7:	50                   	push   eax
c00181d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00181dc:	50                   	push   eax
c00181dd:	56                   	push   esi
c00181de:	56                   	push   esi
c00181df:	68 50 4f 02 c0       	push   0xc0024f50
c00181e4:	e8 7d ed fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00181e9:	83 c4 20             	add    esp,0x20
c00181ec:	83 ec 0c             	sub    esp,0xc
c00181ef:	6a 60                	push   0x60
c00181f1:	e8 ef f4 ff ff       	call   c00176e5 <Vm::inbv(unsigned short)>
c00181f6:	83 c4 10             	add    esp,0x10
c00181f9:	0f b6 c0             	movzx  eax,al
c00181fc:	83 f8 1c             	cmp    eax,0x1c
c00181ff:	74 17                	je     c0018218 <Vm::faultHandler(regs*)+0x4bf>
c0018201:	83 f8 5a             	cmp    eax,0x5a
c0018204:	75 e6                	jne    c00181ec <Vm::faultHandler(regs*)+0x493>
c0018206:	eb 10                	jmp    c0018218 <Vm::faultHandler(regs*)+0x4bf>
c0018208:	83 ec 0c             	sub    esp,0xc
c001820b:	6a 60                	push   0x60
c001820d:	e8 d3 f4 ff ff       	call   c00176e5 <Vm::inbv(unsigned short)>
c0018212:	83 c4 10             	add    esp,0x10
c0018215:	0f b6 c0             	movzx  eax,al
c0018218:	83 f8 1c             	cmp    eax,0x1c
c001821b:	74 eb                	je     c0018208 <Vm::faultHandler(regs*)+0x4af>
c001821d:	83 f8 5a             	cmp    eax,0x5a
c0018220:	74 e6                	je     c0018208 <Vm::faultHandler(regs*)+0x4af>
c0018222:	31 c0                	xor    eax,eax
c0018224:	e9 b1 fb ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c0018229:	8b 03                	mov    eax,DWORD PTR [ebx]
c001822b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018230:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018235:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018238:	0f 85 a3 00 00 00    	jne    c00182e1 <Vm::faultHandler(regs*)+0x588>
c001823e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018241:	0f b7 c6             	movzx  eax,si
c0018244:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0018249:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001824c:	81 e1 00 04 00 00    	and    ecx,0x400
c0018252:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c0018257:	0f 84 2b 02 00 00    	je     c0018488 <Vm::faultHandler(regs*)+0x72f>
c001825d:	83 ec 08             	sub    esp,0x8
c0018260:	50                   	push   eax
c0018261:	52                   	push   edx
c0018262:	e8 a1 fa ff ff       	call   c0017d08 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018267:	83 c4 10             	add    esp,0x10
c001826a:	89 fa                	mov    edx,edi
c001826c:	ef                   	out    dx,eax
c001826d:	85 c9                	test   ecx,ecx
c001826f:	0f 84 77 02 00 00    	je     c00184ec <Vm::faultHandler(regs*)+0x793>
c0018275:	8d 46 fc             	lea    eax,[esi-0x4]
c0018278:	25 ff ff 00 00       	and    eax,0xffff
c001827d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018280:	e9 32 fc ff ff       	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c0018285:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018287:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001828c:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018291:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018294:	74 0b                	je     c00182a1 <Vm::faultHandler(regs*)+0x548>
c0018296:	3d ff ff 00 00       	cmp    eax,0xffff
c001829b:	0f 87 68 02 00 00    	ja     c0018509 <Vm::faultHandler(regs*)+0x7b0>
c00182a1:	83 ec 08             	sub    esp,0x8
c00182a4:	0f b7 c0             	movzx  eax,ax
c00182a7:	50                   	push   eax
c00182a8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00182ad:	50                   	push   eax
c00182ae:	e8 32 fa ff ff       	call   c0017ce5 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00182b3:	5e                   	pop    esi
c00182b4:	5f                   	pop    edi
c00182b5:	0f b6 c0             	movzx  eax,al
c00182b8:	50                   	push   eax
c00182b9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00182bd:	50                   	push   eax
c00182be:	e8 35 f4 ff ff       	call   c00176f8 <Vm::outbv(unsigned short, unsigned char)>
c00182c3:	83 c4 10             	add    esp,0x10
c00182c6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00182c9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00182cd:	0f 84 da 01 00 00    	je     c00184ad <Vm::faultHandler(regs*)+0x754>
c00182d3:	83 e8 01             	sub    eax,0x1
c00182d6:	0f b7 c0             	movzx  eax,ax
c00182d9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00182dc:	e9 d6 fb ff ff       	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c00182e1:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00182e7:	0f 86 51 ff ff ff    	jbe    c001823e <Vm::faultHandler(regs*)+0x4e5>
c00182ed:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00182f1:	50                   	push   eax
c00182f2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00182f6:	50                   	push   eax
c00182f7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00182fb:	50                   	push   eax
c00182fc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018300:	50                   	push   eax
c0018301:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018305:	50                   	push   eax
c0018306:	6a 6f                	push   0x6f
c0018308:	6a 6f                	push   0x6f
c001830a:	68 20 4f 02 c0       	push   0xc0024f20
c001830f:	e8 52 ec fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018314:	83 c4 20             	add    esp,0x20
c0018317:	31 c0                	xor    eax,eax
c0018319:	e9 bc fa ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c001831e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018321:	81 ca 00 02 02 00    	or     edx,0x20200
c0018327:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001832a:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001832d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018333:	c1 e8 09             	shr    eax,0x9
c0018336:	83 e0 01             	and    eax,0x1
c0018339:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001833c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001833f:	83 c0 02             	add    eax,0x2
c0018342:	25 ff ff 00 00       	and    eax,0xffff
c0018347:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001834a:	e9 68 fb ff ff       	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c001834f:	83 ea 02             	sub    edx,0x2
c0018352:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018358:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001835b:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c001835f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018365:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c0018369:	0f 84 54 01 00 00    	je     c00184c3 <Vm::faultHandler(regs*)+0x76a>
c001836f:	80 cd 02             	or     ch,0x2
c0018372:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c0018376:	e9 3c fb ff ff       	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c001837b:	3d ff ff 00 00       	cmp    eax,0xffff
c0018380:	0f 86 55 fb ff ff    	jbe    c0017edb <Vm::faultHandler(regs*)+0x182>
c0018386:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001838a:	50                   	push   eax
c001838b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001838f:	50                   	push   eax
c0018390:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018394:	50                   	push   eax
c0018395:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018399:	50                   	push   eax
c001839a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001839e:	50                   	push   eax
c001839f:	6a 6d                	push   0x6d
c00183a1:	6a 6d                	push   0x6d
c00183a3:	68 20 4f 02 c0       	push   0xc0024f20
c00183a8:	e8 b9 eb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00183ad:	83 c4 20             	add    esp,0x20
c00183b0:	31 c0                	xor    eax,eax
c00183b2:	e9 23 fa ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c00183b7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00183bb:	ed                   	in     eax,dx
c00183bc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00183bf:	e9 83 fc ff ff       	jmp    c0018047 <Vm::faultHandler(regs*)+0x2ee>
c00183c4:	ed                   	in     eax,dx
c00183c5:	e9 ca fd ff ff       	jmp    c0018194 <Vm::faultHandler(regs*)+0x43b>
c00183ca:	66 ef                	out    dx,ax
c00183cc:	e9 e6 fa ff ff       	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c00183d1:	66 ef                	out    dx,ax
c00183d3:	e9 6f fc ff ff       	jmp    c0018047 <Vm::faultHandler(regs*)+0x2ee>
c00183d8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00183db:	83 ec 0c             	sub    esp,0xc
c00183de:	50                   	push   eax
c00183df:	e8 b8 f3 ff ff       	call   c001779c <Vm::mainloop3(unsigned long)>
c00183e4:	83 c4 10             	add    esp,0x10
c00183e7:	b0 01                	mov    al,0x1
c00183e9:	e9 ec f9 ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c00183ee:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00183f1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00183f6:	e9 35 fe ff ff       	jmp    c0018230 <Vm::faultHandler(regs*)+0x4d7>
c00183fb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00183fe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018403:	e9 28 fe ff ff       	jmp    c0018230 <Vm::faultHandler(regs*)+0x4d7>
c0018408:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001840b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018410:	e9 1b fe ff ff       	jmp    c0018230 <Vm::faultHandler(regs*)+0x4d7>
c0018415:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018419:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001841e:	e9 0d fe ff ff       	jmp    c0018230 <Vm::faultHandler(regs*)+0x4d7>
c0018423:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0018426:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001842b:	e9 5c fe ff ff       	jmp    c001828c <Vm::faultHandler(regs*)+0x533>
c0018430:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0018433:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018438:	e9 4f fe ff ff       	jmp    c001828c <Vm::faultHandler(regs*)+0x533>
c001843d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018440:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018445:	e9 42 fe ff ff       	jmp    c001828c <Vm::faultHandler(regs*)+0x533>
c001844a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001844e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018453:	e9 34 fe ff ff       	jmp    c001828c <Vm::faultHandler(regs*)+0x533>
c0018458:	66 ed                	in     ax,dx
c001845a:	83 ec 04             	sub    esp,0x4
c001845d:	0f b7 c0             	movzx  eax,ax
c0018460:	50                   	push   eax
c0018461:	51                   	push   ecx
c0018462:	56                   	push   esi
c0018463:	e8 c6 f8 ff ff       	call   c0017d2e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018468:	83 c4 10             	add    esp,0x10
c001846b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001846e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018472:	0f 84 84 00 00 00    	je     c00184fc <Vm::faultHandler(regs*)+0x7a3>
c0018478:	83 e8 02             	sub    eax,0x2
c001847b:	25 ff ff 00 00       	and    eax,0xffff
c0018480:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018483:	e9 2f fa ff ff       	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c0018488:	83 ec 08             	sub    esp,0x8
c001848b:	50                   	push   eax
c001848c:	52                   	push   edx
c001848d:	e8 64 f8 ff ff       	call   c0017cf6 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018492:	83 c4 10             	add    esp,0x10
c0018495:	89 fa                	mov    edx,edi
c0018497:	66 ef                	out    dx,ax
c0018499:	85 c9                	test   ecx,ecx
c001849b:	74 32                	je     c00184cf <Vm::faultHandler(regs*)+0x776>
c001849d:	8d 46 fe             	lea    eax,[esi-0x2]
c00184a0:	25 ff ff 00 00       	and    eax,0xffff
c00184a5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00184a8:	e9 0a fa ff ff       	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c00184ad:	83 c0 01             	add    eax,0x1
c00184b0:	0f b7 c0             	movzx  eax,ax
c00184b3:	e9 21 fe ff ff       	jmp    c00182d9 <Vm::faultHandler(regs*)+0x580>
c00184b8:	83 c0 01             	add    eax,0x1
c00184bb:	0f b7 c0             	movzx  eax,ax
c00184be:	e9 f1 f9 ff ff       	jmp    c0017eb4 <Vm::faultHandler(regs*)+0x15b>
c00184c3:	80 e5 fd             	and    ch,0xfd
c00184c6:	66 89 48 fe          	mov    WORD PTR [eax-0x2],cx
c00184ca:	e9 e8 f9 ff ff       	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c00184cf:	8d 46 02             	lea    eax,[esi+0x2]
c00184d2:	25 ff ff 00 00       	and    eax,0xffff
c00184d7:	e9 fd fd ff ff       	jmp    c00182d9 <Vm::faultHandler(regs*)+0x580>
c00184dc:	83 c0 04             	add    eax,0x4
c00184df:	25 ff ff 00 00       	and    eax,0xffff
c00184e4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00184e7:	e9 cb f9 ff ff       	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c00184ec:	8d 46 04             	lea    eax,[esi+0x4]
c00184ef:	25 ff ff 00 00       	and    eax,0xffff
c00184f4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00184f7:	e9 bb f9 ff ff       	jmp    c0017eb7 <Vm::faultHandler(regs*)+0x15e>
c00184fc:	83 c0 02             	add    eax,0x2
c00184ff:	25 ff ff 00 00       	and    eax,0xffff
c0018504:	e9 ab f9 ff ff       	jmp    c0017eb4 <Vm::faultHandler(regs*)+0x15b>
c0018509:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001850d:	50                   	push   eax
c001850e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018512:	50                   	push   eax
c0018513:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018517:	50                   	push   eax
c0018518:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001851c:	50                   	push   eax
c001851d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018521:	50                   	push   eax
c0018522:	6a 6e                	push   0x6e
c0018524:	6a 6e                	push   0x6e
c0018526:	68 20 4f 02 c0       	push   0xc0024f20
c001852b:	e8 36 ea fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018530:	83 c4 20             	add    esp,0x20
c0018533:	31 c0                	xor    eax,eax
c0018535:	e9 a0 f8 ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c001853a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001853e:	50                   	push   eax
c001853f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018543:	50                   	push   eax
c0018544:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018548:	50                   	push   eax
c0018549:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001854d:	50                   	push   eax
c001854e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018552:	50                   	push   eax
c0018553:	6a 6c                	push   0x6c
c0018555:	6a 6c                	push   0x6c
c0018557:	68 20 4f 02 c0       	push   0xc0024f20
c001855c:	e8 05 ea fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018561:	83 c4 20             	add    esp,0x20
c0018564:	31 c0                	xor    eax,eax
c0018566:	e9 6f f8 ff ff       	jmp    c0017dda <Vm::faultHandler(regs*)+0x81>
c001856b:	90                   	nop

c001856c <IOAPIC::close(int, int, void*)>:
c001856c:	b8 00 00 00 00       	mov    eax,0x0
c0018571:	c3                   	ret    

c0018572 <apicGetBase()>:
c0018572:	55                   	push   ebp
c0018573:	89 e5                	mov    ebp,esp
c0018575:	83 ec 18             	sub    esp,0x18
c0018578:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001857d:	83 e0 08             	and    eax,0x8
c0018580:	0f b6 c0             	movzx  eax,al
c0018583:	85 c0                	test   eax,eax
c0018585:	75 07                	jne    c001858e <apicGetBase()+0x1c>
c0018587:	b8 00 00 00 00       	mov    eax,0x0
c001858c:	eb 1b                	jmp    c00185a9 <apicGetBase()+0x37>
c001858e:	83 ec 0c             	sub    esp,0xc
c0018591:	6a 1b                	push   0x1b
c0018593:	e8 63 15 00 00       	call   c0019afb <x86rdmsr(unsigned int)>
c0018598:	83 c4 10             	add    esp,0x10
c001859b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001859e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00185a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00185a4:	25 00 00 ff ff       	and    eax,0xffff0000
c00185a9:	c9                   	leave  
c00185aa:	c3                   	ret    
c00185ab:	90                   	nop

c00185ac <IOAPIC::IOAPIC()>:
c00185ac:	83 ec 0c             	sub    esp,0xc
c00185af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185b3:	83 ec 08             	sub    esp,0x8
c00185b6:	68 10 53 02 c0       	push   0xc0025310
c00185bb:	50                   	push   eax
c00185bc:	e8 97 15 ff ff       	call   c0009b58 <Device::Device(char const*)>
c00185c1:	83 c4 10             	add    esp,0x10
c00185c4:	ba 30 53 02 c0       	mov    edx,0xc0025330
c00185c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185cd:	89 10                	mov    DWORD PTR [eax],edx
c00185cf:	90                   	nop
c00185d0:	83 c4 0c             	add    esp,0xc
c00185d3:	c3                   	ret    

c00185d4 <apicOpen()>:
c00185d4:	55                   	push   ebp
c00185d5:	89 e5                	mov    ebp,esp
c00185d7:	53                   	push   ebx
c00185d8:	83 ec 34             	sub    esp,0x34
c00185db:	83 ec 0c             	sub    esp,0xc
c00185de:	68 18 53 02 c0       	push   0xc0025318
c00185e3:	e8 7e e9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00185e8:	83 c4 10             	add    esp,0x10
c00185eb:	a0 40 cb 02 c0       	mov    al,ds:0xc002cb40
c00185f0:	83 f0 01             	xor    eax,0x1
c00185f3:	0f b6 c0             	movzx  eax,al
c00185f6:	85 c0                	test   eax,eax
c00185f8:	0f 84 a3 00 00 00    	je     c00186a1 <apicOpen()+0xcd>
c00185fe:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0018602:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c0018607:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001860b:	0f b6 c0             	movzx  eax,al
c001860e:	39 c2                	cmp    edx,eax
c0018610:	0f 83 84 00 00 00    	jae    c001869a <apicOpen()+0xc6>
c0018616:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001861d:	83 ec 0c             	sub    esp,0xc
c0018620:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0018623:	e8 60 71 ff ff       	call   c000f788 <malloc>
c0018628:	83 c4 10             	add    esp,0x10
c001862b:	89 c3                	mov    ebx,eax
c001862d:	83 ec 0c             	sub    esp,0xc
c0018630:	53                   	push   ebx
c0018631:	e8 76 ff ff ff       	call   c00185ac <IOAPIC::IOAPIC()>
c0018636:	83 c4 10             	add    esp,0x10
c0018639:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001863c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0018640:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018643:	89 14 85 20 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd34e0],edx
c001864a:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c001864f:	83 c0 01             	add    eax,0x1
c0018652:	a3 00 cb 02 c0       	mov    ds:0xc002cb00,eax
c0018657:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001865c:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018662:	83 ec 08             	sub    esp,0x8
c0018665:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018668:	50                   	push   eax
c0018669:	e8 88 13 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c001866e:	83 c4 10             	add    esp,0x10
c0018671:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018674:	8b 00                	mov    eax,DWORD PTR [eax]
c0018676:	83 c0 08             	add    eax,0x8
c0018679:	8b 00                	mov    eax,DWORD PTR [eax]
c001867b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001867f:	6a 00                	push   0x0
c0018681:	6a 00                	push   0x0
c0018683:	52                   	push   edx
c0018684:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018687:	ff d0                	call   eax
c0018689:	83 c4 10             	add    esp,0x10
c001868c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001868f:	83 c0 01             	add    eax,0x1
c0018692:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0018695:	e9 68 ff ff ff       	jmp    c0018602 <apicOpen()+0x2e>
c001869a:	c6 05 40 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb40,0x1
c00186a1:	e8 cc fe ff ff       	call   c0018572 <apicGetBase()>
c00186a6:	05 f0 00 00 00       	add    eax,0xf0
c00186ab:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00186ae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00186b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00186b3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00186b6:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c00186bd:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c00186c4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00186c7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00186ca:	89 10                	mov    DWORD PTR [eax],edx
c00186cc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00186d3:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00186d8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00186db:	7d 7c                	jge    c0018759 <apicOpen()+0x185>
c00186dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00186e0:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c00186e7:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c00186ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00186ed:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c00186f4:	c1 e8 08             	shr    eax,0x8
c00186f7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00186fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00186fe:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0018705:	c1 e8 18             	shr    eax,0x18
c0018708:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001870b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001870f:	3d ff 00 00 00       	cmp    eax,0xff
c0018714:	75 3a                	jne    c0018750 <apicOpen()+0x17c>
c0018716:	e8 57 fe ff ff       	call   c0018572 <apicGetBase()>
c001871b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001871f:	83 fa 01             	cmp    edx,0x1
c0018722:	75 07                	jne    c001872b <apicOpen()+0x157>
c0018724:	ba 60 03 00 00       	mov    edx,0x360
c0018729:	eb 05                	jmp    c0018730 <apicOpen()+0x15c>
c001872b:	ba 50 03 00 00       	mov    edx,0x350
c0018730:	01 d0                	add    eax,edx
c0018732:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018735:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018738:	8b 00                	mov    eax,DWORD PTR [eax]
c001873a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001873d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018744:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018748:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001874b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001874e:	89 10                	mov    DWORD PTR [eax],edx
c0018750:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018754:	e9 7a ff ff ff       	jmp    c00186d3 <apicOpen()+0xff>
c0018759:	90                   	nop
c001875a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001875d:	c9                   	leave  
c001875e:	c3                   	ret    
c001875f:	90                   	nop

c0018760 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018760:	55                   	push   ebp
c0018761:	89 e5                	mov    ebp,esp
c0018763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018766:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001876c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001876f:	72 1d                	jb     c001878e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018774:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001877a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001877d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018783:	01 d0                	add    eax,edx
c0018785:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018788:	73 04                	jae    c001878e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001878a:	b0 01                	mov    al,0x1
c001878c:	eb 02                	jmp    c0018790 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001878e:	b0 00                	mov    al,0x0
c0018790:	5d                   	pop    ebp
c0018791:	c3                   	ret    

c0018792 <IOAPIC::read(int)>:
c0018792:	55                   	push   ebp
c0018793:	89 e5                	mov    ebp,esp
c0018795:	83 ec 10             	sub    esp,0x10
c0018798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001879b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00187a1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00187a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00187a7:	0f b6 d0             	movzx  edx,al
c00187aa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00187ad:	89 10                	mov    DWORD PTR [eax],edx
c00187af:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00187b2:	83 c0 10             	add    eax,0x10
c00187b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00187b7:	c9                   	leave  
c00187b8:	c3                   	ret    
c00187b9:	90                   	nop

c00187ba <IOAPIC::open(int, int, void*)>:
c00187ba:	55                   	push   ebp
c00187bb:	89 e5                	mov    ebp,esp
c00187bd:	57                   	push   edi
c00187be:	56                   	push   esi
c00187bf:	53                   	push   ebx
c00187c0:	83 ec 04             	sub    esp,0x4
c00187c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00187c9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00187cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00187d8:	8b 14 85 80 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4180]
c00187df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187e2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00187e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00187f1:	8b 14 85 00 bf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4100]
c00187f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187fb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0018801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018804:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001880a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001880d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018813:	0f b6 f0             	movzx  esi,al
c0018816:	89 d0                	mov    eax,edx
c0018818:	ba 00 00 00 00       	mov    edx,0x0
c001881d:	89 c7                	mov    edi,eax
c001881f:	83 e7 ff             	and    edi,0xffffffff
c0018822:	89 f9                	mov    ecx,edi
c0018824:	0f b6 da             	movzx  ebx,dl
c0018827:	89 c8                	mov    eax,ecx
c0018829:	89 da                	mov    edx,ebx
c001882b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001882e:	8d 5e 08             	lea    ebx,[esi+0x8]
c0018831:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0018835:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0018839:	83 e0 00             	and    eax,0x0
c001883c:	09 d0                	or     eax,edx
c001883e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0018842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018845:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001884b:	8d 50 01             	lea    edx,[eax+0x1]
c001884e:	88 d1                	mov    cl,dl
c0018850:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018853:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0018859:	0f b6 d0             	movzx  edx,al
c001885c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001885f:	83 c2 08             	add    edx,0x8
c0018862:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0018866:	0f b6 c9             	movzx  ecx,cl
c0018869:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001886f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0018873:	6a 01                	push   0x1
c0018875:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018878:	e8 15 ff ff ff       	call   c0018792 <IOAPIC::read(int)>
c001887d:	83 c4 08             	add    esp,0x8
c0018880:	c1 f8 10             	sar    eax,0x10
c0018883:	0f b6 c0             	movzx  eax,al
c0018886:	8d 50 01             	lea    edx,[eax+0x1]
c0018889:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001888c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0018892:	b8 00 00 00 00       	mov    eax,0x0
c0018897:	8d 65 f4             	lea    esp,[ebp-0xc]
c001889a:	5b                   	pop    ebx
c001889b:	5e                   	pop    esi
c001889c:	5f                   	pop    edi
c001889d:	5d                   	pop    ebp
c001889e:	c3                   	ret    
c001889f:	90                   	nop

c00188a0 <IOAPIC::write(int, int)>:
c00188a0:	55                   	push   ebp
c00188a1:	89 e5                	mov    ebp,esp
c00188a3:	83 ec 10             	sub    esp,0x10
c00188a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188a9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00188af:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00188b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00188b5:	0f b6 d0             	movzx  edx,al
c00188b8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00188bb:	89 10                	mov    DWORD PTR [eax],edx
c00188bd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00188c0:	8d 50 10             	lea    edx,[eax+0x10]
c00188c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00188c6:	89 02                	mov    DWORD PTR [edx],eax
c00188c8:	90                   	nop
c00188c9:	c9                   	leave  
c00188ca:	c3                   	ret    
c00188cb:	90                   	nop

c00188cc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00188cc:	55                   	push   ebp
c00188cd:	89 e5                	mov    ebp,esp
c00188cf:	53                   	push   ebx
c00188d0:	83 ec 2c             	sub    esp,0x2c
c00188d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00188d6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00188d9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00188dc:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00188df:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00188e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00188e5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00188e8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00188eb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00188ee:	88 d8                	mov    al,bl
c00188f0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00188f3:	88 c8                	mov    al,cl
c00188f5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00188f8:	88 d0                	mov    al,dl
c00188fa:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00188fd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018901:	83 c0 08             	add    eax,0x8
c0018904:	d1 e0                	shl    eax,1
c0018906:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018909:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001890d:	83 c0 08             	add    eax,0x8
c0018910:	d1 e0                	shl    eax,1
c0018912:	83 c0 01             	add    eax,0x1
c0018915:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018918:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001891b:	50                   	push   eax
c001891c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001891f:	e8 6e fe ff ff       	call   c0018792 <IOAPIC::read(int)>
c0018924:	83 c4 08             	add    esp,0x8
c0018927:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001892a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0018931:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018934:	c1 e0 18             	shl    eax,0x18
c0018937:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001893a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001893d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018940:	52                   	push   edx
c0018941:	50                   	push   eax
c0018942:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018945:	e8 56 ff ff ff       	call   c00188a0 <IOAPIC::write(int, int)>
c001894a:	83 c4 0c             	add    esp,0xc
c001894d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018950:	50                   	push   eax
c0018951:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018954:	e8 39 fe ff ff       	call   c0018792 <IOAPIC::read(int)>
c0018959:	83 c4 08             	add    esp,0x8
c001895c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001895f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0018966:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001896d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0018974:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0018978:	85 c0                	test   eax,eax
c001897a:	74 09                	je     c0018985 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001897c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0018983:	eb 07                	jmp    c001898c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0018985:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001898c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0018990:	85 c0                	test   eax,eax
c0018992:	74 09                	je     c001899d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0018994:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001899b:	eb 07                	jmp    c00189a4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001899d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00189a4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00189ab:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00189af:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00189b2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00189b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00189b8:	52                   	push   edx
c00189b9:	50                   	push   eax
c00189ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00189bd:	e8 de fe ff ff       	call   c00188a0 <IOAPIC::write(int, int)>
c00189c2:	83 c4 0c             	add    esp,0xc
c00189c5:	90                   	nop
c00189c6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00189c9:	c9                   	leave  
c00189ca:	c3                   	ret    
c00189cb:	90                   	nop

c00189cc <noCopro(unsigned long)>:
c00189cc:	c3                   	ret    

c00189cd <HalRestart()>:
c00189cd:	e4 64                	in     al,0x64
c00189cf:	a8 02                	test   al,0x2
c00189d1:	75 fa                	jne    c00189cd <HalRestart()>
c00189d3:	b0 fe                	mov    al,0xfe
c00189d5:	e6 64                	out    0x64,al
c00189d7:	c3                   	ret    

c00189d8 <HalShutdown()>:
c00189d8:	c3                   	ret    

c00189d9 <HalSleep()>:
c00189d9:	c3                   	ret    

c00189da <CPU::close(int, int, void*)>:
c00189da:	31 c0                	xor    eax,eax
c00189dc:	c3                   	ret    

c00189dd <x86ReadCMOS(unsigned char)>:
c00189dd:	83 ec 14             	sub    esp,0x14
c00189e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00189e4:	88 04 24             	mov    BYTE PTR [esp],al
c00189e7:	a0 6c cb 02 c0       	mov    al,ds:0xc002cb6c
c00189ec:	0f b6 c0             	movzx  eax,al
c00189ef:	85 c0                	test   eax,eax
c00189f1:	74 04                	je     c00189f7 <x86ReadCMOS(unsigned char)+0x1a>
c00189f3:	b2 00                	mov    dl,0x0
c00189f5:	eb 02                	jmp    c00189f9 <x86ReadCMOS(unsigned char)+0x1c>
c00189f7:	b2 80                	mov    dl,0x80
c00189f9:	8a 04 24             	mov    al,BYTE PTR [esp]
c00189fc:	09 d0                	or     eax,edx
c00189fe:	0f b6 c0             	movzx  eax,al
c0018a01:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0018a08:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018a0c:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018a10:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018a15:	ee                   	out    dx,al
c0018a16:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018a1d:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018a22:	89 c2                	mov    edx,eax
c0018a24:	ec                   	in     al,dx
c0018a25:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018a29:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018a2d:	83 c4 14             	add    esp,0x14
c0018a30:	c3                   	ret    

c0018a31 <x86WriteCMOS(unsigned char, unsigned char)>:
c0018a31:	83 ec 18             	sub    esp,0x18
c0018a34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018a3c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018a40:	88 d0                	mov    al,dl
c0018a42:	88 04 24             	mov    BYTE PTR [esp],al
c0018a45:	a0 6c cb 02 c0       	mov    al,ds:0xc002cb6c
c0018a4a:	0f b6 c0             	movzx  eax,al
c0018a4d:	85 c0                	test   eax,eax
c0018a4f:	74 04                	je     c0018a55 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018a51:	b2 00                	mov    dl,0x0
c0018a53:	eb 02                	jmp    c0018a57 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0018a55:	b2 80                	mov    dl,0x80
c0018a57:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018a5b:	09 d0                	or     eax,edx
c0018a5d:	0f b6 c0             	movzx  eax,al
c0018a60:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018a67:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018a6b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018a6f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018a74:	ee                   	out    dx,al
c0018a75:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018a79:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018a80:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018a84:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0018a88:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018a8d:	ee                   	out    dx,al
c0018a8e:	90                   	nop
c0018a8f:	83 c4 18             	add    esp,0x18
c0018a92:	c3                   	ret    

c0018a93 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018a93:	60                   	pusha  
c0018a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a9c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018aa0:	9c                   	pushf  
c0018aa1:	fa                   	cli    
c0018aa2:	0f 09                	wbinvd 
c0018aa4:	0f 30                	wrmsr  
c0018aa6:	9d                   	popf   
c0018aa7:	89 c2                	mov    edx,eax
c0018aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aad:	89 10                	mov    DWORD PTR [eax],edx
c0018aaf:	61                   	popa   
c0018ab0:	90                   	nop
c0018ab1:	c3                   	ret    

c0018ab2 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018ab2:	60                   	pusha  
c0018ab3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ab7:	89 c1                	mov    ecx,eax
c0018ab9:	9c                   	pushf  
c0018aba:	fa                   	cli    
c0018abb:	0f 09                	wbinvd 
c0018abd:	31 c0                	xor    eax,eax
c0018abf:	31 d2                	xor    edx,edx
c0018ac1:	0f 32                	rdmsr  
c0018ac3:	9d                   	popf   
c0018ac4:	89 c2                	mov    edx,eax
c0018ac6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aca:	89 10                	mov    DWORD PTR [eax],edx
c0018acc:	61                   	popa   
c0018acd:	90                   	nop
c0018ace:	c3                   	ret    

c0018acf <AMD_K6_writeback(int, int, int)>:
c0018acf:	83 ec 20             	sub    esp,0x20
c0018ad2:	a1 70 c1 02 c0       	mov    eax,ds:0xc002c170
c0018ad7:	c1 e8 14             	shr    eax,0x14
c0018ada:	c1 e8 02             	shr    eax,0x2
c0018add:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ae1:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0018ae6:	0f 85 9e 00 00 00    	jne    c0018b8a <AMD_K6_writeback(int, int, int)+0xbb>
c0018aec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018af0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018af4:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0018af9:	75 19                	jne    c0018b14 <AMD_K6_writeback(int, int, int)+0x45>
c0018afb:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018b00:	7f 0a                	jg     c0018b0c <AMD_K6_writeback(int, int, int)+0x3d>
c0018b02:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0018b0a:	eb 08                	jmp    c0018b14 <AMD_K6_writeback(int, int, int)+0x45>
c0018b0c:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018b14:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0018b19:	7c 6e                	jl     c0018b89 <AMD_K6_writeback(int, int, int)+0xba>
c0018b1b:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0018b20:	7e 09                	jle    c0018b2b <AMD_K6_writeback(int, int, int)+0x5c>
c0018b22:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0018b27:	74 36                	je     c0018b5f <AMD_K6_writeback(int, int, int)+0x90>
c0018b29:	eb 5e                	jmp    c0018b89 <AMD_K6_writeback(int, int, int)+0xba>
c0018b2b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b2f:	50                   	push   eax
c0018b30:	68 82 00 00 c0       	push   0xc0000082
c0018b35:	e8 78 ff ff ff       	call   c0018ab2 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018b3a:	83 c4 08             	add    esp,0x8
c0018b3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b41:	d1 e0                	shl    eax,1
c0018b43:	83 e0 7f             	and    eax,0x7f
c0018b46:	89 c2                	mov    edx,eax
c0018b48:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b4c:	50                   	push   eax
c0018b4d:	6a 00                	push   0x0
c0018b4f:	52                   	push   edx
c0018b50:	68 82 00 00 c0       	push   0xc0000082
c0018b55:	e8 39 ff ff ff       	call   c0018a93 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018b5a:	83 c4 10             	add    esp,0x10
c0018b5d:	eb 2b                	jmp    c0018b8a <AMD_K6_writeback(int, int, int)+0xbb>
c0018b5f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b63:	50                   	push   eax
c0018b64:	68 82 00 00 c0       	push   0xc0000082
c0018b69:	e8 44 ff ff ff       	call   c0018ab2 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018b6e:	83 c4 08             	add    esp,0x8
c0018b71:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b75:	50                   	push   eax
c0018b76:	6a 00                	push   0x0
c0018b78:	6a 00                	push   0x0
c0018b7a:	68 82 00 00 c0       	push   0xc0000082
c0018b7f:	e8 0f ff ff ff       	call   c0018a93 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018b84:	83 c4 10             	add    esp,0x10
c0018b87:	eb 01                	jmp    c0018b8a <AMD_K6_writeback(int, int, int)+0xbb>
c0018b89:	90                   	nop
c0018b8a:	90                   	nop
c0018b8b:	83 c4 20             	add    esp,0x20
c0018b8e:	c3                   	ret    

c0018b8f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018b8f:	56                   	push   esi
c0018b90:	53                   	push   ebx
c0018b91:	a1 00 6c 02 c0       	mov    eax,ds:0xc0026c00
c0018b96:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0018b9a:	75 32                	jne    c0018bce <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018b9c:	8b 15 60 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb60
c0018ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ba6:	89 10                	mov    DWORD PTR [eax],edx
c0018ba8:	8b 15 5c cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb5c
c0018bae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018bb2:	89 10                	mov    DWORD PTR [eax],edx
c0018bb4:	8b 15 58 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb58
c0018bba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018bbe:	89 10                	mov    DWORD PTR [eax],edx
c0018bc0:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0018bc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018bca:	89 10                	mov    DWORD PTR [eax],edx
c0018bcc:	eb 5c                	jmp    c0018c2a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018bce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018bd2:	ba 00 00 00 00       	mov    edx,0x0
c0018bd7:	89 d1                	mov    ecx,edx
c0018bd9:	0f a2                	cpuid  
c0018bdb:	89 c6                	mov    esi,eax
c0018bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018be1:	89 30                	mov    DWORD PTR [eax],esi
c0018be3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018be7:	89 18                	mov    DWORD PTR [eax],ebx
c0018be9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018bed:	89 08                	mov    DWORD PTR [eax],ecx
c0018bef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018bf3:	89 10                	mov    DWORD PTR [eax],edx
c0018bf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018bf9:	a3 00 6c 02 c0       	mov    ds:0xc0026c00,eax
c0018bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c02:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c04:	a3 60 cb 02 c0       	mov    ds:0xc002cb60,eax
c0018c09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c0f:	a3 5c cb 02 c0       	mov    ds:0xc002cb5c,eax
c0018c14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c18:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c1a:	a3 58 cb 02 c0       	mov    ds:0xc002cb58,eax
c0018c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c23:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c25:	a3 54 cb 02 c0       	mov    ds:0xc002cb54,eax
c0018c2a:	5b                   	pop    ebx
c0018c2b:	5e                   	pop    esi
c0018c2c:	c3                   	ret    

c0018c2d <cpuidCheckEDX(unsigned int)>:
c0018c2d:	83 ec 10             	sub    esp,0x10
c0018c30:	89 e0                	mov    eax,esp
c0018c32:	50                   	push   eax
c0018c33:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c37:	50                   	push   eax
c0018c38:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018c3c:	50                   	push   eax
c0018c3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c41:	50                   	push   eax
c0018c42:	6a 01                	push   0x1
c0018c44:	e8 46 ff ff ff       	call   c0018b8f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c49:	83 c4 14             	add    esp,0x14
c0018c4c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018c4f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018c53:	0f 95 c0             	setne  al
c0018c56:	83 c4 10             	add    esp,0x10
c0018c59:	c3                   	ret    

c0018c5a <cpuidCheckECX(unsigned int)>:
c0018c5a:	83 ec 10             	sub    esp,0x10
c0018c5d:	89 e0                	mov    eax,esp
c0018c5f:	50                   	push   eax
c0018c60:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c64:	50                   	push   eax
c0018c65:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018c69:	50                   	push   eax
c0018c6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c6e:	50                   	push   eax
c0018c6f:	6a 01                	push   0x1
c0018c71:	e8 19 ff ff ff       	call   c0018b8f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c76:	83 c4 14             	add    esp,0x14
c0018c79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018c7d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018c81:	0f 95 c0             	setne  al
c0018c84:	83 c4 10             	add    esp,0x10
c0018c87:	c3                   	ret    

c0018c88 <cpuidCheckExtendedEBX(unsigned int)>:
c0018c88:	83 ec 10             	sub    esp,0x10
c0018c8b:	89 e0                	mov    eax,esp
c0018c8d:	50                   	push   eax
c0018c8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c92:	50                   	push   eax
c0018c93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018c97:	50                   	push   eax
c0018c98:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c9c:	50                   	push   eax
c0018c9d:	6a 07                	push   0x7
c0018c9f:	e8 eb fe ff ff       	call   c0018b8f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ca4:	83 c4 14             	add    esp,0x14
c0018ca7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cab:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018caf:	0f 95 c0             	setne  al
c0018cb2:	83 c4 10             	add    esp,0x10
c0018cb5:	c3                   	ret    

c0018cb6 <cpuidCheckExtendedECX(unsigned int)>:
c0018cb6:	83 ec 10             	sub    esp,0x10
c0018cb9:	89 e0                	mov    eax,esp
c0018cbb:	50                   	push   eax
c0018cbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018cc0:	50                   	push   eax
c0018cc1:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018cc5:	50                   	push   eax
c0018cc6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018cca:	50                   	push   eax
c0018ccb:	6a 07                	push   0x7
c0018ccd:	e8 bd fe ff ff       	call   c0018b8f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cd2:	83 c4 14             	add    esp,0x14
c0018cd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cd9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018cdd:	0f 95 c0             	setne  al
c0018ce0:	83 c4 10             	add    esp,0x10
c0018ce3:	c3                   	ret    

c0018ce4 <HalDetectFeatures()>:
c0018ce4:	57                   	push   edi
c0018ce5:	56                   	push   esi
c0018ce6:	53                   	push   ebx
c0018ce7:	81 ec 90 00 00 00    	sub    esp,0x90
c0018ced:	83 ec 04             	sub    esp,0x4
c0018cf0:	6a 08                	push   0x8
c0018cf2:	6a 00                	push   0x0
c0018cf4:	68 8c cb 02 c0       	push   0xc002cb8c
c0018cf9:	e8 f2 77 fe ff       	call   c00004f0 <memset>
c0018cfe:	83 c4 10             	add    esp,0x10
c0018d01:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018d06:	83 c8 04             	or     eax,0x4
c0018d09:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018d0e:	83 ec 0c             	sub    esp,0xc
c0018d11:	68 54 53 02 c0       	push   0xc0025354
c0018d16:	e8 4b e2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018d1b:	83 c4 10             	add    esp,0x10
c0018d1e:	e8 d6 74 fe ff       	call   c00001f9 <detectCPUID>
c0018d23:	85 c0                	test   eax,eax
c0018d25:	0f 95 c0             	setne  al
c0018d28:	83 e0 01             	and    eax,0x1
c0018d2b:	83 e0 01             	and    eax,0x1
c0018d2e:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018d31:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018d36:	83 e0 fd             	and    eax,0xfffffffd
c0018d39:	88 c2                	mov    dl,al
c0018d3b:	88 c8                	mov    al,cl
c0018d3d:	09 d0                	or     eax,edx
c0018d3f:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018d44:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018d49:	83 e0 02             	and    eax,0x2
c0018d4c:	0f b6 c0             	movzx  eax,al
c0018d4f:	85 c0                	test   eax,eax
c0018d51:	0f 84 84 02 00 00    	je     c0018fdb <HalDetectFeatures()+0x2f7>
c0018d57:	83 ec 0c             	sub    esp,0xc
c0018d5a:	6a 20                	push   0x20
c0018d5c:	e8 cc fe ff ff       	call   c0018c2d <cpuidCheckEDX(unsigned int)>
c0018d61:	83 c4 10             	add    esp,0x10
c0018d64:	83 e0 01             	and    eax,0x1
c0018d67:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018d6e:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018d73:	83 e0 f7             	and    eax,0xfffffff7
c0018d76:	88 c2                	mov    dl,al
c0018d78:	88 c8                	mov    al,cl
c0018d7a:	09 d0                	or     eax,edx
c0018d7c:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018d81:	83 ec 0c             	sub    esp,0xc
c0018d84:	68 00 00 00 04       	push   0x4000000
c0018d89:	e8 9f fe ff ff       	call   c0018c2d <cpuidCheckEDX(unsigned int)>
c0018d8e:	83 c4 10             	add    esp,0x10
c0018d91:	89 c1                	mov    ecx,eax
c0018d93:	83 e1 01             	and    ecx,0x1
c0018d96:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018d9b:	83 e0 fe             	and    eax,0xfffffffe
c0018d9e:	88 c2                	mov    dl,al
c0018da0:	88 c8                	mov    al,cl
c0018da2:	09 d0                	or     eax,edx
c0018da4:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018da9:	83 ec 0c             	sub    esp,0xc
c0018dac:	68 80 00 00 00       	push   0x80
c0018db1:	e8 77 fe ff ff       	call   c0018c2d <cpuidCheckEDX(unsigned int)>
c0018db6:	83 c4 10             	add    esp,0x10
c0018db9:	89 c1                	mov    ecx,eax
c0018dbb:	c1 e1 07             	shl    ecx,0x7
c0018dbe:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018dc3:	83 e0 7f             	and    eax,0x7f
c0018dc6:	88 c2                	mov    dl,al
c0018dc8:	88 c8                	mov    al,cl
c0018dca:	09 d0                	or     eax,edx
c0018dcc:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018dd1:	83 ec 0c             	sub    esp,0xc
c0018dd4:	68 00 00 80 00       	push   0x800000
c0018dd9:	e8 4f fe ff ff       	call   c0018c2d <cpuidCheckEDX(unsigned int)>
c0018dde:	83 c4 10             	add    esp,0x10
c0018de1:	83 e0 01             	and    eax,0x1
c0018de4:	89 c1                	mov    ecx,eax
c0018de6:	c1 e1 05             	shl    ecx,0x5
c0018de9:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018dee:	83 e0 df             	and    eax,0xffffffdf
c0018df1:	88 c2                	mov    dl,al
c0018df3:	88 c8                	mov    al,cl
c0018df5:	09 d0                	or     eax,edx
c0018df7:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018dfc:	83 ec 0c             	sub    esp,0xc
c0018dff:	6a 01                	push   0x1
c0018e01:	e8 be 43 ff ff       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0018e06:	83 c4 10             	add    esp,0x10
c0018e09:	0f b6 c0             	movzx  eax,al
c0018e0c:	85 c0                	test   eax,eax
c0018e0e:	75 17                	jne    c0018e27 <HalDetectFeatures()+0x143>
c0018e10:	83 ec 0c             	sub    esp,0xc
c0018e13:	68 00 04 00 00       	push   0x400
c0018e18:	e8 a7 43 ff ff       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0018e1d:	83 c4 10             	add    esp,0x10
c0018e20:	0f b6 c0             	movzx  eax,al
c0018e23:	85 c0                	test   eax,eax
c0018e25:	74 04                	je     c0018e2b <HalDetectFeatures()+0x147>
c0018e27:	b0 01                	mov    al,0x1
c0018e29:	eb 02                	jmp    c0018e2d <HalDetectFeatures()+0x149>
c0018e2b:	b0 00                	mov    al,0x0
c0018e2d:	0f b6 c0             	movzx  eax,al
c0018e30:	85 c0                	test   eax,eax
c0018e32:	74 0f                	je     c0018e43 <HalDetectFeatures()+0x15f>
c0018e34:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018e39:	83 e0 fe             	and    eax,0xfffffffe
c0018e3c:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018e41:	eb 28                	jmp    c0018e6b <HalDetectFeatures()+0x187>
c0018e43:	83 ec 0c             	sub    esp,0xc
c0018e46:	68 00 02 00 00       	push   0x200
c0018e4b:	e8 dd fd ff ff       	call   c0018c2d <cpuidCheckEDX(unsigned int)>
c0018e50:	83 c4 10             	add    esp,0x10
c0018e53:	89 c1                	mov    ecx,eax
c0018e55:	83 e1 01             	and    ecx,0x1
c0018e58:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018e5d:	83 e0 fe             	and    eax,0xfffffffe
c0018e60:	88 c2                	mov    dl,al
c0018e62:	88 c8                	mov    al,cl
c0018e64:	09 d0                	or     eax,edx
c0018e66:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018e6b:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018e70:	83 e0 01             	and    eax,0x1
c0018e73:	0f b6 c0             	movzx  eax,al
c0018e76:	85 c0                	test   eax,eax
c0018e78:	74 1c                	je     c0018e96 <HalDetectFeatures()+0x1b2>
c0018e7a:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018e7f:	83 e0 08             	and    eax,0x8
c0018e82:	0f b6 c0             	movzx  eax,al
c0018e85:	85 c0                	test   eax,eax
c0018e87:	75 0d                	jne    c0018e96 <HalDetectFeatures()+0x1b2>
c0018e89:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018e8e:	83 e0 fe             	and    eax,0xfffffffe
c0018e91:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018e96:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0018e9e:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0018ea6:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0018eae:	85 c0                	test   eax,eax
c0018eb0:	0f 84 ab 00 00 00    	je     c0018f61 <HalDetectFeatures()+0x27d>
c0018eb6:	83 ec 0c             	sub    esp,0xc
c0018eb9:	6a 01                	push   0x1
c0018ebb:	e8 9a fd ff ff       	call   c0018c5a <cpuidCheckECX(unsigned int)>
c0018ec0:	83 c4 10             	add    esp,0x10
c0018ec3:	83 e0 01             	and    eax,0x1
c0018ec6:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018ec9:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018ece:	83 e0 fd             	and    eax,0xfffffffd
c0018ed1:	88 c2                	mov    dl,al
c0018ed3:	88 c8                	mov    al,cl
c0018ed5:	09 d0                	or     eax,edx
c0018ed7:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018edc:	83 ec 0c             	sub    esp,0xc
c0018edf:	68 00 02 00 00       	push   0x200
c0018ee4:	e8 71 fd ff ff       	call   c0018c5a <cpuidCheckECX(unsigned int)>
c0018ee9:	83 c4 10             	add    esp,0x10
c0018eec:	83 e0 01             	and    eax,0x1
c0018eef:	89 c1                	mov    ecx,eax
c0018ef1:	c1 e1 04             	shl    ecx,0x4
c0018ef4:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018ef9:	83 e0 ef             	and    eax,0xffffffef
c0018efc:	88 c2                	mov    dl,al
c0018efe:	88 c8                	mov    al,cl
c0018f00:	09 d0                	or     eax,edx
c0018f02:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018f07:	83 ec 0c             	sub    esp,0xc
c0018f0a:	68 00 00 08 00       	push   0x80000
c0018f0f:	e8 46 fd ff ff       	call   c0018c5a <cpuidCheckECX(unsigned int)>
c0018f14:	83 c4 10             	add    esp,0x10
c0018f17:	83 e0 01             	and    eax,0x1
c0018f1a:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018f21:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018f26:	83 e0 fb             	and    eax,0xfffffffb
c0018f29:	88 c2                	mov    dl,al
c0018f2b:	88 c8                	mov    al,cl
c0018f2d:	09 d0                	or     eax,edx
c0018f2f:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018f34:	83 ec 0c             	sub    esp,0xc
c0018f37:	68 00 00 10 00       	push   0x100000
c0018f3c:	e8 19 fd ff ff       	call   c0018c5a <cpuidCheckECX(unsigned int)>
c0018f41:	83 c4 10             	add    esp,0x10
c0018f44:	83 e0 01             	and    eax,0x1
c0018f47:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018f4e:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018f53:	83 e0 f7             	and    eax,0xfffffff7
c0018f56:	88 c2                	mov    dl,al
c0018f58:	88 c8                	mov    al,cl
c0018f5a:	09 d0                	or     eax,edx
c0018f5c:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018f61:	83 ec 0c             	sub    esp,0xc
c0018f64:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018f68:	50                   	push   eax
c0018f69:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018f6d:	50                   	push   eax
c0018f6e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018f72:	50                   	push   eax
c0018f73:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018f77:	50                   	push   eax
c0018f78:	68 00 00 00 80       	push   0x80000000
c0018f7d:	e8 0d fc ff ff       	call   c0018b8f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f82:	83 c4 20             	add    esp,0x20
c0018f85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f89:	3d 00 00 00 80       	cmp    eax,0x80000000
c0018f8e:	76 4b                	jbe    c0018fdb <HalDetectFeatures()+0x2f7>
c0018f90:	83 ec 0c             	sub    esp,0xc
c0018f93:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018f97:	50                   	push   eax
c0018f98:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018f9c:	50                   	push   eax
c0018f9d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018fa1:	50                   	push   eax
c0018fa2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018fa6:	50                   	push   eax
c0018fa7:	68 01 00 00 80       	push   0x80000001
c0018fac:	e8 de fb ff ff       	call   c0018b8f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fb1:	83 c4 20             	add    esp,0x20
c0018fb4:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018fb9:	83 e0 bf             	and    eax,0xffffffbf
c0018fbc:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018fc1:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0018fc6:	83 e0 fd             	and    eax,0xfffffffd
c0018fc9:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0018fce:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0018fd3:	83 e0 fe             	and    eax,0xfffffffe
c0018fd6:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0018fdb:	83 ec 0c             	sub    esp,0xc
c0018fde:	68 00 04 00 00       	push   0x400
c0018fe3:	e8 dc 41 ff ff       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0018fe8:	83 c4 10             	add    esp,0x10
c0018feb:	0f b6 c0             	movzx  eax,al
c0018fee:	85 c0                	test   eax,eax
c0018ff0:	74 0d                	je     c0018fff <HalDetectFeatures()+0x31b>
c0018ff2:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018ff7:	83 e0 fb             	and    eax,0xfffffffb
c0018ffa:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018fff:	c6 05 88 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb88,0x1
c0019006:	83 ec 04             	sub    esp,0x4
c0019009:	6a 0d                	push   0xd
c001900b:	6a 00                	push   0x0
c001900d:	68 70 cb 02 c0       	push   0xc002cb70
c0019012:	e8 d9 74 fe ff       	call   c00004f0 <memset>
c0019017:	83 c4 10             	add    esp,0x10
c001901a:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001901f:	83 e0 02             	and    eax,0x2
c0019022:	0f b6 c0             	movzx  eax,al
c0019025:	85 c0                	test   eax,eax
c0019027:	0f 84 16 08 00 00    	je     c0019843 <HalDetectFeatures()+0xb5f>
c001902d:	83 ec 0c             	sub    esp,0xc
c0019030:	6a 10                	push   0x10
c0019032:	e8 f6 fb ff ff       	call   c0018c2d <cpuidCheckEDX(unsigned int)>
c0019037:	83 c4 10             	add    esp,0x10
c001903a:	83 e0 01             	and    eax,0x1
c001903d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019044:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019049:	83 e0 f7             	and    eax,0xfffffff7
c001904c:	88 c2                	mov    dl,al
c001904e:	88 c8                	mov    al,cl
c0019050:	09 d0                	or     eax,edx
c0019052:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0019057:	83 ec 0c             	sub    esp,0xc
c001905a:	6a 40                	push   0x40
c001905c:	e8 cc fb ff ff       	call   c0018c2d <cpuidCheckEDX(unsigned int)>
c0019061:	83 c4 10             	add    esp,0x10
c0019064:	83 e0 01             	and    eax,0x1
c0019067:	89 c1                	mov    ecx,eax
c0019069:	c1 e1 04             	shl    ecx,0x4
c001906c:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019071:	83 e0 ef             	and    eax,0xffffffef
c0019074:	88 c2                	mov    dl,al
c0019076:	88 c8                	mov    al,cl
c0019078:	09 d0                	or     eax,edx
c001907a:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c001907f:	83 ec 0c             	sub    esp,0xc
c0019082:	6a 08                	push   0x8
c0019084:	e8 a4 fb ff ff       	call   c0018c2d <cpuidCheckEDX(unsigned int)>
c0019089:	83 c4 10             	add    esp,0x10
c001908c:	83 e0 01             	and    eax,0x1
c001908f:	89 c1                	mov    ecx,eax
c0019091:	c1 e1 05             	shl    ecx,0x5
c0019094:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019099:	83 e0 df             	and    eax,0xffffffdf
c001909c:	88 c2                	mov    dl,al
c001909e:	88 c8                	mov    al,cl
c00190a0:	09 d0                	or     eax,edx
c00190a2:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c00190a7:	83 ec 0c             	sub    esp,0xc
c00190aa:	68 00 20 00 00       	push   0x2000
c00190af:	e8 79 fb ff ff       	call   c0018c2d <cpuidCheckEDX(unsigned int)>
c00190b4:	83 c4 10             	add    esp,0x10
c00190b7:	83 e0 01             	and    eax,0x1
c00190ba:	89 c1                	mov    ecx,eax
c00190bc:	c1 e1 06             	shl    ecx,0x6
c00190bf:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c00190c4:	83 e0 bf             	and    eax,0xffffffbf
c00190c7:	88 c2                	mov    dl,al
c00190c9:	88 c8                	mov    al,cl
c00190cb:	09 d0                	or     eax,edx
c00190cd:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c00190d2:	83 ec 0c             	sub    esp,0xc
c00190d5:	68 00 00 01 00       	push   0x10000
c00190da:	e8 4e fb ff ff       	call   c0018c2d <cpuidCheckEDX(unsigned int)>
c00190df:	83 c4 10             	add    esp,0x10
c00190e2:	89 c1                	mov    ecx,eax
c00190e4:	c1 e1 07             	shl    ecx,0x7
c00190e7:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c00190ec:	83 e0 7f             	and    eax,0x7f
c00190ef:	88 c2                	mov    dl,al
c00190f1:	88 c8                	mov    al,cl
c00190f3:	09 d0                	or     eax,edx
c00190f5:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c00190fa:	83 ec 0c             	sub    esp,0xc
c00190fd:	6a 01                	push   0x1
c00190ff:	e8 29 fb ff ff       	call   c0018c2d <cpuidCheckEDX(unsigned int)>
c0019104:	83 c4 10             	add    esp,0x10
c0019107:	83 e0 01             	and    eax,0x1
c001910a:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019111:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019116:	83 e0 f7             	and    eax,0xfffffff7
c0019119:	88 c2                	mov    dl,al
c001911b:	88 c8                	mov    al,cl
c001911d:	09 d0                	or     eax,edx
c001911f:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019124:	83 ec 0c             	sub    esp,0xc
c0019127:	68 00 08 00 00       	push   0x800
c001912c:	e8 fc fa ff ff       	call   c0018c2d <cpuidCheckEDX(unsigned int)>
c0019131:	83 c4 10             	add    esp,0x10
c0019134:	89 c1                	mov    ecx,eax
c0019136:	83 e1 01             	and    ecx,0x1
c0019139:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001913e:	83 e0 fe             	and    eax,0xfffffffe
c0019141:	88 c2                	mov    dl,al
c0019143:	88 c8                	mov    al,cl
c0019145:	09 d0                	or     eax,edx
c0019147:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c001914c:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019151:	83 e0 40             	and    eax,0x40
c0019154:	0f b6 c0             	movzx  eax,al
c0019157:	85 c0                	test   eax,eax
c0019159:	74 0a                	je     c0019165 <HalDetectFeatures()+0x481>
c001915b:	c7 05 68 cb 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002cb68,0x100
c0019165:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c001916a:	83 e0 80             	and    eax,0xffffff80
c001916d:	0f b6 c0             	movzx  eax,al
c0019170:	85 c0                	test   eax,eax
c0019172:	74 0a                	je     c001917e <HalDetectFeatures()+0x49a>
c0019174:	c7 05 64 cb 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002cb64,0x80
c001917e:	83 ec 0c             	sub    esp,0xc
c0019181:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019185:	50                   	push   eax
c0019186:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001918a:	50                   	push   eax
c001918b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001918f:	50                   	push   eax
c0019190:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019194:	50                   	push   eax
c0019195:	6a 00                	push   0x0
c0019197:	e8 f3 f9 ff ff       	call   c0018b8f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001919c:	83 c4 20             	add    esp,0x20
c001919f:	c7 44 24 48 70 cb 02 c0 	mov    DWORD PTR [esp+0x48],0xc002cb70
c00191a7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191ab:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00191af:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c00191b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00191bb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00191bf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00191c3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00191c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00191cb:	89 c6                	mov    esi,eax
c00191cd:	89 d7                	mov    edi,edx
c00191cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00191d1:	89 c8                	mov    eax,ecx
c00191d3:	89 fa                	mov    edx,edi
c00191d5:	89 f3                	mov    ebx,esi
c00191d7:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00191db:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00191df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00191e3:	b8 74 cb 02 c0       	mov    eax,0xc002cb74
c00191e8:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00191ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191f0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00191f4:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00191fc:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0019200:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0019204:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0019208:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001920c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0019210:	89 c6                	mov    esi,eax
c0019212:	89 d7                	mov    edi,edx
c0019214:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019216:	89 c8                	mov    eax,ecx
c0019218:	89 fa                	mov    edx,edi
c001921a:	89 f3                	mov    ebx,esi
c001921c:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0019220:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0019224:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019228:	b8 78 cb 02 c0       	mov    eax,0xc002cb78
c001922d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0019234:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019238:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c001923c:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0019244:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001924b:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c001924f:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019253:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001925a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001925e:	89 c6                	mov    esi,eax
c0019260:	89 d7                	mov    edi,edx
c0019262:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019264:	89 c8                	mov    eax,ecx
c0019266:	89 fa                	mov    edx,edi
c0019268:	89 f3                	mov    ebx,esi
c001926a:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001926e:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019272:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019276:	83 ec 08             	sub    esp,0x8
c0019279:	68 69 53 02 c0       	push   0xc0025369
c001927e:	68 70 cb 02 c0       	push   0xc002cb70
c0019283:	e8 f8 74 fe ff       	call   c0000780 <strcmp>
c0019288:	83 c4 10             	add    esp,0x10
c001928b:	85 c0                	test   eax,eax
c001928d:	74 19                	je     c00192a8 <HalDetectFeatures()+0x5c4>
c001928f:	83 ec 08             	sub    esp,0x8
c0019292:	68 76 53 02 c0       	push   0xc0025376
c0019297:	68 70 cb 02 c0       	push   0xc002cb70
c001929c:	e8 df 74 fe ff       	call   c0000780 <strcmp>
c00192a1:	83 c4 10             	add    esp,0x10
c00192a4:	85 c0                	test   eax,eax
c00192a6:	75 04                	jne    c00192ac <HalDetectFeatures()+0x5c8>
c00192a8:	b0 01                	mov    al,0x1
c00192aa:	eb 02                	jmp    c00192ae <HalDetectFeatures()+0x5ca>
c00192ac:	b0 00                	mov    al,0x0
c00192ae:	0f b6 c0             	movzx  eax,al
c00192b1:	85 c0                	test   eax,eax
c00192b3:	74 0f                	je     c00192c4 <HalDetectFeatures()+0x5e0>
c00192b5:	c7 05 84 cb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x2
c00192bf:	e9 0d 03 00 00       	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c00192c4:	83 ec 08             	sub    esp,0x8
c00192c7:	68 83 53 02 c0       	push   0xc0025383
c00192cc:	68 70 cb 02 c0       	push   0xc002cb70
c00192d1:	e8 aa 74 fe ff       	call   c0000780 <strcmp>
c00192d6:	83 c4 10             	add    esp,0x10
c00192d9:	85 c0                	test   eax,eax
c00192db:	74 19                	je     c00192f6 <HalDetectFeatures()+0x612>
c00192dd:	83 ec 08             	sub    esp,0x8
c00192e0:	68 90 53 02 c0       	push   0xc0025390
c00192e5:	68 70 cb 02 c0       	push   0xc002cb70
c00192ea:	e8 91 74 fe ff       	call   c0000780 <strcmp>
c00192ef:	83 c4 10             	add    esp,0x10
c00192f2:	85 c0                	test   eax,eax
c00192f4:	75 04                	jne    c00192fa <HalDetectFeatures()+0x616>
c00192f6:	b0 01                	mov    al,0x1
c00192f8:	eb 02                	jmp    c00192fc <HalDetectFeatures()+0x618>
c00192fa:	b0 00                	mov    al,0x0
c00192fc:	0f b6 c0             	movzx  eax,al
c00192ff:	85 c0                	test   eax,eax
c0019301:	74 0f                	je     c0019312 <HalDetectFeatures()+0x62e>
c0019303:	c7 05 84 cb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x4
c001930d:	e9 bf 02 00 00       	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c0019312:	83 ec 08             	sub    esp,0x8
c0019315:	68 9d 53 02 c0       	push   0xc002539d
c001931a:	68 70 cb 02 c0       	push   0xc002cb70
c001931f:	e8 5c 74 fe ff       	call   c0000780 <strcmp>
c0019324:	83 c4 10             	add    esp,0x10
c0019327:	85 c0                	test   eax,eax
c0019329:	74 19                	je     c0019344 <HalDetectFeatures()+0x660>
c001932b:	83 ec 08             	sub    esp,0x8
c001932e:	68 aa 53 02 c0       	push   0xc00253aa
c0019333:	68 70 cb 02 c0       	push   0xc002cb70
c0019338:	e8 43 74 fe ff       	call   c0000780 <strcmp>
c001933d:	83 c4 10             	add    esp,0x10
c0019340:	85 c0                	test   eax,eax
c0019342:	75 04                	jne    c0019348 <HalDetectFeatures()+0x664>
c0019344:	b0 01                	mov    al,0x1
c0019346:	eb 02                	jmp    c001934a <HalDetectFeatures()+0x666>
c0019348:	b0 00                	mov    al,0x0
c001934a:	0f b6 c0             	movzx  eax,al
c001934d:	85 c0                	test   eax,eax
c001934f:	74 0f                	je     c0019360 <HalDetectFeatures()+0x67c>
c0019351:	c7 05 84 cb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x5
c001935b:	e9 71 02 00 00       	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c0019360:	83 ec 08             	sub    esp,0x8
c0019363:	68 b7 53 02 c0       	push   0xc00253b7
c0019368:	68 70 cb 02 c0       	push   0xc002cb70
c001936d:	e8 0e 74 fe ff       	call   c0000780 <strcmp>
c0019372:	83 c4 10             	add    esp,0x10
c0019375:	85 c0                	test   eax,eax
c0019377:	0f 94 c0             	sete   al
c001937a:	0f b6 c0             	movzx  eax,al
c001937d:	85 c0                	test   eax,eax
c001937f:	74 0f                	je     c0019390 <HalDetectFeatures()+0x6ac>
c0019381:	c7 05 84 cb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x1
c001938b:	e9 41 02 00 00       	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c0019390:	83 ec 08             	sub    esp,0x8
c0019393:	68 c4 53 02 c0       	push   0xc00253c4
c0019398:	68 70 cb 02 c0       	push   0xc002cb70
c001939d:	e8 de 73 fe ff       	call   c0000780 <strcmp>
c00193a2:	83 c4 10             	add    esp,0x10
c00193a5:	85 c0                	test   eax,eax
c00193a7:	0f 94 c0             	sete   al
c00193aa:	0f b6 c0             	movzx  eax,al
c00193ad:	85 c0                	test   eax,eax
c00193af:	74 0f                	je     c00193c0 <HalDetectFeatures()+0x6dc>
c00193b1:	c7 05 84 cb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x3
c00193bb:	e9 11 02 00 00       	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c00193c0:	83 ec 08             	sub    esp,0x8
c00193c3:	68 83 53 02 c0       	push   0xc0025383
c00193c8:	68 70 cb 02 c0       	push   0xc002cb70
c00193cd:	e8 ae 73 fe ff       	call   c0000780 <strcmp>
c00193d2:	83 c4 10             	add    esp,0x10
c00193d5:	85 c0                	test   eax,eax
c00193d7:	0f 94 c0             	sete   al
c00193da:	0f b6 c0             	movzx  eax,al
c00193dd:	85 c0                	test   eax,eax
c00193df:	74 0f                	je     c00193f0 <HalDetectFeatures()+0x70c>
c00193e1:	c7 05 84 cb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x6
c00193eb:	e9 e1 01 00 00       	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c00193f0:	83 ec 08             	sub    esp,0x8
c00193f3:	68 d1 53 02 c0       	push   0xc00253d1
c00193f8:	68 70 cb 02 c0       	push   0xc002cb70
c00193fd:	e8 7e 73 fe ff       	call   c0000780 <strcmp>
c0019402:	83 c4 10             	add    esp,0x10
c0019405:	85 c0                	test   eax,eax
c0019407:	0f 94 c0             	sete   al
c001940a:	0f b6 c0             	movzx  eax,al
c001940d:	85 c0                	test   eax,eax
c001940f:	74 0f                	je     c0019420 <HalDetectFeatures()+0x73c>
c0019411:	c7 05 84 cb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x7
c001941b:	e9 b1 01 00 00       	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c0019420:	83 ec 08             	sub    esp,0x8
c0019423:	68 de 53 02 c0       	push   0xc00253de
c0019428:	68 70 cb 02 c0       	push   0xc002cb70
c001942d:	e8 4e 73 fe ff       	call   c0000780 <strcmp>
c0019432:	83 c4 10             	add    esp,0x10
c0019435:	85 c0                	test   eax,eax
c0019437:	0f 94 c0             	sete   al
c001943a:	0f b6 c0             	movzx  eax,al
c001943d:	85 c0                	test   eax,eax
c001943f:	74 0f                	je     c0019450 <HalDetectFeatures()+0x76c>
c0019441:	c7 05 84 cb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x8
c001944b:	e9 81 01 00 00       	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c0019450:	83 ec 08             	sub    esp,0x8
c0019453:	68 eb 53 02 c0       	push   0xc00253eb
c0019458:	68 70 cb 02 c0       	push   0xc002cb70
c001945d:	e8 1e 73 fe ff       	call   c0000780 <strcmp>
c0019462:	83 c4 10             	add    esp,0x10
c0019465:	85 c0                	test   eax,eax
c0019467:	0f 94 c0             	sete   al
c001946a:	0f b6 c0             	movzx  eax,al
c001946d:	85 c0                	test   eax,eax
c001946f:	74 0f                	je     c0019480 <HalDetectFeatures()+0x79c>
c0019471:	c7 05 84 cb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x9
c001947b:	e9 51 01 00 00       	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c0019480:	83 ec 08             	sub    esp,0x8
c0019483:	68 f8 53 02 c0       	push   0xc00253f8
c0019488:	68 70 cb 02 c0       	push   0xc002cb70
c001948d:	e8 ee 72 fe ff       	call   c0000780 <strcmp>
c0019492:	83 c4 10             	add    esp,0x10
c0019495:	85 c0                	test   eax,eax
c0019497:	0f 94 c0             	sete   al
c001949a:	0f b6 c0             	movzx  eax,al
c001949d:	85 c0                	test   eax,eax
c001949f:	74 0f                	je     c00194b0 <HalDetectFeatures()+0x7cc>
c00194a1:	c7 05 84 cb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xa
c00194ab:	e9 21 01 00 00       	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c00194b0:	83 ec 08             	sub    esp,0x8
c00194b3:	68 05 54 02 c0       	push   0xc0025405
c00194b8:	68 70 cb 02 c0       	push   0xc002cb70
c00194bd:	e8 be 72 fe ff       	call   c0000780 <strcmp>
c00194c2:	83 c4 10             	add    esp,0x10
c00194c5:	85 c0                	test   eax,eax
c00194c7:	0f 94 c0             	sete   al
c00194ca:	0f b6 c0             	movzx  eax,al
c00194cd:	85 c0                	test   eax,eax
c00194cf:	74 0f                	je     c00194e0 <HalDetectFeatures()+0x7fc>
c00194d1:	c7 05 84 cb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xb
c00194db:	e9 f1 00 00 00       	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c00194e0:	83 ec 08             	sub    esp,0x8
c00194e3:	68 12 54 02 c0       	push   0xc0025412
c00194e8:	68 70 cb 02 c0       	push   0xc002cb70
c00194ed:	e8 8e 72 fe ff       	call   c0000780 <strcmp>
c00194f2:	83 c4 10             	add    esp,0x10
c00194f5:	85 c0                	test   eax,eax
c00194f7:	0f 94 c0             	sete   al
c00194fa:	0f b6 c0             	movzx  eax,al
c00194fd:	85 c0                	test   eax,eax
c00194ff:	74 0f                	je     c0019510 <HalDetectFeatures()+0x82c>
c0019501:	c7 05 84 cb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xc
c001950b:	e9 c1 00 00 00       	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c0019510:	83 ec 08             	sub    esp,0x8
c0019513:	68 1f 54 02 c0       	push   0xc002541f
c0019518:	68 70 cb 02 c0       	push   0xc002cb70
c001951d:	e8 5e 72 fe ff       	call   c0000780 <strcmp>
c0019522:	83 c4 10             	add    esp,0x10
c0019525:	85 c0                	test   eax,eax
c0019527:	0f 94 c0             	sete   al
c001952a:	0f b6 c0             	movzx  eax,al
c001952d:	85 c0                	test   eax,eax
c001952f:	74 0f                	je     c0019540 <HalDetectFeatures()+0x85c>
c0019531:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c001953b:	e9 91 00 00 00       	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c0019540:	83 ec 08             	sub    esp,0x8
c0019543:	68 2c 54 02 c0       	push   0xc002542c
c0019548:	68 70 cb 02 c0       	push   0xc002cb70
c001954d:	e8 2e 72 fe ff       	call   c0000780 <strcmp>
c0019552:	83 c4 10             	add    esp,0x10
c0019555:	85 c0                	test   eax,eax
c0019557:	0f 94 c0             	sete   al
c001955a:	0f b6 c0             	movzx  eax,al
c001955d:	85 c0                	test   eax,eax
c001955f:	74 0c                	je     c001956d <HalDetectFeatures()+0x889>
c0019561:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c001956b:	eb 64                	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c001956d:	83 ec 08             	sub    esp,0x8
c0019570:	68 39 54 02 c0       	push   0xc0025439
c0019575:	68 70 cb 02 c0       	push   0xc002cb70
c001957a:	e8 01 72 fe ff       	call   c0000780 <strcmp>
c001957f:	83 c4 10             	add    esp,0x10
c0019582:	85 c0                	test   eax,eax
c0019584:	0f 94 c0             	sete   al
c0019587:	0f b6 c0             	movzx  eax,al
c001958a:	85 c0                	test   eax,eax
c001958c:	74 0c                	je     c001959a <HalDetectFeatures()+0x8b6>
c001958e:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c0019598:	eb 37                	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c001959a:	83 ec 08             	sub    esp,0x8
c001959d:	68 46 54 02 c0       	push   0xc0025446
c00195a2:	68 70 cb 02 c0       	push   0xc002cb70
c00195a7:	e8 d4 71 fe ff       	call   c0000780 <strcmp>
c00195ac:	83 c4 10             	add    esp,0x10
c00195af:	85 c0                	test   eax,eax
c00195b1:	0f 94 c0             	sete   al
c00195b4:	0f b6 c0             	movzx  eax,al
c00195b7:	85 c0                	test   eax,eax
c00195b9:	74 0c                	je     c00195c7 <HalDetectFeatures()+0x8e3>
c00195bb:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c00195c5:	eb 0a                	jmp    c00195d1 <HalDetectFeatures()+0x8ed>
c00195c7:	c7 05 84 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x0
c00195d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195d5:	83 f8 06             	cmp    eax,0x6
c00195d8:	0f 86 cc 00 00 00    	jbe    c00196aa <HalDetectFeatures()+0x9c6>
c00195de:	83 ec 0c             	sub    esp,0xc
c00195e1:	68 80 00 00 00       	push   0x80
c00195e6:	e8 9d f6 ff ff       	call   c0018c88 <cpuidCheckExtendedEBX(unsigned int)>
c00195eb:	83 c4 10             	add    esp,0x10
c00195ee:	89 c1                	mov    ecx,eax
c00195f0:	83 e1 01             	and    ecx,0x1
c00195f3:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00195f8:	83 e0 fe             	and    eax,0xfffffffe
c00195fb:	88 c2                	mov    dl,al
c00195fd:	88 c8                	mov    al,cl
c00195ff:	09 d0                	or     eax,edx
c0019601:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019606:	83 ec 0c             	sub    esp,0xc
c0019609:	68 00 00 10 00       	push   0x100000
c001960e:	e8 75 f6 ff ff       	call   c0018c88 <cpuidCheckExtendedEBX(unsigned int)>
c0019613:	83 c4 10             	add    esp,0x10
c0019616:	83 e0 01             	and    eax,0x1
c0019619:	89 c1                	mov    ecx,eax
c001961b:	c1 e1 06             	shl    ecx,0x6
c001961e:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019623:	83 e0 bf             	and    eax,0xffffffbf
c0019626:	88 c2                	mov    dl,al
c0019628:	88 c8                	mov    al,cl
c001962a:	09 d0                	or     eax,edx
c001962c:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019631:	83 ec 0c             	sub    esp,0xc
c0019634:	68 00 00 04 00       	push   0x40000
c0019639:	e8 4a f6 ff ff       	call   c0018c88 <cpuidCheckExtendedEBX(unsigned int)>
c001963e:	83 c4 10             	add    esp,0x10
c0019641:	83 e0 01             	and    eax,0x1
c0019644:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019647:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c001964c:	83 e0 fd             	and    eax,0xfffffffd
c001964f:	88 c2                	mov    dl,al
c0019651:	88 c8                	mov    al,cl
c0019653:	09 d0                	or     eax,edx
c0019655:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001965a:	83 ec 0c             	sub    esp,0xc
c001965d:	6a 04                	push   0x4
c001965f:	e8 52 f6 ff ff       	call   c0018cb6 <cpuidCheckExtendedECX(unsigned int)>
c0019664:	83 c4 10             	add    esp,0x10
c0019667:	83 e0 01             	and    eax,0x1
c001966a:	89 c1                	mov    ecx,eax
c001966c:	c1 e1 05             	shl    ecx,0x5
c001966f:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019674:	83 e0 df             	and    eax,0xffffffdf
c0019677:	88 c2                	mov    dl,al
c0019679:	88 c8                	mov    al,cl
c001967b:	09 d0                	or     eax,edx
c001967d:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019682:	83 ec 0c             	sub    esp,0xc
c0019685:	6a 20                	push   0x20
c0019687:	e8 2a f6 ff ff       	call   c0018cb6 <cpuidCheckExtendedECX(unsigned int)>
c001968c:	83 c4 10             	add    esp,0x10
c001968f:	83 e0 01             	and    eax,0x1
c0019692:	89 c1                	mov    ecx,eax
c0019694:	c1 e1 04             	shl    ecx,0x4
c0019697:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001969c:	83 e0 ef             	and    eax,0xffffffef
c001969f:	88 c2                	mov    dl,al
c00196a1:	88 c8                	mov    al,cl
c00196a3:	09 d0                	or     eax,edx
c00196a5:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00196aa:	83 ec 0c             	sub    esp,0xc
c00196ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196b1:	50                   	push   eax
c00196b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00196b6:	50                   	push   eax
c00196b7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00196bb:	50                   	push   eax
c00196bc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00196c0:	50                   	push   eax
c00196c1:	6a 01                	push   0x1
c00196c3:	e8 c7 f4 ff ff       	call   c0018b8f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196c8:	83 c4 20             	add    esp,0x20
c00196cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196cf:	83 e0 0f             	and    eax,0xf
c00196d2:	a2 80 cb 02 c0       	mov    ds:0xc002cb80,al
c00196d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196db:	c1 e8 04             	shr    eax,0x4
c00196de:	83 e0 0f             	and    eax,0xf
c00196e1:	a2 7e cb 02 c0       	mov    ds:0xc002cb7e,al
c00196e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196ea:	c1 e8 08             	shr    eax,0x8
c00196ed:	83 e0 0f             	and    eax,0xf
c00196f0:	a2 7d cb 02 c0       	mov    ds:0xc002cb7d,al
c00196f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196f9:	c1 e8 0c             	shr    eax,0xc
c00196fc:	83 e0 03             	and    eax,0x3
c00196ff:	a2 7f cb 02 c0       	mov    ds:0xc002cb7f,al
c0019704:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c0019709:	0f b6 c0             	movzx  eax,al
c001970c:	83 f8 06             	cmp    eax,0x6
c001970f:	74 0d                	je     c001971e <HalDetectFeatures()+0xa3a>
c0019711:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c0019716:	0f b6 c0             	movzx  eax,al
c0019719:	83 f8 0f             	cmp    eax,0xf
c001971c:	75 18                	jne    c0019736 <HalDetectFeatures()+0xa52>
c001971e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019722:	c1 e8 10             	shr    eax,0x10
c0019725:	c1 e0 04             	shl    eax,0x4
c0019728:	88 c2                	mov    dl,al
c001972a:	a0 7e cb 02 c0       	mov    al,ds:0xc002cb7e
c001972f:	09 d0                	or     eax,edx
c0019731:	a2 7e cb 02 c0       	mov    ds:0xc002cb7e,al
c0019736:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c001973b:	0f b6 c0             	movzx  eax,al
c001973e:	83 f8 0f             	cmp    eax,0xf
c0019741:	75 15                	jne    c0019758 <HalDetectFeatures()+0xa74>
c0019743:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019747:	c1 e8 14             	shr    eax,0x14
c001974a:	88 c2                	mov    dl,al
c001974c:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c0019751:	01 d0                	add    eax,edx
c0019753:	a2 7d cb 02 c0       	mov    ds:0xc002cb7d,al
c0019758:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019760:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019768:	85 c0                	test   eax,eax
c001976a:	74 2d                	je     c0019799 <HalDetectFeatures()+0xab5>
c001976c:	83 ec 0c             	sub    esp,0xc
c001976f:	68 00 00 00 40       	push   0x40000000
c0019774:	e8 e1 f4 ff ff       	call   c0018c5a <cpuidCheckECX(unsigned int)>
c0019779:	83 c4 10             	add    esp,0x10
c001977c:	83 e0 01             	and    eax,0x1
c001977f:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019786:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c001978b:	83 e0 fb             	and    eax,0xfffffffb
c001978e:	88 c2                	mov    dl,al
c0019790:	88 c8                	mov    al,cl
c0019792:	09 d0                	or     eax,edx
c0019794:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0019799:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c001979e:	83 c8 04             	or     eax,0x4
c00197a1:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00197a6:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00197ab:	83 c8 08             	or     eax,0x8
c00197ae:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00197b3:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00197b8:	83 c8 10             	or     eax,0x10
c00197bb:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00197c0:	83 ec 0c             	sub    esp,0xc
c00197c3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00197c7:	50                   	push   eax
c00197c8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00197cc:	50                   	push   eax
c00197cd:	8d 44 24 24          	lea    eax,[esp+0x24]
c00197d1:	50                   	push   eax
c00197d2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00197d6:	50                   	push   eax
c00197d7:	68 00 00 00 80       	push   0x80000000
c00197dc:	e8 ae f3 ff ff       	call   c0018b8f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00197e1:	83 c4 20             	add    esp,0x20
c00197e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197e8:	3d 00 00 00 80       	cmp    eax,0x80000000
c00197ed:	0f 86 96 01 00 00    	jbe    c0019989 <HalDetectFeatures()+0xca5>
c00197f3:	83 ec 0c             	sub    esp,0xc
c00197f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00197fa:	50                   	push   eax
c00197fb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00197ff:	50                   	push   eax
c0019800:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019804:	50                   	push   eax
c0019805:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019809:	50                   	push   eax
c001980a:	68 01 00 00 80       	push   0x80000001
c001980f:	e8 7b f3 ff ff       	call   c0018b8f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019814:	83 c4 20             	add    esp,0x20
c0019817:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c001981c:	83 e0 7f             	and    eax,0x7f
c001981f:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019824:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019829:	83 e0 fb             	and    eax,0xfffffffb
c001982c:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019831:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019836:	83 e0 fd             	and    eax,0xfffffffd
c0019839:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c001983e:	e9 46 01 00 00       	jmp    c0019989 <HalDetectFeatures()+0xca5>
c0019843:	83 ec 08             	sub    esp,0x8
c0019846:	68 b7 53 02 c0       	push   0xc00253b7
c001984b:	68 70 cb 02 c0       	push   0xc002cb70
c0019850:	e8 fb 6d fe ff       	call   c0000650 <strcpy>
c0019855:	83 c4 10             	add    esp,0x10
c0019858:	c7 05 84 cb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x1
c0019862:	e8 5c 69 fe ff       	call   c00001c3 <is486>
c0019867:	85 c0                	test   eax,eax
c0019869:	0f 95 c0             	setne  al
c001986c:	0f b6 c0             	movzx  eax,al
c001986f:	85 c0                	test   eax,eax
c0019871:	0f 84 8d 00 00 00    	je     c0019904 <HalDetectFeatures()+0xc20>
c0019877:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c001987c:	83 c8 04             	or     eax,0x4
c001987f:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019884:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019889:	83 c8 08             	or     eax,0x8
c001988c:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019891:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019896:	83 c8 10             	or     eax,0x10
c0019899:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001989e:	0f 20 c0             	mov    eax,cr0
c00198a1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00198a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00198a9:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c00198b0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00198b7:	83 e0 04             	and    eax,0x4
c00198ba:	74 1e                	je     c00198da <HalDetectFeatures()+0xbf6>
c00198bc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00198c3:	83 e0 10             	and    eax,0x10
c00198c6:	75 12                	jne    c00198da <HalDetectFeatures()+0xbf6>
c00198c8:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00198cd:	83 e0 f7             	and    eax,0xfffffff7
c00198d0:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00198d5:	e9 af 00 00 00       	jmp    c0019989 <HalDetectFeatures()+0xca5>
c00198da:	e8 bf 68 fe ff       	call   c000019e <hasLegacyFPU>
c00198df:	83 e0 01             	and    eax,0x1
c00198e2:	83 e0 01             	and    eax,0x1
c00198e5:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00198ec:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00198f1:	83 e0 f7             	and    eax,0xfffffff7
c00198f4:	88 c2                	mov    dl,al
c00198f6:	88 c8                	mov    al,cl
c00198f8:	09 d0                	or     eax,edx
c00198fa:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00198ff:	e9 85 00 00 00       	jmp    c0019989 <HalDetectFeatures()+0xca5>
c0019904:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019909:	83 e0 fb             	and    eax,0xfffffffb
c001990c:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019911:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019916:	83 e0 f7             	and    eax,0xfffffff7
c0019919:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001991e:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019923:	83 e0 ef             	and    eax,0xffffffef
c0019926:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001992b:	0f 20 c0             	mov    eax,cr0
c001992e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019932:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019936:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c001993d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019944:	83 e0 04             	and    eax,0x4
c0019947:	74 1b                	je     c0019964 <HalDetectFeatures()+0xc80>
c0019949:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019950:	83 e0 10             	and    eax,0x10
c0019953:	75 0f                	jne    c0019964 <HalDetectFeatures()+0xc80>
c0019955:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001995a:	83 e0 f7             	and    eax,0xfffffff7
c001995d:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019962:	eb 25                	jmp    c0019989 <HalDetectFeatures()+0xca5>
c0019964:	e8 35 68 fe ff       	call   c000019e <hasLegacyFPU>
c0019969:	83 e0 01             	and    eax,0x1
c001996c:	83 e0 01             	and    eax,0x1
c001996f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019976:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001997b:	83 e0 f7             	and    eax,0xfffffff7
c001997e:	88 c2                	mov    dl,al
c0019980:	88 c8                	mov    al,cl
c0019982:	09 d0                	or     eax,edx
c0019984:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019989:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001998e:	83 e0 08             	and    eax,0x8
c0019991:	0f b6 c0             	movzx  eax,al
c0019994:	85 c0                	test   eax,eax
c0019996:	75 25                	jne    c00199bd <HalDetectFeatures()+0xcd9>
c0019998:	e8 01 68 fe ff       	call   c000019e <hasLegacyFPU>
c001999d:	83 e0 01             	and    eax,0x1
c00199a0:	83 e0 01             	and    eax,0x1
c00199a3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00199aa:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00199af:	83 e0 f7             	and    eax,0xfffffff7
c00199b2:	88 c2                	mov    dl,al
c00199b4:	88 c8                	mov    al,cl
c00199b6:	09 d0                	or     eax,edx
c00199b8:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00199bd:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00199c2:	83 e0 08             	and    eax,0x8
c00199c5:	0f b6 c0             	movzx  eax,al
c00199c8:	85 c0                	test   eax,eax
c00199ca:	74 0d                	je     c00199d9 <HalDetectFeatures()+0xcf5>
c00199cc:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c00199d1:	83 c8 10             	or     eax,0x10
c00199d4:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c00199d9:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c00199de:	83 e0 10             	and    eax,0x10
c00199e1:	0f b6 c0             	movzx  eax,al
c00199e4:	85 c0                	test   eax,eax
c00199e6:	75 23                	jne    c0019a0b <HalDetectFeatures()+0xd27>
c00199e8:	e8 49 7c 00 00       	call   c0021636 <x87Detect>
c00199ed:	83 e0 01             	and    eax,0x1
c00199f0:	83 e0 01             	and    eax,0x1
c00199f3:	89 c1                	mov    ecx,eax
c00199f5:	c1 e1 04             	shl    ecx,0x4
c00199f8:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c00199fd:	83 e0 ef             	and    eax,0xffffffef
c0019a00:	88 c2                	mov    dl,al
c0019a02:	88 c8                	mov    al,cl
c0019a04:	09 d0                	or     eax,edx
c0019a06:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019a0b:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019a10:	83 e0 01             	and    eax,0x1
c0019a13:	0f b6 c0             	movzx  eax,al
c0019a16:	85 c0                	test   eax,eax
c0019a18:	75 2d                	jne    c0019a47 <HalDetectFeatures()+0xd63>
c0019a1a:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019a1f:	83 e0 02             	and    eax,0x2
c0019a22:	0f b6 c0             	movzx  eax,al
c0019a25:	85 c0                	test   eax,eax
c0019a27:	75 1e                	jne    c0019a47 <HalDetectFeatures()+0xd63>
c0019a29:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019a2e:	83 e0 04             	and    eax,0x4
c0019a31:	0f b6 c0             	movzx  eax,al
c0019a34:	85 c0                	test   eax,eax
c0019a36:	75 0f                	jne    c0019a47 <HalDetectFeatures()+0xd63>
c0019a38:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019a3d:	83 e0 08             	and    eax,0x8
c0019a40:	0f b6 c0             	movzx  eax,al
c0019a43:	85 c0                	test   eax,eax
c0019a45:	74 0d                	je     c0019a54 <HalDetectFeatures()+0xd70>
c0019a47:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019a4c:	83 c8 80             	or     eax,0xffffff80
c0019a4f:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019a54:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019a59:	83 e0 10             	and    eax,0x10
c0019a5c:	0f b6 c0             	movzx  eax,al
c0019a5f:	85 c0                	test   eax,eax
c0019a61:	74 2f                	je     c0019a92 <HalDetectFeatures()+0xdae>
c0019a63:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019a68:	83 e0 80             	and    eax,0xffffff80
c0019a6b:	0f b6 c0             	movzx  eax,al
c0019a6e:	85 c0                	test   eax,eax
c0019a70:	75 20                	jne    c0019a92 <HalDetectFeatures()+0xdae>
c0019a72:	e8 79 7b 00 00       	call   c00215f0 <sseDetect>
c0019a77:	83 e0 01             	and    eax,0x1
c0019a7a:	89 c1                	mov    ecx,eax
c0019a7c:	c1 e1 07             	shl    ecx,0x7
c0019a7f:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019a84:	83 e0 7f             	and    eax,0x7f
c0019a87:	88 c2                	mov    dl,al
c0019a89:	88 c8                	mov    al,cl
c0019a8b:	09 d0                	or     eax,edx
c0019a8d:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019a92:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019a97:	83 e0 80             	and    eax,0xffffff80
c0019a9a:	0f b6 c0             	movzx  eax,al
c0019a9d:	85 c0                	test   eax,eax
c0019a9f:	74 1c                	je     c0019abd <HalDetectFeatures()+0xdd9>
c0019aa1:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019aa6:	83 e0 20             	and    eax,0x20
c0019aa9:	0f b6 c0             	movzx  eax,al
c0019aac:	85 c0                	test   eax,eax
c0019aae:	75 0d                	jne    c0019abd <HalDetectFeatures()+0xdd9>
c0019ab0:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019ab5:	83 e0 df             	and    eax,0xffffffdf
c0019ab8:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0019abd:	c6 05 88 cb 02 c0 00 	mov    BYTE PTR ds:0xc002cb88,0x0
c0019ac4:	90                   	nop
c0019ac5:	81 c4 90 00 00 00    	add    esp,0x90
c0019acb:	5b                   	pop    ebx
c0019acc:	5e                   	pop    esi
c0019acd:	5f                   	pop    edi
c0019ace:	c3                   	ret    

c0019acf <HalEnableNMI()>:
c0019acf:	c6 05 6c cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb6c,0x1
c0019ad6:	6a 10                	push   0x10
c0019ad8:	e8 00 ef ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c0019add:	83 c4 04             	add    esp,0x4
c0019ae0:	90                   	nop
c0019ae1:	c3                   	ret    

c0019ae2 <HalDisableNMI()>:
c0019ae2:	c6 05 6c cb 02 c0 00 	mov    BYTE PTR ds:0xc002cb6c,0x0
c0019ae9:	6a 10                	push   0x10
c0019aeb:	e8 ed ee ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c0019af0:	83 c4 04             	add    esp,0x4
c0019af3:	90                   	nop
c0019af4:	c3                   	ret    

c0019af5 <HalGetNMIState()>:
c0019af5:	a0 6c cb 02 c0       	mov    al,ds:0xc002cb6c
c0019afa:	c3                   	ret    

c0019afb <x86rdmsr(unsigned int)>:
c0019afb:	83 ec 1c             	sub    esp,0x1c
c0019afe:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b03:	83 e0 08             	and    eax,0x8
c0019b06:	0f b6 c0             	movzx  eax,al
c0019b09:	85 c0                	test   eax,eax
c0019b0b:	75 10                	jne    c0019b1d <x86rdmsr(unsigned int)+0x22>
c0019b0d:	83 ec 0c             	sub    esp,0xc
c0019b10:	68 52 54 02 c0       	push   0xc0025452
c0019b15:	e8 ca 60 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0019b1a:	83 c4 10             	add    esp,0x10
c0019b1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b21:	89 c1                	mov    ecx,eax
c0019b23:	0f 32                	rdmsr  
c0019b25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019b2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b35:	83 c4 1c             	add    esp,0x1c
c0019b38:	c3                   	ret    

c0019b39 <x86wrmsr(unsigned int, unsigned long long)>:
c0019b39:	83 ec 1c             	sub    esp,0x1c
c0019b3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019b40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b4c:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b51:	83 e0 08             	and    eax,0x8
c0019b54:	0f b6 c0             	movzx  eax,al
c0019b57:	85 c0                	test   eax,eax
c0019b59:	75 10                	jne    c0019b6b <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0019b5b:	83 ec 0c             	sub    esp,0xc
c0019b5e:	68 58 54 02 c0       	push   0xc0025458
c0019b63:	e8 7c 60 ff ff       	call   c000fbe4 <KePanic(char const*)>
c0019b68:	83 c4 10             	add    esp,0x10
c0019b6b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0019b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b77:	0f 30                	wrmsr  
c0019b79:	90                   	nop
c0019b7a:	83 c4 1c             	add    esp,0x1c
c0019b7d:	c3                   	ret    

c0019b7e <HalHandleGeneralProtectionFault(void*, void*)>:
c0019b7e:	83 ec 0c             	sub    esp,0xc
c0019b81:	83 ec 0c             	sub    esp,0xc
c0019b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b88:	e8 cc e1 ff ff       	call   c0017d59 <Vm::faultHandler(regs*)>
c0019b8d:	83 c4 10             	add    esp,0x10
c0019b90:	83 c4 0c             	add    esp,0xc
c0019b93:	c3                   	ret    

c0019b94 <HalFindRSDP()>:
c0019b94:	83 ec 1c             	sub    esp,0x1c
c0019b97:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c0019b9c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019ba1:	7e 17                	jle    c0019bba <HalFindRSDP()+0x26>
c0019ba3:	83 ec 0c             	sub    esp,0xc
c0019ba6:	68 00 04 00 00       	push   0x400
c0019bab:	e8 14 36 ff ff       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019bb0:	83 c4 10             	add    esp,0x10
c0019bb3:	0f b6 c0             	movzx  eax,al
c0019bb6:	85 c0                	test   eax,eax
c0019bb8:	74 04                	je     c0019bbe <HalFindRSDP()+0x2a>
c0019bba:	b0 01                	mov    al,0x1
c0019bbc:	eb 02                	jmp    c0019bc0 <HalFindRSDP()+0x2c>
c0019bbe:	b0 00                	mov    al,0x0
c0019bc0:	0f b6 c0             	movzx  eax,al
c0019bc3:	85 c0                	test   eax,eax
c0019bc5:	74 1d                	je     c0019be4 <HalFindRSDP()+0x50>
c0019bc7:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019bcc:	83 e0 fb             	and    eax,0xfffffffb
c0019bcf:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019bd4:	83 ec 0c             	sub    esp,0xc
c0019bd7:	68 5e 54 02 c0       	push   0xc002545e
c0019bdc:	e8 85 d3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019be1:	83 c4 10             	add    esp,0x10
c0019be4:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019be9:	83 e0 04             	and    eax,0x4
c0019bec:	0f b6 c0             	movzx  eax,al
c0019bef:	85 c0                	test   eax,eax
c0019bf1:	75 17                	jne    c0019c0a <HalFindRSDP()+0x76>
c0019bf3:	83 ec 0c             	sub    esp,0xc
c0019bf6:	68 6d 54 02 c0       	push   0xc002546d
c0019bfb:	e8 66 d3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019c00:	83 c4 10             	add    esp,0x10
c0019c03:	b8 00 00 00 00       	mov    eax,0x0
c0019c08:	eb 63                	jmp    c0019c6d <HalFindRSDP()+0xd9>
c0019c0a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0019c12:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019c1a:	77 2f                	ja     c0019c4b <HalFindRSDP()+0xb7>
c0019c1c:	83 ec 04             	sub    esp,0x4
c0019c1f:	6a 08                	push   0x8
c0019c21:	68 77 54 02 c0       	push   0xc0025477
c0019c26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c2a:	e8 51 67 fe ff       	call   c0000380 <memcmp>
c0019c2f:	83 c4 10             	add    esp,0x10
c0019c32:	85 c0                	test   eax,eax
c0019c34:	0f 94 c0             	sete   al
c0019c37:	0f b6 c0             	movzx  eax,al
c0019c3a:	85 c0                	test   eax,eax
c0019c3c:	74 06                	je     c0019c44 <HalFindRSDP()+0xb0>
c0019c3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c42:	eb 29                	jmp    c0019c6d <HalFindRSDP()+0xd9>
c0019c44:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019c49:	eb c7                	jmp    c0019c12 <HalFindRSDP()+0x7e>
c0019c4b:	83 ec 0c             	sub    esp,0xc
c0019c4e:	68 80 54 02 c0       	push   0xc0025480
c0019c53:	e8 0e d3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019c58:	83 c4 10             	add    esp,0x10
c0019c5b:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019c60:	83 e0 fb             	and    eax,0xfffffffb
c0019c63:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019c68:	b8 00 00 00 00       	mov    eax,0x0
c0019c6d:	83 c4 1c             	add    esp,0x1c
c0019c70:	c3                   	ret    

c0019c71 <HalHandlePageFault(void*, void*)>:
c0019c71:	83 ec 1c             	sub    esp,0x1c
c0019c74:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019c79:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c7b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019c7e:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0019c84:	0f 20 d2             	mov    edx,cr2
c0019c87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019c8f:	83 ec 08             	sub    esp,0x8
c0019c92:	52                   	push   edx
c0019c93:	50                   	push   eax
c0019c94:	e8 11 a3 ff ff       	call   c0013faa <VAS::tryLoadBackOffDisk(unsigned long)>
c0019c99:	83 c4 10             	add    esp,0x10
c0019c9c:	83 c4 1c             	add    esp,0x1c
c0019c9f:	c3                   	ret    

c0019ca0 <HalHandleOpcodeFault(void*, void*)>:
c0019ca0:	83 ec 1c             	sub    esp,0x1c
c0019ca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ca7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019cab:	a0 88 cb 02 c0       	mov    al,ds:0xc002cb88
c0019cb0:	0f b6 c0             	movzx  eax,al
c0019cb3:	85 c0                	test   eax,eax
c0019cb5:	74 25                	je     c0019cdc <HalHandleOpcodeFault(void*, void*)+0x3c>
c0019cb7:	83 ec 0c             	sub    esp,0xc
c0019cba:	68 78 56 02 c0       	push   0xc0025678
c0019cbf:	e8 a2 d2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019cc4:	83 c4 10             	add    esp,0x10
c0019cc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ccb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019cce:	8d 50 19             	lea    edx,[eax+0x19]
c0019cd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cd5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019cd8:	b0 01                	mov    al,0x1
c0019cda:	eb 02                	jmp    c0019cde <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019cdc:	b0 00                	mov    al,0x0
c0019cde:	83 c4 1c             	add    esp,0x1c
c0019ce1:	c3                   	ret    

c0019ce2 <HalDisplayDebugInfo(void*)>:
c0019ce2:	83 ec 2c             	sub    esp,0x2c
c0019ce5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ce9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ced:	0f 20 c0             	mov    eax,cr0
c0019cf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019cf4:	0f 20 d0             	mov    eax,cr2
c0019cf7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019cfb:	0f 20 d8             	mov    eax,cr3
c0019cfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019d02:	0f 20 e0             	mov    eax,cr4
c0019d05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d0d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019d10:	83 ec 08             	sub    esp,0x8
c0019d13:	50                   	push   eax
c0019d14:	68 9a 54 02 c0       	push   0xc002549a
c0019d19:	e8 48 d2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019d1e:	83 c4 10             	add    esp,0x10
c0019d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d25:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0019d28:	83 ec 08             	sub    esp,0x8
c0019d2b:	50                   	push   eax
c0019d2c:	68 8b 54 02 c0       	push   0xc002548b
c0019d31:	e8 30 d2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019d36:	83 c4 10             	add    esp,0x10
c0019d39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d3d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0019d40:	83 ec 08             	sub    esp,0x8
c0019d43:	50                   	push   eax
c0019d44:	68 96 54 02 c0       	push   0xc0025496
c0019d49:	e8 18 d2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019d4e:	83 c4 10             	add    esp,0x10
c0019d51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d55:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019d58:	83 ec 08             	sub    esp,0x8
c0019d5b:	50                   	push   eax
c0019d5c:	68 a5 54 02 c0       	push   0xc00254a5
c0019d61:	e8 00 d2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019d66:	83 c4 10             	add    esp,0x10
c0019d69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d6d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0019d70:	83 ec 08             	sub    esp,0x8
c0019d73:	50                   	push   eax
c0019d74:	68 b0 54 02 c0       	push   0xc00254b0
c0019d79:	e8 e8 d1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019d7e:	83 c4 10             	add    esp,0x10
c0019d81:	83 ec 08             	sub    esp,0x8
c0019d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d88:	68 bb 54 02 c0       	push   0xc00254bb
c0019d8d:	e8 d4 d1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019d92:	83 c4 10             	add    esp,0x10
c0019d95:	83 ec 08             	sub    esp,0x8
c0019d98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d9c:	68 c6 54 02 c0       	push   0xc00254c6
c0019da1:	e8 c0 d1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019da6:	83 c4 10             	add    esp,0x10
c0019da9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019dad:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019db0:	c1 e0 05             	shl    eax,0x5
c0019db3:	8d 90 60 69 02 c0    	lea    edx,[eax-0x3ffd96a0]
c0019db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019dbd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019dc0:	83 ec 04             	sub    esp,0x4
c0019dc3:	52                   	push   edx
c0019dc4:	50                   	push   eax
c0019dc5:	68 d1 54 02 c0       	push   0xc00254d1
c0019dca:	e8 97 d1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019dcf:	83 c4 10             	add    esp,0x10
c0019dd2:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019dd7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ddd:	83 ec 0c             	sub    esp,0xc
c0019de0:	50                   	push   eax
c0019de1:	e8 ad 84 ff ff       	call   c0012293 <setActiveTerminal(VgaText*)>
c0019de6:	83 c4 10             	add    esp,0x10
c0019de9:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019dee:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019df4:	83 ec 08             	sub    esp,0x8
c0019df7:	68 e0 54 02 c0       	push   0xc00254e0
c0019dfc:	50                   	push   eax
c0019dfd:	e8 ce 87 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c0019e02:	83 c4 10             	add    esp,0x10
c0019e05:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019e0a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e14:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0019e17:	83 ec 08             	sub    esp,0x8
c0019e1a:	52                   	push   edx
c0019e1b:	50                   	push   eax
c0019e1c:	e8 69 87 ff ff       	call   c001258a <VgaText::putx(unsigned int)>
c0019e21:	83 c4 10             	add    esp,0x10
c0019e24:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019e29:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e2f:	83 ec 08             	sub    esp,0x8
c0019e32:	68 ee 54 02 c0       	push   0xc00254ee
c0019e37:	50                   	push   eax
c0019e38:	e8 93 87 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c0019e3d:	83 c4 10             	add    esp,0x10
c0019e40:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019e45:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e4b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0019e50:	8b 12                	mov    edx,DWORD PTR [edx]
c0019e52:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019e55:	83 c2 0c             	add    edx,0xc
c0019e58:	83 ec 08             	sub    esp,0x8
c0019e5b:	52                   	push   edx
c0019e5c:	50                   	push   eax
c0019e5d:	e8 6e 87 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c0019e62:	83 c4 10             	add    esp,0x10
c0019e65:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019e6a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e70:	83 ec 08             	sub    esp,0x8
c0019e73:	68 f7 54 02 c0       	push   0xc00254f7
c0019e78:	50                   	push   eax
c0019e79:	e8 52 87 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c0019e7e:	83 c4 10             	add    esp,0x10
c0019e81:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019e86:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e90:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0019e93:	83 ec 08             	sub    esp,0x8
c0019e96:	52                   	push   edx
c0019e97:	50                   	push   eax
c0019e98:	e8 ed 86 ff ff       	call   c001258a <VgaText::putx(unsigned int)>
c0019e9d:	83 c4 10             	add    esp,0x10
c0019ea0:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019ea5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019eab:	83 ec 08             	sub    esp,0x8
c0019eae:	68 ff 54 02 c0       	push   0xc00254ff
c0019eb3:	50                   	push   eax
c0019eb4:	e8 17 87 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c0019eb9:	83 c4 10             	add    esp,0x10
c0019ebc:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019ec1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ec7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ecb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0019ece:	83 ec 08             	sub    esp,0x8
c0019ed1:	52                   	push   edx
c0019ed2:	50                   	push   eax
c0019ed3:	e8 b2 86 ff ff       	call   c001258a <VgaText::putx(unsigned int)>
c0019ed8:	83 c4 10             	add    esp,0x10
c0019edb:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019ee0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ee6:	83 ec 08             	sub    esp,0x8
c0019ee9:	68 07 55 02 c0       	push   0xc0025507
c0019eee:	50                   	push   eax
c0019eef:	e8 dc 86 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c0019ef4:	83 c4 10             	add    esp,0x10
c0019ef7:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019efc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f06:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019f09:	83 ec 08             	sub    esp,0x8
c0019f0c:	52                   	push   edx
c0019f0d:	50                   	push   eax
c0019f0e:	e8 77 86 ff ff       	call   c001258a <VgaText::putx(unsigned int)>
c0019f13:	83 c4 10             	add    esp,0x10
c0019f16:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f1b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f21:	83 ec 08             	sub    esp,0x8
c0019f24:	68 0f 55 02 c0       	push   0xc002550f
c0019f29:	50                   	push   eax
c0019f2a:	e8 a1 86 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c0019f2f:	83 c4 10             	add    esp,0x10
c0019f32:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f37:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f3d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f41:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019f44:	83 ec 08             	sub    esp,0x8
c0019f47:	52                   	push   edx
c0019f48:	50                   	push   eax
c0019f49:	e8 3c 86 ff ff       	call   c001258a <VgaText::putx(unsigned int)>
c0019f4e:	83 c4 10             	add    esp,0x10
c0019f51:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f56:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f5c:	83 ec 08             	sub    esp,0x8
c0019f5f:	68 17 55 02 c0       	push   0xc0025517
c0019f64:	50                   	push   eax
c0019f65:	e8 66 86 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c0019f6a:	83 c4 10             	add    esp,0x10
c0019f6d:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f72:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f7c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0019f7f:	83 ec 08             	sub    esp,0x8
c0019f82:	52                   	push   edx
c0019f83:	50                   	push   eax
c0019f84:	e8 01 86 ff ff       	call   c001258a <VgaText::putx(unsigned int)>
c0019f89:	83 c4 10             	add    esp,0x10
c0019f8c:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f91:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f97:	83 ec 08             	sub    esp,0x8
c0019f9a:	68 1f 55 02 c0       	push   0xc002551f
c0019f9f:	50                   	push   eax
c0019fa0:	e8 2b 86 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c0019fa5:	83 c4 10             	add    esp,0x10
c0019fa8:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019fad:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019fb3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019fb7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019fba:	83 ec 08             	sub    esp,0x8
c0019fbd:	52                   	push   edx
c0019fbe:	50                   	push   eax
c0019fbf:	e8 c6 85 ff ff       	call   c001258a <VgaText::putx(unsigned int)>
c0019fc4:	83 c4 10             	add    esp,0x10
c0019fc7:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019fcc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019fd2:	83 ec 08             	sub    esp,0x8
c0019fd5:	68 27 55 02 c0       	push   0xc0025527
c0019fda:	50                   	push   eax
c0019fdb:	e8 f0 85 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c0019fe0:	83 c4 10             	add    esp,0x10
c0019fe3:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019fe8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019fee:	83 ec 08             	sub    esp,0x8
c0019ff1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019ff5:	50                   	push   eax
c0019ff6:	e8 8f 85 ff ff       	call   c001258a <VgaText::putx(unsigned int)>
c0019ffb:	83 c4 10             	add    esp,0x10
c0019ffe:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a003:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a009:	83 ec 08             	sub    esp,0x8
c001a00c:	68 30 55 02 c0       	push   0xc0025530
c001a011:	50                   	push   eax
c001a012:	e8 b9 85 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c001a017:	83 c4 10             	add    esp,0x10
c001a01a:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a01f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a025:	83 ec 08             	sub    esp,0x8
c001a028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a02c:	50                   	push   eax
c001a02d:	e8 58 85 ff ff       	call   c001258a <VgaText::putx(unsigned int)>
c001a032:	83 c4 10             	add    esp,0x10
c001a035:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a03a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a040:	83 ec 08             	sub    esp,0x8
c001a043:	68 38 55 02 c0       	push   0xc0025538
c001a048:	50                   	push   eax
c001a049:	e8 82 85 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c001a04e:	83 c4 10             	add    esp,0x10
c001a051:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a056:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a05c:	83 ec 08             	sub    esp,0x8
c001a05f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a063:	50                   	push   eax
c001a064:	e8 21 85 ff ff       	call   c001258a <VgaText::putx(unsigned int)>
c001a069:	83 c4 10             	add    esp,0x10
c001a06c:	fa                   	cli    
c001a06d:	f4                   	hlt    
c001a06e:	eb fe                	jmp    c001a06e <HalDisplayDebugInfo(void*)+0x38c>

c001a070 <HalReceivedNMI()>:
c001a070:	83 ec 1c             	sub    esp,0x1c
c001a073:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a07a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a07e:	89 c2                	mov    edx,eax
c001a080:	ec                   	in     al,dx
c001a081:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a085:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a089:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a08d:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a094:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a098:	89 c2                	mov    edx,eax
c001a09a:	ec                   	in     al,dx
c001a09b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a09f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a0a3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a0a7:	83 ec 0c             	sub    esp,0xc
c001a0aa:	68 40 55 02 c0       	push   0xc0025540
c001a0af:	e8 b2 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a0b4:	83 c4 10             	add    esp,0x10
c001a0b7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a0bc:	83 e0 10             	and    eax,0x10
c001a0bf:	74 10                	je     c001a0d1 <HalReceivedNMI()+0x61>
c001a0c1:	83 ec 0c             	sub    esp,0xc
c001a0c4:	68 51 55 02 c0       	push   0xc0025551
c001a0c9:	e8 16 5b ff ff       	call   c000fbe4 <KePanic(char const*)>
c001a0ce:	83 c4 10             	add    esp,0x10
c001a0d1:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a0d6:	83 e0 40             	and    eax,0x40
c001a0d9:	74 10                	je     c001a0eb <HalReceivedNMI()+0x7b>
c001a0db:	83 ec 0c             	sub    esp,0xc
c001a0de:	68 5e 55 02 c0       	push   0xc002555e
c001a0e3:	e8 fc 5a ff ff       	call   c000fbe4 <KePanic(char const*)>
c001a0e8:	83 c4 10             	add    esp,0x10
c001a0eb:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a0ef:	0f be c0             	movsx  eax,al
c001a0f2:	85 c0                	test   eax,eax
c001a0f4:	79 10                	jns    c001a106 <HalReceivedNMI()+0x96>
c001a0f6:	83 ec 0c             	sub    esp,0xc
c001a0f9:	68 68 55 02 c0       	push   0xc0025568
c001a0fe:	e8 e1 5a ff ff       	call   c000fbe4 <KePanic(char const*)>
c001a103:	83 c4 10             	add    esp,0x10
c001a106:	90                   	nop
c001a107:	83 c4 1c             	add    esp,0x1c
c001a10a:	c3                   	ret    

c001a10b <HalSystemIdle()>:
c001a10b:	56                   	push   esi
c001a10c:	53                   	push   ebx
c001a10d:	83 ec 14             	sub    esp,0x14
c001a110:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001a115:	83 e0 10             	and    eax,0x10
c001a118:	0f b6 c0             	movzx  eax,al
c001a11b:	85 c0                	test   eax,eax
c001a11d:	74 43                	je     c001a162 <HalSystemIdle()+0x57>
c001a11f:	83 ec 0c             	sub    esp,0xc
c001a122:	68 e1 00 00 00       	push   0xe1
c001a127:	e8 cf f9 ff ff       	call   c0019afb <x86rdmsr(unsigned int)>
c001a12c:	83 c4 10             	add    esp,0x10
c001a12f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a133:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a137:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a13b:	83 e0 02             	and    eax,0x2
c001a13e:	89 c3                	mov    ebx,eax
c001a140:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a144:	83 e0 00             	and    eax,0x0
c001a147:	89 c6                	mov    esi,eax
c001a149:	83 ec 04             	sub    esp,0x4
c001a14c:	56                   	push   esi
c001a14d:	53                   	push   ebx
c001a14e:	68 e1 00 00 00       	push   0xe1
c001a153:	e8 e1 f9 ff ff       	call   c0019b39 <x86wrmsr(unsigned int, unsigned long long)>
c001a158:	83 c4 10             	add    esp,0x10
c001a15b:	e8 34 60 fe ff       	call   c0000194 <doTPAUSE>
c001a160:	eb 01                	jmp    c001a163 <HalSystemIdle()+0x58>
c001a162:	f4                   	hlt    
c001a163:	90                   	nop
c001a164:	83 c4 14             	add    esp,0x14
c001a167:	5b                   	pop    ebx
c001a168:	5e                   	pop    esi
c001a169:	c3                   	ret    

c001a16a <i386SaveCoprocessor(void*)>:
c001a16a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a16e:	83 c0 3f             	add    eax,0x3f
c001a171:	83 e0 c0             	and    eax,0xffffffc0
c001a174:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a178:	ff 25 50 cb 02 c0    	jmp    DWORD PTR ds:0xc002cb50

c001a17e <i386LoadCoprocessor(void*)>:
c001a17e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a182:	83 c0 3f             	add    eax,0x3f
c001a185:	83 e0 c0             	and    eax,0xffffffc0
c001a188:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a18c:	ff 25 4c cb 02 c0    	jmp    DWORD PTR ds:0xc002cb4c

c001a192 <x87EmulHandler(regs*, void*)>:
c001a192:	53                   	push   ebx
c001a193:	83 ec 08             	sub    esp,0x8
c001a196:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a19b:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a19f:	74 10                	je     c001a1b1 <x87EmulHandler(regs*, void*)+0x1f>
c001a1a1:	83 ec 0c             	sub    esp,0xc
c001a1a4:	68 75 55 02 c0       	push   0xc0025575
c001a1a9:	e8 36 5a ff ff       	call   c000fbe4 <KePanic(char const*)>
c001a1ae:	83 c4 10             	add    esp,0x10
c001a1b1:	0f 20 c0             	mov    eax,cr0
c001a1b4:	a8 08                	test   al,0x8
c001a1b6:	74 59                	je     c001a211 <x87EmulHandler(regs*, void*)+0x7f>
c001a1b8:	0f 06                	clts   
c001a1ba:	a1 48 cb 02 c0       	mov    eax,ds:0xc002cb48
c001a1bf:	85 c0                	test   eax,eax
c001a1c1:	74 0e                	je     c001a1d1 <x87EmulHandler(regs*, void*)+0x3f>
c001a1c3:	83 ec 0c             	sub    esp,0xc
c001a1c6:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a1c9:	e8 9c ff ff ff       	call   c001a16a <i386SaveCoprocessor(void*)>
c001a1ce:	83 c4 10             	add    esp,0x10
c001a1d1:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a1d7:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a1db:	75 12                	jne    c001a1ef <x87EmulHandler(regs*, void*)+0x5d>
c001a1dd:	83 ec 0c             	sub    esp,0xc
c001a1e0:	68 40 02 00 00       	push   0x240
c001a1e5:	e8 9e 55 ff ff       	call   c000f788 <malloc>
c001a1ea:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a1ed:	eb 10                	jmp    c001a1ff <x87EmulHandler(regs*, void*)+0x6d>
c001a1ef:	a1 48 cb 02 c0       	mov    eax,ds:0xc002cb48
c001a1f4:	83 ec 0c             	sub    esp,0xc
c001a1f7:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a1fa:	e8 7f ff ff ff       	call   c001a17e <i386LoadCoprocessor(void*)>
c001a1ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a204:	83 c4 10             	add    esp,0x10
c001a207:	a3 48 cb 02 c0       	mov    ds:0xc002cb48,eax
c001a20c:	83 c4 08             	add    esp,0x8
c001a20f:	5b                   	pop    ebx
c001a210:	c3                   	ret    
c001a211:	83 ec 0c             	sub    esp,0xc
c001a214:	68 89 55 02 c0       	push   0xc0025589
c001a219:	e8 48 cd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a21e:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001a226:	83 c4 18             	add    esp,0x18
c001a229:	5b                   	pop    ebx
c001a22a:	e9 e9 d2 ff ff       	jmp    c0017518 <KeTerminateCurrentThread(int)>

c001a22f <HalInitialiseCoprocessor()>:
c001a22f:	83 ec 10             	sub    esp,0x10
c001a232:	6a 00                	push   0x0
c001a234:	68 92 a1 01 c0       	push   0xc001a192
c001a239:	6a 07                	push   0x7
c001a23b:	c7 05 48 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb48,0x0
c001a245:	e8 df 07 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a24a:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001a24f:	83 c4 10             	add    esp,0x10
c001a252:	a8 80                	test   al,0x80
c001a254:	74 1c                	je     c001a272 <HalInitialiseCoprocessor()+0x43>
c001a256:	c7 05 50 cb 02 c0 08 16 02 c0 	mov    DWORD PTR ds:0xc002cb50,0xc0021608
c001a260:	c7 05 4c cb 02 c0 10 16 02 c0 	mov    DWORD PTR ds:0xc002cb4c,0xc0021610
c001a26a:	83 c4 0c             	add    esp,0xc
c001a26d:	e9 a6 73 00 00       	jmp    c0021618 <sseInit>
c001a272:	a8 10                	test   al,0x10
c001a274:	74 1c                	je     c001a292 <HalInitialiseCoprocessor()+0x63>
c001a276:	c7 05 50 cb 02 c0 57 16 02 c0 	mov    DWORD PTR ds:0xc002cb50,0xc0021657
c001a280:	c7 05 4c cb 02 c0 5e 16 02 c0 	mov    DWORD PTR ds:0xc002cb4c,0xc002165e
c001a28a:	83 c4 0c             	add    esp,0xc
c001a28d:	e9 d3 73 00 00       	jmp    c0021665 <x87Init>
c001a292:	c7 05 50 cb 02 c0 cc 89 01 c0 	mov    DWORD PTR ds:0xc002cb50,0xc00189cc
c001a29c:	c7 05 4c cb 02 c0 cc 89 01 c0 	mov    DWORD PTR ds:0xc002cb4c,0xc00189cc
c001a2a6:	0f 20 c0             	mov    eax,cr0
c001a2a9:	83 c8 04             	or     eax,0x4
c001a2ac:	0f 22 c0             	mov    cr0,eax
c001a2af:	83 c4 0c             	add    esp,0xc
c001a2b2:	c3                   	ret    

c001a2b3 <HalPanic(char const*)>:
c001a2b3:	53                   	push   ebx
c001a2b4:	83 ec 10             	sub    esp,0x10
c001a2b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a2bb:	fa                   	cli    
c001a2bc:	53                   	push   ebx
c001a2bd:	68 9f 55 02 c0       	push   0xc002559f
c001a2c2:	e8 9f cc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a2c7:	a1 44 cb 02 c0       	mov    eax,ds:0xc002cb44
c001a2cc:	83 c4 10             	add    esp,0x10
c001a2cf:	85 c0                	test   eax,eax
c001a2d1:	74 09                	je     c001a2dc <HalPanic(char const*)+0x29>
c001a2d3:	83 ec 0c             	sub    esp,0xc
c001a2d6:	53                   	push   ebx
c001a2d7:	ff d0                	call   eax
c001a2d9:	83 c4 10             	add    esp,0x10
c001a2dc:	a1 f4 c1 02 c0       	mov    eax,ds:0xc002c1f4
c001a2e1:	85 c0                	test   eax,eax
c001a2e3:	0f 84 dc 00 00 00    	je     c001a3c5 <HalPanic(char const*)+0x112>
c001a2e9:	52                   	push   edx
c001a2ea:	6a 01                	push   0x1
c001a2ec:	6a 0f                	push   0xf
c001a2ee:	50                   	push   eax
c001a2ef:	e8 de 7d ff ff       	call   c00120d2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a2f4:	59                   	pop    ecx
c001a2f5:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a2fb:	e8 de 7f ff ff       	call   c00122de <VgaText::clearScreen()>
c001a300:	58                   	pop    eax
c001a301:	5a                   	pop    edx
c001a302:	68 25 45 02 c0       	push   0xc0024525
c001a307:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a30d:	e8 f8 7d ff ff       	call   c001210a <VgaText::setTitle(char*)>
c001a312:	83 c4 0c             	add    esp,0xc
c001a315:	6a 01                	push   0x1
c001a317:	6a 0f                	push   0xf
c001a319:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a31f:	e8 ae 7d ff ff       	call   c00120d2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a324:	59                   	pop    ecx
c001a325:	58                   	pop    eax
c001a326:	68 b8 55 02 c0       	push   0xc00255b8
c001a32b:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a331:	e8 9a 82 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c001a336:	83 c4 0c             	add    esp,0xc
c001a339:	6a 0f                	push   0xf
c001a33b:	6a 01                	push   0x1
c001a33d:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a343:	e8 8a 7d ff ff       	call   c00120d2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a348:	58                   	pop    eax
c001a349:	5a                   	pop    edx
c001a34a:	68 c1 55 02 c0       	push   0xc00255c1
c001a34f:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a355:	e8 76 82 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c001a35a:	83 c4 0c             	add    esp,0xc
c001a35d:	6a 01                	push   0x1
c001a35f:	6a 0f                	push   0xf
c001a361:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a367:	e8 66 7d ff ff       	call   c00120d2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a36c:	59                   	pop    ecx
c001a36d:	58                   	pop    eax
c001a36e:	68 05 56 02 c0       	push   0xc0025605
c001a373:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a379:	e8 52 82 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c001a37e:	58                   	pop    eax
c001a37f:	5a                   	pop    edx
c001a380:	68 ce 55 02 c0       	push   0xc00255ce
c001a385:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a38b:	e8 40 82 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c001a390:	59                   	pop    ecx
c001a391:	58                   	pop    eax
c001a392:	68 08 56 02 c0       	push   0xc0025608
c001a397:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a39d:	e8 2e 82 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c001a3a2:	58                   	pop    eax
c001a3a3:	5a                   	pop    edx
c001a3a4:	53                   	push   ebx
c001a3a5:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a3ab:	e8 20 82 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c001a3b0:	59                   	pop    ecx
c001a3b1:	5b                   	pop    ebx
c001a3b2:	68 05 56 02 c0       	push   0xc0025605
c001a3b7:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a3bd:	e8 0e 82 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c001a3c2:	83 c4 10             	add    esp,0x10
c001a3c5:	eb fe                	jmp    c001a3c5 <HalPanic(char const*)+0x112>

c001a3c7 <HalQueryPerformanceCounter()>:
c001a3c7:	31 c0                	xor    eax,eax
c001a3c9:	31 d2                	xor    edx,edx
c001a3cb:	f6 05 8e cb 02 c0 08 	test   BYTE PTR ds:0xc002cb8e,0x8
c001a3d2:	75 02                	jne    c001a3d6 <HalQueryPerformanceCounter()+0xf>
c001a3d4:	0f 31                	rdtsc  
c001a3d6:	c3                   	ret    

c001a3d7 <HalInitialise()>:
c001a3d7:	53                   	push   ebx
c001a3d8:	83 ec 08             	sub    esp,0x8
c001a3db:	e8 04 e9 ff ff       	call   c0018ce4 <HalDetectFeatures()>
c001a3e0:	83 ec 0c             	sub    esp,0xc
c001a3e3:	68 cd 89 01 c0       	push   0xc00189cd
c001a3e8:	e8 df 61 ff ff       	call   c00105cc <KeRegisterRestartHandler(void (*)())>
c001a3ed:	c7 04 24 d8 89 01 c0 	mov    DWORD PTR [esp],0xc00189d8
c001a3f4:	e8 c9 61 ff ff       	call   c00105c2 <KeRegisterShutdownHandler(void (*)())>
c001a3f9:	c7 04 24 d9 89 01 c0 	mov    DWORD PTR [esp],0xc00189d9
c001a400:	e8 d1 61 ff ff       	call   c00105d6 <KeRegisterSleepHandler(void (*)())>
c001a405:	e8 7a 1f ff ff       	call   c000c384 <scanMADT()>
c001a40a:	83 c4 10             	add    esp,0x10
c001a40d:	80 3d 40 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be40,0x0
c001a414:	75 0d                	jne    c001a423 <HalInitialise()+0x4c>
c001a416:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001a41b:	83 e0 fe             	and    eax,0xfffffffe
c001a41e:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c001a423:	e8 e8 08 00 00       	call   c001ad10 <picOpen()>
c001a428:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001a42f:	74 0a                	je     c001a43b <HalInitialise()+0x64>
c001a431:	e8 2a 08 00 00       	call   c001ac60 <picDisable()>
c001a436:	e8 99 e1 ff ff       	call   c00185d4 <apicOpen()>
c001a43b:	50                   	push   eax
c001a43c:	bb 0f 00 00 00       	mov    ebx,0xf
c001a441:	6a 00                	push   0x0
c001a443:	68 b0 e8 00 c0       	push   0xc000e8b0
c001a448:	6a 02                	push   0x2
c001a44a:	e8 da 05 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a44f:	83 c4 0c             	add    esp,0xc
c001a452:	6a 00                	push   0x0
c001a454:	68 28 e8 00 c0       	push   0xc000e828
c001a459:	6a 06                	push   0x6
c001a45b:	e8 c9 05 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a460:	83 c4 0c             	add    esp,0xc
c001a463:	6a 00                	push   0x0
c001a465:	68 c0 e8 00 c0       	push   0xc000e8c0
c001a46a:	6a 08                	push   0x8
c001a46c:	e8 b8 05 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a471:	83 c4 0c             	add    esp,0xc
c001a474:	6a 00                	push   0x0
c001a476:	68 80 e7 00 c0       	push   0xc000e780
c001a47b:	6a 0d                	push   0xd
c001a47d:	e8 a7 05 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a482:	83 c4 0c             	add    esp,0xc
c001a485:	6a 00                	push   0x0
c001a487:	68 d4 e7 00 c0       	push   0xc000e7d4
c001a48c:	6a 0e                	push   0xe
c001a48e:	e8 96 05 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a493:	83 c4 0c             	add    esp,0xc
c001a496:	6a 00                	push   0x0
c001a498:	68 7c e8 00 c0       	push   0xc000e87c
c001a49d:	6a 00                	push   0x0
c001a49f:	e8 85 05 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a4a4:	83 c4 0c             	add    esp,0xc
c001a4a7:	6a 00                	push   0x0
c001a4a9:	68 7c e8 00 c0       	push   0xc000e87c
c001a4ae:	6a 01                	push   0x1
c001a4b0:	e8 74 05 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a4b5:	83 c4 0c             	add    esp,0xc
c001a4b8:	6a 00                	push   0x0
c001a4ba:	68 7c e8 00 c0       	push   0xc000e87c
c001a4bf:	6a 03                	push   0x3
c001a4c1:	e8 63 05 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a4c6:	83 c4 0c             	add    esp,0xc
c001a4c9:	6a 00                	push   0x0
c001a4cb:	68 7c e8 00 c0       	push   0xc000e87c
c001a4d0:	6a 04                	push   0x4
c001a4d2:	e8 52 05 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a4d7:	83 c4 0c             	add    esp,0xc
c001a4da:	6a 00                	push   0x0
c001a4dc:	68 7c e8 00 c0       	push   0xc000e87c
c001a4e1:	6a 05                	push   0x5
c001a4e3:	e8 41 05 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a4e8:	83 c4 0c             	add    esp,0xc
c001a4eb:	6a 00                	push   0x0
c001a4ed:	68 7c e8 00 c0       	push   0xc000e87c
c001a4f2:	6a 00                	push   0x0
c001a4f4:	e8 30 05 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a4f9:	83 c4 0c             	add    esp,0xc
c001a4fc:	6a 00                	push   0x0
c001a4fe:	68 7c e8 00 c0       	push   0xc000e87c
c001a503:	6a 01                	push   0x1
c001a505:	e8 1f 05 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a50a:	83 c4 0c             	add    esp,0xc
c001a50d:	6a 00                	push   0x0
c001a50f:	68 7c e8 00 c0       	push   0xc000e87c
c001a514:	6a 09                	push   0x9
c001a516:	e8 0e 05 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a51b:	83 c4 0c             	add    esp,0xc
c001a51e:	6a 00                	push   0x0
c001a520:	68 7c e8 00 c0       	push   0xc000e87c
c001a525:	6a 0a                	push   0xa
c001a527:	e8 fd 04 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a52c:	83 c4 0c             	add    esp,0xc
c001a52f:	6a 00                	push   0x0
c001a531:	68 7c e8 00 c0       	push   0xc000e87c
c001a536:	6a 0b                	push   0xb
c001a538:	e8 ec 04 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a53d:	83 c4 10             	add    esp,0x10
c001a540:	50                   	push   eax
c001a541:	6a 00                	push   0x0
c001a543:	68 7c e8 00 c0       	push   0xc000e87c
c001a548:	53                   	push   ebx
c001a549:	43                   	inc    ebx
c001a54a:	e8 da 04 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a54f:	83 c4 10             	add    esp,0x10
c001a552:	83 fb 1e             	cmp    ebx,0x1e
c001a555:	75 e9                	jne    c001a540 <HalInitialise()+0x169>
c001a557:	50                   	push   eax
c001a558:	6a 00                	push   0x0
c001a55a:	68 6c 1f 01 c0       	push   0xc0011f6c
c001a55f:	6a 60                	push   0x60
c001a561:	e8 c3 04 00 00       	call   c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a566:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001a56b:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a575:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001a57c:	e8 07 52 ff ff       	call   c000f788 <malloc>
c001a581:	89 04 24             	mov    DWORD PTR [esp],eax
c001a584:	89 c3                	mov    ebx,eax
c001a586:	e8 ed 0e 00 00       	call   c001b478 <RTC::RTC()>
c001a58b:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001a595:	5a                   	pop    edx
c001a596:	59                   	pop    ecx
c001a597:	53                   	push   ebx
c001a598:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c001a59e:	e8 53 f4 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001a5a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5a5:	6a 00                	push   0x0
c001a5a7:	6a 00                	push   0x0
c001a5a9:	6a 00                	push   0x0
c001a5ab:	53                   	push   ebx
c001a5ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a5af:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001a5b4:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001a5ba:	83 c4 28             	add    esp,0x28
c001a5bd:	5b                   	pop    ebx
c001a5be:	c3                   	ret    

c001a5bf <HalMakeBeep(int)>:
c001a5bf:	53                   	push   ebx
c001a5c0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a5c4:	85 db                	test   ebx,ebx
c001a5c6:	75 07                	jne    c001a5cf <HalMakeBeep(int)+0x10>
c001a5c8:	e4 61                	in     al,0x61
c001a5ca:	83 e0 fc             	and    eax,0xfffffffc
c001a5cd:	eb 26                	jmp    c001a5f5 <HalMakeBeep(int)+0x36>
c001a5cf:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a5d4:	99                   	cdq    
c001a5d5:	f7 fb                	idiv   ebx
c001a5d7:	89 c1                	mov    ecx,eax
c001a5d9:	b0 b6                	mov    al,0xb6
c001a5db:	e6 43                	out    0x43,al
c001a5dd:	88 c8                	mov    al,cl
c001a5df:	e6 42                	out    0x42,al
c001a5e1:	89 c8                	mov    eax,ecx
c001a5e3:	c1 e8 08             	shr    eax,0x8
c001a5e6:	e6 42                	out    0x42,al
c001a5e8:	e4 61                	in     al,0x61
c001a5ea:	89 c2                	mov    edx,eax
c001a5ec:	83 ca 03             	or     edx,0x3
c001a5ef:	38 d0                	cmp    al,dl
c001a5f1:	74 04                	je     c001a5f7 <HalMakeBeep(int)+0x38>
c001a5f3:	88 d0                	mov    al,dl
c001a5f5:	e6 61                	out    0x61,al
c001a5f7:	5b                   	pop    ebx
c001a5f8:	c3                   	ret    

c001a5f9 <HalGetRand()>:
c001a5f9:	31 c0                	xor    eax,eax
c001a5fb:	c3                   	ret    

c001a5fc <HalEndOfInterrupt(int)>:
c001a5fc:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001a603:	74 1d                	je     c001a622 <HalEndOfInterrupt(int)+0x26>
c001a605:	83 ec 18             	sub    esp,0x18
c001a608:	6a 1b                	push   0x1b
c001a60a:	e8 ec f4 ff ff       	call   c0019afb <x86rdmsr(unsigned int)>
c001a60f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a614:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a61e:	83 c4 1c             	add    esp,0x1c
c001a621:	c3                   	ret    
c001a622:	e9 6d 08 00 00       	jmp    c001ae94 <picEOI(int)>
c001a627:	90                   	nop

c001a628 <CPU::CPU()>:
c001a628:	83 ec 0c             	sub    esp,0xc
c001a62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a62f:	83 ec 08             	sub    esp,0x8
c001a632:	68 a6 53 02 c0       	push   0xc00253a6
c001a637:	50                   	push   eax
c001a638:	e8 1b f5 fe ff       	call   c0009b58 <Device::Device(char const*)>
c001a63d:	83 c4 10             	add    esp,0x10
c001a640:	ba a4 56 02 c0       	mov    edx,0xc00256a4
c001a645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a649:	89 10                	mov    DWORD PTR [eax],edx
c001a64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a64f:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a65d:	05 64 01 00 00       	add    eax,0x164
c001a662:	83 ec 0c             	sub    esp,0xc
c001a665:	50                   	push   eax
c001a666:	e8 a7 42 ff ff       	call   c000e912 <GDT::GDT()>
c001a66b:	83 c4 10             	add    esp,0x10
c001a66e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a672:	05 68 09 00 00       	add    eax,0x968
c001a677:	83 ec 0c             	sub    esp,0xc
c001a67a:	50                   	push   eax
c001a67b:	e8 e4 44 ff ff       	call   c000eb64 <IDT::IDT()>
c001a680:	83 c4 10             	add    esp,0x10
c001a683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a687:	05 68 11 00 00       	add    eax,0x1168
c001a68c:	83 ec 0c             	sub    esp,0xc
c001a68f:	50                   	push   eax
c001a690:	e8 f7 83 ff ff       	call   c0012a8c <TSS::TSS()>
c001a695:	83 c4 10             	add    esp,0x10
c001a698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a69c:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001a6a6:	90                   	nop
c001a6a7:	83 c4 0c             	add    esp,0xc
c001a6aa:	c3                   	ret    
c001a6ab:	90                   	nop

c001a6ac <CPU::setupSMEP()>:
c001a6ac:	0f 20 e0             	mov    eax,cr4
c001a6af:	0d 00 00 10 00       	or     eax,0x100000
c001a6b4:	0f 22 e0             	mov    cr4,eax
c001a6b7:	c3                   	ret    

c001a6b8 <CPU::setupUMIP()>:
c001a6b8:	0f 20 e0             	mov    eax,cr4
c001a6bb:	80 cc 08             	or     ah,0x8
c001a6be:	0f 22 e0             	mov    cr4,eax
c001a6c1:	c3                   	ret    

c001a6c2 <CPU::setupTSC()>:
c001a6c2:	0f 20 e0             	mov    eax,cr4
c001a6c5:	83 c8 04             	or     eax,0x4
c001a6c8:	0f 22 e0             	mov    cr4,eax
c001a6cb:	c3                   	ret    

c001a6cc <CPU::setupLargePages()>:
c001a6cc:	0f 20 e0             	mov    eax,cr4
c001a6cf:	83 c8 10             	or     eax,0x10
c001a6d2:	0f 22 e0             	mov    cr4,eax
c001a6d5:	c3                   	ret    

c001a6d6 <CPU::setupPAT()>:
c001a6d6:	f6 05 8c cb 02 c0 08 	test   BYTE PTR ds:0xc002cb8c,0x8
c001a6dd:	74 28                	je     c001a707 <CPU::setupPAT()+0x31>
c001a6df:	53                   	push   ebx
c001a6e0:	83 ec 14             	sub    esp,0x14
c001a6e3:	68 77 02 00 00       	push   0x277
c001a6e8:	e8 0e f4 ff ff       	call   c0019afb <x86rdmsr(unsigned int)>
c001a6ed:	83 c4 0c             	add    esp,0xc
c001a6f0:	83 e2 f8             	and    edx,0xfffffff8
c001a6f3:	83 ca 01             	or     edx,0x1
c001a6f6:	52                   	push   edx
c001a6f7:	50                   	push   eax
c001a6f8:	68 77 02 00 00       	push   0x277
c001a6fd:	e8 37 f4 ff ff       	call   c0019b39 <x86wrmsr(unsigned int, unsigned long long)>
c001a702:	83 c4 18             	add    esp,0x18
c001a705:	5b                   	pop    ebx
c001a706:	c3                   	ret    
c001a707:	c3                   	ret    

c001a708 <CPU::setupMTRR()>:
c001a708:	c3                   	ret    
c001a709:	90                   	nop

c001a70a <CPU::setupGlobalPages()>:
c001a70a:	0f 20 e0             	mov    eax,cr4
c001a70d:	0c 80                	or     al,0x80
c001a70f:	0f 22 e0             	mov    cr4,eax
c001a712:	c3                   	ret    
c001a713:	90                   	nop

c001a714 <CPU::allowUsermodeDataAccess()>:
c001a714:	f6 05 8f cb 02 c0 40 	test   BYTE PTR ds:0xc002cb8f,0x40
c001a71b:	74 03                	je     c001a720 <CPU::allowUsermodeDataAccess()+0xc>
c001a71d:	0f 01 cb             	stac   
c001a720:	c3                   	ret    
c001a721:	90                   	nop

c001a722 <CPU::prohibitUsermodeDataAccess()>:
c001a722:	f6 05 8f cb 02 c0 40 	test   BYTE PTR ds:0xc002cb8f,0x40
c001a729:	74 03                	je     c001a72e <CPU::prohibitUsermodeDataAccess()+0xc>
c001a72b:	0f 01 ca             	clac   
c001a72e:	c3                   	ret    
c001a72f:	90                   	nop

c001a730 <CPU::setupSMAP()>:
c001a730:	0f 20 e0             	mov    eax,cr4
c001a733:	0d 00 00 20 00       	or     eax,0x200000
c001a738:	0f 22 e0             	mov    cr4,eax
c001a73b:	eb e5                	jmp    c001a722 <CPU::prohibitUsermodeDataAccess()>
c001a73d:	90                   	nop

c001a73e <CPU::setupFeatures()>:
c001a73e:	53                   	push   ebx
c001a73f:	83 ec 08             	sub    esp,0x8
c001a742:	f6 05 8f cb 02 c0 20 	test   BYTE PTR ds:0xc002cb8f,0x20
c001a749:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a74d:	74 18                	je     c001a767 <CPU::setupFeatures()+0x29>
c001a74f:	83 ec 0c             	sub    esp,0xc
c001a752:	68 13 56 02 c0       	push   0xc0025613
c001a757:	e8 0a c8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a75c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a75f:	e8 54 ff ff ff       	call   c001a6b8 <CPU::setupUMIP()>
c001a764:	83 c4 10             	add    esp,0x10
c001a767:	f6 05 8e cb 02 c0 08 	test   BYTE PTR ds:0xc002cb8e,0x8
c001a76e:	74 18                	je     c001a788 <CPU::setupFeatures()+0x4a>
c001a770:	83 ec 0c             	sub    esp,0xc
c001a773:	68 1d 56 02 c0       	push   0xc002561d
c001a778:	e8 e9 c7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a77d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a780:	e8 3d ff ff ff       	call   c001a6c2 <CPU::setupTSC()>
c001a785:	83 c4 10             	add    esp,0x10
c001a788:	f6 05 8e cb 02 c0 20 	test   BYTE PTR ds:0xc002cb8e,0x20
c001a78f:	74 18                	je     c001a7a9 <CPU::setupFeatures()+0x6b>
c001a791:	83 ec 0c             	sub    esp,0xc
c001a794:	68 26 56 02 c0       	push   0xc0025626
c001a799:	e8 c8 c7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a79e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7a1:	e8 26 ff ff ff       	call   c001a6cc <CPU::setupLargePages()>
c001a7a6:	83 c4 10             	add    esp,0x10
c001a7a9:	f6 05 8e cb 02 c0 40 	test   BYTE PTR ds:0xc002cb8e,0x40
c001a7b0:	74 18                	je     c001a7ca <CPU::setupFeatures()+0x8c>
c001a7b2:	83 ec 0c             	sub    esp,0xc
c001a7b5:	68 2f 56 02 c0       	push   0xc002562f
c001a7ba:	e8 a7 c7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a7bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7c2:	e8 43 ff ff ff       	call   c001a70a <CPU::setupGlobalPages()>
c001a7c7:	83 c4 10             	add    esp,0x10
c001a7ca:	f6 05 8e cb 02 c0 80 	test   BYTE PTR ds:0xc002cb8e,0x80
c001a7d1:	74 18                	je     c001a7eb <CPU::setupFeatures()+0xad>
c001a7d3:	83 ec 0c             	sub    esp,0xc
c001a7d6:	68 41 56 02 c0       	push   0xc0025641
c001a7db:	e8 86 c7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a7e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7e3:	e8 ee fe ff ff       	call   c001a6d6 <CPU::setupPAT()>
c001a7e8:	83 c4 10             	add    esp,0x10
c001a7eb:	f6 05 90 cb 02 c0 04 	test   BYTE PTR ds:0xc002cb90,0x4
c001a7f2:	74 11                	je     c001a805 <CPU::setupFeatures()+0xc7>
c001a7f4:	c7 44 24 10 4a 56 02 c0 	mov    DWORD PTR [esp+0x10],0xc002564a
c001a7fc:	83 c4 08             	add    esp,0x8
c001a7ff:	5b                   	pop    ebx
c001a800:	e9 61 c7 fe ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c001a805:	83 c4 08             	add    esp,0x8
c001a808:	5b                   	pop    ebx
c001a809:	c3                   	ret    

c001a80a <CPU::open(int, int, void*)>:
c001a80a:	55                   	push   ebp
c001a80b:	57                   	push   edi
c001a80c:	56                   	push   esi
c001a80d:	53                   	push   ebx
c001a80e:	83 ec 18             	sub    esp,0x18
c001a811:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a815:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a819:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a81d:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001a823:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001a829:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001a82f:	50                   	push   eax
c001a830:	e8 3f 41 ff ff       	call   c000e974 <GDT::setup()>
c001a835:	83 c4 0c             	add    esp,0xc
c001a838:	6a 00                	push   0x0
c001a83a:	68 ef be ad de       	push   0xdeadbeef
c001a83f:	55                   	push   ebp
c001a840:	e8 8b 82 ff ff       	call   c0012ad0 <TSS::setup(unsigned long, unsigned long)>
c001a845:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a848:	e8 63 82 ff ff       	call   c0012ab0 <TSS::flush()>
c001a84d:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001a853:	89 04 24             	mov    DWORD PTR [esp],eax
c001a856:	e8 7f 43 ff ff       	call   c000ebda <IDT::setup()>
c001a85b:	b8 00 04 00 00       	mov    eax,0x400
c001a860:	0f 23 f8             	mov    dr7,eax
c001a863:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001a86d:	e8 6c 55 ff ff       	call   c000fdde <Phys::allocatePage()>
c001a872:	83 c4 10             	add    esp,0x10
c001a875:	85 f6                	test   esi,esi
c001a877:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001a87d:	89 38                	mov    DWORD PTR [eax],edi
c001a87f:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a885:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a888:	74 10                	je     c001a89a <CPU::open(int, int, void*)+0x90>
c001a88a:	50                   	push   eax
c001a88b:	50                   	push   eax
c001a88c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a892:	56                   	push   esi
c001a893:	e8 da 8b ff ff       	call   c0013472 <VAS::setCPUSpecific(unsigned long)>
c001a898:	eb 0d                	jmp    c001a8a7 <CPU::open(int, int, void*)+0x9d>
c001a89a:	83 ec 0c             	sub    esp,0xc
c001a89d:	68 54 56 02 c0       	push   0xc0025654
c001a8a2:	e8 3d 53 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001a8a7:	83 c4 10             	add    esp,0x10
c001a8aa:	83 ec 0c             	sub    esp,0xc
c001a8ad:	68 62 56 02 c0       	push   0xc0025662
c001a8b2:	e8 5a 29 ff ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001a8b7:	e8 1b fb ff ff       	call   c001a3d7 <HalInitialise()>
c001a8bc:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001a8c3:	e8 fc 28 ff ff       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a8c8:	0f b6 c0             	movzx  eax,al
c001a8cb:	83 f8 01             	cmp    eax,0x1
c001a8ce:	19 c0                	sbb    eax,eax
c001a8d0:	83 e0 46             	and    eax,0x46
c001a8d3:	83 c0 1e             	add    eax,0x1e
c001a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8d9:	e8 b3 07 ff ff       	call   c000b091 <setupTimer(int)>
c001a8de:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001a8e4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001a8eb:	e8 d4 28 ff ff       	call   c000d1c4 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a8f0:	83 c4 10             	add    esp,0x10
c001a8f3:	84 c0                	test   al,al
c001a8f5:	74 0c                	je     c001a903 <CPU::open(int, int, void*)+0xf9>
c001a8f7:	83 ec 0c             	sub    esp,0xc
c001a8fa:	53                   	push   ebx
c001a8fb:	e8 3e fe ff ff       	call   c001a73e <CPU::setupFeatures()>
c001a900:	83 c4 10             	add    esp,0x10
c001a903:	83 c4 0c             	add    esp,0xc
c001a906:	31 c0                	xor    eax,eax
c001a908:	5b                   	pop    ebx
c001a909:	5e                   	pop    esi
c001a90a:	5f                   	pop    edi
c001a90b:	5d                   	pop    ebp
c001a90c:	c3                   	ret    

c001a90d <convertLegacyIRQNumber(int)>:
c001a90d:	83 ec 0c             	sub    esp,0xc
c001a910:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001a917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a91b:	74 0c                	je     c001a929 <convertLegacyIRQNumber(int)+0x1c>
c001a91d:	83 f8 0f             	cmp    eax,0xf
c001a920:	7f 0b                	jg     c001a92d <convertLegacyIRQNumber(int)+0x20>
c001a922:	0f b6 80 c8 61 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9e38]
c001a929:	83 c4 0c             	add    esp,0xc
c001a92c:	c3                   	ret    
c001a92d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a931:	83 ec 0c             	sub    esp,0xc
c001a934:	68 c8 56 02 c0       	push   0xc00256c8
c001a939:	e8 a6 52 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001a93e:	83 c4 10             	add    esp,0x10
c001a941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a945:	83 c4 0c             	add    esp,0xc
c001a948:	c3                   	ret    

c001a949 <KeSetupInterrupts()>:
c001a949:	31 c0                	xor    eax,eax
c001a94b:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001a955:	83 c0 10             	add    eax,0x10
c001a958:	c7 80 90 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3470],0x0
c001a962:	c7 80 94 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd246c],0x0
c001a96c:	c7 80 94 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd346c],0x0
c001a976:	c7 80 98 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2468],0x0
c001a980:	c7 80 98 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3468],0x0
c001a98a:	c7 80 9c db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2464],0x0
c001a994:	c7 80 9c cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3464],0x0
c001a99e:	3d 00 10 00 00       	cmp    eax,0x1000
c001a9a3:	75 a6                	jne    c001a94b <KeSetupInterrupts()+0x2>
c001a9a5:	c3                   	ret    

c001a9a6 <int_handler>:
c001a9a6:	55                   	push   ebp
c001a9a7:	57                   	push   edi
c001a9a8:	56                   	push   esi
c001a9a9:	53                   	push   ebx
c001a9aa:	83 ec 0c             	sub    esp,0xc
c001a9ad:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a9b1:	eb 02                	jmp    c001a9b5 <int_handler+0xf>
c001a9b3:	fa                   	cli    
c001a9b4:	f4                   	hlt    
c001a9b5:	e8 24 52 ff ff       	call   c000fbde <KeIsKernelInPanic()>
c001a9ba:	84 c0                	test   al,al
c001a9bc:	75 f5                	jne    c001a9b3 <int_handler+0xd>
c001a9be:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001a9c1:	8d 46 e0             	lea    eax,[esi-0x20]
c001a9c4:	83 f8 17             	cmp    eax,0x17
c001a9c7:	76 40                	jbe    c001aa09 <int_handler+0x63>
c001a9c9:	c1 e6 04             	shl    esi,0x4
c001a9cc:	31 db                	xor    ebx,ebx
c001a9ce:	8d ae a0 db 02 c0    	lea    ebp,[esi-0x3ffd2460]
c001a9d4:	81 c6 a0 cb 02 c0    	add    esi,0xc002cba0
c001a9da:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001a9de:	85 c0                	test   eax,eax
c001a9e0:	74 13                	je     c001a9f5 <int_handler+0x4f>
c001a9e2:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001a9e6:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001a9e9:	74 2c                	je     c001aa17 <int_handler+0x71>
c001a9eb:	83 ec 08             	sub    esp,0x8
c001a9ee:	52                   	push   edx
c001a9ef:	57                   	push   edi
c001a9f0:	ff d0                	call   eax
c001a9f2:	83 c4 10             	add    esp,0x10
c001a9f5:	83 c3 01             	add    ebx,0x1
c001a9f8:	83 fb 04             	cmp    ebx,0x4
c001a9fb:	75 dd                	jne    c001a9da <int_handler+0x34>
c001a9fd:	83 c4 0c             	add    esp,0xc
c001aa00:	31 c0                	xor    eax,eax
c001aa02:	5b                   	pop    ebx
c001aa03:	31 d2                	xor    edx,edx
c001aa05:	5e                   	pop    esi
c001aa06:	5f                   	pop    edi
c001aa07:	5d                   	pop    ebp
c001aa08:	c3                   	ret    
c001aa09:	83 ec 0c             	sub    esp,0xc
c001aa0c:	50                   	push   eax
c001aa0d:	e8 ea fb ff ff       	call   c001a5fc <HalEndOfInterrupt(int)>
c001aa12:	83 c4 10             	add    esp,0x10
c001aa15:	eb b2                	jmp    c001a9c9 <int_handler+0x23>
c001aa17:	83 ec 08             	sub    esp,0x8
c001aa1a:	52                   	push   edx
c001aa1b:	57                   	push   edi
c001aa1c:	ff d0                	call   eax
c001aa1e:	83 c4 10             	add    esp,0x10
c001aa21:	83 c4 0c             	add    esp,0xc
c001aa24:	5b                   	pop    ebx
c001aa25:	5e                   	pop    esi
c001aa26:	5f                   	pop    edi
c001aa27:	5d                   	pop    ebp
c001aa28:	c3                   	ret    

c001aa29 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001aa29:	56                   	push   esi
c001aa2a:	31 c0                	xor    eax,eax
c001aa2c:	53                   	push   ebx
c001aa2d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001aa31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa35:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa39:	89 ca                	mov    edx,ecx
c001aa3b:	c1 e2 04             	shl    edx,0x4
c001aa3e:	83 bc 82 a0 db 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd2460],0x0
c001aa46:	74 17                	je     c001aa5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001aa48:	83 c0 01             	add    eax,0x1
c001aa4b:	83 f8 04             	cmp    eax,0x4
c001aa4e:	75 ee                	jne    c001aa3e <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001aa50:	c7 44 24 0c 29 57 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025729
c001aa58:	5b                   	pop    ebx
c001aa59:	5e                   	pop    esi
c001aa5a:	e9 85 51 ff ff       	jmp    c000fbe4 <KePanic(char const*)>
c001aa5f:	8d 04 88             	lea    eax,[eax+ecx*4]
c001aa62:	89 1c 85 a0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2460],ebx
c001aa69:	5b                   	pop    ebx
c001aa6a:	89 34 85 a0 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3460],esi
c001aa71:	5e                   	pop    esi
c001aa72:	c3                   	ret    

c001aa73 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001aa73:	55                   	push   ebp
c001aa74:	57                   	push   edi
c001aa75:	56                   	push   esi
c001aa76:	53                   	push   ebx
c001aa77:	83 ec 0c             	sub    esp,0xc
c001aa7a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001aa7e:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001aa85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aa89:	8d 6e 20             	lea    ebp,[esi+0x20]
c001aa8c:	74 57                	je     c001aae5 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001aa8e:	84 c0                	test   al,al
c001aa90:	89 c7                	mov    edi,eax
c001aa92:	74 1d                	je     c001aab1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001aa94:	83 fe 0f             	cmp    esi,0xf
c001aa97:	0f 8f d9 00 00 00    	jg     c001ab76 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001aa9d:	0f b6 b6 c8 61 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9e38]
c001aaa4:	0f b7 bc 36 20 be 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd41e0]
c001aaac:	d1 ef                	shr    edi,1
c001aaae:	83 e7 01             	and    edi,0x1
c001aab1:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c001aab6:	83 ec 08             	sub    esp,0x8
c001aab9:	31 db                	xor    ebx,ebx
c001aabb:	50                   	push   eax
c001aabc:	68 36 57 02 c0       	push   0xc0025736
c001aac1:	e8 a0 c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aac6:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c001aacb:	83 c4 10             	add    esp,0x10
c001aace:	85 c0                	test   eax,eax
c001aad0:	7f 59                	jg     c001ab2b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001aad2:	8d 6e 20             	lea    ebp,[esi+0x20]
c001aad5:	83 ec 0c             	sub    esp,0xc
c001aad8:	68 4d 57 02 c0       	push   0xc002574d
c001aadd:	e8 02 51 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001aae2:	83 c4 10             	add    esp,0x10
c001aae5:	89 e8                	mov    eax,ebp
c001aae7:	31 d2                	xor    edx,edx
c001aae9:	c1 e0 04             	shl    eax,0x4
c001aaec:	8b 8c 90 a0 db 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd2460]
c001aaf3:	85 c9                	test   ecx,ecx
c001aaf5:	0f 84 92 00 00 00    	je     c001ab8d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001aafb:	83 c2 01             	add    edx,0x1
c001aafe:	83 fa 04             	cmp    edx,0x4
c001ab01:	75 e9                	jne    c001aaec <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001ab03:	83 ec 0c             	sub    esp,0xc
c001ab06:	68 04 57 02 c0       	push   0xc0025704
c001ab0b:	e8 d4 50 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001ab10:	83 c4 10             	add    esp,0x10
c001ab13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab18:	83 c4 0c             	add    esp,0xc
c001ab1b:	5b                   	pop    ebx
c001ab1c:	5e                   	pop    esi
c001ab1d:	5f                   	pop    edi
c001ab1e:	5d                   	pop    ebp
c001ab1f:	c3                   	ret    
c001ab20:	83 c3 01             	add    ebx,0x1
c001ab23:	39 1d 00 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb00,ebx
c001ab29:	7e a7                	jle    c001aad2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001ab2b:	8b 2c 9d 20 cb 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd34e0]
c001ab32:	83 ec 08             	sub    esp,0x8
c001ab35:	56                   	push   esi
c001ab36:	55                   	push   ebp
c001ab37:	e8 24 dc ff ff       	call   c0018760 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001ab3c:	83 c4 10             	add    esp,0x10
c001ab3f:	84 c0                	test   al,al
c001ab41:	74 dd                	je     c001ab20 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001ab43:	89 f8                	mov    eax,edi
c001ab45:	83 ec 04             	sub    esp,0x4
c001ab48:	8b 1c 9d 20 cb 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd34e0]
c001ab4f:	8d 6e 20             	lea    ebp,[esi+0x20]
c001ab52:	0f b6 f8             	movzx  edi,al
c001ab55:	57                   	push   edi
c001ab56:	89 e8                	mov    eax,ebp
c001ab58:	6a 00                	push   0x0
c001ab5a:	0f b6 c0             	movzx  eax,al
c001ab5d:	50                   	push   eax
c001ab5e:	89 f0                	mov    eax,esi
c001ab60:	6a 00                	push   0x0
c001ab62:	0f b6 c0             	movzx  eax,al
c001ab65:	6a 00                	push   0x0
c001ab67:	50                   	push   eax
c001ab68:	53                   	push   ebx
c001ab69:	e8 5e dd ff ff       	call   c00188cc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001ab6e:	83 c4 20             	add    esp,0x20
c001ab71:	e9 6f ff ff ff       	jmp    c001aae5 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001ab76:	83 ec 0c             	sub    esp,0xc
c001ab79:	31 ff                	xor    edi,edi
c001ab7b:	68 c8 56 02 c0       	push   0xc00256c8
c001ab80:	e8 5f 50 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001ab85:	83 c4 10             	add    esp,0x10
c001ab88:	e9 24 ff ff ff       	jmp    c001aab1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001ab8d:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001ab90:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab94:	89 14 85 a0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2460],edx
c001ab9b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ab9f:	89 14 85 a0 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3460],edx
c001aba6:	83 c4 0c             	add    esp,0xc
c001aba9:	89 f0                	mov    eax,esi
c001abab:	5b                   	pop    ebx
c001abac:	5e                   	pop    esi
c001abad:	5f                   	pop    edi
c001abae:	5d                   	pop    ebp
c001abaf:	c3                   	ret    

c001abb0 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001abb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001abb8:	c1 e0 04             	shl    eax,0x4
c001abbb:	8d 50 10             	lea    edx,[eax+0x10]
c001abbe:	39 88 a0 db 02 c0    	cmp    DWORD PTR [eax-0x3ffd2460],ecx
c001abc4:	74 08                	je     c001abce <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001abc6:	83 c0 04             	add    eax,0x4
c001abc9:	39 d0                	cmp    eax,edx
c001abcb:	75 f1                	jne    c001abbe <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001abcd:	c3                   	ret    
c001abce:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001abd8:	c7 80 a0 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3460],0x0
c001abe2:	eb e2                	jmp    c001abc6 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001abe4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001abe4:	56                   	push   esi
c001abe5:	53                   	push   ebx
c001abe6:	83 ec 04             	sub    esp,0x4
c001abe9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001abee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001abf2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001abf6:	74 09                	je     c001ac01 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001abf8:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001abff:	75 34                	jne    c001ac35 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001ac01:	8d 43 20             	lea    eax,[ebx+0x20]
c001ac04:	c1 e0 04             	shl    eax,0x4
c001ac07:	8d 50 10             	lea    edx,[eax+0x10]
c001ac0a:	39 b0 a0 db 02 c0    	cmp    DWORD PTR [eax-0x3ffd2460],esi
c001ac10:	74 0d                	je     c001ac1f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001ac12:	83 c0 04             	add    eax,0x4
c001ac15:	39 d0                	cmp    eax,edx
c001ac17:	75 f1                	jne    c001ac0a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001ac19:	83 c4 04             	add    esp,0x4
c001ac1c:	5b                   	pop    ebx
c001ac1d:	5e                   	pop    esi
c001ac1e:	c3                   	ret    
c001ac1f:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001ac29:	c7 80 a0 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3460],0x0
c001ac33:	eb dd                	jmp    c001ac12 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001ac35:	83 fb 0f             	cmp    ebx,0xf
c001ac38:	7f 09                	jg     c001ac43 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001ac3a:	0f b6 9b c8 61 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd9e38]
c001ac41:	eb be                	jmp    c001ac01 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ac43:	83 ec 0c             	sub    esp,0xc
c001ac46:	68 5a 57 02 c0       	push   0xc002575a
c001ac4b:	e8 94 4f ff ff       	call   c000fbe4 <KePanic(char const*)>
c001ac50:	83 c4 10             	add    esp,0x10
c001ac53:	eb ac                	jmp    c001ac01 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ac55:	66 90                	xchg   ax,ax
c001ac57:	90                   	nop

c001ac58 <picIoWait()>:
c001ac58:	eb 00                	jmp    c001ac5a <picIoWait()+0x2>
c001ac5a:	eb 00                	jmp    c001ac5c <picIoWait()+0x4>
c001ac5c:	90                   	nop
c001ac5d:	c3                   	ret    
c001ac5e:	66 90                	xchg   ax,ax

c001ac60 <picDisable()>:
c001ac60:	83 ec 10             	sub    esp,0x10
c001ac63:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001ac6a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001ac6f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ac73:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ac78:	ee                   	out    dx,al
c001ac79:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001ac80:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001ac85:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ac89:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001ac8e:	ee                   	out    dx,al
c001ac8f:	90                   	nop
c001ac90:	83 c4 10             	add    esp,0x10
c001ac93:	c3                   	ret    

c001ac94 <picGetIRQReg(int)>:
c001ac94:	83 ec 10             	sub    esp,0x10
c001ac97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac9b:	0f b6 c0             	movzx  eax,al
c001ac9e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001aca5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001aca9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001acad:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001acb2:	ee                   	out    dx,al
c001acb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acb7:	0f b6 c0             	movzx  eax,al
c001acba:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001acc1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001acc5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001acc9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001acce:	ee                   	out    dx,al
c001accf:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001acd6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001acdb:	89 c2                	mov    edx,eax
c001acdd:	ec                   	in     al,dx
c001acde:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ace2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ace6:	0f b6 c0             	movzx  eax,al
c001ace9:	c1 e0 08             	shl    eax,0x8
c001acec:	89 c1                	mov    ecx,eax
c001acee:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001acf5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001acfa:	89 c2                	mov    edx,eax
c001acfc:	ec                   	in     al,dx
c001acfd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ad01:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ad05:	0f b6 c0             	movzx  eax,al
c001ad08:	09 c8                	or     eax,ecx
c001ad0a:	83 c4 10             	add    esp,0x10
c001ad0d:	c3                   	ret    
c001ad0e:	66 90                	xchg   ax,ax

c001ad10 <picOpen()>:
c001ad10:	83 ec 50             	sub    esp,0x50
c001ad13:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001ad1a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ad1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ad23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad27:	ee                   	out    dx,al
c001ad28:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001ad2f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ad34:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001ad38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad3c:	ee                   	out    dx,al
c001ad3d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001ad45:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001ad4d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001ad54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad58:	89 c2                	mov    edx,eax
c001ad5a:	ec                   	in     al,dx
c001ad5b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ad5f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001ad63:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001ad67:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001ad6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad72:	89 c2                	mov    edx,eax
c001ad74:	ec                   	in     al,dx
c001ad75:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001ad79:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001ad7d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001ad81:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001ad88:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001ad8d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ad91:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ad95:	ee                   	out    dx,al
c001ad96:	e8 bd fe ff ff       	call   c001ac58 <picIoWait()>
c001ad9b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001ada2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001ada7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001adab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001adaf:	ee                   	out    dx,al
c001adb0:	e8 a3 fe ff ff       	call   c001ac58 <picIoWait()>
c001adb5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001adb9:	0f b6 c0             	movzx  eax,al
c001adbc:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001adc3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001adc7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001adcb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001adcf:	ee                   	out    dx,al
c001add0:	e8 83 fe ff ff       	call   c001ac58 <picIoWait()>
c001add5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001add9:	0f b6 c0             	movzx  eax,al
c001addc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001ade3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ade7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001adeb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001adef:	ee                   	out    dx,al
c001adf0:	e8 63 fe ff ff       	call   c001ac58 <picIoWait()>
c001adf5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001adfc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001ae01:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001ae05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae09:	ee                   	out    dx,al
c001ae0a:	e8 49 fe ff ff       	call   c001ac58 <picIoWait()>
c001ae0f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001ae16:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001ae1b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001ae1f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ae23:	ee                   	out    dx,al
c001ae24:	e8 2f fe ff ff       	call   c001ac58 <picIoWait()>
c001ae29:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001ae30:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001ae35:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001ae39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ae3d:	ee                   	out    dx,al
c001ae3e:	e8 15 fe ff ff       	call   c001ac58 <picIoWait()>
c001ae43:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001ae4a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001ae4f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001ae53:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ae57:	ee                   	out    dx,al
c001ae58:	e8 fb fd ff ff       	call   c001ac58 <picIoWait()>
c001ae5d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001ae62:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001ae69:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001ae6d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001ae71:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001ae75:	ee                   	out    dx,al
c001ae76:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001ae7b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001ae82:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ae86:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001ae8a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001ae8e:	ee                   	out    dx,al
c001ae8f:	90                   	nop
c001ae90:	83 c4 50             	add    esp,0x50
c001ae93:	c3                   	ret    

c001ae94 <picEOI(int)>:
c001ae94:	83 ec 10             	sub    esp,0x10
c001ae97:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001ae9c:	75 1e                	jne    c001aebc <picEOI(int)+0x28>
c001ae9e:	6a 0b                	push   0xb
c001aea0:	e8 ef fd ff ff       	call   c001ac94 <picGetIRQReg(int)>
c001aea5:	83 c4 04             	add    esp,0x4
c001aea8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001aead:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001aeb2:	25 80 00 00 00       	and    eax,0x80
c001aeb7:	74 73                	je     c001af2c <picEOI(int)+0x98>
c001aeb9:	8d 76 00             	lea    esi,[esi+0x0]
c001aebc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001aec1:	75 31                	jne    c001aef4 <picEOI(int)+0x60>
c001aec3:	6a 0b                	push   0xb
c001aec5:	e8 ca fd ff ff       	call   c001ac94 <picGetIRQReg(int)>
c001aeca:	83 c4 04             	add    esp,0x4
c001aecd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001aed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aed6:	98                   	cwde   
c001aed7:	85 c0                	test   eax,eax
c001aed9:	78 19                	js     c001aef4 <picEOI(int)+0x60>
c001aedb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001aee2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001aee7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001aeeb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001aef0:	ee                   	out    dx,al
c001aef1:	eb 3d                	jmp    c001af30 <picEOI(int)+0x9c>
c001aef3:	90                   	nop
c001aef4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001aef9:	7e 19                	jle    c001af14 <picEOI(int)+0x80>
c001aefb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001af02:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001af07:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001af0b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001af10:	ee                   	out    dx,al
c001af11:	8d 76 00             	lea    esi,[esi+0x0]
c001af14:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001af1b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001af20:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001af24:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001af29:	ee                   	out    dx,al
c001af2a:	eb 04                	jmp    c001af30 <picEOI(int)+0x9c>
c001af2c:	90                   	nop
c001af2d:	8d 76 00             	lea    esi,[esi+0x0]
c001af30:	83 c4 10             	add    esp,0x10
c001af33:	c3                   	ret    

c001af34 <RTC::open(int, int, void*)>:
c001af34:	31 c0                	xor    eax,eax
c001af36:	c3                   	ret    
c001af37:	90                   	nop

c001af38 <RTC::close(int, int, void*)>:
c001af38:	31 c0                	xor    eax,eax
c001af3a:	c3                   	ret    
c001af3b:	90                   	nop

c001af3c <RTC::timeInSecondsUTC()>:
c001af3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af40:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001af46:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001af4c:	c3                   	ret    
c001af4d:	90                   	nop

c001af4e <RTC::timeInDatetimeUTC()>:
c001af4e:	53                   	push   ebx
c001af4f:	83 ec 14             	sub    esp,0x14
c001af52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001af5a:	8b 10                	mov    edx,DWORD PTR [eax]
c001af5c:	50                   	push   eax
c001af5d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001af60:	83 c4 0c             	add    esp,0xc
c001af63:	52                   	push   edx
c001af64:	50                   	push   eax
c001af65:	53                   	push   ebx
c001af66:	e8 a9 e6 fe ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c001af6b:	89 d8                	mov    eax,ebx
c001af6d:	83 c4 14             	add    esp,0x14
c001af70:	5b                   	pop    ebx
c001af71:	c2 04 00             	ret    0x4

c001af74 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001af74:	56                   	push   esi
c001af75:	53                   	push   ebx
c001af76:	83 ec 14             	sub    esp,0x14
c001af79:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af7f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001af82:	8d 44 24 08          	lea    eax,[esp+0x8]
c001af86:	52                   	push   edx
c001af87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af8f:	50                   	push   eax
c001af90:	e8 7f e6 fe ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c001af95:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001af99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001afa1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001afa5:	89 f0                	mov    eax,esi
c001afa7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001afab:	83 c4 20             	add    esp,0x20
c001afae:	5b                   	pop    ebx
c001afaf:	5e                   	pop    esi
c001afb0:	ff e0                	jmp    eax

c001afb2 <RTC::~RTC()>:
c001afb2:	83 ec 0c             	sub    esp,0xc
c001afb5:	ba 84 57 02 c0       	mov    edx,0xc0025784
c001afba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afbe:	89 10                	mov    DWORD PTR [eax],edx
c001afc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afc4:	83 ec 0c             	sub    esp,0xc
c001afc7:	50                   	push   eax
c001afc8:	e8 1f e1 fe ff       	call   c00090ec <Clock::~Clock()>
c001afcd:	83 c4 10             	add    esp,0x10
c001afd0:	90                   	nop
c001afd1:	83 c4 0c             	add    esp,0xc
c001afd4:	c3                   	ret    
c001afd5:	90                   	nop

c001afd6 <RTC::~RTC()>:
c001afd6:	83 ec 0c             	sub    esp,0xc
c001afd9:	83 ec 0c             	sub    esp,0xc
c001afdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001afe0:	e8 cd ff ff ff       	call   c001afb2 <RTC::~RTC()>
c001afe5:	83 c4 10             	add    esp,0x10
c001afe8:	83 ec 08             	sub    esp,0x8
c001afeb:	68 60 01 00 00       	push   0x160
c001aff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aff4:	e8 c3 22 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c001aff9:	83 c4 10             	add    esp,0x10
c001affc:	83 c4 0c             	add    esp,0xc
c001afff:	c3                   	ret    

c001b000 <RTC::get_update_in_progress_flag()>:
c001b000:	83 ec 18             	sub    esp,0x18
c001b003:	6a 0a                	push   0xa
c001b005:	e8 d3 d9 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b00a:	83 c4 1c             	add    esp,0x1c
c001b00d:	0f b6 c0             	movzx  eax,al
c001b010:	c1 e8 07             	shr    eax,0x7
c001b013:	c3                   	ret    

c001b014 <RTC::completeRTCRefresh()>:
c001b014:	55                   	push   ebp
c001b015:	57                   	push   edi
c001b016:	56                   	push   esi
c001b017:	53                   	push   ebx
c001b018:	83 ec 3c             	sub    esp,0x3c
c001b01b:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001b021:	83 ec 0c             	sub    esp,0xc
c001b024:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b028:	e8 d3 ff ff ff       	call   c001b000 <RTC::get_update_in_progress_flag()>
c001b02d:	83 c4 10             	add    esp,0x10
c001b030:	84 c0                	test   al,al
c001b032:	74 0e                	je     c001b042 <RTC::completeRTCRefresh()+0x2e>
c001b034:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b03a:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001b040:	73 df                	jae    c001b021 <RTC::completeRTCRefresh()+0xd>
c001b042:	83 ec 0c             	sub    esp,0xc
c001b045:	6a 00                	push   0x0
c001b047:	e8 91 d9 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b04c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b053:	89 c7                	mov    edi,eax
c001b055:	e8 83 d9 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b05a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b061:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b065:	e8 73 d9 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b06a:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b071:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b075:	e8 63 d9 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b07a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b081:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b085:	e8 53 d9 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b08a:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b091:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b095:	e8 43 d9 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b09a:	0f b6 c0             	movzx  eax,al
c001b09d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b0a1:	83 c4 10             	add    esp,0x10
c001b0a4:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001b0aa:	83 ec 0c             	sub    esp,0xc
c001b0ad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b0b1:	e8 4a ff ff ff       	call   c001b000 <RTC::get_update_in_progress_flag()>
c001b0b6:	83 c4 10             	add    esp,0x10
c001b0b9:	84 c0                	test   al,al
c001b0bb:	74 0e                	je     c001b0cb <RTC::completeRTCRefresh()+0xb7>
c001b0bd:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b0c3:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001b0c9:	73 df                	jae    c001b0aa <RTC::completeRTCRefresh()+0x96>
c001b0cb:	83 ec 0c             	sub    esp,0xc
c001b0ce:	6a 00                	push   0x0
c001b0d0:	e8 08 d9 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b0d5:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b0dc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b0e0:	e8 f8 d8 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b0e5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b0ec:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b0f0:	e8 e8 d8 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b0f5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b0fc:	88 c3                	mov    bl,al
c001b0fe:	e8 da d8 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b103:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b10a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b10e:	e8 ca d8 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b113:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b11a:	89 c6                	mov    esi,eax
c001b11c:	e8 bc d8 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b121:	89 f9                	mov    ecx,edi
c001b123:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b127:	83 c4 10             	add    esp,0x10
c001b12a:	0f b6 e8             	movzx  ebp,al
c001b12d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b132:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b136:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b13a:	74 27                	je     c001b163 <RTC::completeRTCRefresh()+0x14f>
c001b13c:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001b140:	89 f0                	mov    eax,esi
c001b142:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001b146:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b14a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b14e:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b152:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b156:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b15a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b15e:	e9 41 ff ff ff       	jmp    c001b0a4 <RTC::completeRTCRefresh()+0x90>
c001b163:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b168:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b16c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b170:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001b174:	75 c6                	jne    c001b13c <RTC::completeRTCRefresh()+0x128>
c001b176:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b17b:	89 f1                	mov    ecx,esi
c001b17d:	0f b6 fb             	movzx  edi,bl
c001b180:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b184:	0f b6 c9             	movzx  ecx,cl
c001b187:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b18b:	89 f1                	mov    ecx,esi
c001b18d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b191:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b195:	0f 94 c2             	sete   dl
c001b198:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b19c:	0f 94 c0             	sete   al
c001b19f:	21 d0                	and    eax,edx
c001b1a1:	31 d2                	xor    edx,edx
c001b1a3:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b1a7:	0f 94 c2             	sete   dl
c001b1aa:	85 c2                	test   edx,eax
c001b1ac:	74 8e                	je     c001b13c <RTC::completeRTCRefresh()+0x128>
c001b1ae:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001b1b2:	75 88                	jne    c001b13c <RTC::completeRTCRefresh()+0x128>
c001b1b4:	83 ec 0c             	sub    esp,0xc
c001b1b7:	6a 0b                	push   0xb
c001b1b9:	e8 1f d8 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b1be:	83 c4 10             	add    esp,0x10
c001b1c1:	a8 04                	test   al,0x4
c001b1c3:	75 7a                	jne    c001b23f <RTC::completeRTCRefresh()+0x22b>
c001b1c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b1c9:	c1 ef 04             	shr    edi,0x4
c001b1cc:	83 e6 0f             	and    esi,0xf
c001b1cf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b1d3:	c1 ed 04             	shr    ebp,0x4
c001b1d6:	6b ed 0a             	imul   ebp,ebp,0xa
c001b1d9:	c1 ea 04             	shr    edx,0x4
c001b1dc:	6b d2 0a             	imul   edx,edx,0xa
c001b1df:	83 e1 0f             	and    ecx,0xf
c001b1e2:	01 d1                	add    ecx,edx
c001b1e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b1e8:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b1ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b1f0:	c1 ea 04             	shr    edx,0x4
c001b1f3:	6b d2 0a             	imul   edx,edx,0xa
c001b1f6:	83 e1 0f             	and    ecx,0xf
c001b1f9:	01 d1                	add    ecx,edx
c001b1fb:	89 fa                	mov    edx,edi
c001b1fd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b201:	83 e2 07             	and    edx,0x7
c001b204:	89 d9                	mov    ecx,ebx
c001b206:	6b d2 0a             	imul   edx,edx,0xa
c001b209:	83 e1 0f             	and    ecx,0xf
c001b20c:	83 e3 80             	and    ebx,0xffffff80
c001b20f:	01 d1                	add    ecx,edx
c001b211:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b215:	09 cb                	or     ebx,ecx
c001b217:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b21b:	c1 ea 04             	shr    edx,0x4
c001b21e:	6b d2 0a             	imul   edx,edx,0xa
c001b221:	83 e1 0f             	and    ecx,0xf
c001b224:	01 d1                	add    ecx,edx
c001b226:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b22a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b22e:	c1 ea 04             	shr    edx,0x4
c001b231:	6b d2 0a             	imul   edx,edx,0xa
c001b234:	01 d6                	add    esi,edx
c001b236:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b23a:	83 e2 0f             	and    edx,0xf
c001b23d:	01 d5                	add    ebp,edx
c001b23f:	a8 02                	test   al,0x2
c001b241:	75 15                	jne    c001b258 <RTC::completeRTCRefresh()+0x244>
c001b243:	f6 c3 80             	test   bl,0x80
c001b246:	74 10                	je     c001b258 <RTC::completeRTCRefresh()+0x244>
c001b248:	83 e3 7f             	and    ebx,0x7f
c001b24b:	b9 18 00 00 00       	mov    ecx,0x18
c001b250:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b253:	99                   	cdq    
c001b254:	f7 f9                	idiv   ecx
c001b256:	88 d3                	mov    bl,dl
c001b258:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001b25e:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001b264:	77 06                	ja     c001b26c <RTC::completeRTCRefresh()+0x258>
c001b266:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001b26c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b271:	31 c9                	xor    ecx,ecx
c001b273:	31 d2                	xor    edx,edx
c001b275:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001b279:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b27d:	89 cd                	mov    ebp,ecx
c001b27f:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001b283:	c1 e7 10             	shl    edi,0x10
c001b286:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b28c:	c1 e0 10             	shl    eax,0x10
c001b28f:	09 c5                	or     ebp,eax
c001b291:	89 e9                	mov    ecx,ebp
c001b293:	0f b7 c2             	movzx  eax,dx
c001b296:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b29a:	09 f8                	or     eax,edi
c001b29c:	89 c2                	mov    edx,eax
c001b29e:	50                   	push   eax
c001b29f:	50                   	push   eax
c001b2a0:	88 d9                	mov    cl,bl
c001b2a2:	51                   	push   ecx
c001b2a3:	52                   	push   edx
c001b2a4:	e8 7b df fe ff       	call   c0009224 <KeDatetimeToSeconds(datetime_t)>
c001b2a9:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b2ad:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b2b3:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b2b9:	83 c4 4c             	add    esp,0x4c
c001b2bc:	5b                   	pop    ebx
c001b2bd:	5e                   	pop    esi
c001b2be:	5f                   	pop    edi
c001b2bf:	5d                   	pop    ebp
c001b2c0:	c3                   	ret    
c001b2c1:	90                   	nop

c001b2c2 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b2c2:	55                   	push   ebp
c001b2c3:	57                   	push   edi
c001b2c4:	56                   	push   esi
c001b2c5:	53                   	push   ebx
c001b2c6:	83 ec 34             	sub    esp,0x34
c001b2c9:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b2cd:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b2d1:	6a 00                	push   0x0
c001b2d3:	6a 00                	push   0x0
c001b2d5:	e8 57 d7 ff ff       	call   c0018a31 <x86WriteCMOS(unsigned char, unsigned char)>
c001b2da:	5d                   	pop    ebp
c001b2db:	89 fb                	mov    ebx,edi
c001b2dd:	58                   	pop    eax
c001b2de:	6a 00                	push   0x0
c001b2e0:	6a 02                	push   0x2
c001b2e2:	e8 4a d7 ff ff       	call   c0018a31 <x86WriteCMOS(unsigned char, unsigned char)>
c001b2e7:	89 f8                	mov    eax,edi
c001b2e9:	89 f9                	mov    ecx,edi
c001b2eb:	0f b6 c4             	movzx  eax,ah
c001b2ee:	31 d2                	xor    edx,edx
c001b2f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b2f4:	c1 e9 10             	shr    ecx,0x10
c001b2f7:	89 f0                	mov    eax,esi
c001b2f9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b2fd:	89 f0                	mov    eax,esi
c001b2ff:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b303:	0f b6 c4             	movzx  eax,ah
c001b306:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b30a:	89 f0                	mov    eax,esi
c001b30c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b310:	c1 e8 10             	shr    eax,0x10
c001b313:	b9 64 00 00 00       	mov    ecx,0x64
c001b318:	f7 f1                	div    ecx
c001b31a:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b321:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b325:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b329:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b32d:	e8 ab d6 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b332:	83 c4 10             	add    esp,0x10
c001b335:	a8 04                	test   al,0x4
c001b337:	89 c5                	mov    ebp,eax
c001b339:	75 6e                	jne    c001b3a9 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b33b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b33f:	31 d2                	xor    edx,edx
c001b341:	0f b6 c1             	movzx  eax,cl
c001b344:	b9 0a 00 00 00       	mov    ecx,0xa
c001b349:	f7 f1                	div    ecx
c001b34b:	c1 e0 04             	shl    eax,0x4
c001b34e:	09 d0                	or     eax,edx
c001b350:	31 d2                	xor    edx,edx
c001b352:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b356:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b35b:	f7 f1                	div    ecx
c001b35d:	c1 e0 04             	shl    eax,0x4
c001b360:	09 d0                	or     eax,edx
c001b362:	31 d2                	xor    edx,edx
c001b364:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b368:	0f b6 c3             	movzx  eax,bl
c001b36b:	f7 f1                	div    ecx
c001b36d:	c1 e0 04             	shl    eax,0x4
c001b370:	09 d0                	or     eax,edx
c001b372:	31 d2                	xor    edx,edx
c001b374:	89 c3                	mov    ebx,eax
c001b376:	89 f0                	mov    eax,esi
c001b378:	0f b6 c0             	movzx  eax,al
c001b37b:	f7 f1                	div    ecx
c001b37d:	c1 e0 04             	shl    eax,0x4
c001b380:	09 d0                	or     eax,edx
c001b382:	31 d2                	xor    edx,edx
c001b384:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b388:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b38d:	f7 f1                	div    ecx
c001b38f:	c1 e0 04             	shl    eax,0x4
c001b392:	09 d0                	or     eax,edx
c001b394:	31 d2                	xor    edx,edx
c001b396:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b39a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b39e:	f7 f1                	div    ecx
c001b3a0:	c1 e0 04             	shl    eax,0x4
c001b3a3:	09 d0                	or     eax,edx
c001b3a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b3a9:	83 e5 02             	and    ebp,0x2
c001b3ac:	75 1e                	jne    c001b3cc <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b3ae:	0f b6 c3             	movzx  eax,bl
c001b3b1:	83 f8 0b             	cmp    eax,0xb
c001b3b4:	76 10                	jbe    c001b3c6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b3b6:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b3b9:	84 d2                	test   dl,dl
c001b3bb:	88 d3                	mov    bl,dl
c001b3bd:	75 02                	jne    c001b3c1 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b3bf:	b3 0c                	mov    bl,0xc
c001b3c1:	83 cb 80             	or     ebx,0xffffff80
c001b3c4:	eb 06                	jmp    c001b3cc <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b3c6:	85 c0                	test   eax,eax
c001b3c8:	75 02                	jne    c001b3cc <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b3ca:	b3 0c                	mov    bl,0xc
c001b3cc:	50                   	push   eax
c001b3cd:	0f b6 db             	movzx  ebx,bl
c001b3d0:	50                   	push   eax
c001b3d1:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b3d6:	52                   	push   edx
c001b3d7:	6a 00                	push   0x0
c001b3d9:	e8 53 d6 ff ff       	call   c0018a31 <x86WriteCMOS(unsigned char, unsigned char)>
c001b3de:	5a                   	pop    edx
c001b3df:	59                   	pop    ecx
c001b3e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b3e5:	50                   	push   eax
c001b3e6:	6a 02                	push   0x2
c001b3e8:	e8 44 d6 ff ff       	call   c0018a31 <x86WriteCMOS(unsigned char, unsigned char)>
c001b3ed:	5e                   	pop    esi
c001b3ee:	5f                   	pop    edi
c001b3ef:	53                   	push   ebx
c001b3f0:	6a 04                	push   0x4
c001b3f2:	e8 3a d6 ff ff       	call   c0018a31 <x86WriteCMOS(unsigned char, unsigned char)>
c001b3f7:	5d                   	pop    ebp
c001b3f8:	58                   	pop    eax
c001b3f9:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b3fe:	52                   	push   edx
c001b3ff:	6a 07                	push   0x7
c001b401:	e8 2b d6 ff ff       	call   c0018a31 <x86WriteCMOS(unsigned char, unsigned char)>
c001b406:	58                   	pop    eax
c001b407:	5a                   	pop    edx
c001b408:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b40d:	50                   	push   eax
c001b40e:	6a 08                	push   0x8
c001b410:	e8 1c d6 ff ff       	call   c0018a31 <x86WriteCMOS(unsigned char, unsigned char)>
c001b415:	59                   	pop    ecx
c001b416:	5b                   	pop    ebx
c001b417:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b41c:	55                   	push   ebp
c001b41d:	6a 09                	push   0x9
c001b41f:	e8 0d d6 ff ff       	call   c0018a31 <x86WriteCMOS(unsigned char, unsigned char)>
c001b424:	5e                   	pop    esi
c001b425:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b429:	e8 e6 fb ff ff       	call   c001b014 <RTC::completeRTCRefresh()>
c001b42e:	83 c4 3c             	add    esp,0x3c
c001b431:	b0 01                	mov    al,0x1
c001b433:	5b                   	pop    ebx
c001b434:	5e                   	pop    esi
c001b435:	5f                   	pop    edi
c001b436:	5d                   	pop    ebp
c001b437:	c3                   	ret    

c001b438 <rtcIRQHandler(regs*, void*)>:
c001b438:	53                   	push   ebx
c001b439:	83 ec 14             	sub    esp,0x14
c001b43c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b440:	6a 0c                	push   0xc
c001b442:	e8 96 d5 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b447:	83 c4 10             	add    esp,0x10
c001b44a:	a8 80                	test   al,0x80
c001b44c:	74 24                	je     c001b472 <rtcIRQHandler(regs*, void*)+0x3a>
c001b44e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b455:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b45c:	66 ff 05 a0 eb 02 c0 	inc    WORD PTR ds:0xc002eba0
c001b463:	75 0d                	jne    c001b472 <rtcIRQHandler(regs*, void*)+0x3a>
c001b465:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b469:	83 c4 08             	add    esp,0x8
c001b46c:	5b                   	pop    ebx
c001b46d:	e9 a2 fb ff ff       	jmp    c001b014 <RTC::completeRTCRefresh()>
c001b472:	83 c4 08             	add    esp,0x8
c001b475:	5b                   	pop    ebx
c001b476:	c3                   	ret    
c001b477:	90                   	nop

c001b478 <RTC::RTC()>:
c001b478:	83 ec 1c             	sub    esp,0x1c
c001b47b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b47f:	83 ec 08             	sub    esp,0x8
c001b482:	68 67 57 02 c0       	push   0xc0025767
c001b487:	50                   	push   eax
c001b488:	e8 29 dc fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001b48d:	83 c4 10             	add    esp,0x10
c001b490:	ba 84 57 02 c0       	mov    edx,0xc0025784
c001b495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b499:	89 10                	mov    DWORD PTR [eax],edx
c001b49b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b49f:	83 ec 0c             	sub    esp,0xc
c001b4a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4a6:	6a 01                	push   0x1
c001b4a8:	68 38 b4 01 c0       	push   0xc001b438
c001b4ad:	6a 08                	push   0x8
c001b4af:	50                   	push   eax
c001b4b0:	e8 ed e4 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b4b5:	83 c4 20             	add    esp,0x20
c001b4b8:	89 c2                	mov    edx,eax
c001b4ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4be:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b4c4:	fa                   	cli    
c001b4c5:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001b4ca:	83 c0 01             	add    eax,0x1
c001b4cd:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c001b4d2:	83 ec 0c             	sub    esp,0xc
c001b4d5:	6a 0b                	push   0xb
c001b4d7:	e8 01 d5 ff ff       	call   c00189dd <x86ReadCMOS(unsigned char)>
c001b4dc:	83 c4 10             	add    esp,0x10
c001b4df:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b4e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b4e7:	83 c8 10             	or     eax,0x10
c001b4ea:	0f b6 c0             	movzx  eax,al
c001b4ed:	83 ec 08             	sub    esp,0x8
c001b4f0:	50                   	push   eax
c001b4f1:	6a 0b                	push   0xb
c001b4f3:	e8 39 d5 ff ff       	call   c0018a31 <x86WriteCMOS(unsigned char, unsigned char)>
c001b4f8:	83 c4 10             	add    esp,0x10
c001b4fb:	83 ec 0c             	sub    esp,0xc
c001b4fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b502:	e8 0d fb ff ff       	call   c001b014 <RTC::completeRTCRefresh()>
c001b507:	83 c4 10             	add    esp,0x10
c001b50a:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001b512:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001b517:	85 c0                	test   eax,eax
c001b519:	75 01                	jne    c001b51c <RTC::RTC()+0xa4>
c001b51b:	fb                   	sti    
c001b51c:	90                   	nop
c001b51d:	83 c4 1c             	add    esp,0x1c
c001b520:	c3                   	ret    
c001b521:	66 90                	xchg   ax,ax
c001b523:	90                   	nop

c001b524 <HalConsoleScroll(int, int)>:
c001b524:	83 ec 10             	sub    esp,0x10
c001b527:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b52f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b537:	90                   	nop
c001b538:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b53d:	0f 8f e1 00 00 00    	jg     c001b624 <HalConsoleScroll(int, int)+0x100>
c001b543:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b54b:	90                   	nop
c001b54c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b554:	0f 8f be 00 00 00    	jg     c001b618 <HalConsoleScroll(int, int)+0xf4>
c001b55a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b55e:	89 d0                	mov    eax,edx
c001b560:	c1 e0 02             	shl    eax,0x2
c001b563:	01 d0                	add    eax,edx
c001b565:	c1 e0 05             	shl    eax,0x5
c001b568:	89 c2                	mov    edx,eax
c001b56a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b56e:	01 d0                	add    eax,edx
c001b570:	89 c2                	mov    edx,eax
c001b572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b576:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b579:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b57d:	89 d0                	mov    eax,edx
c001b57f:	c1 e0 02             	shl    eax,0x2
c001b582:	01 d0                	add    eax,edx
c001b584:	c1 e0 05             	shl    eax,0x5
c001b587:	89 c2                	mov    edx,eax
c001b589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b58d:	01 d0                	add    eax,edx
c001b58f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b595:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b599:	01 d0                	add    eax,edx
c001b59b:	8a 11                	mov    dl,BYTE PTR [ecx]
c001b59d:	88 10                	mov    BYTE PTR [eax],dl
c001b59f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b5a4:	75 66                	jne    c001b60c <HalConsoleScroll(int, int)+0xe8>
c001b5a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5aa:	83 e0 01             	and    eax,0x1
c001b5ad:	74 39                	je     c001b5e8 <HalConsoleScroll(int, int)+0xc4>
c001b5af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5b3:	83 e0 0f             	and    eax,0xf
c001b5b6:	88 c2                	mov    dl,al
c001b5b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5bc:	c1 e0 04             	shl    eax,0x4
c001b5bf:	09 d0                	or     eax,edx
c001b5c1:	88 c1                	mov    cl,al
c001b5c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5c7:	89 d0                	mov    eax,edx
c001b5c9:	c1 e0 02             	shl    eax,0x2
c001b5cc:	01 d0                	add    eax,edx
c001b5ce:	c1 e0 05             	shl    eax,0x5
c001b5d1:	89 c2                	mov    edx,eax
c001b5d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5d7:	01 d0                	add    eax,edx
c001b5d9:	89 c2                	mov    edx,eax
c001b5db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5df:	01 d0                	add    eax,edx
c001b5e1:	88 ca                	mov    dl,cl
c001b5e3:	88 10                	mov    BYTE PTR [eax],dl
c001b5e5:	eb 25                	jmp    c001b60c <HalConsoleScroll(int, int)+0xe8>
c001b5e7:	90                   	nop
c001b5e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5ec:	89 d0                	mov    eax,edx
c001b5ee:	c1 e0 02             	shl    eax,0x2
c001b5f1:	01 d0                	add    eax,edx
c001b5f3:	c1 e0 05             	shl    eax,0x5
c001b5f6:	89 c2                	mov    edx,eax
c001b5f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5fc:	01 d0                	add    eax,edx
c001b5fe:	89 c2                	mov    edx,eax
c001b600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b604:	01 d0                	add    eax,edx
c001b606:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001b609:	8d 76 00             	lea    esi,[esi+0x0]
c001b60c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001b611:	e9 36 ff ff ff       	jmp    c001b54c <HalConsoleScroll(int, int)+0x28>
c001b616:	66 90                	xchg   ax,ax
c001b618:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b61d:	e9 16 ff ff ff       	jmp    c001b538 <HalConsoleScroll(int, int)+0x14>
c001b622:	66 90                	xchg   ax,ax
c001b624:	90                   	nop
c001b625:	83 c4 10             	add    esp,0x10
c001b628:	c3                   	ret    
c001b629:	8d 76 00             	lea    esi,[esi+0x0]

c001b62c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001b62c:	83 ec 14             	sub    esp,0x14
c001b62f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b633:	88 04 24             	mov    BYTE PTR [esp],al
c001b636:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b639:	0f b6 c0             	movzx  eax,al
c001b63c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b640:	89 d1                	mov    ecx,edx
c001b642:	83 e1 0f             	and    ecx,0xf
c001b645:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b649:	c1 e2 04             	shl    edx,0x4
c001b64c:	0f b6 d2             	movzx  edx,dl
c001b64f:	09 ca                	or     edx,ecx
c001b651:	c1 e2 08             	shl    edx,0x8
c001b654:	09 d0                	or     eax,edx
c001b656:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001b65b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001b663:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b667:	89 d0                	mov    eax,edx
c001b669:	c1 e0 02             	shl    eax,0x2
c001b66c:	01 d0                	add    eax,edx
c001b66e:	c1 e0 04             	shl    eax,0x4
c001b671:	89 c2                	mov    edx,eax
c001b673:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b677:	01 d0                	add    eax,edx
c001b679:	d1 e0                	shl    eax,1
c001b67b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001b67f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b683:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001b688:	66 89 10             	mov    WORD PTR [eax],dx
c001b68b:	90                   	nop
c001b68c:	83 c4 14             	add    esp,0x14
c001b68f:	c3                   	ret    

c001b690 <HalConsoleCursorUpdate(int, int)>:
c001b690:	83 ec 20             	sub    esp,0x20
c001b693:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b697:	89 c2                	mov    edx,eax
c001b699:	c1 e2 02             	shl    edx,0x2
c001b69c:	01 d0                	add    eax,edx
c001b69e:	c1 e0 04             	shl    eax,0x4
c001b6a1:	89 c2                	mov    edx,eax
c001b6a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b6a7:	01 d0                	add    eax,edx
c001b6a9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b6ae:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b6b5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001b6ba:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b6be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6c2:	ee                   	out    dx,al
c001b6c3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b6c8:	0f b6 c0             	movzx  eax,al
c001b6cb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001b6d2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001b6d6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b6da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b6de:	ee                   	out    dx,al
c001b6df:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001b6e6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001b6eb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b6ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b6f3:	ee                   	out    dx,al
c001b6f4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b6f9:	c1 e8 08             	shr    eax,0x8
c001b6fc:	0f b6 c0             	movzx  eax,al
c001b6ff:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b706:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b70a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b70e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b712:	ee                   	out    dx,al
c001b713:	90                   	nop
c001b714:	83 c4 20             	add    esp,0x20
c001b717:	c3                   	ret    

c001b718 <FAT::getName()>:
c001b718:	b8 b8 57 02 c0       	mov    eax,0xc00257b8
c001b71d:	c3                   	ret    
c001b71e:	66 90                	xchg   ax,ax

c001b720 <FAT::tell(void*, unsigned long long*)>:
c001b720:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b725:	75 09                	jne    c001b730 <FAT::tell(void*, unsigned long long*)+0x10>
c001b727:	b8 04 00 00 00       	mov    eax,0x4
c001b72c:	c3                   	ret    
c001b72d:	8d 76 00             	lea    esi,[esi+0x0]
c001b730:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b735:	75 09                	jne    c001b740 <FAT::tell(void*, unsigned long long*)+0x20>
c001b737:	b8 04 00 00 00       	mov    eax,0x4
c001b73c:	c3                   	ret    
c001b73d:	8d 76 00             	lea    esi,[esi+0x0]
c001b740:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b744:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b747:	ba 00 00 00 00       	mov    edx,0x0
c001b74c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b750:	89 01                	mov    DWORD PTR [ecx],eax
c001b752:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b755:	b8 00 00 00 00       	mov    eax,0x0
c001b75a:	c3                   	ret    
c001b75b:	90                   	nop

c001b75c <FAT::stat(void*, unsigned long long*)>:
c001b75c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b761:	75 09                	jne    c001b76c <FAT::stat(void*, unsigned long long*)+0x10>
c001b763:	b8 04 00 00 00       	mov    eax,0x4
c001b768:	c3                   	ret    
c001b769:	8d 76 00             	lea    esi,[esi+0x0]
c001b76c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b771:	75 09                	jne    c001b77c <FAT::stat(void*, unsigned long long*)+0x20>
c001b773:	b8 04 00 00 00       	mov    eax,0x4
c001b778:	c3                   	ret    
c001b779:	8d 76 00             	lea    esi,[esi+0x0]
c001b77c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b780:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b783:	ba 00 00 00 00       	mov    edx,0x0
c001b788:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b78c:	89 01                	mov    DWORD PTR [ecx],eax
c001b78e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b791:	b8 00 00 00 00       	mov    eax,0x0
c001b796:	c3                   	ret    
c001b797:	90                   	nop

c001b798 <FAT::~FAT()>:
c001b798:	83 ec 0c             	sub    esp,0xc
c001b79b:	ba 04 58 02 c0       	mov    edx,0xc0025804
c001b7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7a4:	89 10                	mov    DWORD PTR [eax],edx
c001b7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7aa:	83 ec 0c             	sub    esp,0xc
c001b7ad:	50                   	push   eax
c001b7ae:	e8 23 c6 fe ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c001b7b3:	83 c4 10             	add    esp,0x10
c001b7b6:	90                   	nop
c001b7b7:	83 c4 0c             	add    esp,0xc
c001b7ba:	c3                   	ret    
c001b7bb:	90                   	nop

c001b7bc <FAT::~FAT()>:
c001b7bc:	83 ec 0c             	sub    esp,0xc
c001b7bf:	83 ec 0c             	sub    esp,0xc
c001b7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7c6:	e8 cd ff ff ff       	call   c001b798 <FAT::~FAT()>
c001b7cb:	83 c4 10             	add    esp,0x10
c001b7ce:	83 ec 08             	sub    esp,0x8
c001b7d1:	6a 08                	push   0x8
c001b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7d7:	e8 e0 1a ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c001b7dc:	83 c4 10             	add    esp,0x10
c001b7df:	83 c4 0c             	add    esp,0xc
c001b7e2:	c3                   	ret    
c001b7e3:	90                   	nop

c001b7e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b7e4:	83 ec 1c             	sub    esp,0x1c
c001b7e7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b7ee:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b7f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b7f7:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b7fe:	83 f8 ff             	cmp    eax,0xffffffff
c001b801:	75 35                	jne    c001b838 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b803:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b807:	88 c2                	mov    dl,al
c001b809:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b80e:	01 d0                	add    eax,edx
c001b810:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b814:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001b81a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b81e:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001b825:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b82a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b82e:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001b835:	eb 19                	jmp    c001b850 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b837:	90                   	nop
c001b838:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b83c:	88 c2                	mov    dl,al
c001b83e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b842:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b849:	01 d0                	add    eax,edx
c001b84b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b84f:	90                   	nop
c001b850:	83 ec 04             	sub    esp,0x4
c001b853:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b857:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b85b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b85f:	50                   	push   eax
c001b860:	e8 6f 99 fe ff       	call   c00051d4 <f_getlabel>
c001b865:	83 c4 10             	add    esp,0x10
c001b868:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b86c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b871:	75 09                	jne    c001b87c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b873:	b8 00 00 00 00       	mov    eax,0x0
c001b878:	eb 0a                	jmp    c001b884 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b87a:	66 90                	xchg   ax,ax
c001b87c:	b8 01 00 00 00       	mov    eax,0x1
c001b881:	8d 76 00             	lea    esi,[esi+0x0]
c001b884:	83 c4 1c             	add    esp,0x1c
c001b887:	c3                   	ret    

c001b888 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b888:	53                   	push   ebx
c001b889:	83 ec 58             	sub    esp,0x58
c001b88c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b894:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b898:	b9 00 00 00 00       	mov    ecx,0x0
c001b89d:	b8 3c 00 00 00       	mov    eax,0x3c
c001b8a2:	83 e0 f8             	and    eax,0xfffffff8
c001b8a5:	89 c3                	mov    ebx,eax
c001b8a7:	b8 00 00 00 00       	mov    eax,0x0
c001b8ac:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001b8b0:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001b8b4:	83 c0 08             	add    eax,0x8
c001b8b7:	39 d8                	cmp    eax,ebx
c001b8b9:	72 f1                	jb     c001b8ac <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001b8bb:	01 c2                	add    edx,eax
c001b8bd:	89 0a                	mov    DWORD PTR [edx],ecx
c001b8bf:	83 c2 04             	add    edx,0x4
c001b8c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b8c6:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b8cd:	83 f8 ff             	cmp    eax,0xffffffff
c001b8d0:	75 36                	jne    c001b908 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001b8d2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b8d6:	88 c2                	mov    dl,al
c001b8d8:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b8dd:	01 d0                	add    eax,edx
c001b8df:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b8e3:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001b8e9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b8ed:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001b8f4:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b8f9:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b8fd:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001b904:	eb 1a                	jmp    c001b920 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001b906:	66 90                	xchg   ax,ax
c001b908:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b90c:	88 c2                	mov    dl,al
c001b90e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b912:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b919:	01 d0                	add    eax,edx
c001b91b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b91f:	90                   	nop
c001b920:	83 ec 08             	sub    esp,0x8
c001b923:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b927:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b92b:	50                   	push   eax
c001b92c:	e8 3f 4f fe ff       	call   c0000870 <strcat>
c001b931:	83 c4 10             	add    esp,0x10
c001b934:	83 ec 0c             	sub    esp,0xc
c001b937:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b93b:	50                   	push   eax
c001b93c:	e8 e7 99 fe ff       	call   c0005328 <f_setlabel>
c001b941:	83 c4 10             	add    esp,0x10
c001b944:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b948:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b94d:	75 09                	jne    c001b958 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001b94f:	b8 00 00 00 00       	mov    eax,0x0
c001b954:	eb 0a                	jmp    c001b960 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001b956:	66 90                	xchg   ax,ax
c001b958:	b8 01 00 00 00       	mov    eax,0x1
c001b95d:	8d 76 00             	lea    esi,[esi+0x0]
c001b960:	83 c4 58             	add    esp,0x58
c001b963:	5b                   	pop    ebx
c001b964:	c3                   	ret    
c001b965:	90                   	nop
c001b966:	66 90                	xchg   ax,ax

c001b968 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b968:	83 ec 2c             	sub    esp,0x2c
c001b96b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b973:	83 ec 08             	sub    esp,0x8
c001b976:	68 dc 57 02 c0       	push   0xc00257dc
c001b97b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b97f:	e8 fc 4d fe ff       	call   c0000780 <strcmp>
c001b984:	83 c4 10             	add    esp,0x10
c001b987:	85 c0                	test   eax,eax
c001b989:	0f 94 c0             	sete   al
c001b98c:	0f b6 c0             	movzx  eax,al
c001b98f:	85 c0                	test   eax,eax
c001b991:	74 0d                	je     c001b9a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b993:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b99b:	e9 c0 00 00 00       	jmp    c001ba60 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b9a0:	83 ec 08             	sub    esp,0x8
c001b9a3:	68 ce 57 02 c0       	push   0xc00257ce
c001b9a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b9ac:	e8 cf 4d fe ff       	call   c0000780 <strcmp>
c001b9b1:	83 c4 10             	add    esp,0x10
c001b9b4:	85 c0                	test   eax,eax
c001b9b6:	0f 94 c0             	sete   al
c001b9b9:	0f b6 c0             	movzx  eax,al
c001b9bc:	85 c0                	test   eax,eax
c001b9be:	74 10                	je     c001b9d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001b9c0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b9c8:	e9 93 00 00 00       	jmp    c001ba60 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b9cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b9d0:	83 ec 08             	sub    esp,0x8
c001b9d3:	68 d4 57 02 c0       	push   0xc00257d4
c001b9d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b9dc:	e8 9f 4d fe ff       	call   c0000780 <strcmp>
c001b9e1:	83 c4 10             	add    esp,0x10
c001b9e4:	85 c0                	test   eax,eax
c001b9e6:	0f 94 c0             	sete   al
c001b9e9:	0f b6 c0             	movzx  eax,al
c001b9ec:	85 c0                	test   eax,eax
c001b9ee:	74 0c                	je     c001b9fc <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001b9f0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b9f8:	eb 66                	jmp    c001ba60 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b9fa:	66 90                	xchg   ax,ax
c001b9fc:	83 ec 08             	sub    esp,0x8
c001b9ff:	68 7c 27 02 c0       	push   0xc002277c
c001ba04:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ba08:	e8 73 4d fe ff       	call   c0000780 <strcmp>
c001ba0d:	83 c4 10             	add    esp,0x10
c001ba10:	85 c0                	test   eax,eax
c001ba12:	0f 94 c0             	sete   al
c001ba15:	0f b6 c0             	movzx  eax,al
c001ba18:	85 c0                	test   eax,eax
c001ba1a:	74 0c                	je     c001ba28 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001ba1c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001ba24:	eb 3a                	jmp    c001ba60 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ba26:	66 90                	xchg   ax,ax
c001ba28:	83 ec 08             	sub    esp,0x8
c001ba2b:	68 da 57 02 c0       	push   0xc00257da
c001ba30:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ba34:	e8 47 4d fe ff       	call   c0000780 <strcmp>
c001ba39:	83 c4 10             	add    esp,0x10
c001ba3c:	85 c0                	test   eax,eax
c001ba3e:	0f 94 c0             	sete   al
c001ba41:	0f b6 c0             	movzx  eax,al
c001ba44:	85 c0                	test   eax,eax
c001ba46:	74 0c                	je     c001ba54 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001ba48:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ba50:	eb 0e                	jmp    c001ba60 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ba52:	66 90                	xchg   ax,ax
c001ba54:	b8 08 00 00 00       	mov    eax,0x8
c001ba59:	e9 ea 00 00 00       	jmp    c001bb48 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001ba5e:	66 90                	xchg   ax,ax
c001ba60:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ba67:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ba6c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ba70:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001ba77:	83 f8 ff             	cmp    eax,0xffffffff
c001ba7a:	75 34                	jne    c001bab0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001ba7c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ba80:	88 c2                	mov    dl,al
c001ba82:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001ba87:	01 d0                	add    eax,edx
c001ba89:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ba8d:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001ba93:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ba97:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001ba9e:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001baa3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001baa7:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001baae:	eb 18                	jmp    c001bac8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001bab0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bab4:	88 c2                	mov    dl,al
c001bab6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001baba:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001bac1:	01 d0                	add    eax,edx
c001bac3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bac7:	90                   	nop
c001bac8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bacc:	88 04 24             	mov    BYTE PTR [esp],al
c001bacf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bad3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bad7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001badf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001bae4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001baec:	83 ec 0c             	sub    esp,0xc
c001baef:	68 00 20 00 00       	push   0x2000
c001baf4:	e8 8f 3c ff ff       	call   c000f788 <malloc>
c001baf9:	83 c4 10             	add    esp,0x10
c001bafc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb00:	68 00 20 00 00       	push   0x2000
c001bb05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb09:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bb0d:	50                   	push   eax
c001bb0e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001bb12:	50                   	push   eax
c001bb13:	e8 0d 9b fe ff       	call   c0005625 <f_mkfs>
c001bb18:	83 c4 10             	add    esp,0x10
c001bb1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bb1f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bb24:	75 0a                	jne    c001bb30 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001bb26:	b8 00 00 00 00       	mov    eax,0x0
c001bb2b:	eb 1b                	jmp    c001bb48 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bb2d:	8d 76 00             	lea    esi,[esi+0x0]
c001bb30:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001bb35:	75 09                	jne    c001bb40 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001bb37:	b8 09 00 00 00       	mov    eax,0x9
c001bb3c:	eb 0a                	jmp    c001bb48 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bb3e:	66 90                	xchg   ax,ax
c001bb40:	b8 01 00 00 00       	mov    eax,0x1
c001bb45:	8d 76 00             	lea    esi,[esi+0x0]
c001bb48:	83 c4 2c             	add    esp,0x2c
c001bb4b:	c3                   	ret    

c001bb4c <FAT::tryMount(LogicalDisk*, int)>:
c001bb4c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001bb52:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bb57:	83 f8 14             	cmp    eax,0x14
c001bb5a:	75 18                	jne    c001bb74 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001bb5c:	83 ec 0c             	sub    esp,0xc
c001bb5f:	68 e0 57 02 c0       	push   0xc00257e0
c001bb64:	e8 7b 40 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001bb69:	83 c4 10             	add    esp,0x10
c001bb6c:	b0 00                	mov    al,0x0
c001bb6e:	e9 ed 01 00 00       	jmp    c001bd60 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bb73:	90                   	nop
c001bb74:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001bb7b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bb81:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bb87:	3d 00 02 00 00       	cmp    eax,0x200
c001bb8c:	74 0a                	je     c001bb98 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001bb8e:	b0 00                	mov    al,0x0
c001bb90:	e9 cb 01 00 00       	jmp    c001bd60 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bb95:	8d 76 00             	lea    esi,[esi+0x0]
c001bb98:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001bba0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bba7:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001bbae:	83 f8 ff             	cmp    eax,0xffffffff
c001bbb1:	74 09                	je     c001bbbc <FAT::tryMount(LogicalDisk*, int)+0x70>
c001bbb3:	b0 01                	mov    al,0x1
c001bbb5:	e9 a6 01 00 00       	jmp    c001bd60 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bbba:	66 90                	xchg   ax,ax
c001bbbc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001bbc6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001bbce:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001bbd5:	88 c2                	mov    dl,al
c001bbd7:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bbdc:	01 d0                	add    eax,edx
c001bbde:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001bbe5:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001bbeb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bbf2:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001bbf9:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bbfe:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001bc05:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001bc0c:	83 ec 0c             	sub    esp,0xc
c001bc0f:	68 34 02 00 00       	push   0x234
c001bc14:	e8 6f 3b ff ff       	call   c000f788 <malloc>
c001bc19:	83 c4 10             	add    esp,0x10
c001bc1c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001bc23:	83 ec 04             	sub    esp,0x4
c001bc26:	6a 00                	push   0x0
c001bc28:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bc2f:	50                   	push   eax
c001bc30:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bc37:	e8 e3 81 fe ff       	call   c0003e1f <f_mount>
c001bc3c:	83 c4 10             	add    esp,0x10
c001bc3f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bc46:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001bc4e:	74 1c                	je     c001bc6c <FAT::tryMount(LogicalDisk*, int)+0x120>
c001bc50:	83 ec 0c             	sub    esp,0xc
c001bc53:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bc5a:	e8 49 3b ff ff       	call   c000f7a8 <rfree>
c001bc5f:	83 c4 10             	add    esp,0x10
c001bc62:	b0 00                	mov    al,0x0
c001bc64:	e9 f7 00 00 00       	jmp    c001bd60 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bc69:	8d 76 00             	lea    esi,[esi+0x0]
c001bc6c:	83 ec 04             	sub    esp,0x4
c001bc6f:	68 00 01 00 00       	push   0x100
c001bc74:	6a 00                	push   0x0
c001bc76:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bc7d:	50                   	push   eax
c001bc7e:	e8 6d 48 fe ff       	call   c00004f0 <memset>
c001bc83:	83 c4 10             	add    esp,0x10
c001bc86:	83 ec 08             	sub    esp,0x8
c001bc89:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bc90:	50                   	push   eax
c001bc91:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bc98:	50                   	push   eax
c001bc99:	e8 d2 4b fe ff       	call   c0000870 <strcat>
c001bc9e:	83 c4 10             	add    esp,0x10
c001bca1:	83 ec 08             	sub    esp,0x8
c001bca4:	68 ee 57 02 c0       	push   0xc00257ee
c001bca9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bcb0:	50                   	push   eax
c001bcb1:	e8 ba 4b fe ff       	call   c0000870 <strcat>
c001bcb6:	83 c4 10             	add    esp,0x10
c001bcb9:	83 ec 04             	sub    esp,0x4
c001bcbc:	6a 01                	push   0x1
c001bcbe:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001bcc5:	50                   	push   eax
c001bcc6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bcca:	50                   	push   eax
c001bccb:	e8 b1 81 fe ff       	call   c0003e81 <f_open>
c001bcd0:	83 c4 10             	add    esp,0x10
c001bcd3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bcda:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001bce1:	85 c0                	test   eax,eax
c001bce3:	74 0b                	je     c001bcf0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001bce5:	78 31                	js     c001bd18 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bce7:	83 e8 04             	sub    eax,0x4
c001bcea:	83 f8 01             	cmp    eax,0x1
c001bced:	77 29                	ja     c001bd18 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bcef:	90                   	nop
c001bcf0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001bcf8:	83 ec 0c             	sub    esp,0xc
c001bcfb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bcff:	50                   	push   eax
c001bd00:	e8 2c 89 fe ff       	call   c0004631 <f_close>
c001bd05:	83 c4 10             	add    esp,0x10
c001bd08:	90                   	nop
c001bd09:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001bd11:	85 c0                	test   eax,eax
c001bd13:	74 43                	je     c001bd58 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001bd15:	eb 31                	jmp    c001bd48 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001bd17:	90                   	nop
c001bd18:	83 ec 0c             	sub    esp,0xc
c001bd1b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bd22:	e8 81 3a ff ff       	call   c000f7a8 <rfree>
c001bd27:	83 c4 10             	add    esp,0x10
c001bd2a:	83 ec 04             	sub    esp,0x4
c001bd2d:	6a 00                	push   0x0
c001bd2f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bd36:	50                   	push   eax
c001bd37:	6a 00                	push   0x0
c001bd39:	e8 e1 80 fe ff       	call   c0003e1f <f_mount>
c001bd3e:	83 c4 10             	add    esp,0x10
c001bd41:	b0 00                	mov    al,0x0
c001bd43:	eb 1b                	jmp    c001bd60 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bd45:	8d 76 00             	lea    esi,[esi+0x0]
c001bd48:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bd4d:	83 c0 01             	add    eax,0x1
c001bd50:	a3 c0 eb 02 c0       	mov    ds:0xc002ebc0,eax
c001bd55:	8d 76 00             	lea    esi,[esi+0x0]
c001bd58:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001bd5f:	90                   	nop
c001bd60:	81 c4 4c 03 00 00    	add    esp,0x34c
c001bd66:	c3                   	ret    
c001bd67:	90                   	nop

c001bd68 <FAT::allocateSwapfile(char const*, int)>:
c001bd68:	55                   	push   ebp
c001bd69:	57                   	push   edi
c001bd6a:	56                   	push   esi
c001bd6b:	53                   	push   ebx
c001bd6c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001bd72:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001bd7d:	83 ec 0c             	sub    esp,0xc
c001bd80:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001bd87:	e8 fc 39 ff ff       	call   c000f788 <malloc>
c001bd8c:	83 c4 10             	add    esp,0x10
c001bd8f:	89 c7                	mov    edi,eax
c001bd91:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001bd96:	83 ec 04             	sub    esp,0x4
c001bd99:	50                   	push   eax
c001bd9a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001bda1:	57                   	push   edi
c001bda2:	e8 e1 c3 fe ff       	call   c0008188 <File::File(char const*, Process*)>
c001bda7:	83 c4 10             	add    esp,0x10
c001bdaa:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001bdb1:	83 ec 04             	sub    esp,0x4
c001bdb4:	8d 44 24 13          	lea    eax,[esp+0x13]
c001bdb8:	50                   	push   eax
c001bdb9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bdbd:	50                   	push   eax
c001bdbe:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bdc5:	e8 de c6 fe ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001bdca:	83 c4 10             	add    esp,0x10
c001bdcd:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bdd4:	c1 e0 14             	shl    eax,0x14
c001bdd7:	89 c7                	mov    edi,eax
c001bdd9:	89 c5                	mov    ebp,eax
c001bddb:	c1 fd 1f             	sar    ebp,0x1f
c001bdde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bde6:	89 f9                	mov    ecx,edi
c001bde8:	31 c1                	xor    ecx,eax
c001bdea:	89 cb                	mov    ebx,ecx
c001bdec:	89 e9                	mov    ecx,ebp
c001bdee:	31 d1                	xor    ecx,edx
c001bdf0:	89 ce                	mov    esi,ecx
c001bdf2:	89 f0                	mov    eax,esi
c001bdf4:	09 d8                	or     eax,ebx
c001bdf6:	0f 84 9c 00 00 00    	je     c001be98 <FAT::allocateSwapfile(char const*, int)+0x130>
c001bdfc:	83 ec 0c             	sub    esp,0xc
c001bdff:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001be06:	e8 69 c5 fe ff       	call   c0008374 <File::unlink()>
c001be0b:	83 c4 10             	add    esp,0x10
c001be0e:	83 ec 08             	sub    esp,0x8
c001be11:	6a 12                	push   0x12
c001be13:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001be1a:	e8 87 c3 fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001be1f:	83 c4 10             	add    esp,0x10
c001be22:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001be29:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001be2f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001be36:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001be3d:	c1 e0 14             	shl    eax,0x14
c001be40:	83 ec 04             	sub    esp,0x4
c001be43:	6a 01                	push   0x1
c001be45:	50                   	push   eax
c001be46:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001be4d:	e8 66 96 fe ff       	call   c00054b8 <f_expand>
c001be52:	83 c4 10             	add    esp,0x10
c001be55:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001be5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001be5e:	83 c0 10             	add    eax,0x10
c001be61:	8b 00                	mov    eax,DWORD PTR [eax]
c001be63:	83 ec 0c             	sub    esp,0xc
c001be66:	8d 54 24 24          	lea    edx,[esp+0x24]
c001be6a:	52                   	push   edx
c001be6b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001be6f:	52                   	push   edx
c001be70:	6a 00                	push   0x0
c001be72:	68 00 04 00 00       	push   0x400
c001be77:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001be7e:	ff d0                	call   eax
c001be80:	83 c4 20             	add    esp,0x20
c001be83:	83 ec 0c             	sub    esp,0xc
c001be86:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001be8d:	e8 72 c3 fe ff       	call   c0008204 <File::close()>
c001be92:	83 c4 10             	add    esp,0x10
c001be95:	8d 76 00             	lea    esi,[esi+0x0]
c001be98:	83 ec 08             	sub    esp,0x8
c001be9b:	6a 01                	push   0x1
c001be9d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bea4:	e8 fd c2 fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001bea9:	83 c4 10             	add    esp,0x10
c001beac:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001beb3:	8b 00                	mov    eax,DWORD PTR [eax]
c001beb5:	83 c0 0c             	add    eax,0xc
c001beb8:	8b 00                	mov    eax,DWORD PTR [eax]
c001beba:	83 ec 0c             	sub    esp,0xc
c001bebd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bec1:	52                   	push   edx
c001bec2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bec6:	52                   	push   edx
c001bec7:	6a 00                	push   0x0
c001bec9:	6a 04                	push   0x4
c001becb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bed2:	ff d0                	call   eax
c001bed4:	83 c4 20             	add    esp,0x20
c001bed7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bede:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bee4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001beeb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bef2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bef5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001befc:	83 ec 0c             	sub    esp,0xc
c001beff:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bf06:	e8 f9 c2 fe ff       	call   c0008204 <File::close()>
c001bf0b:	83 c4 10             	add    esp,0x10
c001bf0e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bf15:	ba 00 00 00 00       	mov    edx,0x0
c001bf1a:	81 c4 3c 04 00 00    	add    esp,0x43c
c001bf20:	5b                   	pop    ebx
c001bf21:	5e                   	pop    esi
c001bf22:	5f                   	pop    edi
c001bf23:	5d                   	pop    ebp
c001bf24:	c3                   	ret    
c001bf25:	90                   	nop
c001bf26:	66 90                	xchg   ax,ax

c001bf28 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001bf28:	57                   	push   edi
c001bf29:	56                   	push   esi
c001bf2a:	53                   	push   ebx
c001bf2b:	81 ec 50 02 00 00    	sub    esp,0x250
c001bf31:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001bf39:	74 0d                	je     c001bf48 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001bf3b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001bf43:	75 0f                	jne    c001bf54 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001bf45:	8d 76 00             	lea    esi,[esi+0x0]
c001bf48:	b8 04 00 00 00       	mov    eax,0x4
c001bf4d:	e9 3a 01 00 00       	jmp    c001c08c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bf52:	66 90                	xchg   ax,ax
c001bf54:	83 ec 08             	sub    esp,0x8
c001bf57:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bf5e:	50                   	push   eax
c001bf5f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001bf66:	e8 92 89 fe ff       	call   c00048fd <f_readdir>
c001bf6b:	83 c4 10             	add    esp,0x10
c001bf6e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001bf75:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001bf7c:	83 ec 0c             	sub    esp,0xc
c001bf7f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bf86:	83 c0 16             	add    eax,0x16
c001bf89:	50                   	push   eax
c001bf8a:	e8 f1 45 fe ff       	call   c0000580 <strlen>
c001bf8f:	83 c4 10             	add    esp,0x10
c001bf92:	ba 00 00 00 00       	mov    edx,0x0
c001bf97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf9b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001bf9f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001bfa6:	0f b6 c0             	movzx  eax,al
c001bfa9:	83 e0 10             	and    eax,0x10
c001bfac:	74 0a                	je     c001bfb8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001bfae:	b8 02 00 00 00       	mov    eax,0x2
c001bfb3:	eb 0b                	jmp    c001bfc0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001bfb5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfb8:	b8 01 00 00 00       	mov    eax,0x1
c001bfbd:	8d 76 00             	lea    esi,[esi+0x0]
c001bfc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bfc4:	83 ec 08             	sub    esp,0x8
c001bfc7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bfce:	83 c0 16             	add    eax,0x16
c001bfd1:	50                   	push   eax
c001bfd2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bfd6:	83 c0 10             	add    eax,0x10
c001bfd9:	50                   	push   eax
c001bfda:	e8 71 46 fe ff       	call   c0000650 <strcpy>
c001bfdf:	83 c4 10             	add    esp,0x10
c001bfe2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001bfe9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001bff0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bff4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001bffb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c002:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c009:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c010:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c017:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c01e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c025:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c02c:	89 c6                	mov    esi,eax
c001c02e:	89 d7                	mov    edi,edx
c001c030:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c032:	89 c8                	mov    eax,ecx
c001c034:	89 fa                	mov    edx,edi
c001c036:	89 f3                	mov    ebx,esi
c001c038:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c03f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c046:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c04d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c054:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c05a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c061:	0f be c0             	movsx  eax,al
c001c064:	85 c0                	test   eax,eax
c001c066:	75 08                	jne    c001c070 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c068:	b8 07 00 00 00       	mov    eax,0x7
c001c06d:	eb 1d                	jmp    c001c08c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c06f:	90                   	nop
c001c070:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c077:	85 c0                	test   eax,eax
c001c079:	75 09                	jne    c001c084 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c07b:	b8 00 00 00 00       	mov    eax,0x0
c001c080:	eb 0a                	jmp    c001c08c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c082:	66 90                	xchg   ax,ax
c001c084:	b8 01 00 00 00       	mov    eax,0x1
c001c089:	8d 76 00             	lea    esi,[esi+0x0]
c001c08c:	81 c4 50 02 00 00    	add    esp,0x250
c001c092:	5b                   	pop    ebx
c001c093:	5e                   	pop    esi
c001c094:	5f                   	pop    edi
c001c095:	c3                   	ret    
c001c096:	66 90                	xchg   ax,ax

c001c098 <FAT::read(void*, unsigned long, void*, int*)>:
c001c098:	83 ec 1c             	sub    esp,0x1c
c001c09b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c0a0:	74 0a                	je     c001c0ac <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c0a2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c0a7:	75 0b                	jne    c001c0b4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c0a9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0ac:	b8 04 00 00 00       	mov    eax,0x4
c001c0b1:	eb 41                	jmp    c001c0f4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c0b3:	90                   	nop
c001c0b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c0b8:	50                   	push   eax
c001c0b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c0bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c0c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c0c5:	e8 7a 80 fe ff       	call   c0004144 <f_read>
c001c0ca:	83 c4 10             	add    esp,0x10
c001c0cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0d5:	89 c2                	mov    edx,eax
c001c0d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0db:	89 10                	mov    DWORD PTR [eax],edx
c001c0dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0e1:	85 c0                	test   eax,eax
c001c0e3:	75 07                	jne    c001c0ec <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c0e5:	b8 00 00 00 00       	mov    eax,0x0
c001c0ea:	eb 08                	jmp    c001c0f4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c0ec:	b8 01 00 00 00       	mov    eax,0x1
c001c0f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c0f4:	83 c4 1c             	add    esp,0x1c
c001c0f7:	c3                   	ret    

c001c0f8 <FAT::write(void*, unsigned long, void*, int*)>:
c001c0f8:	83 ec 1c             	sub    esp,0x1c
c001c0fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c100:	74 0a                	je     c001c10c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c102:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c107:	75 0b                	jne    c001c114 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c109:	8d 76 00             	lea    esi,[esi+0x0]
c001c10c:	b8 04 00 00 00       	mov    eax,0x4
c001c111:	eb 41                	jmp    c001c154 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c113:	90                   	nop
c001c114:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c118:	50                   	push   eax
c001c119:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c11d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c121:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c125:	e8 fb 81 fe ff       	call   c0004325 <f_write>
c001c12a:	83 c4 10             	add    esp,0x10
c001c12d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c131:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c135:	89 c2                	mov    edx,eax
c001c137:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c13b:	89 10                	mov    DWORD PTR [eax],edx
c001c13d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c141:	85 c0                	test   eax,eax
c001c143:	75 07                	jne    c001c14c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c145:	b8 00 00 00 00       	mov    eax,0x0
c001c14a:	eb 08                	jmp    c001c154 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c14c:	b8 01 00 00 00       	mov    eax,0x1
c001c151:	8d 76 00             	lea    esi,[esi+0x0]
c001c154:	83 c4 1c             	add    esp,0x1c
c001c157:	c3                   	ret    

c001c158 <FAT::close(void*)>:
c001c158:	83 ec 1c             	sub    esp,0x1c
c001c15b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c160:	75 0a                	jne    c001c16c <FAT::close(void*)+0x14>
c001c162:	b8 04 00 00 00       	mov    eax,0x4
c001c167:	eb 3f                	jmp    c001c1a8 <FAT::close(void*)+0x50>
c001c169:	8d 76 00             	lea    esi,[esi+0x0]
c001c16c:	83 ec 0c             	sub    esp,0xc
c001c16f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c173:	e8 b9 84 fe ff       	call   c0004631 <f_close>
c001c178:	83 c4 10             	add    esp,0x10
c001c17b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c17f:	83 ec 0c             	sub    esp,0xc
c001c182:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c186:	e8 0d 36 ff ff       	call   c000f798 <free>
c001c18b:	83 c4 10             	add    esp,0x10
c001c18e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c192:	85 c0                	test   eax,eax
c001c194:	75 0a                	jne    c001c1a0 <FAT::close(void*)+0x48>
c001c196:	b8 00 00 00 00       	mov    eax,0x0
c001c19b:	eb 0b                	jmp    c001c1a8 <FAT::close(void*)+0x50>
c001c19d:	8d 76 00             	lea    esi,[esi+0x0]
c001c1a0:	b8 01 00 00 00       	mov    eax,0x1
c001c1a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1a8:	83 c4 1c             	add    esp,0x1c
c001c1ab:	c3                   	ret    

c001c1ac <FAT::closeDir(void*)>:
c001c1ac:	83 ec 1c             	sub    esp,0x1c
c001c1af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c1b4:	75 0a                	jne    c001c1c0 <FAT::closeDir(void*)+0x14>
c001c1b6:	b8 04 00 00 00       	mov    eax,0x4
c001c1bb:	eb 3f                	jmp    c001c1fc <FAT::closeDir(void*)+0x50>
c001c1bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c1c0:	83 ec 0c             	sub    esp,0xc
c001c1c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c1c7:	e8 0f 87 fe ff       	call   c00048db <f_closedir>
c001c1cc:	83 c4 10             	add    esp,0x10
c001c1cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1d3:	83 ec 0c             	sub    esp,0xc
c001c1d6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c1da:	e8 b9 35 ff ff       	call   c000f798 <free>
c001c1df:	83 c4 10             	add    esp,0x10
c001c1e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1e6:	85 c0                	test   eax,eax
c001c1e8:	75 0a                	jne    c001c1f4 <FAT::closeDir(void*)+0x48>
c001c1ea:	b8 00 00 00 00       	mov    eax,0x0
c001c1ef:	eb 0b                	jmp    c001c1fc <FAT::closeDir(void*)+0x50>
c001c1f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c1f4:	b8 01 00 00 00       	mov    eax,0x1
c001c1f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c1fc:	83 c4 1c             	add    esp,0x1c
c001c1ff:	c3                   	ret    

c001c200 <FAT::truncate(void*, unsigned long long)>:
c001c200:	83 ec 2c             	sub    esp,0x2c
c001c203:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c207:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c20b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c20f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c213:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c218:	75 0a                	jne    c001c224 <FAT::truncate(void*, unsigned long long)+0x24>
c001c21a:	b8 04 00 00 00       	mov    eax,0x4
c001c21f:	eb 47                	jmp    c001c268 <FAT::truncate(void*, unsigned long long)+0x68>
c001c221:	8d 76 00             	lea    esi,[esi+0x0]
c001c224:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c228:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c22b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c22f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c237:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c23b:	83 ec 08             	sub    esp,0x8
c001c23e:	50                   	push   eax
c001c23f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c243:	e8 18 84 fe ff       	call   c0004660 <f_lseek>
c001c248:	83 c4 10             	add    esp,0x10
c001c24b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c24f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c253:	85 c0                	test   eax,eax
c001c255:	75 09                	jne    c001c260 <FAT::truncate(void*, unsigned long long)+0x60>
c001c257:	b8 00 00 00 00       	mov    eax,0x0
c001c25c:	eb 0a                	jmp    c001c268 <FAT::truncate(void*, unsigned long long)+0x68>
c001c25e:	66 90                	xchg   ax,ax
c001c260:	b8 01 00 00 00       	mov    eax,0x1
c001c265:	8d 76 00             	lea    esi,[esi+0x0]
c001c268:	83 c4 2c             	add    esp,0x2c
c001c26b:	c3                   	ret    

c001c26c <FAT::seek(void*, unsigned long long)>:
c001c26c:	83 ec 2c             	sub    esp,0x2c
c001c26f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c273:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c277:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c27b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c27f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c284:	75 0a                	jne    c001c290 <FAT::seek(void*, unsigned long long)+0x24>
c001c286:	b8 04 00 00 00       	mov    eax,0x4
c001c28b:	eb 33                	jmp    c001c2c0 <FAT::seek(void*, unsigned long long)+0x54>
c001c28d:	8d 76 00             	lea    esi,[esi+0x0]
c001c290:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c294:	83 ec 08             	sub    esp,0x8
c001c297:	50                   	push   eax
c001c298:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c29c:	e8 bf 83 fe ff       	call   c0004660 <f_lseek>
c001c2a1:	83 c4 10             	add    esp,0x10
c001c2a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c2a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2ac:	85 c0                	test   eax,eax
c001c2ae:	75 08                	jne    c001c2b8 <FAT::seek(void*, unsigned long long)+0x4c>
c001c2b0:	b8 00 00 00 00       	mov    eax,0x0
c001c2b5:	eb 09                	jmp    c001c2c0 <FAT::seek(void*, unsigned long long)+0x54>
c001c2b7:	90                   	nop
c001c2b8:	b8 01 00 00 00       	mov    eax,0x1
c001c2bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c2c0:	83 c4 2c             	add    esp,0x2c
c001c2c3:	c3                   	ret    

c001c2c4 <fatWrapperReadDisk>:
c001c2c4:	53                   	push   ebx
c001c2c5:	83 ec 18             	sub    esp,0x18
c001c2c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c2d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c2d5:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c2dc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c2e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c2e4:	ba 00 00 00 00       	mov    edx,0x0
c001c2e9:	83 ec 0c             	sub    esp,0xc
c001c2ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c2f0:	53                   	push   ebx
c001c2f1:	52                   	push   edx
c001c2f2:	50                   	push   eax
c001c2f3:	51                   	push   ecx
c001c2f4:	e8 53 e7 fe ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c001c2f9:	83 c4 20             	add    esp,0x20
c001c2fc:	83 c4 18             	add    esp,0x18
c001c2ff:	5b                   	pop    ebx
c001c300:	c3                   	ret    
c001c301:	8d 76 00             	lea    esi,[esi+0x0]

c001c304 <fatWrapperWriteDisk>:
c001c304:	53                   	push   ebx
c001c305:	83 ec 18             	sub    esp,0x18
c001c308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c30c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c310:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c315:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c31c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c320:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c324:	ba 00 00 00 00       	mov    edx,0x0
c001c329:	83 ec 0c             	sub    esp,0xc
c001c32c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c330:	53                   	push   ebx
c001c331:	52                   	push   edx
c001c332:	50                   	push   eax
c001c333:	51                   	push   ecx
c001c334:	e8 7f e7 fe ff       	call   c000aab8 <LogicalDisk::write(unsigned long long, int, void*)>
c001c339:	83 c4 20             	add    esp,0x20
c001c33c:	83 c4 18             	add    esp,0x18
c001c33f:	5b                   	pop    ebx
c001c340:	c3                   	ret    
c001c341:	8d 76 00             	lea    esi,[esi+0x0]

c001c344 <fatWrapperIoctl>:
c001c344:	53                   	push   ebx
c001c345:	83 ec 28             	sub    esp,0x28
c001c348:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c34c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c350:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c354:	88 d0                	mov    al,dl
c001c356:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c35a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c35f:	83 f8 02             	cmp    eax,0x2
c001c362:	75 34                	jne    c001c398 <fatWrapperIoctl+0x54>
c001c364:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c368:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c36c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c371:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001c378:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c37e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c384:	89 c2                	mov    edx,eax
c001c386:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c38a:	66 89 10             	mov    WORD PTR [eax],dx
c001c38d:	b8 00 00 00 00       	mov    eax,0x0
c001c392:	e9 c5 00 00 00       	jmp    c001c45c <fatWrapperIoctl+0x118>
c001c397:	90                   	nop
c001c398:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c39d:	83 f8 01             	cmp    eax,0x1
c001c3a0:	75 6a                	jne    c001c40c <fatWrapperIoctl+0xc8>
c001c3a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c3a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c3aa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c3af:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001c3b6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c3bc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c3c2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c3c8:	89 c8                	mov    eax,ecx
c001c3ca:	89 da                	mov    edx,ebx
c001c3cc:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c3d0:	c1 e0 0a             	shl    eax,0xa
c001c3d3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c3d8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001c3df:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c3e5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c3eb:	89 cb                	mov    ebx,ecx
c001c3ed:	c1 fb 1f             	sar    ebx,0x1f
c001c3f0:	53                   	push   ebx
c001c3f1:	51                   	push   ecx
c001c3f2:	52                   	push   edx
c001c3f3:	50                   	push   eax
c001c3f4:	e8 7b 55 00 00       	call   c0021974 <__udivdi3>
c001c3f9:	83 c4 10             	add    esp,0x10
c001c3fc:	89 c2                	mov    edx,eax
c001c3fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c402:	89 10                	mov    DWORD PTR [eax],edx
c001c404:	b8 00 00 00 00       	mov    eax,0x0
c001c409:	eb 51                	jmp    c001c45c <fatWrapperIoctl+0x118>
c001c40b:	90                   	nop
c001c40c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c411:	85 c0                	test   eax,eax
c001c413:	75 07                	jne    c001c41c <fatWrapperIoctl+0xd8>
c001c415:	b8 00 00 00 00       	mov    eax,0x0
c001c41a:	eb 40                	jmp    c001c45c <fatWrapperIoctl+0x118>
c001c41c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c421:	83 f8 03             	cmp    eax,0x3
c001c424:	75 1a                	jne    c001c440 <fatWrapperIoctl+0xfc>
c001c426:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c42a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c42e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c432:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c438:	b8 00 00 00 00       	mov    eax,0x0
c001c43d:	eb 1d                	jmp    c001c45c <fatWrapperIoctl+0x118>
c001c43f:	90                   	nop
c001c440:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c445:	83 f8 04             	cmp    eax,0x4
c001c448:	75 0a                	jne    c001c454 <fatWrapperIoctl+0x110>
c001c44a:	b8 00 00 00 00       	mov    eax,0x0
c001c44f:	eb 0b                	jmp    c001c45c <fatWrapperIoctl+0x118>
c001c451:	8d 76 00             	lea    esi,[esi+0x0]
c001c454:	b8 04 00 00 00       	mov    eax,0x4
c001c459:	8d 76 00             	lea    esi,[esi+0x0]
c001c45c:	83 c4 28             	add    esp,0x28
c001c45f:	5b                   	pop    ebx
c001c460:	c3                   	ret    
c001c461:	90                   	nop
c001c462:	66 90                	xchg   ax,ax

c001c464 <FAT::FAT()>:
c001c464:	83 ec 1c             	sub    esp,0x1c
c001c467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c46b:	83 ec 0c             	sub    esp,0xc
c001c46e:	50                   	push   eax
c001c46f:	e8 3e b9 fe ff       	call   c0007db2 <Filesystem::Filesystem()>
c001c474:	83 c4 10             	add    esp,0x10
c001c477:	ba 04 58 02 c0       	mov    edx,0xc0025804
c001c47c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c480:	89 10                	mov    DWORD PTR [eax],edx
c001c482:	c7 05 c0 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc0,0x0
c001c48c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c494:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c499:	7f 19                	jg     c001c4b4 <FAT::FAT()+0x50>
c001c49b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c49f:	c7 04 85 e0 eb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1420],0xffffffff
c001c4aa:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c4af:	eb e3                	jmp    c001c494 <FAT::FAT()+0x30>
c001c4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c4b4:	90                   	nop
c001c4b5:	83 c4 1c             	add    esp,0x1c
c001c4b8:	c3                   	ret    
c001c4b9:	90                   	nop
c001c4ba:	66 90                	xchg   ax,ax

c001c4bc <FAT::fixFilepath(char*)>:
c001c4bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4c0:	8a 00                	mov    al,BYTE PTR [eax]
c001c4c2:	0f be c0             	movsx  eax,al
c001c4c5:	83 f8 40             	cmp    eax,0x40
c001c4c8:	7e 2e                	jle    c001c4f8 <FAT::fixFilepath(char*)+0x3c>
c001c4ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4ce:	8a 00                	mov    al,BYTE PTR [eax]
c001c4d0:	83 e8 41             	sub    eax,0x41
c001c4d3:	88 c2                	mov    dl,al
c001c4d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4d9:	88 10                	mov    BYTE PTR [eax],dl
c001c4db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4df:	8a 00                	mov    al,BYTE PTR [eax]
c001c4e1:	0f be c0             	movsx  eax,al
c001c4e4:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001c4eb:	83 c0 30             	add    eax,0x30
c001c4ee:	88 c2                	mov    dl,al
c001c4f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4f4:	88 10                	mov    BYTE PTR [eax],dl
c001c4f6:	66 90                	xchg   ax,ax
c001c4f8:	90                   	nop
c001c4f9:	c3                   	ret    
c001c4fa:	66 90                	xchg   ax,ax

c001c4fc <FAT::open(char const*, void**, FileOpenMode)>:
c001c4fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c502:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c50a:	74 0c                	je     c001c518 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c50c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c514:	75 0e                	jne    c001c524 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c516:	66 90                	xchg   ax,ax
c001c518:	b8 04 00 00 00       	mov    eax,0x4
c001c51d:	e9 46 01 00 00       	jmp    c001c668 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c522:	66 90                	xchg   ax,ax
c001c524:	83 ec 08             	sub    esp,0x8
c001c527:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c52e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c532:	50                   	push   eax
c001c533:	e8 18 41 fe ff       	call   c0000650 <strcpy>
c001c538:	83 c4 10             	add    esp,0x10
c001c53b:	83 ec 08             	sub    esp,0x8
c001c53e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c542:	50                   	push   eax
c001c543:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c54a:	e8 6d ff ff ff       	call   c001c4bc <FAT::fixFilepath(char*)>
c001c54f:	83 c4 10             	add    esp,0x10
c001c552:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c55a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c561:	83 e0 01             	and    eax,0x1
c001c564:	74 12                	je     c001c578 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c566:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c56d:	83 c8 01             	or     eax,0x1
c001c570:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c577:	90                   	nop
c001c578:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c57f:	83 e0 04             	and    eax,0x4
c001c582:	74 24                	je     c001c5a8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c584:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c58b:	83 c8 30             	or     eax,0x30
c001c58e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c595:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c59c:	83 c8 02             	or     eax,0x2
c001c59f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c5a6:	66 90                	xchg   ax,ax
c001c5a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c5af:	83 e0 02             	and    eax,0x2
c001c5b2:	74 14                	je     c001c5c8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c5b4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c5bb:	83 c8 02             	or     eax,0x2
c001c5be:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c5c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5c8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c5cf:	83 e0 08             	and    eax,0x8
c001c5d2:	74 14                	je     c001c5e8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c5d4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c5db:	83 c8 04             	or     eax,0x4
c001c5de:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c5e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c5ef:	83 e0 10             	and    eax,0x10
c001c5f2:	74 14                	je     c001c608 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c5f4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c5fb:	83 c8 08             	or     eax,0x8
c001c5fe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c605:	8d 76 00             	lea    esi,[esi+0x0]
c001c608:	83 ec 0c             	sub    esp,0xc
c001c60b:	68 28 02 00 00       	push   0x228
c001c610:	e8 73 31 ff ff       	call   c000f788 <malloc>
c001c615:	83 c4 10             	add    esp,0x10
c001c618:	89 c2                	mov    edx,eax
c001c61a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c621:	89 10                	mov    DWORD PTR [eax],edx
c001c623:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c62b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c632:	8b 00                	mov    eax,DWORD PTR [eax]
c001c634:	83 ec 04             	sub    esp,0x4
c001c637:	52                   	push   edx
c001c638:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c63c:	52                   	push   edx
c001c63d:	50                   	push   eax
c001c63e:	e8 3e 78 fe ff       	call   c0003e81 <f_open>
c001c643:	83 c4 10             	add    esp,0x10
c001c646:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c64d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c655:	74 09                	je     c001c660 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001c657:	b8 01 00 00 00       	mov    eax,0x1
c001c65c:	eb 0a                	jmp    c001c668 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c65e:	66 90                	xchg   ax,ax
c001c660:	b8 00 00 00 00       	mov    eax,0x0
c001c665:	8d 76 00             	lea    esi,[esi+0x0]
c001c668:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c66e:	c3                   	ret    
c001c66f:	90                   	nop

c001c670 <FAT::openDir(char const*, void**)>:
c001c670:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c676:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c67e:	74 0c                	je     c001c68c <FAT::openDir(char const*, void**)+0x1c>
c001c680:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c688:	75 0e                	jne    c001c698 <FAT::openDir(char const*, void**)+0x28>
c001c68a:	66 90                	xchg   ax,ax
c001c68c:	b8 04 00 00 00       	mov    eax,0x4
c001c691:	e9 82 00 00 00       	jmp    c001c718 <FAT::openDir(char const*, void**)+0xa8>
c001c696:	66 90                	xchg   ax,ax
c001c698:	83 ec 08             	sub    esp,0x8
c001c69b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c6a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c6a6:	50                   	push   eax
c001c6a7:	e8 a4 3f fe ff       	call   c0000650 <strcpy>
c001c6ac:	83 c4 10             	add    esp,0x10
c001c6af:	83 ec 08             	sub    esp,0x8
c001c6b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c6b6:	50                   	push   eax
c001c6b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c6be:	e8 f9 fd ff ff       	call   c001c4bc <FAT::fixFilepath(char*)>
c001c6c3:	83 c4 10             	add    esp,0x10
c001c6c6:	83 ec 0c             	sub    esp,0xc
c001c6c9:	6a 30                	push   0x30
c001c6cb:	e8 b8 30 ff ff       	call   c000f788 <malloc>
c001c6d0:	83 c4 10             	add    esp,0x10
c001c6d3:	89 c2                	mov    edx,eax
c001c6d5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c6dc:	89 10                	mov    DWORD PTR [eax],edx
c001c6de:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c6e5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6e7:	83 ec 08             	sub    esp,0x8
c001c6ea:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c6ee:	52                   	push   edx
c001c6ef:	50                   	push   eax
c001c6f0:	e8 1b 81 fe ff       	call   c0004810 <f_opendir>
c001c6f5:	83 c4 10             	add    esp,0x10
c001c6f8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c6ff:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c707:	74 07                	je     c001c710 <FAT::openDir(char const*, void**)+0xa0>
c001c709:	b8 01 00 00 00       	mov    eax,0x1
c001c70e:	eb 08                	jmp    c001c718 <FAT::openDir(char const*, void**)+0xa8>
c001c710:	b8 00 00 00 00       	mov    eax,0x0
c001c715:	8d 76 00             	lea    esi,[esi+0x0]
c001c718:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c71e:	c3                   	ret    
c001c71f:	90                   	nop

c001c720 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c720:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c726:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c72e:	75 0c                	jne    c001c73c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c730:	b8 04 00 00 00       	mov    eax,0x4
c001c735:	e9 d6 00 00 00       	jmp    c001c810 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c73a:	66 90                	xchg   ax,ax
c001c73c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c744:	75 0a                	jne    c001c750 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c746:	b8 04 00 00 00       	mov    eax,0x4
c001c74b:	e9 c0 00 00 00       	jmp    c001c810 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c750:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c758:	75 0a                	jne    c001c764 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c75a:	b8 04 00 00 00       	mov    eax,0x4
c001c75f:	e9 ac 00 00 00       	jmp    c001c810 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c764:	83 ec 08             	sub    esp,0x8
c001c767:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c76e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c775:	50                   	push   eax
c001c776:	e8 d5 3e fe ff       	call   c0000650 <strcpy>
c001c77b:	83 c4 10             	add    esp,0x10
c001c77e:	83 ec 08             	sub    esp,0x8
c001c781:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c788:	50                   	push   eax
c001c789:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c790:	e8 27 fd ff ff       	call   c001c4bc <FAT::fixFilepath(char*)>
c001c795:	83 c4 10             	add    esp,0x10
c001c798:	83 ec 08             	sub    esp,0x8
c001c79b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c79f:	50                   	push   eax
c001c7a0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c7a7:	50                   	push   eax
c001c7a8:	e8 e2 81 fe ff       	call   c000498f <f_stat>
c001c7ad:	83 c4 10             	add    esp,0x10
c001c7b0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c7b7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c7be:	85 c0                	test   eax,eax
c001c7c0:	74 0a                	je     c001c7cc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c7c2:	83 f8 04             	cmp    eax,0x4
c001c7c5:	74 39                	je     c001c800 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c7c7:	eb 3f                	jmp    c001c808 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001c7c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c7cc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c7d0:	0f b6 c0             	movzx  eax,al
c001c7d3:	83 e0 10             	and    eax,0x10
c001c7d6:	0f 95 c2             	setne  dl
c001c7d9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c7e0:	88 10                	mov    BYTE PTR [eax],dl
c001c7e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7e6:	ba 00 00 00 00       	mov    edx,0x0
c001c7eb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c7f2:	89 01                	mov    DWORD PTR [ecx],eax
c001c7f4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c7f7:	b8 00 00 00 00       	mov    eax,0x0
c001c7fc:	eb 12                	jmp    c001c810 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c7fe:	66 90                	xchg   ax,ax
c001c800:	b8 02 00 00 00       	mov    eax,0x2
c001c805:	eb 09                	jmp    c001c810 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c807:	90                   	nop
c001c808:	b8 01 00 00 00       	mov    eax,0x1
c001c80d:	8d 76 00             	lea    esi,[esi+0x0]
c001c810:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c816:	c3                   	ret    
c001c817:	90                   	nop

c001c818 <FAT::unlink(char const*)>:
c001c818:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c81e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c826:	75 08                	jne    c001c830 <FAT::unlink(char const*)+0x18>
c001c828:	b8 04 00 00 00       	mov    eax,0x4
c001c82d:	eb 61                	jmp    c001c890 <FAT::unlink(char const*)+0x78>
c001c82f:	90                   	nop
c001c830:	83 ec 08             	sub    esp,0x8
c001c833:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c83a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c83e:	50                   	push   eax
c001c83f:	e8 0c 3e fe ff       	call   c0000650 <strcpy>
c001c844:	83 c4 10             	add    esp,0x10
c001c847:	83 ec 08             	sub    esp,0x8
c001c84a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c84e:	50                   	push   eax
c001c84f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c856:	e8 61 fc ff ff       	call   c001c4bc <FAT::fixFilepath(char*)>
c001c85b:	83 c4 10             	add    esp,0x10
c001c85e:	83 ec 0c             	sub    esp,0xc
c001c861:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c865:	50                   	push   eax
c001c866:	e8 96 83 fe ff       	call   c0004c01 <f_unlink>
c001c86b:	83 c4 10             	add    esp,0x10
c001c86e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c875:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c87c:	85 c0                	test   eax,eax
c001c87e:	75 08                	jne    c001c888 <FAT::unlink(char const*)+0x70>
c001c880:	b8 00 00 00 00       	mov    eax,0x0
c001c885:	eb 09                	jmp    c001c890 <FAT::unlink(char const*)+0x78>
c001c887:	90                   	nop
c001c888:	b8 01 00 00 00       	mov    eax,0x1
c001c88d:	8d 76 00             	lea    esi,[esi+0x0]
c001c890:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c896:	c3                   	ret    
c001c897:	90                   	nop

c001c898 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c898:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c89e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001c8a5:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001c8ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c8b0:	88 d0                	mov    al,dl
c001c8b2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c8b6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c8be:	75 0c                	jne    c001c8cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001c8c0:	b8 04 00 00 00       	mov    eax,0x4
c001c8c5:	e9 7e 01 00 00       	jmp    c001ca48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001c8ca:	66 90                	xchg   ax,ax
c001c8cc:	83 ec 08             	sub    esp,0x8
c001c8cf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c8d6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c8da:	50                   	push   eax
c001c8db:	e8 70 3d fe ff       	call   c0000650 <strcpy>
c001c8e0:	83 c4 10             	add    esp,0x10
c001c8e3:	83 ec 08             	sub    esp,0x8
c001c8e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c8ea:	50                   	push   eax
c001c8eb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c8f2:	e8 c5 fb ff ff       	call   c001c4bc <FAT::fixFilepath(char*)>
c001c8f7:	83 c4 10             	add    esp,0x10
c001c8fa:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c902:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c90a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c90f:	83 e0 01             	and    eax,0x1
c001c912:	74 14                	je     c001c928 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001c914:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c91b:	83 c8 01             	or     eax,0x1
c001c91e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c925:	8d 76 00             	lea    esi,[esi+0x0]
c001c928:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c92d:	83 e0 02             	and    eax,0x2
c001c930:	74 12                	je     c001c944 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001c932:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c939:	83 c8 20             	or     eax,0x20
c001c93c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c943:	90                   	nop
c001c944:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c949:	83 e0 04             	and    eax,0x4
c001c94c:	74 12                	je     c001c960 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001c94e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c955:	83 c8 04             	or     eax,0x4
c001c958:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c95f:	90                   	nop
c001c960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c965:	83 e0 08             	and    eax,0x8
c001c968:	74 12                	je     c001c97c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c96a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c971:	83 c8 02             	or     eax,0x2
c001c974:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c97b:	90                   	nop
c001c97c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c981:	83 e0 01             	and    eax,0x1
c001c984:	74 12                	je     c001c998 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001c986:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c98d:	83 c8 01             	or     eax,0x1
c001c990:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c997:	90                   	nop
c001c998:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c99d:	83 e0 02             	and    eax,0x2
c001c9a0:	74 12                	je     c001c9b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001c9a2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c9a9:	83 c8 20             	or     eax,0x20
c001c9ac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c9b3:	90                   	nop
c001c9b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c9b9:	83 e0 04             	and    eax,0x4
c001c9bc:	74 12                	je     c001c9d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001c9be:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c9c5:	83 c8 04             	or     eax,0x4
c001c9c8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c9cf:	90                   	nop
c001c9d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c9d5:	83 e0 08             	and    eax,0x8
c001c9d8:	74 12                	je     c001c9ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001c9da:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c9e1:	83 c8 02             	or     eax,0x2
c001c9e4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c9eb:	90                   	nop
c001c9ec:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001c9f3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c9fa:	09 d0                	or     eax,edx
c001c9fc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ca03:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ca0b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ca13:	83 ec 04             	sub    esp,0x4
c001ca16:	52                   	push   edx
c001ca17:	50                   	push   eax
c001ca18:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ca1c:	50                   	push   eax
c001ca1d:	e8 52 86 fe ff       	call   c0005074 <f_chmod>
c001ca22:	83 c4 10             	add    esp,0x10
c001ca25:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ca2c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ca33:	85 c0                	test   eax,eax
c001ca35:	75 09                	jne    c001ca40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001ca37:	b8 00 00 00 00       	mov    eax,0x0
c001ca3c:	eb 0a                	jmp    c001ca48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001ca3e:	66 90                	xchg   ax,ax
c001ca40:	b8 01 00 00 00       	mov    eax,0x1
c001ca45:	8d 76 00             	lea    esi,[esi+0x0]
c001ca48:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ca4e:	c3                   	ret    
c001ca4f:	90                   	nop

c001ca50 <FAT::rename(char const*, char const*)>:
c001ca50:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ca56:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ca5e:	74 0c                	je     c001ca6c <FAT::rename(char const*, char const*)+0x1c>
c001ca60:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ca68:	75 0e                	jne    c001ca78 <FAT::rename(char const*, char const*)+0x28>
c001ca6a:	66 90                	xchg   ax,ax
c001ca6c:	b8 04 00 00 00       	mov    eax,0x4
c001ca71:	e9 9e 00 00 00       	jmp    c001cb14 <FAT::rename(char const*, char const*)+0xc4>
c001ca76:	66 90                	xchg   ax,ax
c001ca78:	83 ec 08             	sub    esp,0x8
c001ca7b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ca82:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ca89:	50                   	push   eax
c001ca8a:	e8 c1 3b fe ff       	call   c0000650 <strcpy>
c001ca8f:	83 c4 10             	add    esp,0x10
c001ca92:	83 ec 08             	sub    esp,0x8
c001ca95:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ca9c:	50                   	push   eax
c001ca9d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001caa4:	e8 13 fa ff ff       	call   c001c4bc <FAT::fixFilepath(char*)>
c001caa9:	83 c4 10             	add    esp,0x10
c001caac:	83 ec 08             	sub    esp,0x8
c001caaf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001cab6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001caba:	50                   	push   eax
c001cabb:	e8 90 3b fe ff       	call   c0000650 <strcpy>
c001cac0:	83 c4 10             	add    esp,0x10
c001cac3:	83 ec 08             	sub    esp,0x8
c001cac6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001caca:	50                   	push   eax
c001cacb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cad2:	e8 e5 f9 ff ff       	call   c001c4bc <FAT::fixFilepath(char*)>
c001cad7:	83 c4 10             	add    esp,0x10
c001cada:	83 ec 08             	sub    esp,0x8
c001cadd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cae1:	50                   	push   eax
c001cae2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cae9:	50                   	push   eax
c001caea:	e8 cd 83 fe ff       	call   c0004ebc <f_rename>
c001caef:	83 c4 10             	add    esp,0x10
c001caf2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001caf9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001cb00:	85 c0                	test   eax,eax
c001cb02:	75 08                	jne    c001cb0c <FAT::rename(char const*, char const*)+0xbc>
c001cb04:	b8 00 00 00 00       	mov    eax,0x0
c001cb09:	eb 09                	jmp    c001cb14 <FAT::rename(char const*, char const*)+0xc4>
c001cb0b:	90                   	nop
c001cb0c:	b8 01 00 00 00       	mov    eax,0x1
c001cb11:	8d 76 00             	lea    esi,[esi+0x0]
c001cb14:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cb1a:	c3                   	ret    
c001cb1b:	90                   	nop

c001cb1c <FAT::mkdir(char const*)>:
c001cb1c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cb22:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cb2a:	75 08                	jne    c001cb34 <FAT::mkdir(char const*)+0x18>
c001cb2c:	b8 04 00 00 00       	mov    eax,0x4
c001cb31:	eb 61                	jmp    c001cb94 <FAT::mkdir(char const*)+0x78>
c001cb33:	90                   	nop
c001cb34:	83 ec 08             	sub    esp,0x8
c001cb37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cb3e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb42:	50                   	push   eax
c001cb43:	e8 08 3b fe ff       	call   c0000650 <strcpy>
c001cb48:	83 c4 10             	add    esp,0x10
c001cb4b:	83 ec 08             	sub    esp,0x8
c001cb4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cb52:	50                   	push   eax
c001cb53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cb5a:	e8 5d f9 ff ff       	call   c001c4bc <FAT::fixFilepath(char*)>
c001cb5f:	83 c4 10             	add    esp,0x10
c001cb62:	83 ec 0c             	sub    esp,0xc
c001cb65:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb69:	50                   	push   eax
c001cb6a:	e8 b2 81 fe ff       	call   c0004d21 <f_mkdir>
c001cb6f:	83 c4 10             	add    esp,0x10
c001cb72:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cb79:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cb80:	85 c0                	test   eax,eax
c001cb82:	75 08                	jne    c001cb8c <FAT::mkdir(char const*)+0x70>
c001cb84:	b8 00 00 00 00       	mov    eax,0x0
c001cb89:	eb 09                	jmp    c001cb94 <FAT::mkdir(char const*)+0x78>
c001cb8b:	90                   	nop
c001cb8c:	b8 01 00 00 00       	mov    eax,0x1
c001cb91:	8d 76 00             	lea    esi,[esi+0x0]
c001cb94:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cb9a:	c3                   	ret    
c001cb9b:	90                   	nop

c001cb9c <FAT::exists(char const*)>:
c001cb9c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001cba2:	83 ec 08             	sub    esp,0x8
c001cba5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cbac:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cbb0:	50                   	push   eax
c001cbb1:	e8 9a 3a fe ff       	call   c0000650 <strcpy>
c001cbb6:	83 c4 10             	add    esp,0x10
c001cbb9:	83 ec 08             	sub    esp,0x8
c001cbbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001cbc0:	50                   	push   eax
c001cbc1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cbc8:	e8 ef f8 ff ff       	call   c001c4bc <FAT::fixFilepath(char*)>
c001cbcd:	83 c4 10             	add    esp,0x10
c001cbd0:	83 ec 08             	sub    esp,0x8
c001cbd3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001cbda:	50                   	push   eax
c001cbdb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cbdf:	50                   	push   eax
c001cbe0:	e8 aa 7d fe ff       	call   c000498f <f_stat>
c001cbe5:	83 c4 10             	add    esp,0x10
c001cbe8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001cbef:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001cbf6:	85 c0                	test   eax,eax
c001cbf8:	75 06                	jne    c001cc00 <FAT::exists(char const*)+0x64>
c001cbfa:	b0 01                	mov    al,0x1
c001cbfc:	eb 06                	jmp    c001cc04 <FAT::exists(char const*)+0x68>
c001cbfe:	66 90                	xchg   ax,ax
c001cc00:	b0 00                	mov    al,0x0
c001cc02:	66 90                	xchg   ax,ax
c001cc04:	81 c4 2c 02 00 00    	add    esp,0x22c
c001cc0a:	c3                   	ret    
c001cc0b:	90                   	nop

c001cc0c <isoReadDiscSectorHelper>:
c001cc0c:	83 ec 2c             	sub    esp,0x2c
c001cc0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cc13:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cc17:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001cc1c:	83 e8 41             	sub    eax,0x41
c001cc1f:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001cc26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc2a:	ba 00 00 00 00       	mov    edx,0x0
c001cc2f:	83 ec 0c             	sub    esp,0xc
c001cc32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc36:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cc3a:	52                   	push   edx
c001cc3b:	50                   	push   eax
c001cc3c:	51                   	push   ecx
c001cc3d:	e8 0a de fe ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c001cc42:	83 c4 20             	add    esp,0x20
c001cc45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc49:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cc4e:	74 0c                	je     c001cc5c <isoReadDiscSectorHelper+0x50>
c001cc50:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cc54:	c1 e0 0b             	shl    eax,0xb
c001cc57:	eb 0b                	jmp    c001cc64 <isoReadDiscSectorHelper+0x58>
c001cc59:	8d 76 00             	lea    esi,[esi+0x0]
c001cc5c:	b8 00 00 00 00       	mov    eax,0x0
c001cc61:	8d 76 00             	lea    esi,[esi+0x0]
c001cc64:	83 c4 2c             	add    esp,0x2c
c001cc67:	c3                   	ret    

c001cc68 <iso_kprintf>:
c001cc68:	83 ec 0c             	sub    esp,0xc
c001cc6b:	83 ec 08             	sub    esp,0x8
c001cc6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc72:	68 dc 54 02 c0       	push   0xc00254dc
c001cc77:	e8 ea a2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cc7c:	83 c4 10             	add    esp,0x10
c001cc7f:	90                   	nop
c001cc80:	83 c4 0c             	add    esp,0xc
c001cc83:	c3                   	ret    

c001cc84 <iso_kprintfd>:
c001cc84:	83 ec 0c             	sub    esp,0xc
c001cc87:	83 ec 08             	sub    esp,0x8
c001cc8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc8e:	68 1d 4a 02 c0       	push   0xc0024a1d
c001cc93:	e8 ce a2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cc98:	83 c4 10             	add    esp,0x10
c001cc9b:	90                   	nop
c001cc9c:	83 c4 0c             	add    esp,0xc
c001cc9f:	c3                   	ret    

c001cca0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001cca0:	b8 08 00 00 00       	mov    eax,0x8
c001cca5:	c3                   	ret    

c001cca6 <ISO9660::truncate(void*, unsigned long long)>:
c001cca6:	b8 01 00 00 00       	mov    eax,0x1
c001ccab:	c3                   	ret    

c001ccac <ISO9660::getName()>:
c001ccac:	b8 68 58 02 c0       	mov    eax,0xc0025868
c001ccb1:	c3                   	ret    

c001ccb2 <ISO9660::closeDir(void*)>:
c001ccb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccb6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccb8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001ccbb:	90                   	nop

c001ccbc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ccbc:	b8 01 00 00 00       	mov    eax,0x1
c001ccc1:	c3                   	ret    

c001ccc2 <ISO9660::unlink(char const*)>:
c001ccc2:	b8 01 00 00 00       	mov    eax,0x1
c001ccc7:	c3                   	ret    

c001ccc8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ccc8:	b8 03 00 00 00       	mov    eax,0x3
c001cccd:	c3                   	ret    

c001ccce <ISO9660::rename(char const*, char const*)>:
c001ccce:	b8 01 00 00 00       	mov    eax,0x1
c001ccd3:	c3                   	ret    

c001ccd4 <ISO9660::mkdir(char const*)>:
c001ccd4:	b8 01 00 00 00       	mov    eax,0x1
c001ccd9:	c3                   	ret    

c001ccda <ISO9660::~ISO9660()>:
c001ccda:	83 ec 0c             	sub    esp,0xc
c001ccdd:	ba a8 59 02 c0       	mov    edx,0xc00259a8
c001cce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce6:	89 10                	mov    DWORD PTR [eax],edx
c001cce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccec:	83 ec 0c             	sub    esp,0xc
c001ccef:	50                   	push   eax
c001ccf0:	e8 e1 b0 fe ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c001ccf5:	83 c4 10             	add    esp,0x10
c001ccf8:	90                   	nop
c001ccf9:	83 c4 0c             	add    esp,0xc
c001ccfc:	c3                   	ret    
c001ccfd:	90                   	nop

c001ccfe <ISO9660::~ISO9660()>:
c001ccfe:	83 ec 0c             	sub    esp,0xc
c001cd01:	83 ec 0c             	sub    esp,0xc
c001cd04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd08:	e8 cd ff ff ff       	call   c001ccda <ISO9660::~ISO9660()>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	83 ec 08             	sub    esp,0x8
c001cd13:	6a 08                	push   0x8
c001cd15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd19:	e8 9e 05 ff ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c001cd1e:	83 c4 10             	add    esp,0x10
c001cd21:	83 c4 0c             	add    esp,0xc
c001cd24:	c3                   	ret    
c001cd25:	90                   	nop

c001cd26 <ISO9660::exists(char const*)>:
c001cd26:	83 ec 18             	sub    esp,0x18
c001cd29:	68 83 58 02 c0       	push   0xc0025883
c001cd2e:	e8 b1 2e ff ff       	call   c000fbe4 <KePanic(char const*)>
c001cd33:	31 c0                	xor    eax,eax
c001cd35:	83 c4 1c             	add    esp,0x1c
c001cd38:	c3                   	ret    
c001cd39:	90                   	nop

c001cd3a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001cd3a:	56                   	push   esi
c001cd3b:	53                   	push   ebx
c001cd3c:	53                   	push   ebx
c001cd3d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cd41:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cd45:	85 db                	test   ebx,ebx
c001cd47:	0f 84 ca 00 00 00    	je     c001ce17 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001cd4d:	85 f6                	test   esi,esi
c001cd4f:	0f 84 c2 00 00 00    	je     c001ce17 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001cd55:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001cd5a:	b8 03 00 00 00       	mov    eax,0x3
c001cd5f:	0f 85 b7 00 00 00    	jne    c001ce1c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cd65:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001cd67:	38 0d c0 ec 02 c0    	cmp    BYTE PTR ds:0xc002ecc0,cl
c001cd6d:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001cd74:	74 1b                	je     c001cd91 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001cd76:	85 c0                	test   eax,eax
c001cd78:	74 10                	je     c001cd8a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001cd7a:	83 ec 0c             	sub    esp,0xc
c001cd7d:	68 a1 58 02 c0       	push   0xc00258a1
c001cd82:	e8 5d 2e ff ff       	call   c000fbe4 <KePanic(char const*)>
c001cd87:	83 c4 10             	add    esp,0x10
c001cd8a:	8a 03                	mov    al,BYTE PTR [ebx]
c001cd8c:	a2 c0 ec 02 c0       	mov    ds:0xc002ecc0,al
c001cd91:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cd94:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001cd9b:	85 c0                	test   eax,eax
c001cd9d:	74 09                	je     c001cda8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001cd9f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001cda6:	74 48                	je     c001cdf0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001cda8:	83 ec 0c             	sub    esp,0xc
c001cdab:	68 b1 58 02 c0       	push   0xc00258b1
c001cdb0:	e8 b1 a1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cdb5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cdb8:	83 c4 10             	add    esp,0x10
c001cdbb:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001cdc2:	85 c0                	test   eax,eax
c001cdc4:	74 17                	je     c001cddd <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001cdc6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001cdcd:	83 ec 0c             	sub    esp,0xc
c001cdd0:	68 d1 58 02 c0       	push   0xc00258d1
c001cdd5:	e8 8c a1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cdda:	83 c4 10             	add    esp,0x10
c001cddd:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001cde4:	83 ec 0c             	sub    esp,0xc
c001cde7:	50                   	push   eax
c001cde8:	e8 5a 9e fe ff       	call   c0006c47 <init_percd>
c001cded:	83 c4 10             	add    esp,0x10
c001cdf0:	51                   	push   ecx
c001cdf1:	83 c3 03             	add    ebx,0x3
c001cdf4:	51                   	push   ecx
c001cdf5:	6a 00                	push   0x0
c001cdf7:	53                   	push   ebx
c001cdf8:	e8 0d 99 fe ff       	call   c000670a <iso_open>
c001cdfd:	83 c4 10             	add    esp,0x10
c001ce00:	89 c2                	mov    edx,eax
c001ce02:	b8 01 00 00 00       	mov    eax,0x1
c001ce07:	83 fa ff             	cmp    edx,0xffffffff
c001ce0a:	74 10                	je     c001ce1c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ce0c:	83 c2 32             	add    edx,0x32
c001ce0f:	31 c0                	xor    eax,eax
c001ce11:	01 d2                	add    edx,edx
c001ce13:	89 16                	mov    DWORD PTR [esi],edx
c001ce15:	eb 05                	jmp    c001ce1c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ce17:	b8 04 00 00 00       	mov    eax,0x4
c001ce1c:	5a                   	pop    edx
c001ce1d:	5b                   	pop    ebx
c001ce1e:	5e                   	pop    esi
c001ce1f:	c3                   	ret    

c001ce20 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ce20:	53                   	push   ebx
c001ce21:	83 ec 08             	sub    esp,0x8
c001ce24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce28:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ce2c:	85 c0                	test   eax,eax
c001ce2e:	74 2d                	je     c001ce5d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ce30:	85 db                	test   ebx,ebx
c001ce32:	74 29                	je     c001ce5d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ce34:	52                   	push   edx
c001ce35:	b9 02 00 00 00       	mov    ecx,0x2
c001ce3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce3e:	99                   	cdq    
c001ce3f:	f7 f9                	idiv   ecx
c001ce41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ce45:	83 e8 32             	sub    eax,0x32
c001ce48:	50                   	push   eax
c001ce49:	e8 64 99 fe ff       	call   c00067b2 <iso_read>
c001ce4e:	83 c4 10             	add    esp,0x10
c001ce51:	89 03                	mov    DWORD PTR [ebx],eax
c001ce53:	09 d0                	or     eax,edx
c001ce55:	0f 94 c0             	sete   al
c001ce58:	0f b6 c0             	movzx  eax,al
c001ce5b:	eb 05                	jmp    c001ce62 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001ce5d:	b8 04 00 00 00       	mov    eax,0x4
c001ce62:	83 c4 08             	add    esp,0x8
c001ce65:	5b                   	pop    ebx
c001ce66:	c3                   	ret    
c001ce67:	90                   	nop

c001ce68 <ISO9660::seek(void*, unsigned long long)>:
c001ce68:	57                   	push   edi
c001ce69:	b8 04 00 00 00       	mov    eax,0x4
c001ce6e:	56                   	push   esi
c001ce6f:	51                   	push   ecx
c001ce70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce74:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ce78:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ce7c:	85 d2                	test   edx,edx
c001ce7e:	74 26                	je     c001cea6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001ce80:	89 d0                	mov    eax,edx
c001ce82:	b9 02 00 00 00       	mov    ecx,0x2
c001ce87:	6a 00                	push   0x0
c001ce89:	99                   	cdq    
c001ce8a:	f7 f9                	idiv   ecx
c001ce8c:	57                   	push   edi
c001ce8d:	56                   	push   esi
c001ce8e:	83 e8 32             	sub    eax,0x32
c001ce91:	50                   	push   eax
c001ce92:	e8 31 9a fe ff       	call   c00068c8 <iso_seek>
c001ce97:	83 c4 10             	add    esp,0x10
c001ce9a:	31 f0                	xor    eax,esi
c001ce9c:	31 fa                	xor    edx,edi
c001ce9e:	09 d0                	or     eax,edx
c001cea0:	0f 95 c0             	setne  al
c001cea3:	0f b6 c0             	movzx  eax,al
c001cea6:	5a                   	pop    edx
c001cea7:	5e                   	pop    esi
c001cea8:	5f                   	pop    edi
c001cea9:	c3                   	ret    

c001ceaa <ISO9660::tell(void*, unsigned long long*)>:
c001ceaa:	53                   	push   ebx
c001ceab:	83 ec 08             	sub    esp,0x8
c001ceae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ceb2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ceb6:	85 c0                	test   eax,eax
c001ceb8:	74 24                	je     c001cede <ISO9660::tell(void*, unsigned long long*)+0x34>
c001ceba:	85 db                	test   ebx,ebx
c001cebc:	74 20                	je     c001cede <ISO9660::tell(void*, unsigned long long*)+0x34>
c001cebe:	b9 02 00 00 00       	mov    ecx,0x2
c001cec3:	99                   	cdq    
c001cec4:	f7 f9                	idiv   ecx
c001cec6:	83 ec 0c             	sub    esp,0xc
c001cec9:	83 e8 32             	sub    eax,0x32
c001cecc:	50                   	push   eax
c001cecd:	e8 7a 9a fe ff       	call   c000694c <iso_tell>
c001ced2:	83 c4 10             	add    esp,0x10
c001ced5:	89 03                	mov    DWORD PTR [ebx],eax
c001ced7:	31 c0                	xor    eax,eax
c001ced9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001cedc:	eb 05                	jmp    c001cee3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001cede:	b8 04 00 00 00       	mov    eax,0x4
c001cee3:	83 c4 08             	add    esp,0x8
c001cee6:	5b                   	pop    ebx
c001cee7:	c3                   	ret    

c001cee8 <ISO9660::stat(void*, unsigned long long*)>:
c001cee8:	56                   	push   esi
c001cee9:	53                   	push   ebx
c001ceea:	83 ec 10             	sub    esp,0x10
c001ceed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cef1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cef5:	68 f5 58 02 c0       	push   0xc00258f5
c001cefa:	e8 67 a0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ceff:	83 c4 10             	add    esp,0x10
c001cf02:	85 db                	test   ebx,ebx
c001cf04:	74 2a                	je     c001cf30 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001cf06:	85 f6                	test   esi,esi
c001cf08:	74 26                	je     c001cf30 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001cf0a:	89 d8                	mov    eax,ebx
c001cf0c:	b9 02 00 00 00       	mov    ecx,0x2
c001cf11:	99                   	cdq    
c001cf12:	83 ec 0c             	sub    esp,0xc
c001cf15:	f7 f9                	idiv   ecx
c001cf17:	83 e8 32             	sub    eax,0x32
c001cf1a:	50                   	push   eax
c001cf1b:	e8 5d 9a fe ff       	call   c000697d <iso_total>
c001cf20:	83 c4 10             	add    esp,0x10
c001cf23:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001cf2a:	89 06                	mov    DWORD PTR [esi],eax
c001cf2c:	31 c0                	xor    eax,eax
c001cf2e:	eb 05                	jmp    c001cf35 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001cf30:	b8 04 00 00 00       	mov    eax,0x4
c001cf35:	5a                   	pop    edx
c001cf36:	5b                   	pop    ebx
c001cf37:	5e                   	pop    esi
c001cf38:	c3                   	ret    
c001cf39:	90                   	nop

c001cf3a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001cf3a:	55                   	push   ebp
c001cf3b:	57                   	push   edi
c001cf3c:	56                   	push   esi
c001cf3d:	53                   	push   ebx
c001cf3e:	83 ec 18             	sub    esp,0x18
c001cf41:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cf45:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cf49:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cf4d:	68 fd 58 02 c0       	push   0xc00258fd
c001cf52:	e8 0f a0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cf57:	83 c4 10             	add    esp,0x10
c001cf5a:	85 ff                	test   edi,edi
c001cf5c:	0f 94 c0             	sete   al
c001cf5f:	85 f6                	test   esi,esi
c001cf61:	0f 94 c2             	sete   dl
c001cf64:	09 d0                	or     eax,edx
c001cf66:	a8 01                	test   al,0x1
c001cf68:	0f 85 dd 00 00 00    	jne    c001d04b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001cf6e:	85 db                	test   ebx,ebx
c001cf70:	0f 84 d5 00 00 00    	je     c001d04b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001cf76:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001cf79:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001cf7f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001cf86:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001cf8d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001cf8f:	38 0d c0 ec 02 c0    	cmp    BYTE PTR ds:0xc002ecc0,cl
c001cf95:	74 1b                	je     c001cfb2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001cf97:	85 c0                	test   eax,eax
c001cf99:	74 10                	je     c001cfab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001cf9b:	83 ec 0c             	sub    esp,0xc
c001cf9e:	68 a1 58 02 c0       	push   0xc00258a1
c001cfa3:	e8 3c 2c ff ff       	call   c000fbe4 <KePanic(char const*)>
c001cfa8:	83 c4 10             	add    esp,0x10
c001cfab:	8a 03                	mov    al,BYTE PTR [ebx]
c001cfad:	a2 c0 ec 02 c0       	mov    ds:0xc002ecc0,al
c001cfb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cfb5:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001cfbc:	85 c0                	test   eax,eax
c001cfbe:	74 09                	je     c001cfc9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001cfc0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001cfc7:	74 51                	je     c001d01a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001cfc9:	83 ec 0c             	sub    esp,0xc
c001cfcc:	68 05 59 02 c0       	push   0xc0025905
c001cfd1:	e8 90 9f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cfd6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cfd9:	83 c4 10             	add    esp,0x10
c001cfdc:	83 3c 85 dc b9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4624],0x0
c001cfe4:	74 21                	je     c001d007 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001cfe6:	83 ec 0c             	sub    esp,0xc
c001cfe9:	68 25 59 02 c0       	push   0xc0025925
c001cfee:	e8 73 9f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cff3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cff6:	83 c4 10             	add    esp,0x10
c001cff9:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001d000:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d007:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001d00e:	83 ec 0c             	sub    esp,0xc
c001d011:	50                   	push   eax
c001d012:	e8 30 9c fe ff       	call   c0006c47 <init_percd>
c001d017:	83 c4 10             	add    esp,0x10
c001d01a:	52                   	push   edx
c001d01b:	83 c3 03             	add    ebx,0x3
c001d01e:	52                   	push   edx
c001d01f:	6a 00                	push   0x0
c001d021:	53                   	push   ebx
c001d022:	e8 e3 96 fe ff       	call   c000670a <iso_open>
c001d027:	83 c4 10             	add    esp,0x10
c001d02a:	83 f8 ff             	cmp    eax,0xffffffff
c001d02d:	89 c5                	mov    ebp,eax
c001d02f:	75 21                	jne    c001d052 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d031:	50                   	push   eax
c001d032:	50                   	push   eax
c001d033:	6a 01                	push   0x1
c001d035:	53                   	push   ebx
c001d036:	e8 cf 96 fe ff       	call   c000670a <iso_open>
c001d03b:	83 c4 10             	add    esp,0x10
c001d03e:	ba 02 00 00 00       	mov    edx,0x2
c001d043:	40                   	inc    eax
c001d044:	74 2b                	je     c001d071 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d046:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d049:	eb 24                	jmp    c001d06f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d04b:	ba 04 00 00 00       	mov    edx,0x4
c001d050:	eb 1f                	jmp    c001d071 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d052:	83 ec 0c             	sub    esp,0xc
c001d055:	50                   	push   eax
c001d056:	e8 22 99 fe ff       	call   c000697d <iso_total>
c001d05b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d062:	89 07                	mov    DWORD PTR [edi],eax
c001d064:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d067:	e8 28 97 fe ff       	call   c0006794 <iso_close>
c001d06c:	83 c4 10             	add    esp,0x10
c001d06f:	31 d2                	xor    edx,edx
c001d071:	83 c4 0c             	add    esp,0xc
c001d074:	89 d0                	mov    eax,edx
c001d076:	5b                   	pop    ebx
c001d077:	5e                   	pop    esi
c001d078:	5f                   	pop    edi
c001d079:	5d                   	pop    ebp
c001d07a:	c3                   	ret    
c001d07b:	90                   	nop

c001d07c <ISO9660::close(void*)>:
c001d07c:	83 ec 0c             	sub    esp,0xc
c001d07f:	b8 04 00 00 00       	mov    eax,0x4
c001d084:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d088:	85 d2                	test   edx,edx
c001d08a:	74 1b                	je     c001d0a7 <ISO9660::close(void*)+0x2b>
c001d08c:	89 d0                	mov    eax,edx
c001d08e:	b9 02 00 00 00       	mov    ecx,0x2
c001d093:	99                   	cdq    
c001d094:	83 ec 0c             	sub    esp,0xc
c001d097:	f7 f9                	idiv   ecx
c001d099:	83 e8 32             	sub    eax,0x32
c001d09c:	50                   	push   eax
c001d09d:	e8 f2 96 fe ff       	call   c0006794 <iso_close>
c001d0a2:	83 c4 10             	add    esp,0x10
c001d0a5:	31 c0                	xor    eax,eax
c001d0a7:	83 c4 0c             	add    esp,0xc
c001d0aa:	c3                   	ret    
c001d0ab:	90                   	nop

c001d0ac <ISO9660::openDir(char const*, void**)>:
c001d0ac:	56                   	push   esi
c001d0ad:	53                   	push   ebx
c001d0ae:	50                   	push   eax
c001d0af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d0b3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d0b7:	85 db                	test   ebx,ebx
c001d0b9:	0f 84 bd 00 00 00    	je     c001d17c <ISO9660::openDir(char const*, void**)+0xd0>
c001d0bf:	85 f6                	test   esi,esi
c001d0c1:	0f 84 b5 00 00 00    	je     c001d17c <ISO9660::openDir(char const*, void**)+0xd0>
c001d0c7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d0c9:	38 15 c0 ec 02 c0    	cmp    BYTE PTR ds:0xc002ecc0,dl
c001d0cf:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001d0d6:	74 1b                	je     c001d0f3 <ISO9660::openDir(char const*, void**)+0x47>
c001d0d8:	85 c0                	test   eax,eax
c001d0da:	74 10                	je     c001d0ec <ISO9660::openDir(char const*, void**)+0x40>
c001d0dc:	83 ec 0c             	sub    esp,0xc
c001d0df:	68 a1 58 02 c0       	push   0xc00258a1
c001d0e4:	e8 fb 2a ff ff       	call   c000fbe4 <KePanic(char const*)>
c001d0e9:	83 c4 10             	add    esp,0x10
c001d0ec:	8a 03                	mov    al,BYTE PTR [ebx]
c001d0ee:	a2 c0 ec 02 c0       	mov    ds:0xc002ecc0,al
c001d0f3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d0f6:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001d0fd:	85 c0                	test   eax,eax
c001d0ff:	74 10                	je     c001d111 <ISO9660::openDir(char const*, void**)+0x65>
c001d101:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d108:	74 1a                	je     c001d124 <ISO9660::openDir(char const*, void**)+0x78>
c001d10a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d111:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001d118:	83 ec 0c             	sub    esp,0xc
c001d11b:	50                   	push   eax
c001d11c:	e8 26 9b fe ff       	call   c0006c47 <init_percd>
c001d121:	83 c4 10             	add    esp,0x10
c001d124:	50                   	push   eax
c001d125:	83 c3 03             	add    ebx,0x3
c001d128:	50                   	push   eax
c001d129:	6a 01                	push   0x1
c001d12b:	53                   	push   ebx
c001d12c:	e8 d9 95 fe ff       	call   c000670a <iso_open>
c001d131:	83 c4 10             	add    esp,0x10
c001d134:	83 f8 ff             	cmp    eax,0xffffffff
c001d137:	89 c3                	mov    ebx,eax
c001d139:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001d13e:	75 1c                	jne    c001d15c <ISO9660::openDir(char const*, void**)+0xb0>
c001d140:	53                   	push   ebx
c001d141:	53                   	push   ebx
c001d142:	68 49 59 02 c0       	push   0xc0025949
c001d147:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d14d:	e8 7e 54 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c001d152:	83 c4 10             	add    esp,0x10
c001d155:	b8 01 00 00 00       	mov    eax,0x1
c001d15a:	eb 25                	jmp    c001d181 <ISO9660::openDir(char const*, void**)+0xd5>
c001d15c:	51                   	push   ecx
c001d15d:	01 db                	add    ebx,ebx
c001d15f:	51                   	push   ecx
c001d160:	83 c3 65             	add    ebx,0x65
c001d163:	68 5c 59 02 c0       	push   0xc002595c
c001d168:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d16e:	e8 5d 54 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c001d173:	83 c4 10             	add    esp,0x10
c001d176:	31 c0                	xor    eax,eax
c001d178:	89 1e                	mov    DWORD PTR [esi],ebx
c001d17a:	eb 05                	jmp    c001d181 <ISO9660::openDir(char const*, void**)+0xd5>
c001d17c:	b8 04 00 00 00       	mov    eax,0x4
c001d181:	5a                   	pop    edx
c001d182:	5b                   	pop    ebx
c001d183:	5e                   	pop    esi
c001d184:	c3                   	ret    
c001d185:	90                   	nop

c001d186 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d186:	55                   	push   ebp
c001d187:	57                   	push   edi
c001d188:	56                   	push   esi
c001d189:	53                   	push   ebx
c001d18a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d190:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001d197:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d19e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001d1a5:	85 db                	test   ebx,ebx
c001d1a7:	0f 84 e4 00 00 00    	je     c001d291 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001d1ad:	85 ed                	test   ebp,ebp
c001d1af:	0f 84 dc 00 00 00    	je     c001d291 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001d1b5:	83 ec 0c             	sub    esp,0xc
c001d1b8:	68 6f 59 02 c0       	push   0xc002596f
c001d1bd:	e8 a4 9d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d1c2:	89 d8                	mov    eax,ebx
c001d1c4:	b9 02 00 00 00       	mov    ecx,0x2
c001d1c9:	99                   	cdq    
c001d1ca:	f7 f9                	idiv   ecx
c001d1cc:	83 e8 32             	sub    eax,0x32
c001d1cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1d2:	e8 f8 97 fe ff       	call   c00069cf <iso_readdir>
c001d1d7:	83 c4 10             	add    esp,0x10
c001d1da:	85 c0                	test   eax,eax
c001d1dc:	89 c3                	mov    ebx,eax
c001d1de:	75 38                	jne    c001d218 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001d1e0:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001d1e5:	53                   	push   ebx
c001d1e6:	53                   	push   ebx
c001d1e7:	68 7a 59 02 c0       	push   0xc002597a
c001d1ec:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d1f2:	e8 d9 53 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c001d1f7:	83 c4 0c             	add    esp,0xc
c001d1fa:	68 10 01 00 00       	push   0x110
c001d1ff:	6a 00                	push   0x0
c001d201:	57                   	push   edi
c001d202:	e8 e9 32 fe ff       	call   c00004f0 <memset>
c001d207:	83 c4 10             	add    esp,0x10
c001d20a:	b8 01 00 00 00       	mov    eax,0x1
c001d20f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001d216:	eb 7e                	jmp    c001d296 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001d218:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d21e:	8d 70 08             	lea    esi,[eax+0x8]
c001d221:	83 ec 0c             	sub    esp,0xc
c001d224:	56                   	push   esi
c001d225:	e8 56 33 fe ff       	call   c0000580 <strlen>
c001d22a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d232:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d236:	83 c4 10             	add    esp,0x10
c001d239:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001d23d:	75 0a                	jne    c001d249 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001d23f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001d242:	b8 02 00 00 00       	mov    eax,0x2
c001d247:	74 05                	je     c001d24e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001d249:	b8 01 00 00 00       	mov    eax,0x1
c001d24e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d252:	50                   	push   eax
c001d253:	50                   	push   eax
c001d254:	56                   	push   esi
c001d255:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d259:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d25d:	50                   	push   eax
c001d25e:	e8 ed 33 fe ff       	call   c0000650 <strcpy>
c001d263:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d26a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d26c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001d273:	5a                   	pop    edx
c001d274:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001d279:	59                   	pop    ecx
c001d27a:	68 8d 59 02 c0       	push   0xc002598d
c001d27f:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d285:	e8 46 53 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c001d28a:	83 c4 10             	add    esp,0x10
c001d28d:	31 c0                	xor    eax,eax
c001d28f:	eb 05                	jmp    c001d296 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001d291:	b8 04 00 00 00       	mov    eax,0x4
c001d296:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d29c:	5b                   	pop    ebx
c001d29d:	5e                   	pop    esi
c001d29e:	5f                   	pop    edi
c001d29f:	5d                   	pop    ebp
c001d2a0:	c3                   	ret    

c001d2a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d2a1:	57                   	push   edi
c001d2a2:	56                   	push   esi
c001d2a3:	53                   	push   ebx
c001d2a4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d2a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d2ac:	39 35 c4 ec 02 c0    	cmp    DWORD PTR ds:0xc002ecc4,esi
c001d2b2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d2b6:	0f be cb             	movsx  ecx,bl
c001d2b9:	75 0b                	jne    c001d2c6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d2bb:	0f be 05 04 6c 02 c0 	movsx  eax,BYTE PTR ds:0xc0026c04
c001d2c2:	39 c8                	cmp    eax,ecx
c001d2c4:	74 47                	je     c001d30d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d2c6:	83 ec 0c             	sub    esp,0xc
c001d2c9:	31 d2                	xor    edx,edx
c001d2cb:	68 e0 ec 02 c0       	push   0xc002ece0
c001d2d0:	6a 01                	push   0x1
c001d2d2:	52                   	push   edx
c001d2d3:	56                   	push   esi
c001d2d4:	ff 34 8d dc b9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4624]
c001d2db:	e8 6c d7 fe ff       	call   c000aa4c <LogicalDisk::read(unsigned long long, int, void*)>
c001d2e0:	83 c4 20             	add    esp,0x20
c001d2e3:	85 c0                	test   eax,eax
c001d2e5:	75 0e                	jne    c001d2f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d2e7:	89 35 c4 ec 02 c0    	mov    DWORD PTR ds:0xc002ecc4,esi
c001d2ed:	88 1d 04 6c 02 c0    	mov    BYTE PTR ds:0xc0026c04,bl
c001d2f3:	eb 18                	jmp    c001d30d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d2f5:	50                   	push   eax
c001d2f6:	68 00 08 00 00       	push   0x800
c001d2fb:	6a 00                	push   0x0
c001d2fd:	57                   	push   edi
c001d2fe:	e8 ed 31 fe ff       	call   c00004f0 <memset>
c001d303:	83 c4 10             	add    esp,0x10
c001d306:	b8 01 00 00 00       	mov    eax,0x1
c001d30b:	eb 0e                	jmp    c001d31b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d30d:	be e0 ec 02 c0       	mov    esi,0xc002ece0
c001d312:	b9 00 08 00 00       	mov    ecx,0x800
c001d317:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d319:	31 c0                	xor    eax,eax
c001d31b:	5b                   	pop    ebx
c001d31c:	5e                   	pop    esi
c001d31d:	5f                   	pop    edi
c001d31e:	c3                   	ret    
c001d31f:	90                   	nop

c001d320 <ISO9660::tryMount(LogicalDisk*, int)>:
c001d320:	53                   	push   ebx
c001d321:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d327:	c7 05 c4 ec 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002ecc4,0xdeadbeef
c001d331:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d338:	8d 58 41             	lea    ebx,[eax+0x41]
c001d33b:	0f be db             	movsx  ebx,bl
c001d33e:	53                   	push   ebx
c001d33f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d343:	50                   	push   eax
c001d344:	6a 10                	push   0x10
c001d346:	e8 56 ff ff ff       	call   c001d2a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d34b:	83 c4 10             	add    esp,0x10
c001d34e:	31 d2                	xor    edx,edx
c001d350:	85 c0                	test   eax,eax
c001d352:	75 33                	jne    c001d387 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d354:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d359:	75 2c                	jne    c001d387 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d35b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d360:	75 25                	jne    c001d387 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d362:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d367:	75 1e                	jne    c001d387 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d369:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d36e:	75 17                	jne    c001d387 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d370:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d375:	75 10                	jne    c001d387 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d377:	83 ec 0c             	sub    esp,0xc
c001d37a:	53                   	push   ebx
c001d37b:	e8 c7 98 fe ff       	call   c0006c47 <init_percd>
c001d380:	83 c4 10             	add    esp,0x10
c001d383:	40                   	inc    eax
c001d384:	0f 95 c2             	setne  dl
c001d387:	81 c4 08 08 00 00    	add    esp,0x808
c001d38d:	88 d0                	mov    al,dl
c001d38f:	5b                   	pop    ebx
c001d390:	c3                   	ret    
c001d391:	90                   	nop

c001d392 <ISO9660::ISO9660()>:
c001d392:	83 ec 0c             	sub    esp,0xc
c001d395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d399:	83 ec 0c             	sub    esp,0xc
c001d39c:	50                   	push   eax
c001d39d:	e8 10 aa fe ff       	call   c0007db2 <Filesystem::Filesystem()>
c001d3a2:	83 c4 10             	add    esp,0x10
c001d3a5:	ba a8 59 02 c0       	mov    edx,0xc00259a8
c001d3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ae:	89 10                	mov    DWORD PTR [eax],edx
c001d3b0:	e8 a4 99 fe ff       	call   c0006d59 <fs_iso9660_init>
c001d3b5:	90                   	nop
c001d3b6:	83 c4 0c             	add    esp,0xc
c001d3b9:	c3                   	ret    

c001d3ba <SoundCard::beginPlayback()>:
c001d3ba:	c7 44 24 04 0c 5a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025a0c
c001d3c2:	e9 1d 28 ff ff       	jmp    c000fbe4 <KePanic(char const*)>
c001d3c7:	90                   	nop

c001d3c8 <SoundCard::stopPlayback()>:
c001d3c8:	c7 44 24 04 0c 5a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025a0c
c001d3d0:	e9 0f 28 ff ff       	jmp    c000fbe4 <KePanic(char const*)>
c001d3d5:	90                   	nop

c001d3d6 <SoundCard::SoundCard(char const*)>:
c001d3d6:	83 ec 1c             	sub    esp,0x1c
c001d3d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3dd:	83 ec 08             	sub    esp,0x8
c001d3e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3e4:	50                   	push   eax
c001d3e5:	e8 6e c7 fe ff       	call   c0009b58 <Device::Device(char const*)>
c001d3ea:	83 c4 10             	add    esp,0x10
c001d3ed:	ba 58 5a 02 c0       	mov    edx,0xc0025a58
c001d3f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f6:	89 10                	mov    DWORD PTR [eax],edx
c001d3f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3fc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d403:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d407:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d415:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d41f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d423:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d42d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d431:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d43b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d443:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d448:	7f 1a                	jg     c001d464 <SoundCard::SoundCard(char const*)+0x8e>
c001d44a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d44e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d452:	83 c2 54             	add    edx,0x54
c001d455:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d45d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d462:	eb df                	jmp    c001d443 <SoundCard::SoundCard(char const*)+0x6d>
c001d464:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d468:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d46f:	90                   	nop
c001d470:	83 c4 1c             	add    esp,0x1c
c001d473:	c3                   	ret    

c001d474 <SoundCard::~SoundCard()>:
c001d474:	83 ec 0c             	sub    esp,0xc
c001d477:	ba 58 5a 02 c0       	mov    edx,0xc0025a58
c001d47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d480:	89 10                	mov    DWORD PTR [eax],edx
c001d482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d486:	83 ec 0c             	sub    esp,0xc
c001d489:	50                   	push   eax
c001d48a:	e8 69 c4 fe ff       	call   c00098f8 <Device::~Device()>
c001d48f:	83 c4 10             	add    esp,0x10
c001d492:	90                   	nop
c001d493:	83 c4 0c             	add    esp,0xc
c001d496:	c3                   	ret    
c001d497:	90                   	nop

c001d498 <SoundCard::~SoundCard()>:
c001d498:	83 ec 0c             	sub    esp,0xc
c001d49b:	83 ec 0c             	sub    esp,0xc
c001d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4a2:	e8 cd ff ff ff       	call   c001d474 <SoundCard::~SoundCard()>
c001d4a7:	83 c4 10             	add    esp,0x10
c001d4aa:	83 ec 08             	sub    esp,0x8
c001d4ad:	68 e8 01 00 00       	push   0x1e8
c001d4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4b6:	e8 01 fe fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c001d4bb:	83 c4 10             	add    esp,0x10
c001d4be:	83 c4 0c             	add    esp,0xc
c001d4c1:	c3                   	ret    

c001d4c2 <SoundCard::configureRates(int, int, int)>:
c001d4c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d4c6:	31 c0                	xor    eax,eax
c001d4c8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d4cf:	75 20                	jne    c001d4f1 <SoundCard::configureRates(int, int, int)+0x2f>
c001d4d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d4d5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d4db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4df:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d4e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4e9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d4ef:	b0 01                	mov    al,0x1
c001d4f1:	c3                   	ret    

c001d4f2 <SoundCard::getSamples16(int, short*)>:
c001d4f2:	55                   	push   ebp
c001d4f3:	57                   	push   edi
c001d4f4:	31 ff                	xor    edi,edi
c001d4f6:	56                   	push   esi
c001d4f7:	53                   	push   ebx
c001d4f8:	31 db                	xor    ebx,ebx
c001d4fa:	83 ec 10             	sub    esp,0x10
c001d4fd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d501:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d505:	8d 04 36             	lea    eax,[esi+esi*1]
c001d508:	50                   	push   eax
c001d509:	6a 00                	push   0x0
c001d50b:	55                   	push   ebp
c001d50c:	e8 df 2f fe ff       	call   c00004f0 <memset>
c001d511:	83 c4 10             	add    esp,0x10
c001d514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d518:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001d51f:	85 c0                	test   eax,eax
c001d521:	74 1a                	je     c001d53d <SoundCard::getSamples16(int, short*)+0x4b>
c001d523:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d527:	75 14                	jne    c001d53d <SoundCard::getSamples16(int, short*)+0x4b>
c001d529:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d52d:	55                   	push   ebp
c001d52e:	56                   	push   esi
c001d52f:	50                   	push   eax
c001d530:	e8 8f 03 00 00       	call   c001d8c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d535:	83 c4 10             	add    esp,0x10
c001d538:	39 c3                	cmp    ebx,eax
c001d53a:	0f 4c d8             	cmovl  ebx,eax
c001d53d:	47                   	inc    edi
c001d53e:	83 ff 20             	cmp    edi,0x20
c001d541:	75 d1                	jne    c001d514 <SoundCard::getSamples16(int, short*)+0x22>
c001d543:	83 c4 0c             	add    esp,0xc
c001d546:	89 d8                	mov    eax,ebx
c001d548:	5b                   	pop    ebx
c001d549:	5e                   	pop    esi
c001d54a:	5f                   	pop    edi
c001d54b:	5d                   	pop    ebp
c001d54c:	c3                   	ret    
c001d54d:	90                   	nop

c001d54e <SoundCard::getSamples32(int, int*)>:
c001d54e:	55                   	push   ebp
c001d54f:	57                   	push   edi
c001d550:	31 ff                	xor    edi,edi
c001d552:	56                   	push   esi
c001d553:	31 f6                	xor    esi,esi
c001d555:	53                   	push   ebx
c001d556:	83 ec 10             	sub    esp,0x10
c001d559:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d55d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d561:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d565:	c1 e0 02             	shl    eax,0x2
c001d568:	50                   	push   eax
c001d569:	6a 00                	push   0x0
c001d56b:	55                   	push   ebp
c001d56c:	e8 7f 2f fe ff       	call   c00004f0 <memset>
c001d571:	83 c4 10             	add    esp,0x10
c001d574:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d57b:	85 c0                	test   eax,eax
c001d57d:	74 1a                	je     c001d599 <SoundCard::getSamples32(int, int*)+0x4b>
c001d57f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d583:	75 14                	jne    c001d599 <SoundCard::getSamples32(int, int*)+0x4b>
c001d585:	53                   	push   ebx
c001d586:	55                   	push   ebp
c001d587:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d58b:	50                   	push   eax
c001d58c:	e8 03 04 00 00       	call   c001d994 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d591:	83 c4 10             	add    esp,0x10
c001d594:	39 c6                	cmp    esi,eax
c001d596:	0f 4c f0             	cmovl  esi,eax
c001d599:	47                   	inc    edi
c001d59a:	83 ff 20             	cmp    edi,0x20
c001d59d:	75 d5                	jne    c001d574 <SoundCard::getSamples32(int, int*)+0x26>
c001d59f:	85 f6                	test   esi,esi
c001d5a1:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d5a8:	75 0f                	jne    c001d5b9 <SoundCard::getSamples32(int, int*)+0x6b>
c001d5aa:	85 c0                	test   eax,eax
c001d5ac:	74 1b                	je     c001d5c9 <SoundCard::getSamples32(int, int*)+0x7b>
c001d5ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d5b0:	83 ec 0c             	sub    esp,0xc
c001d5b3:	53                   	push   ebx
c001d5b4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d5b7:	eb 0d                	jmp    c001d5c6 <SoundCard::getSamples32(int, int*)+0x78>
c001d5b9:	85 c0                	test   eax,eax
c001d5bb:	75 0c                	jne    c001d5c9 <SoundCard::getSamples32(int, int*)+0x7b>
c001d5bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d5bf:	83 ec 0c             	sub    esp,0xc
c001d5c2:	53                   	push   ebx
c001d5c3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d5c6:	83 c4 10             	add    esp,0x10
c001d5c9:	83 c4 0c             	add    esp,0xc
c001d5cc:	89 f0                	mov    eax,esi
c001d5ce:	5b                   	pop    ebx
c001d5cf:	5e                   	pop    esi
c001d5d0:	5f                   	pop    edi
c001d5d1:	5d                   	pop    ebp
c001d5d2:	c3                   	ret    
c001d5d3:	90                   	nop

c001d5d4 <SoundCard::addChannel(SoundPort*)>:
c001d5d4:	83 ec 0c             	sub    esp,0xc
c001d5d7:	31 c0                	xor    eax,eax
c001d5d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d5dd:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d5e5:	74 1b                	je     c001d602 <SoundCard::addChannel(SoundPort*)+0x2e>
c001d5e7:	40                   	inc    eax
c001d5e8:	83 f8 20             	cmp    eax,0x20
c001d5eb:	75 f0                	jne    c001d5dd <SoundCard::addChannel(SoundPort*)+0x9>
c001d5ed:	83 ec 0c             	sub    esp,0xc
c001d5f0:	68 31 5a 02 c0       	push   0xc0025a31
c001d5f5:	e8 ea 25 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001d5fa:	83 c4 10             	add    esp,0x10
c001d5fd:	83 c8 ff             	or     eax,0xffffffff
c001d600:	eb 0b                	jmp    c001d60d <SoundCard::addChannel(SoundPort*)+0x39>
c001d602:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d606:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d60d:	83 c4 0c             	add    esp,0xc
c001d610:	c3                   	ret    
c001d611:	90                   	nop

c001d612 <SoundCard::removeChannel(int)>:
c001d612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d61a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d625:	c3                   	ret    
c001d626:	66 90                	xchg   ax,ax

c001d628 <SoundPort::SoundPort(int, int, int, int)>:
c001d628:	83 ec 0c             	sub    esp,0xc
c001d62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d642:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d646:	89 10                	mov    DWORD PTR [eax],edx
c001d648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d64c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d650:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d657:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d65b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d65e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d663:	75 13                	jne    c001d678 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d669:	8b 00                	mov    eax,DWORD PTR [eax]
c001d66b:	05 a0 0f 00 00       	add    eax,0xfa0
c001d670:	d1 e0                	shl    eax,1
c001d672:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d676:	66 90                	xchg   ax,ax
c001d678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d67c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d680:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d687:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d692:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d695:	c1 e0 02             	shl    eax,0x2
c001d698:	83 ec 0c             	sub    esp,0xc
c001d69b:	50                   	push   eax
c001d69c:	e8 e7 20 ff ff       	call   c000f788 <malloc>
c001d6a1:	83 c4 10             	add    esp,0x10
c001d6a4:	89 c2                	mov    edx,eax
c001d6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6aa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d6ad:	90                   	nop
c001d6ae:	83 c4 0c             	add    esp,0xc
c001d6b1:	c3                   	ret    
c001d6b2:	66 90                	xchg   ax,ax

c001d6b4 <SoundPort::~SoundPort()>:
c001d6b4:	83 ec 0c             	sub    esp,0xc
c001d6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d6be:	85 c0                	test   eax,eax
c001d6c0:	74 1e                	je     c001d6e0 <SoundPort::~SoundPort()+0x2c>
c001d6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6c6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d6c9:	83 ec 0c             	sub    esp,0xc
c001d6cc:	50                   	push   eax
c001d6cd:	e8 c6 20 ff ff       	call   c000f798 <free>
c001d6d2:	83 c4 10             	add    esp,0x10
c001d6d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6d9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d6e0:	90                   	nop
c001d6e1:	83 c4 0c             	add    esp,0xc
c001d6e4:	c3                   	ret    
c001d6e5:	90                   	nop
c001d6e6:	66 90                	xchg   ax,ax

c001d6e8 <SoundPort::unpause()>:
c001d6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6ec:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d6f0:	c3                   	ret    
c001d6f1:	90                   	nop
c001d6f2:	66 90                	xchg   ax,ax

c001d6f4 <SoundPort::pause()>:
c001d6f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6f8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d6fc:	c3                   	ret    
c001d6fd:	90                   	nop
c001d6fe:	66 90                	xchg   ax,ax

c001d700 <SoundPort::getBufferUsed()>:
c001d700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d704:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d707:	c3                   	ret    

c001d708 <SoundPort::getBufferSize()>:
c001d708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d70c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d70f:	c3                   	ret    

c001d710 <SoundPort::buffer8(signed char*, int)>:
c001d710:	55                   	push   ebp
c001d711:	57                   	push   edi
c001d712:	56                   	push   esi
c001d713:	53                   	push   ebx
c001d714:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d718:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d71c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d71f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d722:	74 70                	je     c001d794 <SoundPort::buffer8(signed char*, int)+0x84>
c001d724:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d728:	85 c9                	test   ecx,ecx
c001d72a:	7e 68                	jle    c001d794 <SoundPort::buffer8(signed char*, int)+0x84>
c001d72c:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d730:	8d 48 01             	lea    ecx,[eax+0x1]
c001d733:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d736:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d739:	89 f1                	mov    ecx,esi
c001d73b:	c1 e1 18             	shl    ecx,0x18
c001d73e:	29 f1                	sub    ecx,esi
c001d740:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d743:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d746:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d749:	74 51                	je     c001d79c <SoundPort::buffer8(signed char*, int)+0x8c>
c001d74b:	31 ff                	xor    edi,edi
c001d74d:	eb 25                	jmp    c001d774 <SoundPort::buffer8(signed char*, int)+0x64>
c001d74f:	90                   	nop
c001d750:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001d755:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d758:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d75b:	89 f3                	mov    ebx,esi
c001d75d:	c1 e3 18             	shl    ebx,0x18
c001d760:	29 f3                	sub    ebx,esi
c001d762:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d765:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d768:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d76b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d76e:	74 1c                	je     c001d78c <SoundPort::buffer8(signed char*, int)+0x7c>
c001d770:	89 c7                	mov    edi,eax
c001d772:	66 90                	xchg   ax,ax
c001d774:	8d 47 01             	lea    eax,[edi+0x1]
c001d777:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d77b:	75 d3                	jne    c001d750 <SoundPort::buffer8(signed char*, int)+0x40>
c001d77d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d781:	8d 76 00             	lea    esi,[esi+0x0]
c001d784:	5b                   	pop    ebx
c001d785:	5e                   	pop    esi
c001d786:	5f                   	pop    edi
c001d787:	5d                   	pop    ebp
c001d788:	c3                   	ret    
c001d789:	8d 76 00             	lea    esi,[esi+0x0]
c001d78c:	5b                   	pop    ebx
c001d78d:	8d 47 02             	lea    eax,[edi+0x2]
c001d790:	5e                   	pop    esi
c001d791:	5f                   	pop    edi
c001d792:	5d                   	pop    ebp
c001d793:	c3                   	ret    
c001d794:	5b                   	pop    ebx
c001d795:	31 c0                	xor    eax,eax
c001d797:	5e                   	pop    esi
c001d798:	5f                   	pop    edi
c001d799:	5d                   	pop    ebp
c001d79a:	c3                   	ret    
c001d79b:	90                   	nop
c001d79c:	b8 01 00 00 00       	mov    eax,0x1
c001d7a1:	eb e1                	jmp    c001d784 <SoundPort::buffer8(signed char*, int)+0x74>
c001d7a3:	90                   	nop

c001d7a4 <SoundPort::buffer16(short*, int)>:
c001d7a4:	55                   	push   ebp
c001d7a5:	57                   	push   edi
c001d7a6:	56                   	push   esi
c001d7a7:	53                   	push   ebx
c001d7a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d7ac:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d7b0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d7b3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d7b6:	74 70                	je     c001d828 <SoundPort::buffer16(short*, int)+0x84>
c001d7b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7bc:	85 c9                	test   ecx,ecx
c001d7be:	7e 68                	jle    c001d828 <SoundPort::buffer16(short*, int)+0x84>
c001d7c0:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001d7c4:	8d 48 01             	lea    ecx,[eax+0x1]
c001d7c7:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d7ca:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d7cd:	89 f1                	mov    ecx,esi
c001d7cf:	c1 e1 10             	shl    ecx,0x10
c001d7d2:	29 f1                	sub    ecx,esi
c001d7d4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d7d7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d7da:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d7dd:	74 51                	je     c001d830 <SoundPort::buffer16(short*, int)+0x8c>
c001d7df:	31 ff                	xor    edi,edi
c001d7e1:	eb 25                	jmp    c001d808 <SoundPort::buffer16(short*, int)+0x64>
c001d7e3:	90                   	nop
c001d7e4:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001d7e9:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d7ec:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d7ef:	89 f3                	mov    ebx,esi
c001d7f1:	c1 e3 10             	shl    ebx,0x10
c001d7f4:	29 f3                	sub    ebx,esi
c001d7f6:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d7f9:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d7fc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d7ff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d802:	74 1c                	je     c001d820 <SoundPort::buffer16(short*, int)+0x7c>
c001d804:	89 c7                	mov    edi,eax
c001d806:	66 90                	xchg   ax,ax
c001d808:	8d 47 01             	lea    eax,[edi+0x1]
c001d80b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d80f:	75 d3                	jne    c001d7e4 <SoundPort::buffer16(short*, int)+0x40>
c001d811:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d815:	8d 76 00             	lea    esi,[esi+0x0]
c001d818:	5b                   	pop    ebx
c001d819:	5e                   	pop    esi
c001d81a:	5f                   	pop    edi
c001d81b:	5d                   	pop    ebp
c001d81c:	c3                   	ret    
c001d81d:	8d 76 00             	lea    esi,[esi+0x0]
c001d820:	5b                   	pop    ebx
c001d821:	8d 47 02             	lea    eax,[edi+0x2]
c001d824:	5e                   	pop    esi
c001d825:	5f                   	pop    edi
c001d826:	5d                   	pop    ebp
c001d827:	c3                   	ret    
c001d828:	5b                   	pop    ebx
c001d829:	31 c0                	xor    eax,eax
c001d82b:	5e                   	pop    esi
c001d82c:	5f                   	pop    edi
c001d82d:	5d                   	pop    ebp
c001d82e:	c3                   	ret    
c001d82f:	90                   	nop
c001d830:	b8 01 00 00 00       	mov    eax,0x1
c001d835:	eb e1                	jmp    c001d818 <SoundPort::buffer16(short*, int)+0x74>
c001d837:	90                   	nop

c001d838 <SoundPort::buffer32(int*, int)>:
c001d838:	55                   	push   ebp
c001d839:	57                   	push   edi
c001d83a:	56                   	push   esi
c001d83b:	53                   	push   ebx
c001d83c:	83 ec 04             	sub    esp,0x4
c001d83f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d847:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d84b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d84e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d851:	89 04 24             	mov    DWORD PTR [esp],eax
c001d854:	74 5a                	je     c001d8b0 <SoundPort::buffer32(int*, int)+0x78>
c001d856:	85 c0                	test   eax,eax
c001d858:	7e 56                	jle    c001d8b0 <SoundPort::buffer32(int*, int)+0x78>
c001d85a:	8d 71 01             	lea    esi,[ecx+0x1]
c001d85d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d860:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d863:	8b 37                	mov    esi,DWORD PTR [edi]
c001d865:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d868:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d86b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d86e:	74 4c                	je     c001d8bc <SoundPort::buffer32(int*, int)+0x84>
c001d870:	31 f6                	xor    esi,esi
c001d872:	eb 1c                	jmp    c001d890 <SoundPort::buffer32(int*, int)+0x58>
c001d874:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d877:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d87a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d87d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d880:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d884:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d887:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d88a:	74 18                	je     c001d8a4 <SoundPort::buffer32(int*, int)+0x6c>
c001d88c:	89 de                	mov    esi,ebx
c001d88e:	66 90                	xchg   ax,ax
c001d890:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d893:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001d896:	75 dc                	jne    c001d874 <SoundPort::buffer32(int*, int)+0x3c>
c001d898:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d89b:	90                   	nop
c001d89c:	83 c4 04             	add    esp,0x4
c001d89f:	5b                   	pop    ebx
c001d8a0:	5e                   	pop    esi
c001d8a1:	5f                   	pop    edi
c001d8a2:	5d                   	pop    ebp
c001d8a3:	c3                   	ret    
c001d8a4:	8d 46 02             	lea    eax,[esi+0x2]
c001d8a7:	83 c4 04             	add    esp,0x4
c001d8aa:	5b                   	pop    ebx
c001d8ab:	5e                   	pop    esi
c001d8ac:	5f                   	pop    edi
c001d8ad:	5d                   	pop    ebp
c001d8ae:	c3                   	ret    
c001d8af:	90                   	nop
c001d8b0:	83 c4 04             	add    esp,0x4
c001d8b3:	31 c0                	xor    eax,eax
c001d8b5:	5b                   	pop    ebx
c001d8b6:	5e                   	pop    esi
c001d8b7:	5f                   	pop    edi
c001d8b8:	5d                   	pop    ebp
c001d8b9:	c3                   	ret    
c001d8ba:	66 90                	xchg   ax,ax
c001d8bc:	b8 01 00 00 00       	mov    eax,0x1
c001d8c1:	eb d9                	jmp    c001d89c <SoundPort::buffer32(int*, int)+0x64>
c001d8c3:	90                   	nop

c001d8c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d8c4:	55                   	push   ebp
c001d8c5:	57                   	push   edi
c001d8c6:	56                   	push   esi
c001d8c7:	53                   	push   ebx
c001d8c8:	83 ec 0c             	sub    esp,0xc
c001d8cb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d8cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d8d3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d8d7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d8db:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001d8e1:	39 03                	cmp    DWORD PTR [ebx],eax
c001d8e3:	74 13                	je     c001d8f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001d8e5:	83 ec 0c             	sub    esp,0xc
c001d8e8:	68 84 5a 02 c0       	push   0xc0025a84
c001d8ed:	e8 f2 22 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001d8f2:	83 c4 10             	add    esp,0x10
c001d8f5:	8d 76 00             	lea    esi,[esi+0x0]
c001d8f8:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001d8fe:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d901:	74 11                	je     c001d914 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001d903:	83 ec 0c             	sub    esp,0xc
c001d906:	68 c3 5a 02 c0       	push   0xc0025ac3
c001d90b:	e8 d4 22 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001d910:	83 c4 10             	add    esp,0x10
c001d913:	90                   	nop
c001d914:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001d91a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d91d:	74 11                	je     c001d930 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001d91f:	83 ec 0c             	sub    esp,0xc
c001d922:	68 c3 5a 02 c0       	push   0xc0025ac3
c001d927:	e8 b8 22 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001d92c:	83 c4 10             	add    esp,0x10
c001d92f:	90                   	nop
c001d930:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001d933:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001d937:	85 f6                	test   esi,esi
c001d939:	7e 2d                	jle    c001d968 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d93b:	31 c0                	xor    eax,eax
c001d93d:	8d 76 00             	lea    esi,[esi+0x0]
c001d940:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d943:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001d946:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001d94c:	85 c9                	test   ecx,ecx
c001d94e:	0f 49 d1             	cmovns edx,ecx
c001d951:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001d955:	c1 fa 0f             	sar    edx,0xf
c001d958:	01 d1                	add    ecx,edx
c001d95a:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001d95e:	83 c0 01             	add    eax,0x1
c001d961:	39 f0                	cmp    eax,esi
c001d963:	75 db                	jne    c001d940 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001d965:	8d 76 00             	lea    esi,[esi+0x0]
c001d968:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d96b:	83 ec 04             	sub    esp,0x4
c001d96e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d971:	29 f0                	sub    eax,esi
c001d973:	c1 e0 02             	shl    eax,0x2
c001d976:	50                   	push   eax
c001d977:	8d 04 b2             	lea    eax,[edx+esi*4]
c001d97a:	50                   	push   eax
c001d97b:	52                   	push   edx
c001d97c:	e8 4f 2a fe ff       	call   c00003d0 <memmove>
c001d981:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d984:	29 f0                	sub    eax,esi
c001d986:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d989:	83 c4 1c             	add    esp,0x1c
c001d98c:	89 f0                	mov    eax,esi
c001d98e:	5b                   	pop    ebx
c001d98f:	5e                   	pop    esi
c001d990:	5f                   	pop    edi
c001d991:	5d                   	pop    ebp
c001d992:	c3                   	ret    
c001d993:	90                   	nop

c001d994 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d994:	55                   	push   ebp
c001d995:	57                   	push   edi
c001d996:	56                   	push   esi
c001d997:	53                   	push   ebx
c001d998:	83 ec 0c             	sub    esp,0xc
c001d99b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d99f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d9a3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001d9a7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d9ab:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001d9b1:	39 03                	cmp    DWORD PTR [ebx],eax
c001d9b3:	74 13                	je     c001d9c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001d9b5:	83 ec 0c             	sub    esp,0xc
c001d9b8:	68 a4 5a 02 c0       	push   0xc0025aa4
c001d9bd:	e8 22 22 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001d9c2:	83 c4 10             	add    esp,0x10
c001d9c5:	8d 76 00             	lea    esi,[esi+0x0]
c001d9c8:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001d9ce:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d9d1:	74 11                	je     c001d9e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001d9d3:	83 ec 0c             	sub    esp,0xc
c001d9d6:	68 df 5a 02 c0       	push   0xc0025adf
c001d9db:	e8 04 22 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001d9e0:	83 c4 10             	add    esp,0x10
c001d9e3:	90                   	nop
c001d9e4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001d9ea:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d9ed:	74 11                	je     c001da00 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001d9ef:	83 ec 0c             	sub    esp,0xc
c001d9f2:	68 df 5a 02 c0       	push   0xc0025adf
c001d9f7:	e8 e8 21 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001d9fc:	83 c4 10             	add    esp,0x10
c001d9ff:	90                   	nop
c001da00:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001da03:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001da07:	85 ff                	test   edi,edi
c001da09:	7e 21                	jle    c001da2c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001da0b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001da12:	31 c0                	xor    eax,eax
c001da14:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001da17:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001da1a:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001da1d:	01 d5                	add    ebp,edx
c001da1f:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001da22:	83 c0 04             	add    eax,0x4
c001da25:	39 c1                	cmp    ecx,eax
c001da27:	75 eb                	jne    c001da14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001da29:	8d 76 00             	lea    esi,[esi+0x0]
c001da2c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001da2f:	83 ec 04             	sub    esp,0x4
c001da32:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001da35:	29 f8                	sub    eax,edi
c001da37:	c1 e0 02             	shl    eax,0x2
c001da3a:	50                   	push   eax
c001da3b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001da3e:	50                   	push   eax
c001da3f:	52                   	push   edx
c001da40:	e8 8b 29 fe ff       	call   c00003d0 <memmove>
c001da45:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001da48:	29 f8                	sub    eax,edi
c001da4a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001da4d:	83 c4 1c             	add    esp,0x1c
c001da50:	89 f8                	mov    eax,edi
c001da52:	5b                   	pop    ebx
c001da53:	5e                   	pop    esi
c001da54:	5f                   	pop    edi
c001da55:	5d                   	pop    ebp
c001da56:	c3                   	ret    
c001da57:	90                   	nop

c001da58 <PCI::open(int, int, void*)>:
c001da58:	83 ec 18             	sub    esp,0x18
c001da5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da63:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da69:	8b 10                	mov    edx,DWORD PTR [eax]
c001da6b:	50                   	push   eax
c001da6c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001da6f:	31 c0                	xor    eax,eax
c001da71:	83 c4 1c             	add    esp,0x1c
c001da74:	c3                   	ret    
c001da75:	90                   	nop

c001da76 <PCI::close(int, int, void*)>:
c001da76:	31 c0                	xor    eax,eax
c001da78:	c3                   	ret    
c001da79:	90                   	nop

c001da7a <PCI::PCI()>:
c001da7a:	83 ec 0c             	sub    esp,0xc
c001da7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da81:	83 ec 08             	sub    esp,0x8
c001da84:	68 fb 5a 02 c0       	push   0xc0025afb
c001da89:	50                   	push   eax
c001da8a:	e8 d5 ae fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001da8f:	83 c4 10             	add    esp,0x10
c001da92:	ba 08 5c 02 c0       	mov    edx,0xc0025c08
c001da97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da9b:	89 10                	mov    DWORD PTR [eax],edx
c001da9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daa1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001daab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daaf:	a3 e0 f4 02 c0       	mov    ds:0xc002f4e0,eax
c001dab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dab8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dabe:	0f b6 d0             	movzx  edx,al
c001dac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dac5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001dacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dad0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dad6:	0f b6 d0             	movzx  edx,al
c001dad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dadd:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001dae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dae6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001daec:	8d 50 01             	lea    edx,[eax+0x1]
c001daef:	88 d1                	mov    cl,dl
c001daf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001daf5:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001dafb:	0f b6 d0             	movzx  edx,al
c001dafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db02:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001db06:	83 c9 c0             	or     ecx,0xffffffc0
c001db09:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001db0d:	90                   	nop
c001db0e:	83 c4 0c             	add    esp,0xc
c001db11:	c3                   	ret    

c001db12 <PCI::readBAR8(unsigned int, int)>:
c001db12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db1a:	f6 c2 01             	test   dl,0x1
c001db1d:	74 07                	je     c001db26 <PCI::readBAR8(unsigned int, int)+0x14>
c001db1f:	83 e2 fc             	and    edx,0xfffffffc
c001db22:	01 c2                	add    edx,eax
c001db24:	ec                   	in     al,dx
c001db25:	c3                   	ret    
c001db26:	83 e2 f0             	and    edx,0xfffffff0
c001db29:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001db2c:	c3                   	ret    
c001db2d:	90                   	nop

c001db2e <PCI::readBAR16(unsigned int, int)>:
c001db2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db36:	f6 c2 01             	test   dl,0x1
c001db39:	74 08                	je     c001db43 <PCI::readBAR16(unsigned int, int)+0x15>
c001db3b:	83 e2 fc             	and    edx,0xfffffffc
c001db3e:	01 c2                	add    edx,eax
c001db40:	66 ed                	in     ax,dx
c001db42:	c3                   	ret    
c001db43:	83 e2 f0             	and    edx,0xfffffff0
c001db46:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001db4a:	c3                   	ret    
c001db4b:	90                   	nop

c001db4c <PCI::readBAR32(unsigned int, int)>:
c001db4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db54:	f6 c2 01             	test   dl,0x1
c001db57:	74 07                	je     c001db60 <PCI::readBAR32(unsigned int, int)+0x14>
c001db59:	83 e2 fc             	and    edx,0xfffffffc
c001db5c:	01 c2                	add    edx,eax
c001db5e:	ed                   	in     eax,dx
c001db5f:	c3                   	ret    
c001db60:	83 e2 f0             	and    edx,0xfffffff0
c001db63:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001db66:	c3                   	ret    
c001db67:	90                   	nop

c001db68 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001db68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db74:	f6 c2 01             	test   dl,0x1
c001db77:	74 07                	je     c001db80 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001db79:	83 e2 fc             	and    edx,0xfffffffc
c001db7c:	01 ca                	add    edx,ecx
c001db7e:	ee                   	out    dx,al
c001db7f:	c3                   	ret    
c001db80:	83 e2 f0             	and    edx,0xfffffff0
c001db83:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001db86:	c3                   	ret    
c001db87:	90                   	nop

c001db88 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001db88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db94:	f6 c2 01             	test   dl,0x1
c001db97:	74 08                	je     c001dba1 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001db99:	83 e2 fc             	and    edx,0xfffffffc
c001db9c:	01 ca                	add    edx,ecx
c001db9e:	66 ef                	out    dx,ax
c001dba0:	c3                   	ret    
c001dba1:	83 e2 f0             	and    edx,0xfffffff0
c001dba4:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001dba8:	c3                   	ret    
c001dba9:	90                   	nop

c001dbaa <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001dbaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dbae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbb2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dbb6:	f6 c2 01             	test   dl,0x1
c001dbb9:	74 07                	je     c001dbc2 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001dbbb:	83 e2 fc             	and    edx,0xfffffffc
c001dbbe:	01 ca                	add    edx,ecx
c001dbc0:	ef                   	out    dx,eax
c001dbc1:	c3                   	ret    
c001dbc2:	83 e2 f0             	and    edx,0xfffffff0
c001dbc5:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001dbc8:	c3                   	ret    
c001dbc9:	90                   	nop

c001dbca <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dbca:	55                   	push   ebp
c001dbcb:	57                   	push   edi
c001dbcc:	56                   	push   esi
c001dbcd:	53                   	push   ebx
c001dbce:	83 ec 0c             	sub    esp,0xc
c001dbd1:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001dbd6:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dbda:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dbde:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dbe2:	83 fe 07             	cmp    esi,0x7
c001dbe5:	76 10                	jbe    c001dbf7 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001dbe7:	83 ec 0c             	sub    esp,0xc
c001dbea:	68 03 5b 02 c0       	push   0xc0025b03
c001dbef:	e8 f0 1f ff ff       	call   c000fbe4 <KePanic(char const*)>
c001dbf4:	83 c4 10             	add    esp,0x10
c001dbf7:	0f b6 db             	movzx  ebx,bl
c001dbfa:	83 fb 0f             	cmp    ebx,0xf
c001dbfd:	76 10                	jbe    c001dc0f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001dbff:	83 ec 0c             	sub    esp,0xc
c001dc02:	68 33 5b 02 c0       	push   0xc0025b33
c001dc07:	e8 d8 1f ff ff       	call   c000fbe4 <KePanic(char const*)>
c001dc0c:	83 c4 10             	add    esp,0x10
c001dc0f:	8d 04 36             	lea    eax,[esi+esi*1]
c001dc12:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dc17:	83 c8 f0             	or     eax,0xfffffff0
c001dc1a:	ee                   	out    dx,al
c001dc1b:	ba fa 0c 00 00       	mov    edx,0xcfa
c001dc20:	89 e8                	mov    eax,ebp
c001dc22:	ee                   	out    dx,al
c001dc23:	89 f9                	mov    ecx,edi
c001dc25:	89 d8                	mov    eax,ebx
c001dc27:	0f b6 d9             	movzx  ebx,cl
c001dc2a:	83 c4 0c             	add    esp,0xc
c001dc2d:	c1 e0 08             	shl    eax,0x8
c001dc30:	83 e3 fc             	and    ebx,0xfffffffc
c001dc33:	09 d8                	or     eax,ebx
c001dc35:	5b                   	pop    ebx
c001dc36:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001dc3b:	5e                   	pop    esi
c001dc3c:	5f                   	pop    edi
c001dc3d:	5d                   	pop    ebp
c001dc3e:	c3                   	ret    
c001dc3f:	90                   	nop

c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dc40:	57                   	push   edi
c001dc41:	56                   	push   esi
c001dc42:	53                   	push   ebx
c001dc43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dc47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dc4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dc53:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001dc59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dc5d:	83 ff 01             	cmp    edi,0x1
c001dc60:	75 3f                	jne    c001dca1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001dc62:	89 de                	mov    esi,ebx
c001dc64:	0f b6 c0             	movzx  eax,al
c001dc67:	c1 e0 10             	shl    eax,0x10
c001dc6a:	81 e6 fc 00 00 00    	and    esi,0xfc
c001dc70:	0f b6 c9             	movzx  ecx,cl
c001dc73:	09 f0                	or     eax,esi
c001dc75:	c1 e1 08             	shl    ecx,0x8
c001dc78:	0f b6 d2             	movzx  edx,dl
c001dc7b:	c1 e2 0b             	shl    edx,0xb
c001dc7e:	09 c8                	or     eax,ecx
c001dc80:	09 d0                	or     eax,edx
c001dc82:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dc87:	0d 00 00 00 80       	or     eax,0x80000000
c001dc8c:	ef                   	out    dx,eax
c001dc8d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dc92:	ed                   	in     eax,dx
c001dc93:	83 e3 02             	and    ebx,0x2
c001dc96:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001dc9d:	d3 e8                	shr    eax,cl
c001dc9f:	eb 44                	jmp    c001dce5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001dca1:	83 ff 02             	cmp    edi,0x2
c001dca4:	75 2d                	jne    c001dcd3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001dca6:	83 ec 0c             	sub    esp,0xc
c001dca9:	0f b6 fb             	movzx  edi,bl
c001dcac:	57                   	push   edi
c001dcad:	0f b6 c9             	movzx  ecx,cl
c001dcb0:	51                   	push   ecx
c001dcb1:	0f b6 d2             	movzx  edx,dl
c001dcb4:	52                   	push   edx
c001dcb5:	0f b6 c0             	movzx  eax,al
c001dcb8:	50                   	push   eax
c001dcb9:	56                   	push   esi
c001dcba:	e8 0b ff ff ff       	call   c001dbca <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dcbf:	89 c2                	mov    edx,eax
c001dcc1:	ed                   	in     eax,dx
c001dcc2:	83 e3 02             	and    ebx,0x2
c001dcc5:	83 c4 20             	add    esp,0x20
c001dcc8:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001dccf:	d3 e8                	shr    eax,cl
c001dcd1:	eb 12                	jmp    c001dce5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001dcd3:	83 ec 0c             	sub    esp,0xc
c001dcd6:	68 63 5b 02 c0       	push   0xc0025b63
c001dcdb:	e8 04 1f ff ff       	call   c000fbe4 <KePanic(char const*)>
c001dce0:	83 c4 10             	add    esp,0x10
c001dce3:	31 c0                	xor    eax,eax
c001dce5:	5b                   	pop    ebx
c001dce6:	5e                   	pop    esi
c001dce7:	5f                   	pop    edi
c001dce8:	c3                   	ret    
c001dce9:	90                   	nop

c001dcea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001dcea:	83 ec 18             	sub    esp,0x18
c001dced:	6a 00                	push   0x0
c001dcef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcf4:	50                   	push   eax
c001dcf5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcfa:	50                   	push   eax
c001dcfb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd00:	50                   	push   eax
c001dd01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd05:	e8 36 ff ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd0a:	83 c4 2c             	add    esp,0x2c
c001dd0d:	c3                   	ret    

c001dd0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001dd0e:	83 ec 18             	sub    esp,0x18
c001dd11:	6a 0e                	push   0xe
c001dd13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd18:	50                   	push   eax
c001dd19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd1e:	50                   	push   eax
c001dd1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd24:	50                   	push   eax
c001dd25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd29:	e8 12 ff ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd2e:	83 c4 2c             	add    esp,0x2c
c001dd31:	0f b6 c0             	movzx  eax,al
c001dd34:	c3                   	ret    
c001dd35:	90                   	nop

c001dd36 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001dd36:	55                   	push   ebp
c001dd37:	57                   	push   edi
c001dd38:	56                   	push   esi
c001dd39:	53                   	push   ebx
c001dd3a:	83 ec 18             	sub    esp,0x18
c001dd3d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001dd42:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001dd47:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001dd4c:	6a 0a                	push   0xa
c001dd4e:	56                   	push   esi
c001dd4f:	55                   	push   ebp
c001dd50:	57                   	push   edi
c001dd51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd55:	e8 e6 fe ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd5a:	83 c4 14             	add    esp,0x14
c001dd5d:	6a 0a                	push   0xa
c001dd5f:	56                   	push   esi
c001dd60:	55                   	push   ebp
c001dd61:	57                   	push   edi
c001dd62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd66:	89 c3                	mov    ebx,eax
c001dd68:	0f b6 db             	movzx  ebx,bl
c001dd6b:	e8 d0 fe ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd70:	83 c4 2c             	add    esp,0x2c
c001dd73:	25 00 ff 00 00       	and    eax,0xff00
c001dd78:	09 d8                	or     eax,ebx
c001dd7a:	5b                   	pop    ebx
c001dd7b:	5e                   	pop    esi
c001dd7c:	5f                   	pop    edi
c001dd7d:	5d                   	pop    ebp
c001dd7e:	c3                   	ret    
c001dd7f:	90                   	nop

c001dd80 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001dd80:	83 ec 18             	sub    esp,0x18
c001dd83:	6a 08                	push   0x8
c001dd85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd8a:	50                   	push   eax
c001dd8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd90:	50                   	push   eax
c001dd91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd96:	50                   	push   eax
c001dd97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd9b:	e8 a0 fe ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dda0:	83 c4 2c             	add    esp,0x2c
c001dda3:	0f b6 c4             	movzx  eax,ah
c001dda6:	c3                   	ret    
c001dda7:	90                   	nop

c001dda8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001dda8:	83 ec 18             	sub    esp,0x18
c001ddab:	6a 08                	push   0x8
c001ddad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ddb2:	50                   	push   eax
c001ddb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ddb8:	50                   	push   eax
c001ddb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ddbe:	50                   	push   eax
c001ddbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ddc3:	e8 78 fe ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddc8:	83 c4 2c             	add    esp,0x2c
c001ddcb:	c3                   	ret    

c001ddcc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ddcc:	83 ec 18             	sub    esp,0x18
c001ddcf:	6a 3c                	push   0x3c
c001ddd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ddd6:	50                   	push   eax
c001ddd7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dddc:	50                   	push   eax
c001dddd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dde2:	50                   	push   eax
c001dde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dde7:	e8 54 fe ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddec:	83 c4 2c             	add    esp,0x2c
c001ddef:	c3                   	ret    

c001ddf0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ddf0:	83 ec 18             	sub    esp,0x18
c001ddf3:	6a 18                	push   0x18
c001ddf5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ddfa:	50                   	push   eax
c001ddfb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de00:	50                   	push   eax
c001de01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de06:	50                   	push   eax
c001de07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de0b:	e8 30 fe ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de10:	83 c4 2c             	add    esp,0x2c
c001de13:	0f b6 c4             	movzx  eax,ah
c001de16:	c3                   	ret    
c001de17:	90                   	nop

c001de18 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001de18:	55                   	push   ebp
c001de19:	57                   	push   edi
c001de1a:	56                   	push   esi
c001de1b:	53                   	push   ebx
c001de1c:	83 ec 28             	sub    esp,0x28
c001de1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001de23:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001de28:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001de2d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001de32:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001de39:	8d 43 12             	lea    eax,[ebx+0x12]
c001de3c:	83 c3 10             	add    ebx,0x10
c001de3f:	0f b6 c0             	movzx  eax,al
c001de42:	0f b6 db             	movzx  ebx,bl
c001de45:	50                   	push   eax
c001de46:	51                   	push   ecx
c001de47:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001de4b:	57                   	push   edi
c001de4c:	55                   	push   ebp
c001de4d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001de51:	e8 ea fd ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de56:	83 c4 14             	add    esp,0x14
c001de59:	53                   	push   ebx
c001de5a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001de5e:	51                   	push   ecx
c001de5f:	89 c6                	mov    esi,eax
c001de61:	57                   	push   edi
c001de62:	55                   	push   ebp
c001de63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001de67:	c1 e6 10             	shl    esi,0x10
c001de6a:	e8 d1 fd ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de6f:	83 c4 3c             	add    esp,0x3c
c001de72:	5b                   	pop    ebx
c001de73:	0f b7 c0             	movzx  eax,ax
c001de76:	09 f0                	or     eax,esi
c001de78:	5e                   	pop    esi
c001de79:	5f                   	pop    edi
c001de7a:	5d                   	pop    ebp
c001de7b:	c3                   	ret    

c001de7c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001de7c:	55                   	push   ebp
c001de7d:	57                   	push   edi
c001de7e:	56                   	push   esi
c001de7f:	53                   	push   ebx
c001de80:	83 ec 0c             	sub    esp,0xc
c001de83:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001de87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de8b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de8f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001de93:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001de99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001de9d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dea1:	83 f9 01             	cmp    ecx,0x1
c001dea4:	75 5d                	jne    c001df03 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001dea6:	0f b6 c8             	movzx  ecx,al
c001dea9:	89 f0                	mov    eax,esi
c001deab:	25 fc 00 00 00       	and    eax,0xfc
c001deb0:	0f b6 d2             	movzx  edx,dl
c001deb3:	c1 e1 10             	shl    ecx,0x10
c001deb6:	c1 e2 0b             	shl    edx,0xb
c001deb9:	09 c1                	or     ecx,eax
c001debb:	89 f8                	mov    eax,edi
c001debd:	0f b6 f8             	movzx  edi,al
c001dec0:	c1 e7 08             	shl    edi,0x8
c001dec3:	09 f9                	or     ecx,edi
c001dec5:	09 d1                	or     ecx,edx
c001dec7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001decc:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001ded2:	89 c8                	mov    eax,ecx
c001ded4:	ef                   	out    dx,eax
c001ded5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001deda:	ed                   	in     eax,dx
c001dedb:	83 e6 02             	and    esi,0x2
c001dede:	0f b7 db             	movzx  ebx,bx
c001dee1:	74 0a                	je     c001deed <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001dee3:	c1 e3 10             	shl    ebx,0x10
c001dee6:	0f b7 d0             	movzx  edx,ax
c001dee9:	09 d3                	or     ebx,edx
c001deeb:	eb 05                	jmp    c001def2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001deed:	66 31 c0             	xor    ax,ax
c001def0:	09 c3                	or     ebx,eax
c001def2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001def7:	89 c8                	mov    eax,ecx
c001def9:	ef                   	out    dx,eax
c001defa:	ba fc 0c 00 00       	mov    edx,0xcfc
c001deff:	89 d8                	mov    eax,ebx
c001df01:	eb 41                	jmp    c001df44 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001df03:	83 f9 02             	cmp    ecx,0x2
c001df06:	75 45                	jne    c001df4d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001df08:	89 f1                	mov    ecx,esi
c001df0a:	83 ec 0c             	sub    esp,0xc
c001df0d:	0f b6 f1             	movzx  esi,cl
c001df10:	89 f9                	mov    ecx,edi
c001df12:	56                   	push   esi
c001df13:	0f b6 f9             	movzx  edi,cl
c001df16:	57                   	push   edi
c001df17:	0f b6 d2             	movzx  edx,dl
c001df1a:	52                   	push   edx
c001df1b:	0f b6 c0             	movzx  eax,al
c001df1e:	50                   	push   eax
c001df1f:	55                   	push   ebp
c001df20:	e8 a5 fc ff ff       	call   c001dbca <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df25:	89 c2                	mov    edx,eax
c001df27:	ed                   	in     eax,dx
c001df28:	83 c4 20             	add    esp,0x20
c001df2b:	f6 c2 02             	test   dl,0x2
c001df2e:	0f b7 db             	movzx  ebx,bx
c001df31:	74 0c                	je     c001df3f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001df33:	0f b7 c8             	movzx  ecx,ax
c001df36:	89 d8                	mov    eax,ebx
c001df38:	c1 e0 10             	shl    eax,0x10
c001df3b:	09 c8                	or     eax,ecx
c001df3d:	eb 05                	jmp    c001df44 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001df3f:	66 31 c0             	xor    ax,ax
c001df42:	09 d8                	or     eax,ebx
c001df44:	ef                   	out    dx,eax
c001df45:	83 c4 0c             	add    esp,0xc
c001df48:	5b                   	pop    ebx
c001df49:	5e                   	pop    esi
c001df4a:	5f                   	pop    edi
c001df4b:	5d                   	pop    ebp
c001df4c:	c3                   	ret    
c001df4d:	c7 44 24 20 63 5b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025b63
c001df55:	83 c4 0c             	add    esp,0xc
c001df58:	5b                   	pop    ebx
c001df59:	5e                   	pop    esi
c001df5a:	5f                   	pop    edi
c001df5b:	5d                   	pop    ebp
c001df5c:	e9 83 1c ff ff       	jmp    c000fbe4 <KePanic(char const*)>
c001df61:	90                   	nop

c001df62 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001df62:	55                   	push   ebp
c001df63:	57                   	push   edi
c001df64:	56                   	push   esi
c001df65:	53                   	push   ebx
c001df66:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001df6c:	80 3d ec f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f4ec,0x0
c001df73:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001df7a:	0f 85 bd 00 00 00    	jne    c001e03d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001df80:	83 ec 0c             	sub    esp,0xc
c001df83:	68 14 01 00 00       	push   0x114
c001df88:	e8 fb 17 ff ff       	call   c000f788 <malloc>
c001df8d:	83 c4 0c             	add    esp,0xc
c001df90:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c001df96:	68 69 5b 02 c0       	push   0xc0025b69
c001df9b:	50                   	push   eax
c001df9c:	89 c3                	mov    ebx,eax
c001df9e:	e8 e5 a1 fe ff       	call   c0008188 <File::File(char const*, Process*)>
c001dfa3:	83 c4 10             	add    esp,0x10
c001dfa6:	85 db                	test   ebx,ebx
c001dfa8:	0f 84 6b 02 00 00    	je     c001e219 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001dfae:	57                   	push   edi
c001dfaf:	57                   	push   edi
c001dfb0:	6a 01                	push   0x1
c001dfb2:	53                   	push   ebx
c001dfb3:	e8 ee a1 fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001dfb8:	83 c4 10             	add    esp,0x10
c001dfbb:	85 c0                	test   eax,eax
c001dfbd:	0f 85 56 02 00 00    	jne    c001e219 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001dfc3:	52                   	push   edx
c001dfc4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001dfc8:	50                   	push   eax
c001dfc9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001dfcd:	50                   	push   eax
c001dfce:	53                   	push   ebx
c001dfcf:	e8 d4 a4 fe ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001dfd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dfd8:	40                   	inc    eax
c001dfd9:	89 04 24             	mov    DWORD PTR [esp],eax
c001dfdc:	e8 a7 17 ff ff       	call   c000f788 <malloc>
c001dfe1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001dfe5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001dfe9:	59                   	pop    ecx
c001dfea:	a3 e8 f4 02 c0       	mov    ds:0xc002f4e8,eax
c001dfef:	8b 13                	mov    edx,DWORD PTR [ebx]
c001dff1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001dff5:	51                   	push   ecx
c001dff6:	50                   	push   eax
c001dff7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001dffb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001dfff:	53                   	push   ebx
c001e000:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e003:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e007:	83 c4 20             	add    esp,0x20
c001e00a:	89 c8                	mov    eax,ecx
c001e00c:	99                   	cdq    
c001e00d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e011:	0f 85 02 02 00 00    	jne    c001e219 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e017:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e01b:	0f 85 f8 01 00 00    	jne    c001e219 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e021:	83 ec 0c             	sub    esp,0xc
c001e024:	53                   	push   ebx
c001e025:	e8 da a1 fe ff       	call   c0008204 <File::close()>
c001e02a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e02e:	83 c4 10             	add    esp,0x10
c001e031:	c6 05 ec f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4ec,0x1
c001e038:	a3 e4 f4 02 c0       	mov    ds:0xc002f4e4,eax
c001e03d:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e045:	31 c9                	xor    ecx,ecx
c001e047:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001e04e:	8b 2d e4 f4 02 c0    	mov    ebp,DWORD PTR ds:0xc002f4e4
c001e054:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e05b:	8b 15 e8 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4e8
c001e061:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e066:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e06e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e073:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e07b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e07f:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e08b:	39 cd                	cmp    ebp,ecx
c001e08d:	0f 8e 86 01 00 00    	jle    c001e219 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e093:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001e096:	d4 40                	aam    0x40
c001e098:	d5 39                	aad    0x39
c001e09a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e09e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001e0a2:	d4 40                	aam    0x40
c001e0a4:	d5 39                	aad    0x39
c001e0a6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e0aa:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001e0ae:	d4 40                	aam    0x40
c001e0b0:	d5 39                	aad    0x39
c001e0b2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e0b6:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001e0ba:	d4 40                	aam    0x40
c001e0bc:	d5 39                	aad    0x39
c001e0be:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e0c2:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001e0c6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e0ca:	3c 56                	cmp    al,0x56
c001e0cc:	74 47                	je     c001e115 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001e0ce:	d4 40                	aam    0x40
c001e0d0:	d5 39                	aad    0x39
c001e0d2:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e0d5:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001e0d9:	0f b6 db             	movzx  ebx,bl
c001e0dc:	c1 e3 04             	shl    ebx,0x4
c001e0df:	d4 40                	aam    0x40
c001e0e1:	d5 39                	aad    0x39
c001e0e3:	83 e8 30             	sub    eax,0x30
c001e0e6:	0f b6 c0             	movzx  eax,al
c001e0e9:	09 c3                	or     ebx,eax
c001e0eb:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001e0ef:	c1 e3 04             	shl    ebx,0x4
c001e0f2:	d4 40                	aam    0x40
c001e0f4:	d5 39                	aad    0x39
c001e0f6:	83 e8 30             	sub    eax,0x30
c001e0f9:	0f b6 c0             	movzx  eax,al
c001e0fc:	09 c3                	or     ebx,eax
c001e0fe:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001e102:	c1 e3 04             	shl    ebx,0x4
c001e105:	d4 40                	aam    0x40
c001e107:	d5 39                	aad    0x39
c001e109:	83 e8 30             	sub    eax,0x30
c001e10c:	0f b6 c0             	movzx  eax,al
c001e10f:	09 c3                	or     ebx,eax
c001e111:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e115:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001e119:	80 fb 58             	cmp    bl,0x58
c001e11c:	74 49                	je     c001e167 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001e11e:	88 d8                	mov    al,bl
c001e120:	d4 40                	aam    0x40
c001e122:	d5 39                	aad    0x39
c001e124:	83 e8 30             	sub    eax,0x30
c001e127:	0f b6 f8             	movzx  edi,al
c001e12a:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001e12e:	c1 e7 04             	shl    edi,0x4
c001e131:	d4 40                	aam    0x40
c001e133:	d5 39                	aad    0x39
c001e135:	83 e8 30             	sub    eax,0x30
c001e138:	0f b6 c0             	movzx  eax,al
c001e13b:	09 c7                	or     edi,eax
c001e13d:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001e141:	c1 e7 04             	shl    edi,0x4
c001e144:	d4 40                	aam    0x40
c001e146:	d5 39                	aad    0x39
c001e148:	83 e8 30             	sub    eax,0x30
c001e14b:	0f b6 c0             	movzx  eax,al
c001e14e:	09 c7                	or     edi,eax
c001e150:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001e154:	c1 e7 04             	shl    edi,0x4
c001e157:	d4 40                	aam    0x40
c001e159:	d5 39                	aad    0x39
c001e15b:	83 e8 30             	sub    eax,0x30
c001e15e:	0f b6 c0             	movzx  eax,al
c001e161:	09 c7                	or     edi,eax
c001e163:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001e167:	8d 41 10             	lea    eax,[ecx+0x10]
c001e16a:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e16e:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001e172:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e176:	83 f9 0a             	cmp    ecx,0xa
c001e179:	74 07                	je     c001e182 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001e17b:	47                   	inc    edi
c001e17c:	39 c5                	cmp    ebp,eax
c001e17e:	75 16                	jne    c001e196 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001e180:	89 e8                	mov    eax,ebp
c001e182:	83 f9 0a             	cmp    ecx,0xa
c001e185:	0f 94 c1             	sete   cl
c001e188:	0f b6 c9             	movzx  ecx,cl
c001e18b:	01 c1                	add    ecx,eax
c001e18d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e192:	75 0f                	jne    c001e1a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001e194:	eb 1c                	jmp    c001e1b2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001e196:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e199:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001e19d:	40                   	inc    eax
c001e19e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001e1a1:	eb cb                	jmp    c001e16e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001e1a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e1a7:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e1ac:	0f 85 d9 fe ff ff    	jne    c001e08b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e1b2:	80 fb 58             	cmp    bl,0x58
c001e1b5:	74 10                	je     c001e1c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001e1b7:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e1bc:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001e1c1:	0f 85 c4 fe ff ff    	jne    c001e08b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e1c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e1cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e1cf:	83 e8 30             	sub    eax,0x30
c001e1d2:	c1 e0 04             	shl    eax,0x4
c001e1d5:	83 eb 30             	sub    ebx,0x30
c001e1d8:	09 d8                	or     eax,ebx
c001e1da:	0f b6 c0             	movzx  eax,al
c001e1dd:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e1e1:	0f 85 a4 fe ff ff    	jne    c001e08b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e1e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1eb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001e1ef:	83 e8 30             	sub    eax,0x30
c001e1f2:	c1 e0 04             	shl    eax,0x4
c001e1f5:	83 eb 30             	sub    ebx,0x30
c001e1f8:	09 d8                	or     eax,ebx
c001e1fa:	0f b6 c0             	movzx  eax,al
c001e1fd:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e201:	0f 85 84 fe ff ff    	jne    c001e08b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e207:	50                   	push   eax
c001e208:	50                   	push   eax
c001e209:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e20d:	50                   	push   eax
c001e20e:	56                   	push   esi
c001e20f:	e8 3c 24 fe ff       	call   c0000650 <strcpy>
c001e214:	83 c4 10             	add    esp,0x10
c001e217:	eb 05                	jmp    c001e21e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001e219:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001e21c:	31 f6                	xor    esi,esi
c001e21e:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e224:	89 f0                	mov    eax,esi
c001e226:	5b                   	pop    ebx
c001e227:	5e                   	pop    esi
c001e228:	5f                   	pop    edi
c001e229:	5d                   	pop    ebp
c001e22a:	c3                   	ret    
c001e22b:	90                   	nop

c001e22c <PCI::checkBus(unsigned char)>:
c001e22c:	56                   	push   esi
c001e22d:	53                   	push   ebx
c001e22e:	31 db                	xor    ebx,ebx
c001e230:	51                   	push   ecx
c001e231:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e236:	52                   	push   edx
c001e237:	53                   	push   ebx
c001e238:	43                   	inc    ebx
c001e239:	56                   	push   esi
c001e23a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e23e:	e8 6f 03 00 00       	call   c001e5b2 <PCI::checkDevice(unsigned char, unsigned char)>
c001e243:	83 c4 10             	add    esp,0x10
c001e246:	83 fb 20             	cmp    ebx,0x20
c001e249:	75 eb                	jne    c001e236 <PCI::checkBus(unsigned char)+0xa>
c001e24b:	58                   	pop    eax
c001e24c:	5b                   	pop    ebx
c001e24d:	5e                   	pop    esi
c001e24e:	c3                   	ret    
c001e24f:	90                   	nop

c001e250 <PCI::foundDevice(PCIDeviceInfo)>:
c001e250:	55                   	push   ebp
c001e251:	57                   	push   edi
c001e252:	56                   	push   esi
c001e253:	53                   	push   ebx
c001e254:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e25a:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e262:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001e269:	3d ff ff 00 00       	cmp    eax,0xffff
c001e26e:	0f 84 b6 01 00 00    	je     c001e42a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e274:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001e27c:	66 81 fd 06 04       	cmp    bp,0x406
c001e281:	75 32                	jne    c001e2b5 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e283:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e28b:	50                   	push   eax
c001e28c:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e294:	50                   	push   eax
c001e295:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e29d:	50                   	push   eax
c001e29e:	53                   	push   ebx
c001e29f:	e8 4c fb ff ff       	call   c001ddf0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e2a4:	59                   	pop    ecx
c001e2a5:	5e                   	pop    esi
c001e2a6:	0f b6 c0             	movzx  eax,al
c001e2a9:	50                   	push   eax
c001e2aa:	53                   	push   ebx
c001e2ab:	e8 7c ff ff ff       	call   c001e22c <PCI::checkBus(unsigned char)>
c001e2b0:	e9 15 01 00 00       	jmp    c001e3ca <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001e2b5:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001e2bd:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e2c3:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001e2ca:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e2d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e2d5:	85 c0                	test   eax,eax
c001e2d7:	74 34                	je     c001e30d <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001e2d9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e2dc:	85 d2                	test   edx,edx
c001e2de:	74 29                	je     c001e309 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e2e0:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e2e6:	31 cf                	xor    edi,ecx
c001e2e8:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e2ee:	75 19                	jne    c001e309 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e2f0:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e2f6:	75 11                	jne    c001e309 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e2f8:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e2ff:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001e303:	0f 84 21 01 00 00    	je     c001e42a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e309:	8b 00                	mov    eax,DWORD PTR [eax]
c001e30b:	eb c8                	jmp    c001e2d5 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e30d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e311:	be 9c 5b 02 c0       	mov    esi,0xc0025b9c
c001e316:	b9 07 00 00 00       	mov    ecx,0x7
c001e31b:	fc                   	cld    
c001e31c:	31 d2                	xor    edx,edx
c001e31e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e320:	b9 12 00 00 00       	mov    ecx,0x12
c001e325:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e32c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e330:	83 ec 0c             	sub    esp,0xc
c001e333:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e335:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e33d:	b9 0a 00 00 00       	mov    ecx,0xa
c001e342:	f7 f1                	div    ecx
c001e344:	83 c0 30             	add    eax,0x30
c001e347:	83 c2 30             	add    edx,0x30
c001e34a:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e34e:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e356:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e35a:	31 d2                	xor    edx,edx
c001e35c:	f7 f1                	div    ecx
c001e35e:	83 c0 30             	add    eax,0x30
c001e361:	83 c2 30             	add    edx,0x30
c001e364:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e368:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e36c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e370:	50                   	push   eax
c001e371:	e8 9b ee fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001e376:	83 c4 10             	add    esp,0x10
c001e379:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001e37f:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e386:	75 47                	jne    c001e3cf <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001e388:	83 ec 0c             	sub    esp,0xc
c001e38b:	68 64 01 00 00       	push   0x164
c001e390:	e8 f3 13 ff ff       	call   c000f788 <malloc>
c001e395:	89 04 24             	mov    DWORD PTR [esp],eax
c001e398:	89 c5                	mov    ebp,eax
c001e39a:	e8 37 11 00 00       	call   c001f4d6 <SATABus::SATABus()>
c001e39f:	58                   	pop    eax
c001e3a0:	5a                   	pop    edx
c001e3a1:	55                   	push   ebp
c001e3a2:	53                   	push   ebx
c001e3a3:	e8 4e b6 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001e3a8:	83 ec 1c             	sub    esp,0x1c
c001e3ab:	b9 09 00 00 00       	mov    ecx,0x9
c001e3b0:	89 e7                	mov    edi,esp
c001e3b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e3b4:	55                   	push   ebp
c001e3b5:	e8 82 b5 fe ff       	call   c000993c <Device::preOpenPCI(PCIDeviceInfo)>
c001e3ba:	83 c4 30             	add    esp,0x30
c001e3bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e3c0:	6a 00                	push   0x0
c001e3c2:	6a 00                	push   0x0
c001e3c4:	6a 00                	push   0x0
c001e3c6:	55                   	push   ebp
c001e3c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e3ca:	83 c4 10             	add    esp,0x10
c001e3cd:	eb 5b                	jmp    c001e42a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e3cf:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001e3d5:	75 19                	jne    c001e3f0 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001e3d7:	83 ec 0c             	sub    esp,0xc
c001e3da:	68 70 02 00 00       	push   0x270
c001e3df:	e8 a4 13 ff ff       	call   c000f788 <malloc>
c001e3e4:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3e7:	89 c5                	mov    ebp,eax
c001e3e9:	e8 94 02 00 00       	call   c001e682 <IDE::IDE()>
c001e3ee:	eb af                	jmp    c001e39f <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001e3f0:	83 ec 0c             	sub    esp,0xc
c001e3f3:	68 58 01 00 00       	push   0x158
c001e3f8:	e8 8b 13 ff ff       	call   c000f788 <malloc>
c001e3fd:	89 c5                	mov    ebp,eax
c001e3ff:	58                   	pop    eax
c001e400:	5a                   	pop    edx
c001e401:	68 82 5b 02 c0       	push   0xc0025b82
c001e406:	55                   	push   ebp
c001e407:	e8 9e b8 fe ff       	call   c0009caa <DriverlessDevice::DriverlessDevice(char const*)>
c001e40c:	59                   	pop    ecx
c001e40d:	5f                   	pop    edi
c001e40e:	55                   	push   ebp
c001e40f:	53                   	push   ebx
c001e410:	e8 e1 b5 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001e415:	83 ec 1c             	sub    esp,0x1c
c001e418:	b9 09 00 00 00       	mov    ecx,0x9
c001e41d:	89 e7                	mov    edi,esp
c001e41f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e421:	55                   	push   ebp
c001e422:	e8 15 b5 fe ff       	call   c000993c <Device::preOpenPCI(PCIDeviceInfo)>
c001e427:	83 c4 30             	add    esp,0x30
c001e42a:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e430:	5b                   	pop    ebx
c001e431:	5e                   	pop    esi
c001e432:	5f                   	pop    edi
c001e433:	5d                   	pop    ebp
c001e434:	c3                   	ret    
c001e435:	90                   	nop

c001e436 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e436:	55                   	push   ebp
c001e437:	57                   	push   edi
c001e438:	56                   	push   esi
c001e439:	53                   	push   ebx
c001e43a:	83 ec 68             	sub    esp,0x68
c001e43d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e444:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e448:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e44c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e453:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e458:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e45c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e463:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e468:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e46c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e471:	6a 0c                	push   0xc
c001e473:	57                   	push   edi
c001e474:	53                   	push   ebx
c001e475:	56                   	push   esi
c001e476:	55                   	push   ebp
c001e477:	e8 c4 f7 ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e47c:	83 c4 20             	add    esp,0x20
c001e47f:	57                   	push   edi
c001e480:	53                   	push   ebx
c001e481:	56                   	push   esi
c001e482:	55                   	push   ebp
c001e483:	e8 ae f8 ff ff       	call   c001dd36 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e488:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e48d:	57                   	push   edi
c001e48e:	53                   	push   ebx
c001e48f:	56                   	push   esi
c001e490:	55                   	push   ebp
c001e491:	e8 36 f9 ff ff       	call   c001ddcc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e496:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e49a:	83 c4 14             	add    esp,0x14
c001e49d:	6a 3c                	push   0x3c
c001e49f:	57                   	push   edi
c001e4a0:	53                   	push   ebx
c001e4a1:	56                   	push   esi
c001e4a2:	55                   	push   ebp
c001e4a3:	e8 98 f7 ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e4a8:	0f b6 c4             	movzx  eax,ah
c001e4ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e4af:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e4b3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e4b7:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001e4bc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001e4c2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e4c8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e4cc:	83 c4 20             	add    esp,0x20
c001e4cf:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e4d4:	74 30                	je     c001e506 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e4d6:	31 c0                	xor    eax,eax
c001e4d8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e4dc:	7e 28                	jle    c001e506 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e4de:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e4e6:	39 cb                	cmp    ebx,ecx
c001e4e8:	75 19                	jne    c001e503 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e4ea:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e4f2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e4f6:	75 0b                	jne    c001e503 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e4f8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e4ff:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e503:	40                   	inc    eax
c001e504:	eb d2                	jmp    c001e4d8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e506:	31 d2                	xor    edx,edx
c001e508:	83 ec 0c             	sub    esp,0xc
c001e50b:	57                   	push   edi
c001e50c:	53                   	push   ebx
c001e50d:	56                   	push   esi
c001e50e:	52                   	push   edx
c001e50f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e513:	55                   	push   ebp
c001e514:	e8 ff f8 ff ff       	call   c001de18 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e519:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e51d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e521:	42                   	inc    edx
c001e522:	83 c4 20             	add    esp,0x20
c001e525:	83 fa 06             	cmp    edx,0x6
c001e528:	75 de                	jne    c001e508 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e52a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e52e:	83 ec 0c             	sub    esp,0xc
c001e531:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e535:	c1 e2 08             	shl    edx,0x8
c001e538:	0f b6 c4             	movzx  eax,ah
c001e53b:	09 d0                	or     eax,edx
c001e53d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e542:	6a 02                	push   0x2
c001e544:	57                   	push   edi
c001e545:	53                   	push   ebx
c001e546:	56                   	push   esi
c001e547:	55                   	push   ebp
c001e548:	e8 f3 f6 ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e54d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e552:	83 c4 20             	add    esp,0x20
c001e555:	57                   	push   edi
c001e556:	53                   	push   ebx
c001e557:	56                   	push   esi
c001e558:	55                   	push   ebp
c001e559:	e8 22 f8 ff ff       	call   c001dd80 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e55e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e562:	57                   	push   edi
c001e563:	53                   	push   ebx
c001e564:	56                   	push   esi
c001e565:	55                   	push   ebp
c001e566:	e8 7f f7 ff ff       	call   c001dcea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e56b:	b9 09 00 00 00       	mov    ecx,0x9
c001e570:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e575:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e579:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e57d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e581:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e585:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e589:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e58d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e591:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e595:	83 ec 0c             	sub    esp,0xc
c001e598:	fc                   	cld    
c001e599:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e59d:	89 e7                	mov    edi,esp
c001e59f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e5a1:	55                   	push   ebp
c001e5a2:	e8 a9 fc ff ff       	call   c001e250 <PCI::foundDevice(PCIDeviceInfo)>
c001e5a7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e5ad:	5b                   	pop    ebx
c001e5ae:	5e                   	pop    esi
c001e5af:	5f                   	pop    edi
c001e5b0:	5d                   	pop    ebp
c001e5b1:	c3                   	ret    

c001e5b2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e5b2:	55                   	push   ebp
c001e5b3:	57                   	push   edi
c001e5b4:	56                   	push   esi
c001e5b5:	53                   	push   ebx
c001e5b6:	83 ec 0c             	sub    esp,0xc
c001e5b9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e5be:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e5c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e5c7:	6a 00                	push   0x0
c001e5c9:	56                   	push   esi
c001e5ca:	57                   	push   edi
c001e5cb:	55                   	push   ebp
c001e5cc:	e8 19 f7 ff ff       	call   c001dcea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e5d1:	6a 00                	push   0x0
c001e5d3:	56                   	push   esi
c001e5d4:	57                   	push   edi
c001e5d5:	55                   	push   ebp
c001e5d6:	e8 5b fe ff ff       	call   c001e436 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e5db:	83 c4 20             	add    esp,0x20
c001e5de:	6a 00                	push   0x0
c001e5e0:	56                   	push   esi
c001e5e1:	57                   	push   edi
c001e5e2:	55                   	push   ebp
c001e5e3:	e8 26 f7 ff ff       	call   c001dd0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e5e8:	83 c4 10             	add    esp,0x10
c001e5eb:	a8 80                	test   al,0x80
c001e5ed:	74 2d                	je     c001e61c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e5ef:	bb 01 00 00 00       	mov    ebx,0x1
c001e5f4:	53                   	push   ebx
c001e5f5:	56                   	push   esi
c001e5f6:	57                   	push   edi
c001e5f7:	55                   	push   ebp
c001e5f8:	e8 ed f6 ff ff       	call   c001dcea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e5fd:	83 c4 10             	add    esp,0x10
c001e600:	0f b7 c0             	movzx  eax,ax
c001e603:	3d ff ff 00 00       	cmp    eax,0xffff
c001e608:	74 0c                	je     c001e616 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e60a:	53                   	push   ebx
c001e60b:	56                   	push   esi
c001e60c:	57                   	push   edi
c001e60d:	55                   	push   ebp
c001e60e:	e8 23 fe ff ff       	call   c001e436 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e613:	83 c4 10             	add    esp,0x10
c001e616:	43                   	inc    ebx
c001e617:	83 fb 08             	cmp    ebx,0x8
c001e61a:	75 d8                	jne    c001e5f4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e61c:	83 c4 0c             	add    esp,0xc
c001e61f:	5b                   	pop    ebx
c001e620:	5e                   	pop    esi
c001e621:	5f                   	pop    edi
c001e622:	5d                   	pop    ebp
c001e623:	c3                   	ret    

c001e624 <PCI::detect()>:
c001e624:	56                   	push   esi
c001e625:	53                   	push   ebx
c001e626:	53                   	push   ebx
c001e627:	31 db                	xor    ebx,ebx
c001e629:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e62d:	6a 00                	push   0x0
c001e62f:	6a 00                	push   0x0
c001e631:	6a 00                	push   0x0
c001e633:	56                   	push   esi
c001e634:	e8 d5 f6 ff ff       	call   c001dd0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e639:	83 c4 10             	add    esp,0x10
c001e63c:	a8 80                	test   al,0x80
c001e63e:	75 21                	jne    c001e661 <PCI::detect()+0x3d>
c001e640:	51                   	push   ecx
c001e641:	51                   	push   ecx
c001e642:	6a 00                	push   0x0
c001e644:	56                   	push   esi
c001e645:	e8 e2 fb ff ff       	call   c001e22c <PCI::checkBus(unsigned char)>
c001e64a:	83 c4 10             	add    esp,0x10
c001e64d:	eb 2a                	jmp    c001e679 <PCI::detect()+0x55>
c001e64f:	52                   	push   edx
c001e650:	52                   	push   edx
c001e651:	53                   	push   ebx
c001e652:	43                   	inc    ebx
c001e653:	56                   	push   esi
c001e654:	e8 d3 fb ff ff       	call   c001e22c <PCI::checkBus(unsigned char)>
c001e659:	83 c4 10             	add    esp,0x10
c001e65c:	83 fb 08             	cmp    ebx,0x8
c001e65f:	74 18                	je     c001e679 <PCI::detect()+0x55>
c001e661:	53                   	push   ebx
c001e662:	6a 00                	push   0x0
c001e664:	6a 00                	push   0x0
c001e666:	56                   	push   esi
c001e667:	e8 7e f6 ff ff       	call   c001dcea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e66c:	83 c4 10             	add    esp,0x10
c001e66f:	0f b7 c0             	movzx  eax,ax
c001e672:	3d ff ff 00 00       	cmp    eax,0xffff
c001e677:	74 d6                	je     c001e64f <PCI::detect()+0x2b>
c001e679:	58                   	pop    eax
c001e67a:	5b                   	pop    ebx
c001e67b:	5e                   	pop    esi
c001e67c:	c3                   	ret    
c001e67d:	90                   	nop

c001e67e <IDE::close(int, int, void*)>:
c001e67e:	83 c8 ff             	or     eax,0xffffffff
c001e681:	c3                   	ret    

c001e682 <IDE::IDE()>:
c001e682:	83 ec 0c             	sub    esp,0xc
c001e685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e689:	83 ec 08             	sub    esp,0x8
c001e68c:	68 2c 5c 02 c0       	push   0xc0025c2c
c001e691:	50                   	push   eax
c001e692:	e8 b9 b6 fe ff       	call   c0009d50 <HardDiskController::HardDiskController(char const*)>
c001e697:	83 c4 10             	add    esp,0x10
c001e69a:	ba 58 5d 02 c0       	mov    edx,0xc0025d58
c001e69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a3:	89 10                	mov    DWORD PTR [eax],edx
c001e6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e6b0:	90                   	nop
c001e6b1:	83 c4 0c             	add    esp,0xc
c001e6b4:	c3                   	ret    
c001e6b5:	90                   	nop

c001e6b6 <IDE::prepareInterrupt(unsigned char)>:
c001e6b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e6bb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e6bf:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e6c7:	c3                   	ret    

c001e6c8 <selectDrive(unsigned char, unsigned char)>:
c001e6c8:	c3                   	ret    
c001e6c9:	90                   	nop

c001e6ca <IDE::getBase(unsigned char)>:
c001e6ca:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e6cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6d3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e6db:	c3                   	ret    

c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e6dc:	55                   	push   ebp
c001e6dd:	57                   	push   edi
c001e6de:	56                   	push   esi
c001e6df:	53                   	push   ebx
c001e6e0:	83 ec 1c             	sub    esp,0x1c
c001e6e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e6e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e6eb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e6ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e6f3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e6f6:	80 f9 03             	cmp    cl,0x3
c001e6f9:	77 4f                	ja     c001e74a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e6fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e6ff:	0f b6 f2             	movzx  esi,dl
c001e702:	0f b6 db             	movzx  ebx,bl
c001e705:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e708:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e70d:	80 ca 80             	or     dl,0x80
c001e710:	52                   	push   edx
c001e711:	6a 0c                	push   0xc
c001e713:	56                   	push   esi
c001e714:	57                   	push   edi
c001e715:	e8 c2 ff ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e71a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e71f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e723:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e727:	ee                   	out    dx,al
c001e728:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e72d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e731:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e735:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e73d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e741:	83 c4 2c             	add    esp,0x2c
c001e744:	5b                   	pop    ebx
c001e745:	5e                   	pop    esi
c001e746:	5f                   	pop    edi
c001e747:	5d                   	pop    ebp
c001e748:	eb 92                	jmp    c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e74a:	0f b6 cb             	movzx  ecx,bl
c001e74d:	83 f9 07             	cmp    ecx,0x7
c001e750:	77 12                	ja     c001e764 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001e752:	0f b6 d2             	movzx  edx,dl
c001e755:	0f b6 db             	movzx  ebx,bl
c001e758:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001e760:	01 da                	add    edx,ebx
c001e762:	eb 2f                	jmp    c001e793 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e764:	83 f9 0d             	cmp    ecx,0xd
c001e767:	77 13                	ja     c001e77c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001e769:	0f b6 d2             	movzx  edx,dl
c001e76c:	0f b6 db             	movzx  ebx,bl
c001e76f:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e776:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e77a:	eb 17                	jmp    c001e793 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e77c:	83 f9 15             	cmp    ecx,0x15
c001e77f:	77 13                	ja     c001e794 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001e781:	0f b6 d2             	movzx  edx,dl
c001e784:	0f b6 db             	movzx  ebx,bl
c001e787:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e78f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e793:	ee                   	out    dx,al
c001e794:	83 c4 1c             	add    esp,0x1c
c001e797:	5b                   	pop    ebx
c001e798:	5e                   	pop    esi
c001e799:	5f                   	pop    edi
c001e79a:	5d                   	pop    ebp
c001e79b:	c3                   	ret    

c001e79c <IDE::read(unsigned char, unsigned char)>:
c001e79c:	57                   	push   edi
c001e79d:	56                   	push   esi
c001e79e:	53                   	push   ebx
c001e79f:	83 ec 10             	sub    esp,0x10
c001e7a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e7a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e7aa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e7ae:	8d 42 f8             	lea    eax,[edx-0x8]
c001e7b1:	3c 03                	cmp    al,0x3
c001e7b3:	77 48                	ja     c001e7fd <IDE::read(unsigned char, unsigned char)+0x61>
c001e7b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e7b9:	0f b6 f1             	movzx  esi,cl
c001e7bc:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001e7bf:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001e7c4:	0c 80                	or     al,0x80
c001e7c6:	50                   	push   eax
c001e7c7:	6a 0c                	push   0xc
c001e7c9:	56                   	push   esi
c001e7ca:	53                   	push   ebx
c001e7cb:	e8 0c ff ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e7d4:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001e7d9:	0f b6 d2             	movzx  edx,dl
c001e7dc:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e7e0:	ec                   	in     al,dx
c001e7e1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e7e5:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001e7ea:	52                   	push   edx
c001e7eb:	6a 0c                	push   0xc
c001e7ed:	56                   	push   esi
c001e7ee:	53                   	push   ebx
c001e7ef:	e8 e8 fe ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7f4:	83 c4 20             	add    esp,0x20
c001e7f7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e7fb:	eb 4c                	jmp    c001e849 <IDE::read(unsigned char, unsigned char)+0xad>
c001e7fd:	0f b6 f2             	movzx  esi,dl
c001e800:	83 fe 07             	cmp    esi,0x7
c001e803:	77 12                	ja     c001e817 <IDE::read(unsigned char, unsigned char)+0x7b>
c001e805:	0f b6 c9             	movzx  ecx,cl
c001e808:	0f b6 d2             	movzx  edx,dl
c001e80b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001e813:	01 c2                	add    edx,eax
c001e815:	eb 31                	jmp    c001e848 <IDE::read(unsigned char, unsigned char)+0xac>
c001e817:	83 fe 0d             	cmp    esi,0xd
c001e81a:	77 13                	ja     c001e82f <IDE::read(unsigned char, unsigned char)+0x93>
c001e81c:	0f b6 c9             	movzx  ecx,cl
c001e81f:	0f b6 d2             	movzx  edx,dl
c001e822:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001e829:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e82d:	eb 19                	jmp    c001e848 <IDE::read(unsigned char, unsigned char)+0xac>
c001e82f:	31 c0                	xor    eax,eax
c001e831:	83 fe 15             	cmp    esi,0x15
c001e834:	77 13                	ja     c001e849 <IDE::read(unsigned char, unsigned char)+0xad>
c001e836:	0f b6 c9             	movzx  ecx,cl
c001e839:	0f b6 d2             	movzx  edx,dl
c001e83c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001e844:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e848:	ec                   	in     al,dx
c001e849:	83 c4 10             	add    esp,0x10
c001e84c:	5b                   	pop    ebx
c001e84d:	5e                   	pop    esi
c001e84e:	5f                   	pop    edi
c001e84f:	c3                   	ret    

c001e850 <IDE::waitInterrupt(unsigned char)>:
c001e850:	55                   	push   ebp
c001e851:	57                   	push   edi
c001e852:	56                   	push   esi
c001e853:	53                   	push   ebx
c001e854:	31 db                	xor    ebx,ebx
c001e856:	83 ec 0c             	sub    esp,0xc
c001e859:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e85d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e862:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e86a:	89 e8                	mov    eax,ebp
c001e86c:	84 c0                	test   al,al
c001e86e:	75 31                	jne    c001e8a1 <IDE::waitInterrupt(unsigned char)+0x51>
c001e870:	52                   	push   edx
c001e871:	6a 0c                	push   0xc
c001e873:	56                   	push   esi
c001e874:	57                   	push   edi
c001e875:	e8 22 ff ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001e87a:	83 c4 10             	add    esp,0x10
c001e87d:	a8 01                	test   al,0x1
c001e87f:	75 28                	jne    c001e8a9 <IDE::waitInterrupt(unsigned char)+0x59>
c001e881:	f6 c3 04             	test   bl,0x4
c001e884:	75 13                	jne    c001e899 <IDE::waitInterrupt(unsigned char)+0x49>
c001e886:	83 fb 32             	cmp    ebx,0x32
c001e889:	7e 0e                	jle    c001e899 <IDE::waitInterrupt(unsigned char)+0x49>
c001e88b:	50                   	push   eax
c001e88c:	50                   	push   eax
c001e88d:	6a 00                	push   0x0
c001e88f:	6a 64                	push   0x64
c001e891:	e8 82 86 ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c001e896:	83 c4 10             	add    esp,0x10
c001e899:	83 fb 3c             	cmp    ebx,0x3c
c001e89c:	74 0b                	je     c001e8a9 <IDE::waitInterrupt(unsigned char)+0x59>
c001e89e:	43                   	inc    ebx
c001e89f:	eb c1                	jmp    c001e862 <IDE::waitInterrupt(unsigned char)+0x12>
c001e8a1:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e8a9:	83 c4 0c             	add    esp,0xc
c001e8ac:	89 e8                	mov    eax,ebp
c001e8ae:	5b                   	pop    ebx
c001e8af:	5e                   	pop    esi
c001e8b0:	5f                   	pop    edi
c001e8b1:	5d                   	pop    ebp
c001e8b2:	c3                   	ret    

c001e8b3 <ideChannel0IRQHandler(regs*, void*)>:
c001e8b3:	83 ec 10             	sub    esp,0x10
c001e8b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e8ba:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e8c1:	6a 07                	push   0x7
c001e8c3:	6a 00                	push   0x0
c001e8c5:	50                   	push   eax
c001e8c6:	e8 d1 fe ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001e8cb:	83 c4 1c             	add    esp,0x1c
c001e8ce:	c3                   	ret    

c001e8cf <ideChannel1IRQHandler(regs*, void*)>:
c001e8cf:	83 ec 10             	sub    esp,0x10
c001e8d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e8d6:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e8dd:	6a 07                	push   0x7
c001e8df:	6a 01                	push   0x1
c001e8e1:	50                   	push   eax
c001e8e2:	e8 b5 fe ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001e8e7:	83 c4 1c             	add    esp,0x1c
c001e8ea:	c3                   	ret    
c001e8eb:	90                   	nop

c001e8ec <IDE::enableIRQs(unsigned char, bool)>:
c001e8ec:	57                   	push   edi
c001e8ed:	b8 02 00 00 00       	mov    eax,0x2
c001e8f2:	56                   	push   esi
c001e8f3:	53                   	push   ebx
c001e8f4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e8f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e8fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e901:	74 02                	je     c001e905 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001e903:	31 c0                	xor    eax,eax
c001e905:	0f b6 db             	movzx  ebx,bl
c001e908:	bf 04 00 00 00       	mov    edi,0x4
c001e90d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001e914:	50                   	push   eax
c001e915:	6a 0c                	push   0xc
c001e917:	53                   	push   ebx
c001e918:	56                   	push   esi
c001e919:	e8 be fd ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e91e:	83 c4 10             	add    esp,0x10
c001e921:	50                   	push   eax
c001e922:	6a 0c                	push   0xc
c001e924:	53                   	push   ebx
c001e925:	56                   	push   esi
c001e926:	e8 71 fe ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001e92b:	83 c4 10             	add    esp,0x10
c001e92e:	4f                   	dec    edi
c001e92f:	75 f0                	jne    c001e921 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001e931:	5b                   	pop    ebx
c001e932:	5e                   	pop    esi
c001e933:	5f                   	pop    edi
c001e934:	c3                   	ret    
c001e935:	90                   	nop

c001e936 <IDE::open(int, int, void*)>:
c001e936:	55                   	push   ebp
c001e937:	57                   	push   edi
c001e938:	56                   	push   esi
c001e939:	53                   	push   ebx
c001e93a:	83 ec 1c             	sub    esp,0x1c
c001e93d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e941:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e948:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e951:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e95a:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e961:	0f 85 80 02 00 00    	jne    c001ebe7 <IDE::open(int, int, void*)+0x2b1>
c001e967:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e96d:	a8 70                	test   al,0x70
c001e96f:	75 44                	jne    c001e9b5 <IDE::open(int, int, void*)+0x7f>
c001e971:	ba 20 84 00 00       	mov    edx,0x8420
c001e976:	0f a3 c2             	bt     edx,eax
c001e979:	73 3a                	jae    c001e9b5 <IDE::open(int, int, void*)+0x7f>
c001e97b:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e981:	83 ec 0c             	sub    esp,0xc
c001e984:	83 e0 fc             	and    eax,0xfffffffc
c001e987:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e98e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e994:	83 e0 fc             	and    eax,0xfffffffc
c001e997:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e99e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e9a4:	83 e0 fc             	and    eax,0xfffffffc
c001e9a7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e9ae:	68 5d 32 02 c0       	push   0xc002325d
c001e9b3:	eb 60                	jmp    c001ea15 <IDE::open(int, int, void*)+0xdf>
c001e9b5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e9bf:	be 64 00 00 00       	mov    esi,0x64
c001e9c4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e9ce:	57                   	push   edi
c001e9cf:	57                   	push   edi
c001e9d0:	68 44 5c 02 c0       	push   0xc0025c44
c001e9d5:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001e9d9:	57                   	push   edi
c001e9da:	e8 71 1c fe ff       	call   c0000650 <strcpy>
c001e9df:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001e9e6:	31 d2                	xor    edx,edx
c001e9e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e9eb:	89 c8                	mov    eax,ecx
c001e9ed:	f7 f6                	div    esi
c001e9ef:	be 0a 00 00 00       	mov    esi,0xa
c001e9f4:	31 d2                	xor    edx,edx
c001e9f6:	83 c0 30             	add    eax,0x30
c001e9f9:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e9fd:	89 c8                	mov    eax,ecx
c001e9ff:	f7 f6                	div    esi
c001ea01:	89 d1                	mov    ecx,edx
c001ea03:	31 d2                	xor    edx,edx
c001ea05:	f7 f6                	div    esi
c001ea07:	83 c1 30             	add    ecx,0x30
c001ea0a:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001ea0e:	83 c2 30             	add    edx,0x30
c001ea11:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001ea15:	e8 f7 e7 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ea1a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ea21:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ea26:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ea2d:	83 c4 10             	add    esp,0x10
c001ea30:	89 fa                	mov    edx,edi
c001ea32:	c1 e1 10             	shl    ecx,0x10
c001ea35:	c1 e0 0b             	shl    eax,0xb
c001ea38:	09 c1                	or     ecx,eax
c001ea3a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ea41:	c1 e0 08             	shl    eax,0x8
c001ea44:	09 c1                	or     ecx,eax
c001ea46:	89 c8                	mov    eax,ecx
c001ea48:	0d 08 00 00 80       	or     eax,0x80000008
c001ea4d:	ef                   	out    dx,eax
c001ea4e:	be fc 0c 00 00       	mov    esi,0xcfc
c001ea53:	89 f2                	mov    edx,esi
c001ea55:	ed                   	in     eax,dx
c001ea56:	c1 e8 10             	shr    eax,0x10
c001ea59:	3d ff ff 00 00       	cmp    eax,0xffff
c001ea5e:	0f 84 e1 00 00 00    	je     c001eb45 <IDE::open(int, int, void*)+0x20f>
c001ea64:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ea6a:	89 fa                	mov    edx,edi
c001ea6c:	89 c8                	mov    eax,ecx
c001ea6e:	ef                   	out    dx,eax
c001ea6f:	b0 fe                	mov    al,0xfe
c001ea71:	89 f2                	mov    edx,esi
c001ea73:	ee                   	out    dx,al
c001ea74:	89 c8                	mov    eax,ecx
c001ea76:	89 fa                	mov    edx,edi
c001ea78:	ef                   	out    dx,eax
c001ea79:	89 f2                	mov    edx,esi
c001ea7b:	ed                   	in     eax,dx
c001ea7c:	3c fe                	cmp    al,0xfe
c001ea7e:	0f 85 83 00 00 00    	jne    c001eb07 <IDE::open(int, int, void*)+0x1d1>
c001ea84:	83 ec 0c             	sub    esp,0xc
c001ea87:	68 93 32 02 c0       	push   0xc0023293
c001ea8c:	e8 80 e7 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ea91:	c7 04 24 4a 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c4a
c001ea98:	e8 c9 84 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ea9d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001eaa7:	c7 04 24 88 35 02 c0 	mov    DWORD PTR [esp],0xc0023588
c001eaae:	e8 5e e7 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001eab3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001eaba:	89 fa                	mov    edx,edi
c001eabc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eac3:	c1 e1 10             	shl    ecx,0x10
c001eac6:	c1 e0 08             	shl    eax,0x8
c001eac9:	09 c1                	or     ecx,eax
c001eacb:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ead2:	c1 e0 0b             	shl    eax,0xb
c001ead5:	09 c1                	or     ecx,eax
c001ead7:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001eadd:	89 c8                	mov    eax,ecx
c001eadf:	ef                   	out    dx,eax
c001eae0:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001eae6:	89 f2                	mov    edx,esi
c001eae8:	89 e8                	mov    eax,ebp
c001eaea:	ee                   	out    dx,al
c001eaeb:	89 c8                	mov    eax,ecx
c001eaed:	89 fa                	mov    edx,edi
c001eaef:	ef                   	out    dx,eax
c001eaf0:	89 f2                	mov    edx,esi
c001eaf2:	ed                   	in     eax,dx
c001eaf3:	0f b6 c0             	movzx  eax,al
c001eaf6:	83 c4 10             	add    esp,0x10
c001eaf9:	39 e8                	cmp    eax,ebp
c001eafb:	74 58                	je     c001eb55 <IDE::open(int, int, void*)+0x21f>
c001eafd:	83 ec 0c             	sub    esp,0xc
c001eb00:	68 5f 5c 02 c0       	push   0xc0025c5f
c001eb05:	eb 46                	jmp    c001eb4d <IDE::open(int, int, void*)+0x217>
c001eb07:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001eb10:	75 29                	jne    c001eb3b <IDE::open(int, int, void*)+0x205>
c001eb12:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001eb19:	3d 8a 00 00 00       	cmp    eax,0x8a
c001eb1e:	74 05                	je     c001eb25 <IDE::open(int, int, void*)+0x1ef>
c001eb20:	83 c0 80             	add    eax,0xffffff80
c001eb23:	75 16                	jne    c001eb3b <IDE::open(int, int, void*)+0x205>
c001eb25:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001eb2c:	83 ec 0c             	sub    esp,0xc
c001eb2f:	68 fb 44 02 c0       	push   0xc00244fb
c001eb34:	e8 d8 e6 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001eb39:	eb 17                	jmp    c001eb52 <IDE::open(int, int, void*)+0x21c>
c001eb3b:	83 ec 0c             	sub    esp,0xc
c001eb3e:	68 67 5c 02 c0       	push   0xc0025c67
c001eb43:	eb 08                	jmp    c001eb4d <IDE::open(int, int, void*)+0x217>
c001eb45:	83 ec 0c             	sub    esp,0xc
c001eb48:	68 98 5c 02 c0       	push   0xc0025c98
c001eb4d:	e8 92 10 ff ff       	call   c000fbe4 <KePanic(char const*)>
c001eb52:	83 c4 10             	add    esp,0x10
c001eb55:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001eb5c:	0f 84 bf 00 00 00    	je     c001ec21 <IDE::open(int, int, void*)+0x2eb>
c001eb62:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001eb68:	83 ec 0c             	sub    esp,0xc
c001eb6b:	83 e0 fc             	and    eax,0xfffffffc
c001eb6e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001eb75:	83 c0 08             	add    eax,0x8
c001eb78:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001eb7f:	68 c2 5c 02 c0       	push   0xc0025cc2
c001eb84:	e8 dd 83 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001eb89:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001eb90:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eb97:	50                   	push   eax
c001eb98:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eb9f:	50                   	push   eax
c001eba0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001eba7:	50                   	push   eax
c001eba8:	ff 35 e0 f4 02 c0    	push   DWORD PTR ds:0xc002f4e0
c001ebae:	e8 8d f0 ff ff       	call   c001dc40 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ebb3:	83 c4 18             	add    esp,0x18
c001ebb6:	83 c8 07             	or     eax,0x7
c001ebb9:	0f b7 c0             	movzx  eax,ax
c001ebbc:	50                   	push   eax
c001ebbd:	6a 04                	push   0x4
c001ebbf:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ebc6:	50                   	push   eax
c001ebc7:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ebce:	50                   	push   eax
c001ebcf:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ebd6:	50                   	push   eax
c001ebd7:	ff 35 e0 f4 02 c0    	push   DWORD PTR ds:0xc002f4e0
c001ebdd:	e8 9a f2 ff ff       	call   c001de7c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001ebe2:	83 c4 20             	add    esp,0x20
c001ebe5:	eb 3a                	jmp    c001ec21 <IDE::open(int, int, void*)+0x2eb>
c001ebe7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ebee:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ebf4:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ebfb:	05 06 02 00 00       	add    eax,0x206
c001ec00:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ec07:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ec0e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ec15:	05 06 02 00 00       	add    eax,0x206
c001ec1a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ec21:	83 ec 0c             	sub    esp,0xc
c001ec24:	68 40 3b 02 c0       	push   0xc0023b40
c001ec29:	e8 e3 e5 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ec2e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ec34:	83 c4 10             	add    esp,0x10
c001ec37:	89 c2                	mov    edx,eax
c001ec39:	83 e2 0f             	and    edx,0xf
c001ec3c:	83 fa 08             	cmp    edx,0x8
c001ec3f:	75 0a                	jne    c001ec4b <IDE::open(int, int, void*)+0x315>
c001ec41:	83 e8 02             	sub    eax,0x2
c001ec44:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ec4b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ec51:	89 c2                	mov    edx,eax
c001ec53:	83 e2 0f             	and    edx,0xf
c001ec56:	83 fa 08             	cmp    edx,0x8
c001ec59:	75 0a                	jne    c001ec65 <IDE::open(int, int, void*)+0x32f>
c001ec5b:	83 e8 02             	sub    eax,0x2
c001ec5e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ec65:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ec6c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ec73:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ec76:	89 d0                	mov    eax,edx
c001ec78:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ec7c:	8d 7a 01             	lea    edi,[edx+0x1]
c001ec7f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ec83:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ec87:	83 e1 3f             	and    ecx,0x3f
c001ec8a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ec8e:	89 f9                	mov    ecx,edi
c001ec90:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ec97:	8d 78 02             	lea    edi,[eax+0x2]
c001ec9a:	0f b6 c9             	movzx  ecx,cl
c001ec9d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001eca0:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001eca4:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001eca8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ecac:	83 e2 3f             	and    edx,0x3f
c001ecaf:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ecb3:	89 f9                	mov    ecx,edi
c001ecb5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ecbb:	8d 78 03             	lea    edi,[eax+0x3]
c001ecbe:	0f b6 d1             	movzx  edx,cl
c001ecc1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ecc4:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ecc8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001eccc:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ecd0:	83 e1 3f             	and    ecx,0x3f
c001ecd3:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ecd7:	89 fa                	mov    edx,edi
c001ecd9:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ecdf:	8d 78 04             	lea    edi,[eax+0x4]
c001ece2:	0f b6 ca             	movzx  ecx,dl
c001ece5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ece8:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ecec:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ecf0:	89 fa                	mov    edx,edi
c001ecf2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ecf8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ecfc:	83 e2 3f             	and    edx,0x3f
c001ecff:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ed03:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ed0a:	66 85 f6             	test   si,si
c001ed0d:	74 24                	je     c001ed33 <IDE::open(int, int, void*)+0x3fd>
c001ed0f:	89 f9                	mov    ecx,edi
c001ed11:	83 c0 05             	add    eax,0x5
c001ed14:	0f b6 d1             	movzx  edx,cl
c001ed17:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ed1a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ed1e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ed22:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ed28:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001ed2c:	83 e0 3f             	and    eax,0x3f
c001ed2f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001ed33:	83 ec 0c             	sub    esp,0xc
c001ed36:	68 da 5c 02 c0       	push   0xc0025cda
c001ed3b:	e8 d1 e4 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ed40:	58                   	pop    eax
c001ed41:	5a                   	pop    edx
c001ed42:	6a 00                	push   0x0
c001ed44:	53                   	push   ebx
c001ed45:	e8 6c f9 ff ff       	call   c001e6b6 <IDE::prepareInterrupt(unsigned char)>
c001ed4a:	59                   	pop    ecx
c001ed4b:	5e                   	pop    esi
c001ed4c:	6a 01                	push   0x1
c001ed4e:	53                   	push   ebx
c001ed4f:	e8 62 f9 ff ff       	call   c001e6b6 <IDE::prepareInterrupt(unsigned char)>
c001ed54:	c7 04 24 5c 55 02 c0 	mov    DWORD PTR [esp],0xc002555c
c001ed5b:	e8 b1 e4 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ed60:	83 c4 0c             	add    esp,0xc
c001ed63:	6a 00                	push   0x0
c001ed65:	6a 00                	push   0x0
c001ed67:	53                   	push   ebx
c001ed68:	e8 7f fb ff ff       	call   c001e8ec <IDE::enableIRQs(unsigned char, bool)>
c001ed6d:	83 c4 0c             	add    esp,0xc
c001ed70:	6a 00                	push   0x0
c001ed72:	6a 01                	push   0x1
c001ed74:	53                   	push   ebx
c001ed75:	e8 72 fb ff ff       	call   c001e8ec <IDE::enableIRQs(unsigned char, bool)>
c001ed7a:	c7 04 24 dc 5c 02 c0 	mov    DWORD PTR [esp],0xc0025cdc
c001ed81:	e8 8b e4 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ed86:	83 c4 10             	add    esp,0x10
c001ed89:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ed90:	74 3c                	je     c001edce <IDE::open(int, int, void*)+0x498>
c001ed92:	83 ec 0c             	sub    esp,0xc
c001ed95:	53                   	push   ebx
c001ed96:	6a 01                	push   0x1
c001ed98:	68 b3 e8 01 c0       	push   0xc001e8b3
c001ed9d:	6a 0e                	push   0xe
c001ed9f:	53                   	push   ebx
c001eda0:	e8 fd ab fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eda5:	83 c4 14             	add    esp,0x14
c001eda8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001edae:	53                   	push   ebx
c001edaf:	6a 01                	push   0x1
c001edb1:	68 cf e8 01 c0       	push   0xc001e8cf
c001edb6:	6a 0f                	push   0xf
c001edb8:	53                   	push   ebx
c001edb9:	e8 e4 ab fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001edbe:	83 c4 14             	add    esp,0x14
c001edc1:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001edc7:	68 8e 37 02 c0       	push   0xc002378e
c001edcc:	eb 40                	jmp    c001ee0e <IDE::open(int, int, void*)+0x4d8>
c001edce:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001edd8:	83 ec 0c             	sub    esp,0xc
c001eddb:	53                   	push   ebx
c001eddc:	6a 00                	push   0x0
c001edde:	68 b3 e8 01 c0       	push   0xc001e8b3
c001ede3:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ede9:	53                   	push   ebx
c001edea:	e8 b3 ab fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001edef:	83 c4 14             	add    esp,0x14
c001edf2:	53                   	push   ebx
c001edf3:	6a 00                	push   0x0
c001edf5:	68 cf e8 01 c0       	push   0xc001e8cf
c001edfa:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ee00:	53                   	push   ebx
c001ee01:	e8 9c ab fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee06:	83 c4 14             	add    esp,0x14
c001ee09:	68 ea 44 02 c0       	push   0xc00244ea
c001ee0e:	e8 fe e3 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ee13:	83 c4 10             	add    esp,0x10
c001ee16:	83 ec 0c             	sub    esp,0xc
c001ee19:	68 de 5c 02 c0       	push   0xc0025cde
c001ee1e:	e8 ee e3 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ee23:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ee25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ee28:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ee2b:	c7 04 24 6d 49 02 c0 	mov    DWORD PTR [esp],0xc002496d
c001ee32:	e8 da e3 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ee37:	83 c4 0c             	add    esp,0xc
c001ee3a:	6a 07                	push   0x7
c001ee3c:	6a 00                	push   0x0
c001ee3e:	53                   	push   ebx
c001ee3f:	e8 58 f9 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001ee44:	83 c4 0c             	add    esp,0xc
c001ee47:	6a 07                	push   0x7
c001ee49:	6a 01                	push   0x1
c001ee4b:	53                   	push   ebx
c001ee4c:	e8 4b f9 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001ee51:	c7 04 24 f4 41 02 c0 	mov    DWORD PTR [esp],0xc00241f4
c001ee58:	e8 b4 e3 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ee5d:	83 c4 0c             	add    esp,0xc
c001ee60:	6a 01                	push   0x1
c001ee62:	6a 00                	push   0x0
c001ee64:	53                   	push   ebx
c001ee65:	e8 82 fa ff ff       	call   c001e8ec <IDE::enableIRQs(unsigned char, bool)>
c001ee6a:	83 c4 0c             	add    esp,0xc
c001ee6d:	6a 01                	push   0x1
c001ee6f:	6a 01                	push   0x1
c001ee71:	53                   	push   ebx
c001ee72:	e8 75 fa ff ff       	call   c001e8ec <IDE::enableIRQs(unsigned char, bool)>
c001ee77:	c7 04 24 e1 5c 02 c0 	mov    DWORD PTR [esp],0xc0025ce1
c001ee7e:	e8 8e e3 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ee83:	83 c4 2c             	add    esp,0x2c
c001ee86:	31 c0                	xor    eax,eax
c001ee88:	5b                   	pop    ebx
c001ee89:	5e                   	pop    esi
c001ee8a:	5f                   	pop    edi
c001ee8b:	5d                   	pop    ebp
c001ee8c:	c3                   	ret    
c001ee8d:	90                   	nop

c001ee8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ee8e:	55                   	push   ebp
c001ee8f:	57                   	push   edi
c001ee90:	56                   	push   esi
c001ee91:	53                   	push   ebx
c001ee92:	83 ec 1c             	sub    esp,0x1c
c001ee95:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ee99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ee9d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eea1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001eea5:	8d 42 f8             	lea    eax,[edx-0x8]
c001eea8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001eeac:	3c 03                	cmp    al,0x3
c001eeae:	77 5a                	ja     c001ef0a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001eeb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eeb4:	0f b6 db             	movzx  ebx,bl
c001eeb7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001eebb:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001eebe:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001eec3:	0c 80                	or     al,0x80
c001eec5:	50                   	push   eax
c001eec6:	6a 0c                	push   0xc
c001eec8:	53                   	push   ebx
c001eec9:	56                   	push   esi
c001eeca:	e8 0d f8 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eecf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eed3:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001eed8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001eedc:	0f b6 d2             	movzx  edx,dl
c001eedf:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001eee3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001eee5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001eeea:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001eeee:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001eef2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001eefa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001eefe:	83 c4 2c             	add    esp,0x2c
c001ef01:	5b                   	pop    ebx
c001ef02:	5e                   	pop    esi
c001ef03:	5f                   	pop    edi
c001ef04:	5d                   	pop    ebp
c001ef05:	e9 d2 f7 ff ff       	jmp    c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef0a:	0f b6 c2             	movzx  eax,dl
c001ef0d:	83 f8 07             	cmp    eax,0x7
c001ef10:	77 12                	ja     c001ef24 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001ef12:	0f b6 db             	movzx  ebx,bl
c001ef15:	0f b6 c2             	movzx  eax,dl
c001ef18:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001ef20:	01 c2                	add    edx,eax
c001ef22:	eb 2f                	jmp    c001ef53 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ef24:	83 f8 0d             	cmp    eax,0xd
c001ef27:	77 13                	ja     c001ef3c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001ef29:	0f b6 db             	movzx  ebx,bl
c001ef2c:	0f b6 d2             	movzx  edx,dl
c001ef2f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001ef36:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ef3a:	eb 17                	jmp    c001ef53 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ef3c:	83 f8 15             	cmp    eax,0x15
c001ef3f:	77 14                	ja     c001ef55 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001ef41:	0f b6 db             	movzx  ebx,bl
c001ef44:	0f b6 d2             	movzx  edx,dl
c001ef47:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001ef4f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ef53:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ef55:	83 c4 1c             	add    esp,0x1c
c001ef58:	5b                   	pop    ebx
c001ef59:	5e                   	pop    esi
c001ef5a:	5f                   	pop    edi
c001ef5b:	5d                   	pop    ebp
c001ef5c:	c3                   	ret    
c001ef5d:	90                   	nop

c001ef5e <IDE::detect()>:
c001ef5e:	55                   	push   ebp
c001ef5f:	57                   	push   edi
c001ef60:	56                   	push   esi
c001ef61:	53                   	push   ebx
c001ef62:	81 ec 28 02 00 00    	sub    esp,0x228
c001ef68:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001ef6f:	68 e3 5c 02 c0       	push   0xc0025ce3
c001ef74:	e8 98 e2 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001ef79:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001ef7f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ef83:	83 c4 10             	add    esp,0x10
c001ef86:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001ef8b:	0f 85 26 04 00 00    	jne    c001f3b7 <IDE::detect()+0x459>
c001ef91:	83 ec 0c             	sub    esp,0xc
c001ef94:	31 f6                	xor    esi,esi
c001ef96:	68 e6 5c 02 c0       	push   0xc0025ce6
c001ef9b:	31 ff                	xor    edi,edi
c001ef9d:	e8 6f e2 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001efa2:	83 c4 10             	add    esp,0x10
c001efa5:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001efac:	83 ec 0c             	sub    esp,0xc
c001efaf:	68 e9 5c 02 c0       	push   0xc0025ce9
c001efb4:	e8 58 e2 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001efb9:	83 c4 10             	add    esp,0x10
c001efbc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001efc3:	83 ec 0c             	sub    esp,0xc
c001efc6:	31 ed                	xor    ebp,ebp
c001efc8:	68 ec 5c 02 c0       	push   0xc0025cec
c001efcd:	e8 3f e2 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001efd2:	89 f8                	mov    eax,edi
c001efd4:	c1 e0 06             	shl    eax,0x6
c001efd7:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001efdf:	c7 04 24 ef 5c 02 c0 	mov    DWORD PTR [esp],0xc0025cef
c001efe6:	e8 26 e2 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001efeb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001efef:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001eff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff7:	c1 e0 04             	shl    eax,0x4
c001effa:	83 c8 a0             	or     eax,0xffffffa0
c001effd:	0f b6 c0             	movzx  eax,al
c001f000:	50                   	push   eax
c001f001:	6a 06                	push   0x6
c001f003:	56                   	push   esi
c001f004:	53                   	push   ebx
c001f005:	e8 d2 f6 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f00a:	83 c4 1c             	add    esp,0x1c
c001f00d:	6a 0c                	push   0xc
c001f00f:	56                   	push   esi
c001f010:	53                   	push   ebx
c001f011:	e8 86 f7 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f016:	83 c4 0c             	add    esp,0xc
c001f019:	6a 0c                	push   0xc
c001f01b:	56                   	push   esi
c001f01c:	53                   	push   ebx
c001f01d:	e8 7a f7 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f022:	83 c4 0c             	add    esp,0xc
c001f025:	6a 0c                	push   0xc
c001f027:	56                   	push   esi
c001f028:	53                   	push   ebx
c001f029:	e8 6e f7 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f02e:	83 c4 0c             	add    esp,0xc
c001f031:	6a 0c                	push   0xc
c001f033:	56                   	push   esi
c001f034:	53                   	push   ebx
c001f035:	e8 62 f7 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f03a:	c7 04 24 f2 5c 02 c0 	mov    DWORD PTR [esp],0xc0025cf2
c001f041:	e8 cb e1 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f046:	68 ec 00 00 00       	push   0xec
c001f04b:	6a 07                	push   0x7
c001f04d:	56                   	push   esi
c001f04e:	53                   	push   ebx
c001f04f:	e8 88 f6 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f054:	83 c4 1c             	add    esp,0x1c
c001f057:	6a 0c                	push   0xc
c001f059:	56                   	push   esi
c001f05a:	53                   	push   ebx
c001f05b:	e8 3c f7 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f060:	83 c4 0c             	add    esp,0xc
c001f063:	6a 0c                	push   0xc
c001f065:	56                   	push   esi
c001f066:	53                   	push   ebx
c001f067:	e8 30 f7 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f06c:	83 c4 0c             	add    esp,0xc
c001f06f:	6a 0c                	push   0xc
c001f071:	56                   	push   esi
c001f072:	53                   	push   ebx
c001f073:	e8 24 f7 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f078:	83 c4 0c             	add    esp,0xc
c001f07b:	6a 0c                	push   0xc
c001f07d:	56                   	push   esi
c001f07e:	53                   	push   ebx
c001f07f:	e8 18 f7 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f084:	c7 04 24 f5 5c 02 c0 	mov    DWORD PTR [esp],0xc0025cf5
c001f08b:	e8 81 e1 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f090:	83 c4 0c             	add    esp,0xc
c001f093:	6a 0c                	push   0xc
c001f095:	56                   	push   esi
c001f096:	53                   	push   ebx
c001f097:	e8 00 f7 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f09c:	83 c4 10             	add    esp,0x10
c001f09f:	84 c0                	test   al,al
c001f0a1:	75 1f                	jne    c001f0c2 <IDE::detect()+0x164>
c001f0a3:	83 ec 0c             	sub    esp,0xc
c001f0a6:	68 f8 5c 02 c0       	push   0xc0025cf8
c001f0ab:	e8 61 e1 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f0b0:	e9 e0 02 00 00       	jmp    c001f395 <IDE::detect()+0x437>
c001f0b5:	a8 80                	test   al,0x80
c001f0b7:	74 21                	je     c001f0da <IDE::detect()+0x17c>
c001f0b9:	45                   	inc    ebp
c001f0ba:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f0c0:	7f 1e                	jg     c001f0e0 <IDE::detect()+0x182>
c001f0c2:	50                   	push   eax
c001f0c3:	6a 0c                	push   0xc
c001f0c5:	56                   	push   esi
c001f0c6:	53                   	push   ebx
c001f0c7:	e8 d0 f6 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f0cc:	83 c4 10             	add    esp,0x10
c001f0cf:	a8 01                	test   al,0x1
c001f0d1:	74 e2                	je     c001f0b5 <IDE::detect()+0x157>
c001f0d3:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f0d8:	eb 23                	jmp    c001f0fd <IDE::detect()+0x19f>
c001f0da:	a8 08                	test   al,0x8
c001f0dc:	74 db                	je     c001f0b9 <IDE::detect()+0x15b>
c001f0de:	eb 18                	jmp    c001f0f8 <IDE::detect()+0x19a>
c001f0e0:	50                   	push   eax
c001f0e1:	50                   	push   eax
c001f0e2:	6a 00                	push   0x0
c001f0e4:	6a 32                	push   0x32
c001f0e6:	e8 2d 7e ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c001f0eb:	83 c4 10             	add    esp,0x10
c001f0ee:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f0f4:	75 cc                	jne    c001f0c2 <IDE::detect()+0x164>
c001f0f6:	eb db                	jmp    c001f0d3 <IDE::detect()+0x175>
c001f0f8:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f0fd:	83 ec 0c             	sub    esp,0xc
c001f100:	68 fb 5c 02 c0       	push   0xc0025cfb
c001f105:	e8 07 e1 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f10a:	83 c4 10             	add    esp,0x10
c001f10d:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f112:	74 56                	je     c001f16a <IDE::detect()+0x20c>
c001f114:	51                   	push   ecx
c001f115:	6a 04                	push   0x4
c001f117:	56                   	push   esi
c001f118:	53                   	push   ebx
c001f119:	e8 7e f6 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f11e:	83 c4 0c             	add    esp,0xc
c001f121:	6a 05                	push   0x5
c001f123:	56                   	push   esi
c001f124:	53                   	push   ebx
c001f125:	89 c5                	mov    ebp,eax
c001f127:	e8 70 f6 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f12c:	89 e9                	mov    ecx,ebp
c001f12e:	83 c4 10             	add    esp,0x10
c001f131:	0f b6 e9             	movzx  ebp,cl
c001f134:	83 fd 14             	cmp    ebp,0x14
c001f137:	75 04                	jne    c001f13d <IDE::detect()+0x1df>
c001f139:	3c eb                	cmp    al,0xeb
c001f13b:	74 11                	je     c001f14e <IDE::detect()+0x1f0>
c001f13d:	83 fd 69             	cmp    ebp,0x69
c001f140:	0f 85 52 02 00 00    	jne    c001f398 <IDE::detect()+0x43a>
c001f146:	3c 96                	cmp    al,0x96
c001f148:	0f 85 4a 02 00 00    	jne    c001f398 <IDE::detect()+0x43a>
c001f14e:	68 a1 00 00 00       	push   0xa1
c001f153:	6a 07                	push   0x7
c001f155:	56                   	push   esi
c001f156:	53                   	push   ebx
c001f157:	e8 80 f5 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f15c:	58                   	pop    eax
c001f15d:	5a                   	pop    edx
c001f15e:	6a 00                	push   0x0
c001f160:	6a 0a                	push   0xa
c001f162:	e8 b1 7d ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c001f167:	83 c4 10             	add    esp,0x10
c001f16a:	83 ec 0c             	sub    esp,0xc
c001f16d:	89 fd                	mov    ebp,edi
c001f16f:	68 fe 5c 02 c0       	push   0xc0025cfe
c001f174:	e8 98 e0 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f179:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f17d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f184:	c1 e5 06             	shl    ebp,0x6
c001f187:	52                   	push   edx
c001f188:	01 dd                	add    ebp,ebx
c001f18a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f18e:	6a 00                	push   0x0
c001f190:	56                   	push   esi
c001f191:	53                   	push   ebx
c001f192:	e8 f7 fc ff ff       	call   c001ee8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f197:	83 c4 14             	add    esp,0x14
c001f19a:	68 02 5d 02 c0       	push   0xc0025d02
c001f19f:	e8 6d e0 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f1a4:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f1a9:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f1b0:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f1b7:	89 f0                	mov    eax,esi
c001f1b9:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f1bf:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f1c3:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f1c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f1cd:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f1d4:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f1dc:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f1e3:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f1eb:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f1f1:	c7 04 24 06 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d06
c001f1f8:	e8 14 e0 fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f1fd:	83 c4 10             	add    esp,0x10
c001f200:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f207:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f20b:	74 09                	je     c001f216 <IDE::detect()+0x2b8>
c001f20d:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f214:	eb 07                	jmp    c001f21d <IDE::detect()+0x2bf>
c001f216:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f21d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f221:	89 f8                	mov    eax,edi
c001f223:	83 ec 0c             	sub    esp,0xc
c001f226:	c1 e0 06             	shl    eax,0x6
c001f229:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f22c:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f232:	68 0a 5d 02 c0       	push   0xc0025d0a
c001f237:	e8 d5 df fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f23c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f240:	89 e8                	mov    eax,ebp
c001f242:	83 c4 10             	add    esp,0x10
c001f245:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f248:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f24b:	83 c2 02             	add    edx,0x2
c001f24e:	83 c0 02             	add    eax,0x2
c001f251:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f257:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f25a:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f260:	39 d5                	cmp    ebp,edx
c001f262:	75 e4                	jne    c001f248 <IDE::detect()+0x2ea>
c001f264:	89 f8                	mov    eax,edi
c001f266:	c1 e0 06             	shl    eax,0x6
c001f269:	01 d8                	add    eax,ebx
c001f26b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f272:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f279:	c1 ea 09             	shr    edx,0x9
c001f27c:	83 e2 01             	and    edx,0x1
c001f27f:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f286:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f28c:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f290:	74 0c                	je     c001f29e <IDE::detect()+0x340>
c001f292:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f29b:	0f 95 c2             	setne  dl
c001f29e:	89 fd                	mov    ebp,edi
c001f2a0:	83 ec 0c             	sub    esp,0xc
c001f2a3:	c1 e5 06             	shl    ebp,0x6
c001f2a6:	01 dd                	add    ebp,ebx
c001f2a8:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f2ae:	68 0e 5d 02 c0       	push   0xc0025d0e
c001f2b3:	e8 59 df fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f2b8:	83 c4 10             	add    esp,0x10
c001f2bb:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f2c0:	75 66                	jne    c001f328 <IDE::detect()+0x3ca>
c001f2c2:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f2c9:	0f 84 b8 00 00 00    	je     c001f387 <IDE::detect()+0x429>
c001f2cf:	83 ec 0c             	sub    esp,0xc
c001f2d2:	68 12 5d 02 c0       	push   0xc0025d12
c001f2d7:	e8 35 df fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f2dc:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f2e3:	e8 a0 04 ff ff       	call   c000f788 <malloc>
c001f2e8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2eb:	89 c5                	mov    ebp,eax
c001f2ed:	e8 44 05 00 00       	call   c001f836 <ATA::ATA()>
c001f2f2:	c7 04 24 16 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d16
c001f2f9:	e8 13 df fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f2fe:	59                   	pop    ecx
c001f2ff:	58                   	pop    eax
c001f300:	55                   	push   ebp
c001f301:	53                   	push   ebx
c001f302:	e8 ef a6 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f307:	c7 04 24 1b 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d1b
c001f30e:	e8 fe de fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f313:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f316:	53                   	push   ebx
c001f317:	57                   	push   edi
c001f318:	6a 00                	push   0x0
c001f31a:	55                   	push   ebp
c001f31b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f31e:	83 c4 14             	add    esp,0x14
c001f321:	68 20 5d 02 c0       	push   0xc0025d20
c001f326:	eb 57                	jmp    c001f37f <IDE::detect()+0x421>
c001f328:	83 ec 0c             	sub    esp,0xc
c001f32b:	68 25 5d 02 c0       	push   0xc0025d25
c001f330:	e8 dc de fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f335:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f33c:	e8 47 04 ff ff       	call   c000f788 <malloc>
c001f341:	89 04 24             	mov    DWORD PTR [esp],eax
c001f344:	89 c5                	mov    ebp,eax
c001f346:	e8 b1 0c 00 00       	call   c001fffc <ATAPI::ATAPI()>
c001f34b:	c7 04 24 2b 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d2b
c001f352:	e8 ba de fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f357:	58                   	pop    eax
c001f358:	5a                   	pop    edx
c001f359:	55                   	push   ebp
c001f35a:	53                   	push   ebx
c001f35b:	e8 96 a6 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f360:	c7 04 24 32 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d32
c001f367:	e8 a5 de fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f36c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f36f:	53                   	push   ebx
c001f370:	57                   	push   edi
c001f371:	6a 00                	push   0x0
c001f373:	55                   	push   ebp
c001f374:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f377:	83 c4 14             	add    esp,0x14
c001f37a:	68 39 5d 02 c0       	push   0xc0025d39
c001f37f:	e8 8d de fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f384:	83 c4 10             	add    esp,0x10
c001f387:	83 ec 0c             	sub    esp,0xc
c001f38a:	47                   	inc    edi
c001f38b:	68 40 5d 02 c0       	push   0xc0025d40
c001f390:	e8 7c de fe ff       	call   c000d211 <KeSetBootMessage(char const*)>
c001f395:	83 c4 10             	add    esp,0x10
c001f398:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f39c:	74 0c                	je     c001f3aa <IDE::detect()+0x44c>
c001f39e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f3a5:	e9 19 fc ff ff       	jmp    c001efc3 <IDE::detect()+0x65>
c001f3aa:	4e                   	dec    esi
c001f3ab:	74 0a                	je     c001f3b7 <IDE::detect()+0x459>
c001f3ad:	be 01 00 00 00       	mov    esi,0x1
c001f3b2:	e9 f5 fb ff ff       	jmp    c001efac <IDE::detect()+0x4e>
c001f3b7:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f3bd:	5b                   	pop    ebx
c001f3be:	5e                   	pop    esi
c001f3bf:	5f                   	pop    edi
c001f3c0:	5d                   	pop    ebp
c001f3c1:	c3                   	ret    

c001f3c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f3c2:	55                   	push   ebp
c001f3c3:	57                   	push   edi
c001f3c4:	56                   	push   esi
c001f3c5:	53                   	push   ebx
c001f3c6:	83 ec 1c             	sub    esp,0x1c
c001f3c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f3cd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f3d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f3d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f3dd:	88 c3                	mov    bl,al
c001f3df:	25 ff 00 00 00       	and    eax,0xff
c001f3e4:	0f 84 88 00 00 00    	je     c001f472 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f3ea:	83 ec 0c             	sub    esp,0xc
c001f3ed:	89 c7                	mov    edi,eax
c001f3ef:	68 44 5d 02 c0       	push   0xc0025d44
c001f3f4:	e8 6d 7b fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f3f9:	83 c4 10             	add    esp,0x10
c001f3fc:	83 ff 01             	cmp    edi,0x1
c001f3ff:	74 6b                	je     c001f46c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f401:	83 ff 02             	cmp    edi,0x2
c001f404:	75 58                	jne    c001f45e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f406:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f40b:	50                   	push   eax
c001f40c:	6a 01                	push   0x1
c001f40e:	01 ff                	add    edi,edi
c001f410:	09 fe                	or     esi,edi
c001f412:	89 f0                	mov    eax,esi
c001f414:	0f b6 f0             	movzx  esi,al
c001f417:	c1 e6 06             	shl    esi,0x6
c001f41a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f422:	50                   	push   eax
c001f423:	55                   	push   ebp
c001f424:	e8 73 f3 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f429:	83 c4 10             	add    esp,0x10
c001f42c:	a8 01                	test   al,0x1
c001f42e:	74 02                	je     c001f432 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f430:	b3 07                	mov    bl,0x7
c001f432:	a8 02                	test   al,0x2
c001f434:	74 02                	je     c001f438 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f436:	b3 03                	mov    bl,0x3
c001f438:	a8 04                	test   al,0x4
c001f43a:	74 02                	je     c001f43e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f43c:	b3 14                	mov    bl,0x14
c001f43e:	a8 08                	test   al,0x8
c001f440:	74 02                	je     c001f444 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f442:	b3 03                	mov    bl,0x3
c001f444:	a8 10                	test   al,0x10
c001f446:	74 02                	je     c001f44a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f448:	b3 15                	mov    bl,0x15
c001f44a:	a8 20                	test   al,0x20
c001f44c:	74 02                	je     c001f450 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f44e:	b3 03                	mov    bl,0x3
c001f450:	a8 40                	test   al,0x40
c001f452:	74 02                	je     c001f456 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f454:	b3 16                	mov    bl,0x16
c001f456:	a8 80                	test   al,0x80
c001f458:	74 18                	je     c001f472 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f45a:	b3 0d                	mov    bl,0xd
c001f45c:	eb 14                	jmp    c001f472 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f45e:	83 ff 03             	cmp    edi,0x3
c001f461:	74 0d                	je     c001f470 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f463:	83 ff 04             	cmp    edi,0x4
c001f466:	75 0a                	jne    c001f472 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f468:	b3 08                	mov    bl,0x8
c001f46a:	eb 06                	jmp    c001f472 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f46c:	b3 13                	mov    bl,0x13
c001f46e:	eb 02                	jmp    c001f472 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f470:	b3 17                	mov    bl,0x17
c001f472:	83 c4 1c             	add    esp,0x1c
c001f475:	88 d8                	mov    al,bl
c001f477:	5b                   	pop    ebx
c001f478:	5e                   	pop    esi
c001f479:	5f                   	pop    edi
c001f47a:	5d                   	pop    ebp
c001f47b:	c3                   	ret    

c001f47c <IDE::polling(unsigned char, unsigned int)>:
c001f47c:	57                   	push   edi
c001f47d:	56                   	push   esi
c001f47e:	53                   	push   ebx
c001f47f:	bb 04 00 00 00       	mov    ebx,0x4
c001f484:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f488:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f48d:	52                   	push   edx
c001f48e:	6a 0c                	push   0xc
c001f490:	56                   	push   esi
c001f491:	57                   	push   edi
c001f492:	e8 05 f3 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f497:	83 c4 10             	add    esp,0x10
c001f49a:	4b                   	dec    ebx
c001f49b:	75 f0                	jne    c001f48d <IDE::polling(unsigned char, unsigned int)+0x11>
c001f49d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f4a2:	50                   	push   eax
c001f4a3:	6a 0c                	push   0xc
c001f4a5:	56                   	push   esi
c001f4a6:	57                   	push   edi
c001f4a7:	e8 f0 f2 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f4ac:	83 c4 10             	add    esp,0x10
c001f4af:	a8 01                	test   al,0x1
c001f4b1:	75 17                	jne    c001f4ca <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f4b3:	a8 20                	test   al,0x20
c001f4b5:	75 0f                	jne    c001f4c6 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f4b7:	4b                   	dec    ebx
c001f4b8:	74 10                	je     c001f4ca <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f4ba:	a8 80                	test   al,0x80
c001f4bc:	75 e4                	jne    c001f4a2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f4be:	a8 08                	test   al,0x8
c001f4c0:	74 e0                	je     c001f4a2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f4c2:	31 c0                	xor    eax,eax
c001f4c4:	eb 06                	jmp    c001f4cc <IDE::polling(unsigned char, unsigned int)+0x50>
c001f4c6:	b0 01                	mov    al,0x1
c001f4c8:	eb 02                	jmp    c001f4cc <IDE::polling(unsigned char, unsigned int)+0x50>
c001f4ca:	b0 02                	mov    al,0x2
c001f4cc:	5b                   	pop    ebx
c001f4cd:	5e                   	pop    esi
c001f4ce:	5f                   	pop    edi
c001f4cf:	c3                   	ret    

c001f4d0 <SATABus::close(int, int, void*)>:
c001f4d0:	31 c0                	xor    eax,eax
c001f4d2:	c3                   	ret    
c001f4d3:	90                   	nop

c001f4d4 <SATABus::detect()>:
c001f4d4:	c3                   	ret    
c001f4d5:	90                   	nop

c001f4d6 <SATABus::SATABus()>:
c001f4d6:	83 ec 0c             	sub    esp,0xc
c001f4d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4dd:	83 ec 08             	sub    esp,0x8
c001f4e0:	68 7c 5d 02 c0       	push   0xc0025d7c
c001f4e5:	50                   	push   eax
c001f4e6:	e8 65 a8 fe ff       	call   c0009d50 <HardDiskController::HardDiskController(char const*)>
c001f4eb:	83 c4 10             	add    esp,0x10
c001f4ee:	ba a8 5d 02 c0       	mov    edx,0xc0025da8
c001f4f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f7:	89 10                	mov    DWORD PTR [eax],edx
c001f4f9:	83 ec 0c             	sub    esp,0xc
c001f4fc:	6a 50                	push   0x50
c001f4fe:	e8 b9 09 ff ff       	call   c000febc <Phys::allocateContiguousPages(int)>
c001f503:	83 c4 10             	add    esp,0x10
c001f506:	89 c2                	mov    edx,eax
c001f508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f50c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f512:	83 ec 0c             	sub    esp,0xc
c001f515:	6a 50                	push   0x50
c001f517:	e8 bf 3c ff ff       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c001f51c:	83 c4 10             	add    esp,0x10
c001f51f:	89 c2                	mov    edx,eax
c001f521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f525:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f52b:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c001f530:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f534:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f53a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f53e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f544:	83 ec 0c             	sub    esp,0xc
c001f547:	6a 03                	push   0x3
c001f549:	6a 50                	push   0x50
c001f54b:	51                   	push   ecx
c001f54c:	52                   	push   edx
c001f54d:	50                   	push   eax
c001f54e:	e8 5b 45 ff ff       	call   c0013aae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f553:	83 c4 20             	add    esp,0x20
c001f556:	90                   	nop
c001f557:	83 c4 0c             	add    esp,0xc
c001f55a:	c3                   	ret    
c001f55b:	90                   	nop

c001f55c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f55c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f560:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f563:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f566:	09 c2                	or     edx,eax
c001f568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f56c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f572:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f574:	31 c0                	xor    eax,eax
c001f576:	c1 e9 08             	shr    ecx,0x8
c001f579:	83 e1 0f             	and    ecx,0xf
c001f57c:	39 c8                	cmp    eax,ecx
c001f57e:	74 0a                	je     c001f58a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f580:	f6 c2 01             	test   dl,0x1
c001f583:	74 08                	je     c001f58d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f585:	d1 ea                	shr    edx,1
c001f587:	40                   	inc    eax
c001f588:	eb f2                	jmp    c001f57c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f58a:	83 c8 ff             	or     eax,0xffffffff
c001f58d:	c3                   	ret    

c001f58e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f58e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f592:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f595:	89 c2                	mov    edx,eax
c001f597:	c1 ea 08             	shr    edx,0x8
c001f59a:	83 e2 0f             	and    edx,0xf
c001f59d:	4a                   	dec    edx
c001f59e:	75 32                	jne    c001f5d2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f5a0:	83 e0 0f             	and    eax,0xf
c001f5a3:	83 f8 03             	cmp    eax,0x3
c001f5a6:	75 2a                	jne    c001f5d2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f5a8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f5ab:	b8 02 00 00 00       	mov    eax,0x2
c001f5b0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f5b6:	74 1c                	je     c001f5d4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f5b8:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f5be:	b8 04 00 00 00       	mov    eax,0x4
c001f5c3:	74 0f                	je     c001f5d4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f5c5:	31 c0                	xor    eax,eax
c001f5c7:	83 fa 03             	cmp    edx,0x3
c001f5ca:	0f 94 c0             	sete   al
c001f5cd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f5d1:	c3                   	ret    
c001f5d2:	31 c0                	xor    eax,eax
c001f5d4:	c3                   	ret    
c001f5d5:	90                   	nop

c001f5d6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f5d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5da:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f5dd:	0f ba e2 0f          	bt     edx,0xf
c001f5e1:	72 f7                	jb     c001f5da <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f5e3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f5e6:	83 ca 10             	or     edx,0x10
c001f5e9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f5ec:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f5ef:	83 ca 01             	or     edx,0x1
c001f5f2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f5f5:	c3                   	ret    

c001f5f6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f5f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5fa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f5fd:	83 e2 fe             	and    edx,0xfffffffe
c001f600:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f603:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f606:	83 e2 ef             	and    edx,0xffffffef
c001f609:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f60c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f60f:	0f ba e2 0e          	bt     edx,0xe
c001f613:	72 f7                	jb     c001f60c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f615:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f618:	0f ba e2 0f          	bt     edx,0xf
c001f61c:	72 ee                	jb     c001f60c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f61e:	c3                   	ret    
c001f61f:	90                   	nop

c001f620 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f620:	55                   	push   ebp
c001f621:	57                   	push   edi
c001f622:	56                   	push   esi
c001f623:	53                   	push   ebx
c001f624:	83 ec 1c             	sub    esp,0x1c
c001f627:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f62b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f62f:	53                   	push   ebx
c001f630:	57                   	push   edi
c001f631:	e8 c0 ff ff ff       	call   c001f5f6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f636:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f63a:	83 ec 0c             	sub    esp,0xc
c001f63d:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f643:	c1 e5 0a             	shl    ebp,0xa
c001f646:	01 e8                	add    eax,ebp
c001f648:	89 03                	mov    DWORD PTR [ebx],eax
c001f64a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f64c:	68 00 04 00 00       	push   0x400
c001f651:	6a 00                	push   0x0
c001f653:	50                   	push   eax
c001f654:	e8 97 0e fe ff       	call   c00004f0 <memset>
c001f659:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f65f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001f663:	83 c4 1c             	add    esp,0x1c
c001f666:	01 e8                	add    eax,ebp
c001f668:	89 03                	mov    DWORD PTR [ebx],eax
c001f66a:	c1 e6 08             	shl    esi,0x8
c001f66d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f674:	81 c6 00 80 00 00    	add    esi,0x8000
c001f67a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f680:	01 f0                	add    eax,esi
c001f682:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f685:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f688:	68 00 01 00 00       	push   0x100
c001f68d:	6a 00                	push   0x0
c001f68f:	50                   	push   eax
c001f690:	e8 5b 0e fe ff       	call   c00004f0 <memset>
c001f695:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f69b:	31 d2                	xor    edx,edx
c001f69d:	01 f0                	add    eax,esi
c001f69f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f6a2:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f6a9:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001f6af:	01 ee                	add    esi,ebp
c001f6b1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f6b5:	83 c4 10             	add    esp,0x10
c001f6b8:	c1 e5 0d             	shl    ebp,0xd
c001f6bb:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001f6c1:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001f6c7:	83 c6 20             	add    esi,0x20
c001f6ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f6ce:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f6d4:	01 e8                	add    eax,ebp
c001f6d6:	01 d0                	add    eax,edx
c001f6d8:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001f6db:	52                   	push   edx
c001f6dc:	68 00 01 00 00       	push   0x100
c001f6e1:	6a 00                	push   0x0
c001f6e3:	50                   	push   eax
c001f6e4:	e8 07 0e fe ff       	call   c00004f0 <memset>
c001f6e9:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f6ef:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001f6f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f6fa:	83 c4 10             	add    esp,0x10
c001f6fd:	01 e8                	add    eax,ebp
c001f6ff:	01 d0                	add    eax,edx
c001f701:	81 c2 00 01 00 00    	add    edx,0x100
c001f707:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001f70a:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001f710:	75 af                	jne    c001f6c1 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001f712:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f719:	50                   	push   eax
c001f71a:	50                   	push   eax
c001f71b:	53                   	push   ebx
c001f71c:	57                   	push   edi
c001f71d:	e8 b4 fe ff ff       	call   c001f5d6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f722:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f729:	83 c4 2c             	add    esp,0x2c
c001f72c:	5b                   	pop    ebx
c001f72d:	5e                   	pop    esi
c001f72e:	5f                   	pop    edi
c001f72f:	5d                   	pop    ebp
c001f730:	c3                   	ret    
c001f731:	90                   	nop

c001f732 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f732:	55                   	push   ebp
c001f733:	57                   	push   edi
c001f734:	56                   	push   esi
c001f735:	53                   	push   ebx
c001f736:	31 db                	xor    ebx,ebx
c001f738:	83 ec 0c             	sub    esp,0xc
c001f73b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f73f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f743:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f746:	f7 c7 01 00 00 00    	test   edi,0x1
c001f74c:	74 7a                	je     c001f7c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f74e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f752:	89 d8                	mov    eax,ebx
c001f754:	c1 e0 07             	shl    eax,0x7
c001f757:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f75e:	55                   	push   ebp
c001f75f:	56                   	push   esi
c001f760:	e8 29 fe ff ff       	call   c001f58e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f765:	5a                   	pop    edx
c001f766:	59                   	pop    ecx
c001f767:	83 f8 01             	cmp    eax,0x1
c001f76a:	75 21                	jne    c001f78d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f76c:	50                   	push   eax
c001f76d:	53                   	push   ebx
c001f76e:	55                   	push   ebp
c001f76f:	56                   	push   esi
c001f770:	e8 ab fe ff ff       	call   c001f620 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f775:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001f77c:	e8 07 00 ff ff       	call   c000f788 <malloc>
c001f781:	89 04 24             	mov    DWORD PTR [esp],eax
c001f784:	89 c5                	mov    ebp,eax
c001f786:	e8 37 0f 00 00       	call   c00206c2 <SATA::SATA()>
c001f78b:	eb 24                	jmp    c001f7b1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001f78d:	83 f8 04             	cmp    eax,0x4
c001f790:	75 36                	jne    c001f7c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f792:	51                   	push   ecx
c001f793:	53                   	push   ebx
c001f794:	55                   	push   ebp
c001f795:	56                   	push   esi
c001f796:	e8 85 fe ff ff       	call   c001f620 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f79b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f7a2:	e8 e1 ff fe ff       	call   c000f788 <malloc>
c001f7a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7aa:	89 c5                	mov    ebp,eax
c001f7ac:	e8 a7 12 00 00       	call   c0020a58 <SATAPI::SATAPI()>
c001f7b1:	58                   	pop    eax
c001f7b2:	5a                   	pop    edx
c001f7b3:	55                   	push   ebp
c001f7b4:	56                   	push   esi
c001f7b5:	e8 3c a2 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f7ba:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001f7bd:	56                   	push   esi
c001f7be:	6a 00                	push   0x0
c001f7c0:	53                   	push   ebx
c001f7c1:	55                   	push   ebp
c001f7c2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001f7c5:	83 c4 20             	add    esp,0x20
c001f7c8:	d1 ef                	shr    edi,1
c001f7ca:	43                   	inc    ebx
c001f7cb:	83 fb 20             	cmp    ebx,0x20
c001f7ce:	0f 85 72 ff ff ff    	jne    c001f746 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001f7d4:	83 c4 0c             	add    esp,0xc
c001f7d7:	5b                   	pop    ebx
c001f7d8:	5e                   	pop    esi
c001f7d9:	5f                   	pop    edi
c001f7da:	5d                   	pop    ebp
c001f7db:	c3                   	ret    

c001f7dc <SATABus::open(int, int, void*)>:
c001f7dc:	53                   	push   ebx
c001f7dd:	83 ec 08             	sub    esp,0x8
c001f7e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7e4:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f7ea:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f7f0:	e8 3f 72 ff ff       	call   c0016a34 <KeDisablePreemption()>
c001f7f5:	52                   	push   edx
c001f7f6:	52                   	push   edx
c001f7f7:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f7fd:	53                   	push   ebx
c001f7fe:	e8 2f ff ff ff       	call   c001f732 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f803:	e8 54 72 ff ff       	call   c0016a5c <KeRestorePreemption()>
c001f808:	83 c4 18             	add    esp,0x18
c001f80b:	31 c0                	xor    eax,eax
c001f80d:	5b                   	pop    ebx
c001f80e:	c3                   	ret    
c001f80f:	90                   	nop

c001f810 <ATA::close(int, int, void*)>:
c001f810:	83 ec 0c             	sub    esp,0xc
c001f813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f817:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f81d:	85 c0                	test   eax,eax
c001f81f:	74 0c                	je     c001f82d <ATA::close(int, int, void*)+0x1d>
c001f821:	8b 10                	mov    edx,DWORD PTR [eax]
c001f823:	83 ec 0c             	sub    esp,0xc
c001f826:	50                   	push   eax
c001f827:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f82a:	83 c4 10             	add    esp,0x10
c001f82d:	31 c0                	xor    eax,eax
c001f82f:	83 c4 0c             	add    esp,0xc
c001f832:	c3                   	ret    
c001f833:	90                   	nop

c001f834 <ATA::powerSaving(PowerSavingLevel)>:
c001f834:	c3                   	ret    
c001f835:	90                   	nop

c001f836 <ATA::ATA()>:
c001f836:	83 ec 0c             	sub    esp,0xc
c001f839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83d:	83 ec 04             	sub    esp,0x4
c001f840:	68 00 02 00 00       	push   0x200
c001f845:	68 29 5f 02 c0       	push   0xc0025f29
c001f84a:	50                   	push   eax
c001f84b:	e8 8a a5 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f850:	83 c4 10             	add    esp,0x10
c001f853:	ba 90 5e 02 c0       	mov    edx,0xc0025e90
c001f858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85c:	89 10                	mov    DWORD PTR [eax],edx
c001f85e:	90                   	nop
c001f85f:	83 c4 0c             	add    esp,0xc
c001f862:	c3                   	ret    
c001f863:	90                   	nop

c001f864 <ATA::flush(bool)>:
c001f864:	53                   	push   ebx
c001f865:	83 ec 08             	sub    esp,0x8
c001f868:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f86d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f871:	83 f8 01             	cmp    eax,0x1
c001f874:	19 c0                	sbb    eax,eax
c001f876:	83 e0 fd             	and    eax,0xfffffffd
c001f879:	05 ea 00 00 00       	add    eax,0xea
c001f87e:	50                   	push   eax
c001f87f:	6a 07                	push   0x7
c001f881:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f888:	50                   	push   eax
c001f889:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f88f:	e8 48 ee ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f894:	83 c4 0c             	add    esp,0xc
c001f897:	6a 00                	push   0x0
c001f899:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8a0:	50                   	push   eax
c001f8a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8a7:	e8 d0 fb ff ff       	call   c001f47c <IDE::polling(unsigned char, unsigned int)>
c001f8ac:	83 c4 18             	add    esp,0x18
c001f8af:	5b                   	pop    ebx
c001f8b0:	c3                   	ret    
c001f8b1:	90                   	nop

c001f8b2 <ATA::readyForCommand()>:
c001f8b2:	56                   	push   esi
c001f8b3:	53                   	push   ebx
c001f8b4:	31 db                	xor    ebx,ebx
c001f8b6:	50                   	push   eax
c001f8b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f8bb:	50                   	push   eax
c001f8bc:	6a 0c                	push   0xc
c001f8be:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f8c5:	50                   	push   eax
c001f8c6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f8cc:	e8 cb ee ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c001f8d1:	83 c4 10             	add    esp,0x10
c001f8d4:	a8 88                	test   al,0x88
c001f8d6:	74 20                	je     c001f8f8 <ATA::readyForCommand()+0x46>
c001f8d8:	43                   	inc    ebx
c001f8d9:	83 fb 63             	cmp    ebx,0x63
c001f8dc:	7e dd                	jle    c001f8bb <ATA::readyForCommand()+0x9>
c001f8de:	51                   	push   ecx
c001f8df:	51                   	push   ecx
c001f8e0:	6a 00                	push   0x0
c001f8e2:	6a 0a                	push   0xa
c001f8e4:	e8 2f 76 ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c001f8e9:	83 c4 10             	add    esp,0x10
c001f8ec:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f8f2:	75 c7                	jne    c001f8bb <ATA::readyForCommand()+0x9>
c001f8f4:	31 c0                	xor    eax,eax
c001f8f6:	eb 02                	jmp    c001f8fa <ATA::readyForCommand()+0x48>
c001f8f8:	b0 01                	mov    al,0x1
c001f8fa:	5a                   	pop    edx
c001f8fb:	5b                   	pop    ebx
c001f8fc:	5e                   	pop    esi
c001f8fd:	c3                   	ret    

c001f8fe <ATA::access(unsigned long long, int, void*, bool)>:
c001f8fe:	55                   	push   ebp
c001f8ff:	57                   	push   edi
c001f900:	56                   	push   esi
c001f901:	53                   	push   ebx
c001f902:	83 ec 2c             	sub    esp,0x2c
c001f905:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f909:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f90d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f911:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f915:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f919:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f91d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001f921:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f927:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f92b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f931:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f935:	c1 e0 06             	shl    eax,0x6
c001f938:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f940:	74 5b                	je     c001f99d <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001f942:	89 fa                	mov    edx,edi
c001f944:	89 f0                	mov    eax,esi
c001f946:	c1 ea 1c             	shr    edx,0x1c
c001f949:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001f94d:	89 d1                	mov    ecx,edx
c001f94f:	09 c1                	or     ecx,eax
c001f951:	74 25                	je     c001f978 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001f953:	31 ed                	xor    ebp,ebp
c001f955:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f95c:	89 fa                	mov    edx,edi
c001f95e:	89 f0                	mov    eax,esi
c001f960:	0f ad d0             	shrd   eax,edx,cl
c001f963:	d3 ea                	shr    edx,cl
c001f965:	f6 c1 20             	test   cl,0x20
c001f968:	74 02                	je     c001f96c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001f96a:	89 d0                	mov    eax,edx
c001f96c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f970:	45                   	inc    ebp
c001f971:	83 fd 06             	cmp    ebp,0x6
c001f974:	75 df                	jne    c001f955 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001f976:	eb 71                	jmp    c001f9e9 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001f978:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f97d:	89 f0                	mov    eax,esi
c001f97f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f986:	0f ac f8 10          	shrd   eax,edi,0x10
c001f98a:	bf 01 00 00 00       	mov    edi,0x1
c001f98f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f993:	c1 ee 18             	shr    esi,0x18
c001f996:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f99b:	eb 53                	jmp    c001f9f0 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001f99d:	6a 00                	push   0x0
c001f99f:	6a 3f                	push   0x3f
c001f9a1:	57                   	push   edi
c001f9a2:	56                   	push   esi
c001f9a3:	e8 cc 20 00 00       	call   c0021a74 <__umoddi3>
c001f9a8:	83 c4 10             	add    esp,0x10
c001f9ab:	40                   	inc    eax
c001f9ac:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f9b0:	6a 00                	push   0x0
c001f9b2:	68 f0 03 00 00       	push   0x3f0
c001f9b7:	57                   	push   edi
c001f9b8:	56                   	push   esi
c001f9b9:	e8 b6 1f 00 00       	call   c0021974 <__udivdi3>
c001f9be:	83 c4 10             	add    esp,0x10
c001f9c1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f9c6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f9cd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f9d2:	6a 00                	push   0x0
c001f9d4:	6a 3f                	push   0x3f
c001f9d6:	57                   	push   edi
c001f9d7:	31 ff                	xor    edi,edi
c001f9d9:	56                   	push   esi
c001f9da:	e8 95 1f 00 00       	call   c0021974 <__udivdi3>
c001f9df:	83 c4 10             	add    esp,0x10
c001f9e2:	83 e0 0f             	and    eax,0xf
c001f9e5:	89 c6                	mov    esi,eax
c001f9e7:	eb 07                	jmp    c001f9f0 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001f9e9:	31 f6                	xor    esi,esi
c001f9eb:	bf 02 00 00 00       	mov    edi,0x2
c001f9f0:	55                   	push   ebp
c001f9f1:	6a 00                	push   0x0
c001f9f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9fa:	50                   	push   eax
c001f9fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f9ff:	e8 e8 ee ff ff       	call   c001e8ec <IDE::enableIRQs(unsigned char, bool)>
c001fa04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa07:	e8 a6 fe ff ff       	call   c001f8b2 <ATA::readyForCommand()>
c001fa0c:	83 c4 10             	add    esp,0x10
c001fa0f:	84 c0                	test   al,al
c001fa11:	75 0a                	jne    c001fa1d <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001fa13:	be 01 00 00 00       	mov    esi,0x1
c001fa18:	e9 df 02 00 00       	jmp    c001fcfc <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001fa1d:	fa                   	cli    
c001fa1e:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001fa24:	f7 c7 03 00 00 00    	test   edi,0x3
c001fa2a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001fa30:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fa36:	75 0a                	jne    c001fa42 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001fa38:	c1 e0 04             	shl    eax,0x4
c001fa3b:	09 c6                	or     esi,eax
c001fa3d:	83 ce a0             	or     esi,0xffffffa0
c001fa40:	eb 08                	jmp    c001fa4a <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001fa42:	c1 e0 04             	shl    eax,0x4
c001fa45:	09 c6                	or     esi,eax
c001fa47:	83 ce e0             	or     esi,0xffffffe0
c001fa4a:	89 f0                	mov    eax,esi
c001fa4c:	0f b6 d2             	movzx  edx,dl
c001fa4f:	0f b6 f0             	movzx  esi,al
c001fa52:	56                   	push   esi
c001fa53:	6a 06                	push   0x6
c001fa55:	52                   	push   edx
c001fa56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa5c:	e8 7b ec ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa61:	83 c4 10             	add    esp,0x10
c001fa64:	6a 00                	push   0x0
c001fa66:	6a 01                	push   0x1
c001fa68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa6f:	50                   	push   eax
c001fa70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa76:	e8 61 ec ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa7b:	89 f8                	mov    eax,edi
c001fa7d:	83 c4 10             	add    esp,0x10
c001fa80:	0f b6 f0             	movzx  esi,al
c001fa83:	83 fe 02             	cmp    esi,0x2
c001fa86:	75 6e                	jne    c001faf6 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001fa88:	6a 00                	push   0x0
c001fa8a:	6a 08                	push   0x8
c001fa8c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa93:	50                   	push   eax
c001fa94:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa9a:	e8 3d ec ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa9f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001faa4:	50                   	push   eax
c001faa5:	6a 09                	push   0x9
c001faa7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001faae:	50                   	push   eax
c001faaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fab5:	e8 22 ec ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001faba:	83 c4 20             	add    esp,0x20
c001fabd:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fac2:	50                   	push   eax
c001fac3:	6a 0a                	push   0xa
c001fac5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001facc:	50                   	push   eax
c001facd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fad3:	e8 04 ec ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fad8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fadd:	50                   	push   eax
c001fade:	6a 0b                	push   0xb
c001fae0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fae7:	50                   	push   eax
c001fae8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001faee:	e8 e9 eb ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001faf3:	83 c4 20             	add    esp,0x20
c001faf6:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fafb:	50                   	push   eax
c001fafc:	6a 02                	push   0x2
c001fafe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb05:	50                   	push   eax
c001fb06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb0c:	e8 cb eb ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb11:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fb16:	50                   	push   eax
c001fb17:	6a 03                	push   0x3
c001fb19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb20:	50                   	push   eax
c001fb21:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb27:	e8 b0 eb ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb2c:	83 c4 20             	add    esp,0x20
c001fb2f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fb34:	50                   	push   eax
c001fb35:	6a 04                	push   0x4
c001fb37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb3e:	50                   	push   eax
c001fb3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb45:	e8 92 eb ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb4a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fb4f:	50                   	push   eax
c001fb50:	6a 05                	push   0x5
c001fb52:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb59:	50                   	push   eax
c001fb5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb60:	e8 77 eb ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb65:	83 c4 20             	add    esp,0x20
c001fb68:	83 fe 02             	cmp    esi,0x2
c001fb6b:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001fb70:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001fb75:	85 c9                	test   ecx,ecx
c001fb77:	74 07                	je     c001fb80 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001fb79:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fb7e:	75 45                	jne    c001fbc5 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001fb80:	89 f8                	mov    eax,edi
c001fb82:	0f b6 f8             	movzx  edi,al
c001fb85:	31 c0                	xor    eax,eax
c001fb87:	4f                   	dec    edi
c001fb88:	0f 94 c0             	sete   al
c001fb8b:	89 c6                	mov    esi,eax
c001fb8d:	75 0c                	jne    c001fb9b <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001fb8f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fb94:	b8 30 00 00 00       	mov    eax,0x30
c001fb99:	75 2f                	jne    c001fbca <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001fb9b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fb9f:	83 f2 01             	xor    edx,0x1
c001fba2:	85 c9                	test   ecx,ecx
c001fba4:	74 09                	je     c001fbaf <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001fba6:	84 d2                	test   dl,dl
c001fba8:	b8 24 00 00 00       	mov    eax,0x24
c001fbad:	75 1b                	jne    c001fbca <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001fbaf:	85 f6                	test   esi,esi
c001fbb1:	0f 84 5c fe ff ff    	je     c001fa13 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001fbb7:	84 d2                	test   dl,dl
c001fbb9:	b8 20 00 00 00       	mov    eax,0x20
c001fbbe:	75 0a                	jne    c001fbca <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001fbc0:	e9 4e fe ff ff       	jmp    c001fa13 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001fbc5:	b8 34 00 00 00       	mov    eax,0x34
c001fbca:	50                   	push   eax
c001fbcb:	6a 07                	push   0x7
c001fbcd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbd4:	50                   	push   eax
c001fbd5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbdb:	e8 fc ea ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbe0:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c001fbe7:	83 c4 10             	add    esp,0x10
c001fbea:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c001fbf1:	75 01                	jne    c001fbf4 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001fbf3:	fb                   	sti    
c001fbf4:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001fbf8:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001fbfd:	85 f6                	test   esi,esi
c001fbff:	0f 84 dd 00 00 00    	je     c001fce2 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001fc05:	57                   	push   edi
c001fc06:	6a 01                	push   0x1
c001fc08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc0f:	50                   	push   eax
c001fc10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc16:	e8 61 f8 ff ff       	call   c001f47c <IDE::polling(unsigned char, unsigned int)>
c001fc1b:	83 c4 10             	add    esp,0x10
c001fc1e:	0f b6 c0             	movzx  eax,al
c001fc21:	85 c0                	test   eax,eax
c001fc23:	74 23                	je     c001fc48 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001fc25:	50                   	push   eax
c001fc26:	89 c6                	mov    esi,eax
c001fc28:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001fc2f:	50                   	push   eax
c001fc30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc37:	50                   	push   eax
c001fc38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc3e:	e8 7f f7 ff ff       	call   c001f3c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fc43:	e9 b1 00 00 00       	jmp    c001fcf9 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001fc48:	85 ed                	test   ebp,ebp
c001fc4a:	74 49                	je     c001fc95 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001fc4c:	fa                   	cli    
c001fc4d:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001fc53:	31 ff                	xor    edi,edi
c001fc55:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fc59:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001fc5d:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001fc62:	51                   	push   ecx
c001fc63:	51                   	push   ecx
c001fc64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc6b:	50                   	push   eax
c001fc6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc72:	e8 53 ea ff ff       	call   c001e6ca <IDE::getBase(unsigned char)>
c001fc77:	89 c2                	mov    edx,eax
c001fc79:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001fc7e:	66 ef                	out    dx,ax
c001fc80:	47                   	inc    edi
c001fc81:	83 c4 10             	add    esp,0x10
c001fc84:	81 ff 00 01 00 00    	cmp    edi,0x100
c001fc8a:	75 c9                	jne    c001fc55 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001fc8c:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c001fc93:	eb 35                	jmp    c001fcca <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001fc95:	fa                   	cli    
c001fc96:	52                   	push   edx
c001fc97:	52                   	push   edx
c001fc98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc9f:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001fca5:	50                   	push   eax
c001fca6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fcac:	e8 19 ea ff ff       	call   c001e6ca <IDE::getBase(unsigned char)>
c001fcb1:	b9 00 01 00 00       	mov    ecx,0x100
c001fcb6:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001fcba:	89 c2                	mov    edx,eax
c001fcbc:	fc                   	cld    
c001fcbd:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001fcc0:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c001fcc7:	83 c4 10             	add    esp,0x10
c001fcca:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c001fcd1:	75 01                	jne    c001fcd4 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001fcd3:	fb                   	sti    
c001fcd4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001fcdc:	4e                   	dec    esi
c001fcdd:	e9 1b ff ff ff       	jmp    c001fbfd <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001fce2:	31 f6                	xor    esi,esi
c001fce4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fce9:	74 11                	je     c001fcfc <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001fceb:	50                   	push   eax
c001fcec:	50                   	push   eax
c001fced:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001fcf2:	50                   	push   eax
c001fcf3:	53                   	push   ebx
c001fcf4:	e8 6b fb ff ff       	call   c001f864 <ATA::flush(bool)>
c001fcf9:	83 c4 10             	add    esp,0x10
c001fcfc:	83 c4 2c             	add    esp,0x2c
c001fcff:	89 f0                	mov    eax,esi
c001fd01:	5b                   	pop    ebx
c001fd02:	5e                   	pop    esi
c001fd03:	5f                   	pop    edi
c001fd04:	5d                   	pop    ebp
c001fd05:	c3                   	ret    

c001fd06 <ATA::read(unsigned long long, int, void*)>:
c001fd06:	57                   	push   edi
c001fd07:	b8 04 00 00 00       	mov    eax,0x4
c001fd0c:	56                   	push   esi
c001fd0d:	53                   	push   ebx
c001fd0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fd12:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fd16:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fd1a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fd1e:	8d 7a ff             	lea    edi,[edx-0x1]
c001fd21:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fd27:	77 25                	ja     c001fd4e <ATA::read(unsigned long long, int, void*)+0x48>
c001fd29:	85 f6                	test   esi,esi
c001fd2b:	b8 06 00 00 00       	mov    eax,0x6
c001fd30:	74 1c                	je     c001fd4e <ATA::read(unsigned long long, int, void*)+0x48>
c001fd32:	50                   	push   eax
c001fd33:	50                   	push   eax
c001fd34:	6a 00                	push   0x0
c001fd36:	56                   	push   esi
c001fd37:	52                   	push   edx
c001fd38:	53                   	push   ebx
c001fd39:	51                   	push   ecx
c001fd3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fd3e:	e8 bb fb ff ff       	call   c001f8fe <ATA::access(unsigned long long, int, void*, bool)>
c001fd43:	83 c4 20             	add    esp,0x20
c001fd46:	85 c0                	test   eax,eax
c001fd48:	0f 95 c0             	setne  al
c001fd4b:	0f b6 c0             	movzx  eax,al
c001fd4e:	5b                   	pop    ebx
c001fd4f:	5e                   	pop    esi
c001fd50:	5f                   	pop    edi
c001fd51:	c3                   	ret    

c001fd52 <ATA::write(unsigned long long, int, void*)>:
c001fd52:	57                   	push   edi
c001fd53:	b8 04 00 00 00       	mov    eax,0x4
c001fd58:	56                   	push   esi
c001fd59:	53                   	push   ebx
c001fd5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fd5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fd62:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fd66:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fd6a:	8d 7a ff             	lea    edi,[edx-0x1]
c001fd6d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fd73:	77 25                	ja     c001fd9a <ATA::write(unsigned long long, int, void*)+0x48>
c001fd75:	85 f6                	test   esi,esi
c001fd77:	b8 06 00 00 00       	mov    eax,0x6
c001fd7c:	74 1c                	je     c001fd9a <ATA::write(unsigned long long, int, void*)+0x48>
c001fd7e:	50                   	push   eax
c001fd7f:	50                   	push   eax
c001fd80:	6a 01                	push   0x1
c001fd82:	56                   	push   esi
c001fd83:	52                   	push   edx
c001fd84:	53                   	push   ebx
c001fd85:	51                   	push   ecx
c001fd86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fd8a:	e8 6f fb ff ff       	call   c001f8fe <ATA::access(unsigned long long, int, void*, bool)>
c001fd8f:	83 c4 20             	add    esp,0x20
c001fd92:	85 c0                	test   eax,eax
c001fd94:	0f 95 c0             	setne  al
c001fd97:	0f b6 c0             	movzx  eax,al
c001fd9a:	5b                   	pop    ebx
c001fd9b:	5e                   	pop    esi
c001fd9c:	5f                   	pop    edi
c001fd9d:	c3                   	ret    

c001fd9e <ATA::detectCHS()>:
c001fd9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fda2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fda8:	c1 e0 06             	shl    eax,0x6
c001fdab:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fdb1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fdbb:	c7 44 24 04 cc 5d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025dcc
c001fdc3:	e9 1c fe fe ff       	jmp    c000fbe4 <KePanic(char const*)>

c001fdc8 <ATA::open(int, int, void*)>:
c001fdc8:	53                   	push   ebx
c001fdc9:	83 ec 08             	sub    esp,0x8
c001fdcc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fdd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fdd4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fdd8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fdde:	c1 e0 06             	shl    eax,0x6
c001fde1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fde7:	01 d0                	add    eax,edx
c001fde9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fdf0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fdf6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fdfd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fe07:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fe0e:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fe14:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fe1b:	75 0c                	jne    c001fe29 <ATA::open(int, int, void*)+0x61>
c001fe1d:	83 ec 0c             	sub    esp,0xc
c001fe20:	53                   	push   ebx
c001fe21:	e8 78 ff ff ff       	call   c001fd9e <ATA::detectCHS()>
c001fe26:	83 c4 10             	add    esp,0x10
c001fe29:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fe2f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fe35:	c1 e0 06             	shl    eax,0x6
c001fe38:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fe3f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fe49:	d1 e8                	shr    eax,1
c001fe4b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fe51:	6a 04                	push   0x4
c001fe53:	6a 0c                	push   0xc
c001fe55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe5c:	50                   	push   eax
c001fe5d:	52                   	push   edx
c001fe5e:	e8 79 e8 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe63:	90                   	nop
c001fe64:	90                   	nop
c001fe65:	6a 00                	push   0x0
c001fe67:	6a 0c                	push   0xc
c001fe69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe70:	50                   	push   eax
c001fe71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe77:	e8 60 e8 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe7c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fe82:	83 c4 20             	add    esp,0x20
c001fe85:	c1 e0 06             	shl    eax,0x6
c001fe88:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001fe8e:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001fe95:	0f 84 00 01 00 00    	je     c001ff9b <ATA::open(int, int, void*)+0x1d3>
c001fe9b:	83 ec 0c             	sub    esp,0xc
c001fe9e:	6a 08                	push   0x8
c001fea0:	e8 17 00 ff ff       	call   c000febc <Phys::allocateContiguousPages(int)>
c001fea5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001feab:	c7 04 24 de 5d 02 c0 	mov    DWORD PTR [esp],0xc0025dde
c001feb2:	e8 af 70 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001feb7:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001febe:	e8 18 33 ff ff       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c001fec3:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001fec9:	6a 03                	push   0x3
c001fecb:	50                   	push   eax
c001fecc:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001fed2:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c001fed8:	e8 d7 39 ff ff       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fedd:	83 c4 20             	add    esp,0x20
c001fee0:	e8 f9 fe fe ff       	call   c000fdde <Phys::allocatePage()>
c001fee5:	83 ec 0c             	sub    esp,0xc
c001fee8:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001feee:	6a 01                	push   0x1
c001fef0:	e8 e6 32 ff ff       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c001fef5:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001fefb:	6a 03                	push   0x3
c001fefd:	50                   	push   eax
c001fefe:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001ff04:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c001ff0a:	e8 a5 39 ff ff       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ff0f:	83 c4 14             	add    esp,0x14
c001ff12:	68 17 5e 02 c0       	push   0xc0025e17
c001ff17:	e8 4a 70 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ff1c:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001ff23:	50                   	push   eax
c001ff24:	6a 12                	push   0x12
c001ff26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff2d:	50                   	push   eax
c001ff2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff34:	e8 a3 e7 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff39:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001ff3f:	83 c4 20             	add    esp,0x20
c001ff42:	0f b6 c4             	movzx  eax,ah
c001ff45:	50                   	push   eax
c001ff46:	6a 13                	push   0x13
c001ff48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff4f:	50                   	push   eax
c001ff50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff56:	e8 81 e7 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff5b:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001ff62:	50                   	push   eax
c001ff63:	6a 14                	push   0x14
c001ff65:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff6c:	50                   	push   eax
c001ff6d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff73:	e8 64 e7 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff78:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001ff7f:	83 c4 20             	add    esp,0x20
c001ff82:	50                   	push   eax
c001ff83:	6a 15                	push   0x15
c001ff85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff8c:	50                   	push   eax
c001ff8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff93:	e8 44 e7 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff98:	83 c4 10             	add    esp,0x10
c001ff9b:	83 ec 0c             	sub    esp,0xc
c001ff9e:	53                   	push   ebx
c001ff9f:	e8 9e 9e fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c001ffa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ffa7:	e8 36 ad fe ff       	call   c000ace2 <createPartitionsForDisk(PhysicalDisk*)>
c001ffac:	83 c4 18             	add    esp,0x18
c001ffaf:	31 c0                	xor    eax,eax
c001ffb1:	5b                   	pop    ebx
c001ffb2:	c3                   	ret    

c001ffb3 <combineCharAndColour(char, unsigned char)>:
c001ffb3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ffb8:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001ffbe:	c1 e0 08             	shl    eax,0x8
c001ffc1:	09 d0                	or     eax,edx
c001ffc3:	c3                   	ret    

c001ffc4 <combineColours(unsigned char, unsigned char)>:
c001ffc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ffc9:	c1 e0 04             	shl    eax,0x4
c001ffcc:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001ffd0:	c3                   	ret    
c001ffd1:	90                   	nop

c001ffd2 <ATAPI::write(unsigned long long, int, void*)>:
c001ffd2:	b8 03 00 00 00       	mov    eax,0x3
c001ffd7:	c3                   	ret    

c001ffd8 <ATAPI::close(int, int, void*)>:
c001ffd8:	83 ec 0c             	sub    esp,0xc
c001ffdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffdf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ffe5:	85 c0                	test   eax,eax
c001ffe7:	74 0c                	je     c001fff5 <ATAPI::close(int, int, void*)+0x1d>
c001ffe9:	8b 10                	mov    edx,DWORD PTR [eax]
c001ffeb:	83 ec 0c             	sub    esp,0xc
c001ffee:	50                   	push   eax
c001ffef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fff2:	83 c4 10             	add    esp,0x10
c001fff5:	31 c0                	xor    eax,eax
c001fff7:	83 c4 0c             	add    esp,0xc
c001fffa:	c3                   	ret    
c001fffb:	90                   	nop

c001fffc <ATAPI::ATAPI()>:
c001fffc:	83 ec 0c             	sub    esp,0xc
c001ffff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020003:	83 ec 04             	sub    esp,0x4
c0020006:	68 00 08 00 00       	push   0x800
c002000b:	68 c9 5f 02 c0       	push   0xc0025fc9
c0020010:	50                   	push   eax
c0020011:	e8 c4 9d fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020016:	83 c4 10             	add    esp,0x10
c0020019:	ba d8 5e 02 c0       	mov    edx,0xc0025ed8
c002001e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020022:	89 10                	mov    DWORD PTR [eax],edx
c0020024:	90                   	nop
c0020025:	83 c4 0c             	add    esp,0xc
c0020028:	c3                   	ret    
c0020029:	90                   	nop

c002002a <ATAPI::readyForCommand()>:
c002002a:	56                   	push   esi
c002002b:	53                   	push   ebx
c002002c:	31 db                	xor    ebx,ebx
c002002e:	50                   	push   eax
c002002f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020033:	50                   	push   eax
c0020034:	6a 0c                	push   0xc
c0020036:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002003d:	50                   	push   eax
c002003e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020044:	e8 53 e7 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c0020049:	83 c4 10             	add    esp,0x10
c002004c:	a8 88                	test   al,0x88
c002004e:	74 26                	je     c0020076 <ATAPI::readyForCommand()+0x4c>
c0020050:	43                   	inc    ebx
c0020051:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0020057:	7e da                	jle    c0020033 <ATAPI::readyForCommand()+0x9>
c0020059:	51                   	push   ecx
c002005a:	51                   	push   ecx
c002005b:	6a 00                	push   0x0
c002005d:	68 5e 01 00 00       	push   0x15e
c0020062:	e8 b1 6e ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0020067:	83 c4 10             	add    esp,0x10
c002006a:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0020070:	75 c1                	jne    c0020033 <ATAPI::readyForCommand()+0x9>
c0020072:	31 c0                	xor    eax,eax
c0020074:	eb 02                	jmp    c0020078 <ATAPI::readyForCommand()+0x4e>
c0020076:	b0 01                	mov    al,0x1
c0020078:	5a                   	pop    edx
c0020079:	5b                   	pop    ebx
c002007a:	5e                   	pop    esi
c002007b:	c3                   	ret    

c002007c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002007c:	55                   	push   ebp
c002007d:	57                   	push   edi
c002007e:	56                   	push   esi
c002007f:	53                   	push   ebx
c0020080:	83 ec 20             	sub    esp,0x20
c0020083:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020087:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002008b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002008f:	6a 01                	push   0x1
c0020091:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020098:	50                   	push   eax
c0020099:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002009f:	e8 48 e8 ff ff       	call   c001e8ec <IDE::enableIRQs(unsigned char, bool)>
c00200a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00200ab:	59                   	pop    ecx
c00200ac:	5e                   	pop    esi
c00200ad:	50                   	push   eax
c00200ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00200b4:	e8 fd e5 ff ff       	call   c001e6b6 <IDE::prepareInterrupt(unsigned char)>
c00200b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00200bc:	e8 69 ff ff ff       	call   c002002a <ATAPI::readyForCommand()>
c00200c1:	83 c4 10             	add    esp,0x10
c00200c4:	84 c0                	test   al,al
c00200c6:	75 0a                	jne    c00200d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c00200c8:	bb 01 00 00 00       	mov    ebx,0x1
c00200cd:	e9 5f 02 00 00       	jmp    c0020331 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00200d2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c00200d8:	c1 e0 04             	shl    eax,0x4
c00200db:	0f b6 c0             	movzx  eax,al
c00200de:	50                   	push   eax
c00200df:	6a 06                	push   0x6
c00200e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00200e8:	50                   	push   eax
c00200e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00200ef:	e8 e8 e5 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200f4:	6a 00                	push   0x0
c00200f6:	6a 01                	push   0x1
c00200f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00200ff:	50                   	push   eax
c0020100:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020106:	e8 d1 e5 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002010b:	83 c4 20             	add    esp,0x20
c002010e:	0f b6 c3             	movzx  eax,bl
c0020111:	50                   	push   eax
c0020112:	0f b6 df             	movzx  ebx,bh
c0020115:	6a 04                	push   0x4
c0020117:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002011e:	50                   	push   eax
c002011f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020125:	e8 b2 e5 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002012a:	53                   	push   ebx
c002012b:	6a 05                	push   0x5
c002012d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020134:	50                   	push   eax
c0020135:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002013b:	e8 9c e5 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020140:	83 c4 20             	add    esp,0x20
c0020143:	68 a0 00 00 00       	push   0xa0
c0020148:	6a 07                	push   0x7
c002014a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020151:	50                   	push   eax
c0020152:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020158:	e8 7f e5 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c002015d:	83 c4 0c             	add    esp,0xc
c0020160:	6a 01                	push   0x1
c0020162:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020169:	50                   	push   eax
c002016a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020170:	e8 07 f3 ff ff       	call   c001f47c <IDE::polling(unsigned char, unsigned int)>
c0020175:	83 c4 10             	add    esp,0x10
c0020178:	0f b6 d8             	movzx  ebx,al
c002017b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c0020181:	85 db                	test   ebx,ebx
c0020183:	74 20                	je     c00201a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c0020185:	53                   	push   ebx
c0020186:	0f b6 c0             	movzx  eax,al
c0020189:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c0020190:	52                   	push   edx
c0020191:	50                   	push   eax
c0020192:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020198:	e8 25 f2 ff ff       	call   c001f3c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002019d:	83 c4 10             	add    esp,0x10
c00201a0:	e9 8c 01 00 00       	jmp    c0020331 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00201a5:	52                   	push   edx
c00201a6:	0f b6 c0             	movzx  eax,al
c00201a9:	52                   	push   edx
c00201aa:	50                   	push   eax
c00201ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201b1:	e8 14 e5 ff ff       	call   c001e6ca <IDE::getBase(unsigned char)>
c00201b6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00201ba:	b9 06 00 00 00       	mov    ecx,0x6
c00201bf:	89 c2                	mov    edx,eax
c00201c1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00201c4:	89 e8                	mov    eax,ebp
c00201c6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00201ca:	83 c4 10             	add    esp,0x10
c00201cd:	0f b6 c0             	movzx  eax,al
c00201d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00201d4:	85 db                	test   ebx,ebx
c00201d6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00201dc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00201e3:	0f 84 eb 00 00 00    	je     c00202d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00201e9:	55                   	push   ebp
c00201ea:	55                   	push   ebp
c00201eb:	52                   	push   edx
c00201ec:	50                   	push   eax
c00201ed:	e8 5e e6 ff ff       	call   c001e850 <IDE::waitInterrupt(unsigned char)>
c00201f2:	83 c4 10             	add    esp,0x10
c00201f5:	84 c0                	test   al,al
c00201f7:	0f 84 cb fe ff ff    	je     c00200c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c00201fd:	56                   	push   esi
c00201fe:	56                   	push   esi
c00201ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020206:	50                   	push   eax
c0020207:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002020d:	e8 a4 e4 ff ff       	call   c001e6b6 <IDE::prepareInterrupt(unsigned char)>
c0020212:	83 c4 0c             	add    esp,0xc
c0020215:	6a 04                	push   0x4
c0020217:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002021e:	50                   	push   eax
c002021f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020225:	e8 72 e5 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c002022a:	83 c4 0c             	add    esp,0xc
c002022d:	6a 05                	push   0x5
c002022f:	89 c6                	mov    esi,eax
c0020231:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020238:	50                   	push   eax
c0020239:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002023f:	e8 58 e5 ff ff       	call   c001e79c <IDE::read(unsigned char, unsigned char)>
c0020244:	83 c4 10             	add    esp,0x10
c0020247:	0f b6 e8             	movzx  ebp,al
c002024a:	89 f0                	mov    eax,esi
c002024c:	c1 e5 08             	shl    ebp,0x8
c002024f:	0f b6 f0             	movzx  esi,al
c0020252:	09 f5                	or     ebp,esi
c0020254:	31 f6                	xor    esi,esi
c0020256:	d1 fd                	sar    ebp,1
c0020258:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002025d:	74 5c                	je     c00202bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c002025f:	39 ee                	cmp    esi,ebp
c0020261:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020267:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002026e:	75 0d                	jne    c002027d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c0020270:	8d 0c 36             	lea    ecx,[esi+esi*1]
c0020273:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c0020277:	4b                   	dec    ebx
c0020278:	e9 57 ff ff ff       	jmp    c00201d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c002027d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020281:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c0020285:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c002028a:	51                   	push   ecx
c002028b:	51                   	push   ecx
c002028c:	52                   	push   edx
c002028d:	50                   	push   eax
c002028e:	e8 37 e4 ff ff       	call   c001e6ca <IDE::getBase(unsigned char)>
c0020293:	89 c2                	mov    edx,eax
c0020295:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002029a:	66 ef                	out    dx,ax
c002029c:	46                   	inc    esi
c002029d:	83 c4 10             	add    esp,0x10
c00202a0:	eb bd                	jmp    c002025f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c00202a2:	51                   	push   ecx
c00202a3:	51                   	push   ecx
c00202a4:	52                   	push   edx
c00202a5:	50                   	push   eax
c00202a6:	e8 1f e4 ff ff       	call   c001e6ca <IDE::getBase(unsigned char)>
c00202ab:	89 c2                	mov    edx,eax
c00202ad:	66 ed                	in     ax,dx
c00202af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00202b3:	83 c4 10             	add    esp,0x10
c00202b6:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c00202ba:	46                   	inc    esi
c00202bb:	39 ee                	cmp    esi,ebp
c00202bd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00202c3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00202ca:	75 d6                	jne    c00202a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c00202cc:	01 f6                	add    esi,esi
c00202ce:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c00202d2:	eb a3                	jmp    c0020277 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c00202d4:	51                   	push   ecx
c00202d5:	51                   	push   ecx
c00202d6:	52                   	push   edx
c00202d7:	50                   	push   eax
c00202d8:	e8 73 e5 ff ff       	call   c001e850 <IDE::waitInterrupt(unsigned char)>
c00202dd:	83 c4 10             	add    esp,0x10
c00202e0:	84 c0                	test   al,al
c00202e2:	0f 84 e0 fd ff ff    	je     c00200c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c00202e8:	52                   	push   edx
c00202e9:	bb a0 86 01 00       	mov    ebx,0x186a0
c00202ee:	52                   	push   edx
c00202ef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202f6:	50                   	push   eax
c00202f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202fd:	e8 b4 e3 ff ff       	call   c001e6b6 <IDE::prepareInterrupt(unsigned char)>
c0020302:	83 c4 10             	add    esp,0x10
c0020305:	50                   	push   eax
c0020306:	50                   	push   eax
c0020307:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002030e:	50                   	push   eax
c002030f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020315:	e8 b0 e3 ff ff       	call   c001e6ca <IDE::getBase(unsigned char)>
c002031a:	8d 50 07             	lea    edx,[eax+0x7]
c002031d:	ec                   	in     al,dx
c002031e:	83 c4 10             	add    esp,0x10
c0020321:	a8 88                	test   al,0x88
c0020323:	74 0a                	je     c002032f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0020325:	4b                   	dec    ebx
c0020326:	75 dd                	jne    c0020305 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0020328:	bb 02 00 00 00       	mov    ebx,0x2
c002032d:	eb 02                	jmp    c0020331 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002032f:	31 db                	xor    ebx,ebx
c0020331:	83 c4 1c             	add    esp,0x1c
c0020334:	89 d8                	mov    eax,ebx
c0020336:	5b                   	pop    ebx
c0020337:	5e                   	pop    esi
c0020338:	5f                   	pop    edi
c0020339:	5d                   	pop    ebp
c002033a:	c3                   	ret    
c002033b:	90                   	nop

c002033c <ATAPI::diskRemoved()>:
c002033c:	53                   	push   ebx
c002033d:	83 ec 14             	sub    esp,0x14
c0020340:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020344:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002034b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020351:	e8 7c a6 fe ff       	call   c000a9d2 <LogicalDisk::unmount()>
c0020356:	58                   	pop    eax
c0020357:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002035d:	e8 4e b0 fe ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c0020362:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020368:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002036c:	83 c4 18             	add    esp,0x18
c002036f:	5b                   	pop    ebx
c0020370:	e9 2b b0 fe ff       	jmp    c000b3a0 <VCache::invalidateReadBuffer()>
c0020375:	90                   	nop

c0020376 <ATAPI::eject()>:
c0020376:	57                   	push   edi
c0020377:	b9 03 00 00 00       	mov    ecx,0x3
c002037c:	53                   	push   ebx
c002037d:	83 ec 14             	sub    esp,0x14
c0020380:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020384:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020388:	fc                   	cld    
c0020389:	31 c0                	xor    eax,eax
c002038b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002038d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020392:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020397:	50                   	push   eax
c0020398:	50                   	push   eax
c0020399:	6a 00                	push   0x0
c002039b:	6a 00                	push   0x0
c002039d:	6a 00                	push   0x0
c002039f:	6a 02                	push   0x2
c00203a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00203a5:	50                   	push   eax
c00203a6:	53                   	push   ebx
c00203a7:	e8 d0 fc ff ff       	call   c002007c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00203ac:	83 c4 14             	add    esp,0x14
c00203af:	53                   	push   ebx
c00203b0:	e8 87 ff ff ff       	call   c002033c <ATAPI::diskRemoved()>
c00203b5:	83 c4 24             	add    esp,0x24
c00203b8:	31 c0                	xor    eax,eax
c00203ba:	5b                   	pop    ebx
c00203bb:	5f                   	pop    edi
c00203bc:	c3                   	ret    
c00203bd:	90                   	nop

c00203be <ATAPI::diskInserted()>:
c00203be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203c2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c00203c9:	c3                   	ret    

c00203ca <ATAPI::detectMedia()>:
c00203ca:	56                   	push   esi
c00203cb:	53                   	push   ebx
c00203cc:	83 ec 28             	sub    esp,0x28
c00203cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00203d3:	6a 0c                	push   0xc
c00203d5:	6a 00                	push   0x0
c00203d7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00203db:	56                   	push   esi
c00203dc:	e8 0f 01 fe ff       	call   c00004f0 <memset>
c00203e1:	58                   	pop    eax
c00203e2:	5a                   	pop    edx
c00203e3:	6a 00                	push   0x0
c00203e5:	6a 00                	push   0x0
c00203e7:	6a 00                	push   0x0
c00203e9:	6a 00                	push   0x0
c00203eb:	56                   	push   esi
c00203ec:	53                   	push   ebx
c00203ed:	e8 8a fc ff ff       	call   c002007c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00203f2:	83 c4 1c             	add    esp,0x1c
c00203f5:	6a 0c                	push   0xc
c00203f7:	6a 00                	push   0x0
c00203f9:	56                   	push   esi
c00203fa:	e8 f1 00 fe ff       	call   c00004f0 <memset>
c00203ff:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020404:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020409:	59                   	pop    ecx
c002040a:	58                   	pop    eax
c002040b:	6a 01                	push   0x1
c002040d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020411:	50                   	push   eax
c0020412:	6a 00                	push   0x0
c0020414:	6a 12                	push   0x12
c0020416:	56                   	push   esi
c0020417:	53                   	push   ebx
c0020418:	e8 5f fc ff ff       	call   c002007c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002041d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020421:	83 c4 20             	add    esp,0x20
c0020424:	83 e0 7f             	and    eax,0x7f
c0020427:	83 f8 70             	cmp    eax,0x70
c002042a:	74 15                	je     c0020441 <ATAPI::detectMedia()+0x77>
c002042c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020433:	75 0c                	jne    c0020441 <ATAPI::detectMedia()+0x77>
c0020435:	83 ec 0c             	sub    esp,0xc
c0020438:	53                   	push   ebx
c0020439:	e8 80 ff ff ff       	call   c00203be <ATAPI::diskInserted()>
c002043e:	83 c4 10             	add    esp,0x10
c0020441:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020445:	83 e0 0f             	and    eax,0xf
c0020448:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002044d:	0f b6 c0             	movzx  eax,al
c0020450:	75 19                	jne    c002046b <ATAPI::detectMedia()+0xa1>
c0020452:	83 f8 02             	cmp    eax,0x2
c0020455:	75 14                	jne    c002046b <ATAPI::detectMedia()+0xa1>
c0020457:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002045e:	74 24                	je     c0020484 <ATAPI::detectMedia()+0xba>
c0020460:	83 ec 0c             	sub    esp,0xc
c0020463:	53                   	push   ebx
c0020464:	e8 d3 fe ff ff       	call   c002033c <ATAPI::diskRemoved()>
c0020469:	eb 16                	jmp    c0020481 <ATAPI::detectMedia()+0xb7>
c002046b:	85 c0                	test   eax,eax
c002046d:	75 15                	jne    c0020484 <ATAPI::detectMedia()+0xba>
c002046f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020476:	75 0c                	jne    c0020484 <ATAPI::detectMedia()+0xba>
c0020478:	83 ec 0c             	sub    esp,0xc
c002047b:	53                   	push   ebx
c002047c:	e8 3d ff ff ff       	call   c00203be <ATAPI::diskInserted()>
c0020481:	83 c4 10             	add    esp,0x10
c0020484:	83 c4 24             	add    esp,0x24
c0020487:	5b                   	pop    ebx
c0020488:	5e                   	pop    esi
c0020489:	c3                   	ret    

c002048a <ATAPI::open(int, int, void*)>:
c002048a:	56                   	push   esi
c002048b:	53                   	push   ebx
c002048c:	50                   	push   eax
c002048d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020491:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020495:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020499:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002049f:	c1 e0 06             	shl    eax,0x6
c00204a2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00204a8:	01 d0                	add    eax,edx
c00204aa:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00204b1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00204b7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00204be:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00204c8:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00204cf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00204d5:	6a 04                	push   0x4
c00204d7:	6a 0c                	push   0xc
c00204d9:	51                   	push   ecx
c00204da:	52                   	push   edx
c00204db:	e8 fc e1 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204e0:	90                   	nop
c00204e1:	90                   	nop
c00204e2:	6a 00                	push   0x0
c00204e4:	6a 0c                	push   0xc
c00204e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00204ed:	50                   	push   eax
c00204ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00204f4:	e8 e3 e1 ff ff       	call   c001e6dc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204f9:	83 c4 14             	add    esp,0x14
c00204fc:	68 78 01 00 00       	push   0x178
c0020501:	e8 82 f2 fe ff       	call   c000f788 <malloc>
c0020506:	83 c4 0c             	add    esp,0xc
c0020509:	6a 00                	push   0x0
c002050b:	68 ff ff ff 7f       	push   0x7fffffff
c0020510:	6a 00                	push   0x0
c0020512:	6a 00                	push   0x0
c0020514:	53                   	push   ebx
c0020515:	68 7b 60 02 c0       	push   0xc002607b
c002051a:	89 c6                	mov    esi,eax
c002051c:	50                   	push   eax
c002051d:	e8 ee a2 fe ff       	call   c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020522:	83 c4 14             	add    esp,0x14
c0020525:	56                   	push   esi
c0020526:	e8 a5 a3 fe ff       	call   c000a8d0 <LogicalDisk::assignDriveLetter()>
c002052b:	5a                   	pop    edx
c002052c:	59                   	pop    ecx
c002052d:	0f be c0             	movsx  eax,al
c0020530:	50                   	push   eax
c0020531:	68 c0 5e 02 c0       	push   0xc0025ec0
c0020536:	e8 2b 6a fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002053b:	58                   	pop    eax
c002053c:	5a                   	pop    edx
c002053d:	56                   	push   esi
c002053e:	53                   	push   ebx
c002053f:	e8 b2 94 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c0020544:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002054a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002054d:	e8 f0 98 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c0020552:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020559:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002055c:	e8 69 fe ff ff       	call   c00203ca <ATAPI::detectMedia()>
c0020561:	83 c4 14             	add    esp,0x14
c0020564:	31 c0                	xor    eax,eax
c0020566:	5b                   	pop    ebx
c0020567:	5e                   	pop    esi
c0020568:	c3                   	ret    
c0020569:	90                   	nop

c002056a <ATAPI::read(unsigned long long, int, void*)>:
c002056a:	55                   	push   ebp
c002056b:	57                   	push   edi
c002056c:	56                   	push   esi
c002056d:	53                   	push   ebx
c002056e:	83 ec 1c             	sub    esp,0x1c
c0020571:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020575:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020579:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002057d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020584:	74 3c                	je     c00205c2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0020586:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002058a:	b9 03 00 00 00       	mov    ecx,0x3
c002058f:	fc                   	cld    
c0020590:	31 c0                	xor    eax,eax
c0020592:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020594:	89 e8                	mov    eax,ebp
c0020596:	0f ce                	bswap  esi
c0020598:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002059c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00205a1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c00205a5:	50                   	push   eax
c00205a6:	50                   	push   eax
c00205a7:	55                   	push   ebp
c00205a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00205ac:	c1 e5 0b             	shl    ebp,0xb
c00205af:	6a 00                	push   0x0
c00205b1:	55                   	push   ebp
c00205b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00205b6:	50                   	push   eax
c00205b7:	53                   	push   ebx
c00205b8:	e8 bf fa ff ff       	call   c002007c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00205bd:	83 c4 20             	add    esp,0x20
c00205c0:	eb 1a                	jmp    c00205dc <ATAPI::read(unsigned long long, int, void*)+0x72>
c00205c2:	83 ec 0c             	sub    esp,0xc
c00205c5:	53                   	push   ebx
c00205c6:	e8 ff fd ff ff       	call   c00203ca <ATAPI::detectMedia()>
c00205cb:	83 c4 10             	add    esp,0x10
c00205ce:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00205d5:	75 af                	jne    c0020586 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00205d7:	b8 02 00 00 00       	mov    eax,0x2
c00205dc:	83 c4 1c             	add    esp,0x1c
c00205df:	5b                   	pop    ebx
c00205e0:	5e                   	pop    esi
c00205e1:	5f                   	pop    edi
c00205e2:	5d                   	pop    ebp
c00205e3:	c3                   	ret    

c00205e4 <SATA::close(int, int, void*)>:
c00205e4:	83 ec 0c             	sub    esp,0xc
c00205e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00205f1:	85 c0                	test   eax,eax
c00205f3:	74 0c                	je     c0020601 <SATA::close(int, int, void*)+0x1d>
c00205f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00205f7:	83 ec 0c             	sub    esp,0xc
c00205fa:	50                   	push   eax
c00205fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00205fe:	83 c4 10             	add    esp,0x10
c0020601:	31 c0                	xor    eax,eax
c0020603:	83 c4 0c             	add    esp,0xc
c0020606:	c3                   	ret    
c0020607:	90                   	nop

c0020608 <SATA::powerSaving(PowerSavingLevel)>:
c0020608:	c3                   	ret    
c0020609:	90                   	nop

c002060a <SATA::open(int, int, void*)>:
c002060a:	56                   	push   esi
c002060b:	53                   	push   ebx
c002060c:	83 ec 10             	sub    esp,0x10
c002060f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020613:	68 08 5f 02 c0       	push   0xc0025f08
c0020618:	e8 49 69 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002061d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020621:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002062b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020635:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002063b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002063f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020649:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020650:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020656:	e8 83 f7 fe ff       	call   c000fdde <Phys::allocatePage()>
c002065b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020661:	89 c6                	mov    esi,eax
c0020663:	e8 76 f7 fe ff       	call   c000fdde <Phys::allocatePage()>
c0020668:	81 c6 00 10 00 00    	add    esi,0x1000
c002066e:	83 c4 10             	add    esp,0x10
c0020671:	39 c6                	cmp    esi,eax
c0020673:	74 10                	je     c0020685 <SATA::open(int, int, void*)+0x7b>
c0020675:	83 ec 0c             	sub    esp,0xc
c0020678:	68 14 5f 02 c0       	push   0xc0025f14
c002067d:	e8 62 f5 fe ff       	call   c000fbe4 <KePanic(char const*)>
c0020682:	83 c4 10             	add    esp,0x10
c0020685:	83 ec 0c             	sub    esp,0xc
c0020688:	6a 02                	push   0x2
c002068a:	e8 4c 2b ff ff       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c002068f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020695:	6a 03                	push   0x3
c0020697:	50                   	push   eax
c0020698:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002069e:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c00206a4:	e8 0b 32 ff ff       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00206a9:	83 c4 14             	add    esp,0x14
c00206ac:	53                   	push   ebx
c00206ad:	e8 90 97 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c00206b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00206b5:	e8 28 a6 fe ff       	call   c000ace2 <createPartitionsForDisk(PhysicalDisk*)>
c00206ba:	83 c4 14             	add    esp,0x14
c00206bd:	31 c0                	xor    eax,eax
c00206bf:	5b                   	pop    ebx
c00206c0:	5e                   	pop    esi
c00206c1:	c3                   	ret    

c00206c2 <SATA::SATA()>:
c00206c2:	83 ec 0c             	sub    esp,0xc
c00206c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206c9:	83 ec 04             	sub    esp,0x4
c00206cc:	68 00 02 00 00       	push   0x200
c00206d1:	68 28 5f 02 c0       	push   0xc0025f28
c00206d6:	50                   	push   eax
c00206d7:	e8 fe 96 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c00206dc:	83 c4 10             	add    esp,0x10
c00206df:	ba 98 5f 02 c0       	mov    edx,0xc0025f98
c00206e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206e8:	89 10                	mov    DWORD PTR [eax],edx
c00206ea:	90                   	nop
c00206eb:	83 c4 0c             	add    esp,0xc
c00206ee:	c3                   	ret    
c00206ef:	90                   	nop

c00206f0 <SATA::access(unsigned long long, int, void*, bool)>:
c00206f0:	55                   	push   ebp
c00206f1:	57                   	push   edi
c00206f2:	56                   	push   esi
c00206f3:	53                   	push   ebx
c00206f4:	83 ec 2c             	sub    esp,0x2c
c00206f7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00206fb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00206ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020703:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002070b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002070f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020713:	fa                   	cli    
c0020714:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c002071a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002071f:	7e 10                	jle    c0020731 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c0020721:	83 ec 0c             	sub    esp,0xc
c0020724:	68 38 5f 02 c0       	push   0xc0025f38
c0020729:	e8 b6 f4 fe ff       	call   c000fbe4 <KePanic(char const*)>
c002072e:	83 c4 10             	add    esp,0x10
c0020731:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020737:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002073d:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020743:	89 e8                	mov    eax,ebp
c0020745:	c1 e0 07             	shl    eax,0x7
c0020748:	01 d0                	add    eax,edx
c002074a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020754:	8d 45 02             	lea    eax,[ebp+0x2]
c0020757:	51                   	push   ecx
c0020758:	c1 e0 07             	shl    eax,0x7
c002075b:	51                   	push   ecx
c002075c:	01 d0                	add    eax,edx
c002075e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0020762:	50                   	push   eax
c0020763:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020769:	e8 ee ed ff ff       	call   c001f55c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002076e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020772:	83 c4 10             	add    esp,0x10
c0020775:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c002077a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002077e:	0f 84 a6 01 00 00    	je     c002092a <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c0020784:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020788:	c1 e0 09             	shl    eax,0x9
c002078b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020790:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020794:	74 0e                	je     c00207a4 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c0020796:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002079c:	89 c1                	mov    ecx,eax
c002079e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00207a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00207a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00207a8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00207ae:	8d 45 02             	lea    eax,[ebp+0x2]
c00207b1:	c1 e0 07             	shl    eax,0x7
c00207b4:	01 d0                	add    eax,edx
c00207b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00207b8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00207be:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00207c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00207c8:	c1 e1 05             	shl    ecx,0x5
c00207cb:	01 c8                	add    eax,ecx
c00207cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00207d1:	83 e1 01             	and    ecx,0x1
c00207d4:	89 ce                	mov    esi,ecx
c00207d6:	8a 08                	mov    cl,BYTE PTR [eax]
c00207d8:	c1 e6 06             	shl    esi,0x6
c00207db:	83 e1 bf             	and    ecx,0xffffffbf
c00207de:	09 f1                	or     ecx,esi
c00207e0:	88 08                	mov    BYTE PTR [eax],cl
c00207e2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00207e4:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00207ea:	81 c9 05 00 01 00    	or     ecx,0x10005
c00207f0:	89 08                	mov    DWORD PTR [eax],ecx
c00207f2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00207f8:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00207fe:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020804:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020807:	50                   	push   eax
c0020808:	68 90 00 00 00       	push   0x90
c002080d:	6a 00                	push   0x0
c002080f:	56                   	push   esi
c0020810:	e8 db fc fd ff       	call   c00004f0 <memset>
c0020815:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002081b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020821:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020825:	83 c4 10             	add    esp,0x10
c0020828:	48                   	dec    eax
c0020829:	25 ff ff 3f 00       	and    eax,0x3fffff
c002082e:	89 c1                	mov    ecx,eax
c0020830:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020836:	25 00 00 c0 ff       	and    eax,0xffc00000
c002083b:	09 c8                	or     eax,ecx
c002083d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020843:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020849:	83 c8 80             	or     eax,0xffffff80
c002084c:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0020852:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020855:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020859:	25 00 7f 00 00       	and    eax,0x7f00
c002085e:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020863:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020868:	66 89 06             	mov    WORD PTR [esi],ax
c002086b:	b0 35                	mov    al,0x35
c002086d:	75 02                	jne    c0020871 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c002086f:	b0 25                	mov    al,0x25
c0020871:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020874:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020878:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002087c:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020880:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020884:	c1 e8 10             	shr    eax,0x10
c0020887:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002088a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002088e:	c1 e8 18             	shr    eax,0x18
c0020891:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020894:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020898:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002089b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002089f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00208a2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00208a6:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00208aa:	89 ee                	mov    esi,ebp
c00208ac:	31 c0                	xor    eax,eax
c00208ae:	c1 e6 07             	shl    esi,0x7
c00208b1:	01 d6                	add    esi,edx
c00208b3:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00208b9:	80 e1 88             	and    cl,0x88
c00208bc:	74 0a                	je     c00208c8 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c00208be:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00208c3:	74 0a                	je     c00208cf <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00208c5:	40                   	inc    eax
c00208c6:	eb eb                	jmp    c00208b3 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c00208c8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00208cd:	75 0a                	jne    c00208d9 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c00208cf:	83 ec 0c             	sub    esp,0xc
c00208d2:	68 71 5f 02 c0       	push   0xc0025f71
c00208d7:	eb 34                	jmp    c002090d <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00208d9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00208dd:	c1 e5 07             	shl    ebp,0x7
c00208e0:	b8 01 00 00 00       	mov    eax,0x1
c00208e5:	01 ea                	add    edx,ebp
c00208e7:	d3 e0                	shl    eax,cl
c00208e9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00208ef:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00208f5:	85 c8                	test   eax,ecx
c00208f7:	74 25                	je     c002091e <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c00208f9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c00208ff:	0f ba e1 1e          	bt     ecx,0x1e
c0020903:	73 ea                	jae    c00208ef <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c0020905:	83 ec 0c             	sub    esp,0xc
c0020908:	68 7f 5f 02 c0       	push   0xc0025f7f
c002090d:	e8 54 66 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020912:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c0020919:	83 c4 10             	add    esp,0x10
c002091c:	eb 13                	jmp    c0020931 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c002091e:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020924:	0f ba e0 1e          	bt     eax,0x1e
c0020928:	73 18                	jae    c0020942 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c002092a:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c0020931:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c0020938:	75 01                	jne    c002093b <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c002093a:	fb                   	sti    
c002093b:	b8 01 00 00 00       	mov    eax,0x1
c0020940:	eb 2c                	jmp    c002096e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020942:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020947:	75 10                	jne    c0020959 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c0020949:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002094f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020953:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020957:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020959:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c0020960:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0020965:	85 c0                	test   eax,eax
c0020967:	75 03                	jne    c002096c <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020969:	fb                   	sti    
c002096a:	eb 02                	jmp    c002096e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002096c:	31 c0                	xor    eax,eax
c002096e:	83 c4 2c             	add    esp,0x2c
c0020971:	5b                   	pop    ebx
c0020972:	5e                   	pop    esi
c0020973:	5f                   	pop    edi
c0020974:	5d                   	pop    ebp
c0020975:	c3                   	ret    

c0020976 <SATA::read(unsigned long long, int, void*)>:
c0020976:	57                   	push   edi
c0020977:	b8 04 00 00 00       	mov    eax,0x4
c002097c:	56                   	push   esi
c002097d:	53                   	push   ebx
c002097e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020982:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020986:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002098a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002098e:	8d 7a ff             	lea    edi,[edx-0x1]
c0020991:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020997:	77 25                	ja     c00209be <SATA::read(unsigned long long, int, void*)+0x48>
c0020999:	85 f6                	test   esi,esi
c002099b:	b8 06 00 00 00       	mov    eax,0x6
c00209a0:	74 1c                	je     c00209be <SATA::read(unsigned long long, int, void*)+0x48>
c00209a2:	50                   	push   eax
c00209a3:	50                   	push   eax
c00209a4:	6a 00                	push   0x0
c00209a6:	56                   	push   esi
c00209a7:	52                   	push   edx
c00209a8:	53                   	push   ebx
c00209a9:	51                   	push   ecx
c00209aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00209ae:	e8 3d fd ff ff       	call   c00206f0 <SATA::access(unsigned long long, int, void*, bool)>
c00209b3:	83 c4 20             	add    esp,0x20
c00209b6:	85 c0                	test   eax,eax
c00209b8:	0f 95 c0             	setne  al
c00209bb:	0f b6 c0             	movzx  eax,al
c00209be:	5b                   	pop    ebx
c00209bf:	5e                   	pop    esi
c00209c0:	5f                   	pop    edi
c00209c1:	c3                   	ret    

c00209c2 <SATA::write(unsigned long long, int, void*)>:
c00209c2:	55                   	push   ebp
c00209c3:	b8 04 00 00 00       	mov    eax,0x4
c00209c8:	57                   	push   edi
c00209c9:	56                   	push   esi
c00209ca:	53                   	push   ebx
c00209cb:	83 ec 0c             	sub    esp,0xc
c00209ce:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00209d2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00209d6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00209da:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00209de:	8d 73 ff             	lea    esi,[ebx-0x1]
c00209e1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00209e7:	77 3d                	ja     c0020a26 <SATA::write(unsigned long long, int, void*)+0x64>
c00209e9:	85 ed                	test   ebp,ebp
c00209eb:	b8 06 00 00 00       	mov    eax,0x6
c00209f0:	74 34                	je     c0020a26 <SATA::write(unsigned long long, int, void*)+0x64>
c00209f2:	c1 e3 09             	shl    ebx,0x9
c00209f5:	01 eb                	add    ebx,ebp
c00209f7:	50                   	push   eax
c00209f8:	89 d6                	mov    esi,edx
c00209fa:	50                   	push   eax
c00209fb:	83 c6 01             	add    esi,0x1
c00209fe:	6a 01                	push   0x1
c0020a00:	89 cf                	mov    edi,ecx
c0020a02:	55                   	push   ebp
c0020a03:	83 d7 00             	adc    edi,0x0
c0020a06:	6a 01                	push   0x1
c0020a08:	81 c5 00 02 00 00    	add    ebp,0x200
c0020a0e:	51                   	push   ecx
c0020a0f:	52                   	push   edx
c0020a10:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020a14:	e8 d7 fc ff ff       	call   c00206f0 <SATA::access(unsigned long long, int, void*, bool)>
c0020a19:	83 c4 20             	add    esp,0x20
c0020a1c:	39 dd                	cmp    ebp,ebx
c0020a1e:	89 f2                	mov    edx,esi
c0020a20:	89 f9                	mov    ecx,edi
c0020a22:	75 d3                	jne    c00209f7 <SATA::write(unsigned long long, int, void*)+0x35>
c0020a24:	31 c0                	xor    eax,eax
c0020a26:	83 c4 0c             	add    esp,0xc
c0020a29:	5b                   	pop    ebx
c0020a2a:	5e                   	pop    esi
c0020a2b:	5f                   	pop    edi
c0020a2c:	5d                   	pop    ebp
c0020a2d:	c3                   	ret    

c0020a2e <SATAPI::write(unsigned long long, int, void*)>:
c0020a2e:	b8 03 00 00 00       	mov    eax,0x3
c0020a33:	c3                   	ret    

c0020a34 <SATAPI::close(int, int, void*)>:
c0020a34:	83 ec 0c             	sub    esp,0xc
c0020a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a3b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020a41:	85 c0                	test   eax,eax
c0020a43:	74 0c                	je     c0020a51 <SATAPI::close(int, int, void*)+0x1d>
c0020a45:	8b 10                	mov    edx,DWORD PTR [eax]
c0020a47:	83 ec 0c             	sub    esp,0xc
c0020a4a:	50                   	push   eax
c0020a4b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020a4e:	83 c4 10             	add    esp,0x10
c0020a51:	31 c0                	xor    eax,eax
c0020a53:	83 c4 0c             	add    esp,0xc
c0020a56:	c3                   	ret    
c0020a57:	90                   	nop

c0020a58 <SATAPI::SATAPI()>:
c0020a58:	83 ec 0c             	sub    esp,0xc
c0020a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a5f:	83 ec 04             	sub    esp,0x4
c0020a62:	68 00 08 00 00       	push   0x800
c0020a67:	68 c8 5f 02 c0       	push   0xc0025fc8
c0020a6c:	50                   	push   eax
c0020a6d:	e8 68 93 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020a72:	83 c4 10             	add    esp,0x10
c0020a75:	ba bc 60 02 c0       	mov    edx,0xc00260bc
c0020a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a7e:	89 10                	mov    DWORD PTR [eax],edx
c0020a80:	90                   	nop
c0020a81:	83 c4 0c             	add    esp,0xc
c0020a84:	c3                   	ret    
c0020a85:	90                   	nop

c0020a86 <SATAPI::diskRemoved()>:
c0020a86:	c3                   	ret    
c0020a87:	90                   	nop

c0020a88 <SATAPI::diskInserted()>:
c0020a88:	83 ec 18             	sub    esp,0x18
c0020a8b:	68 d4 5f 02 c0       	push   0xc0025fd4
c0020a90:	e8 d1 64 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020a95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a99:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020aa0:	83 c4 1c             	add    esp,0x1c
c0020aa3:	c3                   	ret    

c0020aa4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020aa4:	55                   	push   ebp
c0020aa5:	57                   	push   edi
c0020aa6:	56                   	push   esi
c0020aa7:	53                   	push   ebx
c0020aa8:	83 ec 34             	sub    esp,0x34
c0020aab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020aaf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020ab3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ab7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020abf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020ac5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020acb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020acf:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020ad5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ad9:	83 c0 02             	add    eax,0x2
c0020adc:	c1 e0 07             	shl    eax,0x7
c0020adf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020ae3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ae7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020aeb:	c1 e0 07             	shl    eax,0x7
c0020aee:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020af2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020af6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020b00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020b04:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020b0a:	e8 4d ea ff ff       	call   c001f55c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020b0f:	83 c4 10             	add    esp,0x10
c0020b12:	89 c2                	mov    edx,eax
c0020b14:	b8 01 00 00 00       	mov    eax,0x1
c0020b19:	83 fa ff             	cmp    edx,0xffffffff
c0020b1c:	0f 84 63 02 00 00    	je     c0020d85 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0020b22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020b26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020b2a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b32:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020b38:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020b3e:	89 d1                	mov    ecx,edx
c0020b40:	c1 e1 05             	shl    ecx,0x5
c0020b43:	01 c8                	add    eax,ecx
c0020b45:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020b47:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020b4d:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020b53:	89 08                	mov    DWORD PTR [eax],ecx
c0020b55:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020b5b:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020b61:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020b67:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020b6a:	50                   	push   eax
c0020b6b:	68 90 00 00 00       	push   0x90
c0020b70:	6a 00                	push   0x0
c0020b72:	53                   	push   ebx
c0020b73:	e8 78 f9 fd ff       	call   c00004f0 <memset>
c0020b78:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020b7b:	b9 0c 00 00 00       	mov    ecx,0xc
c0020b80:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020b84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020b86:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020b8c:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020b90:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020b94:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020b9a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020b9e:	48                   	dec    eax
c0020b9f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020ba4:	89 c1                	mov    ecx,eax
c0020ba6:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020bac:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020bb1:	09 c8                	or     eax,ecx
c0020bb3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020bb9:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020bbf:	83 c8 80             	or     eax,0xffffff80
c0020bc2:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0020bc8:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020bcb:	25 00 7f 00 00       	and    eax,0x7f00
c0020bd0:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020bd5:	66 89 03             	mov    WORD PTR [ebx],ax
c0020bd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bdc:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0020be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020be4:	c1 e8 10             	shr    eax,0x10
c0020be7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020bea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bee:	c1 e8 18             	shr    eax,0x18
c0020bf1:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0020bf4:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020bf8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020bfb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020bff:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020c02:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020c06:	83 c4 10             	add    esp,0x10
c0020c09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020c0d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020c11:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020c15:	31 c0                	xor    eax,eax
c0020c17:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0020c1d:	80 e1 88             	and    cl,0x88
c0020c20:	74 0a                	je     c0020c2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020c22:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020c27:	74 0a                	je     c0020c33 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c0020c29:	40                   	inc    eax
c0020c2a:	eb eb                	jmp    c0020c17 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c0020c2c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020c31:	75 43                	jne    c0020c76 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c0020c33:	83 ec 0c             	sub    esp,0xc
c0020c36:	68 ec 5f 02 c0       	push   0xc0025fec
c0020c3b:	e8 26 63 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020c40:	58                   	pop    eax
c0020c41:	5a                   	pop    edx
c0020c42:	68 01 60 02 c0       	push   0xc0026001
c0020c47:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c0020c4d:	e8 7e 19 ff ff       	call   c00125d0 <VgaText::puts(char const*)>
c0020c52:	59                   	pop    ecx
c0020c53:	5b                   	pop    ebx
c0020c54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020c58:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020c5e:	e8 93 e9 ff ff       	call   c001f5f6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020c63:	5e                   	pop    esi
c0020c64:	5f                   	pop    edi
c0020c65:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020c69:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020c6f:	e8 62 e9 ff ff       	call   c001f5d6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020c74:	eb 48                	jmp    c0020cbe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c0020c76:	b8 01 00 00 00       	mov    eax,0x1
c0020c7b:	88 d1                	mov    cl,dl
c0020c7d:	d3 e0                	shl    eax,cl
c0020c7f:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c0020c84:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0020c8a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020c8e:	89 c7                	mov    edi,eax
c0020c90:	c1 e3 07             	shl    ebx,0x7
c0020c93:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0020c97:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0020c9d:	85 c7                	test   edi,eax
c0020c9f:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0020ca5:	0f 84 a7 00 00 00    	je     c0020d52 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ae>
c0020cab:	0f ba e0 1e          	bt     eax,0x1e
c0020caf:	73 1a                	jae    c0020ccb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c0020cb1:	83 ec 0c             	sub    esp,0xc
c0020cb4:	68 13 60 02 c0       	push   0xc0026013
c0020cb9:	e8 a8 62 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020cbe:	83 c4 10             	add    esp,0x10
c0020cc1:	b8 01 00 00 00       	mov    eax,0x1
c0020cc6:	e9 ba 00 00 00       	jmp    c0020d85 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0020ccb:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c0020cd1:	83 f8 0d             	cmp    eax,0xd
c0020cd4:	77 0b                	ja     c0020ce1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23d>
c0020cd6:	50                   	push   eax
c0020cd7:	50                   	push   eax
c0020cd8:	6a 00                	push   0x0
c0020cda:	68 c8 00 00 00       	push   0xc8
c0020cdf:	eb 2a                	jmp    c0020d0b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020ce1:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c0020ce7:	83 f8 0d             	cmp    eax,0xd
c0020cea:	77 0b                	ja     c0020cf7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0020cec:	51                   	push   ecx
c0020ced:	51                   	push   ecx
c0020cee:	6a 00                	push   0x0
c0020cf0:	68 58 02 00 00       	push   0x258
c0020cf5:	eb 14                	jmp    c0020d0b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020cf7:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c0020cfd:	83 f8 06             	cmp    eax,0x6
c0020d00:	77 11                	ja     c0020d13 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26f>
c0020d02:	52                   	push   edx
c0020d03:	52                   	push   edx
c0020d04:	6a 00                	push   0x0
c0020d06:	68 dc 05 00 00       	push   0x5dc
c0020d0b:	e8 08 62 ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0020d10:	83 c4 10             	add    esp,0x10
c0020d13:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020d17:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0020d1a:	75 06                	jne    c0020d22 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c0020d1c:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0020d20:	74 16                	je     c0020d38 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0020d22:	83 fe 06             	cmp    esi,0x6
c0020d25:	77 11                	ja     c0020d38 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0020d27:	50                   	push   eax
c0020d28:	50                   	push   eax
c0020d29:	6a 00                	push   0x0
c0020d2b:	68 c4 09 00 00       	push   0x9c4
c0020d30:	e8 e3 61 ff ff       	call   c0016f18 <milliTenthSleep(unsigned long long)>
c0020d35:	83 c4 10             	add    esp,0x10
c0020d38:	46                   	inc    esi
c0020d39:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c0020d3f:	0f 85 52 ff ff ff    	jne    c0020c97 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c0020d45:	83 ec 0c             	sub    esp,0xc
c0020d48:	68 26 60 02 c0       	push   0xc0026026
c0020d4d:	e9 67 ff ff ff       	jmp    c0020cb9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0020d52:	0f ba e0 1e          	bt     eax,0x1e
c0020d56:	73 0d                	jae    c0020d65 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c1>
c0020d58:	83 ec 0c             	sub    esp,0xc
c0020d5b:	68 3a 60 02 c0       	push   0xc002603a
c0020d60:	e9 54 ff ff ff       	jmp    c0020cb9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0020d65:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020d6a:	74 17                	je     c0020d83 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0020d6c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020d71:	74 10                	je     c0020d83 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c0020d73:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020d79:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020d7d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020d81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020d83:	31 c0                	xor    eax,eax
c0020d85:	83 c4 2c             	add    esp,0x2c
c0020d88:	5b                   	pop    ebx
c0020d89:	5e                   	pop    esi
c0020d8a:	5f                   	pop    edi
c0020d8b:	5d                   	pop    ebp
c0020d8c:	c3                   	ret    
c0020d8d:	90                   	nop

c0020d8e <SATAPI::eject()>:
c0020d8e:	57                   	push   edi
c0020d8f:	b9 03 00 00 00       	mov    ecx,0x3
c0020d94:	83 ec 18             	sub    esp,0x18
c0020d97:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020d9b:	fc                   	cld    
c0020d9c:	31 c0                	xor    eax,eax
c0020d9e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020da0:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020da5:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020daa:	50                   	push   eax
c0020dab:	6a 00                	push   0x0
c0020dad:	6a 00                	push   0x0
c0020daf:	6a 00                	push   0x0
c0020db1:	6a 00                	push   0x0
c0020db3:	6a 02                	push   0x2
c0020db5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020db9:	50                   	push   eax
c0020dba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020dbe:	e8 e1 fc ff ff       	call   c0020aa4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020dc3:	83 c4 38             	add    esp,0x38
c0020dc6:	31 c0                	xor    eax,eax
c0020dc8:	5f                   	pop    edi
c0020dc9:	c3                   	ret    

c0020dca <SATAPI::detectMedia()>:
c0020dca:	53                   	push   ebx
c0020dcb:	83 ec 14             	sub    esp,0x14
c0020dce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020dd2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020dd8:	e8 d3 a5 fe ff       	call   c000b3b0 <VCache::writeWriteBuffer()>
c0020ddd:	59                   	pop    ecx
c0020dde:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020de4:	e8 b7 a5 fe ff       	call   c000b3a0 <VCache::invalidateReadBuffer()>
c0020de9:	c7 04 24 4f 60 02 c0 	mov    DWORD PTR [esp],0xc002604f
c0020df0:	e8 71 61 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020df5:	83 c4 10             	add    esp,0x10
c0020df8:	31 c0                	xor    eax,eax
c0020dfa:	8b 14 85 e0 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4520]
c0020e01:	85 d2                	test   edx,edx
c0020e03:	74 0f                	je     c0020e14 <SATAPI::detectMedia()+0x4a>
c0020e05:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0020e0b:	75 07                	jne    c0020e14 <SATAPI::detectMedia()+0x4a>
c0020e0d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0020e14:	40                   	inc    eax
c0020e15:	83 f8 1a             	cmp    eax,0x1a
c0020e18:	75 e0                	jne    c0020dfa <SATAPI::detectMedia()+0x30>
c0020e1a:	83 c4 08             	add    esp,0x8
c0020e1d:	5b                   	pop    ebx
c0020e1e:	c3                   	ret    
c0020e1f:	90                   	nop

c0020e20 <SATAPI::open(int, int, void*)>:
c0020e20:	56                   	push   esi
c0020e21:	53                   	push   ebx
c0020e22:	51                   	push   ecx
c0020e23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020e27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e2b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020e35:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020e3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e3f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020e49:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020e53:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020e5a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020e60:	e8 79 ef fe ff       	call   c000fdde <Phys::allocatePage()>
c0020e65:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020e6b:	89 c6                	mov    esi,eax
c0020e6d:	e8 6c ef fe ff       	call   c000fdde <Phys::allocatePage()>
c0020e72:	81 c6 00 10 00 00    	add    esi,0x1000
c0020e78:	39 c6                	cmp    esi,eax
c0020e7a:	74 10                	je     c0020e8c <SATAPI::open(int, int, void*)+0x6c>
c0020e7c:	83 ec 0c             	sub    esp,0xc
c0020e7f:	68 64 60 02 c0       	push   0xc0026064
c0020e84:	e8 5b ed fe ff       	call   c000fbe4 <KePanic(char const*)>
c0020e89:	83 c4 10             	add    esp,0x10
c0020e8c:	83 ec 0c             	sub    esp,0xc
c0020e8f:	6a 02                	push   0x2
c0020e91:	e8 45 23 ff ff       	call   c00131db <Virt::allocateKernelVirtualPages(int)>
c0020e96:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020e9c:	6a 03                	push   0x3
c0020e9e:	50                   	push   eax
c0020e9f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020ea5:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c0020eab:	e8 04 2a ff ff       	call   c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020eb0:	83 c4 14             	add    esp,0x14
c0020eb3:	68 78 01 00 00       	push   0x178
c0020eb8:	e8 cb e8 fe ff       	call   c000f788 <malloc>
c0020ebd:	83 c4 0c             	add    esp,0xc
c0020ec0:	6a 00                	push   0x0
c0020ec2:	68 ff ff ff 7f       	push   0x7fffffff
c0020ec7:	6a 00                	push   0x0
c0020ec9:	6a 00                	push   0x0
c0020ecb:	53                   	push   ebx
c0020ecc:	68 7a 60 02 c0       	push   0xc002607a
c0020ed1:	89 c6                	mov    esi,eax
c0020ed3:	50                   	push   eax
c0020ed4:	e8 37 99 fe ff       	call   c000a810 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020ed9:	83 c4 14             	add    esp,0x14
c0020edc:	56                   	push   esi
c0020edd:	e8 ee 99 fe ff       	call   c000a8d0 <LogicalDisk::assignDriveLetter()>
c0020ee2:	5a                   	pop    edx
c0020ee3:	59                   	pop    ecx
c0020ee4:	0f be c0             	movsx  eax,al
c0020ee7:	50                   	push   eax
c0020ee8:	68 c0 5e 02 c0       	push   0xc0025ec0
c0020eed:	e8 74 60 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020ef2:	58                   	pop    eax
c0020ef3:	5a                   	pop    edx
c0020ef4:	56                   	push   esi
c0020ef5:	53                   	push   ebx
c0020ef6:	e8 fb 8a fe ff       	call   c00099f6 <Device::addChild(Device*)>
c0020efb:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020f01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020f04:	e8 39 8f fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c0020f09:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020f10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020f13:	e8 b2 fe ff ff       	call   c0020dca <SATAPI::detectMedia()>
c0020f18:	83 c4 14             	add    esp,0x14
c0020f1b:	31 c0                	xor    eax,eax
c0020f1d:	5b                   	pop    ebx
c0020f1e:	5e                   	pop    esi
c0020f1f:	c3                   	ret    

c0020f20 <SATAPI::read(unsigned long long, int, void*)>:
c0020f20:	55                   	push   ebp
c0020f21:	57                   	push   edi
c0020f22:	56                   	push   esi
c0020f23:	53                   	push   ebx
c0020f24:	83 ec 3c             	sub    esp,0x3c
c0020f27:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0020f2b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020f2f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020f33:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0020f37:	83 fd 04             	cmp    ebp,0x4
c0020f3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020f42:	7e 10                	jle    c0020f54 <SATAPI::read(unsigned long long, int, void*)+0x34>
c0020f44:	83 ec 0c             	sub    esp,0xc
c0020f47:	68 88 60 02 c0       	push   0xc0026088
c0020f4c:	e8 93 ec fe ff       	call   c000fbe4 <KePanic(char const*)>
c0020f51:	83 c4 10             	add    esp,0x10
c0020f54:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020f5a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020f60:	51                   	push   ecx
c0020f61:	50                   	push   eax
c0020f62:	83 c0 02             	add    eax,0x2
c0020f65:	c1 e0 07             	shl    eax,0x7
c0020f68:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0020f6e:	50                   	push   eax
c0020f6f:	52                   	push   edx
c0020f70:	e8 ab e6 ff ff       	call   c001f620 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0020f75:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0020f79:	b9 03 00 00 00       	mov    ecx,0x3
c0020f7e:	fc                   	cld    
c0020f7f:	31 c0                	xor    eax,eax
c0020f81:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020f83:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0020f88:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0020f8d:	83 c4 0c             	add    esp,0xc
c0020f90:	6a 00                	push   0x0
c0020f92:	6a 00                	push   0x0
c0020f94:	6a 00                	push   0x0
c0020f96:	6a 00                	push   0x0
c0020f98:	6a 02                	push   0x2
c0020f9a:	8d 44 24 30          	lea    eax,[esp+0x30]
c0020f9e:	50                   	push   eax
c0020f9f:	53                   	push   ebx
c0020fa0:	e8 ff fa ff ff       	call   c0020aa4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020fa5:	83 c4 20             	add    esp,0x20
c0020fa8:	85 c0                	test   eax,eax
c0020faa:	89 c6                	mov    esi,eax
c0020fac:	75 46                	jne    c0020ff4 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c0020fae:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020fb2:	b9 03 00 00 00       	mov    ecx,0x3
c0020fb7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020fb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fbd:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0020fc2:	0f c8                	bswap  eax
c0020fc4:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0020fc8:	89 e8                	mov    eax,ebp
c0020fca:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020fce:	50                   	push   eax
c0020fcf:	55                   	push   ebp
c0020fd0:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0020fd4:	c1 e5 0b             	shl    ebp,0xb
c0020fd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020fdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020fdf:	55                   	push   ebp
c0020fe0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0020fe4:	50                   	push   eax
c0020fe5:	53                   	push   ebx
c0020fe6:	e8 b9 fa ff ff       	call   c0020aa4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020feb:	83 c4 20             	add    esp,0x20
c0020fee:	85 c0                	test   eax,eax
c0020ff0:	89 c6                	mov    esi,eax
c0020ff2:	74 0c                	je     c0021000 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c0020ff4:	83 ec 0c             	sub    esp,0xc
c0020ff7:	53                   	push   ebx
c0020ff8:	e8 cd fd ff ff       	call   c0020dca <SATAPI::detectMedia()>
c0020ffd:	83 c4 10             	add    esp,0x10
c0021000:	83 c4 3c             	add    esp,0x3c
c0021003:	89 f0                	mov    eax,esi
c0021005:	5b                   	pop    ebx
c0021006:	5e                   	pop    esi
c0021007:	5f                   	pop    edi
c0021008:	5d                   	pop    ebp
c0021009:	c3                   	ret    
c002100a:	66 90                	xchg   ax,ax

c002100c <APICTimer::close(int, int, void*)>:
c002100c:	b8 00 00 00 00       	mov    eax,0x0
c0021011:	c3                   	ret    
c0021012:	66 90                	xchg   ax,ax

c0021014 <apicTimerHandler(regs*, void*)>:
c0021014:	83 ec 0c             	sub    esp,0xc
c0021017:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002101b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002101d:	b8 10 27 00 00       	mov    eax,0x2710
c0021022:	ba 00 00 00 00       	mov    edx,0x0
c0021027:	f7 f1                	div    ecx
c0021029:	83 ec 0c             	sub    esp,0xc
c002102c:	50                   	push   eax
c002102d:	e8 9a a0 fe ff       	call   c000b0cc <timerHandler(unsigned int)>
c0021032:	83 c4 10             	add    esp,0x10
c0021035:	90                   	nop
c0021036:	83 c4 0c             	add    esp,0xc
c0021039:	c3                   	ret    
c002103a:	66 90                	xchg   ax,ax

c002103c <APICTimer::open(int, int, void*)>:
c002103c:	83 ec 0c             	sub    esp,0xc
c002103f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021043:	8b 00                	mov    eax,DWORD PTR [eax]
c0021045:	83 c0 24             	add    eax,0x24
c0021048:	8b 00                	mov    eax,DWORD PTR [eax]
c002104a:	83 ec 08             	sub    esp,0x8
c002104d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021055:	ff d0                	call   eax
c0021057:	83 c4 10             	add    esp,0x10
c002105a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002105e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021062:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002106c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021070:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0021076:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002107a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021080:	83 ec 0c             	sub    esp,0xc
c0021083:	51                   	push   ecx
c0021084:	6a 01                	push   0x1
c0021086:	68 14 10 02 c0       	push   0xc0021014
c002108b:	52                   	push   edx
c002108c:	50                   	push   eax
c002108d:	e8 10 89 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021092:	83 c4 20             	add    esp,0x20
c0021095:	89 c2                	mov    edx,eax
c0021097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002109b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00210a1:	b8 00 00 00 00       	mov    eax,0x0
c00210a6:	83 c4 0c             	add    esp,0xc
c00210a9:	c3                   	ret    
c00210aa:	66 90                	xchg   ax,ax

c00210ac <APICTimer::write(int)>:
c00210ac:	83 ec 0c             	sub    esp,0xc
c00210af:	83 ec 0c             	sub    esp,0xc
c00210b2:	68 ec 60 02 c0       	push   0xc00260ec
c00210b7:	e8 28 eb fe ff       	call   c000fbe4 <KePanic(char const*)>
c00210bc:	83 c4 10             	add    esp,0x10
c00210bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210c7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00210cd:	90                   	nop
c00210ce:	83 c4 0c             	add    esp,0xc
c00210d1:	c3                   	ret    
c00210d2:	66 90                	xchg   ax,ax

c00210d4 <APICTimer::APICTimer()>:
c00210d4:	83 ec 0c             	sub    esp,0xc
c00210d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210db:	83 ec 08             	sub    esp,0x8
c00210de:	68 fc 60 02 c0       	push   0xc00260fc
c00210e3:	50                   	push   eax
c00210e4:	e8 17 9f fe ff       	call   c000b000 <Timer::Timer(char const*)>
c00210e9:	83 c4 10             	add    esp,0x10
c00210ec:	ba 10 61 02 c0       	mov    edx,0xc0026110
c00210f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210f5:	89 10                	mov    DWORD PTR [eax],edx
c00210f7:	90                   	nop
c00210f8:	83 c4 0c             	add    esp,0xc
c00210fb:	c3                   	ret    

c00210fc <PIT::write(int)>:
c00210fc:	83 ec 10             	sub    esp,0x10
c00210ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021103:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021107:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002110d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021111:	a3 f8 f4 02 c0       	mov    ds:0xc002f4f8,eax
c0021116:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002111b:	89 c2                	mov    edx,eax
c002111d:	c1 fa 1f             	sar    edx,0x1f
c0021120:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021124:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021128:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002112f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021134:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0021138:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002113d:	ee                   	out    dx,al
c002113e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021142:	0f b6 c0             	movzx  eax,al
c0021145:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002114c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021150:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021154:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0021159:	ee                   	out    dx,al
c002115a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002115e:	c1 f8 08             	sar    eax,0x8
c0021161:	0f b6 c0             	movzx  eax,al
c0021164:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002116b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002116f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021173:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0021178:	ee                   	out    dx,al
c0021179:	90                   	nop
c002117a:	83 c4 10             	add    esp,0x10
c002117d:	c3                   	ret    
c002117e:	66 90                	xchg   ax,ax

c0021180 <pitHandler(regs*, void*)>:
c0021180:	83 ec 0c             	sub    esp,0xc
c0021183:	8b 0d f8 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f4f8
c0021189:	b8 10 27 00 00       	mov    eax,0x2710
c002118e:	89 c2                	mov    edx,eax
c0021190:	c1 fa 1f             	sar    edx,0x1f
c0021193:	f7 f9                	idiv   ecx
c0021195:	83 ec 0c             	sub    esp,0xc
c0021198:	50                   	push   eax
c0021199:	e8 2e 9f fe ff       	call   c000b0cc <timerHandler(unsigned int)>
c002119e:	83 c4 10             	add    esp,0x10
c00211a1:	90                   	nop
c00211a2:	83 c4 0c             	add    esp,0xc
c00211a5:	c3                   	ret    
c00211a6:	66 90                	xchg   ax,ax

c00211a8 <PIT::open(int, int, void*)>:
c00211a8:	83 ec 0c             	sub    esp,0xc
c00211ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211af:	8b 00                	mov    eax,DWORD PTR [eax]
c00211b1:	83 c0 24             	add    eax,0x24
c00211b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00211b6:	83 ec 08             	sub    esp,0x8
c00211b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211c1:	ff d0                	call   eax
c00211c3:	83 c4 10             	add    esp,0x10
c00211c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ca:	83 ec 0c             	sub    esp,0xc
c00211cd:	6a 00                	push   0x0
c00211cf:	6a 01                	push   0x1
c00211d1:	68 80 11 02 c0       	push   0xc0021180
c00211d6:	6a 00                	push   0x0
c00211d8:	50                   	push   eax
c00211d9:	e8 c4 87 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00211de:	83 c4 20             	add    esp,0x20
c00211e1:	89 c2                	mov    edx,eax
c00211e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211e7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00211ed:	b8 00 00 00 00       	mov    eax,0x0
c00211f2:	83 c4 0c             	add    esp,0xc
c00211f5:	c3                   	ret    
c00211f6:	66 90                	xchg   ax,ax

c00211f8 <PIT::close(int, int, void*)>:
c00211f8:	83 ec 0c             	sub    esp,0xc
c00211fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ff:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002120d:	6a 01                	push   0x1
c002120f:	68 80 11 02 c0       	push   0xc0021180
c0021214:	6a 00                	push   0x0
c0021216:	50                   	push   eax
c0021217:	e8 bc 87 fe ff       	call   c00099d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002121c:	83 c4 10             	add    esp,0x10
c002121f:	b8 00 00 00 00       	mov    eax,0x0
c0021224:	83 c4 0c             	add    esp,0xc
c0021227:	c3                   	ret    

c0021228 <PIT::PIT()>:
c0021228:	83 ec 0c             	sub    esp,0xc
c002122b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002122f:	83 ec 08             	sub    esp,0x8
c0021232:	68 38 61 02 c0       	push   0xc0026138
c0021237:	50                   	push   eax
c0021238:	e8 c3 9d fe ff       	call   c000b000 <Timer::Timer(char const*)>
c002123d:	83 c4 10             	add    esp,0x10
c0021240:	ba 60 61 02 c0       	mov    edx,0xc0026160
c0021245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021249:	89 10                	mov    DWORD PTR [eax],edx
c002124b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002124f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021255:	0f b6 d0             	movzx  edx,al
c0021258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002125c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0021263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021267:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002126d:	0f b6 d0             	movzx  edx,al
c0021270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021274:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0021279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002127d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021283:	8d 50 01             	lea    edx,[eax+0x1]
c0021286:	88 d1                	mov    cl,dl
c0021288:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002128c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0021292:	0f b6 d0             	movzx  edx,al
c0021295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021299:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002129d:	83 e1 3f             	and    ecx,0x3f
c00212a0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00212a4:	90                   	nop
c00212a5:	83 c4 0c             	add    esp,0xc
c00212a8:	c3                   	ret    
c00212a9:	66 90                	xchg   ax,ax
c00212ab:	66 90                	xchg   ax,ax
c00212ad:	66 90                	xchg   ax,ax
c00212af:	90                   	nop

c00212b0 <avxDetect>:
c00212b0:	b8 01 00 00 00       	mov    eax,0x1
c00212b5:	0f a2                	cpuid  
c00212b7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00212bd:	74 15                	je     c00212d4 <avxDetect.noAVX>
c00212bf:	b8 01 00 00 00       	mov    eax,0x1
c00212c4:	0f a2                	cpuid  
c00212c6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c00212cc:	74 06                	je     c00212d4 <avxDetect.noAVX>
c00212ce:	b8 01 00 00 00       	mov    eax,0x1
c00212d3:	c3                   	ret    

c00212d4 <avxDetect.noAVX>:
c00212d4:	b8 00 00 00 00       	mov    eax,0x0
c00212d9:	c3                   	ret    

c00212da <avxSave>:
c00212da:	53                   	push   ebx
c00212db:	52                   	push   edx
c00212dc:	31 c0                	xor    eax,eax
c00212de:	48                   	dec    eax
c00212df:	89 c2                	mov    edx,eax
c00212e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00212e5:	0f ae 23             	xsave  [ebx]
c00212e8:	5a                   	pop    edx
c00212e9:	5b                   	pop    ebx
c00212ea:	c3                   	ret    

c00212eb <avxLoad>:
c00212eb:	53                   	push   ebx
c00212ec:	52                   	push   edx
c00212ed:	31 c0                	xor    eax,eax
c00212ef:	48                   	dec    eax
c00212f0:	89 c2                	mov    edx,eax
c00212f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00212f6:	0f ae 2b             	xrstor [ebx]
c00212f9:	5a                   	pop    edx
c00212fa:	5b                   	pop    ebx
c00212fb:	c3                   	ret    

c00212fc <avxInit>:
c00212fc:	e8 17 03 00 00       	call   c0021618 <sseInit>
c0021301:	50                   	push   eax
c0021302:	51                   	push   ecx
c0021303:	0f 20 e0             	mov    eax,cr4
c0021306:	0d 00 00 04 00       	or     eax,0x40000
c002130b:	0f 22 e0             	mov    cr4,eax
c002130e:	31 c9                	xor    ecx,ecx
c0021310:	0f 01 d0             	xgetbv 
c0021313:	0d 07 00 00 00       	or     eax,0x7
c0021318:	0f 01 d1             	xsetbv 
c002131b:	59                   	pop    ecx
c002131c:	58                   	pop    eax
c002131d:	c3                   	ret    

c002131e <avxClose>:
c002131e:	c3                   	ret    
c002131f:	90                   	nop

c0021320 <isr0>:
c0021320:	fa                   	cli    
c0021321:	68 00 00 00 00       	push   0x0
c0021326:	68 00 00 00 00       	push   0x0
c002132b:	e9 56 01 00 00       	jmp    c0021486 <int_common_stub>

c0021330 <isr1>:
c0021330:	fa                   	cli    
c0021331:	6a 00                	push   0x0
c0021333:	6a 01                	push   0x1
c0021335:	e9 4c 01 00 00       	jmp    c0021486 <int_common_stub>

c002133a <isr2>:
c002133a:	fa                   	cli    
c002133b:	6a 00                	push   0x0
c002133d:	6a 02                	push   0x2
c002133f:	e9 42 01 00 00       	jmp    c0021486 <int_common_stub>

c0021344 <isr3>:
c0021344:	fa                   	cli    
c0021345:	6a 00                	push   0x0
c0021347:	6a 03                	push   0x3
c0021349:	e9 38 01 00 00       	jmp    c0021486 <int_common_stub>

c002134e <isr4>:
c002134e:	fa                   	cli    
c002134f:	6a 00                	push   0x0
c0021351:	6a 04                	push   0x4
c0021353:	e9 2e 01 00 00       	jmp    c0021486 <int_common_stub>

c0021358 <isr5>:
c0021358:	fa                   	cli    
c0021359:	6a 00                	push   0x0
c002135b:	6a 05                	push   0x5
c002135d:	e9 24 01 00 00       	jmp    c0021486 <int_common_stub>

c0021362 <isr6>:
c0021362:	fa                   	cli    
c0021363:	6a 00                	push   0x0
c0021365:	6a 06                	push   0x6
c0021367:	e9 1a 01 00 00       	jmp    c0021486 <int_common_stub>

c002136c <isr7>:
c002136c:	fa                   	cli    
c002136d:	6a 00                	push   0x0
c002136f:	6a 07                	push   0x7
c0021371:	e9 10 01 00 00       	jmp    c0021486 <int_common_stub>

c0021376 <isr8>:
c0021376:	fa                   	cli    
c0021377:	6a 08                	push   0x8
c0021379:	e9 08 01 00 00       	jmp    c0021486 <int_common_stub>

c002137e <isr9>:
c002137e:	fa                   	cli    
c002137f:	6a 00                	push   0x0
c0021381:	6a 09                	push   0x9
c0021383:	e9 fe 00 00 00       	jmp    c0021486 <int_common_stub>

c0021388 <isr10>:
c0021388:	fa                   	cli    
c0021389:	6a 0a                	push   0xa
c002138b:	e9 f6 00 00 00       	jmp    c0021486 <int_common_stub>

c0021390 <isr11>:
c0021390:	fa                   	cli    
c0021391:	6a 0b                	push   0xb
c0021393:	e9 ee 00 00 00       	jmp    c0021486 <int_common_stub>

c0021398 <isr12>:
c0021398:	fa                   	cli    
c0021399:	6a 0c                	push   0xc
c002139b:	e9 e6 00 00 00       	jmp    c0021486 <int_common_stub>

c00213a0 <isr13>:
c00213a0:	fa                   	cli    
c00213a1:	6a 0d                	push   0xd
c00213a3:	53                   	push   ebx
c00213a4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00213a8:	81 fb 45 15 02 c0    	cmp    ebx,0xc0021545
c00213ae:	5b                   	pop    ebx
c00213af:	0f 84 92 01 00 00    	je     c0021547 <finishSignal2>
c00213b5:	e9 cc 00 00 00       	jmp    c0021486 <int_common_stub>

c00213ba <isr14>:
c00213ba:	fa                   	cli    
c00213bb:	6a 0e                	push   0xe
c00213bd:	e9 c4 00 00 00       	jmp    c0021486 <int_common_stub>

c00213c2 <isr15>:
c00213c2:	fa                   	cli    
c00213c3:	6a 00                	push   0x0
c00213c5:	6a 0f                	push   0xf
c00213c7:	e9 ba 00 00 00       	jmp    c0021486 <int_common_stub>

c00213cc <isr16>:
c00213cc:	fa                   	cli    
c00213cd:	6a 00                	push   0x0
c00213cf:	6a 10                	push   0x10
c00213d1:	e9 b0 00 00 00       	jmp    c0021486 <int_common_stub>

c00213d6 <isr17>:
c00213d6:	fa                   	cli    
c00213d7:	6a 00                	push   0x0
c00213d9:	6a 11                	push   0x11
c00213db:	e9 a6 00 00 00       	jmp    c0021486 <int_common_stub>

c00213e0 <isr18>:
c00213e0:	fa                   	cli    
c00213e1:	6a 00                	push   0x0
c00213e3:	6a 12                	push   0x12
c00213e5:	e9 9c 00 00 00       	jmp    c0021486 <int_common_stub>

c00213ea <irq3>:
c00213ea:	fa                   	cli    
c00213eb:	6a 00                	push   0x0
c00213ed:	6a 23                	push   0x23
c00213ef:	e9 92 00 00 00       	jmp    c0021486 <int_common_stub>

c00213f4 <irq4>:
c00213f4:	fa                   	cli    
c00213f5:	6a 00                	push   0x0
c00213f7:	6a 24                	push   0x24
c00213f9:	e9 88 00 00 00       	jmp    c0021486 <int_common_stub>

c00213fe <irq5>:
c00213fe:	fa                   	cli    
c00213ff:	6a 00                	push   0x0
c0021401:	6a 25                	push   0x25
c0021403:	e9 7e 00 00 00       	jmp    c0021486 <int_common_stub>

c0021408 <irq6>:
c0021408:	fa                   	cli    
c0021409:	6a 00                	push   0x0
c002140b:	6a 26                	push   0x26
c002140d:	e9 74 00 00 00       	jmp    c0021486 <int_common_stub>

c0021412 <irq7>:
c0021412:	fa                   	cli    
c0021413:	6a 00                	push   0x0
c0021415:	6a 27                	push   0x27
c0021417:	e9 6a 00 00 00       	jmp    c0021486 <int_common_stub>

c002141c <irq8>:
c002141c:	fa                   	cli    
c002141d:	6a 00                	push   0x0
c002141f:	6a 28                	push   0x28
c0021421:	e9 60 00 00 00       	jmp    c0021486 <int_common_stub>

c0021426 <irq9>:
c0021426:	fa                   	cli    
c0021427:	6a 00                	push   0x0
c0021429:	6a 29                	push   0x29
c002142b:	e9 56 00 00 00       	jmp    c0021486 <int_common_stub>

c0021430 <irq10>:
c0021430:	fa                   	cli    
c0021431:	6a 00                	push   0x0
c0021433:	6a 2a                	push   0x2a
c0021435:	e9 4c 00 00 00       	jmp    c0021486 <int_common_stub>

c002143a <irq11>:
c002143a:	fa                   	cli    
c002143b:	6a 00                	push   0x0
c002143d:	6a 2b                	push   0x2b
c002143f:	e9 42 00 00 00       	jmp    c0021486 <int_common_stub>

c0021444 <irq12>:
c0021444:	fa                   	cli    
c0021445:	6a 00                	push   0x0
c0021447:	6a 2c                	push   0x2c
c0021449:	e9 38 00 00 00       	jmp    c0021486 <int_common_stub>

c002144e <irq13>:
c002144e:	fa                   	cli    
c002144f:	6a 00                	push   0x0
c0021451:	6a 2d                	push   0x2d
c0021453:	e9 2e 00 00 00       	jmp    c0021486 <int_common_stub>

c0021458 <irq14>:
c0021458:	fa                   	cli    
c0021459:	6a 00                	push   0x0
c002145b:	6a 2e                	push   0x2e
c002145d:	e9 24 00 00 00       	jmp    c0021486 <int_common_stub>

c0021462 <irq15>:
c0021462:	fa                   	cli    
c0021463:	6a 00                	push   0x0
c0021465:	6a 2f                	push   0x2f
c0021467:	e9 1a 00 00 00       	jmp    c0021486 <int_common_stub>

c002146c <irq1>:
c002146c:	fa                   	cli    
c002146d:	6a 00                	push   0x0
c002146f:	6a 21                	push   0x21
c0021471:	eb 13                	jmp    c0021486 <int_common_stub>

c0021473 <irq2>:
c0021473:	fa                   	cli    
c0021474:	6a 00                	push   0x0
c0021476:	6a 22                	push   0x22
c0021478:	eb 0c                	jmp    c0021486 <int_common_stub>

c002147a <isr96>:
c002147a:	6a 00                	push   0x0
c002147c:	6a 60                	push   0x60
c002147e:	fb                   	sti    
c002147f:	eb 05                	jmp    c0021486 <int_common_stub>

c0021481 <irq0>:
c0021481:	fa                   	cli    
c0021482:	6a 00                	push   0x0
c0021484:	6a 20                	push   0x20

c0021486 <int_common_stub>:
c0021486:	60                   	pusha  
c0021487:	1e                   	push   ds
c0021488:	06                   	push   es
c0021489:	0f a0                	push   fs
c002148b:	0f a8                	push   gs
c002148d:	66 b8 10 00          	mov    ax,0x10
c0021491:	66 8e d8             	mov    ds,ax
c0021494:	66 8e c0             	mov    es,ax
c0021497:	66 8e e0             	mov    fs,ax
c002149a:	66 8e e8             	mov    gs,ax
c002149d:	54                   	push   esp
c002149e:	fc                   	cld    
c002149f:	e8 02 95 ff ff       	call   c001a9a6 <int_handler>
c00214a4:	81 c4 04 00 00 00    	add    esp,0x4
c00214aa:	0f a9                	pop    gs
c00214ac:	0f a1                	pop    fs
c00214ae:	07                   	pop    es
c00214af:	1f                   	pop    ds
c00214b0:	e8 9e fb fe ff       	call   c0011053 <KiCheckSignalZ>
c00214b5:	85 c0                	test   eax,eax
c00214b7:	75 08                	jne    c00214c1 <doSignals>
c00214b9:	61                   	popa   
c00214ba:	81 c4 08 00 00 00    	add    esp,0x8
c00214c0:	cf                   	iret   

c00214c1 <doSignals>:
c00214c1:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c00214c6:	61                   	popa   
c00214c7:	53                   	push   ebx
c00214c8:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c00214ce:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00214d1:	5b                   	pop    ebx
c00214d2:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c00214d7:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c00214da:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c00214dd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00214e0:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c00214e3:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c00214e6:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c00214e9:	81 c4 08 00 00 00    	add    esp,0x8
c00214ef:	5e                   	pop    esi
c00214f0:	5b                   	pop    ebx
c00214f1:	59                   	pop    ecx
c00214f2:	5a                   	pop    edx
c00214f3:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c00214f6:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c00214f9:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00214fc:	52                   	push   edx
c00214fd:	51                   	push   ecx
c00214fe:	53                   	push   ebx
c00214ff:	56                   	push   esi
c0021500:	81 ec 08 00 00 00    	sub    esp,0x8
c0021506:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021509:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002150c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002150f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021512:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021515:	60                   	pusha  
c0021516:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002151c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002151f:	89 e3                	mov    ebx,esp
c0021521:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021524:	52                   	push   edx
c0021525:	68 45 15 02 c0       	push   0xc0021545
c002152a:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002152d:	89 dc                	mov    esp,ebx
c002152f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021532:	68 23 00 00 00       	push   0x23
c0021537:	51                   	push   ecx
c0021538:	68 02 02 00 00       	push   0x202
c002153d:	68 1b 00 00 00       	push   0x1b
c0021542:	ff 36                	push   DWORD PTR [esi]
c0021544:	cf                   	iret   

c0021545 <finishSignal>:
c0021545:	cd 0f                	int    0xf

c0021547 <finishSignal2>:
c0021547:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002154d:	e8 8d fb fe ff       	call   c00110df <KiFinishSignalZ>
c0021552:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021558:	68 23 00 00 00       	push   0x23
c002155d:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021560:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021563:	68 1b 00 00 00       	push   0x1b
c0021568:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002156b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002156e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021571:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021574:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021577:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002157a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002157d:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021580:	cf                   	iret   
c0021581:	90                   	nop
c0021582:	90                   	nop
c0021583:	90                   	nop

c0021584 <irq16>:
c0021584:	fa                   	cli    
c0021585:	6a 00                	push   0x0
c0021587:	6a 30                	push   0x30
c0021589:	e9 f8 fe ff ff       	jmp    c0021486 <int_common_stub>

c002158e <irq17>:
c002158e:	fa                   	cli    
c002158f:	6a 00                	push   0x0
c0021591:	6a 31                	push   0x31
c0021593:	e9 ee fe ff ff       	jmp    c0021486 <int_common_stub>

c0021598 <irq18>:
c0021598:	fa                   	cli    
c0021599:	6a 00                	push   0x0
c002159b:	6a 32                	push   0x32
c002159d:	e9 e4 fe ff ff       	jmp    c0021486 <int_common_stub>

c00215a2 <irq19>:
c00215a2:	fa                   	cli    
c00215a3:	6a 00                	push   0x0
c00215a5:	6a 33                	push   0x33
c00215a7:	e9 da fe ff ff       	jmp    c0021486 <int_common_stub>

c00215ac <irq20>:
c00215ac:	fa                   	cli    
c00215ad:	6a 00                	push   0x0
c00215af:	6a 34                	push   0x34
c00215b1:	e9 d0 fe ff ff       	jmp    c0021486 <int_common_stub>

c00215b6 <irq21>:
c00215b6:	fa                   	cli    
c00215b7:	6a 00                	push   0x0
c00215b9:	6a 35                	push   0x35
c00215bb:	e9 c6 fe ff ff       	jmp    c0021486 <int_common_stub>

c00215c0 <irq22>:
c00215c0:	fa                   	cli    
c00215c1:	6a 00                	push   0x0
c00215c3:	6a 36                	push   0x36
c00215c5:	e9 bc fe ff ff       	jmp    c0021486 <int_common_stub>

c00215ca <irq23>:
c00215ca:	fa                   	cli    
c00215cb:	6a 00                	push   0x0
c00215cd:	6a 37                	push   0x37
c00215cf:	e9 b2 fe ff ff       	jmp    c0021486 <int_common_stub>
c00215d4:	66 90                	xchg   ax,ax
c00215d6:	66 90                	xchg   ax,ax
c00215d8:	66 90                	xchg   ax,ax
c00215da:	66 90                	xchg   ax,ax
c00215dc:	66 90                	xchg   ax,ax
c00215de:	66 90                	xchg   ax,ax

c00215e0 <i386GetRDRAND>:
c00215e0:	b9 64 00 00 00       	mov    ecx,0x64

c00215e5 <retry>:
c00215e5:	0f c7 f0             	rdrand eax
c00215e8:	72 05                	jb     c00215ef <retry.done>
c00215ea:	e2 f9                	loop   c00215e5 <retry>

c00215ec <retry.fail>:
c00215ec:	31 c0                	xor    eax,eax
c00215ee:	c3                   	ret    

c00215ef <retry.done>:
c00215ef:	c3                   	ret    

c00215f0 <sseDetect>:
c00215f0:	b8 01 00 00 00       	mov    eax,0x1
c00215f5:	0f a2                	cpuid  
c00215f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00215fd:	74 06                	je     c0021605 <sseDetect.noSSE>
c00215ff:	b8 01 00 00 00       	mov    eax,0x1
c0021604:	c3                   	ret    

c0021605 <sseDetect.noSSE>:
c0021605:	31 c0                	xor    eax,eax
c0021607:	c3                   	ret    

c0021608 <sseSave>:
c0021608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002160c:	0f ae 00             	fxsave [eax]
c002160f:	c3                   	ret    

c0021610 <sseLoad>:
c0021610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021614:	0f ae 08             	fxrstor [eax]
c0021617:	c3                   	ret    

c0021618 <sseInit>:
c0021618:	e8 48 00 00 00       	call   c0021665 <x87Init>
c002161d:	0f 20 e0             	mov    eax,cr4
c0021620:	66 0d 00 06          	or     ax,0x600
c0021624:	0f 22 e0             	mov    cr4,eax
c0021627:	c3                   	ret    

c0021628 <sseClose>:
c0021628:	c3                   	ret    
c0021629:	66 90                	xchg   ax,ax
c002162b:	66 90                	xchg   ax,ax
c002162d:	66 90                	xchg   ax,ax
c002162f:	90                   	nop

c0021630 <value_37F>:
c0021630:	7f 03                	jg     c0021635 <value_37A+0x1>

c0021632 <value_37E>:
c0021632:	7e 03                	jle    c0021637 <x87Detect+0x1>

c0021634 <value_37A>:
c0021634:	7a 03                	jp     c0021639 <x87Detect+0x3>

c0021636 <x87Detect>:
c0021636:	53                   	push   ebx
c0021637:	51                   	push   ecx
c0021638:	52                   	push   edx
c0021639:	b8 01 00 00 00       	mov    eax,0x1
c002163e:	0f a2                	cpuid  
c0021640:	f7 c2 01 00 00 00    	test   edx,0x1
c0021646:	74 06                	je     c002164e <x87Detect.nox87>
c0021648:	b8 01 00 00 00       	mov    eax,0x1
c002164d:	c3                   	ret    

c002164e <x87Detect.nox87>:
c002164e:	b8 00 00 00 00       	mov    eax,0x0
c0021653:	5a                   	pop    edx
c0021654:	59                   	pop    ecx
c0021655:	5b                   	pop    ebx
c0021656:	c3                   	ret    

c0021657 <x87Save>:
c0021657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002165b:	dd 30                	fnsave [eax]
c002165d:	c3                   	ret    

c002165e <x87Load>:
c002165e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021662:	dd 20                	frstor [eax]
c0021664:	c3                   	ret    

c0021665 <x87Init>:
c0021665:	0f 20 c0             	mov    eax,cr0
c0021668:	66 25 fb ff          	and    ax,0xfffb
c002166c:	66 0d 22 00          	or     ax,0x22
c0021670:	0f 22 c0             	mov    cr0,eax
c0021673:	db e3                	fninit 
c0021675:	0f 06                	clts   
c0021677:	d9 2d 34 16 02 c0    	fldcw  WORD PTR ds:0xc0021634
c002167d:	c3                   	ret    

c002167e <x87Close>:
c002167e:	c3                   	ret    
c002167f:	90                   	nop

c0021680 <__do_global_ctors_aux>:
c0021680:	a1 34 26 02 c0       	mov    eax,ds:0xc0022634
c0021685:	83 f8 ff             	cmp    eax,0xffffffff
c0021688:	74 1a                	je     c00216a4 <__do_global_ctors_aux+0x24>
c002168a:	55                   	push   ebp
c002168b:	89 e5                	mov    ebp,esp
c002168d:	53                   	push   ebx
c002168e:	52                   	push   edx
c002168f:	bb 34 26 02 c0       	mov    ebx,0xc0022634
c0021694:	ff d0                	call   eax
c0021696:	83 eb 04             	sub    ebx,0x4
c0021699:	8b 03                	mov    eax,DWORD PTR [ebx]
c002169b:	83 f8 ff             	cmp    eax,0xffffffff
c002169e:	75 f4                	jne    c0021694 <__do_global_ctors_aux+0x14>
c00216a0:	58                   	pop    eax
c00216a1:	5b                   	pop    ebx
c00216a2:	5d                   	pop    ebp
c00216a3:	c3                   	ret    
c00216a4:	c3                   	ret    
c00216a5:	66 90                	xchg   ax,ax
c00216a7:	90                   	nop

c00216a8 <__divdi3>:
c00216a8:	55                   	push   ebp
c00216a9:	57                   	push   edi
c00216aa:	56                   	push   esi
c00216ab:	53                   	push   ebx
c00216ac:	83 ec 1c             	sub    esp,0x1c
c00216af:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00216b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00216b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00216ba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00216be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00216c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00216c6:	85 db                	test   ebx,ebx
c00216c8:	0f 88 8e 00 00 00    	js     c002175c <__divdi3+0xb4>
c00216ce:	89 dd                	mov    ebp,ebx
c00216d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00216d8:	89 d3                	mov    ebx,edx
c00216da:	85 d2                	test   edx,edx
c00216dc:	79 0d                	jns    c00216eb <__divdi3+0x43>
c00216de:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00216e2:	f7 d8                	neg    eax
c00216e4:	83 d2 00             	adc    edx,0x0
c00216e7:	f7 da                	neg    edx
c00216e9:	89 d3                	mov    ebx,edx
c00216eb:	89 c7                	mov    edi,eax
c00216ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00216f0:	85 db                	test   ebx,ebx
c00216f2:	75 48                	jne    c002173c <__divdi3+0x94>
c00216f4:	39 ef                	cmp    edi,ebp
c00216f6:	76 24                	jbe    c002171c <__divdi3+0x74>
c00216f8:	89 ea                	mov    edx,ebp
c00216fa:	f7 f7                	div    edi
c00216fc:	89 c1                	mov    ecx,eax
c00216fe:	31 f6                	xor    esi,esi
c0021700:	89 c8                	mov    eax,ecx
c0021702:	89 f2                	mov    edx,esi
c0021704:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021708:	85 c9                	test   ecx,ecx
c002170a:	74 07                	je     c0021713 <__divdi3+0x6b>
c002170c:	f7 d8                	neg    eax
c002170e:	83 d2 00             	adc    edx,0x0
c0021711:	f7 da                	neg    edx
c0021713:	83 c4 1c             	add    esp,0x1c
c0021716:	5b                   	pop    ebx
c0021717:	5e                   	pop    esi
c0021718:	5f                   	pop    edi
c0021719:	5d                   	pop    ebp
c002171a:	c3                   	ret    
c002171b:	90                   	nop
c002171c:	85 ff                	test   edi,edi
c002171e:	75 0b                	jne    c002172b <__divdi3+0x83>
c0021720:	b8 01 00 00 00       	mov    eax,0x1
c0021725:	31 d2                	xor    edx,edx
c0021727:	f7 f3                	div    ebx
c0021729:	89 c7                	mov    edi,eax
c002172b:	31 d2                	xor    edx,edx
c002172d:	89 e8                	mov    eax,ebp
c002172f:	f7 f7                	div    edi
c0021731:	89 c6                	mov    esi,eax
c0021733:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021736:	f7 f7                	div    edi
c0021738:	89 c1                	mov    ecx,eax
c002173a:	eb c4                	jmp    c0021700 <__divdi3+0x58>
c002173c:	39 eb                	cmp    ebx,ebp
c002173e:	77 3c                	ja     c002177c <__divdi3+0xd4>
c0021740:	0f bd f3             	bsr    esi,ebx
c0021743:	83 f6 1f             	xor    esi,0x1f
c0021746:	75 40                	jne    c0021788 <__divdi3+0xe0>
c0021748:	39 eb                	cmp    ebx,ebp
c002174a:	72 09                	jb     c0021755 <__divdi3+0xad>
c002174c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002174f:	0f 87 97 00 00 00    	ja     c00217ec <__divdi3+0x144>
c0021755:	b9 01 00 00 00       	mov    ecx,0x1
c002175a:	eb a4                	jmp    c0021700 <__divdi3+0x58>
c002175c:	f7 d9                	neg    ecx
c002175e:	83 d3 00             	adc    ebx,0x0
c0021761:	f7 db                	neg    ebx
c0021763:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021766:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002176a:	89 dd                	mov    ebp,ebx
c002176c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021774:	e9 5f ff ff ff       	jmp    c00216d8 <__divdi3+0x30>
c0021779:	8d 76 00             	lea    esi,[esi+0x0]
c002177c:	31 f6                	xor    esi,esi
c002177e:	31 c9                	xor    ecx,ecx
c0021780:	e9 7b ff ff ff       	jmp    c0021700 <__divdi3+0x58>
c0021785:	8d 76 00             	lea    esi,[esi+0x0]
c0021788:	b8 20 00 00 00       	mov    eax,0x20
c002178d:	29 f0                	sub    eax,esi
c002178f:	89 f1                	mov    ecx,esi
c0021791:	d3 e3                	shl    ebx,cl
c0021793:	89 fa                	mov    edx,edi
c0021795:	88 c1                	mov    cl,al
c0021797:	d3 ea                	shr    edx,cl
c0021799:	09 da                	or     edx,ebx
c002179b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002179f:	89 f1                	mov    ecx,esi
c00217a1:	d3 e7                	shl    edi,cl
c00217a3:	89 eb                	mov    ebx,ebp
c00217a5:	88 c1                	mov    cl,al
c00217a7:	d3 eb                	shr    ebx,cl
c00217a9:	89 f1                	mov    ecx,esi
c00217ab:	d3 e5                	shl    ebp,cl
c00217ad:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00217b0:	88 c1                	mov    cl,al
c00217b2:	d3 ea                	shr    edx,cl
c00217b4:	09 d5                	or     ebp,edx
c00217b6:	89 e8                	mov    eax,ebp
c00217b8:	89 da                	mov    edx,ebx
c00217ba:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00217be:	89 d3                	mov    ebx,edx
c00217c0:	89 c5                	mov    ebp,eax
c00217c2:	f7 e7                	mul    edi
c00217c4:	39 d3                	cmp    ebx,edx
c00217c6:	72 18                	jb     c00217e0 <__divdi3+0x138>
c00217c8:	74 0a                	je     c00217d4 <__divdi3+0x12c>
c00217ca:	89 e9                	mov    ecx,ebp
c00217cc:	31 f6                	xor    esi,esi
c00217ce:	e9 2d ff ff ff       	jmp    c0021700 <__divdi3+0x58>
c00217d3:	90                   	nop
c00217d4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00217d7:	89 f1                	mov    ecx,esi
c00217d9:	d3 e7                	shl    edi,cl
c00217db:	39 c7                	cmp    edi,eax
c00217dd:	73 eb                	jae    c00217ca <__divdi3+0x122>
c00217df:	90                   	nop
c00217e0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00217e3:	31 f6                	xor    esi,esi
c00217e5:	e9 16 ff ff ff       	jmp    c0021700 <__divdi3+0x58>
c00217ea:	66 90                	xchg   ax,ax
c00217ec:	31 c9                	xor    ecx,ecx
c00217ee:	e9 0d ff ff ff       	jmp    c0021700 <__divdi3+0x58>
c00217f3:	90                   	nop

c00217f4 <__moddi3>:
c00217f4:	55                   	push   ebp
c00217f5:	57                   	push   edi
c00217f6:	56                   	push   esi
c00217f7:	53                   	push   ebx
c00217f8:	83 ec 2c             	sub    esp,0x2c
c00217fb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00217ff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021803:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021807:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002180b:	85 db                	test   ebx,ebx
c002180d:	0f 88 85 00 00 00    	js     c0021898 <__moddi3+0xa4>
c0021813:	89 de                	mov    esi,ebx
c0021815:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002181d:	89 d7                	mov    edi,edx
c002181f:	85 d2                	test   edx,edx
c0021821:	79 09                	jns    c002182c <__moddi3+0x38>
c0021823:	f7 d8                	neg    eax
c0021825:	83 d2 00             	adc    edx,0x0
c0021828:	f7 da                	neg    edx
c002182a:	89 d7                	mov    edi,edx
c002182c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021830:	89 cd                	mov    ebp,ecx
c0021832:	85 ff                	test   edi,edi
c0021834:	75 52                	jne    c0021888 <__moddi3+0x94>
c0021836:	89 c3                	mov    ebx,eax
c0021838:	39 f0                	cmp    eax,esi
c002183a:	76 24                	jbe    c0021860 <__moddi3+0x6c>
c002183c:	89 c8                	mov    eax,ecx
c002183e:	89 f2                	mov    edx,esi
c0021840:	f7 f3                	div    ebx
c0021842:	89 d6                	mov    esi,edx
c0021844:	89 f0                	mov    eax,esi
c0021846:	31 d2                	xor    edx,edx
c0021848:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002184c:	85 c9                	test   ecx,ecx
c002184e:	74 07                	je     c0021857 <__moddi3+0x63>
c0021850:	f7 d8                	neg    eax
c0021852:	83 d2 00             	adc    edx,0x0
c0021855:	f7 da                	neg    edx
c0021857:	83 c4 2c             	add    esp,0x2c
c002185a:	5b                   	pop    ebx
c002185b:	5e                   	pop    esi
c002185c:	5f                   	pop    edi
c002185d:	5d                   	pop    ebp
c002185e:	c3                   	ret    
c002185f:	90                   	nop
c0021860:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021864:	85 db                	test   ebx,ebx
c0021866:	75 0d                	jne    c0021875 <__moddi3+0x81>
c0021868:	b8 01 00 00 00       	mov    eax,0x1
c002186d:	31 d2                	xor    edx,edx
c002186f:	f7 f7                	div    edi
c0021871:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021875:	89 f0                	mov    eax,esi
c0021877:	31 d2                	xor    edx,edx
c0021879:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002187d:	f7 f7                	div    edi
c002187f:	89 e8                	mov    eax,ebp
c0021881:	f7 f7                	div    edi
c0021883:	89 d6                	mov    esi,edx
c0021885:	eb bd                	jmp    c0021844 <__moddi3+0x50>
c0021887:	90                   	nop
c0021888:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002188c:	39 f7                	cmp    edi,esi
c002188e:	76 20                	jbe    c00218b0 <__moddi3+0xbc>
c0021890:	89 c8                	mov    eax,ecx
c0021892:	89 f2                	mov    edx,esi
c0021894:	eb b2                	jmp    c0021848 <__moddi3+0x54>
c0021896:	66 90                	xchg   ax,ax
c0021898:	f7 d9                	neg    ecx
c002189a:	83 d3 00             	adc    ebx,0x0
c002189d:	f7 db                	neg    ebx
c002189f:	89 de                	mov    esi,ebx
c00218a1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00218a9:	e9 6f ff ff ff       	jmp    c002181d <__moddi3+0x29>
c00218ae:	66 90                	xchg   ax,ax
c00218b0:	0f bd c7             	bsr    eax,edi
c00218b3:	83 f0 1f             	xor    eax,0x1f
c00218b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00218ba:	75 24                	jne    c00218e0 <__moddi3+0xec>
c00218bc:	39 f7                	cmp    edi,esi
c00218be:	72 06                	jb     c00218c6 <__moddi3+0xd2>
c00218c0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00218c4:	77 0c                	ja     c00218d2 <__moddi3+0xde>
c00218c6:	89 e9                	mov    ecx,ebp
c00218c8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00218cc:	19 fe                	sbb    esi,edi
c00218ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00218d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00218d6:	89 f2                	mov    edx,esi
c00218d8:	e9 6b ff ff ff       	jmp    c0021848 <__moddi3+0x54>
c00218dd:	8d 76 00             	lea    esi,[esi+0x0]
c00218e0:	b8 20 00 00 00       	mov    eax,0x20
c00218e5:	89 c2                	mov    edx,eax
c00218e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00218eb:	29 da                	sub    edx,ebx
c00218ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00218f1:	88 d9                	mov    cl,bl
c00218f3:	d3 e7                	shl    edi,cl
c00218f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218f9:	88 d1                	mov    cl,dl
c00218fb:	d3 e8                	shr    eax,cl
c00218fd:	09 c7                	or     edi,eax
c00218ff:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021903:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021907:	89 d8                	mov    eax,ebx
c0021909:	88 d9                	mov    cl,bl
c002190b:	d3 e7                	shl    edi,cl
c002190d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021911:	89 f3                	mov    ebx,esi
c0021913:	88 d1                	mov    cl,dl
c0021915:	d3 eb                	shr    ebx,cl
c0021917:	89 c7                	mov    edi,eax
c0021919:	88 c1                	mov    cl,al
c002191b:	d3 e6                	shl    esi,cl
c002191d:	89 e8                	mov    eax,ebp
c002191f:	88 d1                	mov    cl,dl
c0021921:	d3 e8                	shr    eax,cl
c0021923:	09 f0                	or     eax,esi
c0021925:	89 f9                	mov    ecx,edi
c0021927:	d3 e5                	shl    ebp,cl
c0021929:	89 da                	mov    edx,ebx
c002192b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002192f:	89 d3                	mov    ebx,edx
c0021931:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021935:	89 c6                	mov    esi,eax
c0021937:	89 d1                	mov    ecx,edx
c0021939:	39 d3                	cmp    ebx,edx
c002193b:	72 27                	jb     c0021964 <__moddi3+0x170>
c002193d:	74 21                	je     c0021960 <__moddi3+0x16c>
c002193f:	29 f5                	sub    ebp,esi
c0021941:	19 cb                	sbb    ebx,ecx
c0021943:	89 de                	mov    esi,ebx
c0021945:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021949:	d3 e6                	shl    esi,cl
c002194b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002194f:	89 f9                	mov    ecx,edi
c0021951:	d3 ed                	shr    ebp,cl
c0021953:	09 ee                	or     esi,ebp
c0021955:	89 f0                	mov    eax,esi
c0021957:	d3 eb                	shr    ebx,cl
c0021959:	89 da                	mov    edx,ebx
c002195b:	e9 e8 fe ff ff       	jmp    c0021848 <__moddi3+0x54>
c0021960:	39 c5                	cmp    ebp,eax
c0021962:	73 db                	jae    c002193f <__moddi3+0x14b>
c0021964:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021968:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002196c:	89 d1                	mov    ecx,edx
c002196e:	89 c6                	mov    esi,eax
c0021970:	eb cd                	jmp    c002193f <__moddi3+0x14b>
c0021972:	66 90                	xchg   ax,ax

c0021974 <__udivdi3>:
c0021974:	55                   	push   ebp
c0021975:	57                   	push   edi
c0021976:	56                   	push   esi
c0021977:	53                   	push   ebx
c0021978:	83 ec 1c             	sub    esp,0x1c
c002197b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002197f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021983:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021987:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002198b:	85 d2                	test   edx,edx
c002198d:	75 41                	jne    c00219d0 <__udivdi3+0x5c>
c002198f:	39 f7                	cmp    edi,esi
c0021991:	76 15                	jbe    c00219a8 <__udivdi3+0x34>
c0021993:	89 e8                	mov    eax,ebp
c0021995:	89 f2                	mov    edx,esi
c0021997:	f7 f7                	div    edi
c0021999:	31 db                	xor    ebx,ebx
c002199b:	89 da                	mov    edx,ebx
c002199d:	83 c4 1c             	add    esp,0x1c
c00219a0:	5b                   	pop    ebx
c00219a1:	5e                   	pop    esi
c00219a2:	5f                   	pop    edi
c00219a3:	5d                   	pop    ebp
c00219a4:	c3                   	ret    
c00219a5:	8d 76 00             	lea    esi,[esi+0x0]
c00219a8:	89 f9                	mov    ecx,edi
c00219aa:	85 ff                	test   edi,edi
c00219ac:	75 0b                	jne    c00219b9 <__udivdi3+0x45>
c00219ae:	b8 01 00 00 00       	mov    eax,0x1
c00219b3:	31 d2                	xor    edx,edx
c00219b5:	f7 f7                	div    edi
c00219b7:	89 c1                	mov    ecx,eax
c00219b9:	31 d2                	xor    edx,edx
c00219bb:	89 f0                	mov    eax,esi
c00219bd:	f7 f1                	div    ecx
c00219bf:	89 c3                	mov    ebx,eax
c00219c1:	89 e8                	mov    eax,ebp
c00219c3:	f7 f1                	div    ecx
c00219c5:	89 da                	mov    edx,ebx
c00219c7:	83 c4 1c             	add    esp,0x1c
c00219ca:	5b                   	pop    ebx
c00219cb:	5e                   	pop    esi
c00219cc:	5f                   	pop    edi
c00219cd:	5d                   	pop    ebp
c00219ce:	c3                   	ret    
c00219cf:	90                   	nop
c00219d0:	39 f2                	cmp    edx,esi
c00219d2:	77 1c                	ja     c00219f0 <__udivdi3+0x7c>
c00219d4:	0f bd da             	bsr    ebx,edx
c00219d7:	83 f3 1f             	xor    ebx,0x1f
c00219da:	75 24                	jne    c0021a00 <__udivdi3+0x8c>
c00219dc:	39 f2                	cmp    edx,esi
c00219de:	72 08                	jb     c00219e8 <__udivdi3+0x74>
c00219e0:	39 ef                	cmp    edi,ebp
c00219e2:	0f 87 84 00 00 00    	ja     c0021a6c <__udivdi3+0xf8>
c00219e8:	b8 01 00 00 00       	mov    eax,0x1
c00219ed:	eb ac                	jmp    c002199b <__udivdi3+0x27>
c00219ef:	90                   	nop
c00219f0:	31 db                	xor    ebx,ebx
c00219f2:	31 c0                	xor    eax,eax
c00219f4:	89 da                	mov    edx,ebx
c00219f6:	83 c4 1c             	add    esp,0x1c
c00219f9:	5b                   	pop    ebx
c00219fa:	5e                   	pop    esi
c00219fb:	5f                   	pop    edi
c00219fc:	5d                   	pop    ebp
c00219fd:	c3                   	ret    
c00219fe:	66 90                	xchg   ax,ax
c0021a00:	b8 20 00 00 00       	mov    eax,0x20
c0021a05:	29 d8                	sub    eax,ebx
c0021a07:	88 d9                	mov    cl,bl
c0021a09:	d3 e2                	shl    edx,cl
c0021a0b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021a0f:	89 fa                	mov    edx,edi
c0021a11:	88 c1                	mov    cl,al
c0021a13:	d3 ea                	shr    edx,cl
c0021a15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021a19:	09 d1                	or     ecx,edx
c0021a1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021a1f:	88 d9                	mov    cl,bl
c0021a21:	d3 e7                	shl    edi,cl
c0021a23:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021a27:	89 f7                	mov    edi,esi
c0021a29:	88 c1                	mov    cl,al
c0021a2b:	d3 ef                	shr    edi,cl
c0021a2d:	88 d9                	mov    cl,bl
c0021a2f:	d3 e6                	shl    esi,cl
c0021a31:	89 ea                	mov    edx,ebp
c0021a33:	88 c1                	mov    cl,al
c0021a35:	d3 ea                	shr    edx,cl
c0021a37:	09 d6                	or     esi,edx
c0021a39:	89 f0                	mov    eax,esi
c0021a3b:	89 fa                	mov    edx,edi
c0021a3d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021a41:	89 d7                	mov    edi,edx
c0021a43:	89 c6                	mov    esi,eax
c0021a45:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021a49:	39 d7                	cmp    edi,edx
c0021a4b:	72 13                	jb     c0021a60 <__udivdi3+0xec>
c0021a4d:	74 09                	je     c0021a58 <__udivdi3+0xe4>
c0021a4f:	89 f0                	mov    eax,esi
c0021a51:	31 db                	xor    ebx,ebx
c0021a53:	e9 43 ff ff ff       	jmp    c002199b <__udivdi3+0x27>
c0021a58:	88 d9                	mov    cl,bl
c0021a5a:	d3 e5                	shl    ebp,cl
c0021a5c:	39 c5                	cmp    ebp,eax
c0021a5e:	73 ef                	jae    c0021a4f <__udivdi3+0xdb>
c0021a60:	8d 46 ff             	lea    eax,[esi-0x1]
c0021a63:	31 db                	xor    ebx,ebx
c0021a65:	e9 31 ff ff ff       	jmp    c002199b <__udivdi3+0x27>
c0021a6a:	66 90                	xchg   ax,ax
c0021a6c:	31 c0                	xor    eax,eax
c0021a6e:	e9 28 ff ff ff       	jmp    c002199b <__udivdi3+0x27>
c0021a73:	90                   	nop

c0021a74 <__umoddi3>:
c0021a74:	55                   	push   ebp
c0021a75:	57                   	push   edi
c0021a76:	56                   	push   esi
c0021a77:	53                   	push   ebx
c0021a78:	83 ec 1c             	sub    esp,0x1c
c0021a7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021a7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021a83:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021a87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021a8b:	89 da                	mov    edx,ebx
c0021a8d:	85 c0                	test   eax,eax
c0021a8f:	75 37                	jne    c0021ac8 <__umoddi3+0x54>
c0021a91:	39 df                	cmp    edi,ebx
c0021a93:	76 13                	jbe    c0021aa8 <__umoddi3+0x34>
c0021a95:	89 f0                	mov    eax,esi
c0021a97:	f7 f7                	div    edi
c0021a99:	89 d0                	mov    eax,edx
c0021a9b:	31 d2                	xor    edx,edx
c0021a9d:	83 c4 1c             	add    esp,0x1c
c0021aa0:	5b                   	pop    ebx
c0021aa1:	5e                   	pop    esi
c0021aa2:	5f                   	pop    edi
c0021aa3:	5d                   	pop    ebp
c0021aa4:	c3                   	ret    
c0021aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0021aa8:	89 fd                	mov    ebp,edi
c0021aaa:	85 ff                	test   edi,edi
c0021aac:	75 0b                	jne    c0021ab9 <__umoddi3+0x45>
c0021aae:	b8 01 00 00 00       	mov    eax,0x1
c0021ab3:	31 d2                	xor    edx,edx
c0021ab5:	f7 f7                	div    edi
c0021ab7:	89 c5                	mov    ebp,eax
c0021ab9:	89 d8                	mov    eax,ebx
c0021abb:	31 d2                	xor    edx,edx
c0021abd:	f7 f5                	div    ebp
c0021abf:	89 f0                	mov    eax,esi
c0021ac1:	f7 f5                	div    ebp
c0021ac3:	89 d0                	mov    eax,edx
c0021ac5:	eb d4                	jmp    c0021a9b <__umoddi3+0x27>
c0021ac7:	90                   	nop
c0021ac8:	89 f1                	mov    ecx,esi
c0021aca:	39 d8                	cmp    eax,ebx
c0021acc:	76 0a                	jbe    c0021ad8 <__umoddi3+0x64>
c0021ace:	89 f0                	mov    eax,esi
c0021ad0:	83 c4 1c             	add    esp,0x1c
c0021ad3:	5b                   	pop    ebx
c0021ad4:	5e                   	pop    esi
c0021ad5:	5f                   	pop    edi
c0021ad6:	5d                   	pop    ebp
c0021ad7:	c3                   	ret    
c0021ad8:	0f bd e8             	bsr    ebp,eax
c0021adb:	83 f5 1f             	xor    ebp,0x1f
c0021ade:	75 1c                	jne    c0021afc <__umoddi3+0x88>
c0021ae0:	39 d8                	cmp    eax,ebx
c0021ae2:	72 04                	jb     c0021ae8 <__umoddi3+0x74>
c0021ae4:	39 f7                	cmp    edi,esi
c0021ae6:	77 08                	ja     c0021af0 <__umoddi3+0x7c>
c0021ae8:	89 da                	mov    edx,ebx
c0021aea:	29 fe                	sub    esi,edi
c0021aec:	19 c2                	sbb    edx,eax
c0021aee:	89 f1                	mov    ecx,esi
c0021af0:	89 c8                	mov    eax,ecx
c0021af2:	83 c4 1c             	add    esp,0x1c
c0021af5:	5b                   	pop    ebx
c0021af6:	5e                   	pop    esi
c0021af7:	5f                   	pop    edi
c0021af8:	5d                   	pop    ebp
c0021af9:	c3                   	ret    
c0021afa:	66 90                	xchg   ax,ax
c0021afc:	ba 20 00 00 00       	mov    edx,0x20
c0021b01:	29 ea                	sub    edx,ebp
c0021b03:	89 e9                	mov    ecx,ebp
c0021b05:	d3 e0                	shl    eax,cl
c0021b07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b0b:	89 f8                	mov    eax,edi
c0021b0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b11:	88 d1                	mov    cl,dl
c0021b13:	d3 e8                	shr    eax,cl
c0021b15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021b19:	09 c1                	or     ecx,eax
c0021b1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021b1f:	89 e9                	mov    ecx,ebp
c0021b21:	d3 e7                	shl    edi,cl
c0021b23:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021b27:	89 d8                	mov    eax,ebx
c0021b29:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b2d:	88 d1                	mov    cl,dl
c0021b2f:	d3 e8                	shr    eax,cl
c0021b31:	89 c7                	mov    edi,eax
c0021b33:	89 e9                	mov    ecx,ebp
c0021b35:	d3 e3                	shl    ebx,cl
c0021b37:	89 f0                	mov    eax,esi
c0021b39:	88 d1                	mov    cl,dl
c0021b3b:	d3 e8                	shr    eax,cl
c0021b3d:	09 d8                	or     eax,ebx
c0021b3f:	89 e9                	mov    ecx,ebp
c0021b41:	d3 e6                	shl    esi,cl
c0021b43:	89 f3                	mov    ebx,esi
c0021b45:	89 fa                	mov    edx,edi
c0021b47:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021b4b:	89 d1                	mov    ecx,edx
c0021b4d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021b51:	89 c6                	mov    esi,eax
c0021b53:	89 d7                	mov    edi,edx
c0021b55:	39 d1                	cmp    ecx,edx
c0021b57:	72 27                	jb     c0021b80 <__umoddi3+0x10c>
c0021b59:	74 21                	je     c0021b7c <__umoddi3+0x108>
c0021b5b:	89 ca                	mov    edx,ecx
c0021b5d:	29 f3                	sub    ebx,esi
c0021b5f:	19 fa                	sbb    edx,edi
c0021b61:	89 d0                	mov    eax,edx
c0021b63:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021b67:	d3 e0                	shl    eax,cl
c0021b69:	89 e9                	mov    ecx,ebp
c0021b6b:	d3 eb                	shr    ebx,cl
c0021b6d:	09 d8                	or     eax,ebx
c0021b6f:	d3 ea                	shr    edx,cl
c0021b71:	83 c4 1c             	add    esp,0x1c
c0021b74:	5b                   	pop    ebx
c0021b75:	5e                   	pop    esi
c0021b76:	5f                   	pop    edi
c0021b77:	5d                   	pop    ebp
c0021b78:	c3                   	ret    
c0021b79:	8d 76 00             	lea    esi,[esi+0x0]
c0021b7c:	39 c3                	cmp    ebx,eax
c0021b7e:	73 db                	jae    c0021b5b <__umoddi3+0xe7>
c0021b80:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021b84:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021b88:	89 d7                	mov    edi,edx
c0021b8a:	89 c6                	mov    esi,eax
c0021b8c:	eb cd                	jmp    c0021b5b <__umoddi3+0xe7>

Disassembly of section .init:

c0021b8e <_init>:
c0021b8e:	55                   	push   ebp
c0021b8f:	89 e5                	mov    ebp,esp
c0021b91:	e8 5e e5 fd ff       	call   c00000f4 <frame_dummy>
c0021b96:	e8 e5 fa ff ff       	call   c0021680 <__do_global_ctors_aux>
c0021b9b:	5d                   	pop    ebp
c0021b9c:	c3                   	ret    

Disassembly of section .fini:

c0021b9d <_fini>:
c0021b9d:	55                   	push   ebp
c0021b9e:	89 e5                	mov    ebp,esp
c0021ba0:	e8 df e4 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021ba5:	5d                   	pop    ebp
c0021ba6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021ba8 <DriverlessDevice::~DriverlessDevice()>:
c0021ba8:	ba 3c 36 02 c0       	mov    edx,0xc002363c
c0021bad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bb1:	89 10                	mov    DWORD PTR [eax],edx
c0021bb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bb7:	50                   	push   eax
c0021bb8:	e8 3b 7d fe ff       	call   c00098f8 <Device::~Device()>
c0021bbd:	83 c4 04             	add    esp,0x4
c0021bc0:	90                   	nop
c0021bc1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021bc2 <DriverlessDevice::~DriverlessDevice()>:
c0021bc2:	83 ec 0c             	sub    esp,0xc
c0021bc5:	83 ec 0c             	sub    esp,0xc
c0021bc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bcc:	e8 d7 ff ff ff       	call   c0021ba8 <DriverlessDevice::~DriverlessDevice()>
c0021bd1:	83 c4 10             	add    esp,0x10
c0021bd4:	83 ec 08             	sub    esp,0x8
c0021bd7:	68 58 01 00 00       	push   0x158
c0021bdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021be0:	e8 d7 b6 fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0021be5:	83 c4 10             	add    esp,0x10
c0021be8:	83 c4 0c             	add    esp,0xc
c0021beb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021bec <LinkedList<Device>::addElement(Device*)>:
c0021bec:	83 ec 0c             	sub    esp,0xc
c0021bef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021bf4:	75 10                	jne    c0021c06 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021bf6:	83 ec 0c             	sub    esp,0xc
c0021bf9:	68 d0 35 02 c0       	push   0xc00235d0
c0021bfe:	e8 e1 df fe ff       	call   c000fbe4 <KePanic(char const*)>
c0021c03:	83 c4 10             	add    esp,0x10
c0021c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c0c:	85 c0                	test   eax,eax
c0021c0e:	74 3a                	je     c0021c4a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c17:	85 c0                	test   eax,eax
c0021c19:	74 2f                	je     c0021c4a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c26:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c3e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021c48:	eb 68                	jmp    c0021cb2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c50:	85 c0                	test   eax,eax
c0021c52:	75 4e                	jne    c0021ca2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c5b:	85 c0                	test   eax,eax
c0021c5d:	75 43                	jne    c0021ca2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c67:	89 10                	mov    DWORD PTR [eax],edx
c0021c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c7b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c8c:	85 c0                	test   eax,eax
c0021c8e:	74 22                	je     c0021cb2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021c90:	83 ec 0c             	sub    esp,0xc
c0021c93:	68 f2 35 02 c0       	push   0xc00235f2
c0021c98:	e8 47 df fe ff       	call   c000fbe4 <KePanic(char const*)>
c0021c9d:	83 c4 10             	add    esp,0x10
c0021ca0:	eb 10                	jmp    c0021cb2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021ca2:	83 ec 0c             	sub    esp,0xc
c0021ca5:	68 fc 35 02 c0       	push   0xc00235fc
c0021caa:	e8 35 df fe ff       	call   c000fbe4 <KePanic(char const*)>
c0021caf:	83 c4 10             	add    esp,0x10
c0021cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021cb9:	8d 50 01             	lea    edx,[eax+0x1]
c0021cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021cc3:	90                   	nop
c0021cc4:	83 c4 0c             	add    esp,0xc
c0021cc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021cc8 <LinkedList<Device>::LinkedList()>:
c0021cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ccc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021cd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021cdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ce1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021ce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cf6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021cfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d01:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021d08:	90                   	nop
c0021d09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021d0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d10:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d12:	85 c0                	test   eax,eax
c0021d14:	75 0e                	jne    c0021d24 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021d16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d1d:	85 c0                	test   eax,eax
c0021d1f:	75 03                	jne    c0021d24 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021d21:	b0 01                	mov    al,0x1
c0021d23:	c3                   	ret    
c0021d24:	b0 00                	mov    al,0x0
c0021d26:	90                   	nop
c0021d27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021d28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d2e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021d30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021d30:	83 ec 0c             	sub    esp,0xc
c0021d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d37:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d39:	85 c0                	test   eax,eax
c0021d3b:	75 17                	jne    c0021d54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021d3d:	83 ec 0c             	sub    esp,0xc
c0021d40:	68 6c 38 02 c0       	push   0xc002386c
c0021d45:	e8 9a de fe ff       	call   c000fbe4 <KePanic(char const*)>
c0021d4a:	83 c4 10             	add    esp,0x10
c0021d4d:	e9 96 00 00 00       	jmp    c0021de8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021d52:	66 90                	xchg   ax,ax
c0021d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021d5e:	85 c0                	test   eax,eax
c0021d60:	0f 95 c0             	setne  al
c0021d63:	0f b6 c0             	movzx  eax,al
c0021d66:	85 c0                	test   eax,eax
c0021d68:	74 12                	je     c0021d7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0021d6a:	83 ec 0c             	sub    esp,0xc
c0021d6d:	68 b7 38 02 c0       	push   0xc00238b7
c0021d72:	e8 6d de fe ff       	call   c000fbe4 <KePanic(char const*)>
c0021d77:	83 c4 10             	add    esp,0x10
c0021d7a:	66 90                	xchg   ax,ax
c0021d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d80:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d82:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021d85:	85 c0                	test   eax,eax
c0021d87:	0f 94 c0             	sete   al
c0021d8a:	0f b6 c0             	movzx  eax,al
c0021d8d:	85 c0                	test   eax,eax
c0021d8f:	74 33                	je     c0021dc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d95:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021daa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021dad:	83 f8 01             	cmp    eax,0x1
c0021db0:	74 22                	je     c0021dd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021db2:	83 ec 0c             	sub    esp,0xc
c0021db5:	68 90 38 02 c0       	push   0xc0023890
c0021dba:	e8 25 de fe ff       	call   c000fbe4 <KePanic(char const*)>
c0021dbf:	83 c4 10             	add    esp,0x10
c0021dc2:	eb 10                	jmp    c0021dd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dd1:	89 10                	mov    DWORD PTR [eax],edx
c0021dd3:	90                   	nop
c0021dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ddb:	8d 50 ff             	lea    edx,[eax-0x1]
c0021dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021de5:	8d 76 00             	lea    esi,[esi+0x0]
c0021de8:	83 c4 0c             	add    esp,0xc
c0021deb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021dec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021dec:	83 ec 0c             	sub    esp,0xc
c0021def:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021df4:	75 12                	jne    c0021e08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021df6:	83 ec 0c             	sub    esp,0xc
c0021df9:	68 d0 35 02 c0       	push   0xc00235d0
c0021dfe:	e8 e1 dd fe ff       	call   c000fbe4 <KePanic(char const*)>
c0021e03:	83 c4 10             	add    esp,0x10
c0021e06:	66 90                	xchg   ax,ax
c0021e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e0e:	85 c0                	test   eax,eax
c0021e10:	74 36                	je     c0021e48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e19:	85 c0                	test   eax,eax
c0021e1b:	74 2b                	je     c0021e48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e28:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021e44:	eb 6a                	jmp    c0021eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021e46:	66 90                	xchg   ax,ax
c0021e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e4e:	85 c0                	test   eax,eax
c0021e50:	75 4e                	jne    c0021ea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e59:	85 c0                	test   eax,eax
c0021e5b:	75 43                	jne    c0021ea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e65:	89 10                	mov    DWORD PTR [eax],edx
c0021e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021e87:	85 c0                	test   eax,eax
c0021e89:	74 25                	je     c0021eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021e8b:	83 ec 0c             	sub    esp,0xc
c0021e8e:	68 f2 35 02 c0       	push   0xc00235f2
c0021e93:	e8 4c dd fe ff       	call   c000fbe4 <KePanic(char const*)>
c0021e98:	83 c4 10             	add    esp,0x10
c0021e9b:	eb 13                	jmp    c0021eb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0021ea0:	83 ec 0c             	sub    esp,0xc
c0021ea3:	68 fc 35 02 c0       	push   0xc00235fc
c0021ea8:	e8 37 dd fe ff       	call   c000fbe4 <KePanic(char const*)>
c0021ead:	83 c4 10             	add    esp,0x10
c0021eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021eb7:	8d 50 01             	lea    edx,[eax+0x1]
c0021eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ebe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ec1:	90                   	nop
c0021ec2:	83 c4 0c             	add    esp,0xc
c0021ec5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021ec8 <ACPI::~ACPI()>:
c0021ec8:	83 ec 0c             	sub    esp,0xc
c0021ecb:	ba ec 3c 02 c0       	mov    edx,0xc0023cec
c0021ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed4:	89 10                	mov    DWORD PTR [eax],edx
c0021ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eda:	83 ec 0c             	sub    esp,0xc
c0021edd:	50                   	push   eax
c0021ede:	e8 15 7a fe ff       	call   c00098f8 <Device::~Device()>
c0021ee3:	83 c4 10             	add    esp,0x10
c0021ee6:	90                   	nop
c0021ee7:	83 c4 0c             	add    esp,0xc
c0021eea:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021eec <ACPI::~ACPI()>:
c0021eec:	83 ec 0c             	sub    esp,0xc
c0021eef:	83 ec 0c             	sub    esp,0xc
c0021ef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ef6:	e8 cd ff ff ff       	call   c0021ec8 <ACPI::~ACPI()>
c0021efb:	83 c4 10             	add    esp,0x10
c0021efe:	83 ec 08             	sub    esp,0x8
c0021f01:	68 64 12 00 00       	push   0x1264
c0021f06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f0a:	e8 ad b3 fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0021f0f:	83 c4 10             	add    esp,0x10
c0021f12:	83 c4 0c             	add    esp,0xc
c0021f15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021f18 <LinkedList<Device>::~LinkedList()>:
c0021f18:	90                   	nop
c0021f19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021f1c <LinkedList<Device>::isEmpty()>:
c0021f1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f20:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f22:	85 c0                	test   eax,eax
c0021f24:	75 0e                	jne    c0021f34 <LinkedList<Device>::isEmpty()+0x18>
c0021f26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f2d:	85 c0                	test   eax,eax
c0021f2f:	75 03                	jne    c0021f34 <LinkedList<Device>::isEmpty()+0x18>
c0021f31:	b0 01                	mov    al,0x1
c0021f33:	c3                   	ret    
c0021f34:	b0 00                	mov    al,0x0
c0021f36:	90                   	nop
c0021f37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021f38 <LinkedList<Device>::getFirstElement()>:
c0021f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f3e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021f40 <LinkedList<Device>::removeFirst()>:
c0021f40:	83 ec 0c             	sub    esp,0xc
c0021f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f47:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f49:	85 c0                	test   eax,eax
c0021f4b:	75 17                	jne    c0021f64 <LinkedList<Device>::removeFirst()+0x24>
c0021f4d:	83 ec 0c             	sub    esp,0xc
c0021f50:	68 6c 38 02 c0       	push   0xc002386c
c0021f55:	e8 8a dc fe ff       	call   c000fbe4 <KePanic(char const*)>
c0021f5a:	83 c4 10             	add    esp,0x10
c0021f5d:	e9 92 00 00 00       	jmp    c0021ff4 <LinkedList<Device>::removeFirst()+0xb4>
c0021f62:	66 90                	xchg   ax,ax
c0021f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f6b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021f71:	85 c0                	test   eax,eax
c0021f73:	74 13                	je     c0021f88 <LinkedList<Device>::removeFirst()+0x48>
c0021f75:	83 ec 0c             	sub    esp,0xc
c0021f78:	68 b7 38 02 c0       	push   0xc00238b7
c0021f7d:	e8 62 dc fe ff       	call   c000fbe4 <KePanic(char const*)>
c0021f82:	83 c4 10             	add    esp,0x10
c0021f85:	8d 76 00             	lea    esi,[esi+0x0]
c0021f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f8e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021f94:	85 c0                	test   eax,eax
c0021f96:	75 34                	jne    c0021fcc <LinkedList<Device>::removeFirst()+0x8c>
c0021f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fa6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021fb4:	83 f8 01             	cmp    eax,0x1
c0021fb7:	74 27                	je     c0021fe0 <LinkedList<Device>::removeFirst()+0xa0>
c0021fb9:	83 ec 0c             	sub    esp,0xc
c0021fbc:	68 90 38 02 c0       	push   0xc0023890
c0021fc1:	e8 1e dc fe ff       	call   c000fbe4 <KePanic(char const*)>
c0021fc6:	83 c4 10             	add    esp,0x10
c0021fc9:	eb 15                	jmp    c0021fe0 <LinkedList<Device>::removeFirst()+0xa0>
c0021fcb:	90                   	nop
c0021fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fd2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fdc:	89 10                	mov    DWORD PTR [eax],edx
c0021fde:	66 90                	xchg   ax,ax
c0021fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021fe7:	8d 50 ff             	lea    edx,[eax-0x1]
c0021fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0021ff4:	83 c4 0c             	add    esp,0xc
c0021ff7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021ff8 <Computer::~Computer()>:
c0021ff8:	83 ec 0c             	sub    esp,0xc
c0021ffb:	ba 6c 3e 02 c0       	mov    edx,0xc0023e6c
c0022000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022004:	89 10                	mov    DWORD PTR [eax],edx
c0022006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200a:	83 ec 0c             	sub    esp,0xc
c002200d:	50                   	push   eax
c002200e:	e8 e5 78 fe ff       	call   c00098f8 <Device::~Device()>
c0022013:	83 c4 10             	add    esp,0x10
c0022016:	90                   	nop
c0022017:	83 c4 0c             	add    esp,0xc
c002201a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002201c <Computer::~Computer()>:
c002201c:	83 ec 0c             	sub    esp,0xc
c002201f:	83 ec 0c             	sub    esp,0xc
c0022022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022026:	e8 cd ff ff ff       	call   c0021ff8 <Computer::~Computer()>
c002202b:	83 c4 10             	add    esp,0x10
c002202e:	83 ec 08             	sub    esp,0x8
c0022031:	68 68 01 00 00       	push   0x168
c0022036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002203a:	e8 7d b2 fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c002203f:	83 c4 10             	add    esp,0x10
c0022042:	83 c4 0c             	add    esp,0xc
c0022045:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022046 <idleCommon()>:
c0022046:	83 ec 0c             	sub    esp,0xc
c0022049:	fa                   	cli    
c002204a:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c0022050:	e8 cf 4c ff ff       	call   c0016d24 <schedule()>
c0022055:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c002205c:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c0022063:	75 01                	jne    c0022066 <idleCommon()+0x20>
c0022065:	fb                   	sti    
c0022066:	83 c4 0c             	add    esp,0xc
c0022069:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002206a <LinkedList<UnixFile>::~LinkedList()>:
c002206a:	90                   	nop
c002206b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002206c <LinkedList<UnixFile>::LinkedList()>:
c002206c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022070:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002207a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022081:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022085:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002208c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022090:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002209a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00220a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00220ac:	90                   	nop
c00220ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00220ae <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00220ae:	83 ec 0c             	sub    esp,0xc
c00220b1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00220b6:	75 10                	jne    c00220c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00220b8:	83 ec 0c             	sub    esp,0xc
c00220bb:	68 d0 35 02 c0       	push   0xc00235d0
c00220c0:	e8 1f db fe ff       	call   c000fbe4 <KePanic(char const*)>
c00220c5:	83 c4 10             	add    esp,0x10
c00220c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00220ce:	85 c0                	test   eax,eax
c00220d0:	74 34                	je     c0022106 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00220d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220d9:	85 c0                	test   eax,eax
c00220db:	74 29                	je     c0022106 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00220dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220e8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00220eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00220f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220fd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022104:	eb 65                	jmp    c002216b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002210a:	8b 00                	mov    eax,DWORD PTR [eax]
c002210c:	85 c0                	test   eax,eax
c002210e:	75 4b                	jne    c002215b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022114:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022117:	85 c0                	test   eax,eax
c0022119:	75 40                	jne    c002215b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002211b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002211f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022123:	89 10                	mov    DWORD PTR [eax],edx
c0022125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022129:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002212d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022134:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022137:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002213e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022142:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022145:	85 c0                	test   eax,eax
c0022147:	74 22                	je     c002216b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022149:	83 ec 0c             	sub    esp,0xc
c002214c:	68 f2 35 02 c0       	push   0xc00235f2
c0022151:	e8 8e da fe ff       	call   c000fbe4 <KePanic(char const*)>
c0022156:	83 c4 10             	add    esp,0x10
c0022159:	eb 10                	jmp    c002216b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002215b:	83 ec 0c             	sub    esp,0xc
c002215e:	68 fc 35 02 c0       	push   0xc00235fc
c0022163:	e8 7c da fe ff       	call   c000fbe4 <KePanic(char const*)>
c0022168:	83 c4 10             	add    esp,0x10
c002216b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022172:	8d 50 01             	lea    edx,[eax+0x1]
c0022175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022179:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002217c:	90                   	nop
c002217d:	83 c4 0c             	add    esp,0xc
c0022180:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022182 <LinkedList<UnixFile>::getFirstElement()>:
c0022182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022186:	8b 00                	mov    eax,DWORD PTR [eax]
c0022188:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002218a <LinkedList<UnixFile>::removeFirst()>:
c002218a:	83 ec 0c             	sub    esp,0xc
c002218d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022191:	8b 00                	mov    eax,DWORD PTR [eax]
c0022193:	85 c0                	test   eax,eax
c0022195:	75 12                	jne    c00221a9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022197:	83 ec 0c             	sub    esp,0xc
c002219a:	68 6c 38 02 c0       	push   0xc002386c
c002219f:	e8 40 da fe ff       	call   c000fbe4 <KePanic(char const*)>
c00221a4:	83 c4 10             	add    esp,0x10
c00221a7:	eb 7e                	jmp    c0022227 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00221a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00221b3:	85 c0                	test   eax,eax
c00221b5:	74 10                	je     c00221c7 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00221b7:	83 ec 0c             	sub    esp,0xc
c00221ba:	68 b7 38 02 c0       	push   0xc00238b7
c00221bf:	e8 20 da fe ff       	call   c000fbe4 <KePanic(char const*)>
c00221c4:	83 c4 10             	add    esp,0x10
c00221c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00221cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00221d0:	85 c0                	test   eax,eax
c00221d2:	75 33                	jne    c0022207 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00221d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00221de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00221e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00221f0:	83 f8 01             	cmp    eax,0x1
c00221f3:	74 21                	je     c0022216 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00221f5:	83 ec 0c             	sub    esp,0xc
c00221f8:	68 90 38 02 c0       	push   0xc0023890
c00221fd:	e8 e2 d9 fe ff       	call   c000fbe4 <KePanic(char const*)>
c0022202:	83 c4 10             	add    esp,0x10
c0022205:	eb 0f                	jmp    c0022216 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002220b:	8b 00                	mov    eax,DWORD PTR [eax]
c002220d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022214:	89 10                	mov    DWORD PTR [eax],edx
c0022216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002221a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002221d:	8d 50 ff             	lea    edx,[eax-0x1]
c0022220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022224:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022227:	83 c4 0c             	add    esp,0xc
c002222a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002222c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002222c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022230:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022233:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0022234 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0022234:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022238:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002223b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002223c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002223c:	90                   	nop
c002223d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022240 <ThreadControlBlock::ThreadControlBlock()>:
c0022240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022244:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002224b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002224f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002225a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022265:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002226c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022270:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0022277:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002227b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002227f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022283:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0022287:	90                   	nop
c0022288:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002228c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002228c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022290:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002229a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00222a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00222ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00222b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00222c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00222cc:	90                   	nop
c00222cd:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00222ce <IOAPIC::~IOAPIC()>:
c00222ce:	83 ec 0c             	sub    esp,0xc
c00222d1:	ba 30 53 02 c0       	mov    edx,0xc0025330
c00222d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222da:	89 10                	mov    DWORD PTR [eax],edx
c00222dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e0:	83 ec 0c             	sub    esp,0xc
c00222e3:	50                   	push   eax
c00222e4:	e8 0f 76 fe ff       	call   c00098f8 <Device::~Device()>
c00222e9:	83 c4 10             	add    esp,0x10
c00222ec:	90                   	nop
c00222ed:	83 c4 0c             	add    esp,0xc
c00222f0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00222f2 <IOAPIC::~IOAPIC()>:
c00222f2:	83 ec 0c             	sub    esp,0xc
c00222f5:	83 ec 0c             	sub    esp,0xc
c00222f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222fc:	e8 cd ff ff ff       	call   c00222ce <IOAPIC::~IOAPIC()>
c0022301:	83 c4 10             	add    esp,0x10
c0022304:	83 ec 08             	sub    esp,0x8
c0022307:	68 68 01 00 00       	push   0x168
c002230c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022310:	e8 a7 af fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0022315:	83 c4 10             	add    esp,0x10
c0022318:	83 c4 0c             	add    esp,0xc
c002231b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002231c <CPU::~CPU()>:
c002231c:	83 ec 0c             	sub    esp,0xc
c002231f:	ba a4 56 02 c0       	mov    edx,0xc00256a4
c0022324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022328:	89 10                	mov    DWORD PTR [eax],edx
c002232a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002232e:	83 ec 0c             	sub    esp,0xc
c0022331:	50                   	push   eax
c0022332:	e8 c1 75 fe ff       	call   c00098f8 <Device::~Device()>
c0022337:	83 c4 10             	add    esp,0x10
c002233a:	90                   	nop
c002233b:	83 c4 0c             	add    esp,0xc
c002233e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022340 <CPU::~CPU()>:
c0022340:	83 ec 0c             	sub    esp,0xc
c0022343:	83 ec 0c             	sub    esp,0xc
c0022346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002234a:	e8 cd ff ff ff       	call   c002231c <CPU::~CPU()>
c002234f:	83 c4 10             	add    esp,0x10
c0022352:	83 ec 08             	sub    esp,0x8
c0022355:	68 78 11 00 00       	push   0x1178
c002235a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002235e:	e8 59 af fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0022363:	83 c4 10             	add    esp,0x10
c0022366:	83 c4 0c             	add    esp,0xc
c0022369:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002236a <PCI::~PCI()>:
c002236a:	83 ec 0c             	sub    esp,0xc
c002236d:	ba 08 5c 02 c0       	mov    edx,0xc0025c08
c0022372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022376:	89 10                	mov    DWORD PTR [eax],edx
c0022378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237c:	83 ec 0c             	sub    esp,0xc
c002237f:	50                   	push   eax
c0022380:	e8 17 66 fe ff       	call   c000899c <Bus::~Bus()>
c0022385:	83 c4 10             	add    esp,0x10
c0022388:	90                   	nop
c0022389:	83 c4 0c             	add    esp,0xc
c002238c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002238e <PCI::~PCI()>:
c002238e:	83 ec 0c             	sub    esp,0xc
c0022391:	83 ec 0c             	sub    esp,0xc
c0022394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022398:	e8 cd ff ff ff       	call   c002236a <PCI::~PCI()>
c002239d:	83 c4 10             	add    esp,0x10
c00223a0:	83 ec 08             	sub    esp,0x8
c00223a3:	68 5c 01 00 00       	push   0x15c
c00223a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223ac:	e8 0b af fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c00223b1:	83 c4 10             	add    esp,0x10
c00223b4:	83 c4 0c             	add    esp,0xc
c00223b7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00223b8 <IDE::~IDE()>:
c00223b8:	83 ec 0c             	sub    esp,0xc
c00223bb:	ba 58 5d 02 c0       	mov    edx,0xc0025d58
c00223c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c4:	89 10                	mov    DWORD PTR [eax],edx
c00223c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ca:	83 ec 0c             	sub    esp,0xc
c00223cd:	50                   	push   eax
c00223ce:	e8 b5 79 fe ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c00223d3:	83 c4 10             	add    esp,0x10
c00223d6:	90                   	nop
c00223d7:	83 c4 0c             	add    esp,0xc
c00223da:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00223dc <IDE::~IDE()>:
c00223dc:	83 ec 0c             	sub    esp,0xc
c00223df:	83 ec 0c             	sub    esp,0xc
c00223e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223e6:	e8 cd ff ff ff       	call   c00223b8 <IDE::~IDE()>
c00223eb:	83 c4 10             	add    esp,0x10
c00223ee:	83 ec 08             	sub    esp,0x8
c00223f1:	68 70 02 00 00       	push   0x270
c00223f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223fa:	e8 bd ae fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c00223ff:	83 c4 10             	add    esp,0x10
c0022402:	83 c4 0c             	add    esp,0xc
c0022405:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022406 <SATABus::~SATABus()>:
c0022406:	83 ec 0c             	sub    esp,0xc
c0022409:	ba a8 5d 02 c0       	mov    edx,0xc0025da8
c002240e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022412:	89 10                	mov    DWORD PTR [eax],edx
c0022414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022418:	83 ec 0c             	sub    esp,0xc
c002241b:	50                   	push   eax
c002241c:	e8 67 79 fe ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0022421:	83 c4 10             	add    esp,0x10
c0022424:	90                   	nop
c0022425:	83 c4 0c             	add    esp,0xc
c0022428:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002242a <SATABus::~SATABus()>:
c002242a:	83 ec 0c             	sub    esp,0xc
c002242d:	83 ec 0c             	sub    esp,0xc
c0022430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022434:	e8 cd ff ff ff       	call   c0022406 <SATABus::~SATABus()>
c0022439:	83 c4 10             	add    esp,0x10
c002243c:	83 ec 08             	sub    esp,0x8
c002243f:	68 64 01 00 00       	push   0x164
c0022444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022448:	e8 6f ae fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c002244d:	83 c4 10             	add    esp,0x10
c0022450:	83 c4 0c             	add    esp,0xc
c0022453:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022454 <ATA::~ATA()>:
c0022454:	83 ec 0c             	sub    esp,0xc
c0022457:	ba 90 5e 02 c0       	mov    edx,0xc0025e90
c002245c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022460:	89 10                	mov    DWORD PTR [eax],edx
c0022462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022466:	83 ec 0c             	sub    esp,0xc
c0022469:	50                   	push   eax
c002246a:	e8 fb 79 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c002246f:	83 c4 10             	add    esp,0x10
c0022472:	90                   	nop
c0022473:	83 c4 0c             	add    esp,0xc
c0022476:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022478 <ATA::~ATA()>:
c0022478:	83 ec 0c             	sub    esp,0xc
c002247b:	83 ec 0c             	sub    esp,0xc
c002247e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022482:	e8 cd ff ff ff       	call   c0022454 <ATA::~ATA()>
c0022487:	83 c4 10             	add    esp,0x10
c002248a:	83 ec 08             	sub    esp,0x8
c002248d:	68 8c 01 00 00       	push   0x18c
c0022492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022496:	e8 21 ae fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c002249b:	83 c4 10             	add    esp,0x10
c002249e:	83 c4 0c             	add    esp,0xc
c00224a1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00224a2 <ATAPI::~ATAPI()>:
c00224a2:	83 ec 0c             	sub    esp,0xc
c00224a5:	ba d8 5e 02 c0       	mov    edx,0xc0025ed8
c00224aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ae:	89 10                	mov    DWORD PTR [eax],edx
c00224b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224b4:	83 ec 0c             	sub    esp,0xc
c00224b7:	50                   	push   eax
c00224b8:	e8 ad 79 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c00224bd:	83 c4 10             	add    esp,0x10
c00224c0:	90                   	nop
c00224c1:	83 c4 0c             	add    esp,0xc
c00224c4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00224c6 <ATAPI::~ATAPI()>:
c00224c6:	83 ec 0c             	sub    esp,0xc
c00224c9:	83 ec 0c             	sub    esp,0xc
c00224cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224d0:	e8 cd ff ff ff       	call   c00224a2 <ATAPI::~ATAPI()>
c00224d5:	83 c4 10             	add    esp,0x10
c00224d8:	83 ec 08             	sub    esp,0x8
c00224db:	68 84 01 00 00       	push   0x184
c00224e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224e4:	e8 d3 ad fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c00224e9:	83 c4 10             	add    esp,0x10
c00224ec:	83 c4 0c             	add    esp,0xc
c00224ef:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00224f0 <SATA::~SATA()>:
c00224f0:	83 ec 0c             	sub    esp,0xc
c00224f3:	ba 98 5f 02 c0       	mov    edx,0xc0025f98
c00224f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224fc:	89 10                	mov    DWORD PTR [eax],edx
c00224fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022502:	83 ec 0c             	sub    esp,0xc
c0022505:	50                   	push   eax
c0022506:	e8 5f 79 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c002250b:	83 c4 10             	add    esp,0x10
c002250e:	90                   	nop
c002250f:	83 c4 0c             	add    esp,0xc
c0022512:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022514 <SATA::~SATA()>:
c0022514:	83 ec 0c             	sub    esp,0xc
c0022517:	83 ec 0c             	sub    esp,0xc
c002251a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002251e:	e8 cd ff ff ff       	call   c00224f0 <SATA::~SATA()>
c0022523:	83 c4 10             	add    esp,0x10
c0022526:	83 ec 08             	sub    esp,0x8
c0022529:	68 7c 01 00 00       	push   0x17c
c002252e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022532:	e8 85 ad fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0022537:	83 c4 10             	add    esp,0x10
c002253a:	83 c4 0c             	add    esp,0xc
c002253d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002253e <SATAPI::~SATAPI()>:
c002253e:	83 ec 0c             	sub    esp,0xc
c0022541:	ba bc 60 02 c0       	mov    edx,0xc00260bc
c0022546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002254a:	89 10                	mov    DWORD PTR [eax],edx
c002254c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022550:	83 ec 0c             	sub    esp,0xc
c0022553:	50                   	push   eax
c0022554:	e8 11 79 fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c0022559:	83 c4 10             	add    esp,0x10
c002255c:	90                   	nop
c002255d:	83 c4 0c             	add    esp,0xc
c0022560:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022562 <SATAPI::~SATAPI()>:
c0022562:	83 ec 0c             	sub    esp,0xc
c0022565:	83 ec 0c             	sub    esp,0xc
c0022568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002256c:	e8 cd ff ff ff       	call   c002253e <SATAPI::~SATAPI()>
c0022571:	83 c4 10             	add    esp,0x10
c0022574:	83 ec 08             	sub    esp,0x8
c0022577:	68 84 01 00 00       	push   0x184
c002257c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022580:	e8 37 ad fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0022585:	83 c4 10             	add    esp,0x10
c0022588:	83 c4 0c             	add    esp,0xc
c002258b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002258c <APICTimer::~APICTimer()>:
c002258c:	83 ec 0c             	sub    esp,0xc
c002258f:	ba 10 61 02 c0       	mov    edx,0xc0026110
c0022594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022598:	89 10                	mov    DWORD PTR [eax],edx
c002259a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002259e:	83 ec 0c             	sub    esp,0xc
c00225a1:	50                   	push   eax
c00225a2:	e8 91 8a fe ff       	call   c000b038 <Timer::~Timer()>
c00225a7:	83 c4 10             	add    esp,0x10
c00225aa:	90                   	nop
c00225ab:	83 c4 0c             	add    esp,0xc
c00225ae:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00225b0 <APICTimer::~APICTimer()>:
c00225b0:	83 ec 0c             	sub    esp,0xc
c00225b3:	83 ec 0c             	sub    esp,0xc
c00225b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225ba:	e8 cd ff ff ff       	call   c002258c <APICTimer::~APICTimer()>
c00225bf:	83 c4 10             	add    esp,0x10
c00225c2:	83 ec 08             	sub    esp,0x8
c00225c5:	68 60 01 00 00       	push   0x160
c00225ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225ce:	e8 e9 ac fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c00225d3:	83 c4 10             	add    esp,0x10
c00225d6:	83 c4 0c             	add    esp,0xc
c00225d9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00225dc <PIT::~PIT()>:
c00225dc:	83 ec 0c             	sub    esp,0xc
c00225df:	ba 60 61 02 c0       	mov    edx,0xc0026160
c00225e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225e8:	89 10                	mov    DWORD PTR [eax],edx
c00225ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ee:	83 ec 0c             	sub    esp,0xc
c00225f1:	50                   	push   eax
c00225f2:	e8 41 8a fe ff       	call   c000b038 <Timer::~Timer()>
c00225f7:	83 c4 10             	add    esp,0x10
c00225fa:	90                   	nop
c00225fb:	83 c4 0c             	add    esp,0xc
c00225fe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022600 <PIT::~PIT()>:
c0022600:	83 ec 0c             	sub    esp,0xc
c0022603:	83 ec 0c             	sub    esp,0xc
c0022606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002260a:	e8 cd ff ff ff       	call   c00225dc <PIT::~PIT()>
c002260f:	83 c4 10             	add    esp,0x10
c0022612:	83 ec 08             	sub    esp,0x8
c0022615:	68 5c 01 00 00       	push   0x15c
c002261a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002261e:	e8 99 ac fe ff       	call   c000d2bc <operator delete(void*, unsigned long)>
c0022623:	83 c4 10             	add    esp,0x10
c0022626:	83 c4 0c             	add    esp,0xc
c0022629:	c3                   	ret    

Disassembly of section userkernel:

c0027000 <KiDefaultSignalHandlerAbort(int)>:
c0027000:	57                   	push   edi
c0027001:	b9 07 00 00 00       	mov    ecx,0x7
c0027006:	56                   	push   esi
c0027007:	be 63 43 02 c0       	mov    esi,0xc0024363
c002700c:	83 ec 24             	sub    esp,0x24
c002700f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0027013:	fc                   	cld    
c0027014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002701a:	50                   	push   eax
c002701b:	6a 00                	push   0x0
c002701d:	6a 38                	push   0x38
c002701f:	6a 01                	push   0x1
c0027021:	e8 2c 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0027026:	83 c4 34             	add    esp,0x34
c0027029:	5e                   	pop    esi
c002702a:	5f                   	pop    edi
c002702b:	c3                   	ret    

c002702c <KiDefaultSignalHandlerTerminate(int)>:
c002702c:	57                   	push   edi
c002702d:	b9 08 00 00 00       	mov    ecx,0x8
c0027032:	56                   	push   esi
c0027033:	be 7f 43 02 c0       	mov    esi,0xc002437f
c0027038:	83 ec 24             	sub    esp,0x24
c002703b:	89 e7                	mov    edi,esp
c002703d:	fc                   	cld    
c002703e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027040:	54                   	push   esp
c0027041:	6a 00                	push   0x0
c0027043:	6a 37                	push   0x37
c0027045:	6a 01                	push   0x1
c0027047:	e8 06 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002704c:	83 c4 34             	add    esp,0x34
c002704f:	5e                   	pop    esi
c0027050:	5f                   	pop    edi
c0027051:	c3                   	ret    

c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0027052:	53                   	push   ebx
c0027053:	83 ec 10             	sub    esp,0x10
c0027056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002705a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002705e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027066:	cd 60                	int    0x60
c0027068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002706c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027078:	83 c4 10             	add    esp,0x10
c002707b:	5b                   	pop    ebx
c002707c:	c3                   	ret    

Disassembly of section align_previous:

c0028000 <DO_NOT_DELETE()>:
c0028000:	c3                   	ret    
